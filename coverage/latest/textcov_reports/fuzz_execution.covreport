_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  95.9k|        {
  173|  95.9k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  95.9k|            switch (index.unsafe())
  176|  95.9k|            {
  177|  41.8k|                case 0:
  ------------------
  |  Branch (177:17): [True: 41.8k, False: 54.0k]
  ------------------
  178|  41.8k|                    return m_Arg1Type;
  179|       |
  180|  27.7k|                case 1:
  ------------------
  |  Branch (180:17): [True: 27.7k, False: 68.1k]
  ------------------
  181|  27.7k|                    return m_Arg2Type;
  182|       |
  183|  26.2k|                case 2:
  ------------------
  |  Branch (183:17): [True: 26.2k, False: 69.6k]
  ------------------
  184|  26.2k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 95.9k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  95.9k|#endif
  191|  95.9k|            }
  192|  95.9k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  24.0k|        {
  199|  24.0k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  24.0k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 21.5k, False: 2.47k]
  ------------------
  203|  21.5k|            {
  204|  21.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  21.5k|            }
  206|  24.0k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.1k, False: 12.8k]
  ------------------
  207|  11.1k|            {
  208|  11.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.1k|            }
  210|  24.0k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 4.85k, False: 19.1k]
  ------------------
  211|  4.85k|            {
  212|  4.85k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  4.85k|            }
  214|       |
  215|  24.0k|            return number_of_argument_required;
  216|  24.0k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  219|  7.64M|        {
  220|  7.64M|            return m_RegisterAccessType;
  221|  7.64M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  24.0k|        {
  225|  24.0k|            return m_Executor;
  226|  24.0k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  22.9M|    {
   38|  22.9M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  22.9M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  22.9M|                                         static_cast<underlying_t>(rhs));
   42|  22.9M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  22.9M|    {
   55|  22.9M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  22.9M|        return static_cast<underlying_t>(type & test) != 0;
   58|  22.9M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  40.8k|    {
   31|  40.8k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 653, False: 40.2k]
  ------------------
   32|    653|        {
   33|    653|            return true;
   34|    653|        }
   35|       |
   36|  40.2k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 533, False: 39.6k]
  ------------------
   37|    533|        {
   38|    533|            return true;
   39|    533|        }
   40|       |
   41|  39.6k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 14.4k, False: 25.2k]
  ------------------
   42|  14.4k|        {
   43|  14.4k|            return true;
   44|  14.4k|        }
   45|       |
   46|  25.2k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 234, False: 25.0k]
  ------------------
   47|    234|        {
   48|    234|            return true;
   49|    234|        }
   50|       |
   51|  25.0k|        return false;
   52|  25.2k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  25.0k|    {
   56|  25.0k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 25.0k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  25.0k|        const char first_char = token.at(0u);
   62|       |
   63|  25.0k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 5.34k, False: 19.6k]
  ------------------
   64|  5.34k|        {
   65|  5.34k|            return phi::is_alpha(first_char);
   66|  5.34k|        }
   67|       |
   68|  19.6k|        phi::boolean just_under_scores = (first_char == '_');
   69|  19.6k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 2.50k, False: 17.1k]
  |  Branch (69:13): [True: 1.93k, False: 17.7k]
  |  Branch (69:43): [True: 1.93k, False: 575]
  ------------------
   70|  1.93k|        {
   71|  1.93k|            return false;
   72|  1.93k|        }
   73|       |
   74|  56.7k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 46.9k, False: 9.73k]
  ------------------
   75|  46.9k|        {
   76|  46.9k|            const char c{token.at(index)};
   77|       |
   78|  46.9k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 38.4k, False: 8.50k]
  ------------------
   79|  38.4k|            {
   80|  38.4k|                just_under_scores = false;
   81|  38.4k|            }
   82|  8.50k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 467, False: 8.03k]
  ------------------
   83|    467|            {
   84|    467|                continue;
   85|    467|            }
   86|  8.03k|            else
   87|  8.03k|            {
   88|  8.03k|                return false;
   89|  8.03k|            }
   90|  46.9k|        }
   91|       |
   92|  9.73k|        return !just_under_scores;
   93|  17.7k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   131k|    {
  100|   131k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 131k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   131k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 19.0k, False: 112k]
  ------------------
  106|  19.0k|        {
  107|  19.0k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 2.68k, False: 16.3k]
  ------------------
  108|  2.68k|            {
  109|  2.68k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  2.68k|            }
  111|       |
  112|  16.3k|            return {};
  113|  19.0k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   112k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 309, False: 111k]
  ------------------
  117|    309|        {
  118|    309|            return {};
  119|    309|        }
  120|       |
  121|   111k|        std::int32_t number{0};
  122|   111k|        phi::boolean is_negative{false};
  123|   111k|        phi::boolean starts_with_zero{false};
  124|   111k|        phi::boolean parsing_binary{false};
  125|   111k|        phi::boolean parsing_octal{false};
  126|   111k|        phi::boolean parsing_hexadecimal{false};
  127|   111k|        phi::boolean parsed_something{false};
  128|   111k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   124k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 123k, False: 1.74k]
  ------------------
  133|   123k|        {
  134|   123k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   123k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 111k, False: 11.1k]
  ------------------
  138|   111k|            {
  139|   111k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 210, False: 111k]
  ------------------
  140|    210|                {
  141|    210|                    continue;
  142|    210|                }
  143|       |
  144|   111k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 906, False: 110k]
  ------------------
  145|    906|                {
  146|    906|                    is_negative = true;
  147|    906|                    continue;
  148|    906|                }
  149|       |
  150|   110k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 1.93k, False: 108k]
  ------------------
  151|  1.93k|                {
  152|  1.93k|                    starts_with_zero = true;
  153|  1.93k|                    continue;
  154|  1.93k|                }
  155|       |
  156|   108k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 203, False: 108k]
  ------------------
  157|    203|                {
  158|    203|                    return {};
  159|    203|                }
  160|   108k|            }
  161|       |
  162|       |            // Second character
  163|   119k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 4.22k, False: 115k]
  ------------------
  164|  4.22k|            {
  165|  4.22k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 1.93k, False: 2.29k]
  ------------------
  166|  1.93k|                {
  167|       |                    // Binary
  168|  1.93k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 273, False: 1.66k]
  |  Branch (168:37): [True: 197, False: 1.46k]
  ------------------
  169|    470|                    {
  170|    470|                        parsing_binary = true;
  171|    470|                        continue;
  172|    470|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  1.46k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 260, False: 1.20k]
  |  Branch (175:37): [True: 279, False: 925]
  ------------------
  176|    539|                    {
  177|    539|                        parsing_hexadecimal = true;
  178|    539|                        continue;
  179|    539|                    }
  180|       |
  181|       |                    // Octal
  182|    925|                    parsing_octal = true;
  183|    925|                }
  184|  4.22k|            }
  185|       |
  186|       |            // Handle seperators
  187|   118k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 527, False: 118k]
  ------------------
  188|    527|            {
  189|    527|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 194, False: 333]
  ------------------
  190|    194|                {
  191|    194|                    return {};
  192|    194|                }
  193|       |
  194|    333|                parsed_separator = true;
  195|    333|                continue;
  196|    527|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   118k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 2.66k, False: 115k]
  |  Branch (199:32): [True: 194, False: 2.46k]
  ------------------
  200|    194|            {
  201|       |                // Would underflow
  202|    194|                return {};
  203|    194|            }
  204|   118k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 115k, False: 2.46k]
  |  Branch (204:17): [True: 386, False: 117k]
  |  Branch (204:33): [True: 386, False: 115k]
  ------------------
  205|    386|            {
  206|       |                // Would overflow
  207|    386|                return {};
  208|    386|            }
  209|       |
  210|   117k|            parsed_separator = false;
  211|   117k|            parsed_something = true;
  212|       |
  213|   117k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 587, False: 117k]
  ------------------
  214|    587|            {
  215|    587|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 197, False: 390]
  ------------------
  216|    197|                {
  217|    197|                    return {};
  218|    197|                }
  219|       |
  220|    390|                number <<= 1;
  221|    390|                number |= (c - '0');
  222|    390|            }
  223|   117k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 1.06k, False: 116k]
  ------------------
  224|  1.06k|            {
  225|  1.06k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 443, False: 622]
  ------------------
  226|    443|                {
  227|    443|                    return {};
  228|    443|                }
  229|       |
  230|    622|                number <<= 3;
  231|    622|                number |= (c - '0');
  232|    622|            }
  233|   116k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.08k, False: 115k]
  ------------------
  234|  1.08k|            {
  235|  1.08k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 353, False: 734]
  ------------------
  236|    353|                {
  237|    353|                    return {};
  238|    353|                }
  239|       |
  240|    734|                number <<= 4;
  241|    734|                number |= phi::hex_digit_value(c).unsafe();
  242|    734|            }
  243|   115k|            else
  244|   115k|            {
  245|   115k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 108k, False: 7.00k]
  ------------------
  246|   108k|                {
  247|   108k|                    return {};
  248|   108k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  7.00k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 2.05k, False: 4.95k]
  |  Branch (251:36): [True: 197, False: 1.85k]
  ------------------
  252|    197|                {
  253|    197|                    return {};
  254|    197|                }
  255|       |
  256|  6.80k|                number *= 10;
  257|  6.80k|                number += (c - '0');
  258|  6.80k|            }
  259|   117k|        }
  260|       |
  261|  1.74k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.42k, False: 321]
  ------------------
  262|  1.42k|        {
  263|       |            // Check for over/underflow
  264|  1.42k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 486, False: 942]
  |  Branch (264:32): [True: 194, False: 292]
  ------------------
  265|    194|            {
  266|       |                // Would underflow
  267|    194|                return {};
  268|    194|            }
  269|  1.23k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 942, False: 292]
  |  Branch (269:17): [True: 222, False: 1.01k]
  |  Branch (269:33): [True: 222, False: 720]
  ------------------
  270|    222|            {
  271|       |                // Would overflow
  272|    222|                return {};
  273|    222|            }
  274|       |
  275|  1.01k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 292, False: 720]
  ------------------
  276|    292|            {
  277|    292|                return static_cast<std::int16_t>(-number);
  278|    292|            }
  279|       |
  280|    720|            return static_cast<std::int16_t>(number);
  281|  1.01k|        }
  282|       |
  283|    321|        return {};
  284|  1.74k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   396k|        {
   12|   396k|            m_Value = value;
   13|   396k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   154k|        {
   17|   154k|            return m_Value;
   18|   154k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  5.60k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  5.60k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 26.2k, False: 0]
  ------------------
   64|  26.2k|            {
   65|  26.2k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 5.60k, False: 20.6k]
  ------------------
   66|  5.60k|                {
   67|  5.60k|                    return &token;
   68|  5.60k|                }
   69|  26.2k|            }
   70|       |
   71|      0|            return nullptr;
   72|  5.60k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  33.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  33.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  33.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   132k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   132k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   132k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  57.2k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  57.2k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  57.2k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   598k|    {
   11|   598k|        m_Value = val;
   12|   598k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.68M|    {
   16|  1.68M|        return m_Value;
   17|  1.68M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  24.0k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  12.5k|    {
   25|  12.5k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  12.5k|        switch (argument_number.unsafe())
   28|  12.5k|        {
   29|  7.01k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 7.01k, False: 5.56k]
  ------------------
   30|  7.01k|                m_Arg1 = argument;
   31|  7.01k|                break;
   32|  3.34k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 3.34k, False: 9.23k]
  ------------------
   33|  3.34k|                m_Arg2 = argument;
   34|  3.34k|                break;
   35|  2.22k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 2.22k, False: 10.3k]
  ------------------
   36|  2.22k|                m_Arg3 = argument;
   37|  2.22k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 12.5k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  12.5k|#endif
   42|  12.5k|        }
   43|  12.5k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  7.64M|    {
   84|  7.64M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  7.64M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  7.64M|    {
   89|  7.64M|        return m_Info;
   90|  7.64M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  84.6k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  46.1M|    {
   28|  46.1M|        return m_Type;
   29|  46.1M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  9.12M|    {
   78|  9.12M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  9.12M|        return register_int;
   81|  9.12M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.48M|    {
   85|  1.48M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.48M|        return register_float;
   88|  1.48M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.44M|    {
   93|  1.44M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.44M|        return immediate_value;
   96|  1.44M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|      5|    {
  101|      5|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|      5|        return address_displacement;
  104|      5|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   445k|    {
  108|   445k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   445k|        return label;
  111|   445k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  6.86k|    {
  173|  6.86k|        InstructionArgument arg;
  174|  6.86k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  6.86k|        arg.register_int.register_id = id;
  176|  6.86k|        return arg;
  177|  6.86k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  1.80k|    {
  181|  1.80k|        InstructionArgument arg;
  182|  1.80k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  1.80k|        arg.register_float.register_id = id;
  184|  1.80k|        return arg;
  185|  1.80k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  1.18k|    {
  189|  1.18k|        InstructionArgument arg;
  190|  1.18k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  1.18k|        arg.immediate_value.signed_value = value;
  192|  1.18k|        return arg;
  193|  1.18k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  197|    199|    {
  198|    199|        InstructionArgument arg;
  199|    199|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  200|    199|        arg.address_displacement.register_id  = id;
  201|    199|        arg.address_displacement.displacement = displacement;
  202|    199|        return arg;
  203|    199|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  2.54k|    {
  207|  2.54k|        InstructionArgument arg;
  208|  2.54k|        arg.m_Type           = ArgumentType::Label;
  209|  2.54k|        arg.label.label_name = label_name;
  210|  2.54k|        return arg;
  211|  2.54k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|  50.0k|        {
  351|  50.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|  50.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|  50.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|  50.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|  50.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|  50.0k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|  50.0k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  51.9k|        {
  364|  51.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  51.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  51.9k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  51.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  51.9k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  51.9k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  28.8k|        {
  376|  28.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  28.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  28.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  28.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  28.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  28.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  28.8k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  42.1k|        {
  389|  42.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  42.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  42.1k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  42.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  42.1k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  42.1k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  24.3k|        {
  401|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  17.9k|        {
  416|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  17.9k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  17.9k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|   432k|        {
  431|   432k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|   432k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|   432k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|   432k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|   432k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|   432k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|   432k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|   169k|        {
  444|   169k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|   169k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|   169k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|   169k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|   169k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|   169k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|  43.3k|        {
  456|  43.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|  43.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|  43.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|  43.3k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|  43.3k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|  43.3k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|  43.3k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  35.2k|        {
  469|  35.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  35.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  35.2k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  35.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  35.2k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  35.2k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  13.8k|        {
  481|  13.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  13.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  13.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  13.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  13.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  13.8k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  13.8k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  13.8k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  13.4k|        {
  496|  13.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  13.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  13.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  13.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  13.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  13.4k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  13.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  13.4k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  25.6k|        {
  511|  25.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  25.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  25.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  25.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  25.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  25.6k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  25.6k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|   117k|        {
  524|   117k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|   117k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|   117k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|   117k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|   117k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|   117k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  32.2k|        {
  536|  32.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  32.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  32.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  32.2k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  32.2k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  32.2k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  32.2k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  41.2k|        {
  549|  41.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  41.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  41.2k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  41.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  41.2k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  41.2k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  17.4k|        {
  561|  17.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  17.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  17.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  17.4k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  17.4k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  17.4k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  17.9k|        {
  576|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  17.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  17.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  19.6k|        {
  591|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  19.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  19.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  19.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  19.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  19.6k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  19.6k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|  24.3k|        {
  604|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  606|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|  24.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|  24.3k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|  24.3k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  9.47k|        {
  616|  9.47k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  9.47k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  9.47k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  9.47k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  9.47k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  9.47k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  9.47k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|  24.3k|        {
  629|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  631|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|  24.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|  24.3k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|  24.3k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  30.4k|        {
  683|  30.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  30.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  30.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  30.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  30.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  30.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  30.4k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  49.4k|        {
  696|  49.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  49.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  49.4k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  49.4k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  49.4k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  49.4k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  49.4k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  55.0k|        {
  709|  55.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  55.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  55.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  55.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  55.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  55.0k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  55.0k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  71.6k|        {
  722|  71.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  71.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  71.6k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  71.6k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  71.6k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  71.6k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  71.6k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|  58.7k|        {
  735|  58.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|  58.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|  58.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|  58.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|  58.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|  58.7k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|  58.7k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  66.3k|        {
  748|  66.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  66.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  66.3k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  66.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  66.3k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  66.3k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  66.3k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  62.8k|        {
  761|  62.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  62.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  62.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  62.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  62.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  62.8k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  62.8k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  76.5k|        {
  774|  76.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  76.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  76.5k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  76.5k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  76.5k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  76.5k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  76.5k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  17.9k|        {
  787|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  17.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  17.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  17.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  17.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|  20.9k|        {
  801|  20.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|  20.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|  20.9k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|  20.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|  20.9k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|  20.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|  20.9k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  79.2k|        {
  814|  79.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  79.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  79.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  79.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  79.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  79.2k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  79.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  79.2k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  14.0k|        {
  828|  14.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  14.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  14.0k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  14.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  14.0k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  14.0k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  27.0k|        {
  841|  27.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  27.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  27.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  27.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  27.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  27.0k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  27.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  27.0k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|  13.3k|        {
  855|  13.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|  13.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|  13.3k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|  13.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|  13.3k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|  13.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|  13.3k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  13.5k|        {
  868|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  13.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  13.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  13.5k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 0, False: 13.5k]
  ------------------
  876|       |
  877|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  13.5k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  29.0k|        {
  883|  29.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  29.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  29.0k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  29.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  29.0k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 21.4k, False: 7.57k]
  ------------------
  890|       |
  891|  29.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  29.0k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  19.4k|        {
  897|  19.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  19.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  19.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  19.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  19.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  19.4k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 0, False: 19.4k]
  ------------------
  905|       |
  906|  19.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  19.4k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|  24.3k|        {
  912|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|  24.3k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 24.3k, False: 0]
  ------------------
  919|       |
  920|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|  24.3k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  42.9k|        {
  926|  42.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  42.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  42.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  42.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  42.9k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  42.9k|            processor.SetFPSRValue(new_value);
  935|  42.9k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  9.96k|        {
  940|  9.96k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  9.96k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  9.96k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  9.96k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  9.96k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  9.96k|            processor.SetFPSRValue(new_value);
  949|  9.96k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  25.3k|        {
  954|  25.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  25.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  25.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  25.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  25.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  25.3k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 3.08k, False: 22.2k]
  ------------------
  962|       |
  963|  25.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  25.3k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  29.5k|        {
  969|  29.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  29.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  29.5k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  29.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  29.5k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 0, False: 29.5k]
  ------------------
  976|       |
  977|  29.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  29.5k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  14.8k|        {
  983|  14.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  14.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  14.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  14.8k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 871, False: 14.0k]
  ------------------
  991|       |
  992|  14.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  14.8k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  24.3k|        {
  998|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  24.3k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 24.3k]
  ------------------
 1005|       |
 1006|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  24.3k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|  71.5k|        {
 1012|  71.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|  71.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|  71.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|  71.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|  71.5k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|  71.5k|            processor.SetFPSRValue(new_value);
 1021|  71.5k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|  25.2k|        {
 1026|  25.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|  25.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|  25.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|  25.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|  25.2k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|  25.2k|            processor.SetFPSRValue(new_value);
 1035|  25.2k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|   382k|        {
 1040|   382k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|   382k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|   382k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|   382k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|   382k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|   382k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 287k, False: 95.3k]
  ------------------
 1048|       |
 1049|   382k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|   382k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  27.6k|        {
 1055|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 27.6k, False: 0]
  ------------------
 1062|       |
 1063|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  17.9k|        {
 1069|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  17.9k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 17.9k, False: 0]
  ------------------
 1077|       |
 1078|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  17.9k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|  19.6k|        {
 1084|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 19.6k, False: 0]
  ------------------
 1091|       |
 1092|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  48.8k|        {
 1098|  48.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  48.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  48.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  48.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  48.8k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  48.8k|            processor.SetFPSRValue(new_value);
 1107|  48.8k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  43.6k|        {
 1112|  43.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  43.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  43.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  43.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  43.6k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  43.6k|            processor.SetFPSRValue(new_value);
 1121|  43.6k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  15.7k|        {
 1126|  15.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  15.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  15.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  15.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  15.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  15.7k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 13.7k, False: 2.00k]
  ------------------
 1134|       |
 1135|  15.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  15.7k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|  24.3k|        {
 1141|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 5.83k, False: 18.4k]
  ------------------
 1148|       |
 1149|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  11.0k|        {
 1155|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 11.0k, False: 0]
  ------------------
 1163|       |
 1164|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  11.0k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  19.6k|        {
 1170|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  19.6k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 3.33k, False: 16.3k]
  ------------------
 1177|       |
 1178|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  19.6k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  22.7k|        {
 1184|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  22.7k|            processor.SetFPSRValue(new_value);
 1193|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  27.6k|        {
 1198|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  27.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  27.6k|            processor.SetFPSRValue(new_value);
 1207|  27.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  19.4k|        {
 1212|  19.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  19.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  19.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  19.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  19.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  19.4k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 16.5k, False: 2.90k]
  ------------------
 1220|       |
 1221|  19.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  19.4k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  24.3k|        {
 1227|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  24.3k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 1, False: 24.3k]
  ------------------
 1234|       |
 1235|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  24.3k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|  24.3k|        {
 1241|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|  24.3k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|  24.3k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|  24.3k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 24.3k, False: 0]
  ------------------
 1249|       |
 1250|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|  24.3k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  23.5k|        {
 1256|  23.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  23.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  23.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  23.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  23.5k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 1, False: 23.5k]
  ------------------
 1263|       |
 1264|  23.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  23.5k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  23.9k|        {
 1270|  23.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  23.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  23.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  23.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  23.9k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  23.9k|            processor.SetFPSRValue(new_value);
 1279|  23.9k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  27.6k|        {
 1284|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  27.6k|            processor.SetFPSRValue(new_value);
 1293|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  20.4k|        {
 1298|  20.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  20.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  20.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  20.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  20.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  20.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 1.66k, False: 18.7k]
  ------------------
 1306|       |
 1307|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  20.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  26.1k|        {
 1313|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 22.4k, False: 3.66k]
  ------------------
 1320|       |
 1321|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  17.9k|        {
 1327|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  17.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 0, False: 17.9k]
  ------------------
 1335|       |
 1336|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  17.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  19.6k|        {
 1342|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  19.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 19.6k, False: 0]
  ------------------
 1349|       |
 1350|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  19.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  23.7k|        {
 1356|  23.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  23.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  23.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  23.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  23.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  23.7k|            processor.SetFPSRValue(new_value);
 1365|  23.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  22.7k|        {
 1370|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  22.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  22.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  22.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  22.7k|            processor.SetFPSRValue(new_value);
 1379|  22.7k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  76.1k|        {
 1384|  76.1k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  76.1k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  76.1k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  76.1k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 59.9k, False: 16.1k]
  ------------------
 1390|  59.9k|            {
 1391|  59.9k|                JumpToLabel(processor, jump_label.label_name);
 1392|  59.9k|            }
 1393|  76.1k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  45.7k|        {
 1398|  45.7k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  45.7k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  45.7k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  45.7k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 26.1k, False: 19.6k]
  ------------------
 1404|  26.1k|            {
 1405|  26.1k|                JumpToLabel(processor, jump_label.label_name);
 1406|  26.1k|            }
 1407|  45.7k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  50.1k|        {
 1412|  50.1k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  50.1k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  50.1k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 26.1k, False: 24.0k]
  ------------------
 1417|  26.1k|            {
 1418|  26.1k|                JumpToLabel(processor, jump_label.label_name);
 1419|  26.1k|            }
 1420|  50.1k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   104k|        {
 1425|   104k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   104k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   104k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 63.5k, False: 40.8k]
  ------------------
 1430|  63.5k|            {
 1431|  63.5k|                JumpToLabel(processor, jump_label.label_name);
 1432|  63.5k|            }
 1433|   104k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|   112k|        {
 1438|   112k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|   112k|            JumpToLabel(processor, jump_label.label_name);
 1441|   112k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  1.83M|        {
 1446|  1.83M|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  1.83M|            JumpToRegister(processor, jump_register.register_id);
 1449|  1.83M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  56.0k|        {
 1454|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  56.0k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1460|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|  27.3k|        {
 1465|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|  27.3k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1471|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  16.7k|        {
 1476|  16.7k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  16.7k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  16.7k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  16.7k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  16.7k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|  10.5k|        {
 1487|  10.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|  10.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|  10.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 1, False: 10.5k]
  ------------------
 1492|      1|            {
 1493|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      1|                return;
 1495|      1|            }
 1496|       |
 1497|  10.5k|            phi::i32 address = optional_address.value();
 1498|       |
 1499|  10.5k|            auto optional_value =
 1500|  10.5k|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1501|       |
 1502|  10.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 2, False: 10.5k]
  ------------------
 1503|      2|            {
 1504|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      2|                return;
 1507|      2|            }
 1508|       |
 1509|  10.5k|            phi::i32 value = optional_value.value();
 1510|       |
 1511|  10.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|  10.5k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|  19.6k|        {
 1517|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|  19.6k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|  19.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 1, False: 19.6k]
  ------------------
 1522|      1|            {
 1523|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      1|                return;
 1525|      1|            }
 1526|       |
 1527|  19.6k|            phi::i32 address = optional_address.value();
 1528|       |
 1529|  19.6k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|  19.6k|                    static_cast<std::size_t>(address.unsafe()));
 1531|       |
 1532|  19.6k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 2, False: 19.6k]
  ------------------
 1533|      2|            {
 1534|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      2|                return;
 1537|      2|            }
 1538|       |
 1539|  19.6k|            phi::u32 value = optional_value.value();
 1540|       |
 1541|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|  19.6k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|  24.3k|        {
 1547|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 1, False: 24.3k]
  ------------------
 1552|      1|            {
 1553|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      1|                return;
 1555|      1|            }
 1556|       |
 1557|  24.3k|            phi::i32 address = optional_address.value();
 1558|       |
 1559|  24.3k|            auto optional_value =
 1560|  24.3k|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1561|       |
 1562|  24.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 4, False: 24.3k]
  ------------------
 1563|      4|            {
 1564|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      4|                return;
 1567|      4|            }
 1568|       |
 1569|  24.3k|            phi::i32 value = optional_value.value();
 1570|       |
 1571|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|  24.3k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|  19.4k|        {
 1577|  19.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|  19.4k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|  19.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 1, False: 19.4k]
  ------------------
 1582|      1|            {
 1583|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      1|                return;
 1585|      1|            }
 1586|       |
 1587|  19.4k|            phi::i32 address = optional_address.value();
 1588|       |
 1589|  19.4k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|  19.4k|                    static_cast<std::size_t>(address.unsafe()));
 1591|       |
 1592|  19.4k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 5, False: 19.4k]
  ------------------
 1593|      5|            {
 1594|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      5|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      5|                return;
 1597|      5|            }
 1598|       |
 1599|  19.4k|            phi::u32 value = optional_value.value();
 1600|       |
 1601|  19.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|  19.4k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|  18.1k|        {
 1607|  18.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|  18.1k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|  18.1k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 1, False: 18.1k]
  ------------------
 1612|      1|            {
 1613|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      1|                return;
 1615|      1|            }
 1616|       |
 1617|  18.1k|            phi::i32 address = optional_address.value();
 1618|       |
 1619|  18.1k|            auto optional_value =
 1620|  18.1k|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1621|       |
 1622|  18.1k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 3, False: 18.1k]
  ------------------
 1623|      3|            {
 1624|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      3|                return;
 1627|      3|            }
 1628|       |
 1629|  18.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|  18.1k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|  11.7k|        {
 1635|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|  11.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|  11.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 1, False: 11.7k]
  ------------------
 1640|      1|            {
 1641|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      1|                return;
 1643|      1|            }
 1644|       |
 1645|  11.7k|            phi::i32 address = optional_address.value();
 1646|       |
 1647|  11.7k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|  11.7k|                    static_cast<std::size_t>(address.unsafe()));
 1649|       |
 1650|  11.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 3, False: 11.7k]
  ------------------
 1651|      3|            {
 1652|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      3|                return;
 1655|      3|            }
 1656|       |
 1657|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|  11.7k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|  14.0k|        {
 1663|  14.0k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|  14.0k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|  14.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 1, False: 14.0k]
  ------------------
 1668|      1|            {
 1669|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      1|                return;
 1671|      1|            }
 1672|       |
 1673|  14.0k|            phi::i32 address = optional_address.value();
 1674|       |
 1675|  14.0k|            auto optional_value =
 1676|  14.0k|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1677|       |
 1678|  14.0k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 5, False: 14.0k]
  ------------------
 1679|      5|            {
 1680|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      5|                return;
 1683|      5|            }
 1684|       |
 1685|  14.0k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|  14.0k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|  24.7k|        {
 1691|  24.7k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|  24.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|  24.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 1, False: 24.7k]
  ------------------
 1696|      1|            {
 1697|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      1|                return;
 1699|      1|            }
 1700|       |
 1701|  24.7k|            phi::i32 address = optional_address.value();
 1702|       |
 1703|  24.7k|            auto optional_value =
 1704|  24.7k|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1705|       |
 1706|  24.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 5, False: 24.7k]
  ------------------
 1707|      5|            {
 1708|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      5|                return;
 1711|      5|            }
 1712|       |
 1713|  24.7k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|  24.7k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1718|  23.5k|        {
 1719|  23.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1720|       |
 1721|  23.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1721:17): [True: 1, False: 23.5k]
  ------------------
 1722|      1|            {
 1723|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1724|      1|                return;
 1725|      1|            }
 1726|       |
 1727|  23.5k|            phi::i32 address = optional_address.value();
 1728|       |
 1729|  23.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1730|       |
 1731|  23.5k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1732|       |
 1733|  23.5k|            phi::boolean success =
 1734|  23.5k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1735|  23.5k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1736|       |
 1737|  23.5k|            if (!success)
  ------------------
  |  Branch (1737:17): [True: 5, False: 23.5k]
  ------------------
 1738|      5|            {
 1739|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1740|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1741|      5|            }
 1742|  23.5k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1746|  24.3k|        {
 1747|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1748|       |
 1749|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1749:17): [True: 1, False: 24.3k]
  ------------------
 1750|      1|            {
 1751|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1752|      1|                return;
 1753|      1|            }
 1754|       |
 1755|  24.3k|            phi::i32 address = optional_address.value();
 1756|       |
 1757|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1758|       |
 1759|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1760|       |
 1761|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1762|  24.3k|                    static_cast<std::size_t>(address.unsafe()),
 1763|  24.3k|                    static_cast<std::uint8_t>(value.unsafe()));
 1764|       |
 1765|  24.3k|            if (!success)
  ------------------
  |  Branch (1765:17): [True: 4, False: 24.3k]
  ------------------
 1766|      4|            {
 1767|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1768|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1769|      4|            }
 1770|  24.3k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1774|  24.2k|        {
 1775|  24.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1776|       |
 1777|  24.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1777:17): [True: 1, False: 24.2k]
  ------------------
 1778|      1|            {
 1779|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1780|      1|                return;
 1781|      1|            }
 1782|       |
 1783|  24.2k|            phi::i32 address = optional_address.value();
 1784|       |
 1785|  24.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1786|       |
 1787|  24.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1788|       |
 1789|  24.2k|            phi::boolean success =
 1790|  24.2k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1791|  24.2k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1792|       |
 1793|  24.2k|            if (!success)
  ------------------
  |  Branch (1793:17): [True: 3, False: 24.2k]
  ------------------
 1794|      3|            {
 1795|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1796|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1797|      3|            }
 1798|  24.2k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1802|  24.3k|        {
 1803|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1804|       |
 1805|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1805:17): [True: 1, False: 24.3k]
  ------------------
 1806|      1|            {
 1807|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1808|      1|                return;
 1809|      1|            }
 1810|       |
 1811|  24.3k|            phi::i32 address = optional_address.value();
 1812|       |
 1813|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1814|       |
 1815|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1816|       |
 1817|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1818|  24.3k|                    static_cast<std::size_t>(address.unsafe()),
 1819|  24.3k|                    static_cast<std::uint16_t>(value.unsafe()));
 1820|       |
 1821|  24.3k|            if (!success)
  ------------------
  |  Branch (1821:17): [True: 3, False: 24.3k]
  ------------------
 1822|      3|            {
 1823|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1824|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1825|      3|            }
 1826|  24.3k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1830|  21.2k|        {
 1831|  21.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1832|       |
 1833|  21.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1833:17): [True: 1, False: 21.2k]
  ------------------
 1834|      1|            {
 1835|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      1|                return;
 1837|      1|            }
 1838|       |
 1839|  21.2k|            phi::i32 address = optional_address.value();
 1840|       |
 1841|  21.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1842|       |
 1843|  21.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1844|       |
 1845|  21.2k|            phi::boolean success = processor.GetMemory().StoreWord(
 1846|  21.2k|                    static_cast<std::size_t>(address.unsafe()), value);
 1847|       |
 1848|  21.2k|            if (!success)
  ------------------
  |  Branch (1848:17): [True: 2, False: 21.2k]
  ------------------
 1849|      2|            {
 1850|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1851|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1852|      2|            }
 1853|  21.2k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1857|  17.9k|        {
 1858|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1859|       |
 1860|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1860:17): [True: 1, False: 17.9k]
  ------------------
 1861|      1|            {
 1862|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1863|      1|                return;
 1864|      1|            }
 1865|       |
 1866|  17.9k|            phi::i32 address = optional_address.value();
 1867|       |
 1868|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1869|       |
 1870|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1871|       |
 1872|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1873|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1874|       |
 1875|  17.9k|            if (!success)
  ------------------
  |  Branch (1875:17): [True: 3, False: 17.9k]
  ------------------
 1876|      3|            {
 1877|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1878|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1879|      3|            }
 1880|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1884|  18.3k|        {
 1885|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1886|       |
 1887|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1887:17): [True: 1, False: 18.3k]
  ------------------
 1888|      1|            {
 1889|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1890|      1|                return;
 1891|      1|            }
 1892|       |
 1893|  18.3k|            phi::i32 address = optional_address.value();
 1894|       |
 1895|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1896|       |
 1897|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1898|       |
 1899|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1900|  18.3k|                    static_cast<std::size_t>(address.unsafe()), value);
 1901|       |
 1902|  18.3k|            if (!success)
  ------------------
  |  Branch (1902:17): [True: 4, False: 18.3k]
  ------------------
 1903|      4|            {
 1904|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1905|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1906|      4|            }
 1907|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1911|  24.3k|        {
 1912|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1913|       |
 1914|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1914:17): [True: 2, False: 24.3k]
  ------------------
 1915|      2|            {
 1916|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      2|                return;
 1918|      2|            }
 1919|       |
 1920|  24.3k|            phi::i32 address = optional_address.value();
 1921|       |
 1922|  24.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1923|       |
 1924|  24.3k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1925|       |
 1926|  24.3k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1927|  24.3k|                    static_cast<std::size_t>(address.unsafe()), value);
 1928|       |
 1929|  24.3k|            if (!success)
  ------------------
  |  Branch (1929:17): [True: 4, False: 24.3k]
  ------------------
 1930|      4|            {
 1931|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1932|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1933|      4|            }
 1934|  24.3k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  13.7k|        {
 1939|  13.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  13.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  13.7k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  13.7k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  13.7k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  14.6k|        {
 1950|  14.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  14.6k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  14.6k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  14.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  14.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  13.8k|        {
 1988|  13.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  13.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  13.8k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  13.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  13.8k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  14.0k|        {
 1999|  14.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  14.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  14.0k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  14.0k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2004|  14.0k|            const float        converted_value_float =
 2005|  14.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  14.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  14.0k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  24.3k|        {
 2013|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  24.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  24.3k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  24.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  18.7k|        {
 2025|  18.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  18.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  18.7k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  18.7k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2030|  18.7k|            const float        converted_value_float =
 2031|  18.7k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  18.7k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  18.7k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  30.9k|        {
 2039|  30.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  30.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  30.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  30.9k|            const std::int32_t converted_value_int =
 2044|  30.9k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2045|  30.9k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  30.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  30.9k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  24.3k|        {
 2053|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  24.3k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  24.3k|            const std::int32_t converted_value_int =
 2058|  24.3k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2059|  24.3k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  24.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  24.3k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      2|        {
 2073|      2|            processor.Raise(Exception::Halt);
 2074|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|  1.68M|        {
 2079|       |            /* Do nothing */
 2080|  1.68M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   101k|    {
  169|   101k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   101k|        SafeWriteInteger(processor, dest_reg, res);
  172|   101k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|   891k|    {
  124|   891k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|   891k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|   891k|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 55.5k, False: 836k]
  ------------------
  129|  55.5k|        {
  130|  55.5k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  55.5k|            value = max + (value % (min - 1));
  133|  55.5k|        }
  134|       |        // Check for overflow
  135|   836k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 86.1k, False: 750k]
  ------------------
  136|  86.1k|        {
  137|  86.1k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  86.1k|            value = min + (value % (max + 1));
  140|  86.1k|        }
  141|       |
  142|   891k|        PHI_ASSERT(value >= min);
  143|   891k|        PHI_ASSERT(value <= max);
  144|       |
  145|   891k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  146|   891k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  71.0k|    {
  177|  71.0k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  71.0k|        SafeWriteInteger(processor, dest_reg, res);
  180|  71.0k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   256k|    {
  151|   256k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   256k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 27.5k, False: 229k]
  ------------------
  155|  27.5k|        {
  156|  27.5k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  27.5k|            value %= max + 1u;
  159|  27.5k|        }
  160|       |
  161|   256k|        PHI_ASSERT(value <= max);
  162|       |
  163|   256k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  164|   256k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|   602k|    {
  185|   602k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|   602k|        SafeWriteInteger(processor, dest_reg, res);
  188|   602k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|  78.5k|    {
  193|  78.5k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|  78.5k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 26.3k, False: 52.2k]
  ------------------
  196|  26.3k|        {
  197|  26.3k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  26.3k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  26.3k|            SafeWriteInteger(processor, dest_reg, res);
  201|  26.3k|            return;
  202|  26.3k|        }
  203|       |
  204|  52.2k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|  52.2k|        SafeWriteInteger(processor, dest_reg, res);
  207|  52.2k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|   143k|    {
  212|   143k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|   143k|        SafeWriteInteger(processor, dest_reg, res);
  215|   143k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  73.5k|    {
  220|  73.5k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  73.5k|        SafeWriteInteger(processor, dest_reg, res);
  223|  73.5k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  44.0k|    {
  228|  44.0k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 44.0k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  44.0k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  44.0k|        SafeWriteInteger(processor, dest_reg, res);
  237|  44.0k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  33.8k|    {
  242|  33.8k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 3, False: 33.7k]
  ------------------
  243|      3|        {
  244|      3|            processor.Raise(Exception::DivideByZero);
  245|      3|            return;
  246|      3|        }
  247|       |
  248|  33.7k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  33.7k|        SafeWriteInteger(processor, dest_reg, res);
  251|  33.7k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   205k|    {
  325|   205k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 47.9k, False: 157k]
  ------------------
  326|  47.9k|        {
  327|  47.9k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  47.9k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  47.9k|            return;
  332|  47.9k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   157k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 51.9k, False: 105k]
  ------------------
  336|  51.9k|        {
  337|  51.9k|            processor.Raise(Exception::BadShift);
  338|  51.9k|            return;
  339|  51.9k|        }
  340|       |
  341|   105k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   105k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   105k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|   126k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|   126k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 28.5k, False: 98.1k]
  ------------------
  258|  28.5k|        {
  259|  28.5k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  28.5k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  28.5k|            return;
  264|  28.5k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|  98.1k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 48.1k, False: 50.0k]
  ------------------
  268|  48.1k|        {
  269|  48.1k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  48.1k|            return;
  271|  48.1k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  50.0k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 27.3k, False: 22.6k]
  ------------------
  275|  27.3k|        {
  276|  27.3k|            processor.Raise(Exception::BadShift);
  277|  27.3k|            return;
  278|  27.3k|        }
  279|       |
  280|  22.6k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  22.6k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  22.6k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  22.6k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  22.6k|    {
   29|  22.6k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  22.6k|        return value & ~(-1 << (32 - n));
   32|  22.6k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   139k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   139k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 44.4k, False: 95.0k]
  ------------------
  292|  44.4k|        {
  293|  44.4k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  44.4k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 12.3k, False: 32.0k]
  ------------------
  297|  12.3k|            {
  298|       |                // Set every byte to 1
  299|  12.3k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  12.3k|            }
  301|  32.0k|            else
  302|  32.0k|            {
  303|       |                // Set every byte to 0
  304|  32.0k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  32.0k|            }
  306|  44.4k|            return;
  307|  44.4k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|  95.0k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 40.3k, False: 54.6k]
  ------------------
  311|  40.3k|        {
  312|  40.3k|            processor.Raise(Exception::BadShift);
  313|  40.3k|            return;
  314|  40.3k|        }
  315|       |
  316|  54.6k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  54.6k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  54.6k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|   344k|    {
   38|       |        // Lookup the label
   39|   344k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   40|   344k|        PHI_ASSERT(program != nullptr);
   41|   344k|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|   344k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 139, False: 344k]
  ------------------
   44|    139|        {
   45|    139|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    139|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    139|            processor.Raise(Exception::UnknownLabel);
   47|    139|            return;
   48|    139|        }
   49|       |
   50|   344k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|   344k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|   344k|        processor.SetNextProgramCounter(jump_point);
   55|   344k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|  1.85M|    {
   59|  1.85M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|  1.85M|        phi::u32 max_address =
   62|  1.85M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   63|  1.85M|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 29, False: 1.85M]
  ------------------
   64|     29|        {
   65|     29|            processor.Raise(Exception::AddressOutOfBounds);
   66|     29|            return;
   67|     29|        }
   68|       |
   69|  1.85M|        processor.SetNextProgramCounter(address.unsafe());
   70|  1.85M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|   321k|    {
  100|   321k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 321k, False: 5]
  ------------------
  101|   321k|        {
  102|   321k|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|   321k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 16, False: 321k]
  ------------------
  105|     16|            {
  106|     16|                return {};
  107|     16|            }
  108|       |
  109|   321k|            return imm_value.signed_value;
  110|   321k|        }
  111|       |
  112|      5|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      5|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      5|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|   321k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   77|      5|    {
   78|      5|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   79|       |
   80|      5|        phi::i32 address = adr_displacement.displacement + register_value;
   81|       |
   82|      5|        if (address < 0)
  ------------------
  |  Branch (82:13): [True: 1, False: 4]
  ------------------
   83|      1|        {
   84|      1|            processor.Raise(Exception::AddressOutOfBounds);
   85|      1|            return {};
   86|      1|        }
   87|       |
   88|      4|        return address;
   89|      5|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  7.64M|    {
   12|  7.64M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  7.64M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  7.64M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  7.64M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  7.64M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  7.64M|                   "Unexpected argument type for arg1");
   22|  7.64M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  7.64M|                   "Unexpected argument type for arg2");
   24|  7.64M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  7.64M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  7.64M|        m_Executor(processor, arg1, arg2, arg3);
   29|  7.64M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  24.0k|    {
  453|  24.0k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  24.0k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.77M|    {
   17|  1.77M|        m_ValueSigned = val;
   18|  1.77M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   249k|    {
   22|   249k|        m_ValueUnsigned = val;
   23|   249k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  3.70M|    {
   27|  3.70M|        return m_ValueSigned;
   28|  3.70M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  2.63M|    {
   32|  2.63M|        return m_ValueUnsigned;
   33|  2.63M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.75M|    {
   37|  2.75M|        return m_IsReadOnly;
   38|  2.75M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  10.5k|    {
   22|  10.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 2, False: 10.5k]
  ------------------
   23|      2|        {
   24|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      2|            return {};
   26|      2|        }
   27|       |
   28|  10.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|  10.5k|        return m_Values[raw_address].signed_value;
   31|  10.5k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  19.6k|    {
   35|  19.6k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2, False: 19.6k]
  ------------------
   36|      2|        {
   37|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      2|            return {};
   39|      2|        }
   40|       |
   41|  19.6k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|  19.6k|        return m_Values[raw_address].unsigned_value;
   43|  19.6k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  24.3k|    {
   47|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 3, False: 24.3k]
  ------------------
   48|      3|        {
   49|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      3|            return {};
   51|      3|        }
   52|       |
   53|  24.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|  24.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 1, False: 24.3k]
  ------------------
   56|      1|        {
   57|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      1|            return {};
   59|      1|        }
   60|       |
   61|  24.3k|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|  24.3k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  19.4k|    {
   66|  19.4k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 4, False: 19.4k]
  ------------------
   67|      4|        {
   68|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      4|            return {};
   70|      4|        }
   71|       |
   72|  19.4k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  19.4k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 1, False: 19.4k]
  ------------------
   75|      1|        {
   76|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      1|            return {};
   78|      1|        }
   79|       |
   80|  19.4k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  19.4k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  18.1k|    {
   85|  18.1k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2, False: 18.1k]
  ------------------
   86|      2|        {
   87|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      2|            return {};
   89|      2|        }
   90|       |
   91|  18.1k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  18.1k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 1, False: 18.1k]
  ------------------
   94|      1|        {
   95|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      1|            return {};
   97|      1|        }
   98|       |
   99|  18.1k|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  18.1k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  11.7k|    {
  104|  11.7k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 2, False: 11.7k]
  ------------------
  105|      2|        {
  106|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      2|            return {};
  108|      2|        }
  109|       |
  110|  11.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|  11.7k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 11.7k]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|  11.7k|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|  11.7k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  14.0k|    {
  123|  14.0k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 4, False: 14.0k]
  ------------------
  124|      4|        {
  125|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      4|            return {};
  127|      4|        }
  128|       |
  129|  14.0k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  14.0k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1, False: 14.0k]
  ------------------
  132|      1|        {
  133|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      1|            return {};
  135|      1|        }
  136|       |
  137|  14.0k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  14.0k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  24.7k|    {
  142|  24.7k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 4, False: 24.7k]
  ------------------
  143|      4|        {
  144|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      4|            return {};
  146|      4|        }
  147|       |
  148|  24.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|  24.7k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 1, False: 24.7k]
  ------------------
  151|      1|        {
  152|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      1|            return {};
  154|      1|        }
  155|       |
  156|  24.7k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|  24.7k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  23.5k|    {
  161|  23.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 5, False: 23.5k]
  ------------------
  162|      5|        {
  163|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      5|            return false;
  165|      5|        }
  166|       |
  167|  23.5k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|  23.5k|        return true;
  169|  23.5k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  24.3k|    {
  173|  24.3k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 4, False: 24.3k]
  ------------------
  174|      4|        {
  175|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|      4|            return false;
  177|      4|        }
  178|       |
  179|  24.3k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|  24.3k|        return true;
  181|  24.3k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  24.2k|    {
  185|  24.2k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 3, False: 24.2k]
  ------------------
  186|      3|        {
  187|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|      3|            return false;
  189|      3|        }
  190|       |
  191|  24.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|  24.2k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|  24.2k|        return true;
  195|  24.2k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  24.3k|    {
  199|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 3, False: 24.3k]
  ------------------
  200|      3|        {
  201|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|      3|            return false;
  203|      3|        }
  204|       |
  205|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|  24.3k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|  24.3k|        return true;
  209|  24.3k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  21.2k|    {
  213|  21.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 2, False: 21.2k]
  ------------------
  214|      2|        {
  215|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|      2|            return false;
  217|      2|        }
  218|       |
  219|  21.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|  21.2k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|  21.2k|        return true;
  223|  21.2k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  17.9k|    {
  227|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3, False: 17.9k]
  ------------------
  228|      3|        {
  229|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|      3|            return false;
  231|      3|        }
  232|       |
  233|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|  17.9k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|  17.9k|        return true;
  237|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  18.3k|    {
  241|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 4, False: 18.3k]
  ------------------
  242|      4|        {
  243|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|      4|            return false;
  245|      4|        }
  246|       |
  247|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  18.3k|        return true;
  251|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  24.3k|    {
  255|  24.3k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 4, False: 24.3k]
  ------------------
  256|      4|        {
  257|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|      4|            return false;
  259|      4|        }
  260|       |
  261|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  24.3k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  24.3k|        return true;
  265|  24.3k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|   321k|    {
  269|       |        // Cannot access anything before the starting address
  270|   321k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 35, False: 321k]
  ------------------
  271|     35|        {
  272|     35|            return false;
  273|     35|        }
  274|       |
  275|       |        // Check if address + size will overflow
  276|   321k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 321k]
  ------------------
  277|   321k|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|   321k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 321k]
  ------------------
  284|   321k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|   321k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 16, False: 321k]
  ------------------
  291|     16|        {
  292|     16|            return false;
  293|     16|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|   321k|        return true;
  297|   321k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|   112k|    {
  302|   112k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 112k, False: 0]
  |  Branch (302:30): [True: 112k, False: 6]
  ------------------
  303|   112k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  5.41k|    {
  307|  5.41k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 5.41M, False: 5.41k]
  ------------------
  308|  5.41M|        {
  309|  5.41M|            val.signed_value = 0;
  310|  5.41M|        }
  311|  5.41k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   155k|    {
   24|   155k|        switch (token.length().unsafe())
   25|   155k|        {
   26|       |            // 1 character OpCodes
   27|  21.3k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 21.3k, False: 133k]
  ------------------
   28|  21.3k|                const char c1 = token[0u];
   29|       |
   30|  21.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 9.34k, False: 11.9k]
  ------------------
   31|  9.34k|                {
   32|  9.34k|                    return OpCode::J;
   33|  9.34k|                }
   34|  11.9k|                break;
   35|  21.3k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  22.5k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 22.5k, False: 132k]
  ------------------
   39|  22.5k|                const char c1 = token[0u];
   40|  22.5k|                const char c2 = token[1u];
   41|       |
   42|  22.5k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 11.4k, False: 11.0k]
  ------------------
   43|  22.5k|                {
   44|  1.29k|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 1.29k, False: 21.2k]
  ------------------
   45|  1.61k|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 313, False: 22.2k]
  ------------------
   46|  1.61k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 1.25k, False: 356]
  ------------------
   47|  1.25k|                        {
   48|  1.25k|                            return OpCode::JR;
   49|  1.25k|                        }
   50|    356|                        break;
   51|       |
   52|  1.90k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 1.90k, False: 20.6k]
  ------------------
   53|  3.13k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.23k, False: 21.2k]
  ------------------
   54|  3.13k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 697, False: 2.44k]
  ------------------
   55|  3.13k|                        {
   56|    225|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 225, False: 2.91k]
  ------------------
   57|    427|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 202, False: 2.93k]
  ------------------
   58|    427|                                return OpCode::LB;
   59|    301|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 301, False: 2.83k]
  ------------------
   60|    495|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 194, False: 2.94k]
  ------------------
   61|    495|                                return OpCode::LD;
   62|    221|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 221, False: 2.91k]
  ------------------
   63|    427|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 206, False: 2.93k]
  ------------------
   64|    427|                                return OpCode::LF;
   65|    219|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 219, False: 2.91k]
  ------------------
   66|    430|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 211, False: 2.92k]
  ------------------
   67|    430|                                return OpCode::LH;
   68|    461|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 461, False: 2.67k]
  ------------------
   69|    661|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 200, False: 2.93k]
  ------------------
   70|    661|                                return OpCode::LW;
   71|  3.13k|                        }
   72|    697|                        break;
   73|    697|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 572, False: 21.9k]
  ------------------
   74|  1.36k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 791, False: 21.7k]
  ------------------
   75|  1.36k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 600, False: 763]
  ------------------
   76|    600|                        {
   77|    600|                            return OpCode::OR;
   78|    600|                        }
   79|    763|                        break;
   80|  3.74k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 3.74k, False: 18.7k]
  ------------------
   81|  4.95k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 1.21k, False: 21.3k]
  ------------------
   82|  4.95k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 1.11k, False: 3.84k]
  ------------------
   83|  4.95k|                        {
   84|    379|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 379, False: 4.57k]
  ------------------
   85|  1.03k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 659, False: 4.29k]
  ------------------
   86|  1.03k|                                return OpCode::SB;
   87|    197|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 197, False: 4.75k]
  ------------------
   88|    612|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 415, False: 4.54k]
  ------------------
   89|    612|                                return OpCode::SD;
   90|    199|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 199, False: 4.75k]
  ------------------
   91|  1.01k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 815, False: 4.14k]
  ------------------
   92|  1.01k|                                return OpCode::SF;
   93|    203|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 203, False: 4.75k]
  ------------------
   94|    699|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 496, False: 4.46k]
  ------------------
   95|    699|                                return OpCode::SH;
   96|    211|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 211, False: 4.74k]
  ------------------
   97|    480|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 269, False: 4.68k]
  ------------------
   98|    480|                                return OpCode::SW;
   99|  4.95k|                        }
  100|  1.11k|                        break;
  101|  22.5k|                }
  102|  14.3k|                break;
  103|  22.5k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  40.2k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 40.2k, False: 115k]
  ------------------
  107|  40.2k|                const char c1 = token[0u];
  108|  40.2k|                const char c2 = token[1u];
  109|  40.2k|                const char c3 = token[2u];
  110|       |
  111|  40.2k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 8.62k, False: 31.5k]
  ------------------
  112|  40.2k|                {
  113|    272|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 272, False: 39.9k]
  ------------------
  114|  1.35k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 1.08k, False: 39.1k]
  ------------------
  115|  1.35k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 654, False: 705]
  |  Branch (115:29): [True: 436, False: 923]
  |  Branch (115:45): [True: 436, False: 218]
  ------------------
  116|    436|                        {
  117|    436|                            return OpCode::ADD;
  118|    436|                        }
  119|    923|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 633, False: 290]
  |  Branch (119:34): [True: 411, False: 512]
  |  Branch (119:50): [True: 411, False: 222]
  ------------------
  120|    411|                        {
  121|    411|                            return OpCode::AND;
  122|    411|                        }
  123|    512|                        break;
  124|       |
  125|    512|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 422, False: 39.7k]
  ------------------
  126|  1.20k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 779, False: 39.4k]
  ------------------
  127|  1.20k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 799, False: 402]
  |  Branch (127:29): [True: 442, False: 759]
  |  Branch (127:45): [True: 442, False: 357]
  ------------------
  128|    442|                        {
  129|    442|                            return OpCode::DIV;
  130|    442|                        }
  131|    759|                        break;
  132|       |
  133|    759|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 243, False: 39.9k]
  ------------------
  134|  1.78k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 1.54k, False: 38.6k]
  ------------------
  135|  1.78k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.56k, False: 224]
  ------------------
  136|  1.56k|                        {
  137|  1.56k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 788, False: 774]
  ------------------
  138|    788|                            {
  139|    788|                                return OpCode::EQD;
  140|    788|                            }
  141|    774|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 532, False: 242]
  ------------------
  142|    532|                            {
  143|    532|                                return OpCode::EQF;
  144|    532|                            }
  145|  1.56k|                        }
  146|    466|                        break;
  147|       |
  148|  1.06k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.06k, False: 39.1k]
  ------------------
  149|  2.42k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 1.36k, False: 38.8k]
  ------------------
  150|  2.42k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.14k, False: 1.27k]
  ------------------
  151|  1.14k|                        {
  152|  1.14k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 532, False: 614]
  ------------------
  153|    532|                            {
  154|    532|                                return OpCode::GED;
  155|    532|                            }
  156|    614|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 402, False: 212]
  ------------------
  157|    402|                            {
  158|    402|                                return OpCode::GEF;
  159|    402|                            }
  160|  1.14k|                        }
  161|  1.27k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.05k, False: 223]
  ------------------
  162|  1.05k|                        {
  163|  1.05k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 404, False: 651]
  ------------------
  164|    404|                            {
  165|    404|                                return OpCode::GTD;
  166|    404|                            }
  167|    651|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 441, False: 210]
  ------------------
  168|    441|                            {
  169|    441|                                return OpCode::GTF;
  170|    441|                            }
  171|    651|                        }
  172|    645|                        break;
  173|       |
  174|    908|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 908, False: 39.3k]
  ------------------
  175|  1.16k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 255, False: 39.9k]
  ------------------
  176|  1.16k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 882, False: 281]
  |  Branch (176:29): [True: 567, False: 596]
  |  Branch (176:45): [True: 567, False: 315]
  ------------------
  177|    567|                        {
  178|    567|                            return OpCode::JAL;
  179|    567|                        }
  180|    596|                        break;
  181|       |
  182|  4.55k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 4.55k, False: 35.6k]
  ------------------
  183|  6.54k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 1.99k, False: 38.2k]
  ------------------
  184|  6.54k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 480, False: 6.06k]
  ------------------
  185|  6.54k|                        {
  186|    715|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 715, False: 5.82k]
  ------------------
  187|    912|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 197, False: 6.34k]
  ------------------
  188|    912|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 533, False: 379]
  ------------------
  189|    533|                                {
  190|    533|                                    return OpCode::LBU;
  191|    533|                                }
  192|    379|                                break;
  193|       |
  194|    393|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 393, False: 6.15k]
  ------------------
  195|  1.17k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 777, False: 5.76k]
  ------------------
  196|  1.17k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 548, False: 622]
  ------------------
  197|    548|                                {
  198|    548|                                    return OpCode::LED;
  199|    548|                                }
  200|    622|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 413, False: 209]
  ------------------
  201|    413|                                {
  202|    413|                                    return OpCode::LEF;
  203|    413|                                }
  204|    209|                                break;
  205|       |
  206|    427|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 427, False: 6.11k]
  ------------------
  207|  1.21k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 790, False: 5.75k]
  ------------------
  208|  1.21k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 403, False: 814]
  ------------------
  209|    403|                                {
  210|    403|                                    return OpCode::LHI;
  211|    403|                                }
  212|    814|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 405, False: 409]
  ------------------
  213|    405|                                {
  214|    405|                                    return OpCode::LHU;
  215|    405|                                }
  216|    409|                                break;
  217|       |
  218|  1.21k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 1.21k, False: 5.33k]
  ------------------
  219|  2.02k|                            case 't':
  ------------------
  |  Branch (219:29): [True: 816, False: 5.72k]
  ------------------
  220|  2.02k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 1.17k, False: 848]
  ------------------
  221|  1.17k|                                {
  222|  1.17k|                                    return OpCode::LTD;
  223|  1.17k|                                }
  224|    848|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 539, False: 309]
  ------------------
  225|    539|                                {
  226|    539|                                    return OpCode::LTF;
  227|    539|                                }
  228|    309|                                break;
  229|       |
  230|    504|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 504, False: 6.03k]
  ------------------
  231|    737|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 233, False: 6.31k]
  ------------------
  232|    737|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 529, False: 208]
  ------------------
  233|    529|                                {
  234|    529|                                    return OpCode::LWU;
  235|    529|                                }
  236|    208|                                break;
  237|  6.54k|                        }
  238|  1.99k|                        break;
  239|       |
  240|  3.83k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 3.83k, False: 36.3k]
  ------------------
  241|  4.71k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 879, False: 39.3k]
  ------------------
  242|  4.71k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 1.38k, False: 3.32k]
  ------------------
  243|  1.38k|                        {
  244|  1.38k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 670, False: 716]
  ------------------
  245|    670|                            {
  246|    670|                                return OpCode::NED;
  247|    670|                            }
  248|    716|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 403, False: 313]
  ------------------
  249|    403|                            {
  250|    403|                                return OpCode::NEF;
  251|    403|                            }
  252|  1.38k|                        }
  253|  3.32k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 3.09k, False: 226]
  |  Branch (253:34): [True: 2.90k, False: 421]
  |  Branch (253:50): [True: 2.90k, False: 195]
  ------------------
  254|  2.90k|                        {
  255|  2.90k|                            return OpCode::NOP;
  256|  2.90k|                        }
  257|       |
  258|    734|                        break;
  259|       |
  260|    734|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 544, False: 39.6k]
  ------------------
  261|  1.32k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 785, False: 39.4k]
  ------------------
  262|  1.32k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 944, False: 385]
  |  Branch (262:29): [True: 402, False: 927]
  |  Branch (262:45): [True: 402, False: 542]
  ------------------
  263|    402|                        {
  264|    402|                            return OpCode::ORI;
  265|    402|                        }
  266|    927|                        break;
  267|       |
  268|  3.69k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 3.69k, False: 36.5k]
  ------------------
  269|  10.0k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 6.31k, False: 33.8k]
  ------------------
  270|  10.0k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 327, False: 9.67k]
  ------------------
  271|  10.0k|                        {
  272|    419|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 419, False: 9.58k]
  ------------------
  273|    758|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 339, False: 9.66k]
  ------------------
  274|    758|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 549, False: 209]
  ------------------
  275|    549|                                {
  276|    549|                                    return OpCode::SBU;
  277|    549|                                }
  278|    209|                                break;
  279|       |
  280|    438|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 438, False: 9.56k]
  ------------------
  281|    639|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 201, False: 9.80k]
  ------------------
  282|    639|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 408, False: 231]
  ------------------
  283|    408|                                {
  284|    408|                                    return OpCode::SEQ;
  285|    408|                                }
  286|    231|                                break;
  287|       |
  288|    231|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 226, False: 9.77k]
  ------------------
  289|  1.16k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 934, False: 9.07k]
  ------------------
  290|  1.16k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 407, False: 753]
  ------------------
  291|    407|                                {
  292|    407|                                    return OpCode::SGE;
  293|    407|                                }
  294|    753|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 548, False: 205]
  ------------------
  295|    548|                                {
  296|    548|                                    return OpCode::SGT;
  297|    548|                                }
  298|    205|                                break;
  299|       |
  300|    392|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 392, False: 9.61k]
  ------------------
  301|    779|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 387, False: 9.61k]
  ------------------
  302|    779|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 550, False: 229]
  ------------------
  303|    550|                                {
  304|    550|                                    return OpCode::SHU;
  305|    550|                                }
  306|    229|                                break;
  307|       |
  308|  1.43k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 1.43k, False: 8.56k]
  ------------------
  309|  2.37k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 935, False: 9.06k]
  ------------------
  310|  2.37k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 264, False: 2.11k]
  ------------------
  311|  2.37k|                                {
  312|    207|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 207, False: 2.16k]
  ------------------
  313|    472|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 265, False: 2.10k]
  ------------------
  314|    472|                                        return OpCode::SLA;
  315|       |
  316|    196|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 196, False: 2.17k]
  ------------------
  317|    748|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 552, False: 1.82k]
  ------------------
  318|    748|                                        return OpCode::SLE;
  319|       |
  320|    225|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 225, False: 2.14k]
  ------------------
  321|    483|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 258, False: 2.11k]
  ------------------
  322|    483|                                        return OpCode::SLL;
  323|       |
  324|    198|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 198, False: 2.17k]
  ------------------
  325|    407|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 209, False: 2.16k]
  ------------------
  326|    407|                                        return OpCode::SLT;
  327|  2.37k|                                }
  328|    264|                                break;
  329|       |
  330|    720|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 720, False: 9.28k]
  ------------------
  331|    941|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 221, False: 9.78k]
  ------------------
  332|    941|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 537, False: 404]
  ------------------
  333|    537|                                {
  334|    537|                                    return OpCode::SNE;
  335|    537|                                }
  336|    404|                                break;
  337|       |
  338|    864|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 864, False: 9.14k]
  ------------------
  339|  1.35k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 495, False: 9.50k]
  ------------------
  340|  1.35k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 685, False: 674]
  ------------------
  341|    685|                                {
  342|    685|                                    return OpCode::SRA;
  343|    685|                                }
  344|    674|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 424, False: 250]
  ------------------
  345|    424|                                {
  346|    424|                                    return OpCode::SRL;
  347|    424|                                }
  348|    250|                                break;
  349|       |
  350|    809|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 809, False: 9.19k]
  ------------------
  351|  1.06k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 252, False: 9.75k]
  ------------------
  352|  1.06k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 818, False: 243]
  ------------------
  353|    818|                                {
  354|    818|                                    return OpCode::SUB;
  355|    818|                                }
  356|    243|                                break;
  357|       |
  358|    243|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 199, False: 9.80k]
  ------------------
  359|    606|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 407, False: 9.59k]
  ------------------
  360|    606|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 407, False: 199]
  ------------------
  361|    407|                                {
  362|    407|                                    return OpCode::SWU;
  363|    407|                                }
  364|    199|                                break;
  365|  10.0k|                        }
  366|       |
  367|  2.83k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 269, False: 39.9k]
  ------------------
  368|  3.62k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 791, False: 39.4k]
  ------------------
  369|  3.62k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 918, False: 2.70k]
  |  Branch (369:29): [True: 496, False: 3.12k]
  |  Branch (369:45): [True: 496, False: 422]
  ------------------
  370|    496|                        {
  371|    496|                            return OpCode::XOR;
  372|    496|                        }
  373|  3.12k|                        break;
  374|  40.2k|                }
  375|  18.3k|                break;
  376|  40.2k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  39.3k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 39.3k, False: 115k]
  ------------------
  380|  39.3k|                const char c1 = token[0u];
  381|  39.3k|                const char c2 = token[1u];
  382|  39.3k|                const char c3 = token[2u];
  383|  39.3k|                const char c4 = token[3u];
  384|       |
  385|  39.3k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 6.36k, False: 32.9k]
  ------------------
  386|  39.3k|                {
  387|    546|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 546, False: 38.8k]
  ------------------
  388|  4.14k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 3.60k, False: 35.7k]
  ------------------
  389|  4.14k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 389, False: 3.75k]
  ------------------
  390|  4.14k|                        {
  391|  2.20k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.20k, False: 1.93k]
  ------------------
  392|  2.55k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 350, False: 3.79k]
  ------------------
  393|  2.55k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 2.29k, False: 267]
  ------------------
  394|  2.29k|                                {
  395|  2.29k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 218, False: 2.07k]
  ------------------
  396|  2.29k|                                    {
  397|    197|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 197, False: 2.09k]
  ------------------
  398|    473|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 276, False: 2.01k]
  ------------------
  399|    473|                                            return OpCode::ADDD;
  400|       |
  401|    332|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 332, False: 1.95k]
  ------------------
  402|    642|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 310, False: 1.98k]
  ------------------
  403|    642|                                            return OpCode::ADDF;
  404|       |
  405|    322|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 322, False: 1.96k]
  ------------------
  406|    546|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 224, False: 2.06k]
  ------------------
  407|    546|                                            return OpCode::ADDI;
  408|       |
  409|    208|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 208, False: 2.08k]
  ------------------
  410|    412|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 204, False: 2.08k]
  ------------------
  411|    412|                                            return OpCode::ADDU;
  412|  2.29k|                                    }
  413|  2.29k|                                }
  414|    485|                                break;
  415|       |
  416|    875|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 875, False: 3.27k]
  ------------------
  417|  1.20k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 325, False: 3.82k]
  ------------------
  418|  1.20k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 857, False: 343]
  |  Branch (418:37): [True: 534, False: 666]
  |  Branch (418:53): [True: 534, False: 323]
  ------------------
  419|    534|                                {
  420|    534|                                    return OpCode::ANDI;
  421|    534|                                }
  422|       |
  423|    666|                                break;
  424|  4.14k|                        }
  425|  1.54k|                        break;
  426|       |
  427|  1.54k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 1.31k, False: 38.0k]
  ------------------
  428|  3.64k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 2.33k, False: 37.0k]
  ------------------
  429|  3.64k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 327, False: 3.32k]
  ------------------
  430|  3.64k|                        {
  431|    620|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 620, False: 3.02k]
  ------------------
  432|    814|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 194, False: 3.45k]
  ------------------
  433|    814|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 612, False: 202]
  |  Branch (433:37): [True: 417, False: 397]
  |  Branch (433:53): [True: 417, False: 195]
  ------------------
  434|    417|                                {
  435|    417|                                    return OpCode::BEQZ;
  436|    417|                                }
  437|    397|                                break;
  438|       |
  439|    471|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 471, False: 3.17k]
  ------------------
  440|  1.39k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 919, False: 2.73k]
  ------------------
  441|  1.39k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 1.19k, False: 194]
  ------------------
  442|  1.19k|                                {
  443|  1.19k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 576, False: 620]
  ------------------
  444|    576|                                    {
  445|    576|                                        return OpCode::BFPF;
  446|    576|                                    }
  447|    620|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 421, False: 199]
  ------------------
  448|    421|                                    {
  449|    421|                                        return OpCode::BFPT;
  450|    421|                                    }
  451|  1.19k|                                }
  452|    393|                                break;
  453|       |
  454|    890|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 890, False: 2.75k]
  ------------------
  455|  1.11k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 228, False: 3.42k]
  ------------------
  456|  1.11k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 744, False: 374]
  |  Branch (456:37): [True: 537, False: 581]
  |  Branch (456:53): [True: 537, False: 207]
  ------------------
  457|    537|                                {
  458|    537|                                    return OpCode::BNEZ;
  459|    537|                                }
  460|  3.64k|                        }
  461|  1.69k|                        break;
  462|       |
  463|  1.69k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.29k, False: 38.0k]
  ------------------
  464|  2.97k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 1.67k, False: 37.6k]
  ------------------
  465|  2.97k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 2.52k, False: 450]
  |  Branch (465:29): [True: 2.31k, False: 657]
  |  Branch (465:45): [True: 2.31k, False: 207]
  ------------------
  466|  2.31k|                        {
  467|  2.31k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 452, False: 1.86k]
  ------------------
  468|  2.31k|                            {
  469|    195|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 195, False: 2.11k]
  ------------------
  470|    389|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 194, False: 2.11k]
  ------------------
  471|    389|                                    return OpCode::DIVD;
  472|       |
  473|    194|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 194, False: 2.11k]
  ------------------
  474|    389|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 195, False: 2.11k]
  ------------------
  475|    389|                                    return OpCode::DIVF;
  476|       |
  477|    197|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 197, False: 2.11k]
  ------------------
  478|    404|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 207, False: 2.10k]
  ------------------
  479|    404|                                    return OpCode::DIVI;
  480|       |
  481|    228|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 228, False: 2.08k]
  ------------------
  482|    679|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 451, False: 1.86k]
  ------------------
  483|    679|                                    return OpCode::DIVU;
  484|  2.31k|                            }
  485|  2.31k|                        }
  486|  1.10k|                        break;
  487|       |
  488|  1.10k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 1.01k, False: 38.3k]
  ------------------
  489|  1.30k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 289, False: 39.0k]
  ------------------
  490|  1.30k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 961, False: 344]
  |  Branch (490:29): [True: 522, False: 783]
  |  Branch (490:45): [True: 765, False: 196]
  |  Branch (490:61): [True: 522, False: 243]
  ------------------
  491|    522|                        {
  492|    522|                            return OpCode::HALT;
  493|    522|                        }
  494|    783|                        break;
  495|       |
  496|  1.23k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 1.23k, False: 38.1k]
  ------------------
  497|  1.49k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 259, False: 39.0k]
  ------------------
  498|  1.49k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 1.24k, False: 248]
  |  Branch (498:29): [True: 404, False: 1.08k]
  |  Branch (498:45): [True: 923, False: 322]
  |  Branch (498:61): [True: 404, False: 519]
  ------------------
  499|    404|                        {
  500|    404|                            return OpCode::JALR;
  501|    404|                        }
  502|  1.08k|                        break;
  503|       |
  504|  1.73k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 1.73k, False: 37.6k]
  ------------------
  505|  2.73k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 1.00k, False: 38.3k]
  ------------------
  506|  2.73k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 1.22k, False: 1.51k]
  |  Branch (506:29): [True: 1.01k, False: 1.71k]
  |  Branch (506:45): [True: 1.01k, False: 204]
  ------------------
  507|  1.01k|                        {
  508|  1.01k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 406, False: 610]
  ------------------
  509|    406|                            {
  510|    406|                                return OpCode::MOVD;
  511|    406|                            }
  512|    610|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 407, False: 203]
  ------------------
  513|    407|                            {
  514|    407|                                return OpCode::MOVF;
  515|    407|                            }
  516|  1.01k|                        }
  517|  1.71k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.28k, False: 434]
  |  Branch (517:34): [True: 467, False: 1.25k]
  |  Branch (517:50): [True: 957, False: 327]
  |  Branch (517:66): [True: 467, False: 490]
  ------------------
  518|    467|                        {
  519|    467|                            return OpCode::MULT;
  520|    467|                        }
  521|  1.45k|                        break;
  522|       |
  523|  6.04k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 6.04k, False: 33.3k]
  ------------------
  524|  13.5k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 7.54k, False: 31.8k]
  ------------------
  525|  13.5k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 238, False: 13.3k]
  ------------------
  526|  13.5k|                        {
  527|  1.00k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 1.00k, False: 12.5k]
  ------------------
  528|  1.57k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 573, False: 13.0k]
  ------------------
  529|  1.57k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 1.36k, False: 208]
  ------------------
  530|  1.36k|                                {
  531|  1.36k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 659, False: 710]
  ------------------
  532|    659|                                    {
  533|    659|                                        return OpCode::SEQI;
  534|    659|                                    }
  535|    710|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 406, False: 304]
  ------------------
  536|    406|                                    {
  537|    406|                                        return OpCode::SEQU;
  538|    406|                                    }
  539|  1.36k|                                }
  540|    512|                                break;
  541|       |
  542|    608|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 608, False: 12.9k]
  ------------------
  543|  2.47k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 1.86k, False: 11.7k]
  ------------------
  544|  2.47k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.13k, False: 1.33k]
  ------------------
  545|  1.13k|                                {
  546|  1.13k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 530, False: 603]
  ------------------
  547|    530|                                    {
  548|    530|                                        return OpCode::SGEI;
  549|    530|                                    }
  550|    603|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 402, False: 201]
  ------------------
  551|    402|                                    {
  552|    402|                                        return OpCode::SGEU;
  553|    402|                                    }
  554|  1.13k|                                }
  555|  1.33k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.13k, False: 199]
  ------------------
  556|  1.13k|                                {
  557|  1.13k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 408, False: 730]
  ------------------
  558|    408|                                    {
  559|    408|                                        return OpCode::SGTI;
  560|    408|                                    }
  561|    730|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 407, False: 323]
  ------------------
  562|    407|                                    {
  563|    407|                                        return OpCode::SGTU;
  564|    407|                                    }
  565|  1.13k|                                }
  566|    723|                                break;
  567|       |
  568|  3.21k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 3.21k, False: 10.3k]
  ------------------
  569|  4.32k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 1.11k, False: 12.4k]
  ------------------
  570|  4.32k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 195, False: 4.13k]
  ------------------
  571|  4.32k|                                {
  572|    457|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 457, False: 3.87k]
  ------------------
  573|    789|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 332, False: 3.99k]
  ------------------
  574|    789|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 428, False: 361]
  ------------------
  575|    428|                                        {
  576|    428|                                            return OpCode::SLAI;
  577|    428|                                        }
  578|    361|                                        break;
  579|       |
  580|  1.03k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 1.03k, False: 3.29k]
  ------------------
  581|  1.27k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 236, False: 4.09k]
  ------------------
  582|  1.27k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 403, False: 867]
  ------------------
  583|    403|                                        {
  584|    403|                                            return OpCode::SLEI;
  585|    403|                                        }
  586|    867|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 664, False: 203]
  ------------------
  587|    664|                                        {
  588|    664|                                            return OpCode::SLEU;
  589|    664|                                        }
  590|    203|                                        break;
  591|       |
  592|    421|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 421, False: 3.90k]
  ------------------
  593|    774|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 353, False: 3.97k]
  ------------------
  594|    774|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 426, False: 348]
  ------------------
  595|    426|                                        {
  596|    426|                                            return OpCode::SLLI;
  597|    426|                                        }
  598|    348|                                        break;
  599|       |
  600|    625|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 625, False: 3.70k]
  ------------------
  601|  1.30k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 676, False: 3.65k]
  ------------------
  602|  1.30k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 477, False: 824]
  ------------------
  603|    477|                                        {
  604|    477|                                            return OpCode::SLTI;
  605|    477|                                        }
  606|    824|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 418, False: 406]
  ------------------
  607|    418|                                        {
  608|    418|                                            return OpCode::SLTU;
  609|    418|                                        }
  610|    406|                                        break;
  611|  4.32k|                                }
  612|       |
  613|  2.82k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 1.30k, False: 12.2k]
  ------------------
  614|  3.02k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 208, False: 13.3k]
  ------------------
  615|  3.02k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 1.50k, False: 1.52k]
  ------------------
  616|  1.50k|                                {
  617|  1.50k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 402, False: 1.10k]
  ------------------
  618|    402|                                    {
  619|    402|                                        return OpCode::SNEI;
  620|    402|                                    }
  621|  1.10k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 405, False: 697]
  ------------------
  622|    405|                                    {
  623|    405|                                        return OpCode::SNEU;
  624|    405|                                    }
  625|  1.50k|                                }
  626|  2.22k|                                break;
  627|       |
  628|  2.22k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 651, False: 12.9k]
  ------------------
  629|  1.33k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 680, False: 12.9k]
  ------------------
  630|  1.33k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 659, False: 672]
  |  Branch (630:37): [True: 436, False: 895]
  |  Branch (630:53): [True: 436, False: 223]
  ------------------
  631|    436|                                {
  632|    436|                                    return OpCode::SRAI;
  633|    436|                                }
  634|    895|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 646, False: 249]
  |  Branch (634:42): [True: 445, False: 450]
  |  Branch (634:58): [True: 445, False: 201]
  ------------------
  635|    445|                                {
  636|    445|                                    return OpCode::SRLI;
  637|    445|                                }
  638|    450|                                break;
  639|       |
  640|  1.25k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.25k, False: 12.3k]
  ------------------
  641|  2.12k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 874, False: 12.7k]
  ------------------
  642|  2.12k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 1.92k, False: 197]
  ------------------
  643|  1.92k|                                {
  644|  1.92k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 212, False: 1.71k]
  ------------------
  645|  1.92k|                                    {
  646|    194|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 194, False: 1.73k]
  ------------------
  647|    400|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 206, False: 1.72k]
  ------------------
  648|    400|                                            return OpCode::SUBD;
  649|       |
  650|    194|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 194, False: 1.73k]
  ------------------
  651|    400|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 206, False: 1.72k]
  ------------------
  652|    400|                                            return OpCode::SUBF;
  653|       |
  654|    194|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 194, False: 1.73k]
  ------------------
  655|    499|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 305, False: 1.62k]
  ------------------
  656|    499|                                            return OpCode::SUBI;
  657|       |
  658|    223|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 223, False: 1.70k]
  ------------------
  659|    417|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 194, False: 1.73k]
  ------------------
  660|    417|                                            return OpCode::SUBU;
  661|  1.92k|                                    }
  662|  1.92k|                                }
  663|    409|                                break;
  664|  13.5k|                        }
  665|  4.55k|                        break;
  666|       |
  667|  4.55k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 1.49k, False: 37.8k]
  ------------------
  668|  1.72k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 232, False: 39.1k]
  ------------------
  669|  1.72k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 1.44k, False: 285]
  |  Branch (669:29): [True: 389, False: 1.33k]
  |  Branch (669:45): [True: 907, False: 533]
  |  Branch (669:61): [True: 389, False: 518]
  ------------------
  670|    389|                        {
  671|    389|                            return OpCode::TRAP;
  672|    389|                        }
  673|  1.33k|                        break;
  674|  1.33k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 210, False: 39.1k]
  ------------------
  675|  1.38k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 1.17k, False: 38.1k]
  ------------------
  676|  1.38k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 1.13k, False: 248]
  |  Branch (676:29): [True: 399, False: 985]
  |  Branch (676:45): [True: 800, False: 336]
  |  Branch (676:61): [True: 399, False: 401]
  ------------------
  677|    399|                        {
  678|    399|                            return OpCode::XORI;
  679|    399|                        }
  680|    985|                        break;
  681|  39.3k|                }
  682|  20.9k|                break;
  683|  39.3k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  20.9k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 18.0k, False: 137k]
  ------------------
  687|  18.0k|                const char c1 = token[0u];
  688|  18.0k|                const char c2 = token[1u];
  689|  18.0k|                const char c3 = token[2u];
  690|  18.0k|                const char c4 = token[3u];
  691|  18.0k|                const char c5 = token[4u];
  692|       |
  693|  18.0k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 2.18k, False: 15.9k]
  ------------------
  694|  18.0k|                {
  695|    220|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 220, False: 17.8k]
  ------------------
  696|  1.84k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 1.62k, False: 16.4k]
  ------------------
  697|  1.84k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 1.58k, False: 256]
  |  Branch (697:29): [True: 409, False: 1.43k]
  |  Branch (697:45): [True: 1.33k, False: 254]
  |  Branch (697:61): [True: 740, False: 591]
  |  Branch (697:77): [True: 409, False: 331]
  ------------------
  698|    409|                        {
  699|    409|                            return OpCode::ADDUI;
  700|    409|                        }
  701|  1.43k|                        break;
  702|       |
  703|  1.43k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 1.26k, False: 16.8k]
  ------------------
  704|  2.56k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 1.29k, False: 16.7k]
  ------------------
  705|  2.56k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 2.35k, False: 213]
  |  Branch (705:29): [True: 915, False: 1.65k]
  |  Branch (705:45): [True: 2.15k, False: 201]
  |  Branch (705:61): [True: 1.55k, False: 596]
  |  Branch (705:77): [True: 915, False: 640]
  ------------------
  706|    915|                        {
  707|    915|                            return OpCode::DIVUI;
  708|    915|                        }
  709|  1.65k|                        break;
  710|       |
  711|  1.65k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 814, False: 17.2k]
  ------------------
  712|  3.78k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 2.97k, False: 15.1k]
  ------------------
  713|  3.78k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 3.55k, False: 235]
  |  Branch (713:29): [True: 2.86k, False: 926]
  |  Branch (713:45): [True: 3.06k, False: 485]
  |  Branch (713:61): [True: 2.86k, False: 206]
  ------------------
  714|  2.86k|                        {
  715|  2.86k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 275, False: 2.58k]
  ------------------
  716|  2.86k|                            {
  717|    207|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 207, False: 2.65k]
  ------------------
  718|    401|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 194, False: 2.66k]
  ------------------
  719|    401|                                    return OpCode::MULTD;
  720|       |
  721|    206|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 206, False: 2.65k]
  ------------------
  722|    528|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 322, False: 2.53k]
  ------------------
  723|    528|                                    return OpCode::MULTF;
  724|       |
  725|    196|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 196, False: 2.66k]
  ------------------
  726|    822|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 626, False: 2.23k]
  ------------------
  727|    822|                                    return OpCode::MULTI;
  728|       |
  729|    436|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 436, False: 2.42k]
  ------------------
  730|    834|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 398, False: 2.46k]
  ------------------
  731|    834|                                    return OpCode::MULTU;
  732|  2.86k|                            }
  733|  2.86k|                        }
  734|  1.20k|                        break;
  735|       |
  736|  2.43k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 2.43k, False: 15.6k]
  ------------------
  737|  7.72k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 5.28k, False: 12.8k]
  ------------------
  738|  7.72k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 288, False: 7.43k]
  ------------------
  739|  7.72k|                        {
  740|    801|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 801, False: 6.92k]
  ------------------
  741|  1.19k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 397, False: 7.32k]
  ------------------
  742|  1.19k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 990, False: 208]
  |  Branch (742:37): [True: 402, False: 796]
  |  Branch (742:53): [True: 792, False: 198]
  |  Branch (742:69): [True: 402, False: 390]
  ------------------
  743|    402|                                {
  744|    402|                                    return OpCode::SEQUI;
  745|    402|                                }
  746|    796|                                break;
  747|       |
  748|    796|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 621, False: 7.10k]
  ------------------
  749|  1.59k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 970, False: 6.75k]
  ------------------
  750|  1.59k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 796, False: 795]
  |  Branch (750:37): [True: 400, False: 1.19k]
  |  Branch (750:53): [True: 602, False: 194]
  |  Branch (750:69): [True: 400, False: 202]
  ------------------
  751|    400|                                {
  752|    400|                                    return OpCode::SGEUI;
  753|    400|                                }
  754|  1.19k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 794, False: 397]
  |  Branch (754:42): [True: 402, False: 789]
  |  Branch (754:58): [True: 600, False: 194]
  |  Branch (754:74): [True: 402, False: 198]
  ------------------
  755|    402|                                {
  756|    402|                                    return OpCode::SGTUI;
  757|    402|                                }
  758|    789|                                break;
  759|       |
  760|  1.26k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 1.26k, False: 6.45k]
  ------------------
  761|  2.06k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 801, False: 6.92k]
  ------------------
  762|  2.06k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 921, False: 1.14k]
  |  Branch (762:37): [True: 400, False: 1.66k]
  |  Branch (762:53): [True: 596, False: 325]
  |  Branch (762:69): [True: 400, False: 196]
  ------------------
  763|    400|                                {
  764|    400|                                    return OpCode::SLEUI;
  765|    400|                                }
  766|  1.66k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 958, False: 709]
  |  Branch (766:42): [True: 402, False: 1.26k]
  |  Branch (766:58): [True: 760, False: 198]
  |  Branch (766:74): [True: 402, False: 358]
  ------------------
  767|    402|                                {
  768|    402|                                    return OpCode::SLTUI;
  769|    402|                                }
  770|  1.26k|                                break;
  771|       |
  772|  1.26k|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 876, False: 6.84k]
  ------------------
  773|  1.26k|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 384, False: 7.33k]
  ------------------
  774|  1.26k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 1.05k, False: 208]
  |  Branch (774:37): [True: 400, False: 860]
  |  Branch (774:53): [True: 839, False: 213]
  |  Branch (774:69): [True: 400, False: 439]
  ------------------
  775|    400|                                {
  776|    400|                                    return OpCode::SNEUI;
  777|    400|                                }
  778|    860|                                break;
  779|       |
  780|    954|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 954, False: 6.76k]
  ------------------
  781|  1.31k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 363, False: 7.35k]
  ------------------
  782|  1.31k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 1.12k, False: 194]
  |  Branch (782:37): [True: 538, False: 779]
  |  Branch (782:53): [True: 925, False: 198]
  |  Branch (782:69): [True: 538, False: 387]
  ------------------
  783|    538|                                {
  784|    538|                                    return OpCode::SUBUI;
  785|    538|                                }
  786|    779|                                break;
  787|  7.72k|                        }
  788|       |
  789|  4.77k|                        break;
  790|  18.0k|                }
  791|       |
  792|  11.2k|                break;
  793|  18.0k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  11.2k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 8.51k, False: 146k]
  ------------------
  797|  8.51k|                const char c1 = token[0u];
  798|  8.51k|                const char c2 = token[1u];
  799|  8.51k|                const char c3 = token[2u];
  800|  8.51k|                const char c4 = token[3u];
  801|  8.51k|                const char c5 = token[4u];
  802|  8.51k|                const char c6 = token[5u];
  803|       |
  804|  8.51k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 4.81k, False: 3.70k]
  |  Branch (804:21): [True: 4.42k, False: 4.09k]
  |  Branch (804:37): [True: 4.61k, False: 194]
  |  Branch (804:53): [True: 4.42k, False: 198]
  ------------------
  805|  4.42k|                {
  806|  4.42k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 194, False: 4.22k]
  ------------------
  807|  4.42k|                    {
  808|    615|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 615, False: 3.80k]
  ------------------
  809|  1.32k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 708, False: 3.71k]
  ------------------
  810|  1.32k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 1.00k, False: 323]
  ------------------
  811|  1.00k|                            {
  812|  1.00k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 403, False: 597]
  ------------------
  813|    403|                                {
  814|    403|                                    return OpCode::CVTD2F;
  815|    403|                                }
  816|    597|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 403, False: 194]
  ------------------
  817|    403|                                {
  818|    403|                                    return OpCode::CVTD2I;
  819|    403|                                }
  820|  1.00k|                            }
  821|    517|                            break;
  822|       |
  823|  1.19k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 1.19k, False: 3.22k]
  ------------------
  824|  1.44k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 253, False: 4.16k]
  ------------------
  825|  1.44k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 1.25k, False: 194]
  ------------------
  826|  1.25k|                            {
  827|  1.25k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 401, False: 852]
  ------------------
  828|    401|                                {
  829|    401|                                    return OpCode::CVTF2D;
  830|    401|                                }
  831|    852|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 402, False: 450]
  ------------------
  832|    402|                                {
  833|    402|                                    return OpCode::CVTF2I;
  834|    402|                                }
  835|  1.25k|                            }
  836|    644|                            break;
  837|       |
  838|  1.22k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 1.22k, False: 3.19k]
  ------------------
  839|  1.45k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 230, False: 4.19k]
  ------------------
  840|  1.45k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 1.25k, False: 198]
  ------------------
  841|  1.25k|                            {
  842|  1.25k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 531, False: 727]
  ------------------
  843|    531|                                {
  844|    531|                                    return OpCode::CVTI2D;
  845|    531|                                }
  846|    727|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 533, False: 194]
  ------------------
  847|    533|                                {
  848|    533|                                    return OpCode::CVTI2F;
  849|    533|                                }
  850|  1.25k|                            }
  851|  4.42k|                    }
  852|  4.42k|                }
  853|  4.09k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 2.39k, False: 1.69k]
  |  Branch (853:26): [True: 408, False: 3.68k]
  |  Branch (853:42): [True: 1.96k, False: 437]
  |  Branch (853:58): [True: 1.76k, False: 197]
  |  Branch (853:74): [True: 1.53k, False: 232]
  ------------------
  854|  4.09k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 746, False: 785]
  |  Branch (854:42): [True: 408, False: 338]
  ------------------
  855|    408|                {
  856|    408|                    return OpCode::MULTUI;
  857|    408|                }
  858|  5.43k|                break;
  859|  8.51k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  5.43k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 3.84k, False: 151k]
  ------------------
  863|  3.84k|                const char c1 = token[0u];
  864|  3.84k|                const char c2 = token[1u];
  865|  3.84k|                const char c3 = token[2u];
  866|  3.84k|                const char c4 = token[3u];
  867|  3.84k|                const char c5 = token[4u];
  868|  3.84k|                const char c6 = token[5u];
  869|  3.84k|                const char c7 = token[6u];
  870|       |
  871|  3.84k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 3.03k, False: 817]
  |  Branch (871:21): [True: 2.50k, False: 1.34k]
  |  Branch (871:37): [True: 2.70k, False: 329]
  |  Branch (871:53): [True: 2.50k, False: 194]
  ------------------
  872|  2.50k|                {
  873|  2.50k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 976, False: 1.53k]
  |  Branch (873:25): [True: 388, False: 2.11k]
  |  Branch (873:41): [True: 781, False: 195]
  |  Branch (873:54): [True: 587, False: 194]
  |  Branch (873:70): [True: 388, False: 199]
  ------------------
  874|    388|                    {
  875|    388|                        return OpCode::MOVI2FP;
  876|    388|                    }
  877|  2.11k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.28k, False: 835]
  |  Branch (877:25): [True: 388, False: 1.73k]
  |  Branch (877:41): [True: 780, False: 504]
  |  Branch (877:57): [True: 582, False: 198]
  |  Branch (877:70): [True: 388, False: 194]
  ------------------
  878|    388|                    {
  879|    388|                        return OpCode::MOVFP2I;
  880|    388|                    }
  881|  2.11k|                }
  882|  3.07k|                break;
  883|  3.84k|            }
  884|       |
  885|  3.07k|            default: {
  ------------------
  |  Branch (885:13): [True: 1.37k, False: 153k]
  ------------------
  886|  1.37k|                break;
  887|  3.84k|            }
  888|   155k|        }
  889|       |
  890|       |        // None found
  891|  86.7k|        return OpCode::NONE;
  892|   155k|    }
_ZN3dlx3iceEcc:
   17|   248k|    {
   18|   248k|        constexpr const char diff = 'a' - 'A';
   19|   248k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 89.0k, False: 159k]
  |  Branch (19:28): [True: 72.4k, False: 87.3k]
  ------------------
   20|   248k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   140k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  1.52k|    {
  195|  1.52k|        ParseError err;
  196|       |
  197|  1.52k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  1.52k|        err.m_LineNumber                           = line_number;
  199|  1.52k|        err.m_Column                               = column;
  200|  1.52k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  1.52k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  1.52k|        return err;
  204|  1.52k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  1.52k|    {
  209|  1.52k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  1.52k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  1.52k|                                                         actual_type);
  212|  1.52k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    195|    {
  218|    195|        ParseError err;
  219|       |
  220|    195|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    195|        err.m_LineNumber        = line_number;
  222|    195|        err.m_Column            = column;
  223|    195|        err.invalid_number.text = text;
  224|       |
  225|    195|        return err;
  226|    195|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    195|    {
  230|    195|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    195|                                                token.GetColumn().unsafe(), token.GetText());
  232|    195|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  54.9k|    {
  257|  54.9k|        ParseError err;
  258|       |
  259|  54.9k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  54.9k|        err.m_LineNumber                   = line_number;
  261|  54.9k|        err.m_Column                       = column;
  262|  54.9k|        err.unexpected_token.expected_type = expected_type;
  263|  54.9k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  54.9k|        return err;
  266|  54.9k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  54.9k|    {
  271|  54.9k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  54.9k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  54.9k|                                                  token.GetType());
  274|  54.9k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  16.0k|    {
  279|  16.0k|        ParseError err;
  280|       |
  281|  16.0k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  16.0k|        err.m_LineNumber                   = line_number;
  283|  16.0k|        err.m_Column                       = column;
  284|  16.0k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  16.0k|        return err;
  287|  16.0k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    194|    {
  291|    194|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    194|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    194|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  24.9k|    {
  298|  24.9k|        ParseError err;
  299|       |
  300|  24.9k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  24.9k|        err.m_LineNumber                       = line_number;
  302|  24.9k|        err.m_Column                           = column;
  303|  24.9k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  24.9k|        return err;
  306|  24.9k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  24.9k|    {
  311|  24.9k|        return ConstructInvalidLabelIdentifierParseError(
  312|  24.9k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  24.9k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  5.60k|    {
  319|  5.60k|        ParseError err;
  320|       |
  321|  5.60k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  5.60k|        err.m_LineNumber                     = line_number;
  323|  5.60k|        err.m_Column                         = column;
  324|  5.60k|        err.label_already_defined.label_name = label_name;
  325|  5.60k|        err.label_already_defined.at_line    = at_line;
  326|  5.60k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  5.60k|        return err;
  329|  5.60k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  5.60k|    {
  334|  5.60k|        return ConstructLabelAlreadyDefinedParseError(
  335|  5.60k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  5.60k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  5.60k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  28.4k|    {
  342|  28.4k|        ParseError err;
  343|       |
  344|  28.4k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  28.4k|        err.m_LineNumber = line_number;
  346|  28.4k|        err.m_Column     = column;
  347|       |
  348|  28.4k|        return err;
  349|  28.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  28.4k|    {
  354|  28.4k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  28.4k|                                                        token.GetColumn().unsafe());
  356|  28.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  3.71k|    {
  362|  3.71k|        ParseError err;
  363|       |
  364|  3.71k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  3.71k|        err.m_LineNumber               = line_number;
  366|  3.71k|        err.m_Column                   = column;
  367|  3.71k|        err.too_few_arguments.required = required;
  368|  3.71k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  3.71k|        return err;
  371|  3.71k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  3.71k|    {
  376|  3.71k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  3.71k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  3.71k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  4.43k|    {
  383|  4.43k|        ParseError err;
  384|       |
  385|  4.43k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  4.43k|        err.m_LineNumber           = line_number;
  387|  4.43k|        err.m_Column               = column;
  388|  4.43k|        err.empty_label.label_name = label_name;
  389|       |
  390|  4.43k|        return err;
  391|  4.43k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  4.43k|    {
  395|  4.43k|        return ConstructEmptyLabelParseError(
  396|  4.43k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  4.43k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 4.08k, False: 358]
  ------------------
  398|  4.08k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  4.43k|                        token.GetText());
  400|  4.43k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    403|    {
  405|    403|        ParseError err;
  406|       |
  407|    403|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    403|        err.m_LineNumber = line_number;
  409|    403|        err.m_Column     = column;
  410|       |
  411|    403|        return err;
  412|    403|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    403|    {
  416|    403|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    403|                                               token.GetColumn().unsafe());
  418|    403|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   140k|    {
   19|   140k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   140k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  5.41k|    {
  181|  5.41k|        ParsedProgram program;
  182|       |
  183|  5.41k|        program.m_Tokens = tokens;
  184|       |
  185|  5.41k|        phi::boolean line_has_instruction{false};
  186|  5.41k|        phi::usize   label_count{0u};
  187|       |
  188|   182k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 177k, False: 5.41k]
  ------------------
  189|   177k|        {
  190|   177k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   177k|            switch (current_token.GetType())
  195|   177k|            {
  196|       |                // Ignore comments
  197|    601|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 601, False: 176k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|    601|                    break;
  200|       |
  201|  27.3k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 27.3k, False: 149k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  27.3k|                    line_has_instruction = false;
  204|  27.3k|                    break;
  205|       |
  206|  52.6k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 52.6k, False: 124k]
  ------------------
  207|  52.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 6.43k, False: 46.2k]
  ------------------
  208|  6.43k|                    {
  209|  6.43k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  6.43k|                                current_token, Token::Type::NewLine));
  211|  6.43k|                        break;
  212|  6.43k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  46.2k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 12.8k, False: 33.3k]
  ------------------
  217|  12.8k|                    {
  218|  12.8k|                        program.AddParseError(
  219|  12.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  12.8k|                        break;
  221|  12.8k|                    }
  222|       |
  223|  33.3k|                    phi::string_view label_name = current_token.GetText();
  224|  33.3k|                    label_name.remove_suffix(1u);
  225|       |
  226|  33.3k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 15.8k, False: 17.5k]
  ------------------
  227|  15.8k|                    {
  228|  15.8k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  15.8k|                                current_token.GetLineNumber().unsafe(),
  230|  15.8k|                                current_token.GetColumn().unsafe(), label_name));
  231|  15.8k|                        break;
  232|  15.8k|                    }
  233|       |
  234|  17.5k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 7.19k, False: 10.3k]
  ------------------
  235|  7.19k|                    {
  236|  7.19k|                        program.AddParseError(
  237|  7.19k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  7.19k|                        break;
  239|  7.19k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  10.3k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 5.60k, False: 4.76k]
  ------------------
  243|  5.60k|                    {
  244|       |                        // Find first defintions of label
  245|  5.60k|                        const Token* first_label_definition =
  246|  5.60k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  5.60k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  5.60k|                                    {
  249|  5.60k|                                        phi::string_view token_label_name = t.GetText();
  250|  5.60k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  5.60k|                                        if (token_label_name == label_name)
  253|  5.60k|                                        {
  254|  5.60k|                                            return true;
  255|  5.60k|                                        }
  256|  5.60k|                                    }
  257|       |
  258|  5.60k|                                    return false;
  259|  5.60k|                                });
  260|       |
  261|  5.60k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  5.60k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  5.60k|                                current_token, *first_label_definition));
  265|  5.60k|                        break;
  266|  5.60k|                    }
  267|       |
  268|  4.76k|                    program.m_JumpData[label_name] =
  269|  4.76k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  4.76k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  4.76k|                    break;
  276|  10.3k|                }
  277|       |
  278|  52.5k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 52.5k, False: 124k]
  ------------------
  279|  52.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 28.4k, False: 24.0k]
  ------------------
  280|  28.4k|                    {
  281|  28.4k|                        program.AddParseError(
  282|  28.4k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  28.4k|                        break;
  284|  28.4k|                    }
  285|       |
  286|  24.0k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  24.0k|                    PHI_ASSERT(current_token.HasHint());
  290|  24.0k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  24.0k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  24.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  24.0k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  24.0k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  24.0k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  24.0k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  24.0k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  24.0k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  52.4k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 43.4k, False: 9.05k]
  ------------------
  312|  43.4k|                    {
  313|       |                        // Get next token
  314|  43.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 609, False: 42.7k]
  ------------------
  315|    609|                        {
  316|    609|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    609|                                    current_token, number_of_argument_required.unsafe(),
  318|    609|                                    argument_num.unsafe()));
  319|    609|                            break;
  320|    609|                        }
  321|       |
  322|  42.7k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  42.7k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 15.8k, False: 26.9k]
  ------------------
  326|  15.8k|                        {
  327|  15.8k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 403, False: 15.4k]
  ------------------
  328|    403|                            {
  329|    403|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    403|                            }
  331|       |
  332|  15.8k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  15.8k|                            continue;
  335|  15.8k|                        }
  336|       |
  337|  26.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 3.10k, False: 23.8k]
  ------------------
  338|  3.10k|                        {
  339|  3.10k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  3.10k|                                    token, number_of_argument_required.unsafe(),
  341|  3.10k|                                    argument_num.unsafe()));
  342|  3.10k|                            break;
  343|  3.10k|                        }
  344|       |
  345|  23.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  23.8k|                                parse_instruction_argument(
  347|  23.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  23.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 11.2k, False: 12.5k]
  ------------------
  349|  11.2k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  11.2k|                            break;
  352|  11.2k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  12.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  12.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  12.5k|                        argument_num++;
  359|  12.5k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  12.5k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  24.0k|                    program.m_Instructions.emplace_back(instruction);
  367|  24.0k|                    line_has_instruction = true;
  368|  24.0k|                    break;
  369|  52.5k|                }
  370|       |
  371|  44.1k|                default:
  ------------------
  |  Branch (371:17): [True: 44.1k, False: 133k]
  ------------------
  372|  44.1k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  44.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 28.1k, False: 15.9k]
  ------------------
  374|  28.1k|                    {
  375|  28.1k|                        expected_token_type = Token::Type::NewLine;
  376|  28.1k|                    }
  377|       |
  378|  44.1k|                    program.AddParseError(
  379|  44.1k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  44.1k|                    break;
  381|   177k|            }
  382|   177k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  5.41k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 408, False: 5.00k]
  ------------------
  386|    408|        {
  387|  5.78k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 5.37k, False: 408]
  ------------------
  388|  5.37k|            {
  389|  5.37k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  5.37k|                const Token& token = *it;
  392|  5.37k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 4.43k, False: 936]
  ------------------
  393|  4.43k|                {
  394|  4.43k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  4.43k|                    --label_count;
  396|  4.43k|                }
  397|  5.37k|            }
  398|    408|        }
  399|       |
  400|  5.41k|        return program;
  401|  5.41k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  5.41k|    {
  405|  5.41k|        TokenStream tokens = Tokenize(source);
  406|  5.41k|        return Parse(tokens);
  407|  5.41k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  23.8k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  23.8k|        switch (token.GetType())
   37|  23.8k|        {
   38|  1.24k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 1.24k, False: 22.5k]
  ------------------
   39|  1.24k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 208, False: 1.04k]
  ------------------
   40|  1.24k|                                          ArgumentType::AddressDisplacement))
   41|    208|                {
   42|    208|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    208|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    208|                    return {};
   46|    208|                }
   47|       |
   48|       |                // Get address displacement
   49|  1.04k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  1.04k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  1.04k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 1.03k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  1.03k|                auto         it           = tokens.current_position();
   61|  1.03k|                const Token& first_token  = tokens.consume();
   62|  1.03k|                const Token& second_token = tokens.consume();
   63|  1.03k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  1.03k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 451, False: 588]
  ------------------
   66|    451|                {
   67|    451|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    451|                            first_token, Token::Type::OpenBracket));
   69|    451|                    return {};
   70|    451|                }
   71|       |
   72|       |                // Second token is the register
   73|    588|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 195, False: 393]
  ------------------
   74|    195|                {
   75|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    195|                            second_token, Token::Type::RegisterInt));
   77|    195|                    return {};
   78|    195|                }
   79|       |
   80|    393|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 194, False: 199]
  ------------------
   81|    194|                {
   82|    194|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    194|                            third_token, Token::Type::ClosingBracket));
   84|    194|                    return {};
   85|    194|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    199|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    199|                return ConstructInstructionArgumentAddressDisplacement(
   94|    199|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    393|            }
   96|  7.06k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 7.06k, False: 16.7k]
  ------------------
   97|  7.06k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 203, False: 6.86k]
  ------------------
   98|    203|                {
   99|    203|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    203|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    203|                    return {};
  102|    203|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  6.86k|                return ConstructInstructionArgumentRegisterInt(
  108|  6.86k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  7.06k|            }
  110|  1.99k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 1.99k, False: 21.8k]
  ------------------
  111|  1.99k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 194, False: 1.80k]
  ------------------
  112|    194|                {
  113|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    194|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    194|                    return {};
  116|    194|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  1.80k|                return ConstructInstructionArgumentRegisterFloat(
  122|  1.80k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  1.99k|            }
  124|    194|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 194, False: 23.6k]
  ------------------
  125|    194|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    194|                return {};
  128|  1.99k|            }
  129|  8.19k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 8.19k, False: 15.6k]
  ------------------
  130|       |                // Parse as Label
  131|  8.19k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 715, False: 7.47k]
  ------------------
  132|    715|                {
  133|    715|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    715|                            token, expected_argument_type, ArgumentType::Label));
  135|    715|                    return {};
  136|    715|                }
  137|       |
  138|  7.47k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 7.47k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  7.47k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 4.93k, False: 2.54k]
  ------------------
  145|  4.93k|                {
  146|  4.93k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  4.93k|                    return {};
  148|  4.93k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.54k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  7.47k|            }
  154|  1.57k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 1.57k, False: 22.2k]
  ------------------
  155|  1.57k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 201, False: 1.37k]
  ------------------
  156|    201|                {
  157|    201|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    201|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    201|                    return {};
  160|    201|                }
  161|       |
  162|  1.37k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 1.18k, False: 195]
  ------------------
  163|  1.18k|                {
  164|  1.18k|                    return ConstructInstructionArgumentImmediateValue(
  165|  1.18k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  1.18k|                }
  167|       |
  168|    195|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    195|                return {};
  170|  1.37k|            }
  171|       |
  172|  3.56k|            default:
  ------------------
  |  Branch (172:13): [True: 3.56k, False: 20.2k]
  ------------------
  173|  3.56k|                program.AddParseError(
  174|  3.56k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  3.56k|                return {};
  176|  23.8k|        }
  177|  23.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  26.2k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  26.2k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 20.9k, False: 5.28k]
  ------------------
  248|  20.9k|                                    {
  249|  20.9k|                                        phi::string_view token_label_name = t.GetText();
  250|  20.9k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  20.9k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 5.60k, False: 15.3k]
  ------------------
  253|  5.60k|                                        {
  254|  5.60k|                                            return true;
  255|  5.60k|                                        }
  256|  20.9k|                                    }
  257|       |
  258|  20.6k|                                    return false;
  259|  26.2k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.75M|    {
   71|  2.75M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.75M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.75M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.75M|        return m_IntRegisters[id_value];
   77|  2.75M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  6.33M|    {
   82|  6.33M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  6.33M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  6.33M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  6.33M|        return m_IntRegisters[id_value];
   88|  6.33M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  3.70M|    {
   92|  3.70M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  3.70M|                                             RegisterAccessType::Signed),
   94|  3.70M|                   "Mismatch for instruction access type");
   95|       |
   96|  3.70M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  3.70M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  3.70M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  3.70M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 2.02M, False: 1.68M]
  ------------------
  101|  3.70M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 100k, False: 1.91M]
  ------------------
  102|   100k|        {
  103|   100k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   100k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   100k|        }
  105|       |
  106|  3.70M|        return GetIntRegister(id).GetSignedValue();
  107|  3.70M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  2.63M|    {
  111|  2.63M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  2.63M|                                             RegisterAccessType::Unsigned),
  113|  2.63M|                   "Mismatch for instruction access type");
  114|       |
  115|  2.63M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  2.63M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  2.63M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  2.63M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 2.02M, False: 616k]
  ------------------
  120|  2.63M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 1.78M, False: 233k]
  ------------------
  121|  1.78M|        {
  122|  1.78M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.78M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|  1.78M|        }
  124|       |
  125|  2.63M|        return GetIntRegister(id).GetUnsignedValue();
  126|  2.63M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  2.12M|    {
  130|  2.12M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  2.12M|                                             RegisterAccessType::Signed),
  132|  2.12M|                   "Mismatch for instruction access type");
  133|       |
  134|  2.12M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  2.12M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 524k, False: 1.59M]
  ------------------
  137|   524k|        {
  138|   524k|            return;
  139|   524k|        }
  140|       |
  141|  1.59M|        reg.SetSignedValue(value);
  142|       |
  143|  1.59M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.59M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.59M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.59M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|   628k|    {
  151|   628k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|   628k|                                             RegisterAccessType::Unsigned),
  153|   628k|                   "Mismatch for instruction access type");
  154|       |
  155|   628k|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|   628k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 378k, False: 249k]
  ------------------
  158|   378k|        {
  159|   378k|            return;
  160|   378k|        }
  161|       |
  162|   249k|        reg.SetUnsignedValue(value);
  163|       |
  164|   249k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   249k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   249k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   249k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.41M|    {
  172|  1.41M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.41M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.41M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.41M|        return m_FloatRegisters[id_value];
  178|  1.41M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   694k|    {
  183|   694k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   694k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   694k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   694k|        return m_FloatRegisters[id_value];
  189|   694k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   694k|    {
  193|   694k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   694k|                                             RegisterAccessType::Float),
  195|   694k|                   "Mismatch for instruction access type");
  196|       |
  197|   694k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   694k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   694k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   694k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 560k, False: 133k]
  ------------------
  202|   694k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 334k, False: 225k]
  ------------------
  203|   334k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   334k|        }
  208|       |
  209|   694k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   694k|        return reg.GetValue();
  212|   694k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   494k|    {
  216|   494k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   494k|                                             RegisterAccessType::Double),
  218|   494k|                   "Mismatch for instruction access type");
  219|       |
  220|   494k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 22, False: 494k]
  ------------------
  221|     22|        {
  222|     22|            Raise(Exception::MisalignedRegisterAccess);
  223|     22|            return {0.0};
  224|     22|        }
  225|       |
  226|   494k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   494k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   494k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   494k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 382k, False: 111k]
  ------------------
  231|   494k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 172k, False: 210k]
  ------------------
  232|   172k|        {
  233|   172k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   172k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   172k|        }
  235|       |
  236|   494k|        const FloatRegisterValueType register_value_type_high =
  237|   494k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   494k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 382k, False: 111k]
  ------------------
  239|   494k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 30.5k, False: 352k]
  ------------------
  240|  30.5k|        {
  241|  30.5k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  30.5k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  30.5k|        }
  243|       |
  244|   494k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   494k|        const FloatRegister& second_reg =
  246|   494k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   494k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   494k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   494k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   494k|        const std::uint32_t first_value_bits =
  255|   494k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   494k|        const std::uint32_t second_value_bits =
  257|   494k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   494k|        std::uint64_t final_value_bits =
  260|   494k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   494k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   494k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   494k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   171k|    {
  269|   171k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   171k|                                             RegisterAccessType::Float),
  271|   171k|                   "Mismatch for instruction access type");
  272|       |
  273|   171k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   171k|        reg.SetValue(value);
  276|       |
  277|   171k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   171k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   171k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   171k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   126k|    {
  285|   126k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   126k|                                             RegisterAccessType::Double),
  287|   126k|                   "Mismatch for instruction access type");
  288|       |
  289|   126k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 7, False: 126k]
  ------------------
  290|      7|        {
  291|      7|            Raise(Exception::MisalignedRegisterAccess);
  292|      7|            return;
  293|      7|        }
  294|       |
  295|   126k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   126k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   126k|        double              value_raw  = value.unsafe();
  299|   126k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   126k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   126k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   126k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   126k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   126k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   126k|        FloatRegister& second_reg =
  309|   126k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   126k|        first_reg.SetValue(first_value);
  312|   126k|        second_reg.SetValue(second_value);
  313|       |
  314|   126k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   126k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   126k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   126k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   126k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   390k|    {
  323|   390k|        return m_FPSR;
  324|   390k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   154k|    {
  328|   154k|        return m_FPSR;
  329|   154k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   154k|    {
  333|   154k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   154k|        return status_reg.Get();
  336|   154k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   390k|    {
  340|   390k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   390k|        status_reg.SetStatus(value);
  343|   390k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  7.64M|    {
  347|  7.64M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  7.64M|        inst.Execute(*this);
  350|  7.64M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  5.41k|    {
  354|  5.41k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 3.98k, False: 1.43k]
  ------------------
  355|  3.98k|        {
  356|  3.98k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.98k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  3.98k|            return false;
  358|  3.98k|        }
  359|       |
  360|  1.43k|        m_CurrentProgram = &program;
  361|       |
  362|  1.43k|        m_ProgramCounter               = 0u;
  363|  1.43k|        m_Halted                       = false;
  364|  1.43k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  1.43k|        m_LastRaisedException          = Exception::None;
  366|  1.43k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  1.43k|        return true;
  369|  5.41k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  2.20M|    {
  374|  2.20M|        return m_CurrentProgram;
  375|  2.20M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  7.64M|    {
  379|       |        // No nothing when no program is loaded
  380|  7.64M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 7.64M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  7.64M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 70, False: 7.64M]
  ------------------
  387|     70|        {
  388|     70|            m_Halted                       = true;
  389|     70|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     70|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  7.64M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 70, False: 7.64M]
  ------------------
  394|     70|        {
  395|     70|            return;
  396|     70|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  7.64M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  7.64M|        const auto& current_instruction =
  403|  7.64M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  7.64M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  7.64M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 276, False: 7.64M]
  ------------------
  410|    276|        {
  411|    276|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    276|            return;
  413|    276|        }
  414|       |
  415|  7.64M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  7.64M|        ++m_CurrentStepCount;
  418|       |
  419|  7.64M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.08k, False: 7.64M]
  |  Branch (419:14): [True: 7.64M, False: 0]
  |  Branch (419:42): [True: 764, False: 7.64M]
  ------------------
  420|  7.64M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 320, False: 7.64M]
  ------------------
  421|  1.08k|        {
  422|  1.08k|            m_Halted                       = true;
  423|  1.08k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.08k|        }
  425|  7.64M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  1.43k|    {
  429|       |        // Do nothing when no program is loaded
  430|  1.43k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 1.43k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  1.43k|        m_ProgramCounter               = 0u;
  436|  1.43k|        m_Halted                       = false;
  437|  1.43k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  1.43k|        m_LastRaisedException          = Exception::None;
  439|  1.43k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  7.64M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 7.64M, False: 1.43k]
  ------------------
  442|  7.64M|        {
  443|  7.64M|            ExecuteStep();
  444|  7.64M|        }
  445|       |
  446|  1.43k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  1.43k|                   "RegisterAccessType was not reset correctly");
  448|  1.43k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  5.41k|    {
  465|  5.41k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 173k, False: 5.41k]
  ------------------
  466|   173k|        {
  467|   173k|            reg.SetSignedValue(0);
  468|   173k|        }
  469|       |
  470|  5.41k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 173k, False: 5.41k]
  ------------------
  471|   173k|        {
  472|   173k|            reg.SetValue(0.0f);
  473|   173k|        }
  474|       |
  475|  5.41k|        m_FPSR.SetStatus(false);
  476|  5.41k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  5.41k|    {
  480|  5.41k|        m_MemoryBlock.Clear();
  481|  5.41k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   436k|    {
  489|   436k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   436k|        m_LastRaisedException = exception;
  492|       |
  493|   436k|        switch (exception)
  494|   436k|        {
  495|      7|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 7, False: 436k]
  ------------------
  496|      7|                m_Halted = true;
  497|      7|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      7|                return;
  499|   113k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 113k, False: 322k]
  ------------------
  500|   113k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|   113k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|   113k|                return;
  502|  81.9k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 81.9k, False: 354k]
  ------------------
  503|  81.9k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  81.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  81.9k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 436k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 436k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    139|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 139, False: 436k]
  ------------------
  513|    139|                m_Halted = true;
  514|    139|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    139|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    139|                return;
  516|   240k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 240k, False: 195k]
  ------------------
  517|   240k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   240k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|   240k|                return;
  519|    104|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 104, False: 436k]
  ------------------
  520|    104|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    104|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|    104|                m_Halted = true;
  522|    104|                return;
  523|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 29, False: 436k]
  ------------------
  524|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     29|                m_Halted = true;
  526|     29|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 436k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   436k|#endif
  532|   436k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   321k|    {
  559|   321k|        return m_MemoryBlock;
  560|   321k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  83.3k|    {
  574|  83.3k|        return m_NextProgramCounter;
  575|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  2.20M|    {
  579|  2.20M|        m_NextProgramCounter = new_npc;
  580|  2.20M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  10.5M|    {
   37|  10.5M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  10.5M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  10.5M|        switch (expected_access)
   41|  10.5M|        {
   42|  1.62M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.62M, False: 8.95M]
  ------------------
   43|  1.62M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 10.5M]
  ------------------
   45|      0|                return false;
   46|   162k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 162k, False: 10.4M]
  ------------------
   47|   162k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 81.2k, False: 81.2k]
  |  Branch (47:63): [True: 81.2k, False: 0]
  ------------------
   48|   117k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 117k, False: 10.4M]
  ------------------
   49|   117k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 1, False: 117k]
  ------------------
   50|   117k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 117k, False: 0]
  ------------------
   51|  32.4k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 32.4k, False: 10.5M]
  ------------------
   52|  32.4k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 32.4k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  49.0k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 49.0k, False: 10.5M]
  ------------------
   54|  49.0k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 49.0k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  8.59M|            default:
  ------------------
  |  Branch (55:13): [True: 8.59M, False: 1.98M]
  ------------------
   56|  8.59M|                return expected_access == access;
   57|  10.5M|        }
   58|  10.5M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   167k|    {
   13|   167k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 32.9k, False: 134k]
  ------------------
   14|  32.9k|        {
   15|  32.9k|            const char first_char = token[0u];
   16|  32.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 818, False: 32.1k]
  |  Branch (16:38): [True: 8.15k, False: 23.9k]
  ------------------
   17|  8.97k|            {
   18|  8.97k|                const char second_char = token[1u];
   19|  8.97k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 8.68k, False: 289]
  |  Branch (19:43): [True: 8.00k, False: 680]
  ------------------
   20|  8.00k|                {
   21|  8.00k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  8.00k|                }
   23|  8.97k|            }
   24|  32.9k|        }
   25|   134k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 41.9k, False: 92.5k]
  ------------------
   26|  41.9k|        {
   27|  41.9k|            const char first_char = token[0u];
   28|  41.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 483, False: 41.4k]
  |  Branch (28:38): [True: 2.06k, False: 39.4k]
  ------------------
   29|  2.55k|            {
   30|  2.55k|                const char second_char = token[1u];
   31|  2.55k|                const char third_char  = token[2u];
   32|       |
   33|  2.55k|                switch (second_char)
   34|  2.55k|                {
   35|    769|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 769, False: 1.78k]
  ------------------
   36|    769|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 575, False: 194]
  |  Branch (36:50): [True: 253, False: 322]
  ------------------
   37|    253|                        {
   38|    253|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|    253|                        }
   40|    516|                        break;
   41|    769|                    }
   42|    603|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 603, False: 1.94k]
  ------------------
   43|    603|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 409, False: 194]
  |  Branch (43:50): [True: 206, False: 203]
  ------------------
   44|    206|                        {
   45|    206|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|    206|                        }
   47|    397|                        break;
   48|    603|                    }
   49|    599|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 599, False: 1.95k]
  ------------------
   50|    599|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 194, False: 405]
  |  Branch (50:50): [True: 208, False: 197]
  ------------------
   51|    402|                        {
   52|    402|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    402|                        }
   54|    197|                        break;
   55|    599|                    }
   56|    579|                    default: {
  ------------------
  |  Branch (56:21): [True: 579, False: 1.97k]
  ------------------
   57|    579|                        break;
   58|    599|                    }
   59|  2.55k|                }
   60|  2.55k|            }
   61|  41.9k|        }
   62|       |
   63|   158k|        return IntRegisterID::None;
   64|   167k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   158k|    {
   68|   158k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 24.9k, False: 133k]
  ------------------
   69|  24.9k|        {
   70|  24.9k|            const char first_char = token[0u];
   71|  24.9k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 1.16k, False: 23.7k]
  |  Branch (71:38): [True: 2.54k, False: 21.2k]
  ------------------
   72|  3.70k|            {
   73|  3.70k|                const char second_char = token[1u];
   74|  3.70k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 2.96k, False: 740]
  |  Branch (74:43): [True: 2.39k, False: 575]
  ------------------
   75|  2.39k|                {
   76|  2.39k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  2.39k|                }
   78|  3.70k|            }
   79|  24.9k|        }
   80|   133k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 41.1k, False: 92.5k]
  ------------------
   81|  41.1k|        {
   82|  41.1k|            const char first_char = token[0u];
   83|  41.1k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 1.59k, False: 39.5k]
  |  Branch (83:38): [True: 1.52k, False: 37.9k]
  ------------------
   84|  3.12k|            {
   85|  3.12k|                const char second_char = token[1u];
   86|  3.12k|                const char third_char  = token[2u];
   87|       |
   88|  3.12k|                switch (second_char)
   89|  3.12k|                {
   90|    601|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 601, False: 2.52k]
  ------------------
   91|    601|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 407, False: 194]
  |  Branch (91:50): [True: 200, False: 207]
  ------------------
   92|    200|                        {
   93|    200|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    200|                        }
   95|    401|                        break;
   96|    601|                    }
   97|    803|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 803, False: 2.32k]
  ------------------
   98|    803|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 609, False: 194]
  |  Branch (98:50): [True: 196, False: 413]
  ------------------
   99|    196|                        {
  100|    196|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    196|                        }
  102|    607|                        break;
  103|    803|                    }
  104|    732|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 732, False: 2.39k]
  ------------------
  105|    732|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 194, False: 538]
  |  Branch (105:50): [True: 322, False: 216]
  ------------------
  106|    516|                        {
  107|    516|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    516|                        }
  109|    216|                        break;
  110|    732|                    }
  111|    987|                    default: {
  ------------------
  |  Branch (111:21): [True: 987, False: 2.13k]
  ------------------
  112|    987|                        break;
  113|    732|                    }
  114|  3.12k|                }
  115|  3.12k|            }
  116|  41.1k|        }
  117|       |
  118|   155k|        return FloatRegisterID::None;
  119|   158k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   152k|    {
  123|   152k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 35.2k, False: 117k]
  ------------------
  124|  35.2k|        {
  125|  35.2k|            const char c1 = token[0u];
  126|  35.2k|            const char c2 = token[1u];
  127|  35.2k|            const char c3 = token[2u];
  128|  35.2k|            const char c4 = token[3u];
  129|       |
  130|  35.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 837, False: 34.4k]
  |  Branch (130:34): [True: 1.17k, False: 33.2k]
  |  Branch (130:49): [True: 218, False: 1.79k]
  |  Branch (130:62): [True: 954, False: 844]
  ------------------
  131|  35.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 731, False: 441]
  |  Branch (131:34): [True: 195, False: 246]
  |  Branch (131:49): [True: 282, False: 644]
  |  Branch (131:62): [True: 581, False: 63]
  ------------------
  132|  35.2k|        }
  133|       |
  134|   117k|        return false;
  135|   152k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   154k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  68.7k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   359k|    {
   41|   359k|        return m_Type;
   42|   359k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   169k|    {
   51|   169k|        return m_LineNumber;
   52|   169k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   145k|    {
   56|   145k|        return m_Column;
   57|   145k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   162k|    {
   66|   162k|        return m_Text;
   67|   162k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  26.4k|    {
   80|  26.4k|        return m_HasHint;
   81|  26.4k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  35.1k|    {
   85|  35.1k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  35.1k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  35.1k|                   m_Type == Type::ImmediateInteger);
   88|  35.1k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  35.1k|        return m_Hint;
   91|  35.1k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  5.41k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  5.41k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  5.41k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|  1.04k|    {
   52|  1.04k|        return x + m_Iterator <= m_Tokens.size();
   53|  1.04k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   226k|    {
   57|   226k|        return m_Iterator < m_Tokens.size();
   58|   226k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   223k|    {
   62|   223k|        return m_Iterator >= m_Tokens.size();
   63|   223k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   223k|    {
   77|   223k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   223k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   223k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|  1.03k|    {
  156|  1.03k|        return m_Iterator;
  157|  1.03k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  160|    199|    {
  161|       |#if defined(PHI_DEBUG)
  162|       |        PHI_ASSERT(m_Finialized);
  163|       |#endif
  164|       |
  165|    199|        m_Iterator = pos;
  166|    199|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    408|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    408|        return m_Tokens.rbegin();
  211|    408|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  5.37k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  5.37k|        return m_Tokens.rend();
  220|  5.37k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  5.41k|    {
   66|  5.41k|        TokenStream tokens;
   67|       |
   68|  5.41k|        phi::string_view current_token;
   69|       |
   70|  5.41k|        phi::u64 current_line_number{1u};
   71|  5.41k|        phi::u64 current_column{1u};
   72|  5.41k|        phi::u64 token_begin{0u};
   73|       |
   74|  5.41k|        phi::boolean parsing_comment{false};
   75|       |
   76|   555k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 550k, False: 5.41k]
  ------------------
   77|   550k|        {
   78|   550k|            const char c{source.at(i)};
   79|       |
   80|   550k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 30.4k, False: 519k]
  ------------------
   81|  30.4k|            {
   82|  30.4k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 3.38k, False: 27.0k]
  ------------------
   83|  3.38k|                {
   84|       |                    // Skip empty lines
   85|  3.38k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  3.38k|                                        current_line_number, current_column);
   87|       |
   88|  3.38k|                    parsing_comment = false;
   89|  3.38k|                    current_line_number += 1u;
   90|  3.38k|                    current_column = 1u;
   91|  3.38k|                    continue;
   92|  3.38k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  27.0k|                tokens.emplace_back(ParseToken(
   96|  27.0k|                        source.substring_view(
   97|  27.0k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  27.0k|                                current_token.length()),
   99|  27.0k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  27.0k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  27.0k|                                    current_line_number, current_column);
  103|       |
  104|  27.0k|                current_token   = phi::string_view{};
  105|  27.0k|                parsing_comment = false;
  106|  27.0k|                current_line_number += 1u;
  107|  27.0k|                current_column = 0u;
  108|  27.0k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   519k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 941, False: 518k]
  |  Branch (110:34): [True: 1.00k, False: 517k]
  ------------------
  111|  1.94k|            {
  112|  1.94k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 391, False: 1.55k]
  ------------------
  113|    391|                {
  114|    391|                    token_begin = i;
  115|    391|                }
  116|  1.55k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.14k, False: 410]
  ------------------
  117|  1.14k|                {
  118|  1.14k|                    tokens.emplace_back(ParseToken(
  119|  1.14k|                            source.substring_view(
  120|  1.14k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.14k|                                    current_token.length()),
  122|  1.14k|                            current_line_number, current_column - current_token.length()));
  123|  1.14k|                    token_begin   = i;
  124|  1.14k|                    current_token = phi::string_view{};
  125|  1.14k|                }
  126|       |
  127|  1.94k|                parsing_comment = true;
  128|  1.94k|                current_token   = source.substring_view(
  129|  1.94k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  1.94k|                        current_token.length() + 1u);
  131|  1.94k|            }
  132|   517k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 386, False: 517k]
  ------------------
  133|    386|            {
  134|       |                // simply append the character
  135|    386|                current_token = source.substring_view(
  136|    386|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|    386|                        current_token.length() + 1u);
  138|    386|            }
  139|   517k|            else
  140|   517k|            {
  141|       |                // Not parsing a comment
  142|   517k|                switch (c)
  143|   517k|                {
  144|  8.91k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 8.91k, False: 508k]
  ------------------
  145|  11.5k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 2.65k, False: 514k]
  ------------------
  146|  15.2k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 3.64k, False: 513k]
  ------------------
  147|  15.2k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 1.36k, False: 13.8k]
  ------------------
  148|  1.36k|                        {
  149|  1.36k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  1.36k|                            continue;
  152|  1.36k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  13.8k|                        tokens.emplace_back(ParseToken(
  156|  13.8k|                                source.substring_view(
  157|  13.8k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  13.8k|                                        current_token.length()),
  159|  13.8k|                                current_line_number, current_column - current_token.length()));
  160|  13.8k|                        current_token = phi::string_view{};
  161|  13.8k|                        break;
  162|  37.8k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 37.8k, False: 479k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  37.8k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 35.1k, False: 2.64k]
  ------------------
  165|  35.1k|                        {
  166|  35.1k|                            current_token = source.substring_view(
  167|  35.1k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  35.1k|                                    current_token.length() + 1u);
  169|  35.1k|                            tokens.emplace_back(ParseToken(
  170|  35.1k|                                    source.substring_view(
  171|  35.1k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  35.1k|                                                    token_begin),
  173|  35.1k|                                            current_token.length()),
  174|  35.1k|                                    current_line_number,
  175|  35.1k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  35.1k|                            current_token = phi::string_view{};
  178|  35.1k|                        }
  179|  2.64k|                        else
  180|  2.64k|                        {
  181|       |                            // Orphan colon
  182|  2.64k|                            token_begin = i;
  183|       |
  184|  2.64k|                            tokens.emplace_back(
  185|  2.64k|                                    Token::Type::Colon,
  186|  2.64k|                                    source.substring_view(
  187|  2.64k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  2.64k|                                                    token_begin),
  189|  2.64k|                                            1u),
  190|  2.64k|                                    current_line_number, current_column);
  191|  2.64k|                        }
  192|  37.8k|                        break;
  193|  39.7k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 39.7k, False: 477k]
  ------------------
  194|  45.0k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 5.23k, False: 512k]
  ------------------
  195|  57.2k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 12.2k, False: 505k]
  ------------------
  196|  57.2k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 51.0k, False: 6.16k]
  ------------------
  197|  51.0k|                        {
  198|  51.0k|                            tokens.emplace_back(ParseToken(
  199|  51.0k|                                    source.substring_view(
  200|  51.0k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  51.0k|                                                    token_begin),
  202|  51.0k|                                            current_token.length()),
  203|  51.0k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  51.0k|                            current_token = phi::string_view{};
  206|  51.0k|                        }
  207|       |
  208|  57.2k|                        Token::Type type;
  209|  57.2k|                        switch (c)
  210|  57.2k|                        {
  211|  39.7k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 39.7k, False: 17.4k]
  ------------------
  212|  39.7k|                                type = Token::Type::Comma;
  213|  39.7k|                                break;
  214|  5.23k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 5.23k, False: 52.0k]
  ------------------
  215|  5.23k|                                type = Token::Type::OpenBracket;
  216|  5.23k|                                break;
  217|  12.2k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 12.2k, False: 45.0k]
  ------------------
  218|  12.2k|                                type = Token::Type::ClosingBracket;
  219|  12.2k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 57.2k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  57.2k|#endif
  225|  57.2k|                        }
  226|       |
  227|  57.2k|                        token_begin = i;
  228|       |
  229|  57.2k|                        tokens.emplace_back(
  230|  57.2k|                                type,
  231|  57.2k|                                source.substring_view(
  232|  57.2k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  57.2k|                                        1u),
  234|  57.2k|                                current_line_number, current_column);
  235|  57.2k|                        break;
  236|       |
  237|   407k|                    default:
  ------------------
  |  Branch (237:21): [True: 407k, False: 110k]
  ------------------
  238|   407k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 131k, False: 275k]
  ------------------
  239|   131k|                        {
  240|   131k|                            token_begin = i;
  241|   131k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   407k|                        current_token = source.substring_view(
  245|   407k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   407k|                                current_token.length() + 1u);
  247|   517k|                }
  248|   517k|            }
  249|       |
  250|   545k|            current_column += 1u;
  251|   545k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  5.41k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 4.50k, False: 903]
  ------------------
  255|  4.50k|        {
  256|  4.50k|            tokens.emplace_back(
  257|  4.50k|                    ParseToken(source.substring_view(
  258|  4.50k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  4.50k|                                       current_token.length()),
  260|  4.50k|                               current_line_number, current_column - current_token.length()));
  261|  4.50k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  5.41k|        tokens.finalize();
  265|       |
  266|  5.41k|        return tokens;
  267|  5.41k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   132k|    {
   14|   132k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 2.02k, False: 130k]
  |  Branch (14:13): [True: 1.79k, False: 131k]
  |  Branch (14:36): [True: 1.79k, False: 233]
  ------------------
   15|  1.79k|        {
   16|  1.79k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.79k|            if (number)
  ------------------
  |  Branch (18:17): [True: 1.37k, False: 416]
  ------------------
   19|  1.37k|            {
   20|  1.37k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  1.37k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  1.37k|            }
   23|       |
   24|    416|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.79k|        }
   26|       |
   27|   131k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 749, False: 130k]
  |  Branch (27:13): [True: 1.53k, False: 129k]
  |  Branch (27:36): [True: 788, False: 129k]
  ------------------
   28|  1.53k|        {
   29|  1.53k|            return {Token::Type::Comment, token, line_number, column};
   30|  1.53k|        }
   31|       |
   32|   129k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.31k, False: 127k]
  ------------------
   33|  2.31k|        {
   34|  2.31k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.31k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.31k|        }
   37|       |
   38|   127k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 629, False: 126k]
  ------------------
   39|    629|        {
   40|    629|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|    629|        }
   42|       |
   43|   126k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 8.21k, False: 118k]
  ------------------
   44|  8.21k|        {
   45|  8.21k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  8.21k|                    static_cast<phi::uint32_t>(id)};
   47|  8.21k|        }
   48|       |
   49|   118k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.77k, False: 115k]
  ------------------
   50|  2.77k|        {
   51|  2.77k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.77k|                    static_cast<phi::uint32_t>(id)};
   53|  2.77k|        }
   54|       |
   55|   115k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 54.0k, False: 61.5k]
  ------------------
   56|  54.0k|        {
   57|  54.0k|            return {Token::Type::OpCode, token, line_number, column,
   58|  54.0k|                    static_cast<phi::uint32_t>(opcode)};
   59|  54.0k|        }
   60|       |
   61|  61.5k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   115k|    }

LLVMFuzzerTestOneInput:
   11|  5.41k|{
   12|  5.41k|    static dlx::Processor processor;
   13|       |
   14|  5.41k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   15|       |
   16|       |    // Parse it
   17|  5.41k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   18|       |
   19|       |    // Clear registers and memory
   20|  5.41k|    processor.ClearRegisters();
   21|  5.41k|    processor.ClearMemory();
   22|       |
   23|       |    // Execute
   24|  5.41k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (24:9): [True: 1.43k, False: 3.98k]
  ------------------
   25|  1.43k|    {
   26|  1.43k|        processor.ExecuteCurrentProgram();
   27|  1.43k|    }
   28|       |
   29|  5.41k|    return 0;
   30|  5.41k|}


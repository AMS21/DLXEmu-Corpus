_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   227k|        {
  169|   227k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   227k|            switch (index.unsafe())
  172|   227k|            {
  173|   100k|                case 0:
  ------------------
  |  Branch (173:17): [True: 100k, False: 127k]
  ------------------
  174|   100k|                    return m_Arg1Type;
  175|       |
  176|  65.5k|                case 1:
  ------------------
  |  Branch (176:17): [True: 65.5k, False: 162k]
  ------------------
  177|  65.5k|                    return m_Arg2Type;
  178|       |
  179|  61.8k|                case 2:
  ------------------
  |  Branch (179:17): [True: 61.8k, False: 165k]
  ------------------
  180|  61.8k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 227k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   227k|#endif
  187|   227k|            }
  188|   227k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  58.7k|        {
  195|  58.7k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  58.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 55.2k, False: 3.51k]
  ------------------
  199|  55.2k|            {
  200|  55.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  55.2k|            }
  202|  58.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 33.7k, False: 25.0k]
  ------------------
  203|  33.7k|            {
  204|  33.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  33.7k|            }
  206|  58.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 11.5k, False: 47.2k]
  ------------------
  207|  11.5k|            {
  208|  11.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  11.5k|            }
  210|       |
  211|  58.7k|            return number_of_argument_required;
  212|  58.7k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  7.74M|        {
  216|  7.74M|            return m_RegisterAccessType;
  217|  7.74M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  58.7k|        {
  221|  58.7k|            return m_Executor;
  222|  58.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  23.2M|    {
   38|  23.2M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  23.2M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  23.2M|                                         static_cast<underlying_t>(rhs));
   42|  23.2M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  23.2M|    {
   55|  23.2M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  23.2M|        return static_cast<underlying_t>(type & test) != 0;
   58|  23.2M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   122k|    {
   32|   122k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 1.39k, False: 121k]
  ------------------
   33|  1.39k|        {
   34|  1.39k|            return true;
   35|  1.39k|        }
   36|       |
   37|   121k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 1.38k, False: 119k]
  ------------------
   38|  1.38k|        {
   39|  1.38k|            return true;
   40|  1.38k|        }
   41|       |
   42|   119k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 41.4k, False: 78.3k]
  ------------------
   43|  41.4k|        {
   44|  41.4k|            return true;
   45|  41.4k|        }
   46|       |
   47|  78.3k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 1.35k, False: 76.9k]
  ------------------
   48|  1.35k|        {
   49|  1.35k|            return true;
   50|  1.35k|        }
   51|       |
   52|  76.9k|        return false;
   53|  78.3k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  76.9k|    {
   57|  76.9k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 76.9k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  76.9k|        const char first_char = token.at(0);
   63|       |
   64|  76.9k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 19.8k, False: 57.0k]
  ------------------
   65|  19.8k|        {
   66|  19.8k|            return phi::is_alpha(first_char);
   67|  19.8k|        }
   68|       |
   69|  57.0k|        phi::boolean just_under_scores = (first_char == '_');
   70|  57.0k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 9.77k, False: 47.3k]
  |  Branch (70:15): [True: 43.5k, False: 13.5k]
  |  Branch (70:44): [True: 3.76k, False: 9.77k]
  ------------------
   71|  9.77k|        {
   72|  9.77k|            return false;
   73|  9.77k|        }
   74|       |
   75|   134k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 110k, False: 23.9k]
  ------------------
   76|   110k|        {
   77|   110k|            const char c{token.at(index)};
   78|       |
   79|   110k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 86.0k, False: 24.0k]
  ------------------
   80|  86.0k|            {
   81|  86.0k|                just_under_scores = false;
   82|  86.0k|            }
   83|  24.0k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 693, False: 23.3k]
  ------------------
   84|    693|            {
   85|    693|                continue;
   86|    693|            }
   87|  23.3k|            else
   88|  23.3k|            {
   89|  23.3k|                return false;
   90|  23.3k|            }
   91|   110k|        }
   92|       |
   93|  23.9k|        return !just_under_scores;
   94|  47.3k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   464k|    {
  101|   464k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 464k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   464k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 77.9k, False: 386k]
  ------------------
  107|  77.9k|        {
  108|  77.9k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 7.22k, False: 70.7k]
  ------------------
  109|  7.22k|            {
  110|  7.22k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  7.22k|            }
  112|       |
  113|  70.7k|            return {};
  114|  77.9k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   386k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 1.09k, False: 385k]
  ------------------
  118|  1.09k|        {
  119|  1.09k|            return {};
  120|  1.09k|        }
  121|       |
  122|   385k|        std::int32_t number{0};
  123|   385k|        phi::boolean is_negative{false};
  124|   385k|        phi::boolean starts_with_zero{false};
  125|   385k|        phi::boolean parsing_binary{false};
  126|   385k|        phi::boolean parsing_octal{false};
  127|   385k|        phi::boolean parsing_hexadecimal{false};
  128|   385k|        phi::boolean parsed_something{false};
  129|   385k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   424k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 418k, False: 5.63k]
  ------------------
  134|   418k|        {
  135|   418k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   418k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 385k, False: 33.7k]
  ------------------
  139|   385k|            {
  140|   385k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 659, False: 384k]
  ------------------
  141|    659|                {
  142|    659|                    continue;
  143|    659|                }
  144|       |
  145|   384k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 5.11k, False: 379k]
  ------------------
  146|  5.11k|                {
  147|  5.11k|                    is_negative = true;
  148|  5.11k|                    continue;
  149|  5.11k|                }
  150|       |
  151|   379k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 6.94k, False: 372k]
  ------------------
  152|  6.94k|                {
  153|  6.94k|                    starts_with_zero = true;
  154|  6.94k|                    continue;
  155|  6.94k|                }
  156|       |
  157|   372k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 1.14k, False: 371k]
  ------------------
  158|  1.14k|                {
  159|  1.14k|                    return {};
  160|  1.14k|                }
  161|   372k|            }
  162|       |
  163|       |            // Second character
  164|   405k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 15.8k, False: 389k]
  ------------------
  165|  15.8k|            {
  166|  15.8k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 6.94k, False: 8.92k]
  ------------------
  167|  6.94k|                {
  168|       |                    // Binary
  169|  6.94k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 356, False: 6.59k]
  |  Branch (169:37): [True: 472, False: 6.11k]
  ------------------
  170|    828|                    {
  171|    828|                        parsing_binary = true;
  172|    828|                        continue;
  173|    828|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  6.11k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 393, False: 5.72k]
  |  Branch (176:37): [True: 1.55k, False: 4.17k]
  ------------------
  177|  1.94k|                    {
  178|  1.94k|                        parsing_hexadecimal = true;
  179|  1.94k|                        continue;
  180|  1.94k|                    }
  181|       |
  182|       |                    // Octal
  183|  4.17k|                    parsing_octal = true;
  184|  4.17k|                }
  185|  15.8k|            }
  186|       |
  187|       |            // Handle seperators
  188|   402k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 1.56k, False: 400k]
  ------------------
  189|  1.56k|            {
  190|  1.56k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 642, False: 924]
  ------------------
  191|    642|                {
  192|    642|                    return {};
  193|    642|                }
  194|       |
  195|    924|                parsed_separator = true;
  196|    924|                continue;
  197|  1.56k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   400k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 10.9k, False: 389k]
  |  Branch (200:32): [True: 866, False: 10.1k]
  ------------------
  201|    866|            {
  202|       |                // Would underflow
  203|    866|                return {};
  204|    866|            }
  205|   399k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 389k, False: 10.1k]
  |  Branch (205:17): [True: 602, False: 399k]
  |  Branch (205:33): [True: 602, False: 389k]
  ------------------
  206|    602|            {
  207|       |                // Would overflow
  208|    602|                return {};
  209|    602|            }
  210|       |
  211|   399k|            parsed_separator = false;
  212|   399k|            parsed_something = true;
  213|       |
  214|   399k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 887, False: 398k]
  ------------------
  215|    887|            {
  216|    887|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 468, False: 419]
  ------------------
  217|    468|                {
  218|    468|                    return {};
  219|    468|                }
  220|       |
  221|    419|                number <<= 1;
  222|    419|                number |= (c - '0');
  223|    419|            }
  224|   398k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 4.56k, False: 393k]
  ------------------
  225|  4.56k|            {
  226|  4.56k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 2.03k, False: 2.52k]
  ------------------
  227|  2.03k|                {
  228|  2.03k|                    return {};
  229|  2.03k|                }
  230|       |
  231|  2.52k|                number <<= 3;
  232|  2.52k|                number |= (c - '0');
  233|  2.52k|            }
  234|   393k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 4.72k, False: 389k]
  ------------------
  235|  4.72k|            {
  236|  4.72k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.37k, False: 3.35k]
  ------------------
  237|  1.37k|                {
  238|  1.37k|                    return {};
  239|  1.37k|                }
  240|       |
  241|  3.35k|                number <<= 4;
  242|  3.35k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.35k|            }
  244|   389k|            else
  245|   389k|            {
  246|   389k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 371k, False: 17.2k]
  ------------------
  247|   371k|                {
  248|   371k|                    return {};
  249|   371k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  17.2k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 7.07k, False: 10.1k]
  |  Branch (252:36): [True: 613, False: 6.46k]
  ------------------
  253|    613|                {
  254|    613|                    return {};
  255|    613|                }
  256|       |
  257|  16.6k|                number *= 10;
  258|  16.6k|                number += (c - '0');
  259|  16.6k|            }
  260|   399k|        }
  261|       |
  262|  5.63k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 5.14k, False: 485]
  ------------------
  263|  5.14k|        {
  264|       |            // Check for over/underflow
  265|  5.14k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 2.36k, False: 2.77k]
  |  Branch (265:32): [True: 322, False: 2.04k]
  ------------------
  266|    322|            {
  267|       |                // Would underflow
  268|    322|                return {};
  269|    322|            }
  270|  4.82k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 2.77k, False: 2.04k]
  |  Branch (270:17): [True: 423, False: 4.40k]
  |  Branch (270:33): [True: 423, False: 2.35k]
  ------------------
  271|    423|            {
  272|       |                // Would overflow
  273|    423|                return {};
  274|    423|            }
  275|       |
  276|  4.40k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 2.04k, False: 2.35k]
  ------------------
  277|  2.04k|            {
  278|  2.04k|                return static_cast<std::int16_t>(-number);
  279|  2.04k|            }
  280|       |
  281|  2.35k|            return static_cast<std::int16_t>(number);
  282|  4.40k|        }
  283|       |
  284|    485|        return {};
  285|  5.63k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   422k|        {
   12|   422k|            m_Value = value;
   13|   422k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   136k|        {
   17|   136k|            return m_Value;
   18|   136k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  21.8k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  21.8k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 298k, False: 0]
  ------------------
   64|   298k|            {
   65|   298k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 21.8k, False: 277k]
  ------------------
   66|  21.8k|                {
   67|  21.8k|                    return &token;
   68|  21.8k|                }
   69|   298k|            }
   70|       |
   71|      0|            return nullptr;
   72|  21.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   132k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   132k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   132k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   468k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   468k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   468k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   253k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   253k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   253k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   664k|    {
   11|   664k|        m_Value = val;
   12|   664k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  1.71M|    {
   16|  1.71M|        return m_Value;
   17|  1.71M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  58.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  21.7k|    {
   25|  21.7k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  21.7k|        switch (argument_number.unsafe())
   28|  21.7k|        {
   29|  13.4k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 13.4k, False: 8.27k]
  ------------------
   30|  13.4k|                m_Arg1 = argument;
   31|  13.4k|                break;
   32|  5.16k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 5.16k, False: 16.5k]
  ------------------
   33|  5.16k|                m_Arg2 = argument;
   34|  5.16k|                break;
   35|  3.10k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 3.10k, False: 18.6k]
  ------------------
   36|  3.10k|                m_Arg3 = argument;
   37|  3.10k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 21.7k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  21.7k|#endif
   42|  21.7k|        }
   43|  21.7k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  7.74M|    {
   84|  7.74M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  7.74M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  7.74M|    {
   89|  7.74M|        return m_Info;
   90|  7.74M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   198k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  46.7M|    {
   28|  46.7M|        return m_Type;
   29|  46.7M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  8.73M|    {
   78|  8.73M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  8.73M|        return register_int;
   81|  8.73M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.52M|    {
   85|  1.52M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.52M|        return register_float;
   88|  1.52M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.24M|    {
   93|  1.24M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.24M|        return immediate_value;
   96|  1.24M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
  100|      4|    {
  101|      4|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
  102|       |
  103|      4|        return address_displacement;
  104|      4|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|   464k|    {
  108|   464k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|   464k|        return label;
  111|   464k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  9.99k|    {
  171|  9.99k|        InstructionArgument arg;
  172|  9.99k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  9.99k|        arg.register_int.register_id = id;
  174|  9.99k|        return arg;
  175|  9.99k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  3.32k|    {
  179|  3.32k|        InstructionArgument arg;
  180|  3.32k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  3.32k|        arg.register_float.register_id = id;
  182|  3.32k|        return arg;
  183|  3.32k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  1.50k|    {
  187|  1.50k|        InstructionArgument arg;
  188|  1.50k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  1.50k|        arg.immediate_value.signed_value = value;
  190|  1.50k|        return arg;
  191|  1.50k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  195|    842|    {
  196|    842|        InstructionArgument arg;
  197|    842|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  198|    842|        arg.address_displacement.register_id  = id;
  199|    842|        arg.address_displacement.displacement = displacement;
  200|    842|        return arg;
  201|    842|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  6.05k|    {
  205|  6.05k|        InstructionArgument arg;
  206|  6.05k|        arg.m_Type           = ArgumentType::Label;
  207|  6.05k|        arg.label.label_name = label_name;
  208|  6.05k|        return arg;
  209|  6.05k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|  31.1k|        {
  352|  31.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|  31.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|  31.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|  31.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|  31.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|  31.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|  31.1k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  60.3k|        {
  365|  60.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  60.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  60.3k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  60.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  60.3k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  60.3k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  14.1k|        {
  377|  14.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  14.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  14.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  14.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  14.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  14.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  14.1k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  25.4k|        {
  390|  25.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  25.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  25.4k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  25.4k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  25.4k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  25.4k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  24.3k|        {
  402|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  16.1k|        {
  417|  16.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  16.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  16.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  16.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  16.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  16.1k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  16.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  16.1k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|   403k|        {
  432|   403k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|   403k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|   403k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|   403k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|   403k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|   403k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|   403k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  21.9k|        {
  445|  21.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  21.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  21.9k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  21.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  21.9k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  21.9k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  75.2k|        {
  457|  75.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  75.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  75.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  75.2k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  75.2k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  75.2k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  75.2k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  48.3k|        {
  470|  48.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  48.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  48.3k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  48.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  48.3k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  48.3k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  11.3k|        {
  482|  11.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  11.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  11.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  11.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  11.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  11.3k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  11.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  11.3k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  16.0k|        {
  497|  16.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  16.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  16.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  16.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  16.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  16.0k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  16.0k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  16.0k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  14.8k|        {
  512|  14.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  14.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  14.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  14.8k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  14.8k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  35.0k|        {
  525|  35.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  35.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  35.0k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  35.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  35.0k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  35.0k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  19.1k|        {
  537|  19.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  19.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  19.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  19.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  19.1k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  16.1k|        {
  550|  16.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  16.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  16.1k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  16.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  16.1k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  16.1k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  6.95k|        {
  562|  6.95k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  6.95k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  6.95k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  6.95k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  6.95k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  6.95k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  6.95k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  6.95k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  19.9k|        {
  577|  19.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  19.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  19.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  19.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  19.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  19.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  19.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  19.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|      1|        {
  592|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  593|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|      1|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|  22.5k|        {
  605|  22.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|  22.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  607|  22.5k|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|  22.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|  22.5k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|  22.5k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|      1|        {
  617|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  618|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|      1|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|  22.5k|        {
  630|  22.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|  22.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  632|  22.5k|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|  22.5k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|  22.5k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|  22.5k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  43.4k|        {
  684|  43.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  43.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  43.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  43.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  43.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  43.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  43.4k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  39.7k|        {
  697|  39.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  39.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  39.7k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  39.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  39.7k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  39.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  39.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  51.4k|        {
  710|  51.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  51.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  51.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  51.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  51.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  51.4k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  51.4k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  61.3k|        {
  723|  61.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  61.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  61.3k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  61.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  61.3k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  61.3k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  61.3k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  96.3k|        {
  736|  96.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  96.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  96.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  96.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  96.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  96.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  96.3k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  65.2k|        {
  749|  65.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  65.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  65.2k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  65.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  65.2k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  65.2k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  65.2k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  76.9k|        {
  762|  76.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  76.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  76.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  76.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  76.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  76.9k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  76.9k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  58.7k|        {
  775|  58.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  58.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  58.7k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  58.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  58.7k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  58.7k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  58.7k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  17.9k|        {
  788|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  17.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  17.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  17.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  17.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  19.1k|        {
  802|  19.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  19.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  19.1k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  19.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  19.1k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  19.1k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|   119k|        {
  815|   119k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|   119k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|   119k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|   119k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|   119k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|   119k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|   119k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|   119k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  11.7k|        {
  829|  11.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  11.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  11.7k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  11.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  11.7k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  11.7k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  68.9k|        {
  842|  68.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  68.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  68.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  68.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  68.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  68.9k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  68.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  68.9k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|  13.9k|        {
  856|  13.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|  13.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|  13.9k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|  13.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|  13.9k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|  13.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|  13.9k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  14.0k|        {
  869|  14.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  14.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  14.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  14.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  14.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  14.0k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 0, False: 14.0k]
  ------------------
  877|       |
  878|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  14.0k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  52.7k|        {
  884|  52.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  52.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  52.7k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  52.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  52.7k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 42.4k, False: 10.3k]
  ------------------
  891|       |
  892|  52.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  52.7k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  21.9k|        {
  898|  21.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  21.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  21.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  21.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  21.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  21.9k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 0, False: 21.9k]
  ------------------
  906|       |
  907|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  21.9k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  25.0k|        {
  913|  25.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  25.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  25.0k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  25.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  25.0k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 25.0k, False: 0]
  ------------------
  920|       |
  921|  25.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  25.0k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  64.2k|        {
  927|  64.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  64.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  64.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  64.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  64.2k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  64.2k|            processor.SetFPSRValue(new_value);
  936|  64.2k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  8.87k|        {
  941|  8.87k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  8.87k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  8.87k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  8.87k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  8.87k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  8.87k|            processor.SetFPSRValue(new_value);
  950|  8.87k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  16.7k|        {
  955|  16.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  16.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  16.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  16.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  16.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  16.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 16.7k]
  ------------------
  963|       |
  964|  16.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  16.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  27.6k|        {
  970|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  27.6k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 0, False: 27.6k]
  ------------------
  977|       |
  978|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  27.6k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  32.4k|        {
  984|  32.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  32.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  32.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  32.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  32.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  32.4k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 7.12k, False: 25.2k]
  ------------------
  992|       |
  993|  32.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  32.4k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  29.9k|        {
  999|  29.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  29.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  29.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  29.9k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  29.9k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 29.9k]
  ------------------
 1006|       |
 1007|  29.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  29.9k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  86.7k|        {
 1013|  86.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  86.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  86.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  86.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  86.7k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  86.7k|            processor.SetFPSRValue(new_value);
 1022|  86.7k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|  24.3k|        {
 1027|  24.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|  24.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|  24.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|  24.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|  24.3k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|  24.3k|            processor.SetFPSRValue(new_value);
 1036|  24.3k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|   352k|        {
 1041|   352k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|   352k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|   352k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|   352k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|   352k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|   352k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 265k, False: 86.9k]
  ------------------
 1049|       |
 1050|   352k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|   352k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  27.6k|        {
 1056|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 27.6k, False: 0]
  ------------------
 1063|       |
 1064|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  23.5k|        {
 1070|  23.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  23.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  23.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  23.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  23.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  23.5k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 23.5k, False: 0]
  ------------------
 1078|       |
 1079|  23.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  23.5k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|  19.6k|        {
 1085|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 19.6k, False: 0]
  ------------------
 1092|       |
 1093|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  20.9k|        {
 1099|  20.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  20.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  20.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  20.9k|            processor.SetFPSRValue(new_value);
 1108|  20.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  44.3k|        {
 1113|  44.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  44.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  44.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  44.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  44.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  44.3k|            processor.SetFPSRValue(new_value);
 1122|  44.3k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  17.4k|        {
 1127|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  17.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 15.4k, False: 2.00k]
  ------------------
 1135|       |
 1136|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  17.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|  24.3k|        {
 1142|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 5.83k, False: 18.4k]
  ------------------
 1149|       |
 1150|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  11.0k|        {
 1156|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 11.0k, False: 0]
  ------------------
 1164|       |
 1165|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  11.0k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  42.5k|        {
 1171|  42.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  42.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  42.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  42.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  42.5k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 6.66k, False: 35.8k]
  ------------------
 1178|       |
 1179|  42.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  42.5k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  22.7k|        {
 1185|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  22.7k|            processor.SetFPSRValue(new_value);
 1194|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  27.6k|        {
 1199|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  27.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  27.6k|            processor.SetFPSRValue(new_value);
 1208|  27.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  20.9k|        {
 1213|  20.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  20.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  20.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  20.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  20.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  20.9k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 20.0k, False: 909]
  ------------------
 1221|       |
 1222|  20.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  20.9k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  47.8k|        {
 1228|  47.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  47.8k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  47.8k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  47.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  47.8k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 0, False: 47.8k]
  ------------------
 1235|       |
 1236|  47.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  47.8k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  20.4k|        {
 1242|  20.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  20.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  20.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  20.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  20.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  20.4k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 20.4k, False: 0]
  ------------------
 1250|       |
 1251|  20.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  20.4k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  36.6k|        {
 1257|  36.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  36.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  36.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  36.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  36.6k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 1, False: 36.6k]
  ------------------
 1264|       |
 1265|  36.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  36.6k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  22.5k|        {
 1271|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  22.5k|            processor.SetFPSRValue(new_value);
 1280|  22.5k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  27.6k|        {
 1285|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  27.6k|            processor.SetFPSRValue(new_value);
 1294|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  25.9k|        {
 1299|  25.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  25.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  25.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  25.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  25.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  25.9k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 0, False: 25.9k]
  ------------------
 1307|       |
 1308|  25.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  25.9k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  26.1k|        {
 1314|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 22.4k, False: 3.66k]
  ------------------
 1321|       |
 1322|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  17.9k|        {
 1328|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  17.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 0, False: 17.9k]
  ------------------
 1336|       |
 1337|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  17.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  22.5k|        {
 1343|  22.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  22.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  22.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  22.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  22.5k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 22.5k, False: 0]
  ------------------
 1350|       |
 1351|  22.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  22.5k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  42.3k|        {
 1357|  42.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  42.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  42.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  42.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  42.3k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  42.3k|            processor.SetFPSRValue(new_value);
 1366|  42.3k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  22.7k|        {
 1371|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  22.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  22.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  22.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  22.7k|            processor.SetFPSRValue(new_value);
 1380|  22.7k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|   125k|        {
 1385|   125k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|   125k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|   125k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|   125k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 64.9k, False: 60.1k]
  ------------------
 1391|  64.9k|            {
 1392|  64.9k|                JumpToLabel(processor, jump_label.label_name);
 1393|  64.9k|            }
 1394|   125k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  17.9k|        {
 1399|  17.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  17.9k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  17.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  17.9k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 1, False: 17.9k]
  ------------------
 1405|      1|            {
 1406|      1|                JumpToLabel(processor, jump_label.label_name);
 1407|      1|            }
 1408|  17.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  34.6k|        {
 1413|  34.6k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  34.6k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  34.6k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 1, False: 34.6k]
  ------------------
 1418|      1|            {
 1419|      1|                JumpToLabel(processor, jump_label.label_name);
 1420|      1|            }
 1421|  34.6k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   101k|        {
 1426|   101k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   101k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   101k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 64.3k, False: 37.3k]
  ------------------
 1431|  64.3k|            {
 1432|  64.3k|                JumpToLabel(processor, jump_label.label_name);
 1433|  64.3k|            }
 1434|   101k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|   129k|        {
 1439|   129k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|   129k|            JumpToLabel(processor, jump_label.label_name);
 1442|   129k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  1.67M|        {
 1447|  1.67M|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  1.67M|            JumpToRegister(processor, jump_register.register_id);
 1450|  1.67M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  56.0k|        {
 1455|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  56.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|  27.3k|        {
 1466|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|  27.3k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1472|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  9.82k|        {
 1477|  9.82k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  9.82k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  9.82k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  9.82k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  9.82k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|  18.0k|        {
 1488|  18.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|  18.0k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|  18.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 1, False: 18.0k]
  ------------------
 1493|      1|            {
 1494|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      1|                return;
 1496|      1|            }
 1497|       |
 1498|  18.0k|            phi::i32 address = optional_address.value();
 1499|       |
 1500|  18.0k|            auto optional_value =
 1501|  18.0k|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|  18.0k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 2, False: 18.0k]
  ------------------
 1504|      2|            {
 1505|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      2|                return;
 1508|      2|            }
 1509|       |
 1510|  18.0k|            phi::i32 value = optional_value.value();
 1511|       |
 1512|  18.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|  18.0k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|  23.2k|        {
 1518|  23.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|  23.2k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|  23.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 1, False: 23.2k]
  ------------------
 1523|      1|            {
 1524|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      1|                return;
 1526|      1|            }
 1527|       |
 1528|  23.2k|            phi::i32 address = optional_address.value();
 1529|       |
 1530|  23.2k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|  23.2k|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|  23.2k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 2, False: 23.2k]
  ------------------
 1534|      2|            {
 1535|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      2|                return;
 1538|      2|            }
 1539|       |
 1540|  23.2k|            phi::u32 value = optional_value.value();
 1541|       |
 1542|  23.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|  23.2k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|  24.3k|        {
 1548|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 1, False: 24.3k]
  ------------------
 1553|      1|            {
 1554|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      1|                return;
 1556|      1|            }
 1557|       |
 1558|  24.3k|            phi::i32 address = optional_address.value();
 1559|       |
 1560|  24.3k|            auto optional_value =
 1561|  24.3k|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|  24.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 4, False: 24.3k]
  ------------------
 1564|      4|            {
 1565|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      4|                return;
 1568|      4|            }
 1569|       |
 1570|  24.3k|            phi::i32 value = optional_value.value();
 1571|       |
 1572|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|  24.3k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|  17.5k|        {
 1578|  17.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|  17.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|  17.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 1, False: 17.5k]
  ------------------
 1583|      1|            {
 1584|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      1|                return;
 1586|      1|            }
 1587|       |
 1588|  17.5k|            phi::i32 address = optional_address.value();
 1589|       |
 1590|  17.5k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|  17.5k|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|  17.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 4, False: 17.5k]
  ------------------
 1594|      4|            {
 1595|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      4|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      4|                return;
 1598|      4|            }
 1599|       |
 1600|  17.5k|            phi::u32 value = optional_value.value();
 1601|       |
 1602|  17.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|  17.5k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|  8.33k|        {
 1608|  8.33k|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|  8.33k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|  8.33k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 1, False: 8.33k]
  ------------------
 1613|      1|            {
 1614|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      1|                return;
 1616|      1|            }
 1617|       |
 1618|  8.33k|            phi::i32 address = optional_address.value();
 1619|       |
 1620|  8.33k|            auto optional_value =
 1621|  8.33k|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|  8.33k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 3, False: 8.33k]
  ------------------
 1624|      3|            {
 1625|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      3|                return;
 1628|      3|            }
 1629|       |
 1630|  8.33k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|  8.33k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|  10.7k|        {
 1636|  10.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|  10.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|  10.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 1, False: 10.7k]
  ------------------
 1641|      1|            {
 1642|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      1|                return;
 1644|      1|            }
 1645|       |
 1646|  10.7k|            phi::i32 address = optional_address.value();
 1647|       |
 1648|  10.7k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|  10.7k|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|  10.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 3, False: 10.7k]
  ------------------
 1652|      3|            {
 1653|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      3|                return;
 1656|      3|            }
 1657|       |
 1658|  10.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|  10.7k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|  13.2k|        {
 1664|  13.2k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|  13.2k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|  13.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 1, False: 13.2k]
  ------------------
 1669|      1|            {
 1670|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      1|                return;
 1672|      1|            }
 1673|       |
 1674|  13.2k|            phi::i32 address = optional_address.value();
 1675|       |
 1676|  13.2k|            auto optional_value =
 1677|  13.2k|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|  13.2k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 5, False: 13.2k]
  ------------------
 1680|      5|            {
 1681|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      5|                return;
 1684|      5|            }
 1685|       |
 1686|  13.2k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|  13.2k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|  29.7k|        {
 1692|  29.7k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|  29.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|  29.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 1, False: 29.7k]
  ------------------
 1697|      1|            {
 1698|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      1|                return;
 1700|      1|            }
 1701|       |
 1702|  29.7k|            phi::i32 address = optional_address.value();
 1703|       |
 1704|  29.7k|            auto optional_value =
 1705|  29.7k|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|  29.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 5, False: 29.7k]
  ------------------
 1708|      5|            {
 1709|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      5|                return;
 1712|      5|            }
 1713|       |
 1714|  29.7k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|  29.7k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1719|  22.5k|        {
 1720|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1721|       |
 1722|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1722:17): [True: 1, False: 22.5k]
  ------------------
 1723|      1|            {
 1724|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1725|      1|                return;
 1726|      1|            }
 1727|       |
 1728|  22.5k|            phi::i32 address = optional_address.value();
 1729|       |
 1730|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1731|       |
 1732|  22.5k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1733|       |
 1734|  22.5k|            phi::boolean success =
 1735|  22.5k|                    processor.GetMemory().StoreByte(static_cast<std::size_t>(address.unsafe()),
 1736|  22.5k|                                                    static_cast<std::int8_t>(value.unsafe()));
 1737|       |
 1738|  22.5k|            if (!success)
  ------------------
  |  Branch (1738:17): [True: 5, False: 22.5k]
  ------------------
 1739|      5|            {
 1740|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1741|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1742|      5|            }
 1743|  22.5k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1747|  22.5k|        {
 1748|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1749|       |
 1750|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1750:17): [True: 1, False: 22.5k]
  ------------------
 1751|      1|            {
 1752|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1753|      1|                return;
 1754|      1|            }
 1755|       |
 1756|  22.5k|            phi::i32 address = optional_address.value();
 1757|       |
 1758|  22.5k|            const auto& src_reg = arg2.AsRegisterInt();
 1759|       |
 1760|  22.5k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1761|       |
 1762|  22.5k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1763|  22.5k|                    static_cast<std::size_t>(address.unsafe()),
 1764|  22.5k|                    static_cast<std::uint8_t>(value.unsafe()));
 1765|       |
 1766|  22.5k|            if (!success)
  ------------------
  |  Branch (1766:17): [True: 4, False: 22.5k]
  ------------------
 1767|      4|            {
 1768|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1769|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1770|      4|            }
 1771|  22.5k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1775|  25.3k|        {
 1776|  25.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1777|       |
 1778|  25.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1778:17): [True: 1, False: 25.3k]
  ------------------
 1779|      1|            {
 1780|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1781|      1|                return;
 1782|      1|            }
 1783|       |
 1784|  25.3k|            phi::i32 address = optional_address.value();
 1785|       |
 1786|  25.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1787|       |
 1788|  25.3k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1789|       |
 1790|  25.3k|            phi::boolean success =
 1791|  25.3k|                    processor.GetMemory().StoreHalfWord(static_cast<std::size_t>(address.unsafe()),
 1792|  25.3k|                                                        static_cast<std::int16_t>(value.unsafe()));
 1793|       |
 1794|  25.3k|            if (!success)
  ------------------
  |  Branch (1794:17): [True: 3, False: 25.3k]
  ------------------
 1795|      3|            {
 1796|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1797|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1798|      3|            }
 1799|  25.3k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1803|  35.2k|        {
 1804|  35.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1805|       |
 1806|  35.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1806:17): [True: 1, False: 35.2k]
  ------------------
 1807|      1|            {
 1808|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1809|      1|                return;
 1810|      1|            }
 1811|       |
 1812|  35.2k|            phi::i32 address = optional_address.value();
 1813|       |
 1814|  35.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1815|       |
 1816|  35.2k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1817|       |
 1818|  35.2k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1819|  35.2k|                    static_cast<std::size_t>(address.unsafe()),
 1820|  35.2k|                    static_cast<std::uint16_t>(value.unsafe()));
 1821|       |
 1822|  35.2k|            if (!success)
  ------------------
  |  Branch (1822:17): [True: 3, False: 35.2k]
  ------------------
 1823|      3|            {
 1824|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1825|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1826|      3|            }
 1827|  35.2k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1831|  21.2k|        {
 1832|  21.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1833|       |
 1834|  21.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1834:17): [True: 1, False: 21.2k]
  ------------------
 1835|      1|            {
 1836|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1837|      1|                return;
 1838|      1|            }
 1839|       |
 1840|  21.2k|            phi::i32 address = optional_address.value();
 1841|       |
 1842|  21.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1843|       |
 1844|  21.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1845|       |
 1846|  21.2k|            phi::boolean success = processor.GetMemory().StoreWord(
 1847|  21.2k|                    static_cast<std::size_t>(address.unsafe()), value);
 1848|       |
 1849|  21.2k|            if (!success)
  ------------------
  |  Branch (1849:17): [True: 2, False: 21.2k]
  ------------------
 1850|      2|            {
 1851|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1852|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1853|      2|            }
 1854|  21.2k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1858|  17.9k|        {
 1859|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1860|       |
 1861|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1861:17): [True: 1, False: 17.9k]
  ------------------
 1862|      1|            {
 1863|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1864|      1|                return;
 1865|      1|            }
 1866|       |
 1867|  17.9k|            phi::i32 address = optional_address.value();
 1868|       |
 1869|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1870|       |
 1871|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1872|       |
 1873|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1874|  17.9k|                    static_cast<std::size_t>(address.unsafe()), value);
 1875|       |
 1876|  17.9k|            if (!success)
  ------------------
  |  Branch (1876:17): [True: 3, False: 17.9k]
  ------------------
 1877|      3|            {
 1878|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1879|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1880|      3|            }
 1881|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1885|  18.3k|        {
 1886|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1887|       |
 1888|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1888:17): [True: 1, False: 18.3k]
  ------------------
 1889|      1|            {
 1890|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1891|      1|                return;
 1892|      1|            }
 1893|       |
 1894|  18.3k|            phi::i32 address = optional_address.value();
 1895|       |
 1896|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1897|       |
 1898|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1899|       |
 1900|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1901|  18.3k|                    static_cast<std::size_t>(address.unsafe()), value);
 1902|       |
 1903|  18.3k|            if (!success)
  ------------------
  |  Branch (1903:17): [True: 4, False: 18.3k]
  ------------------
 1904|      4|            {
 1905|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1906|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1907|      4|            }
 1908|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1912|  22.5k|        {
 1913|  22.5k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1914|       |
 1915|  22.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1915:17): [True: 2, False: 22.5k]
  ------------------
 1916|      2|            {
 1917|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1918|      2|                return;
 1919|      2|            }
 1920|       |
 1921|  22.5k|            phi::i32 address = optional_address.value();
 1922|       |
 1923|  22.5k|            const auto& src_reg = arg2.AsRegisterFloat();
 1924|       |
 1925|  22.5k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1926|       |
 1927|  22.5k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1928|  22.5k|                    static_cast<std::size_t>(address.unsafe()), value);
 1929|       |
 1930|  22.5k|            if (!success)
  ------------------
  |  Branch (1930:17): [True: 4, False: 22.5k]
  ------------------
 1931|      4|            {
 1932|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1933|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1934|      4|            }
 1935|  22.5k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  17.1k|        {
 1940|  17.1k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  17.1k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  17.1k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  17.1k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  17.1k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  13.7k|        {
 1951|  13.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  13.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  13.7k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  13.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  13.7k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  16.6k|        {
 1989|  16.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  16.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  16.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  16.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  16.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  12.8k|        {
 2000|  12.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  12.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  12.8k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  12.8k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  12.8k|            const float        converted_value_float =
 2006|  12.8k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  12.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  12.8k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  26.8k|        {
 2014|  26.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  26.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  26.8k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  26.8k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  26.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  26.8k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  15.1k|        {
 2026|  15.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  15.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  15.1k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  15.1k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  15.1k|            const float        converted_value_float =
 2032|  15.1k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  15.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  15.1k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  32.5k|        {
 2040|  32.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  32.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  32.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  32.5k|            const std::int32_t converted_value_int =
 2045|  32.5k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  32.5k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  32.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  32.5k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  26.1k|        {
 2054|  26.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  26.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  26.1k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  26.1k|            const std::int32_t converted_value_int =
 2059|  26.1k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  26.1k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  26.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  26.1k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      2|        {
 2074|      2|            processor.Raise(Exception::Halt);
 2075|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|  2.05M|        {
 2080|       |            /* Do nothing */
 2081|  2.05M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|  91.5k|    {
  170|  91.5k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|  91.5k|        SafeWriteInteger(processor, dest_reg, res);
  173|  91.5k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   589k|    {
  125|   589k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   589k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   589k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 20.9k, False: 568k]
  ------------------
  130|  20.9k|        {
  131|  20.9k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  20.9k|            value = max + (value % (min - 1));
  134|  20.9k|        }
  135|       |        // Check for overflow
  136|   568k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 78.0k, False: 490k]
  ------------------
  137|  78.0k|        {
  138|  78.0k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  78.0k|            value = min + (value % (max + 1));
  141|  78.0k|        }
  142|       |
  143|   589k|        PHI_ASSERT(value >= min);
  144|   589k|        PHI_ASSERT(value <= max);
  145|       |
  146|   589k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   589k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  39.5k|    {
  178|  39.5k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  39.5k|        SafeWriteInteger(processor, dest_reg, res);
  181|  39.5k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   220k|    {
  152|   220k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   220k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 0, False: 220k]
  ------------------
  156|      0|        {
  157|      0|            processor.Raise(Exception::Overflow);
  158|       |
  159|      0|            value %= max + 1u;
  160|      0|        }
  161|       |
  162|   220k|        PHI_ASSERT(value <= max);
  163|       |
  164|   220k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   220k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|   425k|    {
  186|   425k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|   425k|        SafeWriteInteger(processor, dest_reg, res);
  189|   425k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   123k|    {
  194|   123k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   123k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 48.9k, False: 74.7k]
  ------------------
  197|  48.9k|        {
  198|  48.9k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  48.9k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  48.9k|            SafeWriteInteger(processor, dest_reg, res);
  202|  48.9k|            return;
  203|  48.9k|        }
  204|       |
  205|  74.7k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  74.7k|        SafeWriteInteger(processor, dest_reg, res);
  208|  74.7k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  49.8k|    {
  213|  49.8k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  49.8k|        SafeWriteInteger(processor, dest_reg, res);
  216|  49.8k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  35.2k|    {
  221|  35.2k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  35.2k|        SafeWriteInteger(processor, dest_reg, res);
  224|  35.2k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  22.5k|    {
  229|  22.5k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 22.5k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  22.5k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  22.5k|        SafeWriteInteger(processor, dest_reg, res);
  238|  22.5k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  22.5k|    {
  243|  22.5k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 2, False: 22.5k]
  ------------------
  244|      2|        {
  245|      2|            processor.Raise(Exception::DivideByZero);
  246|      2|            return;
  247|      2|        }
  248|       |
  249|  22.5k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  22.5k|        SafeWriteInteger(processor, dest_reg, res);
  252|  22.5k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   244k|    {
  326|   244k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 55.7k, False: 189k]
  ------------------
  327|  55.7k|        {
  328|  55.7k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  55.7k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  55.7k|            return;
  333|  55.7k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   189k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 36.4k, False: 152k]
  ------------------
  337|  36.4k|        {
  338|  36.4k|            processor.Raise(Exception::BadShift);
  339|  36.4k|            return;
  340|  36.4k|        }
  341|       |
  342|   152k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   152k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   152k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|   112k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|   112k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 37.2k, False: 75.4k]
  ------------------
  259|  37.2k|        {
  260|  37.2k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  37.2k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  37.2k|            return;
  265|  37.2k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  75.4k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 27.0k, False: 48.3k]
  ------------------
  269|  27.0k|        {
  270|  27.0k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  27.0k|            return;
  272|  27.0k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  48.3k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 23.9k, False: 24.4k]
  ------------------
  276|  23.9k|        {
  277|  23.9k|            processor.Raise(Exception::BadShift);
  278|  23.9k|            return;
  279|  23.9k|        }
  280|       |
  281|  24.4k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  24.4k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  24.4k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  24.4k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  24.4k|    {
   30|  24.4k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  24.4k|        return value & ~(-1 << (32 - n));
   33|  24.4k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|   135k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|   135k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 43.6k, False: 92.0k]
  ------------------
  293|  43.6k|        {
  294|  43.6k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  43.6k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 8.70k, False: 34.9k]
  ------------------
  298|  8.70k|            {
  299|       |                // Set every byte to 1
  300|  8.70k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  8.70k|            }
  302|  34.9k|            else
  303|  34.9k|            {
  304|       |                // Set every byte to 0
  305|  34.9k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  34.9k|            }
  307|  43.6k|            return;
  308|  43.6k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  92.0k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 51.1k, False: 40.9k]
  ------------------
  312|  51.1k|        {
  313|  51.1k|            processor.Raise(Exception::BadShift);
  314|  51.1k|            return;
  315|  51.1k|        }
  316|       |
  317|  40.9k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  40.9k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  40.9k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|   314k|    {
   39|       |        // Lookup the label
   40|   314k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|   314k|        PHI_ASSERT(program != nullptr);
   42|   314k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|   314k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 126, False: 314k]
  ------------------
   45|    126|        {
   46|    126|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    126|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    126|            processor.Raise(Exception::UnknownLabel);
   48|    126|            return;
   49|    126|        }
   50|       |
   51|   314k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|   314k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|   314k|        processor.SetNextProgramCounter(jump_point);
   56|   314k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  1.70M|    {
   60|  1.70M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  1.70M|        phi::u32 max_address =
   63|  1.70M|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  1.70M|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 40, False: 1.70M]
  ------------------
   65|     40|        {
   66|     40|            processor.Raise(Exception::AddressOutOfBounds);
   67|     40|            return;
   68|     40|        }
   69|       |
   70|  1.70M|        processor.SetNextProgramCounter(address.unsafe());
   71|  1.70M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|   330k|    {
  101|   330k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 330k, False: 4]
  ------------------
  102|   330k|        {
  103|   330k|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|   330k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 16, False: 330k]
  ------------------
  106|     16|            {
  107|     16|                return {};
  108|     16|            }
  109|       |
  110|   330k|            return imm_value.signed_value;
  111|   330k|        }
  112|       |
  113|      4|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      4|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      4|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|   330k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   78|      4|    {
   79|      4|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   80|       |
   81|      4|        phi::i32 address = adr_displacement.displacement + register_value;
   82|       |
   83|      4|        if (address < 0)
  ------------------
  |  Branch (83:13): [True: 1, False: 3]
  ------------------
   84|      1|        {
   85|      1|            processor.Raise(Exception::AddressOutOfBounds);
   86|      1|            return {};
   87|      1|        }
   88|       |
   89|      3|        return address;
   90|      4|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  7.74M|    {
   12|  7.74M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  7.74M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  7.74M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  7.74M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  7.74M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  7.74M|                   "Unexpected argument type for arg1");
   22|  7.74M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  7.74M|                   "Unexpected argument type for arg2");
   24|  7.74M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  7.74M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  7.74M|        m_Executor(processor, arg1, arg2, arg3);
   29|  7.74M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  58.7k|    {
  453|  58.7k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  58.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.55M|    {
   17|  1.55M|        m_ValueSigned = val;
   18|  1.55M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   229k|    {
   22|   229k|        m_ValueUnsigned = val;
   23|   229k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  3.57M|    {
   27|  3.57M|        return m_ValueSigned;
   28|  3.57M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  2.53M|    {
   32|  2.53M|        return m_ValueUnsigned;
   33|  2.53M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.59M|    {
   37|  2.59M|        return m_IsReadOnly;
   38|  2.59M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  18.0k|    {
   22|  18.0k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 2, False: 18.0k]
  ------------------
   23|      2|        {
   24|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      2|            return {};
   26|      2|        }
   27|       |
   28|  18.0k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|  18.0k|        return m_Values[raw_address].signed_value;
   31|  18.0k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  23.2k|    {
   35|  23.2k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2, False: 23.2k]
  ------------------
   36|      2|        {
   37|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      2|            return {};
   39|      2|        }
   40|       |
   41|  23.2k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|  23.2k|        return m_Values[raw_address].unsigned_value;
   43|  23.2k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  24.3k|    {
   47|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 3, False: 24.3k]
  ------------------
   48|      3|        {
   49|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      3|            return {};
   51|      3|        }
   52|       |
   53|  24.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|  24.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 1, False: 24.3k]
  ------------------
   56|      1|        {
   57|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      1|            return {};
   59|      1|        }
   60|       |
   61|  24.3k|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|  24.3k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  17.5k|    {
   66|  17.5k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 3, False: 17.5k]
  ------------------
   67|      3|        {
   68|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      3|            return {};
   70|      3|        }
   71|       |
   72|  17.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  17.5k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 1, False: 17.5k]
  ------------------
   75|      1|        {
   76|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      1|            return {};
   78|      1|        }
   79|       |
   80|  17.5k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  17.5k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  8.33k|    {
   85|  8.33k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2, False: 8.33k]
  ------------------
   86|      2|        {
   87|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      2|            return {};
   89|      2|        }
   90|       |
   91|  8.33k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  8.33k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 1, False: 8.33k]
  ------------------
   94|      1|        {
   95|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      1|            return {};
   97|      1|        }
   98|       |
   99|  8.33k|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  8.33k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  10.7k|    {
  104|  10.7k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 2, False: 10.7k]
  ------------------
  105|      2|        {
  106|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      2|            return {};
  108|      2|        }
  109|       |
  110|  10.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|  10.7k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 10.7k]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|  10.7k|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|  10.7k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  13.2k|    {
  123|  13.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 4, False: 13.2k]
  ------------------
  124|      4|        {
  125|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      4|            return {};
  127|      4|        }
  128|       |
  129|  13.2k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  13.2k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1, False: 13.2k]
  ------------------
  132|      1|        {
  133|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      1|            return {};
  135|      1|        }
  136|       |
  137|  13.2k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  13.2k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  29.7k|    {
  142|  29.7k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 4, False: 29.7k]
  ------------------
  143|      4|        {
  144|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      4|            return {};
  146|      4|        }
  147|       |
  148|  29.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|  29.7k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 1, False: 29.7k]
  ------------------
  151|      1|        {
  152|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      1|            return {};
  154|      1|        }
  155|       |
  156|  29.7k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|  29.7k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  22.5k|    {
  161|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 5, False: 22.5k]
  ------------------
  162|      5|        {
  163|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|      5|            return false;
  165|      5|        }
  166|       |
  167|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|  22.5k|        return true;
  169|  22.5k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  22.5k|    {
  173|  22.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 4, False: 22.5k]
  ------------------
  174|      4|        {
  175|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|      4|            return false;
  177|      4|        }
  178|       |
  179|  22.5k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|  22.5k|        return true;
  181|  22.5k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  25.3k|    {
  185|  25.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 3, False: 25.3k]
  ------------------
  186|      3|        {
  187|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|      3|            return false;
  189|      3|        }
  190|       |
  191|  25.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|  25.3k|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|  25.3k|        return true;
  195|  25.3k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  35.2k|    {
  199|  35.2k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 3, False: 35.2k]
  ------------------
  200|      3|        {
  201|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|      3|            return false;
  203|      3|        }
  204|       |
  205|  35.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|  35.2k|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|  35.2k|        return true;
  209|  35.2k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  21.2k|    {
  213|  21.2k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 2, False: 21.2k]
  ------------------
  214|      2|        {
  215|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|      2|            return false;
  217|      2|        }
  218|       |
  219|  21.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|  21.2k|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|  21.2k|        return true;
  223|  21.2k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  17.9k|    {
  227|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3, False: 17.9k]
  ------------------
  228|      3|        {
  229|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|      3|            return false;
  231|      3|        }
  232|       |
  233|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|  17.9k|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|  17.9k|        return true;
  237|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  18.3k|    {
  241|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 4, False: 18.3k]
  ------------------
  242|      4|        {
  243|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|      4|            return false;
  245|      4|        }
  246|       |
  247|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  18.3k|        return true;
  251|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  22.5k|    {
  255|  22.5k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 4, False: 22.5k]
  ------------------
  256|      4|        {
  257|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|      4|            return false;
  259|      4|        }
  260|       |
  261|  22.5k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  22.5k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  22.5k|        return true;
  265|  22.5k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|   330k|    {
  269|       |        // Cannot access anything before the starting address
  270|   330k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 34, False: 330k]
  ------------------
  271|     34|        {
  272|     34|            return false;
  273|     34|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|   330k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 330k]
  ------------------
  277|   330k|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|   330k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 330k]
  ------------------
  284|   330k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|   330k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 16, False: 330k]
  ------------------
  291|     16|        {
  292|     16|            return false;
  293|     16|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|   330k|        return true;
  297|   330k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|   104k|    {
  302|   104k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 104k, False: 0]
  |  Branch (302:30): [True: 104k, False: 6]
  ------------------
  303|   104k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  7.10k|    {
  307|  7.10k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 7.10M, False: 7.10k]
  ------------------
  308|  7.10M|        {
  309|  7.10M|            val.signed_value = 0;
  310|  7.10M|        }
  311|  7.10k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   541k|    {
   24|   541k|        switch (token.length())
   25|   541k|        {
   26|       |            // 1 character OpCodes
   27|  87.3k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 87.3k, False: 454k]
  ------------------
   28|  87.3k|                char c1 = token[0];
   29|  87.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 22.3k, False: 65.0k]
  ------------------
   30|  22.3k|                {
   31|  22.3k|                    return OpCode::J;
   32|  22.3k|                }
   33|  65.0k|                break;
   34|  87.3k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  92.6k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 92.6k, False: 448k]
  ------------------
   38|  92.6k|                char c1 = token[0];
   39|  92.6k|                char c2 = token[1];
   40|       |
   41|  92.6k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 53.8k, False: 38.7k]
  ------------------
   42|  92.6k|                {
   43|  2.64k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 2.64k, False: 89.9k]
  ------------------
   44|  4.09k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.45k, False: 91.1k]
  ------------------
   45|  4.09k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 1.55k, False: 2.54k]
  ------------------
   46|  1.55k|                        {
   47|  1.55k|                            return OpCode::JR;
   48|  1.55k|                        }
   49|  2.54k|                        break;
   50|       |
   51|  6.90k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 6.90k, False: 85.6k]
  ------------------
   52|  9.73k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 2.83k, False: 89.7k]
  ------------------
   53|  9.73k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 3.08k, False: 6.64k]
  ------------------
   54|  9.73k|                        {
   55|  1.58k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 1.58k, False: 8.15k]
  ------------------
   56|  1.79k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 210, False: 9.52k]
  ------------------
   57|  1.79k|                                return OpCode::LB;
   58|    505|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 505, False: 9.23k]
  ------------------
   59|    716|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 211, False: 9.52k]
  ------------------
   60|    716|                                return OpCode::LD;
   61|  1.53k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.53k, False: 8.20k]
  ------------------
   62|  1.99k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 461, False: 9.27k]
  ------------------
   63|  1.99k|                                return OpCode::LF;
   64|    356|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 356, False: 9.38k]
  ------------------
   65|    709|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 353, False: 9.38k]
  ------------------
   66|    709|                                return OpCode::LH;
   67|  1.20k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.20k, False: 8.53k]
  ------------------
   68|  1.43k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 224, False: 9.51k]
  ------------------
   69|  1.43k|                                return OpCode::LW;
   70|  9.73k|                        }
   71|  3.08k|                        break;
   72|  3.08k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 1.72k, False: 90.8k]
  ------------------
   73|  5.32k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 3.60k, False: 89.0k]
  ------------------
   74|  5.32k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 2.71k, False: 2.61k]
  ------------------
   75|  2.71k|                        {
   76|  2.71k|                            return OpCode::OR;
   77|  2.71k|                        }
   78|  2.61k|                        break;
   79|  15.1k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 15.1k, False: 77.4k]
  ------------------
   80|  19.6k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 4.45k, False: 88.1k]
  ------------------
   81|  19.6k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 4.62k, False: 15.0k]
  ------------------
   82|  19.6k|                        {
   83|    852|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 852, False: 18.7k]
  ------------------
   84|  2.47k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 1.62k, False: 18.0k]
  ------------------
   85|  2.47k|                                return OpCode::SB;
   86|    459|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 459, False: 19.1k]
  ------------------
   87|  1.39k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 938, False: 18.7k]
  ------------------
   88|  1.39k|                                return OpCode::SD;
   89|    545|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 545, False: 19.0k]
  ------------------
   90|  8.70k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 8.15k, False: 11.4k]
  ------------------
   91|  8.70k|                                return OpCode::SF;
   92|    980|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 980, False: 18.6k]
  ------------------
   93|  1.23k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 259, False: 19.3k]
  ------------------
   94|  1.23k|                                return OpCode::SH;
   95|    216|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 216, False: 19.4k]
  ------------------
   96|  1.20k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 985, False: 18.6k]
  ------------------
   97|  1.20k|                                return OpCode::SW;
   98|  19.6k|                        }
   99|  4.62k|                        break;
  100|  92.6k|                }
  101|  66.6k|                break;
  102|  92.6k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   136k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 136k, False: 404k]
  ------------------
  106|   136k|                char c1 = token[0];
  107|   136k|                char c2 = token[1];
  108|   136k|                char c3 = token[2];
  109|       |
  110|   136k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 37.0k, False: 99.5k]
  ------------------
  111|   136k|                {
  112|  1.53k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 1.53k, False: 135k]
  ------------------
  113|  5.02k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 3.48k, False: 133k]
  ------------------
  114|  5.02k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 2.53k, False: 2.49k]
  |  Branch (114:29): [True: 1.02k, False: 4.00k]
  |  Branch (114:45): [True: 1.02k, False: 1.51k]
  ------------------
  115|  1.02k|                        {
  116|  1.02k|                            return OpCode::ADD;
  117|  1.02k|                        }
  118|  4.00k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 2.12k, False: 1.87k]
  |  Branch (118:34): [True: 1.57k, False: 2.42k]
  |  Branch (118:50): [True: 1.57k, False: 545]
  ------------------
  119|  1.57k|                        {
  120|  1.57k|                            return OpCode::AND;
  121|  1.57k|                        }
  122|  2.42k|                        break;
  123|       |
  124|  2.42k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.31k, False: 135k]
  ------------------
  125|  2.76k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 1.45k, False: 135k]
  ------------------
  126|  2.76k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 1.97k, False: 789]
  |  Branch (126:29): [True: 633, False: 2.13k]
  |  Branch (126:45): [True: 633, False: 1.34k]
  ------------------
  127|    633|                        {
  128|    633|                            return OpCode::DIV;
  129|    633|                        }
  130|  2.13k|                        break;
  131|       |
  132|  2.13k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 641, False: 135k]
  ------------------
  133|  4.14k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 3.49k, False: 133k]
  ------------------
  134|  4.14k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 3.28k, False: 854]
  ------------------
  135|  3.28k|                        {
  136|  3.28k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 2.35k, False: 934]
  ------------------
  137|  2.35k|                            {
  138|  2.35k|                                return OpCode::EQD;
  139|  2.35k|                            }
  140|    934|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 408, False: 526]
  ------------------
  141|    408|                            {
  142|    408|                                return OpCode::EQF;
  143|    408|                            }
  144|  3.28k|                        }
  145|  1.38k|                        break;
  146|       |
  147|  4.23k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 4.23k, False: 132k]
  ------------------
  148|  11.1k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 6.95k, False: 129k]
  ------------------
  149|  11.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 6.26k, False: 4.91k]
  ------------------
  150|  6.26k|                        {
  151|  6.26k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.59k, False: 4.66k]
  ------------------
  152|  1.59k|                            {
  153|  1.59k|                                return OpCode::GED;
  154|  1.59k|                            }
  155|  4.66k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.23k, False: 3.43k]
  ------------------
  156|  1.23k|                            {
  157|  1.23k|                                return OpCode::GEF;
  158|  1.23k|                            }
  159|  6.26k|                        }
  160|  4.91k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 3.90k, False: 1.01k]
  ------------------
  161|  3.90k|                        {
  162|  3.90k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 2.33k, False: 1.57k]
  ------------------
  163|  2.33k|                            {
  164|  2.33k|                                return OpCode::GTD;
  165|  2.33k|                            }
  166|  1.57k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 889, False: 682]
  ------------------
  167|    889|                            {
  168|    889|                                return OpCode::GTF;
  169|    889|                            }
  170|  1.57k|                        }
  171|  5.13k|                        break;
  172|       |
  173|  5.13k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 2.57k, False: 134k]
  ------------------
  174|  4.06k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.48k, False: 135k]
  ------------------
  175|  4.06k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.97k, False: 2.08k]
  |  Branch (175:29): [True: 1.29k, False: 2.76k]
  |  Branch (175:45): [True: 1.29k, False: 681]
  ------------------
  176|  1.29k|                        {
  177|  1.29k|                            return OpCode::JAL;
  178|  1.29k|                        }
  179|  2.76k|                        break;
  180|       |
  181|  14.4k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 14.4k, False: 122k]
  ------------------
  182|  22.4k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 8.06k, False: 128k]
  ------------------
  183|  22.4k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 2.51k, False: 19.9k]
  ------------------
  184|  22.4k|                        {
  185|  2.74k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 2.74k, False: 19.7k]
  ------------------
  186|  3.21k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 471, False: 22.0k]
  ------------------
  187|  3.21k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 1.26k, False: 1.95k]
  ------------------
  188|  1.26k|                                {
  189|  1.26k|                                    return OpCode::LBU;
  190|  1.26k|                                }
  191|  1.95k|                                break;
  192|       |
  193|  2.20k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 2.20k, False: 20.2k]
  ------------------
  194|  4.84k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 2.63k, False: 19.8k]
  ------------------
  195|  4.84k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.31k, False: 3.52k]
  ------------------
  196|  1.31k|                                {
  197|  1.31k|                                    return OpCode::LED;
  198|  1.31k|                                }
  199|  3.52k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 3.24k, False: 282]
  ------------------
  200|  3.24k|                                {
  201|  3.24k|                                    return OpCode::LEF;
  202|  3.24k|                                }
  203|    282|                                break;
  204|       |
  205|    830|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 830, False: 21.6k]
  ------------------
  206|  2.62k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.79k, False: 20.6k]
  ------------------
  207|  2.62k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 916, False: 1.70k]
  ------------------
  208|    916|                                {
  209|    916|                                    return OpCode::LHI;
  210|    916|                                }
  211|  1.70k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.01k, False: 691]
  ------------------
  212|  1.01k|                                {
  213|  1.01k|                                    return OpCode::LHU;
  214|  1.01k|                                }
  215|    691|                                break;
  216|       |
  217|  4.42k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 4.42k, False: 18.0k]
  ------------------
  218|  6.18k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 1.76k, False: 20.7k]
  ------------------
  219|  6.18k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 2.55k, False: 3.63k]
  ------------------
  220|  2.55k|                                {
  221|  2.55k|                                    return OpCode::LTD;
  222|  2.55k|                                }
  223|  3.63k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.54k, False: 1.08k]
  ------------------
  224|  2.54k|                                {
  225|  2.54k|                                    return OpCode::LTF;
  226|  2.54k|                                }
  227|  1.08k|                                break;
  228|       |
  229|  1.30k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.30k, False: 21.1k]
  ------------------
  230|  3.09k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 1.79k, False: 20.6k]
  ------------------
  231|  3.09k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 2.18k, False: 917]
  ------------------
  232|  2.18k|                                {
  233|  2.18k|                                    return OpCode::LWU;
  234|  2.18k|                                }
  235|    917|                                break;
  236|  22.4k|                        }
  237|  7.43k|                        break;
  238|       |
  239|  9.21k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 9.21k, False: 127k]
  ------------------
  240|  11.4k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 2.23k, False: 134k]
  ------------------
  241|  11.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 5.51k, False: 5.93k]
  ------------------
  242|  5.51k|                        {
  243|  5.51k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 2.00k, False: 3.51k]
  ------------------
  244|  2.00k|                            {
  245|  2.00k|                                return OpCode::NED;
  246|  2.00k|                            }
  247|  3.51k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 1.36k, False: 2.15k]
  ------------------
  248|  1.36k|                            {
  249|  1.36k|                                return OpCode::NEF;
  250|  1.36k|                            }
  251|  5.51k|                        }
  252|  5.93k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 5.18k, False: 744]
  |  Branch (252:34): [True: 4.32k, False: 1.60k]
  |  Branch (252:50): [True: 4.32k, False: 862]
  ------------------
  253|  4.32k|                        {
  254|  4.32k|                            return OpCode::NOP;
  255|  4.32k|                        }
  256|       |
  257|  3.75k|                        break;
  258|       |
  259|  3.75k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 3.01k, False: 133k]
  ------------------
  260|  6.44k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 3.43k, False: 133k]
  ------------------
  261|  6.44k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 4.55k, False: 1.89k]
  |  Branch (261:29): [True: 1.82k, False: 4.61k]
  |  Branch (261:45): [True: 1.82k, False: 2.72k]
  ------------------
  262|  1.82k|                        {
  263|  1.82k|                            return OpCode::ORI;
  264|  1.82k|                        }
  265|  4.61k|                        break;
  266|       |
  267|  12.0k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 12.0k, False: 124k]
  ------------------
  268|  28.8k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 16.7k, False: 119k]
  ------------------
  269|  28.8k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 2.01k, False: 26.8k]
  ------------------
  270|  28.8k|                        {
  271|  1.15k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.15k, False: 27.6k]
  ------------------
  272|  3.31k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 2.15k, False: 26.6k]
  ------------------
  273|  3.31k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.58k, False: 1.73k]
  ------------------
  274|  1.58k|                                {
  275|  1.58k|                                    return OpCode::SBU;
  276|  1.58k|                                }
  277|  1.73k|                                break;
  278|       |
  279|  1.73k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 776, False: 28.0k]
  ------------------
  280|  1.11k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 336, False: 28.4k]
  ------------------
  281|  1.11k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 699, False: 413]
  ------------------
  282|    699|                                {
  283|    699|                                    return OpCode::SEQ;
  284|    699|                                }
  285|    413|                                break;
  286|       |
  287|  1.50k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 1.50k, False: 27.3k]
  ------------------
  288|  3.57k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.07k, False: 26.7k]
  ------------------
  289|  3.57k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 1.31k, False: 2.26k]
  ------------------
  290|  1.31k|                                {
  291|  1.31k|                                    return OpCode::SGE;
  292|  1.31k|                                }
  293|  2.26k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 731, False: 1.53k]
  ------------------
  294|    731|                                {
  295|    731|                                    return OpCode::SGT;
  296|    731|                                }
  297|  1.53k|                                break;
  298|       |
  299|  1.53k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.19k, False: 27.6k]
  ------------------
  300|  2.64k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 1.44k, False: 27.3k]
  ------------------
  301|  2.64k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.64k, False: 1.00k]
  ------------------
  302|  1.64k|                                {
  303|  1.64k|                                    return OpCode::SHU;
  304|  1.64k|                                }
  305|  1.00k|                                break;
  306|       |
  307|  3.28k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 3.28k, False: 25.5k]
  ------------------
  308|  5.58k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 2.29k, False: 26.5k]
  ------------------
  309|  5.58k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.15k, False: 4.42k]
  ------------------
  310|  5.58k|                                {
  311|    331|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 331, False: 5.24k]
  ------------------
  312|  1.45k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 1.12k, False: 4.45k]
  ------------------
  313|  1.45k|                                        return OpCode::SLA;
  314|       |
  315|    203|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 203, False: 5.37k]
  ------------------
  316|  1.32k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 1.12k, False: 4.45k]
  ------------------
  317|  1.32k|                                        return OpCode::SLE;
  318|       |
  319|    352|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 352, False: 5.22k]
  ------------------
  320|    930|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 578, False: 5.00k]
  ------------------
  321|    930|                                        return OpCode::SLL;
  322|       |
  323|    494|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 494, False: 5.08k]
  ------------------
  324|    712|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 218, False: 5.36k]
  ------------------
  325|    712|                                        return OpCode::SLT;
  326|  5.58k|                                }
  327|  1.15k|                                break;
  328|       |
  329|  1.71k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.71k, False: 27.1k]
  ------------------
  330|  3.41k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 1.70k, False: 27.1k]
  ------------------
  331|  3.41k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.22k, False: 2.18k]
  ------------------
  332|  1.22k|                                {
  333|  1.22k|                                    return OpCode::SNE;
  334|  1.22k|                                }
  335|  2.18k|                                break;
  336|       |
  337|  2.39k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 2.39k, False: 26.4k]
  ------------------
  338|  3.22k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 832, False: 27.9k]
  ------------------
  339|  3.22k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 2.01k, False: 1.21k]
  ------------------
  340|  2.01k|                                {
  341|  2.01k|                                    return OpCode::SRA;
  342|  2.01k|                                }
  343|  1.21k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 728, False: 490]
  ------------------
  344|    728|                                {
  345|    728|                                    return OpCode::SRL;
  346|    728|                                }
  347|    490|                                break;
  348|       |
  349|  2.05k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 2.05k, False: 26.7k]
  ------------------
  350|  2.51k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 465, False: 28.3k]
  ------------------
  351|  2.51k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.62k, False: 892]
  ------------------
  352|  1.62k|                                {
  353|  1.62k|                                    return OpCode::SUB;
  354|  1.62k|                                }
  355|    892|                                break;
  356|       |
  357|    892|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 240, False: 28.5k]
  ------------------
  358|  1.41k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.17k, False: 27.6k]
  ------------------
  359|  1.41k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.21k, False: 201]
  ------------------
  360|  1.21k|                                {
  361|  1.21k|                                    return OpCode::SWU;
  362|  1.21k|                                }
  363|    201|                                break;
  364|  28.8k|                        }
  365|       |
  366|  12.4k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 804, False: 135k]
  ------------------
  367|  14.8k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 2.37k, False: 134k]
  ------------------
  368|  14.8k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 2.40k, False: 12.4k]
  |  Branch (368:29): [True: 1.44k, False: 13.3k]
  |  Branch (368:45): [True: 1.44k, False: 956]
  ------------------
  369|  1.44k|                        {
  370|  1.44k|                            return OpCode::XOR;
  371|  1.44k|                        }
  372|  13.3k|                        break;
  373|   136k|                }
  374|  80.1k|                break;
  375|   136k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   116k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 116k, False: 425k]
  ------------------
  379|   116k|                char c1 = token[0];
  380|   116k|                char c2 = token[1];
  381|   116k|                char c3 = token[2];
  382|   116k|                char c4 = token[3];
  383|       |
  384|   116k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 30.9k, False: 85.6k]
  ------------------
  385|   116k|                {
  386|    921|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 921, False: 115k]
  ------------------
  387|  10.2k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 9.28k, False: 107k]
  ------------------
  388|  10.2k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 751, False: 9.45k]
  ------------------
  389|  10.2k|                        {
  390|  6.04k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 6.04k, False: 4.15k]
  ------------------
  391|  6.75k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 709, False: 9.49k]
  ------------------
  392|  6.75k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 6.22k, False: 529]
  ------------------
  393|  6.22k|                                {
  394|  6.22k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 291, False: 5.93k]
  ------------------
  395|  6.22k|                                    {
  396|    451|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 451, False: 5.77k]
  ------------------
  397|  1.91k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 1.46k, False: 4.76k]
  ------------------
  398|  1.91k|                                            return OpCode::ADDD;
  399|       |
  400|    709|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 709, False: 5.51k]
  ------------------
  401|  1.43k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 727, False: 5.50k]
  ------------------
  402|  1.43k|                                            return OpCode::ADDF;
  403|       |
  404|  1.25k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 1.25k, False: 4.97k]
  ------------------
  405|  1.88k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 624, False: 5.60k]
  ------------------
  406|  1.88k|                                            return OpCode::ADDI;
  407|       |
  408|    460|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 460, False: 5.76k]
  ------------------
  409|    704|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 244, False: 5.98k]
  ------------------
  410|    704|                                            return OpCode::ADDU;
  411|  6.22k|                                    }
  412|  6.22k|                                }
  413|    820|                                break;
  414|       |
  415|  2.21k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 2.21k, False: 7.99k]
  ------------------
  416|  2.69k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 484, False: 9.72k]
  ------------------
  417|  2.69k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 2.17k, False: 522]
  |  Branch (417:37): [True: 1.33k, False: 1.36k]
  |  Branch (417:53): [True: 1.33k, False: 842]
  ------------------
  418|  1.33k|                                {
  419|  1.33k|                                    return OpCode::ANDI;
  420|  1.33k|                                }
  421|       |
  422|  1.36k|                                break;
  423|  10.2k|                        }
  424|  2.93k|                        break;
  425|       |
  426|  3.80k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 3.80k, False: 112k]
  ------------------
  427|  10.9k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 7.14k, False: 109k]
  ------------------
  428|  10.9k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 677, False: 10.2k]
  ------------------
  429|  10.9k|                        {
  430|  1.35k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 1.35k, False: 9.60k]
  ------------------
  431|  2.44k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.09k, False: 9.86k]
  ------------------
  432|  2.44k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.31k, False: 1.13k]
  |  Branch (432:37): [True: 703, False: 1.74k]
  |  Branch (432:53): [True: 703, False: 610]
  ------------------
  433|    703|                                {
  434|    703|                                    return OpCode::BEQZ;
  435|    703|                                }
  436|  1.74k|                                break;
  437|       |
  438|  2.01k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 2.01k, False: 8.93k]
  ------------------
  439|  4.17k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 2.15k, False: 8.80k]
  ------------------
  440|  4.17k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 2.87k, False: 1.30k]
  ------------------
  441|  2.87k|                                {
  442|  2.87k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.18k, False: 1.68k]
  ------------------
  443|  1.18k|                                    {
  444|  1.18k|                                        return OpCode::BFPF;
  445|  1.18k|                                    }
  446|  1.68k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.19k, False: 493]
  ------------------
  447|  1.19k|                                    {
  448|  1.19k|                                        return OpCode::BFPT;
  449|  1.19k|                                    }
  450|  2.87k|                                }
  451|  1.79k|                                break;
  452|       |
  453|  3.05k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 3.05k, False: 7.90k]
  ------------------
  454|  3.66k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 606, False: 10.3k]
  ------------------
  455|  3.66k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 2.75k, False: 907]
  |  Branch (455:37): [True: 1.49k, False: 2.17k]
  |  Branch (455:53): [True: 1.49k, False: 1.26k]
  ------------------
  456|  1.49k|                                {
  457|  1.49k|                                    return OpCode::BNEZ;
  458|  1.49k|                                }
  459|  10.9k|                        }
  460|  6.38k|                        break;
  461|       |
  462|  6.38k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.20k, False: 114k]
  ------------------
  463|  7.29k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 5.09k, False: 111k]
  ------------------
  464|  7.29k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 6.43k, False: 860]
  |  Branch (464:29): [True: 5.75k, False: 1.54k]
  |  Branch (464:45): [True: 5.75k, False: 681]
  ------------------
  465|  5.75k|                        {
  466|  5.75k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 749, False: 5.00k]
  ------------------
  467|  5.75k|                            {
  468|    611|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 611, False: 5.14k]
  ------------------
  469|  1.95k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 1.34k, False: 4.40k]
  ------------------
  470|  1.95k|                                    return OpCode::DIVD;
  471|       |
  472|    322|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 322, False: 5.43k]
  ------------------
  473|    646|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 324, False: 5.43k]
  ------------------
  474|    646|                                    return OpCode::DIVF;
  475|       |
  476|    263|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 263, False: 5.49k]
  ------------------
  477|  1.34k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 1.07k, False: 4.67k]
  ------------------
  478|  1.34k|                                    return OpCode::DIVI;
  479|       |
  480|    708|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 708, False: 5.04k]
  ------------------
  481|  1.06k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 354, False: 5.40k]
  ------------------
  482|  1.06k|                                    return OpCode::DIVU;
  483|  5.75k|                            }
  484|  5.75k|                        }
  485|  2.29k|                        break;
  486|       |
  487|  2.29k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 2.18k, False: 114k]
  ------------------
  488|  2.94k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 754, False: 115k]
  ------------------
  489|  2.94k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.37k, False: 567]
  |  Branch (489:29): [True: 1.15k, False: 1.78k]
  |  Branch (489:45): [True: 1.79k, False: 579]
  |  Branch (489:61): [True: 1.15k, False: 639]
  ------------------
  490|  1.15k|                        {
  491|  1.15k|                            return OpCode::HALT;
  492|  1.15k|                        }
  493|  1.78k|                        break;
  494|       |
  495|  2.34k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 2.34k, False: 114k]
  ------------------
  496|  2.94k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 600, False: 115k]
  ------------------
  497|  2.94k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 2.13k, False: 813]
  |  Branch (497:29): [True: 827, False: 2.12k]
  |  Branch (497:45): [True: 1.22k, False: 911]
  |  Branch (497:61): [True: 827, False: 397]
  ------------------
  498|    827|                        {
  499|    827|                            return OpCode::JALR;
  500|    827|                        }
  501|  2.12k|                        break;
  502|       |
  503|  3.58k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 3.58k, False: 112k]
  ------------------
  504|  5.70k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 2.11k, False: 114k]
  ------------------
  505|  5.70k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.45k, False: 3.25k]
  |  Branch (505:29): [True: 1.82k, False: 3.87k]
  |  Branch (505:45): [True: 1.82k, False: 626]
  ------------------
  506|  1.82k|                        {
  507|  1.82k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 760, False: 1.06k]
  ------------------
  508|    760|                            {
  509|    760|                                return OpCode::MOVD;
  510|    760|                            }
  511|  1.06k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 802, False: 264]
  ------------------
  512|    802|                            {
  513|    802|                                return OpCode::MOVF;
  514|    802|                            }
  515|  1.82k|                        }
  516|  3.87k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.73k, False: 1.14k]
  |  Branch (516:34): [True: 1.51k, False: 2.36k]
  |  Branch (516:50): [True: 2.39k, False: 339]
  |  Branch (516:66): [True: 1.51k, False: 883]
  ------------------
  517|  1.51k|                        {
  518|  1.51k|                            return OpCode::MULT;
  519|  1.51k|                        }
  520|  2.62k|                        break;
  521|       |
  522|  18.2k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 18.2k, False: 98.3k]
  ------------------
  523|  38.0k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 19.8k, False: 96.7k]
  ------------------
  524|  38.0k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 2.13k, False: 35.9k]
  ------------------
  525|  38.0k|                        {
  526|  1.63k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.63k, False: 36.4k]
  ------------------
  527|  2.56k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 934, False: 37.1k]
  ------------------
  528|  2.56k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.94k, False: 621]
  ------------------
  529|  1.94k|                                {
  530|  1.94k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 797, False: 1.14k]
  ------------------
  531|    797|                                    {
  532|    797|                                        return OpCode::SEQI;
  533|    797|                                    }
  534|  1.14k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 692, False: 456]
  ------------------
  535|    692|                                    {
  536|    692|                                        return OpCode::SEQU;
  537|    692|                                    }
  538|  1.94k|                                }
  539|  1.07k|                                break;
  540|       |
  541|  1.37k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 1.37k, False: 36.7k]
  ------------------
  542|  5.43k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 4.05k, False: 34.0k]
  ------------------
  543|  5.43k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 2.66k, False: 2.76k]
  ------------------
  544|  2.66k|                                {
  545|  2.66k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.26k, False: 1.39k]
  ------------------
  546|  1.26k|                                    {
  547|  1.26k|                                        return OpCode::SGEI;
  548|  1.26k|                                    }
  549|  1.39k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.04k, False: 349]
  ------------------
  550|  1.04k|                                    {
  551|  1.04k|                                        return OpCode::SGEU;
  552|  1.04k|                                    }
  553|  2.66k|                                }
  554|  2.76k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 2.10k, False: 663]
  ------------------
  555|  2.10k|                                {
  556|  2.10k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 888, False: 1.21k]
  ------------------
  557|    888|                                    {
  558|    888|                                        return OpCode::SGTI;
  559|    888|                                    }
  560|  1.21k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 650, False: 568]
  ------------------
  561|    650|                                    {
  562|    650|                                        return OpCode::SGTU;
  563|    650|                                    }
  564|  2.10k|                                }
  565|  1.58k|                                break;
  566|       |
  567|  8.96k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 8.96k, False: 29.1k]
  ------------------
  568|  13.0k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 4.08k, False: 33.9k]
  ------------------
  569|  13.0k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 2.77k, False: 10.2k]
  ------------------
  570|  13.0k|                                {
  571|  1.40k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.40k, False: 11.6k]
  ------------------
  572|  1.90k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 492, False: 12.5k]
  ------------------
  573|  1.90k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.37k, False: 525]
  ------------------
  574|  1.37k|                                        {
  575|  1.37k|                                            return OpCode::SLAI;
  576|  1.37k|                                        }
  577|    525|                                        break;
  578|       |
  579|  1.71k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 1.71k, False: 11.3k]
  ------------------
  580|  2.20k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 489, False: 12.5k]
  ------------------
  581|  2.20k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 438, False: 1.76k]
  ------------------
  582|    438|                                        {
  583|    438|                                            return OpCode::SLEI;
  584|    438|                                        }
  585|  1.76k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.30k, False: 459]
  ------------------
  586|  1.30k|                                        {
  587|  1.30k|                                            return OpCode::SLEU;
  588|  1.30k|                                        }
  589|    459|                                        break;
  590|       |
  591|  1.10k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.10k, False: 11.9k]
  ------------------
  592|  1.92k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 827, False: 12.2k]
  ------------------
  593|  1.92k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.09k, False: 832]
  ------------------
  594|  1.09k|                                        {
  595|  1.09k|                                            return OpCode::SLLI;
  596|  1.09k|                                        }
  597|    832|                                        break;
  598|       |
  599|  1.21k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.21k, False: 11.8k]
  ------------------
  600|  4.25k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 3.04k, False: 10.0k]
  ------------------
  601|  4.25k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.67k, False: 2.57k]
  ------------------
  602|  1.67k|                                        {
  603|  1.67k|                                            return OpCode::SLTI;
  604|  1.67k|                                        }
  605|  2.57k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 1.85k, False: 718]
  ------------------
  606|  1.85k|                                        {
  607|  1.85k|                                            return OpCode::SLTU;
  608|  1.85k|                                        }
  609|    718|                                        break;
  610|  13.0k|                                }
  611|       |
  612|  8.45k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 3.14k, False: 34.9k]
  ------------------
  613|  9.24k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 782, False: 37.2k]
  ------------------
  614|  9.24k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 3.62k, False: 5.61k]
  ------------------
  615|  3.62k|                                {
  616|  3.62k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 830, False: 2.79k]
  ------------------
  617|    830|                                    {
  618|    830|                                        return OpCode::SNEI;
  619|    830|                                    }
  620|  2.79k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 1.05k, False: 1.74k]
  ------------------
  621|  1.05k|                                    {
  622|  1.05k|                                        return OpCode::SNEU;
  623|  1.05k|                                    }
  624|  3.62k|                                }
  625|  7.35k|                                break;
  626|       |
  627|  7.35k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.40k, False: 36.6k]
  ------------------
  628|  3.31k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.90k, False: 36.1k]
  ------------------
  629|  3.31k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.69k, False: 1.61k]
  |  Branch (629:37): [True: 1.25k, False: 2.05k]
  |  Branch (629:53): [True: 1.25k, False: 438]
  ------------------
  630|  1.25k|                                {
  631|  1.25k|                                    return OpCode::SRAI;
  632|  1.25k|                                }
  633|  2.05k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.47k, False: 578]
  |  Branch (633:42): [True: 1.10k, False: 953]
  |  Branch (633:58): [True: 1.10k, False: 375]
  ------------------
  634|  1.10k|                                {
  635|  1.10k|                                    return OpCode::SRLI;
  636|  1.10k|                                }
  637|    953|                                break;
  638|       |
  639|  4.44k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 4.44k, False: 33.6k]
  ------------------
  640|  7.64k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 3.20k, False: 34.8k]
  ------------------
  641|  7.64k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 6.19k, False: 1.44k]
  ------------------
  642|  6.19k|                                {
  643|  6.19k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 443, False: 5.75k]
  ------------------
  644|  6.19k|                                    {
  645|    770|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 770, False: 5.42k]
  ------------------
  646|  1.39k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 625, False: 5.57k]
  ------------------
  647|  1.39k|                                            return OpCode::SUBD;
  648|       |
  649|    323|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 323, False: 5.87k]
  ------------------
  650|  2.45k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 2.13k, False: 4.06k]
  ------------------
  651|  2.45k|                                            return OpCode::SUBF;
  652|       |
  653|    498|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 498, False: 5.70k]
  ------------------
  654|  1.02k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 526, False: 5.67k]
  ------------------
  655|  1.02k|                                            return OpCode::SUBI;
  656|       |
  657|    684|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 684, False: 5.51k]
  ------------------
  658|    880|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 196, False: 6.00k]
  ------------------
  659|    880|                                            return OpCode::SUBU;
  660|  6.19k|                                    }
  661|  6.19k|                                }
  662|  1.89k|                                break;
  663|  38.0k|                        }
  664|  14.9k|                        break;
  665|       |
  666|  14.9k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 2.27k, False: 114k]
  ------------------
  667|  2.93k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 659, False: 115k]
  ------------------
  668|  2.93k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 2.15k, False: 780]
  |  Branch (668:29): [True: 854, False: 2.07k]
  |  Branch (668:45): [True: 1.26k, False: 889]
  |  Branch (668:61): [True: 854, False: 408]
  ------------------
  669|    854|                        {
  670|    854|                            return OpCode::TRAP;
  671|    854|                        }
  672|  2.07k|                        break;
  673|  2.07k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 262, False: 116k]
  ------------------
  674|  4.54k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 4.28k, False: 112k]
  ------------------
  675|  4.54k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 3.82k, False: 717]
  |  Branch (675:29): [True: 2.04k, False: 2.50k]
  |  Branch (675:45): [True: 3.12k, False: 702]
  |  Branch (675:61): [True: 2.04k, False: 1.08k]
  ------------------
  676|  2.04k|                        {
  677|  2.04k|                            return OpCode::XORI;
  678|  2.04k|                        }
  679|  2.50k|                        break;
  680|   116k|                }
  681|  68.6k|                break;
  682|   116k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  68.6k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 58.1k, False: 483k]
  ------------------
  686|  58.1k|                char c1 = token[0];
  687|  58.1k|                char c2 = token[1];
  688|  58.1k|                char c3 = token[2];
  689|  58.1k|                char c4 = token[3];
  690|  58.1k|                char c5 = token[4];
  691|       |
  692|  58.1k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 15.0k, False: 43.1k]
  ------------------
  693|  58.1k|                {
  694|    392|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 392, False: 57.7k]
  ------------------
  695|  5.23k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 4.84k, False: 53.3k]
  ------------------
  696|  5.23k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 4.63k, False: 606]
  |  Branch (696:29): [True: 1.72k, False: 3.51k]
  |  Branch (696:45): [True: 4.13k, False: 494]
  |  Branch (696:61): [True: 2.86k, False: 1.27k]
  |  Branch (696:77): [True: 1.72k, False: 1.14k]
  ------------------
  697|  1.72k|                        {
  698|  1.72k|                            return OpCode::ADDUI;
  699|  1.72k|                        }
  700|  3.51k|                        break;
  701|       |
  702|  3.51k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.88k, False: 55.2k]
  ------------------
  703|  4.70k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 1.81k, False: 56.3k]
  ------------------
  704|  4.70k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 3.85k, False: 844]
  |  Branch (704:29): [True: 626, False: 4.07k]
  |  Branch (704:45): [True: 3.12k, False: 729]
  |  Branch (704:61): [True: 1.68k, False: 1.44k]
  |  Branch (704:77): [True: 626, False: 1.05k]
  ------------------
  705|    626|                        {
  706|    626|                            return OpCode::DIVUI;
  707|    626|                        }
  708|  4.07k|                        break;
  709|       |
  710|  4.07k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 1.88k, False: 56.2k]
  ------------------
  711|  8.17k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 6.29k, False: 51.8k]
  ------------------
  712|  8.17k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 7.09k, False: 1.08k]
  |  Branch (712:29): [True: 6.05k, False: 2.12k]
  |  Branch (712:45): [True: 6.40k, False: 690]
  |  Branch (712:61): [True: 6.05k, False: 351]
  ------------------
  713|  6.05k|                        {
  714|  6.05k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 955, False: 5.09k]
  ------------------
  715|  6.05k|                            {
  716|    400|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 400, False: 5.65k]
  ------------------
  717|    594|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 194, False: 5.85k]
  ------------------
  718|    594|                                    return OpCode::MULTD;
  719|       |
  720|    845|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 845, False: 5.20k]
  ------------------
  721|  1.19k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 354, False: 5.69k]
  ------------------
  722|  1.19k|                                    return OpCode::MULTF;
  723|       |
  724|    325|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 325, False: 5.72k]
  ------------------
  725|    793|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 468, False: 5.58k]
  ------------------
  726|    793|                                    return OpCode::MULTI;
  727|       |
  728|    812|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 812, False: 5.23k]
  ------------------
  729|  2.50k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 1.69k, False: 4.35k]
  ------------------
  730|  2.50k|                                    return OpCode::MULTU;
  731|  6.05k|                            }
  732|  6.05k|                        }
  733|  3.08k|                        break;
  734|       |
  735|  7.57k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 7.57k, False: 50.5k]
  ------------------
  736|  25.0k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 17.4k, False: 40.7k]
  ------------------
  737|  25.0k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 1.23k, False: 23.8k]
  ------------------
  738|  25.0k|                        {
  739|  2.52k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 2.52k, False: 22.5k]
  ------------------
  740|  3.32k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 802, False: 24.2k]
  ------------------
  741|  3.32k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 3.00k, False: 324]
  |  Branch (741:37): [True: 1.72k, False: 1.60k]
  |  Branch (741:53): [True: 2.40k, False: 602]
  |  Branch (741:69): [True: 1.72k, False: 679]
  ------------------
  742|  1.72k|                                {
  743|  1.72k|                                    return OpCode::SEQUI;
  744|  1.72k|                                }
  745|  1.60k|                                break;
  746|       |
  747|  1.69k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 1.69k, False: 23.3k]
  ------------------
  748|  4.16k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 2.47k, False: 22.5k]
  ------------------
  749|  4.16k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.15k, False: 2.00k]
  |  Branch (749:37): [True: 522, False: 3.64k]
  |  Branch (749:53): [True: 885, False: 1.27k]
  |  Branch (749:69): [True: 522, False: 363]
  ------------------
  750|    522|                                {
  751|    522|                                    return OpCode::SGEUI;
  752|    522|                                }
  753|  3.64k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 1.98k, False: 1.65k]
  |  Branch (753:42): [True: 1.41k, False: 2.23k]
  |  Branch (753:58): [True: 1.64k, False: 339]
  |  Branch (753:74): [True: 1.41k, False: 232]
  ------------------
  754|  1.41k|                                {
  755|  1.41k|                                    return OpCode::SGTUI;
  756|  1.41k|                                }
  757|  2.23k|                                break;
  758|       |
  759|  3.26k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 3.26k, False: 21.7k]
  ------------------
  760|  5.26k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 2.00k, False: 23.0k]
  ------------------
  761|  5.26k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.13k, False: 4.13k]
  |  Branch (761:37): [True: 591, False: 4.67k]
  |  Branch (761:53): [True: 790, False: 341]
  |  Branch (761:69): [True: 591, False: 199]
  ------------------
  762|    591|                                {
  763|    591|                                    return OpCode::SLEUI;
  764|    591|                                }
  765|  4.67k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 2.91k, False: 1.75k]
  |  Branch (765:42): [True: 914, False: 3.76k]
  |  Branch (765:58): [True: 1.53k, False: 1.38k]
  |  Branch (765:74): [True: 914, False: 617]
  ------------------
  766|    914|                                {
  767|    914|                                    return OpCode::SLTUI;
  768|    914|                                }
  769|  3.76k|                                break;
  770|       |
  771|  3.76k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 2.80k, False: 22.2k]
  ------------------
  772|  8.06k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 5.25k, False: 19.7k]
  ------------------
  773|  8.06k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 6.03k, False: 2.02k]
  |  Branch (773:37): [True: 4.39k, False: 3.66k]
  |  Branch (773:53): [True: 5.52k, False: 513]
  |  Branch (773:69): [True: 4.39k, False: 1.12k]
  ------------------
  774|  4.39k|                                {
  775|  4.39k|                                    return OpCode::SNEUI;
  776|  4.39k|                                }
  777|  3.66k|                                break;
  778|       |
  779|  3.66k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.75k, False: 23.2k]
  ------------------
  780|  2.98k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 1.22k, False: 23.8k]
  ------------------
  781|  2.98k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 2.48k, False: 496]
  |  Branch (781:37): [True: 1.37k, False: 1.60k]
  |  Branch (781:53): [True: 1.70k, False: 783]
  |  Branch (781:69): [True: 1.37k, False: 327]
  ------------------
  782|  1.37k|                                {
  783|  1.37k|                                    return OpCode::SUBUI;
  784|  1.37k|                                }
  785|  1.60k|                                break;
  786|  25.0k|                        }
  787|       |
  788|  14.1k|                        break;
  789|  58.1k|                }
  790|       |
  791|  39.7k|                break;
  792|  58.1k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  39.7k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 27.6k, False: 513k]
  ------------------
  796|  27.6k|                char c1 = token[0];
  797|  27.6k|                char c2 = token[1];
  798|  27.6k|                char c3 = token[2];
  799|  27.6k|                char c4 = token[3];
  800|  27.6k|                char c5 = token[4];
  801|  27.6k|                char c6 = token[5];
  802|       |
  803|  27.6k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 12.5k, False: 15.0k]
  |  Branch (803:21): [True: 11.2k, False: 16.3k]
  |  Branch (803:37): [True: 11.6k, False: 871]
  |  Branch (803:53): [True: 11.2k, False: 403]
  ------------------
  804|  11.2k|                {
  805|  11.2k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 246, False: 11.0k]
  ------------------
  806|  11.2k|                    {
  807|  1.37k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.37k, False: 9.87k]
  ------------------
  808|  4.42k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 3.05k, False: 8.19k]
  ------------------
  809|  4.42k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 3.63k, False: 788]
  ------------------
  810|  3.63k|                            {
  811|  3.63k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 820, False: 2.81k]
  ------------------
  812|    820|                                {
  813|    820|                                    return OpCode::CVTD2F;
  814|    820|                                }
  815|  2.81k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 918, False: 1.89k]
  ------------------
  816|    918|                                {
  817|    918|                                    return OpCode::CVTD2I;
  818|    918|                                }
  819|  3.63k|                            }
  820|  2.68k|                            break;
  821|       |
  822|  3.28k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 3.28k, False: 7.96k]
  ------------------
  823|  4.40k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 1.12k, False: 10.1k]
  ------------------
  824|  4.40k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 3.34k, False: 1.06k]
  ------------------
  825|  3.34k|                            {
  826|  3.34k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 1.43k, False: 1.91k]
  ------------------
  827|  1.43k|                                {
  828|  1.43k|                                    return OpCode::CVTF2D;
  829|  1.43k|                                }
  830|  1.91k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.33k, False: 581]
  ------------------
  831|  1.33k|                                {
  832|  1.33k|                                    return OpCode::CVTF2I;
  833|  1.33k|                                }
  834|  3.34k|                            }
  835|  1.64k|                            break;
  836|       |
  837|  1.87k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.87k, False: 9.37k]
  ------------------
  838|  2.17k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 306, False: 10.9k]
  ------------------
  839|  2.17k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.88k, False: 295]
  ------------------
  840|  1.88k|                            {
  841|  1.88k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 405, False: 1.47k]
  ------------------
  842|    405|                                {
  843|    405|                                    return OpCode::CVTI2D;
  844|    405|                                }
  845|  1.47k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.09k, False: 386]
  ------------------
  846|  1.09k|                                {
  847|  1.09k|                                    return OpCode::CVTI2F;
  848|  1.09k|                                }
  849|  1.88k|                            }
  850|  11.2k|                    }
  851|  11.2k|                }
  852|  16.3k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 5.71k, False: 10.6k]
  |  Branch (852:26): [True: 1.10k, False: 15.2k]
  |  Branch (852:42): [True: 4.40k, False: 1.30k]
  |  Branch (852:58): [True: 3.71k, False: 692]
  |  Branch (852:74): [True: 3.30k, False: 410]
  ------------------
  853|  16.3k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.78k, False: 1.51k]
  |  Branch (853:42): [True: 1.10k, False: 680]
  ------------------
  854|  1.10k|                {
  855|  1.10k|                    return OpCode::MULTUI;
  856|  1.10k|                }
  857|  20.5k|                break;
  858|  27.6k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  20.5k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 14.1k, False: 527k]
  ------------------
  862|  14.1k|                char c1 = token[0];
  863|  14.1k|                char c2 = token[1];
  864|  14.1k|                char c3 = token[2];
  865|  14.1k|                char c4 = token[3];
  866|  14.1k|                char c5 = token[4];
  867|  14.1k|                char c6 = token[5];
  868|  14.1k|                char c7 = token[6];
  869|       |
  870|  14.1k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 9.88k, False: 4.25k]
  |  Branch (870:21): [True: 7.69k, False: 6.44k]
  |  Branch (870:37): [True: 8.27k, False: 1.61k]
  |  Branch (870:53): [True: 7.69k, False: 578]
  ------------------
  871|  7.69k|                {
  872|  7.69k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 3.37k, False: 4.31k]
  |  Branch (872:25): [True: 900, False: 6.79k]
  |  Branch (872:41): [True: 2.76k, False: 611]
  |  Branch (872:54): [True: 1.99k, False: 770]
  |  Branch (872:70): [True: 900, False: 1.09k]
  ------------------
  873|    900|                    {
  874|    900|                        return OpCode::MOVI2FP;
  875|    900|                    }
  876|  6.79k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 3.11k, False: 3.68k]
  |  Branch (876:30): [True: 1.81k, False: 4.97k]
  |  Branch (876:46): [True: 2.53k, False: 578]
  |  Branch (876:62): [True: 2.08k, False: 454]
  |  Branch (876:75): [True: 1.81k, False: 264]
  ------------------
  877|  1.81k|                    {
  878|  1.81k|                        return OpCode::MOVFP2I;
  879|  1.81k|                    }
  880|  7.69k|                }
  881|  11.4k|                break;
  882|  14.1k|            }
  883|       |
  884|  11.4k|            default: {
  ------------------
  |  Branch (884:13): [True: 8.47k, False: 533k]
  ------------------
  885|  8.47k|                break;
  886|  14.1k|            }
  887|   541k|        }
  888|       |
  889|       |        // None found
  890|   360k|        return OpCode::NONE;
  891|   541k|    }
_ZN3dlx3iceEcc:
   17|   715k|    {
   18|   715k|        constexpr const char diff = 'a' - 'A';
   19|   715k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 234k, False: 481k]
  |  Branch (19:28): [True: 177k, False: 303k]
  ------------------
   20|   715k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   625k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  5.39k|    {
  193|  5.39k|        ParseError err;
  194|       |
  195|  5.39k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  5.39k|        err.m_LineNumber                           = line_number;
  197|  5.39k|        err.m_Column                               = column;
  198|  5.39k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  5.39k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  5.39k|        return err;
  202|  5.39k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  5.39k|    {
  207|  5.39k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  5.39k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  5.39k|                                                         actual_type);
  210|  5.39k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  5.36k|    {
  216|  5.36k|        ParseError err;
  217|       |
  218|  5.36k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  5.36k|        err.m_LineNumber        = line_number;
  220|  5.36k|        err.m_Column            = column;
  221|  5.36k|        err.invalid_number.text = text;
  222|       |
  223|  5.36k|        return err;
  224|  5.36k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  5.36k|    {
  228|  5.36k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  5.36k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  5.36k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      7|    {
  235|      7|        ParseError err;
  236|       |
  237|      7|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      7|        err.m_LineNumber = line_number;
  239|      7|        err.m_Column     = column;
  240|       |
  241|      7|        return err;
  242|      7|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      7|    {
  247|      7|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      7|                                                                     token.GetColumn().unsafe());
  249|      7|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   320k|    {
  255|   320k|        ParseError err;
  256|       |
  257|   320k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   320k|        err.m_LineNumber                   = line_number;
  259|   320k|        err.m_Column                       = column;
  260|   320k|        err.unexpected_token.expected_type = expected_type;
  261|   320k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   320k|        return err;
  264|   320k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   320k|    {
  269|   320k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   320k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   320k|                                                  token.GetType());
  272|   320k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  46.1k|    {
  277|  46.1k|        ParseError err;
  278|       |
  279|  46.1k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  46.1k|        err.m_LineNumber                   = line_number;
  281|  46.1k|        err.m_Column                       = column;
  282|  46.1k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  46.1k|        return err;
  285|  46.1k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    536|    {
  289|    536|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    536|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    536|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   124k|    {
  296|   124k|        ParseError err;
  297|       |
  298|   124k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   124k|        err.m_LineNumber                       = line_number;
  300|   124k|        err.m_Column                           = column;
  301|   124k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   124k|        return err;
  304|   124k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   124k|    {
  309|   124k|        return ConstructInvalidLabelIdentifierParseError(
  310|   124k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   124k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  21.8k|    {
  317|  21.8k|        ParseError err;
  318|       |
  319|  21.8k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  21.8k|        err.m_LineNumber                     = line_number;
  321|  21.8k|        err.m_Column                         = column;
  322|  21.8k|        err.label_already_defined.label_name = label_name;
  323|  21.8k|        err.label_already_defined.at_line    = at_line;
  324|  21.8k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  21.8k|        return err;
  327|  21.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  21.8k|    {
  332|  21.8k|        return ConstructLabelAlreadyDefinedParseError(
  333|  21.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  21.8k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  21.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  77.8k|    {
  340|  77.8k|        ParseError err;
  341|       |
  342|  77.8k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  77.8k|        err.m_LineNumber = line_number;
  344|  77.8k|        err.m_Column     = column;
  345|       |
  346|  77.8k|        return err;
  347|  77.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  77.8k|    {
  352|  77.8k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  77.8k|                                                        token.GetColumn().unsafe());
  354|  77.8k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  13.7k|    {
  360|  13.7k|        ParseError err;
  361|       |
  362|  13.7k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  13.7k|        err.m_LineNumber               = line_number;
  364|  13.7k|        err.m_Column                   = column;
  365|  13.7k|        err.too_few_arguments.required = required;
  366|  13.7k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  13.7k|        return err;
  369|  13.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  13.7k|    {
  374|  13.7k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  13.7k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  13.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  6.91k|    {
  381|  6.91k|        ParseError err;
  382|       |
  383|  6.91k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  6.91k|        err.m_LineNumber           = line_number;
  385|  6.91k|        err.m_Column               = column;
  386|  6.91k|        err.empty_label.label_name = label_name;
  387|       |
  388|  6.91k|        return err;
  389|  6.91k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  6.91k|    {
  393|  6.91k|        return ConstructEmptyLabelParseError(
  394|  6.91k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  6.91k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 6.02k, False: 881]
  ------------------
  396|  6.02k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  6.91k|                        token.GetText());
  398|  6.91k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  3.20k|    {
  403|  3.20k|        ParseError err;
  404|       |
  405|  3.20k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  3.20k|        err.m_LineNumber = line_number;
  407|  3.20k|        err.m_Column     = column;
  408|       |
  409|  3.20k|        return err;
  410|  3.20k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  3.20k|    {
  414|  3.20k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  3.20k|                                               token.GetColumn().unsafe());
  416|  3.20k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   625k|    {
   19|   625k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   625k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  7.10k|    {
  182|  7.10k|        ParsedProgram program;
  183|       |
  184|  7.10k|        program.m_Tokens = tokens;
  185|       |
  186|  7.10k|        phi::boolean line_has_instruction{false};
  187|  7.10k|        phi::usize   label_count{0u};
  188|       |
  189|   746k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 739k, False: 7.10k]
  ------------------
  190|   739k|        {
  191|   739k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   739k|            switch (current_token.GetType())
  196|   739k|            {
  197|       |                // Ignore comments
  198|  2.06k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 2.06k, False: 737k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  2.06k|                    break;
  201|       |
  202|  98.2k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 98.2k, False: 641k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  98.2k|                    line_has_instruction = false;
  205|  98.2k|                    break;
  206|       |
  207|   263k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 263k, False: 475k]
  ------------------
  208|   263k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 72.2k, False: 191k]
  ------------------
  209|  72.2k|                    {
  210|  72.2k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  72.2k|                                current_token, Token::Type::NewLine));
  212|  72.2k|                        break;
  213|  72.2k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   191k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 83.2k, False: 107k]
  ------------------
  218|  83.2k|                    {
  219|  83.2k|                        program.AddParseError(
  220|  83.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  83.2k|                        break;
  222|  83.2k|                    }
  223|       |
  224|   107k|                    std::string_view label_name = current_token.GetText();
  225|   107k|                    label_name.remove_suffix(1);
  226|       |
  227|   107k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 45.6k, False: 62.3k]
  ------------------
  228|  45.6k|                    {
  229|  45.6k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  45.6k|                                current_token.GetLineNumber().unsafe(),
  231|  45.6k|                                current_token.GetColumn().unsafe(), label_name));
  232|  45.6k|                        break;
  233|  45.6k|                    }
  234|       |
  235|  62.3k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 32.6k, False: 29.7k]
  ------------------
  236|  32.6k|                    {
  237|  32.6k|                        program.AddParseError(
  238|  32.6k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  32.6k|                        break;
  240|  32.6k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  29.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 21.8k, False: 7.90k]
  ------------------
  244|  21.8k|                    {
  245|       |                        // Find first defintions of label
  246|  21.8k|                        const Token* first_label_definition =
  247|  21.8k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  21.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  21.8k|                                    {
  250|  21.8k|                                        std::string_view token_label_name = t.GetText();
  251|  21.8k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  21.8k|                                        if (token_label_name == label_name)
  254|  21.8k|                                        {
  255|  21.8k|                                            return true;
  256|  21.8k|                                        }
  257|  21.8k|                                    }
  258|       |
  259|  21.8k|                                    return false;
  260|  21.8k|                                });
  261|       |
  262|  21.8k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  21.8k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  21.8k|                                current_token, *first_label_definition));
  266|  21.8k|                        break;
  267|  21.8k|                    }
  268|       |
  269|  7.90k|                    program.m_JumpData[label_name] =
  270|  7.90k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  7.90k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  7.90k|                    break;
  277|  29.7k|                }
  278|       |
  279|   136k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 136k, False: 602k]
  ------------------
  280|   136k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 77.8k, False: 58.7k]
  ------------------
  281|  77.8k|                    {
  282|  77.8k|                        program.AddParseError(
  283|  77.8k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  77.8k|                        break;
  285|  77.8k|                    }
  286|       |
  287|  58.7k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  58.7k|                    PHI_ASSERT(current_token.HasHint());
  291|  58.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  58.7k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  58.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  58.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  58.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  58.7k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  58.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  58.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  58.7k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   121k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 106k, False: 15.2k]
  ------------------
  313|   106k|                    {
  314|       |                        // Get next token
  315|   106k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 672, False: 105k]
  ------------------
  316|    672|                        {
  317|    672|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    672|                                    current_token, number_of_argument_required.unsafe(),
  319|    672|                                    argument_num.unsafe()));
  320|    672|                            break;
  321|    672|                        }
  322|       |
  323|   105k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   105k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 41.0k, False: 64.5k]
  ------------------
  327|  41.0k|                        {
  328|  41.0k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 3.20k, False: 37.8k]
  ------------------
  329|  3.20k|                            {
  330|  3.20k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  3.20k|                            }
  332|       |
  333|  41.0k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  41.0k|                            continue;
  336|  41.0k|                        }
  337|       |
  338|  64.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 13.1k, False: 51.4k]
  ------------------
  339|  13.1k|                        {
  340|  13.1k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  13.1k|                                    token, number_of_argument_required.unsafe(),
  342|  13.1k|                                    argument_num.unsafe()));
  343|  13.1k|                            break;
  344|  13.1k|                        }
  345|       |
  346|  51.4k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  51.4k|                                parse_instruction_argument(
  348|  51.4k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  51.4k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 29.7k, False: 21.7k]
  ------------------
  350|  29.7k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  29.7k|                            break;
  353|  29.7k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  21.7k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  21.7k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  21.7k|                        argument_num++;
  360|  21.7k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  21.7k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  58.7k|                    program.m_Instructions.emplace_back(instruction);
  368|  58.7k|                    line_has_instruction = true;
  369|  58.7k|                    break;
  370|   136k|                }
  371|       |
  372|   238k|                default:
  ------------------
  |  Branch (372:17): [True: 238k, False: 500k]
  ------------------
  373|   238k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   238k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 141k, False: 97.6k]
  ------------------
  375|   141k|                    {
  376|   141k|                        expected_token_type = Token::Type::NewLine;
  377|   141k|                    }
  378|       |
  379|   238k|                    program.AddParseError(
  380|   238k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   238k|                    break;
  382|   739k|            }
  383|   739k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  7.10k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 936, False: 6.16k]
  ------------------
  387|    936|        {
  388|  9.58k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 8.64k, False: 936]
  ------------------
  389|  8.64k|            {
  390|  8.64k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  8.64k|                const Token& token = *it;
  393|  8.64k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 6.91k, False: 1.73k]
  ------------------
  394|  6.91k|                {
  395|  6.91k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  6.91k|                    --label_count;
  397|  6.91k|                }
  398|  8.64k|            }
  399|    936|        }
  400|       |
  401|  7.10k|        return program;
  402|  7.10k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  7.10k|    {
  406|  7.10k|        TokenStream tokens = Tokenize(source);
  407|  7.10k|        return Parse(tokens);
  408|  7.10k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  51.4k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  51.4k|        switch (token.GetType())
   38|  51.4k|        {
   39|  3.52k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 3.52k, False: 47.9k]
  ------------------
   40|  3.52k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 349, False: 3.17k]
  ------------------
   41|  3.52k|                                          ArgumentType::AddressDisplacement))
   42|    349|                {
   43|    349|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    349|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    349|                    return {};
   47|    349|                }
   48|       |
   49|       |                // Get address displacement
   50|  3.17k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  3.17k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  3.17k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 7, False: 3.17k]
  ------------------
   55|      7|                {
   56|      7|                    program.AddParseError(
   57|      7|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      7|                    return {};
   59|      7|                }
   60|       |
   61|  3.17k|                auto         it           = tokens.current_position();
   62|  3.17k|                const Token& first_token  = tokens.consume();
   63|  3.17k|                const Token& second_token = tokens.consume();
   64|  3.17k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  3.17k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 751, False: 2.42k]
  ------------------
   67|    751|                {
   68|    751|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    751|                            first_token, Token::Type::OpenBracket));
   70|    751|                    return {};
   71|    751|                }
   72|       |
   73|       |                // Second token is the register
   74|  2.42k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 559, False: 1.86k]
  ------------------
   75|    559|                {
   76|    559|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    559|                            second_token, Token::Type::RegisterInt));
   78|    559|                    return {};
   79|    559|                }
   80|       |
   81|  1.86k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 1.02k, False: 842]
  ------------------
   82|  1.02k|                {
   83|  1.02k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  1.02k|                            third_token, Token::Type::ClosingBracket));
   85|  1.02k|                    return {};
   86|  1.02k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|    842|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|    842|                return ConstructInstructionArgumentAddressDisplacement(
   95|    842|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  1.86k|            }
   97|  10.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 10.5k, False: 40.9k]
  ------------------
   98|  10.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 521, False: 9.99k]
  ------------------
   99|    521|                {
  100|    521|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    521|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    521|                    return {};
  103|    521|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  9.99k|                return ConstructInstructionArgumentRegisterInt(
  109|  9.99k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  10.5k|            }
  111|  4.35k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 4.35k, False: 47.0k]
  ------------------
  112|  4.35k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.03k, False: 3.32k]
  ------------------
  113|  1.03k|                {
  114|  1.03k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.03k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.03k|                    return {};
  117|  1.03k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  3.32k|                return ConstructInstructionArgumentRegisterFloat(
  123|  3.32k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  4.35k|            }
  125|    536|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 536, False: 50.9k]
  ------------------
  126|    536|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    536|                return {};
  129|  4.35k|            }
  130|  17.7k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 17.7k, False: 33.6k]
  ------------------
  131|       |                // Parse as Label
  132|  17.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 3.17k, False: 14.5k]
  ------------------
  133|  3.17k|                {
  134|  3.17k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  3.17k|                            token, expected_argument_type, ArgumentType::Label));
  136|  3.17k|                    return {};
  137|  3.17k|                }
  138|       |
  139|  14.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 14.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  14.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 8.52k, False: 6.05k]
  ------------------
  146|  8.52k|                {
  147|  8.52k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  8.52k|                    return {};
  149|  8.52k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  6.05k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  14.5k|            }
  155|  7.19k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 7.19k, False: 44.2k]
  ------------------
  156|  7.19k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 322, False: 6.87k]
  ------------------
  157|    322|                {
  158|    322|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    322|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    322|                    return {};
  161|    322|                }
  162|       |
  163|  6.87k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.50k, False: 5.36k]
  ------------------
  164|  1.50k|                {
  165|  1.50k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.50k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.50k|                }
  168|       |
  169|  5.36k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  5.36k|                return {};
  171|  6.87k|            }
  172|       |
  173|  7.56k|            default:
  ------------------
  |  Branch (173:13): [True: 7.56k, False: 43.8k]
  ------------------
  174|  7.56k|                program.AddParseError(
  175|  7.56k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  7.56k|                return {};
  177|  51.4k|        }
  178|  51.4k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   298k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   298k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 219k, False: 79.0k]
  ------------------
  249|   219k|                                    {
  250|   219k|                                        std::string_view token_label_name = t.GetText();
  251|   219k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   219k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 21.8k, False: 198k]
  ------------------
  254|  21.8k|                                        {
  255|  21.8k|                                            return true;
  256|  21.8k|                                        }
  257|   219k|                                    }
  258|       |
  259|   277k|                                    return false;
  260|   298k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.59M|    {
   71|  2.59M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.59M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.59M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.59M|        return m_IntRegisters[id_value];
   77|  2.59M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  6.10M|    {
   82|  6.10M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  6.10M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  6.10M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  6.10M|        return m_IntRegisters[id_value];
   88|  6.10M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  3.57M|    {
   92|  3.57M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  3.57M|                                             RegisterAccessType::Signed),
   94|  3.57M|                   "Mismatch for instruction access type");
   95|       |
   96|  3.57M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  3.57M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  3.57M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  3.57M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 1.70M, False: 1.86M]
  ------------------
  101|  3.57M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 83.1k, False: 1.62M]
  ------------------
  102|  83.1k|        {
  103|  83.1k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  83.1k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|  83.1k|        }
  105|       |
  106|  3.57M|        return GetIntRegister(id).GetSignedValue();
  107|  3.57M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  2.53M|    {
  111|  2.53M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  2.53M|                                             RegisterAccessType::Unsigned),
  113|  2.53M|                   "Mismatch for instruction access type");
  114|       |
  115|  2.53M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  2.53M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  2.53M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  2.53M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 1.87M, False: 668k]
  ------------------
  120|  2.53M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 1.70M, False: 165k]
  ------------------
  121|  1.70M|        {
  122|  1.70M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.70M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|  1.70M|        }
  124|       |
  125|  2.53M|        return GetIntRegister(id).GetUnsignedValue();
  126|  2.53M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  1.93M|    {
  130|  1.93M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  1.93M|                                             RegisterAccessType::Signed),
  132|  1.93M|                   "Mismatch for instruction access type");
  133|       |
  134|  1.93M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  1.93M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 608k, False: 1.32M]
  ------------------
  137|   608k|        {
  138|   608k|            return;
  139|   608k|        }
  140|       |
  141|  1.32M|        reg.SetSignedValue(value);
  142|       |
  143|  1.32M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.32M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.32M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.32M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|   659k|    {
  151|   659k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|   659k|                                             RegisterAccessType::Unsigned),
  153|   659k|                   "Mismatch for instruction access type");
  154|       |
  155|   659k|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|   659k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 430k, False: 229k]
  ------------------
  158|   430k|        {
  159|   430k|            return;
  160|   430k|        }
  161|       |
  162|   229k|        reg.SetUnsignedValue(value);
  163|       |
  164|   229k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   229k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   229k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   229k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.42M|    {
  172|  1.42M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.42M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.42M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.42M|        return m_FloatRegisters[id_value];
  178|  1.42M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   727k|    {
  183|   727k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   727k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   727k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   727k|        return m_FloatRegisters[id_value];
  189|   727k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   727k|    {
  193|   727k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   727k|                                             RegisterAccessType::Float),
  195|   727k|                   "Mismatch for instruction access type");
  196|       |
  197|   727k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   727k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   727k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   727k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 606k, False: 120k]
  ------------------
  202|   727k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 289k, False: 317k]
  ------------------
  203|   289k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   289k|        }
  208|       |
  209|   727k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   727k|        return reg.GetValue();
  212|   727k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   493k|    {
  216|   493k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   493k|                                             RegisterAccessType::Double),
  218|   493k|                   "Mismatch for instruction access type");
  219|       |
  220|   493k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 22, False: 493k]
  ------------------
  221|     22|        {
  222|     22|            Raise(Exception::MisalignedRegisterAccess);
  223|     22|            return {0.0};
  224|     22|        }
  225|       |
  226|   493k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   493k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   493k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   493k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 376k, False: 117k]
  ------------------
  231|   493k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 173k, False: 202k]
  ------------------
  232|   173k|        {
  233|   173k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   173k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   173k|        }
  235|       |
  236|   493k|        const FloatRegisterValueType register_value_type_high =
  237|   493k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   493k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 376k, False: 117k]
  ------------------
  239|   493k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 104k, False: 271k]
  ------------------
  240|   104k|        {
  241|   104k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   104k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|   104k|        }
  243|       |
  244|   493k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   493k|        const FloatRegister& second_reg =
  246|   493k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   493k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   493k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   493k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   493k|        const std::uint32_t first_value_bits =
  255|   493k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   493k|        const std::uint32_t second_value_bits =
  257|   493k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   493k|        std::uint64_t final_value_bits =
  260|   493k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   493k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   493k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   493k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   160k|    {
  269|   160k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   160k|                                             RegisterAccessType::Float),
  271|   160k|                   "Mismatch for instruction access type");
  272|       |
  273|   160k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   160k|        reg.SetValue(value);
  276|       |
  277|   160k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   160k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   160k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   160k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   138k|    {
  285|   138k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   138k|                                             RegisterAccessType::Double),
  287|   138k|                   "Mismatch for instruction access type");
  288|       |
  289|   138k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 7, False: 138k]
  ------------------
  290|      7|        {
  291|      7|            Raise(Exception::MisalignedRegisterAccess);
  292|      7|            return;
  293|      7|        }
  294|       |
  295|   138k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   138k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   138k|        double              value_raw  = value.unsafe();
  299|   138k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   138k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   138k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   138k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   138k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   138k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   138k|        FloatRegister& second_reg =
  309|   138k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   138k|        first_reg.SetValue(first_value);
  312|   138k|        second_reg.SetValue(second_value);
  313|       |
  314|   138k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   138k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   138k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   138k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   138k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   415k|    {
  323|   415k|        return m_FPSR;
  324|   415k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   136k|    {
  328|   136k|        return m_FPSR;
  329|   136k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   136k|    {
  333|   136k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   136k|        return status_reg.Get();
  336|   136k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   415k|    {
  340|   415k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   415k|        status_reg.SetStatus(value);
  343|   415k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  7.74M|    {
  347|  7.74M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  7.74M|        inst.Execute(*this);
  350|  7.74M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  7.10k|    {
  354|  7.10k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 5.65k, False: 1.45k]
  ------------------
  355|  5.65k|        {
  356|  5.65k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  5.65k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  5.65k|            return false;
  358|  5.65k|        }
  359|       |
  360|  1.45k|        m_CurrentProgram = &program;
  361|       |
  362|  1.45k|        m_ProgramCounter               = 0u;
  363|  1.45k|        m_Halted                       = false;
  364|  1.45k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  1.45k|        m_LastRaisedException          = Exception::None;
  366|  1.45k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  1.45k|        return true;
  369|  7.10k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  2.01M|    {
  374|  2.01M|        return m_CurrentProgram;
  375|  2.01M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  7.74M|    {
  379|       |        // No nothing when no program is loaded
  380|  7.74M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 7.74M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  7.74M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 68, False: 7.74M]
  ------------------
  387|     68|        {
  388|     68|            m_Halted                       = true;
  389|     68|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     68|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  7.74M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 68, False: 7.74M]
  ------------------
  394|     68|        {
  395|     68|            return;
  396|     68|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  7.74M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  7.74M|        const auto& current_instruction =
  403|  7.74M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  7.74M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  7.74M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 272, False: 7.74M]
  ------------------
  410|    272|        {
  411|    272|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    272|            return;
  413|    272|        }
  414|       |
  415|  7.74M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  7.74M|        ++m_CurrentStepCount;
  418|       |
  419|  7.74M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.11k, False: 7.74M]
  |  Branch (419:14): [True: 7.74M, False: 0]
  |  Branch (419:42): [True: 774, False: 7.74M]
  ------------------
  420|  7.74M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 337, False: 7.74M]
  ------------------
  421|  1.11k|        {
  422|  1.11k|            m_Halted                       = true;
  423|  1.11k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.11k|        }
  425|  7.74M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  1.45k|    {
  429|       |        // Do nothing when no program is loaded
  430|  1.45k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 1.45k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  1.45k|        m_ProgramCounter               = 0u;
  436|  1.45k|        m_Halted                       = false;
  437|  1.45k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  1.45k|        m_LastRaisedException          = Exception::None;
  439|  1.45k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  7.74M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 7.74M, False: 1.45k]
  ------------------
  442|  7.74M|        {
  443|  7.74M|            ExecuteStep();
  444|  7.74M|        }
  445|       |
  446|  1.45k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  1.45k|                   "RegisterAccessType was not reset correctly");
  448|  1.45k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  7.10k|    {
  465|  7.10k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 227k, False: 7.10k]
  ------------------
  466|   227k|        {
  467|   227k|            reg.SetSignedValue(0);
  468|   227k|        }
  469|       |
  470|  7.10k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 227k, False: 7.10k]
  ------------------
  471|   227k|        {
  472|   227k|            reg.SetValue(0.0f);
  473|   227k|        }
  474|       |
  475|  7.10k|        m_FPSR.SetStatus(false);
  476|  7.10k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  7.10k|    {
  480|  7.10k|        m_MemoryBlock.Clear();
  481|  7.10k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   396k|    {
  489|   396k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   396k|        m_LastRaisedException = exception;
  492|       |
  493|   396k|        switch (exception)
  494|   396k|        {
  495|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 6, False: 396k]
  ------------------
  496|      6|                m_Halted = true;
  497|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      6|                return;
  499|  78.0k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 78.0k, False: 318k]
  ------------------
  500|  78.0k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  78.0k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  78.0k|                return;
  502|  69.9k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 69.9k, False: 326k]
  ------------------
  503|  69.9k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  69.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  69.9k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 396k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      2|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 2, False: 396k]
  ------------------
  510|      2|                m_Halted = true;
  511|      2|                return;
  512|    126|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 126, False: 396k]
  ------------------
  513|    126|                m_Halted = true;
  514|    126|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    126|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|    126|                return;
  516|   248k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 248k, False: 148k]
  ------------------
  517|   248k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   248k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|   248k|                return;
  519|    114|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 114, False: 396k]
  ------------------
  520|    114|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    114|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|    114|                m_Halted = true;
  522|    114|                return;
  523|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 29, False: 396k]
  ------------------
  524|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     29|                m_Halted = true;
  526|     29|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 396k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   396k|#endif
  532|   396k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|   330k|    {
  559|   330k|        return m_MemoryBlock;
  560|   330k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|  83.3k|    {
  574|  83.3k|        return m_NextProgramCounter;
  575|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  2.01M|    {
  579|  2.01M|        m_NextProgramCounter = new_npc;
  580|  2.01M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  10.2M|    {
   37|  10.2M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  10.2M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  10.2M|        switch (expected_access)
   41|  10.2M|        {
   42|  1.99M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.99M, False: 8.23M]
  ------------------
   43|  1.99M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 10.2M]
  ------------------
   45|      0|                return false;
   46|   169k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 169k, False: 10.0M]
  ------------------
   47|   169k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 84.7k, False: 84.7k]
  |  Branch (47:63): [True: 84.7k, False: 0]
  ------------------
   48|   127k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 127k, False: 10.0M]
  ------------------
   49|   127k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 127k]
  ------------------
   50|   127k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 127k, False: 0]
  ------------------
   51|  31.6k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 31.6k, False: 10.1M]
  ------------------
   52|  31.6k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 31.6k, False: 1]
  |  Branch (52:63): [True: 1, False: 0]
  ------------------
   53|  52.2k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 52.2k, False: 10.1M]
  ------------------
   54|  52.2k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 52.2k, False: 3]
  |  Branch (54:64): [True: 3, False: 0]
  ------------------
   55|  7.85M|            default:
  ------------------
  |  Branch (55:13): [True: 7.85M, False: 2.37M]
  ------------------
   56|  7.85M|                return expected_access == access;
   57|  10.2M|        }
   58|  10.2M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   566k|    {
   14|   566k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 111k, False: 455k]
  ------------------
   15|   111k|        {
   16|   111k|            char first_char = token[0];
   17|   111k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 3.36k, False: 108k]
  |  Branch (17:38): [True: 13.8k, False: 94.3k]
  ------------------
   18|  17.2k|            {
   19|  17.2k|                char second_char = token[1];
   20|  17.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 16.8k, False: 436]
  |  Branch (20:43): [True: 13.4k, False: 3.36k]
  ------------------
   21|  13.4k|                {
   22|  13.4k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  13.4k|                }
   24|  17.2k|            }
   25|   111k|        }
   26|   455k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 142k, False: 312k]
  ------------------
   27|   142k|        {
   28|   142k|            char first_char = token[0];
   29|   142k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 2.14k, False: 140k]
  |  Branch (29:38): [True: 7.26k, False: 133k]
  ------------------
   30|  9.40k|            {
   31|  9.40k|                char second_char = token[1];
   32|  9.40k|                char third_char  = token[2];
   33|       |
   34|  9.40k|                switch (second_char)
   35|  9.40k|                {
   36|  2.55k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.55k, False: 6.85k]
  ------------------
   37|  2.55k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 2.19k, False: 364]
  |  Branch (37:50): [True: 1.25k, False: 938]
  ------------------
   38|  1.25k|                        {
   39|  1.25k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.25k|                        }
   41|  1.30k|                        break;
   42|  2.55k|                    }
   43|  2.98k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.98k, False: 6.42k]
  ------------------
   44|  2.98k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.75k, False: 1.22k]
  |  Branch (44:50): [True: 864, False: 894]
  ------------------
   45|    864|                        {
   46|    864|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    864|                        }
   48|  2.11k|                        break;
   49|  2.98k|                    }
   50|  2.11k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.41k, False: 7.99k]
  ------------------
   51|  1.41k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 322, False: 1.09k]
  |  Branch (51:50): [True: 895, False: 200]
  ------------------
   52|  1.21k|                        {
   53|  1.21k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.21k|                        }
   55|    200|                        break;
   56|  1.41k|                    }
   57|  2.45k|                    default: {
  ------------------
  |  Branch (57:21): [True: 2.45k, False: 6.95k]
  ------------------
   58|  2.45k|                        break;
   59|  1.41k|                    }
   60|  9.40k|                }
   61|  9.40k|            }
   62|   142k|        }
   63|       |
   64|   550k|        return IntRegisterID::None;
   65|   566k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   550k|    {
   69|   550k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 98.1k, False: 451k]
  ------------------
   70|  98.1k|        {
   71|  98.1k|            char first_char = token[0];
   72|  98.1k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 3.01k, False: 95.0k]
  |  Branch (72:38): [True: 6.33k, False: 88.7k]
  ------------------
   73|  9.35k|            {
   74|  9.35k|                char second_char = token[1];
   75|  9.35k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 8.29k, False: 1.05k]
  |  Branch (75:43): [True: 5.50k, False: 2.78k]
  ------------------
   76|  5.50k|                {
   77|  5.50k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  5.50k|                }
   79|  9.35k|            }
   80|  98.1k|        }
   81|   451k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 139k, False: 312k]
  ------------------
   82|   139k|        {
   83|   139k|            char first_char = token[0];
   84|   139k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 3.02k, False: 136k]
  |  Branch (84:38): [True: 4.62k, False: 131k]
  ------------------
   85|  7.65k|            {
   86|  7.65k|                char second_char = token[1];
   87|  7.65k|                char third_char  = token[2];
   88|       |
   89|  7.65k|                switch (second_char)
   90|  7.65k|                {
   91|  1.50k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 1.50k, False: 6.14k]
  ------------------
   92|  1.50k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 528, False: 973]
  |  Branch (92:50): [True: 323, False: 205]
  ------------------
   93|    323|                        {
   94|    323|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    323|                        }
   96|  1.17k|                        break;
   97|  1.50k|                    }
   98|  1.23k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 1.23k, False: 6.41k]
  ------------------
   99|  1.23k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.03k, False: 198]
  |  Branch (99:50): [True: 333, False: 703]
  ------------------
  100|    333|                        {
  101|    333|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    333|                        }
  103|    901|                        break;
  104|  1.23k|                    }
  105|  2.79k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 2.79k, False: 4.85k]
  ------------------
  106|  2.79k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 899, False: 1.89k]
  |  Branch (106:50): [True: 1.38k, False: 510]
  ------------------
  107|  2.28k|                        {
  108|  2.28k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  2.28k|                        }
  110|    510|                        break;
  111|  2.79k|                    }
  112|  2.12k|                    default: {
  ------------------
  |  Branch (112:21): [True: 2.12k, False: 5.52k]
  ------------------
  113|  2.12k|                        break;
  114|  2.79k|                    }
  115|  7.65k|                }
  116|  7.65k|            }
  117|   139k|        }
  118|       |
  119|   541k|        return FloatRegisterID::None;
  120|   550k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   524k|    {
  124|   524k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 105k, False: 418k]
  ------------------
  125|   105k|        {
  126|   105k|            char c1 = token[0];
  127|   105k|            char c2 = token[1];
  128|   105k|            char c3 = token[2];
  129|   105k|            char c4 = token[3];
  130|       |
  131|   105k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.15k, False: 103k]
  |  Branch (131:34): [True: 4.05k, False: 99.7k]
  |  Branch (131:49): [True: 378, False: 5.83k]
  |  Branch (131:62): [True: 3.24k, False: 2.59k]
  ------------------
  132|   105k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.65k, False: 963]
  |  Branch (132:34): [True: 579, False: 384]
  |  Branch (132:49): [True: 743, False: 2.49k]
  |  Branch (132:62): [True: 2.44k, False: 53]
  ------------------
  133|   105k|        }
  134|       |
  135|   418k|        return false;
  136|   524k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   680k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   173k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  1.59M|    {
   41|  1.59M|        return m_Type;
   42|  1.59M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   706k|    {
   51|   706k|        return m_LineNumber;
   52|   706k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   647k|    {
   56|   647k|        return m_Column;
   57|   647k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   726k|    {
   66|   726k|        return m_Text;
   67|   726k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  68.8k|    {
   80|  68.8k|        return m_HasHint;
   81|  68.8k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  77.6k|    {
   85|  77.6k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  77.6k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  77.6k|                   m_Type == Type::ImmediateInteger);
   88|  77.6k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  77.6k|        return m_Hint;
   91|  77.6k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  7.10k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  7.10k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  7.10k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  3.17k|    {
   51|  3.17k|        auto it = m_Iterator;
   52|  12.7k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 9.53k, False: 3.17k]
  ------------------
   53|  9.53k|        {
   54|  9.53k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 7, False: 9.52k]
  ------------------
   55|      7|            {
   56|      7|                return false;
   57|      7|            }
   58|  9.53k|        }
   59|       |
   60|  3.17k|        return true;
   61|  3.17k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   852k|    {
   65|   852k|        return m_Iterator != m_Tokens.end();
   66|   852k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   854k|    {
   70|   854k|        return m_Iterator == m_Tokens.end();
   71|   854k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   854k|    {
   85|   854k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   854k|        return *m_Iterator++;
   91|   854k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  3.17k|    {
  164|  3.17k|        return m_Iterator;
  165|  3.17k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|    842|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|    842|        m_Iterator = it;
  179|    842|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    936|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    936|        return m_Tokens.rbegin();
  224|    936|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  8.64k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  8.64k|        return m_Tokens.rend();
  233|  8.64k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  7.10k|    {
   63|  7.10k|        TokenStream tokens;
   64|       |
   65|  7.10k|        std::string_view current_token;
   66|       |
   67|  7.10k|        phi::u64 current_line_number{1u};
   68|  7.10k|        phi::u64 current_column{1u};
   69|  7.10k|        phi::u64 token_begin{0u};
   70|       |
   71|  7.10k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.99M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.98M, False: 7.10k]
  ------------------
   74|  1.98M|        {
   75|  1.98M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.98M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 111k, False: 1.87M]
  ------------------
   78|   111k|            {
   79|   111k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 19.5k, False: 91.9k]
  ------------------
   80|  19.5k|                {
   81|       |                    // Skip empty lines
   82|  19.5k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  19.5k|                                        current_line_number, current_column);
   84|       |
   85|  19.5k|                    parsing_comment = false;
   86|  19.5k|                    current_line_number += 1u;
   87|  19.5k|                    current_column = 1u;
   88|  19.5k|                    continue;
   89|  19.5k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  91.9k|                tokens.emplace_back(
   93|  91.9k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  91.9k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  91.9k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  91.9k|                                    current_line_number, current_column);
   98|       |
   99|  91.9k|                current_token   = std::string_view{};
  100|  91.9k|                parsing_comment = false;
  101|  91.9k|                current_line_number += 1u;
  102|  91.9k|                current_column = 0u;
  103|  91.9k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.87M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.54k, False: 1.87M]
  |  Branch (105:34): [True: 3.34k, False: 1.86M]
  ------------------
  106|  4.88k|            {
  107|  4.88k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 651, False: 4.23k]
  ------------------
  108|    651|                {
  109|    651|                    token_begin = i;
  110|    651|                }
  111|  4.23k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 3.59k, False: 642]
  ------------------
  112|  3.59k|                {
  113|  3.59k|                    tokens.emplace_back(ParseToken(
  114|  3.59k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  3.59k|                            current_line_number, current_column - current_token.length()));
  116|  3.59k|                    token_begin   = i;
  117|  3.59k|                    current_token = std::string_view{};
  118|  3.59k|                }
  119|       |
  120|  4.88k|                parsing_comment = true;
  121|  4.88k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  4.88k|            }
  123|  1.86M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 7.47k, False: 1.86M]
  ------------------
  124|  7.47k|            {
  125|       |                // simply append the character
  126|  7.47k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  7.47k|            }
  128|  1.86M|            else
  129|  1.86M|            {
  130|       |                // Not parsing a comment
  131|  1.86M|                switch (c)
  132|  1.86M|                {
  133|  23.1k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 23.1k, False: 1.83M]
  ------------------
  134|  33.5k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 10.3k, False: 1.85M]
  ------------------
  135|  49.2k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 15.7k, False: 1.84M]
  ------------------
  136|  49.2k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 9.25k, False: 40.0k]
  ------------------
  137|  9.25k|                        {
  138|  9.25k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  9.25k|                            continue;
  141|  9.25k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  40.0k|                        tokens.emplace_back(ParseToken(
  145|  40.0k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  40.0k|                                current_line_number, current_column - current_token.length()));
  147|  40.0k|                        current_token = std::string_view{};
  148|  40.0k|                        break;
  149|   141k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 141k, False: 1.72M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   141k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 120k, False: 20.6k]
  ------------------
  152|   120k|                        {
  153|   120k|                            current_token =
  154|   120k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   120k|                            tokens.emplace_back(ParseToken(
  156|   120k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   120k|                                    current_line_number,
  158|   120k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   120k|                            current_token = std::string_view{};
  161|   120k|                        }
  162|  20.6k|                        else
  163|  20.6k|                        {
  164|       |                            // Orphan colon
  165|  20.6k|                            token_begin = i;
  166|       |
  167|  20.6k|                            tokens.emplace_back(Token::Type::Colon,
  168|  20.6k|                                                source.substr(token_begin.unsafe(), 1),
  169|  20.6k|                                                current_line_number, current_column);
  170|  20.6k|                        }
  171|   141k|                        break;
  172|   176k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 176k, False: 1.68M]
  ------------------
  173|   198k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 22.4k, False: 1.84M]
  ------------------
  174|   253k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 54.8k, False: 1.80M]
  ------------------
  175|   253k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 206k, False: 46.8k]
  ------------------
  176|   206k|                        {
  177|   206k|                            tokens.emplace_back(ParseToken(
  178|   206k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   206k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   206k|                            current_token = std::string_view{};
  182|   206k|                        }
  183|       |
  184|   253k|                        Token::Type type;
  185|   253k|                        switch (c)
  186|   253k|                        {
  187|   176k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 176k, False: 77.3k]
  ------------------
  188|   176k|                                type = Token::Type::Comma;
  189|   176k|                                break;
  190|  22.4k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 22.4k, False: 231k]
  ------------------
  191|  22.4k|                                type = Token::Type::OpenBracket;
  192|  22.4k|                                break;
  193|  54.8k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 54.8k, False: 198k]
  ------------------
  194|  54.8k|                                type = Token::Type::ClosingBracket;
  195|  54.8k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 253k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   253k|#endif
  201|   253k|                        }
  202|       |
  203|   253k|                        token_begin = i;
  204|       |
  205|   253k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   253k|                                            current_line_number, current_column);
  207|   253k|                        break;
  208|       |
  209|  1.41M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.41M, False: 444k]
  ------------------
  210|  1.41M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 464k, False: 954k]
  ------------------
  211|   464k|                        {
  212|   464k|                            token_begin = i;
  213|   464k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.41M|                        current_token =
  217|  1.41M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.86M|                }
  219|  1.86M|            }
  220|       |
  221|  1.95M|            current_column += 1u;
  222|  1.95M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  7.10k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 5.63k, False: 1.46k]
  ------------------
  226|  5.63k|        {
  227|  5.63k|            tokens.emplace_back(
  228|  5.63k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  5.63k|                               current_line_number, current_column - current_token.length()));
  230|  5.63k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  7.10k|        tokens.finalize();
  234|       |
  235|  7.10k|        return tokens;
  236|  7.10k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   468k|    {
   11|   468k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 10.0k, False: 458k]
  |  Branch (11:35): [True: 8.93k, False: 1.15k]
  ------------------
   12|  8.93k|        {
   13|  8.93k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  8.93k|            if (number)
  ------------------
  |  Branch (15:17): [True: 2.35k, False: 6.57k]
  ------------------
   16|  2.35k|            {
   17|  2.35k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  2.35k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  2.35k|            }
   20|       |
   21|  6.57k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  8.93k|        }
   23|       |
   24|   459k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.23k, False: 458k]
  |  Branch (24:35): [True: 3.01k, False: 455k]
  ------------------
   25|  4.24k|        {
   26|  4.24k|            return {Token::Type::Comment, token, line_number, column};
   27|  4.24k|        }
   28|       |
   29|   455k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 9.26k, False: 446k]
  ------------------
   30|  9.26k|        {
   31|  9.26k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  9.26k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  9.26k|        }
   34|       |
   35|   446k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.82k, False: 444k]
  ------------------
   36|  1.82k|        {
   37|  1.82k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.82k|        }
   39|       |
   40|   444k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 15.3k, False: 428k]
  ------------------
   41|  15.3k|        {
   42|  15.3k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  15.3k|                    static_cast<std::uint32_t>(id)};
   44|  15.3k|        }
   45|       |
   46|   428k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 7.06k, False: 421k]
  ------------------
   47|  7.06k|        {
   48|  7.06k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  7.06k|                    static_cast<std::uint32_t>(id)};
   50|  7.06k|        }
   51|       |
   52|   421k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 139k, False: 282k]
  ------------------
   53|   139k|        {
   54|   139k|            return {Token::Type::OpCode, token, line_number, column,
   55|   139k|                    static_cast<std::uint32_t>(opcode)};
   56|   139k|        }
   57|       |
   58|   282k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   421k|    }

LLVMFuzzerTestOneInput:
   12|  7.10k|{
   13|  7.10k|    static dlx::Processor processor;
   14|       |
   15|  7.10k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   16|       |
   17|       |    // Parse it
   18|  7.10k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  7.10k|    processor.ClearRegisters();
   22|  7.10k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  7.10k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.45k, False: 5.65k]
  ------------------
   26|  1.45k|    {
   27|  1.45k|        processor.ExecuteCurrentProgram();
   28|  1.45k|    }
   29|       |
   30|  7.10k|    return 0;
   31|  7.10k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|   307k|        {
  173|   307k|            PHI_ASSERT(index < 3u);
  174|       |
  175|   307k|            switch (index.unsafe())
  176|   307k|            {
  177|   134k|                case 0:
  ------------------
  |  Branch (177:17): [True: 134k, False: 173k]
  ------------------
  178|   134k|                    return m_Arg1Type;
  179|       |
  180|  89.8k|                case 1:
  ------------------
  |  Branch (180:17): [True: 89.8k, False: 218k]
  ------------------
  181|  89.8k|                    return m_Arg2Type;
  182|       |
  183|  83.3k|                case 2:
  ------------------
  |  Branch (183:17): [True: 83.3k, False: 224k]
  ------------------
  184|  83.3k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 307k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|   307k|#endif
  191|   307k|            }
  192|   307k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  76.0k|        {
  199|  76.0k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  76.0k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 71.9k, False: 4.07k]
  ------------------
  203|  71.9k|            {
  204|  71.9k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  71.9k|            }
  206|  76.0k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 39.6k, False: 36.3k]
  ------------------
  207|  39.6k|            {
  208|  39.6k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  39.6k|            }
  210|  76.0k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 17.0k, False: 58.9k]
  ------------------
  211|  17.0k|            {
  212|  17.0k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  17.0k|            }
  214|       |
  215|  76.0k|            return number_of_argument_required;
  216|  76.0k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  219|  8.53M|        {
  220|  8.53M|            return m_RegisterAccessType;
  221|  8.53M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  76.0k|        {
  225|  76.0k|            return m_Executor;
  226|  76.0k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  25.6M|    {
   38|  25.6M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  25.6M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  25.6M|                                         static_cast<underlying_t>(rhs));
   42|  25.6M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  25.6M|    {
   55|  25.6M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  25.6M|        return static_cast<underlying_t>(type & test) != 0;
   58|  25.6M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|   150k|    {
   31|   150k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.41k, False: 149k]
  ------------------
   32|  1.41k|        {
   33|  1.41k|            return true;
   34|  1.41k|        }
   35|       |
   36|   149k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 919, False: 148k]
  ------------------
   37|    919|        {
   38|    919|            return true;
   39|    919|        }
   40|       |
   41|   148k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 49.4k, False: 98.9k]
  ------------------
   42|  49.4k|        {
   43|  49.4k|            return true;
   44|  49.4k|        }
   45|       |
   46|  98.9k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 1.17k, False: 97.7k]
  ------------------
   47|  1.17k|        {
   48|  1.17k|            return true;
   49|  1.17k|        }
   50|       |
   51|  97.7k|        return false;
   52|  98.9k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  97.7k|    {
   56|  97.7k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 97.7k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  97.7k|        const char first_char = token.at(0u);
   62|       |
   63|  97.7k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 16.9k, False: 80.8k]
  ------------------
   64|  16.9k|        {
   65|  16.9k|            return phi::is_alpha(first_char);
   66|  16.9k|        }
   67|       |
   68|  80.8k|        phi::boolean just_under_scores = (first_char == '_');
   69|  80.8k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 7.03k, False: 73.8k]
  |  Branch (69:13): [True: 6.26k, False: 74.5k]
  |  Branch (69:43): [True: 6.26k, False: 770]
  ------------------
   70|  6.26k|        {
   71|  6.26k|            return false;
   72|  6.26k|        }
   73|       |
   74|   466k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 417k, False: 48.5k]
  ------------------
   75|   417k|        {
   76|   417k|            const char c{token.at(index)};
   77|       |
   78|   417k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 390k, False: 26.5k]
  ------------------
   79|   390k|            {
   80|   390k|                just_under_scores = false;
   81|   390k|            }
   82|  26.5k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 596, False: 25.9k]
  ------------------
   83|    596|            {
   84|    596|                continue;
   85|    596|            }
   86|  25.9k|            else
   87|  25.9k|            {
   88|  25.9k|                return false;
   89|  25.9k|            }
   90|   417k|        }
   91|       |
   92|  48.5k|        return !just_under_scores;
   93|  74.5k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   480k|    {
   99|   480k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 480k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   480k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 67.3k, False: 412k]
  ------------------
  105|  67.3k|        {
  106|  67.3k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 7.50k, False: 59.8k]
  ------------------
  107|  7.50k|            {
  108|  7.50k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  7.50k|            }
  110|       |
  111|  59.8k|            return {};
  112|  67.3k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|   412k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 638, False: 412k]
  ------------------
  116|    638|        {
  117|    638|            return {};
  118|    638|        }
  119|       |
  120|   412k|        phi::int32_t number{0};
  121|   412k|        phi::boolean is_negative{false};
  122|   412k|        phi::boolean starts_with_zero{false};
  123|   412k|        phi::boolean parsing_binary{false};
  124|   412k|        phi::boolean parsing_octal{false};
  125|   412k|        phi::boolean parsing_hexadecimal{false};
  126|   412k|        phi::boolean parsed_something{false};
  127|   412k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   461k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 453k, False: 7.77k]
  ------------------
  132|   453k|        {
  133|   453k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   453k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 412k, False: 41.7k]
  ------------------
  137|   412k|            {
  138|   412k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 479, False: 411k]
  ------------------
  139|    479|                {
  140|    479|                    continue;
  141|    479|                }
  142|       |
  143|   411k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 3.30k, False: 408k]
  ------------------
  144|  3.30k|                {
  145|  3.30k|                    is_negative = true;
  146|  3.30k|                    continue;
  147|  3.30k|                }
  148|       |
  149|   408k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 8.37k, False: 400k]
  ------------------
  150|  8.37k|                {
  151|  8.37k|                    starts_with_zero = true;
  152|  8.37k|                    continue;
  153|  8.37k|                }
  154|       |
  155|   400k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 981, False: 399k]
  ------------------
  156|    981|                {
  157|    981|                    return {};
  158|    981|                }
  159|   400k|            }
  160|       |
  161|       |            // Second character
  162|   440k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 16.0k, False: 424k]
  ------------------
  163|  16.0k|            {
  164|  16.0k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 8.37k, False: 7.65k]
  ------------------
  165|  8.37k|                {
  166|       |                    // Binary
  167|  8.37k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 1.16k, False: 7.21k]
  |  Branch (167:37): [True: 709, False: 6.50k]
  ------------------
  168|  1.87k|                    {
  169|  1.87k|                        parsing_binary = true;
  170|  1.87k|                        continue;
  171|  1.87k|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  6.50k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 270, False: 6.23k]
  |  Branch (174:37): [True: 1.72k, False: 4.51k]
  ------------------
  175|  1.99k|                    {
  176|  1.99k|                        parsing_hexadecimal = true;
  177|  1.99k|                        continue;
  178|  1.99k|                    }
  179|       |
  180|       |                    // Octal
  181|  4.51k|                    parsing_octal = true;
  182|  4.51k|                }
  183|  16.0k|            }
  184|       |
  185|       |            // Handle separators
  186|   436k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 3.82k, False: 433k]
  ------------------
  187|  3.82k|            {
  188|  3.82k|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 1.74k, False: 2.07k]
  ------------------
  189|  1.74k|                {
  190|  1.74k|                    return {};
  191|  1.74k|                }
  192|       |
  193|  2.07k|                parsed_separator = true;
  194|  2.07k|                continue;
  195|  3.82k|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   433k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 13.0k, False: 420k]
  |  Branch (198:32): [True: 1.47k, False: 11.5k]
  ------------------
  199|  1.47k|            {
  200|       |                // Would underflow
  201|  1.47k|                return {};
  202|  1.47k|            }
  203|   431k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 420k, False: 11.5k]
  |  Branch (203:17): [True: 794, False: 430k]
  |  Branch (203:33): [True: 794, False: 419k]
  ------------------
  204|    794|            {
  205|       |                // Would overflow
  206|    794|                return {};
  207|    794|            }
  208|       |
  209|   430k|            parsed_separator = false;
  210|   430k|            parsed_something = true;
  211|       |
  212|   430k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 1.20k, False: 429k]
  ------------------
  213|  1.20k|            {
  214|  1.20k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 781, False: 426]
  ------------------
  215|    781|                {
  216|    781|                    return {};
  217|    781|                }
  218|       |
  219|    426|                number <<= 1;
  220|    426|                number |= (c - '0');
  221|    426|            }
  222|   429k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 3.55k, False: 426k]
  ------------------
  223|  3.55k|            {
  224|  3.55k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 725, False: 2.83k]
  ------------------
  225|    725|                {
  226|    725|                    return {};
  227|    725|                }
  228|       |
  229|  2.83k|                number <<= 3;
  230|  2.83k|                number |= (c - '0');
  231|  2.83k|            }
  232|   426k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.83k, False: 424k]
  ------------------
  233|  1.83k|            {
  234|  1.83k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 898, False: 941]
  ------------------
  235|    898|                {
  236|    898|                    return {};
  237|    898|                }
  238|       |
  239|    941|                number <<= 4;
  240|    941|                number |= phi::hex_digit_value(c).unsafe();
  241|    941|            }
  242|   424k|            else
  243|   424k|            {
  244|   424k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 396k, False: 27.5k]
  ------------------
  245|   396k|                {
  246|   396k|                    return {};
  247|   396k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  27.5k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 7.03k, False: 20.5k]
  |  Branch (250:36): [True: 325, False: 6.71k]
  ------------------
  251|    325|                {
  252|    325|                    return {};
  253|    325|                }
  254|       |
  255|  27.2k|                number *= 10;
  256|  27.2k|                number += (c - '0');
  257|  27.2k|            }
  258|   430k|        }
  259|       |
  260|  7.77k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 5.77k, False: 1.99k]
  ------------------
  261|  5.77k|        {
  262|       |            // Check for over/underflow
  263|  5.77k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 1.33k, False: 4.44k]
  |  Branch (263:32): [True: 578, False: 758]
  ------------------
  264|    578|            {
  265|       |                // Would underflow
  266|    578|                return {};
  267|    578|            }
  268|  5.20k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 4.44k, False: 758]
  |  Branch (268:17): [True: 1.56k, False: 3.63k]
  |  Branch (268:33): [True: 1.56k, False: 2.88k]
  ------------------
  269|  1.56k|            {
  270|       |                // Would overflow
  271|  1.56k|                return {};
  272|  1.56k|            }
  273|       |
  274|  3.63k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 758, False: 2.88k]
  ------------------
  275|    758|            {
  276|    758|                return static_cast<phi::int16_t>(-number);
  277|    758|            }
  278|       |
  279|  2.88k|            return static_cast<phi::int16_t>(number);
  280|  3.63k|        }
  281|       |
  282|  1.99k|        return {};
  283|  7.77k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   424k|        {
   12|   424k|            m_Value = value;
   13|   424k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   152k|        {
   17|   152k|            return m_Value;
   18|   152k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  19.4k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  19.4k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 151k, False: 0]
  ------------------
   64|   151k|            {
   65|   151k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 19.4k, False: 131k]
  ------------------
   66|  19.4k|                {
   67|  19.4k|                    return &token;
   68|  19.4k|                }
   69|   151k|            }
   70|       |
   71|      0|            return nullptr;
   72|  19.4k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|   117k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   117k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   117k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   487k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   487k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   487k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   233k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   233k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   233k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
    8|   687k|    {
    9|   687k|        m_Value = val;
   10|   687k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   13|  1.78M|    {
   14|  1.78M|        return m_Value;
   15|  1.78M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  76.0k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  40.5k|    {
   22|  40.5k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  40.5k|        switch (argument_number.unsafe())
   25|  40.5k|        {
   26|  22.1k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 22.1k, False: 18.3k]
  ------------------
   27|  22.1k|                m_Arg1 = argument;
   28|  22.1k|                break;
   29|  11.0k|            case 1u:
  ------------------
  |  Branch (29:13): [True: 11.0k, False: 29.4k]
  ------------------
   30|  11.0k|                m_Arg2 = argument;
   31|  11.0k|                break;
   32|  7.31k|            case 2u:
  ------------------
  |  Branch (32:13): [True: 7.31k, False: 33.1k]
  ------------------
   33|  7.31k|                m_Arg3 = argument;
   34|  7.31k|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 40.5k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  40.5k|#endif
   39|  40.5k|        }
   40|  40.5k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   79|  8.53M|    {
   80|  8.53M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   81|  8.53M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   84|  8.53M|    {
   85|  8.53M|        return m_Info;
   86|  8.53M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|   268k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   24|  51.5M|    {
   25|  51.5M|        return m_Type;
   26|  51.5M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   73|  9.84M|    {
   74|  9.84M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   75|       |
   76|  9.84M|        return register_int;
   77|  9.84M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   80|  1.55M|    {
   81|  1.55M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   82|       |
   83|  1.55M|        return register_float;
   84|  1.55M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   88|  1.58M|    {
   89|  1.58M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   90|       |
   91|  1.58M|        return immediate_value;
   92|  1.58M|    }
_ZNK3dlx19InstructionArgument21AsAddressDisplacementEv:
   96|      5|    {
   97|      5|        PHI_ASSERT(m_Type == ArgumentType::AddressDisplacement);
   98|       |
   99|      5|        return address_displacement;
  100|      5|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  103|   562k|    {
  104|   562k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  105|       |
  106|   562k|        return label;
  107|   562k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  22.5k|    {
  167|  22.5k|        InstructionArgument arg;
  168|  22.5k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  22.5k|        arg.register_int.register_id = id;
  170|  22.5k|        return arg;
  171|  22.5k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|  6.84k|    {
  175|  6.84k|        InstructionArgument arg;
  176|  6.84k|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|  6.84k|        arg.register_float.register_id = id;
  178|  6.84k|        return arg;
  179|  6.84k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|  3.23k|    {
  183|  3.23k|        InstructionArgument arg;
  184|  3.23k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|  3.23k|        arg.immediate_value.signed_value = value;
  186|  3.23k|        return arg;
  187|  3.23k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  191|    615|    {
  192|    615|        InstructionArgument arg;
  193|    615|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  194|    615|        arg.address_displacement.register_id  = id;
  195|    615|        arg.address_displacement.displacement = displacement;
  196|    615|        return arg;
  197|    615|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  7.27k|    {
  201|  7.27k|        InstructionArgument arg;
  202|  7.27k|        arg.m_Type           = ArgumentType::Label;
  203|  7.27k|        arg.label.label_name = label_name;
  204|  7.27k|        return arg;
  205|  7.27k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|  55.4k|        {
  351|  55.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|  55.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|  55.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|  55.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|  55.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|  55.4k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|  55.4k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|   104k|        {
  364|   104k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|   104k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|   104k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|   104k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|   104k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|   104k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  28.8k|        {
  376|  28.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  28.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  28.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  28.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  28.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  28.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  28.8k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  42.1k|        {
  389|  42.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  42.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  42.1k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  42.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  42.1k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  42.1k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  24.3k|        {
  401|  24.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  24.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  24.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  24.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  24.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  24.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  24.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  17.9k|        {
  416|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  17.9k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  17.9k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|   481k|        {
  431|   481k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|   481k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|   481k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|   481k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|   481k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|   481k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|   481k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|   180k|        {
  444|   180k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|   180k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|   180k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|   180k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|   180k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|   180k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|  43.3k|        {
  456|  43.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|  43.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|  43.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|  43.3k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|  43.3k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|  43.3k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|  43.3k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  35.2k|        {
  469|  35.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  35.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  35.2k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  35.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  35.2k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  35.2k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  13.8k|        {
  481|  13.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  13.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  13.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  13.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  13.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  13.8k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  13.8k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  13.8k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  13.4k|        {
  496|  13.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  13.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  13.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  13.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  13.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  13.4k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  13.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  13.4k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  31.3k|        {
  511|  31.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  31.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  31.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  31.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  31.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  31.3k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  31.3k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|   154k|        {
  524|   154k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|   154k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|   154k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|   154k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|   154k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|   154k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  32.2k|        {
  536|  32.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  32.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  32.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  32.2k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  32.2k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  32.2k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  32.2k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  41.2k|        {
  549|  41.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  41.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  41.2k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  41.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  41.2k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  41.2k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  19.2k|        {
  561|  19.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  19.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  19.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  19.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  19.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  19.2k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  19.2k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  19.2k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  17.9k|        {
  576|  17.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  17.9k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  17.9k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  17.9k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  19.6k|        {
  591|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  19.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  19.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  19.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  19.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  19.6k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  19.6k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|  24.3k|        {
  604|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  606|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|  24.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|  24.3k|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|  24.3k|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  9.47k|        {
  616|  9.47k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  9.47k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  9.47k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  9.47k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  9.47k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  9.47k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  9.47k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|  24.3k|        {
  629|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  631|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|  24.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|  24.3k|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|  24.3k|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  30.4k|        {
  683|  30.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  30.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  30.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  30.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  30.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  30.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  30.4k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  52.2k|        {
  696|  52.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  52.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  52.2k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  52.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  52.2k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  52.2k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  52.2k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  63.9k|        {
  709|  63.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  63.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  63.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  63.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  63.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  63.9k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  63.9k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  78.4k|        {
  722|  78.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  78.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  78.4k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  78.4k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  78.4k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  78.4k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  78.4k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|  60.3k|        {
  735|  60.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|  60.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|  60.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|  60.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|  60.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|  60.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|  60.3k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  66.3k|        {
  748|  66.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  66.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  66.3k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  66.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  66.3k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  66.3k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  66.3k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  70.3k|        {
  761|  70.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  70.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  70.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  70.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  70.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  70.3k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  70.3k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  85.9k|        {
  774|  85.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  85.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  85.9k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  85.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  85.9k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  85.9k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  85.9k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  17.9k|        {
  787|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  17.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  17.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  17.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  17.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|  20.9k|        {
  801|  20.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|  20.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|  20.9k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|  20.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|  20.9k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|  20.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|  20.9k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  78.1k|        {
  814|  78.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  78.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  78.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  78.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  78.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  78.1k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  78.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  78.1k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  15.8k|        {
  828|  15.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  15.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  15.8k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  15.8k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  15.8k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  15.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  15.8k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  27.0k|        {
  841|  27.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  27.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  27.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  27.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  27.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  27.0k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  27.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  27.0k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|  13.3k|        {
  855|  13.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|  13.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|  13.3k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|  13.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|  13.3k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|  13.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|  13.3k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  13.5k|        {
  868|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  13.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  13.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  13.5k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 0, False: 13.5k]
  ------------------
  876|       |
  877|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  13.5k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  27.4k|        {
  883|  27.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  27.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  27.4k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  27.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  27.4k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 19.9k, False: 7.57k]
  ------------------
  890|       |
  891|  27.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  27.4k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  19.4k|        {
  897|  19.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  19.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  19.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  19.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  19.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  19.4k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 0, False: 19.4k]
  ------------------
  905|       |
  906|  19.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  19.4k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|  24.3k|        {
  912|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|  24.3k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 24.3k, False: 0]
  ------------------
  919|       |
  920|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|  24.3k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  48.1k|        {
  926|  48.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  48.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  48.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  48.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  48.1k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  48.1k|            processor.SetFPSRValue(new_value);
  935|  48.1k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  18.6k|        {
  940|  18.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  18.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  18.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  18.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  18.6k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  18.6k|            processor.SetFPSRValue(new_value);
  949|  18.6k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  27.0k|        {
  954|  27.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  27.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  27.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  27.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  27.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  27.0k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 3.08k, False: 23.9k]
  ------------------
  962|       |
  963|  27.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  27.0k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  29.5k|        {
  969|  29.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  29.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  29.5k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  29.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  29.5k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 0, False: 29.5k]
  ------------------
  976|       |
  977|  29.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  29.5k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  14.8k|        {
  983|  14.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  14.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  14.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  14.8k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 871, False: 14.0k]
  ------------------
  991|       |
  992|  14.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  14.8k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  24.3k|        {
  998|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  24.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  24.3k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 24.3k]
  ------------------
 1005|       |
 1006|  24.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  24.3k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|  71.5k|        {
 1012|  71.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|  71.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|  71.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|  71.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|  71.5k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|  71.5k|            processor.SetFPSRValue(new_value);
 1021|  71.5k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|  28.8k|        {
 1026|  28.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|  28.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|  28.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|  28.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|  28.8k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|  28.8k|            processor.SetFPSRValue(new_value);
 1035|  28.8k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|   416k|        {
 1040|   416k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|   416k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|   416k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|   416k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|   416k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|   416k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 312k, False: 104k]
  ------------------
 1048|       |
 1049|   416k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|   416k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  27.6k|        {
 1055|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  27.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  27.6k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 27.6k, False: 0]
  ------------------
 1062|       |
 1063|  27.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  27.6k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  21.5k|        {
 1069|  21.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  21.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  21.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  21.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  21.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  21.5k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 21.5k, False: 0]
  ------------------
 1077|       |
 1078|  21.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  21.5k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|  19.6k|        {
 1084|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|  19.6k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 19.6k, False: 0]
  ------------------
 1091|       |
 1092|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|  19.6k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  48.8k|        {
 1098|  48.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  48.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  48.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  48.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  48.8k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  48.8k|            processor.SetFPSRValue(new_value);
 1107|  48.8k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  45.6k|        {
 1112|  45.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  45.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  45.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  45.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  45.6k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  45.6k|            processor.SetFPSRValue(new_value);
 1121|  45.6k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  15.7k|        {
 1126|  15.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  15.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  15.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  15.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  15.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  15.7k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 13.7k, False: 2.00k]
  ------------------
 1134|       |
 1135|  15.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  15.7k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|  24.3k|        {
 1141|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|  24.3k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 5.83k, False: 18.4k]
  ------------------
 1148|       |
 1149|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|  24.3k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  11.0k|        {
 1155|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  11.0k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 11.0k, False: 0]
  ------------------
 1163|       |
 1164|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  11.0k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  19.6k|        {
 1170|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  19.6k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 3.33k, False: 16.3k]
  ------------------
 1177|       |
 1178|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  19.6k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  22.7k|        {
 1184|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  22.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  22.7k|            processor.SetFPSRValue(new_value);
 1193|  22.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  34.3k|        {
 1198|  34.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  34.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  34.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  34.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  34.3k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  34.3k|            processor.SetFPSRValue(new_value);
 1207|  34.3k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  26.1k|        {
 1212|  26.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  26.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  26.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  26.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  26.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  26.1k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 23.2k, False: 2.90k]
  ------------------
 1220|       |
 1221|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  26.1k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  24.3k|        {
 1227|  24.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  24.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  24.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  24.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  24.3k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 1, False: 24.3k]
  ------------------
 1234|       |
 1235|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  24.3k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|  22.8k|        {
 1241|  22.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|  22.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|  22.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|  22.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|  22.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|  22.8k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 20.8k, False: 2.00k]
  ------------------
 1249|       |
 1250|  22.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|  22.8k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  23.5k|        {
 1256|  23.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  23.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  23.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  23.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  23.5k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 1, False: 23.5k]
  ------------------
 1263|       |
 1264|  23.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  23.5k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  23.9k|        {
 1270|  23.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  23.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  23.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  23.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  23.9k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  23.9k|            processor.SetFPSRValue(new_value);
 1279|  23.9k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  27.6k|        {
 1284|  27.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  27.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  27.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  27.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  27.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  27.6k|            processor.SetFPSRValue(new_value);
 1293|  27.6k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  20.4k|        {
 1298|  20.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  20.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  20.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  20.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  20.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  20.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 1.66k, False: 18.7k]
  ------------------
 1306|       |
 1307|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  20.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  26.1k|        {
 1313|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 22.4k, False: 3.66k]
  ------------------
 1320|       |
 1321|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  17.9k|        {
 1327|  17.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  17.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  17.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  17.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  17.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  17.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 0, False: 17.9k]
  ------------------
 1335|       |
 1336|  17.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  17.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  19.6k|        {
 1342|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  19.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  19.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 19.6k, False: 0]
  ------------------
 1349|       |
 1350|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  19.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  23.7k|        {
 1356|  23.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  23.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  23.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  23.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  23.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  23.7k|            processor.SetFPSRValue(new_value);
 1365|  23.7k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  22.7k|        {
 1370|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  22.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  22.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  22.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  22.7k|            processor.SetFPSRValue(new_value);
 1379|  22.7k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  76.1k|        {
 1384|  76.1k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  76.1k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  76.1k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  76.1k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 59.9k, False: 16.1k]
  ------------------
 1390|  59.9k|            {
 1391|  59.9k|                JumpToLabel(processor, jump_label.label_name);
 1392|  59.9k|            }
 1393|  76.1k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  51.3k|        {
 1398|  51.3k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  51.3k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  51.3k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  51.3k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 31.6k, False: 19.6k]
  ------------------
 1404|  31.6k|            {
 1405|  31.6k|                JumpToLabel(processor, jump_label.label_name);
 1406|  31.6k|            }
 1407|  51.3k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  47.9k|        {
 1412|  47.9k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  47.9k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  47.9k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 26.1k, False: 21.8k]
  ------------------
 1417|  26.1k|            {
 1418|  26.1k|                JumpToLabel(processor, jump_label.label_name);
 1419|  26.1k|            }
 1420|  47.9k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   104k|        {
 1425|   104k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   104k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   104k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 63.5k, False: 40.8k]
  ------------------
 1430|  63.5k|            {
 1431|  63.5k|                JumpToLabel(processor, jump_label.label_name);
 1432|  63.5k|            }
 1433|   104k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|   227k|        {
 1438|   227k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|   227k|            JumpToLabel(processor, jump_label.label_name);
 1441|   227k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  1.91M|        {
 1446|  1.91M|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  1.91M|            JumpToRegister(processor, jump_register.register_id);
 1449|  1.91M|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  56.0k|        {
 1454|  56.0k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  56.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  56.0k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  56.0k|            JumpToLabel(processor, jump_label.label_name);
 1460|  56.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|  27.3k|        {
 1465|  27.3k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|  27.3k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|  27.3k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|  27.3k|            JumpToRegister(processor, jump_register.register_id);
 1471|  27.3k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  16.7k|        {
 1476|  16.7k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  16.7k|            phi::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  16.7k|            imm_value = static_cast<phi::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  16.7k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  16.7k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|  10.5k|        {
 1487|  10.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|  10.5k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|  10.5k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 1, False: 10.5k]
  ------------------
 1492|      1|            {
 1493|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      1|                return;
 1495|      1|            }
 1496|       |
 1497|  10.5k|            phi::i32 address = optional_address.value();
 1498|       |
 1499|  10.5k|            auto optional_value =
 1500|  10.5k|                    processor.GetMemory().LoadByte(static_cast<phi::size_t>(address.unsafe()));
 1501|       |
 1502|  10.5k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 2, False: 10.5k]
  ------------------
 1503|      2|            {
 1504|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      2|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      2|                return;
 1507|      2|            }
 1508|       |
 1509|  10.5k|            phi::i32 value = optional_value.value();
 1510|       |
 1511|  10.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|  10.5k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|  19.6k|        {
 1517|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|  19.6k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|  19.6k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 1, False: 19.6k]
  ------------------
 1522|      1|            {
 1523|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      1|                return;
 1525|      1|            }
 1526|       |
 1527|  19.6k|            phi::i32 address = optional_address.value();
 1528|       |
 1529|  19.6k|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|  19.6k|                    static_cast<phi::size_t>(address.unsafe()));
 1531|       |
 1532|  19.6k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 2, False: 19.6k]
  ------------------
 1533|      2|            {
 1534|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      2|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      2|                return;
 1537|      2|            }
 1538|       |
 1539|  19.6k|            phi::u32 value = optional_value.value();
 1540|       |
 1541|  19.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|  19.6k|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|  24.3k|        {
 1547|  24.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 1, False: 24.3k]
  ------------------
 1552|      1|            {
 1553|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      1|                return;
 1555|      1|            }
 1556|       |
 1557|  24.3k|            phi::i32 address = optional_address.value();
 1558|       |
 1559|  24.3k|            auto optional_value =
 1560|  24.3k|                    processor.GetMemory().LoadHalfWord(static_cast<phi::size_t>(address.unsafe()));
 1561|       |
 1562|  24.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 4, False: 24.3k]
  ------------------
 1563|      4|            {
 1564|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      4|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      4|                return;
 1567|      4|            }
 1568|       |
 1569|  24.3k|            phi::i32 value = optional_value.value();
 1570|       |
 1571|  24.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|  24.3k|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|  19.4k|        {
 1577|  19.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|  19.4k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|  19.4k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 1, False: 19.4k]
  ------------------
 1582|      1|            {
 1583|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      1|                return;
 1585|      1|            }
 1586|       |
 1587|  19.4k|            phi::i32 address = optional_address.value();
 1588|       |
 1589|  19.4k|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|  19.4k|                    static_cast<phi::size_t>(address.unsafe()));
 1591|       |
 1592|  19.4k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 5, False: 19.4k]
  ------------------
 1593|      5|            {
 1594|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      5|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      5|                return;
 1597|      5|            }
 1598|       |
 1599|  19.4k|            phi::u32 value = optional_value.value();
 1600|       |
 1601|  19.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|  19.4k|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|  20.3k|        {
 1607|  20.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|  20.3k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|  20.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 1, False: 20.3k]
  ------------------
 1612|      1|            {
 1613|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      1|                return;
 1615|      1|            }
 1616|       |
 1617|  20.3k|            phi::i32 address = optional_address.value();
 1618|       |
 1619|  20.3k|            auto optional_value =
 1620|  20.3k|                    processor.GetMemory().LoadWord(static_cast<phi::size_t>(address.unsafe()));
 1621|       |
 1622|  20.3k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 3, False: 20.3k]
  ------------------
 1623|      3|            {
 1624|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      3|                return;
 1627|      3|            }
 1628|       |
 1629|  20.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|  20.3k|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|  11.7k|        {
 1635|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|  11.7k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|  11.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 1, False: 11.7k]
  ------------------
 1640|      1|            {
 1641|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      1|                return;
 1643|      1|            }
 1644|       |
 1645|  11.7k|            phi::i32 address = optional_address.value();
 1646|       |
 1647|  11.7k|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|  11.7k|                    static_cast<phi::size_t>(address.unsafe()));
 1649|       |
 1650|  11.7k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 3, False: 11.7k]
  ------------------
 1651|      3|            {
 1652|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      3|                return;
 1655|      3|            }
 1656|       |
 1657|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|  11.7k|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|  14.0k|        {
 1663|  14.0k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|  14.0k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|  14.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 1, False: 14.0k]
  ------------------
 1668|      1|            {
 1669|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      1|                return;
 1671|      1|            }
 1672|       |
 1673|  14.0k|            phi::i32 address = optional_address.value();
 1674|       |
 1675|  14.0k|            auto optional_value =
 1676|  14.0k|                    processor.GetMemory().LoadFloat(static_cast<phi::size_t>(address.unsafe()));
 1677|       |
 1678|  14.0k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 5, False: 14.0k]
  ------------------
 1679|      5|            {
 1680|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      5|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      5|                return;
 1683|      5|            }
 1684|       |
 1685|  14.0k|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|  14.0k|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|  24.9k|        {
 1691|  24.9k|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|  24.9k|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|  24.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 1, False: 24.9k]
  ------------------
 1696|      1|            {
 1697|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      1|                return;
 1699|      1|            }
 1700|       |
 1701|  24.9k|            phi::i32 address = optional_address.value();
 1702|       |
 1703|  24.9k|            auto optional_value =
 1704|  24.9k|                    processor.GetMemory().LoadDouble(static_cast<phi::size_t>(address.unsafe()));
 1705|       |
 1706|  24.9k|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 5, False: 24.9k]
  ------------------
 1707|      5|            {
 1708|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      5|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      5|                return;
 1711|      5|            }
 1712|       |
 1713|  24.9k|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|  24.9k|        }
_ZN3dlx4impl2SBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1718|  36.0k|        {
 1719|  36.0k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1720|       |
 1721|  36.0k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1721:17): [True: 1, False: 36.0k]
  ------------------
 1722|      1|            {
 1723|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1724|      1|                return;
 1725|      1|            }
 1726|       |
 1727|  36.0k|            phi::i32 address = optional_address.value();
 1728|       |
 1729|  36.0k|            const auto& src_reg = arg2.AsRegisterInt();
 1730|       |
 1731|  36.0k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1732|       |
 1733|  36.0k|            phi::boolean success =
 1734|  36.0k|                    processor.GetMemory().StoreByte(static_cast<phi::size_t>(address.unsafe()),
 1735|  36.0k|                                                    static_cast<phi::int8_t>(value.unsafe()));
 1736|       |
 1737|  36.0k|            if (!success)
  ------------------
  |  Branch (1737:17): [True: 5, False: 36.0k]
  ------------------
 1738|      5|            {
 1739|      5|                processor.Raise(Exception::AddressOutOfBounds);
 1740|      5|                DLX_ERROR("Failed to store byte at address {}", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1741|      5|            }
 1742|  36.0k|        }
_ZN3dlx4impl3SBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1746|  24.3k|        {
 1747|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1748|       |
 1749|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1749:17): [True: 1, False: 24.3k]
  ------------------
 1750|      1|            {
 1751|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1752|      1|                return;
 1753|      1|            }
 1754|       |
 1755|  24.3k|            phi::i32 address = optional_address.value();
 1756|       |
 1757|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1758|       |
 1759|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1760|       |
 1761|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedByte(
 1762|  24.3k|                    static_cast<phi::size_t>(address.unsafe()),
 1763|  24.3k|                    static_cast<phi::uint8_t>(value.unsafe()));
 1764|       |
 1765|  24.3k|            if (!success)
  ------------------
  |  Branch (1765:17): [True: 4, False: 24.3k]
  ------------------
 1766|      4|            {
 1767|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1768|      4|                DLX_ERROR("Failed to store unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1769|      4|            }
 1770|  24.3k|        }
_ZN3dlx4impl2SHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1774|  24.2k|        {
 1775|  24.2k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1776|       |
 1777|  24.2k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1777:17): [True: 1, False: 24.2k]
  ------------------
 1778|      1|            {
 1779|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1780|      1|                return;
 1781|      1|            }
 1782|       |
 1783|  24.2k|            phi::i32 address = optional_address.value();
 1784|       |
 1785|  24.2k|            const auto& src_reg = arg2.AsRegisterInt();
 1786|       |
 1787|  24.2k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1788|       |
 1789|  24.2k|            phi::boolean success =
 1790|  24.2k|                    processor.GetMemory().StoreHalfWord(static_cast<phi::size_t>(address.unsafe()),
 1791|  24.2k|                                                        static_cast<phi::int16_t>(value.unsafe()));
 1792|       |
 1793|  24.2k|            if (!success)
  ------------------
  |  Branch (1793:17): [True: 3, False: 24.2k]
  ------------------
 1794|      3|            {
 1795|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1796|      3|                DLX_ERROR("Failed to store half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1797|      3|            }
 1798|  24.2k|        }
_ZN3dlx4impl3SHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1802|  24.3k|        {
 1803|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1804|       |
 1805|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1805:17): [True: 1, False: 24.3k]
  ------------------
 1806|      1|            {
 1807|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1808|      1|                return;
 1809|      1|            }
 1810|       |
 1811|  24.3k|            phi::i32 address = optional_address.value();
 1812|       |
 1813|  24.3k|            const auto& src_reg = arg2.AsRegisterInt();
 1814|       |
 1815|  24.3k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1816|       |
 1817|  24.3k|            phi::boolean success = processor.GetMemory().StoreUnsignedHalfWord(
 1818|  24.3k|                    static_cast<phi::size_t>(address.unsafe()),
 1819|  24.3k|                    static_cast<phi::uint16_t>(value.unsafe()));
 1820|       |
 1821|  24.3k|            if (!success)
  ------------------
  |  Branch (1821:17): [True: 3, False: 24.3k]
  ------------------
 1822|      3|            {
 1823|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1824|      3|                DLX_ERROR("Failed to store unsigned half word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1825|      3|            }
 1826|  24.3k|        }
_ZN3dlx4impl2SWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1830|  25.7k|        {
 1831|  25.7k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1832|       |
 1833|  25.7k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1833:17): [True: 1, False: 25.7k]
  ------------------
 1834|      1|            {
 1835|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1836|      1|                return;
 1837|      1|            }
 1838|       |
 1839|  25.7k|            phi::i32 address = optional_address.value();
 1840|       |
 1841|  25.7k|            const auto& src_reg = arg2.AsRegisterInt();
 1842|       |
 1843|  25.7k|            phi::i32 value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1844|       |
 1845|  25.7k|            phi::boolean success = processor.GetMemory().StoreWord(
 1846|  25.7k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1847|       |
 1848|  25.7k|            if (!success)
  ------------------
  |  Branch (1848:17): [True: 2, False: 25.7k]
  ------------------
 1849|      2|            {
 1850|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1851|      2|                DLX_ERROR("Failed to store word at address {}", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1852|      2|            }
 1853|  25.7k|        }
_ZN3dlx4impl3SWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1857|  17.9k|        {
 1858|  17.9k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1859|       |
 1860|  17.9k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1860:17): [True: 1, False: 17.9k]
  ------------------
 1861|      1|            {
 1862|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1863|      1|                return;
 1864|      1|            }
 1865|       |
 1866|  17.9k|            phi::i32 address = optional_address.value();
 1867|       |
 1868|  17.9k|            const auto& src_reg = arg2.AsRegisterInt();
 1869|       |
 1870|  17.9k|            phi::u32 value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1871|       |
 1872|  17.9k|            phi::boolean success = processor.GetMemory().StoreUnsignedWord(
 1873|  17.9k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1874|       |
 1875|  17.9k|            if (!success)
  ------------------
  |  Branch (1875:17): [True: 3, False: 17.9k]
  ------------------
 1876|      3|            {
 1877|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1878|      3|                DLX_ERROR("Failed to store unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1879|      3|            }
 1880|  17.9k|        }
_ZN3dlx4impl2SFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1884|  18.3k|        {
 1885|  18.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1886|       |
 1887|  18.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1887:17): [True: 1, False: 18.3k]
  ------------------
 1888|      1|            {
 1889|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1890|      1|                return;
 1891|      1|            }
 1892|       |
 1893|  18.3k|            phi::i32 address = optional_address.value();
 1894|       |
 1895|  18.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1896|       |
 1897|  18.3k|            phi::f32 value = processor.FloatRegisterGetFloatValue(src_reg.register_id);
 1898|       |
 1899|  18.3k|            phi::boolean success = processor.GetMemory().StoreFloat(
 1900|  18.3k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1901|       |
 1902|  18.3k|            if (!success)
  ------------------
  |  Branch (1902:17): [True: 4, False: 18.3k]
  ------------------
 1903|      4|            {
 1904|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1905|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1906|      4|            }
 1907|  18.3k|        }
_ZN3dlx4impl2SDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1911|  24.3k|        {
 1912|  24.3k|            auto optional_address = GetLoadStoreAddress(processor, arg1);
 1913|       |
 1914|  24.3k|            if (!optional_address.has_value())
  ------------------
  |  Branch (1914:17): [True: 2, False: 24.3k]
  ------------------
 1915|      2|            {
 1916|      2|                processor.Raise(Exception::AddressOutOfBounds);
 1917|      2|                return;
 1918|      2|            }
 1919|       |
 1920|  24.3k|            phi::i32 address = optional_address.value();
 1921|       |
 1922|  24.3k|            const auto& src_reg = arg2.AsRegisterFloat();
 1923|       |
 1924|  24.3k|            phi::f64 value = processor.FloatRegisterGetDoubleValue(src_reg.register_id);
 1925|       |
 1926|  24.3k|            phi::boolean success = processor.GetMemory().StoreDouble(
 1927|  24.3k|                    static_cast<phi::size_t>(address.unsafe()), value);
 1928|       |
 1929|  24.3k|            if (!success)
  ------------------
  |  Branch (1929:17): [True: 4, False: 24.3k]
  ------------------
 1930|      4|            {
 1931|      4|                processor.Raise(Exception::AddressOutOfBounds);
 1932|      4|                DLX_ERROR("Failed to store float at address {}", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1933|      4|            }
 1934|  24.3k|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  13.7k|        {
 1939|  13.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  13.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  13.7k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  13.7k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  13.7k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  18.2k|        {
 1950|  18.2k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  18.2k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  18.2k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  18.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  18.2k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  13.8k|        {
 1988|  13.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  13.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  13.8k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  13.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  13.8k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  14.0k|        {
 1999|  14.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  14.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  14.0k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  14.0k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2004|  14.0k|            const float        converted_value_float =
 2005|  14.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  14.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  14.0k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  24.3k|        {
 2013|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  24.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  24.3k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  24.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  18.7k|        {
 2025|  18.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  18.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  18.7k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  18.7k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2030|  18.7k|            const float        converted_value_float =
 2031|  18.7k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  18.7k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  18.7k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  30.9k|        {
 2039|  30.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  30.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  30.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  30.9k|            const phi::int32_t converted_value_int =
 2044|  30.9k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2045|  30.9k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  30.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  30.9k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  24.3k|        {
 2053|  24.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  24.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  24.3k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  24.3k|            const phi::int32_t converted_value_int =
 2058|  24.3k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2059|  24.3k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  24.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  24.3k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      2|        {
 2073|      2|            processor.Raise(Exception::Halt);
 2074|      2|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|  2.07M|        {
 2079|       |            /* Do nothing */
 2080|  2.07M|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   160k|    {
  169|   160k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   160k|        SafeWriteInteger(processor, dest_reg, res);
  172|   160k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|  1.05M|    {
  124|  1.05M|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|  1.05M|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|  1.05M|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 71.4k, False: 981k]
  ------------------
  129|  71.4k|        {
  130|  71.4k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  71.4k|            value = max + (value % (min - 1));
  133|  71.4k|        }
  134|       |        // Check for overflow
  135|   981k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 95.0k, False: 886k]
  ------------------
  136|  95.0k|        {
  137|  95.0k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  95.0k|            value = min + (value % (max + 1));
  140|  95.0k|        }
  141|       |
  142|  1.05M|        PHI_ASSERT(value >= min);
  143|  1.05M|        PHI_ASSERT(value <= max);
  144|       |
  145|  1.05M|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<phi::int32_t>(value.unsafe()));
  146|  1.05M|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  71.0k|    {
  177|  71.0k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  71.0k|        SafeWriteInteger(processor, dest_reg, res);
  180|  71.0k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   256k|    {
  151|   256k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   256k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 27.5k, False: 229k]
  ------------------
  155|  27.5k|        {
  156|  27.5k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  27.5k|            value %= max + 1u;
  159|  27.5k|        }
  160|       |
  161|   256k|        PHI_ASSERT(value <= max);
  162|       |
  163|   256k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<phi::uint32_t>(value.unsafe()));
  164|   256k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|   662k|    {
  185|   662k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|   662k|        SafeWriteInteger(processor, dest_reg, res);
  188|   662k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|  78.5k|    {
  193|  78.5k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|  78.5k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 26.3k, False: 52.2k]
  ------------------
  196|  26.3k|        {
  197|  26.3k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  26.3k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  26.3k|            SafeWriteInteger(processor, dest_reg, res);
  201|  26.3k|            return;
  202|  26.3k|        }
  203|       |
  204|  52.2k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|  52.2k|        SafeWriteInteger(processor, dest_reg, res);
  207|  52.2k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|   185k|    {
  212|   185k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|   185k|        SafeWriteInteger(processor, dest_reg, res);
  215|   185k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  73.5k|    {
  220|  73.5k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  73.5k|        SafeWriteInteger(processor, dest_reg, res);
  223|  73.5k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  44.0k|    {
  228|  44.0k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 44.0k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  44.0k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  44.0k|        SafeWriteInteger(processor, dest_reg, res);
  237|  44.0k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  33.8k|    {
  242|  33.8k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 3, False: 33.7k]
  ------------------
  243|      3|        {
  244|      3|            processor.Raise(Exception::DivideByZero);
  245|      3|            return;
  246|      3|        }
  247|       |
  248|  33.7k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  33.7k|        SafeWriteInteger(processor, dest_reg, res);
  251|  33.7k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   209k|    {
  325|   209k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 47.9k, False: 161k]
  ------------------
  326|  47.9k|        {
  327|  47.9k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  47.9k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  47.9k|            return;
  332|  47.9k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   161k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 51.9k, False: 109k]
  ------------------
  336|  51.9k|        {
  337|  51.9k|            processor.Raise(Exception::BadShift);
  338|  51.9k|            return;
  339|  51.9k|        }
  340|       |
  341|   109k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   109k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   109k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|   142k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|   142k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 34.8k, False: 107k]
  ------------------
  258|  34.8k|        {
  259|  34.8k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  34.8k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  34.8k|            return;
  264|  34.8k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|   107k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 48.1k, False: 59.3k]
  ------------------
  268|  48.1k|        {
  269|  48.1k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  48.1k|            return;
  271|  48.1k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  59.3k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 36.7k, False: 22.6k]
  ------------------
  275|  36.7k|        {
  276|  36.7k|            processor.Raise(Exception::BadShift);
  277|  36.7k|            return;
  278|  36.7k|        }
  279|       |
  280|  22.6k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  22.6k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  22.6k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  22.6k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  22.6k|    {
   29|  22.6k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  22.6k|        return value & ~(-1 << (32 - n));
   32|  22.6k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   156k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   156k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 54.9k, False: 101k]
  ------------------
  292|  54.9k|        {
  293|  54.9k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  54.9k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 22.0k, False: 32.8k]
  ------------------
  297|  22.0k|            {
  298|       |                // Set every byte to 1
  299|  22.0k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  22.0k|            }
  301|  32.8k|            else
  302|  32.8k|            {
  303|       |                // Set every byte to 0
  304|  32.8k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  32.8k|            }
  306|  54.9k|            return;
  307|  54.9k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|   101k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 41.4k, False: 59.8k]
  ------------------
  311|  41.4k|        {
  312|  41.4k|            processor.Raise(Exception::BadShift);
  313|  41.4k|            return;
  314|  41.4k|        }
  315|       |
  316|  59.8k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  59.8k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  59.8k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|   464k|    {
   38|       |        // Lookup the label
   39|   464k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgram();
   40|   464k|        PHI_ASSERT(program != nullptr);
   41|   464k|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|   464k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 146, False: 464k]
  ------------------
   44|    146|        {
   45|    146|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    146|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    146|            processor.Raise(Exception::UnknownLabel);
   47|    146|            return;
   48|    146|        }
   49|       |
   50|   464k|        const phi::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|   464k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|   464k|        processor.SetNextProgramCounter(jump_point);
   55|   464k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|  1.94M|    {
   59|  1.94M|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|  1.94M|        phi::u32 max_address =
   62|  1.94M|                static_cast<phi::uint32_t>(processor.GetCurrentProgram()->m_Instructions.size());
   63|  1.94M|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 34, False: 1.94M]
  ------------------
   64|     34|        {
   65|     34|            processor.Raise(Exception::AddressOutOfBounds);
   66|     34|            return;
   67|     34|        }
   68|       |
   69|  1.94M|        processor.SetNextProgramCounter(address.unsafe());
   70|  1.94M|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|   340k|    {
  100|   340k|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 340k, False: 5]
  ------------------
  101|   340k|        {
  102|   340k|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|   340k|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 16, False: 340k]
  ------------------
  105|     16|            {
  106|     16|                return {};
  107|     16|            }
  108|       |
  109|   340k|            return imm_value.signed_value;
  110|   340k|        }
  111|       |
  112|      5|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      5|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      5|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|   340k|    }
InstructionImplementation.cpp:_ZN3dlxL28CalculateDisplacementAddressERNS_9ProcessorERKNS_19InstructionArgument19AddressDisplacementE:
   77|      5|    {
   78|      5|        phi::i32 register_value = processor.IntRegisterGetSignedValue(adr_displacement.register_id);
   79|       |
   80|      5|        phi::i32 address = adr_displacement.displacement + register_value;
   81|       |
   82|      5|        if (address < 0)
  ------------------
  |  Branch (82:13): [True: 1, False: 4]
  ------------------
   83|      1|        {
   84|      1|            processor.Raise(Exception::AddressOutOfBounds);
   85|      1|            return {};
   86|      1|        }
   87|       |
   88|      4|        return address;
   89|      5|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  8.53M|    {
   12|  8.53M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  8.53M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  8.53M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  8.53M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  8.53M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  8.53M|                   "Unexpected argument type for arg1");
   22|  8.53M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  8.53M|                   "Unexpected argument type for arg2");
   24|  8.53M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  8.53M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  8.53M|        m_Executor(processor, arg1, arg2, arg3);
   29|  8.53M|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  76.0k|    {
  450|  76.0k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  76.0k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   15|  2.07M|    {
   16|  2.07M|        m_ValueSigned = val;
   17|  2.07M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   20|   253k|    {
   21|   253k|        m_ValueUnsigned = val;
   22|   253k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   25|  4.08M|    {
   26|  4.08M|        return m_ValueSigned;
   27|  4.08M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   30|  2.73M|    {
   31|  2.73M|        return m_ValueUnsigned;
   32|  2.73M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   35|  2.98M|    {
   36|  2.98M|        return m_IsReadOnly;
   37|  2.98M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|  10.5k|    {
   18|  10.5k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 2, False: 10.5k]
  ------------------
   19|      2|        {
   20|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|      2|            return {};
   22|      2|        }
   23|       |
   24|  10.5k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|  10.5k|        return m_Values[raw_address].signed_value;
   27|  10.5k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|  19.6k|    {
   31|  19.6k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 2, False: 19.6k]
  ------------------
   32|      2|        {
   33|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|      2|            return {};
   35|      2|        }
   36|       |
   37|  19.6k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|  19.6k|        return m_Values[raw_address].unsigned_value;
   39|  19.6k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|  24.3k|    {
   43|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 3, False: 24.3k]
  ------------------
   44|      3|        {
   45|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|      3|            return {};
   47|      3|        }
   48|       |
   49|  24.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|  24.3k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 1, False: 24.3k]
  ------------------
   52|      1|        {
   53|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|      1|            return {};
   55|      1|        }
   56|       |
   57|  24.3k|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|  24.3k|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|  19.4k|    {
   62|  19.4k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 4, False: 19.4k]
  ------------------
   63|      4|        {
   64|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|      4|            return {};
   66|      4|        }
   67|       |
   68|  19.4k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|  19.4k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 1, False: 19.4k]
  ------------------
   71|      1|        {
   72|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|      1|            return {};
   74|      1|        }
   75|       |
   76|  19.4k|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|  19.4k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|  20.3k|    {
   81|  20.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 2, False: 20.3k]
  ------------------
   82|      2|        {
   83|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|      2|            return {};
   85|      2|        }
   86|       |
   87|  20.3k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|  20.3k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 1, False: 20.3k]
  ------------------
   90|      1|        {
   91|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|      1|            return {};
   93|      1|        }
   94|       |
   95|  20.3k|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|  20.3k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|  11.7k|    {
  100|  11.7k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 2, False: 11.7k]
  ------------------
  101|      2|        {
  102|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      2|            return {};
  104|      2|        }
  105|       |
  106|  11.7k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|  11.7k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 1, False: 11.7k]
  ------------------
  109|      1|        {
  110|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|      1|            return {};
  112|      1|        }
  113|       |
  114|  11.7k|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|  11.7k|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|  14.0k|    {
  119|  14.0k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 4, False: 14.0k]
  ------------------
  120|      4|        {
  121|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|      4|            return {};
  123|      4|        }
  124|       |
  125|  14.0k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|  14.0k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 1, False: 14.0k]
  ------------------
  128|      1|        {
  129|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|      1|            return {};
  131|      1|        }
  132|       |
  133|  14.0k|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|  14.0k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|  24.9k|    {
  138|  24.9k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 4, False: 24.9k]
  ------------------
  139|      4|        {
  140|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|      4|            return {};
  142|      4|        }
  143|       |
  144|  24.9k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|  24.9k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 1, False: 24.9k]
  ------------------
  147|      1|        {
  148|      1|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|      1|            return {};
  150|      1|        }
  151|       |
  152|  24.9k|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|  24.9k|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  156|  36.0k|    {
  157|  36.0k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (157:13): [True: 5, False: 36.0k]
  ------------------
  158|      5|        {
  159|      5|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      5|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  160|      5|            return false;
  161|      5|        }
  162|       |
  163|  36.0k|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  164|  36.0k|        return true;
  165|  36.0k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  168|  24.3k|    {
  169|  24.3k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (169:13): [True: 4, False: 24.3k]
  ------------------
  170|      4|        {
  171|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  172|      4|            return false;
  173|      4|        }
  174|       |
  175|  24.3k|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  176|  24.3k|        return true;
  177|  24.3k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  180|  24.2k|    {
  181|  24.2k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (181:13): [True: 3, False: 24.2k]
  ------------------
  182|      3|        {
  183|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  184|      3|            return false;
  185|      3|        }
  186|       |
  187|  24.2k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  188|  24.2k|        *reinterpret_cast<phi::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  189|       |
  190|  24.2k|        return true;
  191|  24.2k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  194|  24.3k|    {
  195|  24.3k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (195:13): [True: 3, False: 24.3k]
  ------------------
  196|      3|        {
  197|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  198|      3|            return false;
  199|      3|        }
  200|       |
  201|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  202|  24.3k|        *reinterpret_cast<phi::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  203|       |
  204|  24.3k|        return true;
  205|  24.3k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  208|  25.7k|    {
  209|  25.7k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (209:13): [True: 2, False: 25.7k]
  ------------------
  210|      2|        {
  211|      2|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  212|      2|            return false;
  213|      2|        }
  214|       |
  215|  25.7k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  216|  25.7k|        *reinterpret_cast<phi::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  217|       |
  218|  25.7k|        return true;
  219|  25.7k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  222|  17.9k|    {
  223|  17.9k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (223:13): [True: 3, False: 17.9k]
  ------------------
  224|      3|        {
  225|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  226|      3|            return false;
  227|      3|        }
  228|       |
  229|  17.9k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  230|  17.9k|        *reinterpret_cast<phi::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  231|       |
  232|  17.9k|        return true;
  233|  17.9k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  236|  18.3k|    {
  237|  18.3k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (237:13): [True: 4, False: 18.3k]
  ------------------
  238|      4|        {
  239|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  240|      4|            return false;
  241|      4|        }
  242|       |
  243|  18.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  244|  18.3k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  245|       |
  246|  18.3k|        return true;
  247|  18.3k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  250|  24.3k|    {
  251|  24.3k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (251:13): [True: 4, False: 24.3k]
  ------------------
  252|      4|        {
  253|      4|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      4|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  254|      4|            return false;
  255|      4|        }
  256|       |
  257|  24.3k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  258|  24.3k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  259|       |
  260|  24.3k|        return true;
  261|  24.3k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|   340k|    {
  265|       |        // Cannot access anything before the starting address
  266|   340k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 35, False: 340k]
  ------------------
  267|     35|        {
  268|     35|            return false;
  269|     35|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|   340k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 0, False: 340k]
  ------------------
  273|   340k|                                             address.unsafe(), size.unsafe()))
  274|      0|        {
  275|      0|            return false;
  276|      0|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|   340k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 0, False: 340k]
  ------------------
  280|   340k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|      0|        {
  282|      0|            return false;
  283|      0|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|   340k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 16, False: 340k]
  ------------------
  287|     16|        {
  288|     16|            return false;
  289|     16|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|   340k|        return true;
  293|   340k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  297|   114k|    {
  298|   114k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (298:16): [True: 114k, False: 0]
  |  Branch (298:30): [True: 114k, False: 6]
  ------------------
  299|   114k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  7.90k|    {
  303|  7.90k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 7.90M, False: 7.90k]
  ------------------
  304|  7.90M|        {
  305|  7.90M|            val.signed_value = 0;
  306|  7.90M|        }
  307|  7.90k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   578k|    {
   22|   578k|        switch (token.length().unsafe())
   23|   578k|        {
   24|       |            // 1 character OpCodes
   25|  75.5k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 75.5k, False: 502k]
  ------------------
   26|  75.5k|                const char c1 = token[0u];
   27|       |
   28|  75.5k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 29.8k, False: 45.7k]
  ------------------
   29|  29.8k|                {
   30|  29.8k|                    return OpCode::J;
   31|  29.8k|                }
   32|  45.7k|                break;
   33|  75.5k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  69.7k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 69.7k, False: 508k]
  ------------------
   37|  69.7k|                const char c1 = token[0u];
   38|  69.7k|                const char c2 = token[1u];
   39|       |
   40|  69.7k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 40.4k, False: 29.2k]
  ------------------
   41|  69.7k|                {
   42|  2.12k|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 2.12k, False: 67.6k]
  ------------------
   43|  4.37k|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 2.25k, False: 67.5k]
  ------------------
   44|  4.37k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 1.99k, False: 2.37k]
  ------------------
   45|  1.99k|                        {
   46|  1.99k|                            return OpCode::JR;
   47|  1.99k|                        }
   48|  2.37k|                        break;
   49|       |
   50|  3.93k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 3.93k, False: 65.8k]
  ------------------
   51|  6.33k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 2.39k, False: 67.3k]
  ------------------
   52|  6.33k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 1.71k, False: 4.61k]
  ------------------
   53|  6.33k|                        {
   54|    874|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 874, False: 5.45k]
  ------------------
   55|  1.07k|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 202, False: 6.13k]
  ------------------
   56|  1.07k|                                return OpCode::LB;
   57|    787|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 787, False: 5.54k]
  ------------------
   58|    996|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 209, False: 6.12k]
  ------------------
   59|    996|                                return OpCode::LD;
   60|    359|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 359, False: 5.97k]
  ------------------
   61|    820|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 461, False: 5.87k]
  ------------------
   62|    820|                                return OpCode::LF;
   63|    347|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 347, False: 5.98k]
  ------------------
   64|    562|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 215, False: 6.11k]
  ------------------
   65|    562|                                return OpCode::LH;
   66|    958|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 958, False: 5.37k]
  ------------------
   67|  1.16k|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 205, False: 6.12k]
  ------------------
   68|  1.16k|                                return OpCode::LW;
   69|  6.33k|                        }
   70|  1.71k|                        break;
   71|  2.76k|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 2.76k, False: 66.9k]
  ------------------
   72|  4.16k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 1.40k, False: 68.3k]
  ------------------
   73|  4.16k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 983, False: 3.18k]
  ------------------
   74|    983|                        {
   75|    983|                            return OpCode::OR;
   76|    983|                        }
   77|  3.18k|                        break;
   78|  10.9k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 10.9k, False: 58.8k]
  ------------------
   79|  14.4k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 3.51k, False: 66.2k]
  ------------------
   80|  14.4k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 3.26k, False: 11.1k]
  ------------------
   81|  14.4k|                        {
   82|  1.30k|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 1.30k, False: 13.1k]
  ------------------
   83|  2.82k|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 1.51k, False: 12.9k]
  ------------------
   84|  2.82k|                                return OpCode::SB;
   85|    210|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 210, False: 14.2k]
  ------------------
   86|  2.55k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 2.34k, False: 12.0k]
  ------------------
   87|  2.55k|                                return OpCode::SD;
   88|    725|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 725, False: 13.6k]
  ------------------
   89|  2.73k|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 2.00k, False: 12.4k]
  ------------------
   90|  2.73k|                                return OpCode::SF;
   91|    971|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 971, False: 13.4k]
  ------------------
   92|  1.84k|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 874, False: 13.5k]
  ------------------
   93|  1.84k|                                return OpCode::SH;
   94|    343|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 343, False: 14.0k]
  ------------------
   95|  1.20k|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 859, False: 13.5k]
  ------------------
   96|  1.20k|                                return OpCode::SW;
   97|  14.4k|                        }
   98|  3.26k|                        break;
   99|  69.7k|                }
  100|  51.0k|                break;
  101|  69.7k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|   128k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 128k, False: 449k]
  ------------------
  105|   128k|                const char c1 = token[0u];
  106|   128k|                const char c2 = token[1u];
  107|   128k|                const char c3 = token[2u];
  108|       |
  109|   128k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 32.7k, False: 95.7k]
  ------------------
  110|   128k|                {
  111|  2.24k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 2.24k, False: 126k]
  ------------------
  112|  5.85k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 3.60k, False: 124k]
  ------------------
  113|  5.85k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 1.85k, False: 3.99k]
  |  Branch (113:29): [True: 1.35k, False: 4.49k]
  |  Branch (113:45): [True: 1.35k, False: 497]
  ------------------
  114|  1.35k|                        {
  115|  1.35k|                            return OpCode::ADD;
  116|  1.35k|                        }
  117|  4.49k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 3.83k, False: 661]
  |  Branch (117:34): [True: 1.69k, False: 2.80k]
  |  Branch (117:50): [True: 1.69k, False: 2.14k]
  ------------------
  118|  1.69k|                        {
  119|  1.69k|                            return OpCode::AND;
  120|  1.69k|                        }
  121|  2.80k|                        break;
  122|       |
  123|  2.80k|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 963, False: 127k]
  ------------------
  124|  4.83k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 3.86k, False: 124k]
  ------------------
  125|  4.83k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 2.85k, False: 1.97k]
  |  Branch (125:29): [True: 1.34k, False: 3.48k]
  |  Branch (125:45): [True: 1.34k, False: 1.51k]
  ------------------
  126|  1.34k|                        {
  127|  1.34k|                            return OpCode::DIV;
  128|  1.34k|                        }
  129|  3.48k|                        break;
  130|       |
  131|  3.48k|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 501, False: 127k]
  ------------------
  132|  4.53k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 4.03k, False: 124k]
  ------------------
  133|  4.53k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 3.86k, False: 673]
  ------------------
  134|  3.86k|                        {
  135|  3.86k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 2.06k, False: 1.79k]
  ------------------
  136|  2.06k|                            {
  137|  2.06k|                                return OpCode::EQD;
  138|  2.06k|                            }
  139|  1.79k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 1.42k, False: 370]
  ------------------
  140|  1.42k|                            {
  141|  1.42k|                                return OpCode::EQF;
  142|  1.42k|                            }
  143|  3.86k|                        }
  144|  1.04k|                        break;
  145|       |
  146|  3.36k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 3.36k, False: 125k]
  ------------------
  147|  7.14k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 3.77k, False: 124k]
  ------------------
  148|  7.14k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 2.05k, False: 5.09k]
  ------------------
  149|  2.05k|                        {
  150|  2.05k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 1.04k, False: 1.00k]
  ------------------
  151|  1.04k|                            {
  152|  1.04k|                                return OpCode::GED;
  153|  1.04k|                            }
  154|  1.00k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 658, False: 346]
  ------------------
  155|    658|                            {
  156|    658|                                return OpCode::GEF;
  157|    658|                            }
  158|  2.05k|                        }
  159|  5.09k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 4.55k, False: 542]
  ------------------
  160|  4.55k|                        {
  161|  4.55k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 1.68k, False: 2.86k]
  ------------------
  162|  1.68k|                            {
  163|  1.68k|                                return OpCode::GTD;
  164|  1.68k|                            }
  165|  2.86k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 2.49k, False: 374]
  ------------------
  166|  2.49k|                            {
  167|  2.49k|                                return OpCode::GTF;
  168|  2.49k|                            }
  169|  2.86k|                        }
  170|  1.26k|                        break;
  171|       |
  172|  1.62k|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 1.62k, False: 126k]
  ------------------
  173|  2.40k|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 780, False: 127k]
  ------------------
  174|  2.40k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 1.55k, False: 854]
  |  Branch (174:29): [True: 1.01k, False: 1.38k]
  |  Branch (174:45): [True: 1.01k, False: 534]
  ------------------
  175|  1.01k|                        {
  176|  1.01k|                            return OpCode::JAL;
  177|  1.01k|                        }
  178|  1.38k|                        break;
  179|       |
  180|  14.5k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 14.5k, False: 113k]
  ------------------
  181|  20.0k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 5.50k, False: 122k]
  ------------------
  182|  20.0k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 1.49k, False: 18.6k]
  ------------------
  183|  20.0k|                        {
  184|  3.01k|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 3.01k, False: 17.0k]
  ------------------
  185|  3.34k|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 333, False: 19.7k]
  ------------------
  186|  3.34k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 2.19k, False: 1.15k]
  ------------------
  187|  2.19k|                                {
  188|  2.19k|                                    return OpCode::LBU;
  189|  2.19k|                                }
  190|  1.15k|                                break;
  191|       |
  192|  1.15k|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 902, False: 19.1k]
  ------------------
  193|  2.71k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 1.80k, False: 18.2k]
  ------------------
  194|  2.71k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 1.44k, False: 1.26k]
  ------------------
  195|  1.44k|                                {
  196|  1.44k|                                    return OpCode::LED;
  197|  1.44k|                                }
  198|  1.26k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 669, False: 596]
  ------------------
  199|    669|                                {
  200|    669|                                    return OpCode::LEF;
  201|    669|                                }
  202|    596|                                break;
  203|       |
  204|    813|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 813, False: 19.2k]
  ------------------
  205|  3.52k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 2.71k, False: 17.3k]
  ------------------
  206|  3.52k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 1.04k, False: 2.48k]
  ------------------
  207|  1.04k|                                {
  208|  1.04k|                                    return OpCode::LHI;
  209|  1.04k|                                }
  210|  2.48k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 1.94k, False: 537]
  ------------------
  211|  1.94k|                                {
  212|  1.94k|                                    return OpCode::LHU;
  213|  1.94k|                                }
  214|    537|                                break;
  215|       |
  216|  5.54k|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 5.54k, False: 14.5k]
  ------------------
  217|  8.03k|                            case 't':
  ------------------
  |  Branch (217:29): [True: 2.48k, False: 17.6k]
  ------------------
  218|  8.03k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 6.41k, False: 1.62k]
  ------------------
  219|  6.41k|                                {
  220|  6.41k|                                    return OpCode::LTD;
  221|  6.41k|                                }
  222|  1.62k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 1.18k, False: 437]
  ------------------
  223|  1.18k|                                {
  224|  1.18k|                                    return OpCode::LTF;
  225|  1.18k|                                }
  226|    437|                                break;
  227|       |
  228|    622|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 622, False: 19.4k]
  ------------------
  229|    992|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 370, False: 19.7k]
  ------------------
  230|    992|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 785, False: 207]
  ------------------
  231|    785|                                {
  232|    785|                                    return OpCode::LWU;
  233|    785|                                }
  234|    207|                                break;
  235|  20.0k|                        }
  236|  4.41k|                        break;
  237|       |
  238|  6.90k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 6.90k, False: 121k]
  ------------------
  239|  7.73k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 828, False: 127k]
  ------------------
  240|  7.73k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 2.69k, False: 5.03k]
  ------------------
  241|  2.69k|                        {
  242|  2.69k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 1.07k, False: 1.61k]
  ------------------
  243|  1.07k|                            {
  244|  1.07k|                                return OpCode::NED;
  245|  1.07k|                            }
  246|  1.61k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 787, False: 831]
  ------------------
  247|    787|                            {
  248|    787|                                return OpCode::NEF;
  249|    787|                            }
  250|  2.69k|                        }
  251|  5.03k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 4.65k, False: 381]
  |  Branch (251:34): [True: 4.46k, False: 577]
  |  Branch (251:50): [True: 4.46k, False: 196]
  ------------------
  252|  4.46k|                        {
  253|  4.46k|                            return OpCode::NOP;
  254|  4.46k|                        }
  255|       |
  256|  1.40k|                        break;
  257|       |
  258|  2.98k|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 2.98k, False: 125k]
  ------------------
  259|  4.88k|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 1.89k, False: 126k]
  ------------------
  260|  4.88k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 3.00k, False: 1.88k]
  |  Branch (260:29): [True: 2.06k, False: 2.81k]
  |  Branch (260:45): [True: 2.06k, False: 931]
  ------------------
  261|  2.06k|                        {
  262|  2.06k|                            return OpCode::ORI;
  263|  2.06k|                        }
  264|  2.81k|                        break;
  265|       |
  266|  13.0k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 13.0k, False: 115k]
  ------------------
  267|  36.4k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 23.4k, False: 105k]
  ------------------
  268|  36.4k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 1.76k, False: 34.7k]
  ------------------
  269|  36.4k|                        {
  270|    419|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 419, False: 36.0k]
  ------------------
  271|  1.66k|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 1.24k, False: 35.2k]
  ------------------
  272|  1.66k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 809, False: 853]
  ------------------
  273|    809|                                {
  274|    809|                                    return OpCode::SBU;
  275|    809|                                }
  276|    853|                                break;
  277|       |
  278|    853|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 787, False: 35.7k]
  ------------------
  279|  1.28k|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 496, False: 35.9k]
  ------------------
  280|  1.28k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 668, False: 615]
  ------------------
  281|    668|                                {
  282|    668|                                    return OpCode::SEQ;
  283|    668|                                }
  284|    615|                                break;
  285|       |
  286|    662|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 662, False: 35.8k]
  ------------------
  287|  2.40k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 1.74k, False: 34.7k]
  ------------------
  288|  2.40k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 1.17k, False: 1.22k]
  ------------------
  289|  1.17k|                                {
  290|  1.17k|                                    return OpCode::SGE;
  291|  1.17k|                                }
  292|  1.22k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 570, False: 657]
  ------------------
  293|    570|                                {
  294|    570|                                    return OpCode::SGT;
  295|    570|                                }
  296|    657|                                break;
  297|       |
  298|  1.41k|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 1.41k, False: 35.0k]
  ------------------
  299|  2.96k|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 1.54k, False: 34.9k]
  ------------------
  300|  2.96k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 1.96k, False: 998]
  ------------------
  301|  1.96k|                                {
  302|  1.96k|                                    return OpCode::SHU;
  303|  1.96k|                                }
  304|    998|                                break;
  305|       |
  306|  4.87k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 4.87k, False: 31.6k]
  ------------------
  307|  8.03k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 3.16k, False: 33.3k]
  ------------------
  308|  8.03k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 636, False: 7.39k]
  ------------------
  309|  8.03k|                                {
  310|    354|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 354, False: 7.68k]
  ------------------
  311|  1.77k|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 1.41k, False: 6.61k]
  ------------------
  312|  1.77k|                                        return OpCode::SLA;
  313|       |
  314|    456|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 456, False: 7.57k]
  ------------------
  315|  2.49k|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 2.03k, False: 6.00k]
  ------------------
  316|  2.49k|                                        return OpCode::SLE;
  317|       |
  318|    663|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 663, False: 7.37k]
  ------------------
  319|  2.20k|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 1.54k, False: 6.49k]
  ------------------
  320|  2.20k|                                        return OpCode::SLL;
  321|       |
  322|    326|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 326, False: 7.70k]
  ------------------
  323|    933|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 607, False: 7.42k]
  ------------------
  324|    933|                                        return OpCode::SLT;
  325|  8.03k|                                }
  326|    636|                                break;
  327|       |
  328|    817|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 817, False: 35.6k]
  ------------------
  329|  2.48k|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 1.66k, False: 34.8k]
  ------------------
  330|  2.48k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 537, False: 1.94k]
  ------------------
  331|    537|                                {
  332|    537|                                    return OpCode::SNE;
  333|    537|                                }
  334|  1.94k|                                break;
  335|       |
  336|  7.96k|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 7.96k, False: 28.5k]
  ------------------
  337|  9.18k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 1.21k, False: 35.2k]
  ------------------
  338|  9.18k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 8.33k, False: 844]
  ------------------
  339|  8.33k|                                {
  340|  8.33k|                                    return OpCode::SRA;
  341|  8.33k|                                }
  342|    844|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 429, False: 415]
  ------------------
  343|    429|                                {
  344|    429|                                    return OpCode::SRL;
  345|    429|                                }
  346|    415|                                break;
  347|       |
  348|  4.02k|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 4.02k, False: 32.4k]
  ------------------
  349|  4.54k|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 521, False: 35.9k]
  ------------------
  350|  4.54k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 4.13k, False: 411]
  ------------------
  351|  4.13k|                                {
  352|  4.13k|                                    return OpCode::SUB;
  353|  4.13k|                                }
  354|    411|                                break;
  355|       |
  356|  1.12k|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 1.12k, False: 35.3k]
  ------------------
  357|  2.17k|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 1.04k, False: 35.4k]
  ------------------
  358|  2.17k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 1.04k, False: 1.12k]
  ------------------
  359|  1.04k|                                {
  360|  1.04k|                                    return OpCode::SWU;
  361|  1.04k|                                }
  362|  1.12k|                                break;
  363|  36.4k|                        }
  364|       |
  365|  10.1k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 681, False: 127k]
  ------------------
  366|  11.1k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 1.04k, False: 127k]
  ------------------
  367|  11.1k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 1.52k, False: 9.62k]
  |  Branch (367:29): [True: 516, False: 10.6k]
  |  Branch (367:45): [True: 516, False: 1.01k]
  ------------------
  368|    516|                        {
  369|    516|                            return OpCode::XOR;
  370|    516|                        }
  371|  10.6k|                        break;
  372|   128k|                }
  373|  62.0k|                break;
  374|   128k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|   142k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 142k, False: 435k]
  ------------------
  378|   142k|                const char c1 = token[0u];
  379|   142k|                const char c2 = token[1u];
  380|   142k|                const char c3 = token[2u];
  381|   142k|                const char c4 = token[3u];
  382|       |
  383|   142k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 20.1k, False: 122k]
  ------------------
  384|   142k|                {
  385|  1.38k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 1.38k, False: 140k]
  ------------------
  386|  15.9k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 14.5k, False: 127k]
  ------------------
  387|  15.9k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 1.52k, False: 14.4k]
  ------------------
  388|  15.9k|                        {
  389|  9.11k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 9.11k, False: 6.83k]
  ------------------
  390|  10.8k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 1.76k, False: 14.1k]
  ------------------
  391|  10.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 9.18k, False: 1.69k]
  ------------------
  392|  9.18k|                                {
  393|  9.18k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 1.41k, False: 7.77k]
  ------------------
  394|  9.18k|                                    {
  395|    728|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 728, False: 8.45k]
  ------------------
  396|  2.93k|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 2.20k, False: 6.97k]
  ------------------
  397|  2.93k|                                            return OpCode::ADDD;
  398|       |
  399|    553|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 553, False: 8.63k]
  ------------------
  400|  3.06k|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 2.51k, False: 6.67k]
  ------------------
  401|  3.06k|                                            return OpCode::ADDF;
  402|       |
  403|    451|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 451, False: 8.73k]
  ------------------
  404|    835|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 384, False: 8.80k]
  ------------------
  405|    835|                                            return OpCode::ADDI;
  406|       |
  407|    476|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 476, False: 8.70k]
  ------------------
  408|    936|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 460, False: 8.72k]
  ------------------
  409|    936|                                            return OpCode::ADDU;
  410|  9.18k|                                    }
  411|  9.18k|                                }
  412|  3.10k|                                break;
  413|       |
  414|  3.10k|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 2.81k, False: 13.1k]
  ------------------
  415|  3.54k|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 732, False: 15.2k]
  ------------------
  416|  3.54k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 2.79k, False: 745]
  |  Branch (416:37): [True: 2.07k, False: 1.47k]
  |  Branch (416:53): [True: 2.07k, False: 729]
  ------------------
  417|  2.07k|                                {
  418|  2.07k|                                    return OpCode::ANDI;
  419|  2.07k|                                }
  420|       |
  421|  1.47k|                                break;
  422|  15.9k|                        }
  423|  6.10k|                        break;
  424|       |
  425|  6.10k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 4.33k, False: 137k]
  ------------------
  426|  11.5k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 7.25k, False: 134k]
  ------------------
  427|  11.5k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 497, False: 11.0k]
  ------------------
  428|  11.5k|                        {
  429|  1.99k|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 1.99k, False: 9.60k]
  ------------------
  430|  2.99k|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 996, False: 10.6k]
  ------------------
  431|  2.99k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 1.93k, False: 1.05k]
  |  Branch (431:37): [True: 1.72k, False: 1.26k]
  |  Branch (431:53): [True: 1.72k, False: 205]
  ------------------
  432|  1.72k|                                {
  433|  1.72k|                                    return OpCode::BEQZ;
  434|  1.72k|                                }
  435|  1.26k|                                break;
  436|       |
  437|  1.29k|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 1.29k, False: 10.3k]
  ------------------
  438|  4.17k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 2.87k, False: 8.71k]
  ------------------
  439|  4.17k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 3.41k, False: 754]
  ------------------
  440|  3.41k|                                {
  441|  3.41k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 1.60k, False: 1.81k]
  ------------------
  442|  1.60k|                                    {
  443|  1.60k|                                        return OpCode::BFPF;
  444|  1.60k|                                    }
  445|  1.81k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 1.31k, False: 503]
  ------------------
  446|  1.31k|                                    {
  447|  1.31k|                                        return OpCode::BFPT;
  448|  1.31k|                                    }
  449|  3.41k|                                }
  450|  1.25k|                                break;
  451|       |
  452|  2.80k|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 2.80k, False: 8.78k]
  ------------------
  453|  3.93k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 1.12k, False: 10.4k]
  ------------------
  454|  3.93k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 2.66k, False: 1.27k]
  |  Branch (454:37): [True: 1.05k, False: 2.88k]
  |  Branch (454:53): [True: 1.05k, False: 1.61k]
  ------------------
  455|  1.05k|                                {
  456|  1.05k|                                    return OpCode::BNEZ;
  457|  1.05k|                                }
  458|  11.5k|                        }
  459|  5.89k|                        break;
  460|       |
  461|  5.89k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 3.12k, False: 139k]
  ------------------
  462|  12.7k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 9.66k, False: 132k]
  ------------------
  463|  12.7k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 11.5k, False: 1.26k]
  |  Branch (463:29): [True: 10.4k, False: 2.29k]
  |  Branch (463:45): [True: 10.4k, False: 1.03k]
  ------------------
  464|  10.4k|                        {
  465|  10.4k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 1.45k, False: 9.03k]
  ------------------
  466|  10.4k|                            {
  467|  2.49k|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 2.49k, False: 7.99k]
  ------------------
  468|  3.20k|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 706, False: 9.78k]
  ------------------
  469|  3.20k|                                    return OpCode::DIVD;
  470|       |
  471|    322|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 322, False: 10.1k]
  ------------------
  472|  1.66k|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 1.34k, False: 9.14k]
  ------------------
  473|  1.66k|                                    return OpCode::DIVF;
  474|       |
  475|  2.37k|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 2.37k, False: 8.11k]
  ------------------
  476|  2.71k|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 336, False: 10.1k]
  ------------------
  477|  2.71k|                                    return OpCode::DIVI;
  478|       |
  479|    748|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 748, False: 9.74k]
  ------------------
  480|  1.45k|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 707, False: 9.78k]
  ------------------
  481|  1.45k|                                    return OpCode::DIVU;
  482|  10.4k|                            }
  483|  10.4k|                        }
  484|  3.74k|                        break;
  485|       |
  486|  3.74k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 2.83k, False: 139k]
  ------------------
  487|  3.41k|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 586, False: 141k]
  ------------------
  488|  3.41k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 2.51k, False: 903]
  |  Branch (488:29): [True: 1.16k, False: 2.25k]
  |  Branch (488:45): [True: 2.30k, False: 212]
  |  Branch (488:61): [True: 1.16k, False: 1.14k]
  ------------------
  489|  1.16k|                        {
  490|  1.16k|                            return OpCode::HALT;
  491|  1.16k|                        }
  492|  2.25k|                        break;
  493|       |
  494|  2.25k|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 1.87k, False: 140k]
  ------------------
  495|  3.14k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 1.26k, False: 140k]
  ------------------
  496|  3.14k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 1.94k, False: 1.19k]
  |  Branch (496:29): [True: 788, False: 2.35k]
  |  Branch (496:45): [True: 1.43k, False: 514]
  |  Branch (496:61): [True: 788, False: 647]
  ------------------
  497|    788|                        {
  498|    788|                            return OpCode::JALR;
  499|    788|                        }
  500|  2.35k|                        break;
  501|       |
  502|  6.11k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 6.11k, False: 136k]
  ------------------
  503|  9.51k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 3.40k, False: 138k]
  ------------------
  504|  9.51k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 3.12k, False: 6.38k]
  |  Branch (504:29): [True: 2.62k, False: 6.89k]
  |  Branch (504:45): [True: 2.62k, False: 506]
  ------------------
  505|  2.62k|                        {
  506|  2.62k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 666, False: 1.95k]
  ------------------
  507|    666|                            {
  508|    666|                                return OpCode::MOVD;
  509|    666|                            }
  510|  1.95k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 1.56k, False: 396]
  ------------------
  511|  1.56k|                            {
  512|  1.56k|                                return OpCode::MOVF;
  513|  1.56k|                            }
  514|  2.62k|                        }
  515|  6.89k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 5.66k, False: 1.23k]
  |  Branch (515:34): [True: 3.19k, False: 3.70k]
  |  Branch (515:50): [True: 4.79k, False: 869]
  |  Branch (515:66): [True: 3.19k, False: 1.60k]
  ------------------
  516|  3.19k|                        {
  517|  3.19k|                            return OpCode::MULT;
  518|  3.19k|                        }
  519|  4.09k|                        break;
  520|       |
  521|  22.5k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 22.5k, False: 119k]
  ------------------
  522|  53.7k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 31.2k, False: 110k]
  ------------------
  523|  53.7k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 898, False: 52.8k]
  ------------------
  524|  53.7k|                        {
  525|  4.87k|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 4.87k, False: 48.8k]
  ------------------
  526|  8.48k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 3.61k, False: 50.1k]
  ------------------
  527|  8.48k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 7.81k, False: 672]
  ------------------
  528|  7.81k|                                {
  529|  7.81k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 2.83k, False: 4.98k]
  ------------------
  530|  2.83k|                                    {
  531|  2.83k|                                        return OpCode::SEQI;
  532|  2.83k|                                    }
  533|  4.98k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 3.35k, False: 1.62k]
  ------------------
  534|  3.35k|                                    {
  535|  3.35k|                                        return OpCode::SEQU;
  536|  3.35k|                                    }
  537|  7.81k|                                }
  538|  2.29k|                                break;
  539|       |
  540|  2.29k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 1.64k, False: 52.1k]
  ------------------
  541|  6.63k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 4.99k, False: 48.7k]
  ------------------
  542|  6.63k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 3.09k, False: 3.54k]
  ------------------
  543|  3.09k|                                {
  544|  3.09k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 1.55k, False: 1.53k]
  ------------------
  545|  1.55k|                                    {
  546|  1.55k|                                        return OpCode::SGEI;
  547|  1.55k|                                    }
  548|  1.53k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 1.30k, False: 235]
  ------------------
  549|  1.30k|                                    {
  550|  1.30k|                                        return OpCode::SGEU;
  551|  1.30k|                                    }
  552|  3.09k|                                }
  553|  3.54k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 3.32k, False: 219]
  ------------------
  554|  3.32k|                                {
  555|  3.32k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 1.68k, False: 1.63k]
  ------------------
  556|  1.68k|                                    {
  557|  1.68k|                                        return OpCode::SGTI;
  558|  1.68k|                                    }
  559|  1.63k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 1.30k, False: 329]
  ------------------
  560|  1.30k|                                    {
  561|  1.30k|                                        return OpCode::SGTU;
  562|  1.30k|                                    }
  563|  3.32k|                                }
  564|    783|                                break;
  565|       |
  566|  14.4k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 14.4k, False: 39.2k]
  ------------------
  567|  17.1k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 2.63k, False: 51.1k]
  ------------------
  568|  17.1k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 459, False: 16.6k]
  ------------------
  569|  17.1k|                                {
  570|  3.17k|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 3.17k, False: 13.9k]
  ------------------
  571|  3.90k|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 732, False: 16.3k]
  ------------------
  572|  3.90k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 3.11k, False: 793]
  ------------------
  573|  3.11k|                                        {
  574|  3.11k|                                            return OpCode::SLAI;
  575|  3.11k|                                        }
  576|    793|                                        break;
  577|       |
  578|  3.86k|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 3.86k, False: 13.2k]
  ------------------
  579|  4.73k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 873, False: 16.2k]
  ------------------
  580|  4.73k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 2.19k, False: 2.54k]
  ------------------
  581|  2.19k|                                        {
  582|  2.19k|                                            return OpCode::SLEI;
  583|  2.19k|                                        }
  584|  2.54k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 1.70k, False: 836]
  ------------------
  585|  1.70k|                                        {
  586|  1.70k|                                            return OpCode::SLEU;
  587|  1.70k|                                        }
  588|    836|                                        break;
  589|       |
  590|  1.95k|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 1.95k, False: 15.1k]
  ------------------
  591|  3.84k|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 1.89k, False: 15.2k]
  ------------------
  592|  3.84k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 1.96k, False: 1.88k]
  ------------------
  593|  1.96k|                                        {
  594|  1.96k|                                            return OpCode::SLLI;
  595|  1.96k|                                        }
  596|  1.88k|                                        break;
  597|       |
  598|  1.88k|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 1.14k, False: 15.9k]
  ------------------
  599|  4.16k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 3.02k, False: 14.1k]
  ------------------
  600|  4.16k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 1.01k, False: 3.15k]
  ------------------
  601|  1.01k|                                        {
  602|  1.01k|                                            return OpCode::SLTI;
  603|  1.01k|                                        }
  604|  3.15k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 2.21k, False: 947]
  ------------------
  605|  2.21k|                                        {
  606|  2.21k|                                            return OpCode::SLTU;
  607|  2.21k|                                        }
  608|    947|                                        break;
  609|  17.1k|                                }
  610|       |
  611|  8.32k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 3.40k, False: 50.3k]
  ------------------
  612|  9.04k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 727, False: 53.0k]
  ------------------
  613|  9.04k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 4.17k, False: 4.87k]
  ------------------
  614|  4.17k|                                {
  615|  4.17k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 1.93k, False: 2.23k]
  ------------------
  616|  1.93k|                                    {
  617|  1.93k|                                        return OpCode::SNEI;
  618|  1.93k|                                    }
  619|  2.23k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 661, False: 1.57k]
  ------------------
  620|    661|                                    {
  621|    661|                                        return OpCode::SNEU;
  622|    661|                                    }
  623|  4.17k|                                }
  624|  6.44k|                                break;
  625|       |
  626|  6.44k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 3.03k, False: 50.7k]
  ------------------
  627|  5.48k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 2.44k, False: 51.2k]
  ------------------
  628|  5.48k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 3.41k, False: 2.07k]
  |  Branch (628:37): [True: 1.72k, False: 3.75k]
  |  Branch (628:53): [True: 1.72k, False: 1.68k]
  ------------------
  629|  1.72k|                                {
  630|  1.72k|                                    return OpCode::SRAI;
  631|  1.72k|                                }
  632|  3.75k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 1.95k, False: 1.80k]
  |  Branch (632:42): [True: 1.74k, False: 2.00k]
  |  Branch (632:58): [True: 1.74k, False: 201]
  ------------------
  633|  1.74k|                                {
  634|  1.74k|                                    return OpCode::SRLI;
  635|  1.74k|                                }
  636|  2.00k|                                break;
  637|       |
  638|  7.22k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 7.22k, False: 46.5k]
  ------------------
  639|  10.9k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 3.77k, False: 49.9k]
  ------------------
  640|  10.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 10.4k, False: 573]
  ------------------
  641|  10.4k|                                {
  642|  10.4k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 495, False: 9.92k]
  ------------------
  643|  10.4k|                                    {
  644|  1.47k|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 1.47k, False: 8.94k]
  ------------------
  645|  2.44k|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 974, False: 9.44k]
  ------------------
  646|  2.44k|                                            return OpCode::SUBD;
  647|       |
  648|    450|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 450, False: 9.96k]
  ------------------
  649|  2.06k|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 1.61k, False: 8.80k]
  ------------------
  650|  2.06k|                                            return OpCode::SUBF;
  651|       |
  652|  1.73k|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 1.73k, False: 8.68k]
  ------------------
  653|  3.32k|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 1.59k, False: 8.81k]
  ------------------
  654|  3.32k|                                            return OpCode::SUBI;
  655|       |
  656|    991|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 991, False: 9.42k]
  ------------------
  657|  2.08k|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 1.09k, False: 9.32k]
  ------------------
  658|  2.08k|                                            return OpCode::SUBU;
  659|  10.4k|                                    }
  660|  10.4k|                                }
  661|  1.06k|                                break;
  662|  53.7k|                        }
  663|  13.5k|                        break;
  664|       |
  665|  13.5k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 4.91k, False: 137k]
  ------------------
  666|  9.18k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 4.27k, False: 137k]
  ------------------
  667|  9.18k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 8.12k, False: 1.06k]
  |  Branch (667:29): [True: 2.30k, False: 6.87k]
  |  Branch (667:45): [True: 3.49k, False: 4.63k]
  |  Branch (667:61): [True: 2.30k, False: 1.18k]
  ------------------
  668|  2.30k|                        {
  669|  2.30k|                            return OpCode::TRAP;
  670|  2.30k|                        }
  671|  6.87k|                        break;
  672|  6.87k|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 858, False: 141k]
  ------------------
  673|  2.67k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 1.81k, False: 140k]
  ------------------
  674|  2.67k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 2.12k, False: 544]
  |  Branch (674:29): [True: 783, False: 1.88k]
  |  Branch (674:45): [True: 1.18k, False: 944]
  |  Branch (674:61): [True: 783, False: 401]
  ------------------
  675|    783|                        {
  676|    783|                            return OpCode::XORI;
  677|    783|                        }
  678|  1.88k|                        break;
  679|   142k|                }
  680|  66.9k|                break;
  681|   142k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  82.0k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 82.0k, False: 496k]
  ------------------
  685|  82.0k|                const char c1 = token[0u];
  686|  82.0k|                const char c2 = token[1u];
  687|  82.0k|                const char c3 = token[2u];
  688|  82.0k|                const char c4 = token[3u];
  689|  82.0k|                const char c5 = token[4u];
  690|       |
  691|  82.0k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 10.4k, False: 71.6k]
  ------------------
  692|  82.0k|                {
  693|    607|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 607, False: 81.4k]
  ------------------
  694|  8.32k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 7.71k, False: 74.3k]
  ------------------
  695|  8.32k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 7.62k, False: 697]
  |  Branch (695:29): [True: 921, False: 7.40k]
  |  Branch (695:45): [True: 7.12k, False: 502]
  |  Branch (695:61): [True: 2.78k, False: 4.33k]
  |  Branch (695:77): [True: 921, False: 1.86k]
  ------------------
  696|    921|                        {
  697|    921|                            return OpCode::ADDUI;
  698|    921|                        }
  699|  7.40k|                        break;
  700|       |
  701|  7.40k|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 4.47k, False: 77.6k]
  ------------------
  702|  12.9k|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 8.46k, False: 73.6k]
  ------------------
  703|  12.9k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 11.7k, False: 1.22k]
  |  Branch (703:29): [True: 5.27k, False: 7.66k]
  |  Branch (703:45): [True: 10.9k, False: 750]
  |  Branch (703:61): [True: 6.68k, False: 4.27k]
  |  Branch (703:77): [True: 5.27k, False: 1.41k]
  ------------------
  704|  5.27k|                        {
  705|  5.27k|                            return OpCode::DIVUI;
  706|  5.27k|                        }
  707|  7.66k|                        break;
  708|       |
  709|  7.66k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 3.67k, False: 78.4k]
  ------------------
  710|  15.7k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 12.0k, False: 70.0k]
  ------------------
  711|  15.7k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 13.9k, False: 1.76k]
  |  Branch (711:29): [True: 11.2k, False: 4.54k]
  |  Branch (711:45): [True: 12.3k, False: 1.66k]
  |  Branch (711:61): [True: 11.2k, False: 1.11k]
  ------------------
  712|  11.2k|                        {
  713|  11.2k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 1.17k, False: 10.0k]
  ------------------
  714|  11.2k|                            {
  715|    847|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 847, False: 10.3k]
  ------------------
  716|  1.93k|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 1.09k, False: 10.1k]
  ------------------
  717|  1.93k|                                    return OpCode::MULTD;
  718|       |
  719|    335|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 335, False: 10.8k]
  ------------------
  720|  2.32k|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 1.98k, False: 9.22k]
  ------------------
  721|  2.32k|                                    return OpCode::MULTF;
  722|       |
  723|    326|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 326, False: 10.8k]
  ------------------
  724|  2.00k|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 1.67k, False: 9.53k]
  ------------------
  725|  2.00k|                                    return OpCode::MULTI;
  726|       |
  727|    473|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 473, False: 10.7k]
  ------------------
  728|  3.77k|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 3.30k, False: 7.90k]
  ------------------
  729|  3.77k|                                    return OpCode::MULTU;
  730|  11.2k|                            }
  731|  11.2k|                        }
  732|  5.71k|                        break;
  733|       |
  734|  11.8k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 11.8k, False: 70.1k]
  ------------------
  735|  34.6k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 22.7k, False: 59.3k]
  ------------------
  736|  34.6k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 1.47k, False: 33.1k]
  ------------------
  737|  34.6k|                        {
  738|  4.38k|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 4.38k, False: 30.2k]
  ------------------
  739|  6.78k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 2.39k, False: 32.2k]
  ------------------
  740|  6.78k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 6.11k, False: 667]
  |  Branch (740:37): [True: 2.06k, False: 4.71k]
  |  Branch (740:53): [True: 5.40k, False: 711]
  |  Branch (740:69): [True: 2.06k, False: 3.33k]
  ------------------
  741|  2.06k|                                {
  742|  2.06k|                                    return OpCode::SEQUI;
  743|  2.06k|                                }
  744|  4.71k|                                break;
  745|       |
  746|  4.71k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 2.31k, False: 32.3k]
  ------------------
  747|  7.14k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 4.82k, False: 29.7k]
  ------------------
  748|  7.14k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 3.52k, False: 3.61k]
  |  Branch (748:37): [True: 1.04k, False: 6.10k]
  |  Branch (748:53): [True: 2.65k, False: 874]
  |  Branch (748:69): [True: 1.04k, False: 1.61k]
  ------------------
  749|  1.04k|                                {
  750|  1.04k|                                    return OpCode::SGEUI;
  751|  1.04k|                                }
  752|  6.10k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 3.60k, False: 2.49k]
  |  Branch (752:42): [True: 1.29k, False: 4.80k]
  |  Branch (752:58): [True: 2.26k, False: 1.34k]
  |  Branch (752:74): [True: 1.29k, False: 963]
  ------------------
  753|  1.29k|                                {
  754|  1.29k|                                    return OpCode::SGTUI;
  755|  1.29k|                                }
  756|  4.80k|                                break;
  757|       |
  758|  5.04k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 5.04k, False: 29.5k]
  ------------------
  759|  9.10k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 4.06k, False: 30.5k]
  ------------------
  760|  9.10k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 4.46k, False: 4.64k]
  |  Branch (760:37): [True: 1.80k, False: 7.29k]
  |  Branch (760:53): [True: 2.65k, False: 1.81k]
  |  Branch (760:69): [True: 1.80k, False: 844]
  ------------------
  761|  1.80k|                                {
  762|  1.80k|                                    return OpCode::SLEUI;
  763|  1.80k|                                }
  764|  7.29k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 4.06k, False: 3.23k]
  |  Branch (764:42): [True: 2.70k, False: 4.59k]
  |  Branch (764:58): [True: 3.62k, False: 442]
  |  Branch (764:74): [True: 2.70k, False: 919]
  ------------------
  765|  2.70k|                                {
  766|  2.70k|                                    return OpCode::SLTUI;
  767|  2.70k|                                }
  768|  4.59k|                                break;
  769|       |
  770|  4.59k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 2.47k, False: 32.1k]
  ------------------
  771|  3.54k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 1.07k, False: 33.5k]
  ------------------
  772|  3.54k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 2.74k, False: 800]
  |  Branch (772:37): [True: 1.55k, False: 1.99k]
  |  Branch (772:53): [True: 2.24k, False: 498]
  |  Branch (772:69): [True: 1.55k, False: 695]
  ------------------
  773|  1.55k|                                {
  774|  1.55k|                                    return OpCode::SNEUI;
  775|  1.55k|                                }
  776|  1.99k|                                break;
  777|       |
  778|  4.10k|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 4.10k, False: 30.5k]
  ------------------
  779|  6.57k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 2.47k, False: 32.1k]
  ------------------
  780|  6.57k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 5.53k, False: 1.04k]
  |  Branch (780:37): [True: 3.35k, False: 3.22k]
  |  Branch (780:53): [True: 3.99k, False: 1.54k]
  |  Branch (780:69): [True: 3.35k, False: 643]
  ------------------
  781|  3.35k|                                {
  782|  3.35k|                                    return OpCode::SUBUI;
  783|  3.35k|                                }
  784|  3.22k|                                break;
  785|  34.6k|                        }
  786|       |
  787|  20.8k|                        break;
  788|  82.0k|                }
  789|       |
  790|  52.0k|                break;
  791|  82.0k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  52.0k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 40.9k, False: 537k]
  ------------------
  795|  40.9k|                const char c1 = token[0u];
  796|  40.9k|                const char c2 = token[1u];
  797|  40.9k|                const char c3 = token[2u];
  798|  40.9k|                const char c4 = token[3u];
  799|  40.9k|                const char c5 = token[4u];
  800|  40.9k|                const char c6 = token[5u];
  801|       |
  802|  40.9k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 24.0k, False: 16.9k]
  |  Branch (802:21): [True: 22.3k, False: 18.6k]
  |  Branch (802:37): [True: 22.9k, False: 1.09k]
  |  Branch (802:53): [True: 22.3k, False: 586]
  ------------------
  803|  22.3k|                {
  804|  22.3k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 362, False: 22.0k]
  ------------------
  805|  22.3k|                    {
  806|  2.95k|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 2.95k, False: 19.4k]
  ------------------
  807|  6.21k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 3.26k, False: 19.0k]
  ------------------
  808|  6.21k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 4.10k, False: 2.11k]
  ------------------
  809|  4.10k|                            {
  810|  4.10k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 1.68k, False: 2.42k]
  ------------------
  811|  1.68k|                                {
  812|  1.68k|                                    return OpCode::CVTD2F;
  813|  1.68k|                                }
  814|  2.42k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 1.58k, False: 834]
  ------------------
  815|  1.58k|                                {
  816|  1.58k|                                    return OpCode::CVTD2I;
  817|  1.58k|                                }
  818|  4.10k|                            }
  819|  2.94k|                            break;
  820|       |
  821|  6.44k|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 6.44k, False: 15.9k]
  ------------------
  822|  7.25k|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 813, False: 21.5k]
  ------------------
  823|  7.25k|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 5.50k, False: 1.74k]
  ------------------
  824|  5.50k|                            {
  825|  5.50k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 2.73k, False: 2.77k]
  ------------------
  826|  2.73k|                                {
  827|  2.73k|                                    return OpCode::CVTF2D;
  828|  2.73k|                                }
  829|  2.77k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 1.04k, False: 1.73k]
  ------------------
  830|  1.04k|                                {
  831|  1.04k|                                    return OpCode::CVTF2I;
  832|  1.04k|                                }
  833|  5.50k|                            }
  834|  3.47k|                            break;
  835|       |
  836|  5.62k|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 5.62k, False: 16.7k]
  ------------------
  837|  8.52k|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 2.90k, False: 19.4k]
  ------------------
  838|  8.52k|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 5.67k, False: 2.85k]
  ------------------
  839|  5.67k|                            {
  840|  5.67k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 2.83k, False: 2.84k]
  ------------------
  841|  2.83k|                                {
  842|  2.83k|                                    return OpCode::CVTI2D;
  843|  2.83k|                                }
  844|  2.84k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 2.32k, False: 514]
  ------------------
  845|  2.32k|                                {
  846|  2.32k|                                    return OpCode::CVTI2F;
  847|  2.32k|                                }
  848|  5.67k|                            }
  849|  22.3k|                    }
  850|  22.3k|                }
  851|  18.6k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 11.4k, False: 7.21k]
  |  Branch (851:26): [True: 3.90k, False: 14.7k]
  |  Branch (851:42): [True: 9.25k, False: 2.16k]
  |  Branch (851:58): [True: 8.37k, False: 883]
  |  Branch (851:74): [True: 7.15k, False: 1.22k]
  ------------------
  852|  18.6k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 4.24k, False: 2.90k]
  |  Branch (852:42): [True: 3.90k, False: 346]
  ------------------
  853|  3.90k|                {
  854|  3.90k|                    return OpCode::MULTUI;
  855|  3.90k|                }
  856|  24.8k|                break;
  857|  40.9k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  24.8k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 19.5k, False: 558k]
  ------------------
  861|  19.5k|                const char c1 = token[0u];
  862|  19.5k|                const char c2 = token[1u];
  863|  19.5k|                const char c3 = token[2u];
  864|  19.5k|                const char c4 = token[3u];
  865|  19.5k|                const char c5 = token[4u];
  866|  19.5k|                const char c6 = token[5u];
  867|  19.5k|                const char c7 = token[6u];
  868|       |
  869|  19.5k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 15.7k, False: 3.81k]
  |  Branch (869:21): [True: 12.8k, False: 6.74k]
  |  Branch (869:37): [True: 14.1k, False: 1.58k]
  |  Branch (869:53): [True: 12.8k, False: 1.34k]
  ------------------
  870|  12.8k|                {
  871|  12.8k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 5.96k, False: 6.84k]
  |  Branch (871:25): [True: 3.46k, False: 9.35k]
  |  Branch (871:41): [True: 5.26k, False: 707]
  |  Branch (871:54): [True: 4.42k, False: 834]
  |  Branch (871:70): [True: 3.46k, False: 968]
  ------------------
  872|  3.46k|                    {
  873|  3.46k|                        return OpCode::MOVI2FP;
  874|  3.46k|                    }
  875|  9.35k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 5.19k, False: 4.16k]
  |  Branch (875:25): [True: 1.79k, False: 7.55k]
  |  Branch (875:41): [True: 4.17k, False: 1.01k]
  |  Branch (875:57): [True: 2.55k, False: 1.61k]
  |  Branch (875:70): [True: 1.79k, False: 762]
  ------------------
  876|  1.79k|                    {
  877|  1.79k|                        return OpCode::MOVFP2I;
  878|  1.79k|                    }
  879|  9.35k|                }
  880|  14.3k|                break;
  881|  19.5k|            }
  882|       |
  883|  19.4k|            default: {
  ------------------
  |  Branch (883:13): [True: 19.4k, False: 558k]
  ------------------
  884|  19.4k|                break;
  885|  19.5k|            }
  886|   578k|        }
  887|       |
  888|       |        // None found
  889|   336k|        return OpCode::NONE;
  890|   578k|    }
_ZN3dlx3iceEcc:
   15|   952k|    {
   16|   952k|        constexpr const char diff = 'a' - 'A';
   17|   952k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 345k, False: 606k]
  |  Branch (17:28): [True: 293k, False: 312k]
  ------------------
   18|   952k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   566k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  5.65k|    {
  187|  5.65k|        ParseError err;
  188|       |
  189|  5.65k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  5.65k|        err.m_LineNumber                           = line_number;
  191|  5.65k|        err.m_Column                               = column;
  192|  5.65k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  5.65k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  5.65k|        return err;
  196|  5.65k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  5.65k|    {
  202|  5.65k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  5.65k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  5.65k|                                                         actual_type);
  205|  5.65k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    599|    {
  210|    599|        ParseError err;
  211|       |
  212|    599|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    599|        err.m_LineNumber        = line_number;
  214|    599|        err.m_Column            = column;
  215|    599|        err.invalid_number.text = text;
  216|       |
  217|    599|        return err;
  218|    599|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    599|    {
  222|    599|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    599|                                                token.GetColumn().unsafe(), token.GetText());
  224|    599|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|   236k|    {
  248|   236k|        ParseError err;
  249|       |
  250|   236k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|   236k|        err.m_LineNumber                   = line_number;
  252|   236k|        err.m_Column                       = column;
  253|   236k|        err.unexpected_token.expected_type = expected_type;
  254|   236k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|   236k|        return err;
  257|   236k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|   236k|    {
  262|   236k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|   236k|                                                  token.GetColumn().unsafe(), expected_type,
  264|   236k|                                                  token.GetType());
  265|   236k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  53.6k|    {
  271|  53.6k|        ParseError err;
  272|       |
  273|  53.6k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  53.6k|        err.m_LineNumber                   = line_number;
  275|  53.6k|        err.m_Column                       = column;
  276|  53.6k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  53.6k|        return err;
  279|  53.6k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    712|    {
  283|    712|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    712|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    712|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  94.3k|    {
  291|  94.3k|        ParseError err;
  292|       |
  293|  94.3k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  94.3k|        err.m_LineNumber                        = line_number;
  295|  94.3k|        err.m_Column                            = column;
  296|  94.3k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  94.3k|        return err;
  299|  94.3k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  94.3k|    {
  303|  94.3k|        return ConstructInvalidLabelIdentifierParseError(
  304|  94.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  94.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  19.4k|    {
  313|  19.4k|        ParseError err;
  314|       |
  315|  19.4k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  19.4k|        err.m_LineNumber                     = line_number;
  317|  19.4k|        err.m_Column                         = column;
  318|  19.4k|        err.label_already_defined.label_name = label_name;
  319|  19.4k|        err.label_already_defined.at_line    = at_line;
  320|  19.4k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  19.4k|        return err;
  323|  19.4k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  19.4k|    {
  328|  19.4k|        return ConstructLabelAlreadyDefinedParseError(
  329|  19.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  19.4k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  19.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|   111k|    {
  336|   111k|        ParseError err;
  337|       |
  338|   111k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|   111k|        err.m_LineNumber = line_number;
  340|   111k|        err.m_Column     = column;
  341|       |
  342|   111k|        return err;
  343|   111k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|   111k|    {
  347|   111k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|   111k|                                                        token.GetColumn().unsafe());
  349|   111k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  13.3k|    {
  355|  13.3k|        ParseError err;
  356|       |
  357|  13.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  13.3k|        err.m_LineNumber               = line_number;
  359|  13.3k|        err.m_Column                   = column;
  360|  13.3k|        err.too_few_arguments.required = required;
  361|  13.3k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  13.3k|        return err;
  364|  13.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  13.3k|    {
  369|  13.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  13.3k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  13.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  30.7k|    {
  376|  30.7k|        ParseError err;
  377|       |
  378|  30.7k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  30.7k|        err.m_LineNumber           = line_number;
  380|  30.7k|        err.m_Column               = column;
  381|  30.7k|        err.empty_label.label_name = label_name;
  382|       |
  383|  30.7k|        return err;
  384|  30.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  30.7k|    {
  388|  30.7k|        return ConstructEmptyLabelParseError(
  389|  30.7k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  30.7k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 27.3k, False: 3.34k]
  ------------------
  391|  27.3k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  30.7k|                        token.GetText());
  393|  30.7k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|  1.29k|    {
  398|  1.29k|        ParseError err;
  399|       |
  400|  1.29k|        err.m_Type       = ParseError::Type::TooManyComma;
  401|  1.29k|        err.m_LineNumber = line_number;
  402|  1.29k|        err.m_Column     = column;
  403|       |
  404|  1.29k|        return err;
  405|  1.29k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|  1.29k|    {
  409|  1.29k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|  1.29k|                                               token.GetColumn().unsafe());
  411|  1.29k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   566k|    {
   17|   566k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   566k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  7.90k|    {
  181|  7.90k|        ParsedProgram program;
  182|       |
  183|  7.90k|        program.m_Tokens = tokens;
  184|       |
  185|  7.90k|        phi::boolean line_has_instruction{false};
  186|  7.90k|        phi::usize   label_count{0u};
  187|       |
  188|   694k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 686k, False: 7.90k]
  ------------------
  189|   686k|        {
  190|   686k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   686k|            switch (current_token.GetType())
  195|   686k|            {
  196|       |                // Ignore comments
  197|  2.31k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 2.31k, False: 684k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  2.31k|                    break;
  200|       |
  201|  94.7k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 94.7k, False: 591k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  94.7k|                    line_has_instruction = false;
  204|  94.7k|                    break;
  205|       |
  206|   210k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 210k, False: 476k]
  ------------------
  207|   210k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 27.7k, False: 182k]
  ------------------
  208|  27.7k|                    {
  209|  27.7k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  27.7k|                                current_token, Token::Type::NewLine));
  211|  27.7k|                        break;
  212|  27.7k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   182k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 54.7k, False: 127k]
  ------------------
  217|  54.7k|                    {
  218|  54.7k|                        program.AddParseError(
  219|  54.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  54.7k|                        break;
  221|  54.7k|                    }
  222|       |
  223|   127k|                    phi::string_view label_name = current_token.GetText();
  224|   127k|                    label_name.remove_suffix(1u);
  225|       |
  226|   127k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 52.9k, False: 74.6k]
  ------------------
  227|  52.9k|                    {
  228|  52.9k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  52.9k|                                current_token.GetLineNumber().unsafe(),
  230|  52.9k|                                current_token.GetColumn().unsafe(), label_name));
  231|  52.9k|                        break;
  232|  52.9k|                    }
  233|       |
  234|  74.6k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 23.8k, False: 50.8k]
  ------------------
  235|  23.8k|                    {
  236|  23.8k|                        program.AddParseError(
  237|  23.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  23.8k|                        break;
  239|  23.8k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  50.8k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 19.4k, False: 31.4k]
  ------------------
  243|  19.4k|                    {
  244|       |                        // Find first defintions of label
  245|  19.4k|                        const Token* first_label_definition =
  246|  19.4k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  19.4k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  19.4k|                                    {
  249|  19.4k|                                        phi::string_view token_label_name = t.GetText();
  250|  19.4k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  19.4k|                                        if (token_label_name == label_name)
  253|  19.4k|                                        {
  254|  19.4k|                                            return true;
  255|  19.4k|                                        }
  256|  19.4k|                                    }
  257|       |
  258|  19.4k|                                    return false;
  259|  19.4k|                                });
  260|       |
  261|  19.4k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  19.4k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  19.4k|                                current_token, *first_label_definition));
  265|  19.4k|                        break;
  266|  19.4k|                    }
  267|       |
  268|  31.4k|                    program.m_JumpData[label_name] =
  269|  31.4k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  31.4k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  31.4k|                    break;
  276|  50.8k|                }
  277|       |
  278|   187k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 187k, False: 498k]
  ------------------
  279|   187k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 111k, False: 76.0k]
  ------------------
  280|   111k|                    {
  281|   111k|                        program.AddParseError(
  282|   111k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   111k|                        break;
  284|   111k|                    }
  285|       |
  286|  76.0k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  76.0k|                    PHI_ASSERT(current_token.HasHint());
  290|  76.0k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  76.0k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  76.0k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  76.0k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  76.0k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  76.0k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  76.0k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  76.0k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  76.0k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   168k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 144k, False: 23.3k]
  ------------------
  312|   144k|                    {
  313|       |                        // Get next token
  314|   144k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 733, False: 144k]
  ------------------
  315|    733|                        {
  316|    733|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    733|                                    current_token, number_of_argument_required.unsafe(),
  318|    733|                                    argument_num.unsafe()));
  319|    733|                            break;
  320|    733|                        }
  321|       |
  322|   144k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   144k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 51.8k, False: 92.4k]
  ------------------
  326|  51.8k|                        {
  327|  51.8k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 1.29k, False: 50.5k]
  ------------------
  328|  1.29k|                            {
  329|  1.29k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  1.29k|                            }
  331|       |
  332|  51.8k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  51.8k|                            continue;
  335|  51.8k|                        }
  336|       |
  337|  92.4k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 12.6k, False: 79.8k]
  ------------------
  338|  12.6k|                        {
  339|  12.6k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  12.6k|                                    token, number_of_argument_required.unsafe(),
  341|  12.6k|                                    argument_num.unsafe()));
  342|  12.6k|                            break;
  343|  12.6k|                        }
  344|       |
  345|  79.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  79.8k|                                parse_instruction_argument(
  347|  79.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  79.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 39.3k, False: 40.5k]
  ------------------
  349|  39.3k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  39.3k|                            break;
  352|  39.3k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  40.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  40.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  40.5k|                        argument_num++;
  359|  40.5k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  40.5k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  76.0k|                    program.m_Instructions.emplace_back(instruction);
  367|  76.0k|                    line_has_instruction = true;
  368|  76.0k|                    break;
  369|   187k|                }
  370|       |
  371|   191k|                default:
  ------------------
  |  Branch (371:17): [True: 191k, False: 494k]
  ------------------
  372|   191k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   191k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 125k, False: 66.6k]
  ------------------
  374|   125k|                    {
  375|   125k|                        expected_token_type = Token::Type::NewLine;
  376|   125k|                    }
  377|       |
  378|   191k|                    program.AddParseError(
  379|   191k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   191k|                    break;
  381|   686k|            }
  382|   686k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  7.90k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 1.02k, False: 6.88k]
  ------------------
  386|  1.02k|        {
  387|  37.3k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 36.3k, False: 1.02k]
  ------------------
  388|  36.3k|            {
  389|  36.3k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  36.3k|                const Token& token = *it;
  392|  36.3k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 30.7k, False: 5.63k]
  ------------------
  393|  30.7k|                {
  394|  30.7k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  30.7k|                    --label_count;
  396|  30.7k|                }
  397|  36.3k|            }
  398|  1.02k|        }
  399|       |
  400|  7.90k|        return program;
  401|  7.90k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  7.90k|    {
  405|  7.90k|        TokenStream tokens = Tokenize(source);
  406|  7.90k|        return Parse(tokens);
  407|  7.90k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  79.8k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  79.8k|        switch (token.GetType())
   37|  79.8k|        {
   38|  3.32k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 3.32k, False: 76.5k]
  ------------------
   39|  3.32k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 872, False: 2.44k]
  ------------------
   40|  3.32k|                                          ArgumentType::AddressDisplacement))
   41|    872|                {
   42|    872|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    872|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    872|                    return {};
   46|    872|                }
   47|       |
   48|       |                // Get address displacement
   49|  2.44k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  2.44k|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|  2.44k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 2.44k]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|  2.44k|                auto         it           = tokens.current_position();
   61|  2.44k|                const Token& first_token  = tokens.consume();
   62|  2.44k|                const Token& second_token = tokens.consume();
   63|  2.44k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  2.44k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 643, False: 1.80k]
  ------------------
   66|    643|                {
   67|    643|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    643|                            first_token, Token::Type::OpenBracket));
   69|    643|                    return {};
   70|    643|                }
   71|       |
   72|       |                // Second token is the register
   73|  1.80k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 866, False: 937]
  ------------------
   74|    866|                {
   75|    866|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|    866|                            second_token, Token::Type::RegisterInt));
   77|    866|                    return {};
   78|    866|                }
   79|       |
   80|    937|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 322, False: 615]
  ------------------
   81|    322|                {
   82|    322|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|    322|                            third_token, Token::Type::ClosingBracket));
   84|    322|                    return {};
   85|    322|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|    615|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|    615|                return ConstructInstructionArgumentAddressDisplacement(
   94|    615|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|    937|            }
   96|  23.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 23.2k, False: 56.5k]
  ------------------
   97|  23.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 733, False: 22.5k]
  ------------------
   98|    733|                {
   99|    733|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    733|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    733|                    return {};
  102|    733|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  22.5k|                return ConstructInstructionArgumentRegisterInt(
  108|  22.5k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  23.2k|            }
  110|  7.29k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 7.29k, False: 72.5k]
  ------------------
  111|  7.29k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 450, False: 6.84k]
  ------------------
  112|    450|                {
  113|    450|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    450|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    450|                    return {};
  116|    450|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  6.84k|                return ConstructInstructionArgumentRegisterFloat(
  122|  6.84k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  7.29k|            }
  124|    712|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 712, False: 79.1k]
  ------------------
  125|    712|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    712|                return {};
  128|  7.29k|            }
  129|  26.0k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 26.0k, False: 53.7k]
  ------------------
  130|       |                // Parse as Label
  131|  26.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 2.96k, False: 23.1k]
  ------------------
  132|  2.96k|                {
  133|  2.96k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  2.96k|                            token, expected_argument_type, ArgumentType::Label));
  135|  2.96k|                    return {};
  136|  2.96k|                }
  137|       |
  138|  23.1k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 23.1k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  23.1k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 15.8k, False: 7.27k]
  ------------------
  145|  15.8k|                {
  146|  15.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  15.8k|                    return {};
  148|  15.8k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  7.27k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  23.1k|            }
  154|  4.47k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 4.47k, False: 75.3k]
  ------------------
  155|  4.47k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 634, False: 3.83k]
  ------------------
  156|    634|                {
  157|    634|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    634|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    634|                    return {};
  160|    634|                }
  161|       |
  162|  3.83k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 3.23k, False: 599]
  ------------------
  163|  3.23k|                {
  164|  3.23k|                    return ConstructInstructionArgumentImmediateValue(
  165|  3.23k|                            static_cast<phi::int16_t>(token.GetHint()));
  166|  3.23k|                }
  167|       |
  168|    599|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    599|                return {};
  170|  3.83k|            }
  171|       |
  172|  14.7k|            default:
  ------------------
  |  Branch (172:13): [True: 14.7k, False: 65.1k]
  ------------------
  173|  14.7k|                program.AddParseError(
  174|  14.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  14.7k|                return {};
  176|  79.8k|        }
  177|  79.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   151k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   151k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 135k, False: 15.4k]
  ------------------
  248|   135k|                                    {
  249|   135k|                                        phi::string_view token_label_name = t.GetText();
  250|   135k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   135k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 19.4k, False: 116k]
  ------------------
  253|  19.4k|                                        {
  254|  19.4k|                                            return true;
  255|  19.4k|                                        }
  256|   135k|                                    }
  257|       |
  258|   131k|                                    return false;
  259|   151k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   68|  2.98M|    {
   69|  2.98M|        PHI_ASSERT(id != IntRegisterID::None);
   70|  2.98M|        phi::size_t id_value = phi::to_underlying(id);
   71|       |
   72|  2.98M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   73|       |
   74|  2.98M|        return m_IntRegisters[id_value];
   75|  2.98M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   78|  6.81M|    {
   79|  6.81M|        PHI_ASSERT(id != IntRegisterID::None);
   80|  6.81M|        phi::size_t id_value = phi::to_underlying(id);
   81|       |
   82|  6.81M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   83|       |
   84|  6.81M|        return m_IntRegisters[id_value];
   85|  6.81M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   88|  4.08M|    {
   89|  4.08M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   90|  4.08M|                                             RegisterAccessType::Signed),
   91|  4.08M|                   "Mismatch for instruction access type");
   92|       |
   93|  4.08M|        const phi::size_t id_value = phi::to_underlying(id);
   94|       |
   95|  4.08M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   96|  4.08M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   97|  4.08M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (97:13): [True: 2.35M, False: 1.73M]
  ------------------
   98|  4.08M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (98:13): [True: 97.3k, False: 2.25M]
  ------------------
   99|  97.3k|        {
  100|  97.3k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  97.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  101|  97.3k|        }
  102|       |
  103|  4.08M|        return GetIntRegister(id).GetSignedValue();
  104|  4.08M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  107|  2.73M|    {
  108|  2.73M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  109|  2.73M|                                             RegisterAccessType::Unsigned),
  110|  2.73M|                   "Mismatch for instruction access type");
  111|       |
  112|  2.73M|        const phi::size_t id_value = phi::to_underlying(id);
  113|       |
  114|  2.73M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  115|  2.73M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  116|  2.73M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (116:13): [True: 2.11M, False: 613k]
  ------------------
  117|  2.73M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (117:13): [True: 1.83M, False: 285k]
  ------------------
  118|  1.83M|        {
  119|  1.83M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.83M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  120|  1.83M|        }
  121|       |
  122|  2.73M|        return GetIntRegister(id).GetUnsignedValue();
  123|  2.73M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  126|  2.35M|    {
  127|  2.35M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  128|  2.35M|                                             RegisterAccessType::Signed),
  129|  2.35M|                   "Mismatch for instruction access type");
  130|       |
  131|  2.35M|        IntRegister& reg = GetIntRegister(id);
  132|       |
  133|  2.35M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (133:13): [True: 537k, False: 1.81M]
  ------------------
  134|   537k|        {
  135|   537k|            return;
  136|   537k|        }
  137|       |
  138|  1.81M|        reg.SetSignedValue(value);
  139|       |
  140|  1.81M|        const phi::size_t id_value = phi::to_underlying(id);
  141|       |
  142|  1.81M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  143|  1.81M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  144|  1.81M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  147|   630k|    {
  148|   630k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  149|   630k|                                             RegisterAccessType::Unsigned),
  150|   630k|                   "Mismatch for instruction access type");
  151|       |
  152|   630k|        IntRegister& reg = GetIntRegister(id);
  153|       |
  154|   630k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (154:13): [True: 376k, False: 253k]
  ------------------
  155|   376k|        {
  156|   376k|            return;
  157|   376k|        }
  158|       |
  159|   253k|        reg.SetUnsignedValue(value);
  160|       |
  161|   253k|        const phi::size_t id_value = phi::to_underlying(id);
  162|       |
  163|   253k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  164|   253k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  165|   253k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  168|  1.51M|    {
  169|  1.51M|        PHI_ASSERT(id != FloatRegisterID::None);
  170|  1.51M|        const phi::size_t id_value = phi::to_underlying(id);
  171|       |
  172|  1.51M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  173|       |
  174|  1.51M|        return m_FloatRegisters[id_value];
  175|  1.51M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  178|   708k|    {
  179|   708k|        PHI_ASSERT(id != FloatRegisterID::None);
  180|   708k|        const phi::size_t id_value = phi::to_underlying(id);
  181|       |
  182|   708k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  183|       |
  184|   708k|        return m_FloatRegisters[id_value];
  185|   708k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  188|   708k|    {
  189|   708k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  190|   708k|                                             RegisterAccessType::Float),
  191|   708k|                   "Mismatch for instruction access type");
  192|       |
  193|   708k|        const phi::size_t id_value = phi::to_underlying(id);
  194|       |
  195|   708k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  196|   708k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  197|   708k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (197:13): [True: 572k, False: 135k]
  ------------------
  198|   708k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (198:13): [True: 295k, False: 277k]
  ------------------
  199|   295k|        {
  200|       |            /*
  201|       |            DLX_WARN("Mismatch for register value type");
  202|       |            */
  203|   295k|        }
  204|       |
  205|   708k|        const FloatRegister& reg = GetFloatRegister(id);
  206|       |
  207|   708k|        return reg.GetValue();
  208|   708k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  211|   540k|    {
  212|   540k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  213|   540k|                                             RegisterAccessType::Double),
  214|   540k|                   "Mismatch for instruction access type");
  215|       |
  216|   540k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (216:13): [True: 22, False: 540k]
  ------------------
  217|     22|        {
  218|     22|            Raise(Exception::MisalignedRegisterAccess);
  219|     22|            return {0.0};
  220|     22|        }
  221|       |
  222|   540k|        const phi::size_t id_value = phi::to_underlying(id);
  223|       |
  224|   540k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  225|   540k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  226|   540k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (226:13): [True: 418k, False: 121k]
  ------------------
  227|   540k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (227:13): [True: 192k, False: 225k]
  ------------------
  228|   192k|        {
  229|   192k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   192k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  230|   192k|        }
  231|       |
  232|   540k|        const FloatRegisterValueType register_value_type_high =
  233|   540k|                m_FloatRegistersValueTypes[id_value + 1u];
  234|   540k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (234:13): [True: 418k, False: 121k]
  ------------------
  235|   540k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (235:13): [True: 147k, False: 270k]
  ------------------
  236|   147k|        {
  237|   147k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   147k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  238|   147k|        }
  239|       |
  240|   540k|        const FloatRegister& first_reg = GetFloatRegister(id);
  241|   540k|        const FloatRegister& second_reg =
  242|   540k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  243|       |
  244|   540k|        const float first_value  = first_reg.GetValue().unsafe();
  245|   540k|        const float second_value = second_reg.GetValue().unsafe();
  246|       |
  247|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  248|   540k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  249|       |
  250|   540k|        const phi::uint32_t first_value_bits =
  251|   540k|                *reinterpret_cast<const phi::uint32_t*>(&first_value);
  252|   540k|        const phi::uint32_t second_value_bits =
  253|   540k|                *reinterpret_cast<const phi::uint32_t*>(&second_value);
  254|       |
  255|   540k|        phi::uint64_t final_value_bits =
  256|   540k|                static_cast<phi::uint64_t>(second_value_bits) << 32u | first_value_bits;
  257|       |
  258|   540k|        return *reinterpret_cast<double*>(&final_value_bits);
  259|       |
  260|   540k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  261|   540k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  264|   173k|    {
  265|   173k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  266|   173k|                                             RegisterAccessType::Float),
  267|   173k|                   "Mismatch for instruction access type");
  268|       |
  269|   173k|        FloatRegister& reg = GetFloatRegister(id);
  270|       |
  271|   173k|        reg.SetValue(value);
  272|       |
  273|   173k|        const phi::size_t id_value = phi::to_underlying(id);
  274|       |
  275|   173k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  276|   173k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  277|   173k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  280|   130k|    {
  281|   130k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  282|   130k|                                             RegisterAccessType::Double),
  283|   130k|                   "Mismatch for instruction access type");
  284|       |
  285|   130k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (285:13): [True: 7, False: 130k]
  ------------------
  286|      7|        {
  287|      7|            Raise(Exception::MisalignedRegisterAccess);
  288|      7|            return;
  289|      7|        }
  290|       |
  291|   130k|        const constexpr phi::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  292|   130k|        const constexpr phi::uint64_t second_32_bits = first_32_bits << 32u;
  293|       |
  294|   130k|        double              value_raw  = value.unsafe();
  295|   130k|        const phi::uint64_t value_bits = *reinterpret_cast<phi::uint64_t*>(&value_raw);
  296|       |
  297|   130k|        const phi::uint32_t first_bits  = value_bits & first_32_bits;
  298|   130k|        const phi::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  299|       |
  300|   130k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  301|   130k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  302|       |
  303|   130k|        FloatRegister& first_reg = GetFloatRegister(id);
  304|   130k|        FloatRegister& second_reg =
  305|   130k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  306|       |
  307|   130k|        first_reg.SetValue(first_value);
  308|   130k|        second_reg.SetValue(second_value);
  309|       |
  310|   130k|        const phi::size_t id_value = phi::to_underlying(id);
  311|       |
  312|   130k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  313|   130k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  314|   130k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  315|   130k|    }
_ZN3dlx9Processor7GetFPSREv:
  318|   416k|    {
  319|   416k|        return m_FPSR;
  320|   416k|    }
_ZNK3dlx9Processor7GetFPSREv:
  323|   152k|    {
  324|   152k|        return m_FPSR;
  325|   152k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  328|   152k|    {
  329|   152k|        const StatusRegister& status_reg = GetFPSR();
  330|       |
  331|   152k|        return status_reg.Get();
  332|   152k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  335|   416k|    {
  336|   416k|        StatusRegister& status_reg = GetFPSR();
  337|       |
  338|   416k|        status_reg.SetStatus(value);
  339|   416k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  342|  8.53M|    {
  343|  8.53M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  344|       |
  345|  8.53M|        inst.Execute(*this);
  346|  8.53M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|  7.90k|    {
  350|  7.90k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 6.36k, False: 1.54k]
  ------------------
  351|  6.36k|        {
  352|  6.36k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  6.36k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|  6.36k|            return false;
  354|  6.36k|        }
  355|       |
  356|  1.54k|        m_CurrentProgram = &program;
  357|       |
  358|  1.54k|        m_ProgramCounter               = 0u;
  359|  1.54k|        m_Halted                       = false;
  360|  1.54k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|  1.54k|        m_LastRaisedException          = Exception::None;
  362|  1.54k|        m_CurrentStepCount             = 0u;
  363|       |
  364|  1.54k|        return true;
  365|  7.90k|    }
_ZNK3dlx9Processor17GetCurrentProgramEv:
  368|  2.41M|    {
  369|  2.41M|        return m_CurrentProgram;
  370|  2.41M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  373|  8.53M|    {
  374|       |        // No nothing when no program is loaded
  375|  8.53M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (375:13): [True: 0, False: 8.53M]
  ------------------
  376|      0|        {
  377|      0|            return;
  378|      0|        }
  379|       |
  380|       |        // Halt if there are no instruction to execute
  381|  8.53M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (381:13): [True: 71, False: 8.53M]
  ------------------
  382|     71|        {
  383|     71|            m_Halted                       = true;
  384|     71|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  385|     71|        }
  386|       |
  387|       |        // Do nothing when processor is halted
  388|  8.53M|        if (m_Halted)
  ------------------
  |  Branch (388:13): [True: 71, False: 8.53M]
  ------------------
  389|     71|        {
  390|     71|            return;
  391|     71|        }
  392|       |
  393|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  394|  8.53M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  395|       |
  396|       |        // Get current instruction pointed to by the program counter
  397|  8.53M|        const auto& current_instruction =
  398|  8.53M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  399|       |
  400|       |        // Execute current instruction
  401|  8.53M|        ExecuteInstruction(current_instruction);
  402|       |
  403|       |        // Stop executing if the last instruction halted the processor
  404|  8.53M|        if (m_Halted)
  ------------------
  |  Branch (404:13): [True: 288, False: 8.53M]
  ------------------
  405|    288|        {
  406|    288|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  407|    288|            return;
  408|    288|        }
  409|       |
  410|  8.53M|        m_ProgramCounter = m_NextProgramCounter;
  411|       |
  412|  8.53M|        ++m_CurrentStepCount;
  413|       |
  414|  8.53M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (414:13): [True: 1.18k, False: 8.53M]
  |  Branch (414:14): [True: 8.53M, False: 0]
  |  Branch (414:42): [True: 853, False: 8.53M]
  ------------------
  415|  8.53M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (415:13): [True: 328, False: 8.53M]
  ------------------
  416|  1.18k|        {
  417|  1.18k|            m_Halted                       = true;
  418|  1.18k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  419|  1.18k|        }
  420|  8.53M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  423|  1.54k|    {
  424|       |        // Do nothing when no program is loaded
  425|  1.54k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (425:13): [True: 0, False: 1.54k]
  ------------------
  426|      0|        {
  427|      0|            return;
  428|      0|        }
  429|       |
  430|  1.54k|        m_ProgramCounter               = 0u;
  431|  1.54k|        m_Halted                       = false;
  432|  1.54k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  433|  1.54k|        m_LastRaisedException          = Exception::None;
  434|  1.54k|        m_CurrentStepCount             = 0u;
  435|       |
  436|  8.53M|        while (!m_Halted)
  ------------------
  |  Branch (436:16): [True: 8.53M, False: 1.54k]
  ------------------
  437|  8.53M|        {
  438|  8.53M|            ExecuteStep();
  439|  8.53M|        }
  440|       |
  441|  1.54k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  442|  1.54k|                   "RegisterAccessType was not reset correctly");
  443|  1.54k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  459|  7.90k|    {
  460|  7.90k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (460:24): [True: 253k, False: 7.90k]
  ------------------
  461|   253k|        {
  462|   253k|            reg.SetSignedValue(0);
  463|   253k|        }
  464|       |
  465|  7.90k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (465:24): [True: 253k, False: 7.90k]
  ------------------
  466|   253k|        {
  467|   253k|            reg.SetValue(0.0f);
  468|   253k|        }
  469|       |
  470|  7.90k|        m_FPSR.SetStatus(false);
  471|  7.90k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  474|  7.90k|    {
  475|  7.90k|        m_MemoryBlock.Clear();
  476|  7.90k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  483|   488k|    {
  484|   488k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  485|       |
  486|   488k|        m_LastRaisedException = exception;
  487|       |
  488|   488k|        switch (exception)
  489|   488k|        {
  490|      7|            case Exception::DivideByZero:
  ------------------
  |  Branch (490:13): [True: 7, False: 488k]
  ------------------
  491|      7|                m_Halted = true;
  492|      7|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  493|      7|                return;
  494|   122k|            case Exception::Overflow:
  ------------------
  |  Branch (494:13): [True: 122k, False: 366k]
  ------------------
  495|   122k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|   122k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  496|   122k|                return;
  497|  97.7k|            case Exception::Underflow:
  ------------------
  |  Branch (497:13): [True: 97.7k, False: 390k]
  ------------------
  498|  97.7k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  97.7k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  499|  97.7k|                return;
  500|      1|            case Exception::Trap:
  ------------------
  |  Branch (500:13): [True: 1, False: 488k]
  ------------------
  501|      1|                m_Halted = true;
  502|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  503|      1|                return;
  504|      2|            case Exception::Halt:
  ------------------
  |  Branch (504:13): [True: 2, False: 488k]
  ------------------
  505|      2|                m_Halted = true;
  506|      2|                return;
  507|    146|            case Exception::UnknownLabel:
  ------------------
  |  Branch (507:13): [True: 146, False: 488k]
  ------------------
  508|    146|                m_Halted = true;
  509|    146|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    146|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  510|    146|                return;
  511|   268k|            case Exception::BadShift:
  ------------------
  |  Branch (511:13): [True: 268k, False: 220k]
  ------------------
  512|   268k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   268k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  513|   268k|                return;
  514|    109|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (514:13): [True: 109, False: 488k]
  ------------------
  515|    109|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|    109|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  516|    109|                m_Halted = true;
  517|    109|                return;
  518|     29|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (518:13): [True: 29, False: 488k]
  ------------------
  519|     29|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     29|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     29|                m_Halted = true;
  521|     29|                return;
  522|       |
  523|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  524|      0|            default:
  ------------------
  |  Branch (524:13): [True: 0, False: 488k]
  ------------------
  525|      0|                PHI_ASSERT_NOT_REACHED();
  526|   488k|#endif
  527|   488k|        }
  528|       |
  529|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  530|      0|        PHI_ASSERT_NOT_REACHED();
  531|      0|#endif
  532|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  553|   340k|    {
  554|   340k|        return m_MemoryBlock;
  555|   340k|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  568|  83.3k|    {
  569|  83.3k|        return m_NextProgramCounter;
  570|  83.3k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  573|  2.41M|    {
  574|  2.41M|        m_NextProgramCounter = new_npc;
  575|  2.41M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   34|  11.3M|    {
   35|  11.3M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   36|  11.3M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   37|       |
   38|  11.3M|        switch (expected_access)
   39|  11.3M|        {
   40|  1.70M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (40:13): [True: 1.70M, False: 9.64M]
  ------------------
   41|  1.70M|                return true;
   42|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (42:13): [True: 0, False: 11.3M]
  ------------------
   43|      0|                return false;
   44|   162k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (44:13): [True: 162k, False: 11.1M]
  ------------------
   45|   162k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (45:24): [True: 81.2k, False: 81.2k]
  |  Branch (45:63): [True: 81.2k, False: 0]
  ------------------
   46|   117k|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (46:13): [True: 117k, False: 11.2M]
  ------------------
   47|   117k|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (47:24): [True: 1, False: 117k]
  ------------------
   48|   117k|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (48:24): [True: 117k, False: 0]
  ------------------
   49|  32.4k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (49:13): [True: 32.4k, False: 11.3M]
  ------------------
   50|  32.4k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (50:24): [True: 32.4k, False: 1]
  |  Branch (50:63): [True: 1, False: 0]
  ------------------
   51|  49.2k|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (51:13): [True: 49.2k, False: 11.2M]
  ------------------
   52|  49.2k|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 49.2k, False: 3]
  |  Branch (52:64): [True: 3, False: 0]
  ------------------
   53|  9.27M|            default:
  ------------------
  |  Branch (53:13): [True: 9.27M, False: 2.06M]
  ------------------
   54|  9.27M|                return expected_access == access;
   55|  11.3M|        }
   56|  11.3M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   615k|    {
   11|   615k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 103k, False: 512k]
  ------------------
   12|   103k|        {
   13|   103k|            const char first_char = token[0u];
   14|   103k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 1.81k, False: 101k]
  |  Branch (14:38): [True: 26.5k, False: 74.8k]
  ------------------
   15|  28.3k|            {
   16|  28.3k|                const char second_char = token[1u];
   17|  28.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 27.7k, False: 632]
  |  Branch (17:43): [True: 25.1k, False: 2.56k]
  ------------------
   18|  25.1k|                {
   19|  25.1k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  25.1k|                }
   21|  28.3k|            }
   22|   103k|        }
   23|   512k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 132k, False: 379k]
  ------------------
   24|   132k|        {
   25|   132k|            const char first_char = token[0u];
   26|   132k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 932, False: 131k]
  |  Branch (26:38): [True: 7.34k, False: 124k]
  ------------------
   27|  8.27k|            {
   28|  8.27k|                const char second_char = token[1u];
   29|  8.27k|                const char third_char  = token[2u];
   30|       |
   31|  8.27k|                switch (second_char)
   32|  8.27k|                {
   33|  2.77k|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 2.77k, False: 5.50k]
  ------------------
   34|  2.77k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 2.32k, False: 450]
  |  Branch (34:50): [True: 1.36k, False: 962]
  ------------------
   35|  1.36k|                        {
   36|  1.36k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|  1.36k|                        }
   38|  1.41k|                        break;
   39|  2.77k|                    }
   40|  1.80k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 1.80k, False: 6.47k]
  ------------------
   41|  1.80k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 1.09k, False: 706]
  |  Branch (41:50): [True: 752, False: 342]
  ------------------
   42|    752|                        {
   43|    752|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    752|                        }
   45|  1.04k|                        break;
   46|  1.80k|                    }
   47|  1.04k|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 754, False: 7.52k]
  ------------------
   48|    754|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 560]
  |  Branch (48:50): [True: 212, False: 348]
  ------------------
   49|    406|                        {
   50|    406|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    406|                        }
   52|    348|                        break;
   53|    754|                    }
   54|  2.95k|                    default: {
  ------------------
  |  Branch (54:21): [True: 2.95k, False: 5.32k]
  ------------------
   55|  2.95k|                        break;
   56|    754|                    }
   57|  8.27k|                }
   58|  8.27k|            }
   59|   132k|        }
   60|       |
   61|   587k|        return IntRegisterID::None;
   62|   615k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   587k|    {
   66|   587k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 78.0k, False: 509k]
  ------------------
   67|  78.0k|        {
   68|  78.0k|            const char first_char = token[0u];
   69|  78.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 3.86k, False: 74.1k]
  |  Branch (69:38): [True: 9.18k, False: 65.0k]
  ------------------
   70|  13.0k|            {
   71|  13.0k|                const char second_char = token[1u];
   72|  13.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 9.57k, False: 3.47k]
  |  Branch (72:43): [True: 8.29k, False: 1.28k]
  ------------------
   73|  8.29k|                {
   74|  8.29k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  8.29k|                }
   76|  13.0k|            }
   77|  78.0k|        }
   78|   509k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 129k, False: 379k]
  ------------------
   79|   129k|        {
   80|   129k|            const char first_char = token[0u];
   81|   129k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 4.65k, False: 125k]
  |  Branch (81:38): [True: 3.90k, False: 121k]
  ------------------
   82|  8.55k|            {
   83|  8.55k|                const char second_char = token[1u];
   84|  8.55k|                const char third_char  = token[2u];
   85|       |
   86|  8.55k|                switch (second_char)
   87|  8.55k|                {
   88|    857|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 857, False: 7.69k]
  ------------------
   89|    857|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 663, False: 194]
  |  Branch (89:50): [True: 240, False: 423]
  ------------------
   90|    240|                        {
   91|    240|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    240|                        }
   93|    617|                        break;
   94|    857|                    }
   95|  1.80k|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 1.80k, False: 6.75k]
  ------------------
   96|  1.80k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 1.60k, False: 199]
  |  Branch (96:50): [True: 203, False: 1.40k]
  ------------------
   97|    203|                        {
   98|    203|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    203|                        }
  100|  1.60k|                        break;
  101|  1.80k|                    }
  102|  1.67k|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 1.67k, False: 6.87k]
  ------------------
  103|  1.67k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 450, False: 1.22k]
  |  Branch (103:50): [True: 450, False: 777]
  ------------------
  104|    900|                        {
  105|    900|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    900|                        }
  107|    777|                        break;
  108|  1.67k|                    }
  109|  4.21k|                    default: {
  ------------------
  |  Branch (109:21): [True: 4.21k, False: 4.33k]
  ------------------
  110|  4.21k|                        break;
  111|  1.67k|                    }
  112|  8.55k|                }
  113|  8.55k|            }
  114|   129k|        }
  115|       |
  116|   578k|        return FloatRegisterID::None;
  117|   587k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   566k|    {
  121|   566k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 122k, False: 443k]
  ------------------
  122|   122k|        {
  123|   122k|            const char c1 = token[0u];
  124|   122k|            const char c2 = token[1u];
  125|   122k|            const char c3 = token[2u];
  126|   122k|            const char c4 = token[3u];
  127|       |
  128|   122k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 1.35k, False: 121k]
  |  Branch (128:34): [True: 4.76k, False: 116k]
  |  Branch (128:49): [True: 312, False: 5.81k]
  |  Branch (128:62): [True: 4.20k, False: 1.61k]
  ------------------
  129|   122k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 3.17k, False: 1.34k]
  |  Branch (129:34): [True: 1.09k, False: 251]
  |  Branch (129:49): [True: 1.04k, False: 3.21k]
  |  Branch (129:62): [True: 3.05k, False: 158]
  ------------------
  130|   122k|        }
  131|       |
  132|   443k|        return false;
  133|   566k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   599k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|   238k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|  1.43M|    {
   40|  1.43M|        return m_Type;
   41|  1.43M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   662k|    {
   50|   662k|        return m_LineNumber;
   51|   662k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   586k|    {
   55|   586k|        return m_Column;
   56|   586k|    }
_ZNK3dlx5Token7GetTextEv:
   64|   703k|    {
   65|   703k|        return m_Text;
   66|   703k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  82.3k|    {
   79|  82.3k|        return m_HasHint;
   80|  82.3k|    }
_ZNK3dlx5Token7GetHintEv:
   83|   111k|    {
   84|   111k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|   111k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|   111k|                   m_Type == Type::ImmediateInteger);
   87|   111k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|   111k|        return m_Hint;
   90|   111k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  7.90k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  7.90k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  7.90k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|  2.44k|    {
   50|  2.44k|        return x + m_Iterator <= m_Tokens.size();
   51|  2.44k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   839k|    {
   55|   839k|        return m_Iterator < m_Tokens.size();
   56|   839k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   838k|    {
   60|   838k|        return m_Iterator >= m_Tokens.size();
   61|   838k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   838k|    {
   75|   838k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   838k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   838k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|  2.44k|    {
  155|  2.44k|        return m_Iterator;
  156|  2.44k|    }
_ZN3dlx11TokenStream12set_positionEN3phi7integerImEE:
  159|    615|    {
  160|       |#if defined(PHI_DEBUG)
  161|       |        PHI_ASSERT(m_Finalized);
  162|       |#endif
  163|       |
  164|    615|        m_Iterator = pos;
  165|    615|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|  1.02k|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|  1.02k|        return m_Tokens.rbegin();
  210|  1.02k|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  36.3k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  36.3k|        return m_Tokens.rend();
  219|  36.3k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  7.90k|    {
   66|  7.90k|        TokenStream tokens;
   67|       |
   68|  7.90k|        phi::string_view current_token;
   69|       |
   70|  7.90k|        phi::u64 current_line_number{1u};
   71|  7.90k|        phi::u64 current_column{1u};
   72|  7.90k|        phi::u64 token_begin{0u};
   73|       |
   74|  7.90k|        phi::boolean parsing_comment{false};
   75|       |
   76|  2.35M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 2.34M, False: 7.90k]
  ------------------
   77|  2.34M|        {
   78|  2.34M|            const char c{source.at(i)};
   79|       |
   80|  2.34M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 107k, False: 2.24M]
  ------------------
   81|   107k|            {
   82|   107k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 12.6k, False: 94.7k]
  ------------------
   83|  12.6k|                {
   84|       |                    // Skip empty lines
   85|  12.6k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  12.6k|                                        current_line_number, current_column);
   87|       |
   88|  12.6k|                    parsing_comment = false;
   89|  12.6k|                    current_line_number += 1u;
   90|  12.6k|                    current_column = 1u;
   91|  12.6k|                    continue;
   92|  12.6k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  94.7k|                tokens.emplace_back(ParseToken(
   96|  94.7k|                        source.substring_view(
   97|  94.7k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  94.7k|                                current_token.length()),
   99|  94.7k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  94.7k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  94.7k|                                    current_line_number, current_column);
  103|       |
  104|  94.7k|                current_token   = phi::string_view{};
  105|  94.7k|                parsing_comment = false;
  106|  94.7k|                current_line_number += 1u;
  107|  94.7k|                current_column = 0u;
  108|  94.7k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  2.24M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 2.83k, False: 2.23M]
  |  Branch (110:34): [True: 4.68k, False: 2.23M]
  ------------------
  111|  7.52k|            {
  112|  7.52k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 750, False: 6.77k]
  ------------------
  113|    750|                {
  114|    750|                    token_begin = i;
  115|    750|                }
  116|  6.77k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 6.22k, False: 547]
  ------------------
  117|  6.22k|                {
  118|  6.22k|                    tokens.emplace_back(ParseToken(
  119|  6.22k|                            source.substring_view(
  120|  6.22k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  6.22k|                                    current_token.length()),
  122|  6.22k|                            current_line_number, current_column - current_token.length()));
  123|  6.22k|                    token_begin   = i;
  124|  6.22k|                    current_token = phi::string_view{};
  125|  6.22k|                }
  126|       |
  127|  7.52k|                parsing_comment = true;
  128|  7.52k|                current_token   = source.substring_view(
  129|  7.52k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  7.52k|                        current_token.length() + 1u);
  131|  7.52k|            }
  132|  2.23M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 1.71k, False: 2.23M]
  ------------------
  133|  1.71k|            {
  134|       |                // simply append the character
  135|  1.71k|                current_token = source.substring_view(
  136|  1.71k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  1.71k|                        current_token.length() + 1u);
  138|  1.71k|            }
  139|  2.23M|            else
  140|  2.23M|            {
  141|       |                // Not parsing a comment
  142|  2.23M|                switch (c)
  143|  2.23M|                {
  144|  30.1k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 30.1k, False: 2.20M]
  ------------------
  145|  40.7k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 10.5k, False: 2.22M]
  ------------------
  146|  52.2k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 11.5k, False: 2.22M]
  ------------------
  147|  52.2k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 4.49k, False: 47.7k]
  ------------------
  148|  4.49k|                        {
  149|  4.49k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  4.49k|                            continue;
  152|  4.49k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  47.7k|                        tokens.emplace_back(ParseToken(
  156|  47.7k|                                source.substring_view(
  157|  47.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  47.7k|                                        current_token.length()),
  159|  47.7k|                                current_line_number, current_column - current_token.length()));
  160|  47.7k|                        current_token = phi::string_view{};
  161|  47.7k|                        break;
  162|   142k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 142k, False: 2.08M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|   142k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 132k, False: 10.1k]
  ------------------
  165|   132k|                        {
  166|   132k|                            current_token = source.substring_view(
  167|   132k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|   132k|                                    current_token.length() + 1u);
  169|   132k|                            tokens.emplace_back(ParseToken(
  170|   132k|                                    source.substring_view(
  171|   132k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|   132k|                                                    token_begin),
  173|   132k|                                            current_token.length()),
  174|   132k|                                    current_line_number,
  175|   132k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|   132k|                            current_token = phi::string_view{};
  178|   132k|                        }
  179|  10.1k|                        else
  180|  10.1k|                        {
  181|       |                            // Orphan colon
  182|  10.1k|                            token_begin = i;
  183|       |
  184|  10.1k|                            tokens.emplace_back(
  185|  10.1k|                                    Token::Type::Colon,
  186|  10.1k|                                    source.substring_view(
  187|  10.1k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  10.1k|                                                    token_begin),
  189|  10.1k|                                            1u),
  190|  10.1k|                                    current_line_number, current_column);
  191|  10.1k|                        }
  192|   142k|                        break;
  193|   156k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 156k, False: 2.07M]
  ------------------
  194|   174k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 17.8k, False: 2.21M]
  ------------------
  195|   233k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 59.3k, False: 2.17M]
  ------------------
  196|   233k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 199k, False: 33.6k]
  ------------------
  197|   199k|                        {
  198|   199k|                            tokens.emplace_back(ParseToken(
  199|   199k|                                    source.substring_view(
  200|   199k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   199k|                                                    token_begin),
  202|   199k|                                            current_token.length()),
  203|   199k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   199k|                            current_token = phi::string_view{};
  206|   199k|                        }
  207|       |
  208|   233k|                        Token::Type type;
  209|   233k|                        switch (c)
  210|   233k|                        {
  211|   156k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 156k, False: 77.2k]
  ------------------
  212|   156k|                                type = Token::Type::Comma;
  213|   156k|                                break;
  214|  17.8k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 17.8k, False: 215k]
  ------------------
  215|  17.8k|                                type = Token::Type::OpenBracket;
  216|  17.8k|                                break;
  217|  59.3k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 59.3k, False: 174k]
  ------------------
  218|  59.3k|                                type = Token::Type::ClosingBracket;
  219|  59.3k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 233k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   233k|#endif
  225|   233k|                        }
  226|       |
  227|   233k|                        token_begin = i;
  228|       |
  229|   233k|                        tokens.emplace_back(
  230|   233k|                                type,
  231|   233k|                                source.substring_view(
  232|   233k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   233k|                                        1u),
  234|   233k|                                current_line_number, current_column);
  235|   233k|                        break;
  236|       |
  237|  1.80M|                    default:
  ------------------
  |  Branch (237:21): [True: 1.80M, False: 428k]
  ------------------
  238|  1.80M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 480k, False: 1.32M]
  ------------------
  239|   480k|                        {
  240|   480k|                            token_begin = i;
  241|   480k|                        }
  242|       |
  243|       |                        // simply append the character
  244|  1.80M|                        current_token = source.substring_view(
  245|  1.80M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  1.80M|                                current_token.length() + 1u);
  247|  2.23M|                }
  248|  2.23M|            }
  249|       |
  250|  2.33M|            current_column += 1u;
  251|  2.33M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  7.90k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 6.22k, False: 1.68k]
  ------------------
  255|  6.22k|        {
  256|  6.22k|            tokens.emplace_back(
  257|  6.22k|                    ParseToken(source.substring_view(
  258|  6.22k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  6.22k|                                       current_token.length()),
  260|  6.22k|                               current_line_number, current_column - current_token.length()));
  261|  6.22k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  7.90k|        tokens.finalize();
  265|       |
  266|  7.90k|        return tokens;
  267|  7.90k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   487k|    {
   14|   487k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 5.81k, False: 481k]
  |  Branch (14:13): [True: 5.48k, False: 481k]
  |  Branch (14:36): [True: 5.48k, False: 334]
  ------------------
   15|  5.48k|        {
   16|  5.48k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  5.48k|            if (number)
  ------------------
  |  Branch (18:17): [True: 4.20k, False: 1.27k]
  ------------------
   19|  4.20k|            {
   20|  4.20k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  4.20k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  4.20k|            }
   23|       |
   24|  1.27k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  5.48k|        }
   26|       |
   27|   481k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 2.59k, False: 479k]
  |  Branch (27:13): [True: 6.97k, False: 474k]
  |  Branch (27:36): [True: 4.37k, False: 474k]
  ------------------
   28|  6.97k|        {
   29|  6.97k|            return {Token::Type::Comment, token, line_number, column};
   30|  6.97k|        }
   31|       |
   32|   474k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 6.94k, False: 467k]
  ------------------
   33|  6.94k|        {
   34|  6.94k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  6.94k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  6.94k|        }
   37|       |
   38|   467k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 2.93k, False: 464k]
  ------------------
   39|  2.93k|        {
   40|  2.93k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  2.93k|        }
   42|       |
   43|   464k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 26.2k, False: 438k]
  ------------------
   44|  26.2k|        {
   45|  26.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  26.2k|                    static_cast<phi::uint32_t>(id)};
   47|  26.2k|        }
   48|       |
   49|   438k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 8.72k, False: 429k]
  ------------------
   50|  8.72k|        {
   51|  8.72k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  8.72k|                    static_cast<phi::uint32_t>(id)};
   53|  8.72k|        }
   54|       |
   55|   429k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 192k, False: 237k]
  ------------------
   56|   192k|        {
   57|   192k|            return {Token::Type::OpCode, token, line_number, column,
   58|   192k|                    static_cast<phi::uint32_t>(opcode)};
   59|   192k|        }
   60|       |
   61|   237k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   429k|    }

LLVMFuzzerTestOneInput:
   10|  7.90k|{
   11|  7.90k|    static dlx::Processor processor;
   12|       |
   13|  7.90k|    phi::string_view source = phi::string_view(reinterpret_cast<const char*>(data), size);
   14|       |
   15|       |    // Parse it
   16|  7.90k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   17|       |
   18|       |    // Clear registers and memory
   19|  7.90k|    processor.ClearRegisters();
   20|  7.90k|    processor.ClearMemory();
   21|       |
   22|       |    // Execute
   23|  7.90k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (23:9): [True: 1.54k, False: 6.36k]
  ------------------
   24|  1.54k|    {
   25|  1.54k|        processor.ExecuteCurrentProgram();
   26|  1.54k|    }
   27|       |
   28|  7.90k|    return 0;
   29|  7.90k|}


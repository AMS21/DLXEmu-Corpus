_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  17.0k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  3.41k|    {
  240|  3.41k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 2.19k, False: 1.21k]
  ------------------
  241|  2.19k|        {
  242|  2.19k|            return m_Line < other.m_Line;
  243|  2.19k|        }
  244|       |
  245|  1.21k|        return m_Column <= other.m_Column;
  246|  3.41k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|   437k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  3.41k|    {
  349|  3.41k|        m_ErrorMarkers.clear();
  350|  3.41k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  3.41k|    {
  414|  3.41k|        m_Breakpoints.clear();
  415|  3.41k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  3.41k|    {
  494|  3.41k|        m_Lines.clear();
  495|  3.41k|        ResetState();
  496|  3.41k|        m_Lines.emplace_back(Line());
  497|       |
  498|  3.41k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 558k, False: 3.41k]
  ------------------
  499|   558k|        {
  500|   558k|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 1.10k, False: 557k]
  |  Branch (500:17): [True: 34.4k, False: 524k]
  ------------------
  501|   558k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 121k, False: 436k]
  |  Branch (501:48): [True: 34.2k, False: 87.0k]
  |  Branch (501:69): [True: 33.3k, False: 833]
  ------------------
  502|  34.4k|            {
  503|       |                // ignore the carriage return character and control characters
  504|  34.4k|            }
  505|   524k|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 87.0k, False: 437k]
  ------------------
  506|  87.0k|            {
  507|  87.0k|                m_Lines.emplace_back(Line());
  508|  87.0k|            }
  509|   437k|            else
  510|   437k|            {
  511|   437k|                m_Lines.back().emplace_back(
  512|   437k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|   437k|            }
  514|   558k|        }
  515|       |
  516|  3.41k|        m_TextChanged = true;
  517|  3.41k|        m_ScrollToTop = true;
  518|       |
  519|  3.41k|        m_UndoBuffer.clear();
  520|  3.41k|        m_UndoIndex = 0u;
  521|       |
  522|  3.41k|        Colorize();
  523|  3.41k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  3.41k|    {
  527|  3.41k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  3.41k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  3.41k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  3.41k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  3.41k|        const phi::u32 to_line =
 1724|  3.41k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 3.41k, False: 0]
  ------------------
 1725|  3.41k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  3.41k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  3.41k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  3.41k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  3.41k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  3.41k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  3.41k|    {
 1839|  3.41k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  3.41k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  3.41k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  3.41k|        std::string result;
 1844|       |
 1845|  3.41k|        phi::u32   lstart = start.m_Line;
 1846|  3.41k|        phi::u32   lend   = end.m_Line;
 1847|  3.41k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  3.41k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  3.41k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  3.41k|        phi::usize size   = 0u;
 1851|       |
 1852|  93.9k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 90.4k, False: 3.41k]
  ------------------
 1853|  90.4k|        {
 1854|  90.4k|            PHI_ASSERT(i < m_Lines.size());
 1855|  90.4k|            size += m_Lines[i.unsafe()].size();
 1856|  90.4k|        }
 1857|       |
 1858|  3.41k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|   527k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 195k, False: 331k]
  |  Branch (1860:16): [True: 524k, False: 3.41k]
  |  Branch (1860:33): [True: 328k, False: 3.41k]
  ------------------
 1861|   524k|        {
 1862|   524k|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|   524k|            const Line& line = m_Lines[lstart.unsafe()];
 1865|   524k|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 437k, False: 87.0k]
  ------------------
 1866|   437k|            {
 1867|   437k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|   437k|                istart++;
 1869|   437k|            }
 1870|  87.0k|            else
 1871|  87.0k|            {
 1872|  87.0k|                istart = 0u;
 1873|  87.0k|                ++lstart;
 1874|       |
 1875|  87.0k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 87.0k, False: 0]
  ------------------
 1876|  87.0k|                {
 1877|  87.0k|                    result += '\n';
 1878|  87.0k|                }
 1879|  87.0k|            }
 1880|   524k|        }
 1881|       |
 1882|  3.41k|        return result;
 1883|  3.41k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  6.82k|    {
 2422|  6.82k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  6.82k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  6.82k|        phi::u32    index = 0u;
 2426|   133k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 130k, False: 3.55k]
  |  Branch (2426:35): [True: 126k, False: 6.82k]
  |  Branch (2426:58): [True: 126k, False: 3.27k]
  ------------------
 2427|   126k|        {
 2428|   126k|            PHI_ASSERT(index < line.size());
 2429|   126k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   126k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 126k]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|   126k|            else
 2436|   126k|            {
 2437|   126k|                ++column;
 2438|   126k|            }
 2439|       |
 2440|   126k|            index += UTF8CharLength(character);
 2441|   126k|        }
 2442|       |
 2443|  6.82k|        return index;
 2444|  6.82k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  3.41k|    {
 2494|  3.41k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 3.41k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  3.41k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  3.41k|        phi::u32    col  = 0u;
 2501|       |
 2502|   130k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 126k, False: 3.41k]
  ------------------
 2503|   126k|        {
 2504|   126k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   126k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 126k]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|   126k|            else
 2510|   126k|            {
 2511|   126k|                col++;
 2512|   126k|            }
 2513|       |
 2514|   126k|            i += UTF8CharLength(character);
 2515|   126k|        }
 2516|       |
 2517|  3.41k|        return col;
 2518|  3.41k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  3.41k|    {
 2522|  3.41k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  3.41k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  3.41k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   233k|    {
 3661|   233k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   233k|        switch (token.GetType())
 3665|   233k|        {
 3666|  41.0k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 41.0k, False: 192k]
  ------------------
 3667|  41.0k|                palette_index = PaletteIndex::Comment;
 3668|  41.0k|                break;
 3669|  2.25k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 2.25k, False: 230k]
  ------------------
 3670|  5.22k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 2.96k, False: 230k]
  ------------------
 3671|  5.22k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  5.22k|                break;
 3673|  40.0k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 40.0k, False: 193k]
  ------------------
 3674|  40.0k|                palette_index = PaletteIndex::OpCode;
 3675|  40.0k|                break;
 3676|  2.46k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 2.46k, False: 230k]
  ------------------
 3677|  10.1k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 7.68k, False: 225k]
  ------------------
 3678|  12.6k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 2.47k, False: 230k]
  ------------------
 3679|  12.6k|                palette_index = PaletteIndex::Register;
 3680|  12.6k|                break;
 3681|  87.0k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 87.0k, False: 146k]
  ------------------
 3682|  87.0k|                return;
 3683|  47.0k|            default:
  ------------------
  |  Branch (3683:13): [True: 47.0k, False: 186k]
  ------------------
 3684|  47.0k|                break;
 3685|   233k|        }
 3686|       |
 3687|   146k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   146k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   146k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|   550k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 404k, False: 146k]
  ------------------
 3692|   404k|        {
 3693|   404k|            PHI_ASSERT(index < line.size());
 3694|   404k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|   404k|        }
 3696|   146k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  3.41k|    {
 3700|  3.41k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  3.41k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 233k, False: 3.41k]
  ------------------
 3703|   233k|        {
 3704|   233k|            ColorizeToken(token);
 3705|   233k|        }
 3706|  3.41k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  3.41k|    {
 3710|  3.41k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  3.41k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  3.41k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  3.41k|        ClearBreakPoints();
 3716|  3.41k|        ClearErrorMarkers();
 3717|  3.41k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   126k|{
  135|   126k|    return UTF8CharLength(static_cast<char>(characater));
  136|   126k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|   253k|{
  105|   253k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 253k]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|   253k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 253k]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|   253k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 253k]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|   253k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 253k]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|   253k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 253k]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|   253k|    return 1_u8;
  131|   253k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  3.41k|    {
  184|  3.41k|        return m_DLXProgram;
  185|  3.41k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  3.41k|    {
  189|  3.41k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  3.41k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 155, False: 3.25k]
  ------------------
  192|    155|        {
  193|    155|            m_Processor.LoadProgram(m_DLXProgram);
  194|    155|        }
  195|  3.41k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  3.41k|    {
  209|  3.41k|        return m_CodeEditor;
  210|  3.41k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  79.0k|        {
  173|  79.0k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  79.0k|            switch (index.unsafe())
  176|  79.0k|            {
  177|  32.0k|                case 0:
  ------------------
  |  Branch (177:17): [True: 32.0k, False: 46.9k]
  ------------------
  178|  32.0k|                    return m_Arg1Type;
  179|       |
  180|  23.9k|                case 1:
  ------------------
  |  Branch (180:17): [True: 23.9k, False: 55.1k]
  ------------------
  181|  23.9k|                    return m_Arg2Type;
  182|       |
  183|  23.0k|                case 2:
  ------------------
  |  Branch (183:17): [True: 23.0k, False: 55.9k]
  ------------------
  184|  23.0k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 79.0k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  79.0k|#endif
  191|  79.0k|            }
  192|  79.0k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  21.3k|        {
  199|  21.3k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  21.3k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 21.1k, False: 162]
  ------------------
  203|  21.1k|            {
  204|  21.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  21.1k|            }
  206|  21.3k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 15.9k, False: 5.33k]
  ------------------
  207|  15.9k|            {
  208|  15.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  15.9k|            }
  210|  21.3k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 9.88k, False: 11.4k]
  ------------------
  211|  9.88k|            {
  212|  9.88k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  9.88k|            }
  214|       |
  215|  21.3k|            return number_of_argument_required;
  216|  21.3k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  21.3k|        {
  225|  21.3k|            return m_Executor;
  226|  21.3k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  10.5k|    {
   38|  10.5k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  10.5k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  10.5k|                                         static_cast<underlying_t>(rhs));
   42|  10.5k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  10.5k|    {
   55|  10.5k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  10.5k|        return static_cast<underlying_t>(type & test) != 0;
   58|  10.5k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  29.6k|    {
  206|  29.6k|        switch (value)
  207|  29.6k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  4.00k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  4.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.00k, False: 25.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.00k|        return #name;
  |  |  ------------------
  |  |   16|  4.00k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    440|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 440, False: 29.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    440|        return #name;
  |  |  ------------------
  |  |   17|    440|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    383|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 383, False: 29.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    383|        return #name;
  |  |  ------------------
  |  |   18|    554|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    554|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 554, False: 29.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    554|        return #name;
  |  |  ------------------
  |  |   19|    554|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    445|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 445, False: 29.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    445|        return #name;
  |  |  ------------------
  |  |   20|    554|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    554|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 554, False: 29.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    554|        return #name;
  |  |  ------------------
  |  |   21|    554|                                                                                                   \
  |  |   22|    554|    /* Sub */                                                                                      \
  |  |   23|    554|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 209, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    209|        return #name;
  |  |  ------------------
  |  |   24|    209|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   25|    414|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    414|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 414, False: 29.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    414|        return #name;
  |  |  ------------------
  |  |   26|    414|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    222|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 222, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    222|        return #name;
  |  |  ------------------
  |  |   27|    222|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   28|    196|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   29|     68|                                                                                                   \
  |  |   30|     68|    /* Multiplication */                                                                           \
  |  |   31|     77|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 77, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     77|        return #name;
  |  |  ------------------
  |  |   32|     77|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 76, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     76|        return #name;
  |  |  ------------------
  |  |   33|     76|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |   34|    323|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    323|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 323, False: 29.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    323|        return #name;
  |  |  ------------------
  |  |   35|    323|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |   36|    204|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   37|     66|                                                                                                   \
  |  |   38|     66|    /* Division */                                                                                 \
  |  |   39|    194|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   40|    218|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 218, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    218|        return #name;
  |  |  ------------------
  |  |   41|    218|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   42|    328|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    328|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 328, False: 29.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    328|        return #name;
  |  |  ------------------
  |  |   43|    328|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   44|    194|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   45|    194|                                                                                                   \
  |  |   46|    194|    /* Shift left (logical) */                                                                     \
  |  |   47|    198|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |   48|    214|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    214|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 214, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    214|        return #name;
  |  |  ------------------
  |  |   49|    214|                                                                                                   \
  |  |   50|    214|    /* Shift right (logical) */                                                                    \
  |  |   51|    214|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   52|     67|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   53|     67|                                                                                                   \
  |  |   54|     67|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    194|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   56|    194|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   57|    194|                                                                                                   \
  |  |   58|    194|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    711|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    711|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 711, False: 28.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    711|        return #name;
  |  |  ------------------
  |  |   60|    711|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |   61|     83|                                                                                                   \
  |  |   62|     83|    /* Logic */                                                                                    \
  |  |   63|     83|                                                                                                   \
  |  |   64|     83|    /* And */                                                                                      \
  |  |   65|    295|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    295|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 295, False: 29.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    295|        return #name;
  |  |  ------------------
  |  |   66|    295|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   67|     70|                                                                                                   \
  |  |   68|     70|    /* Or */                                                                                       \
  |  |   69|    194|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   70|    194|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   71|    194|                                                                                                   \
  |  |   72|    194|    /* XOR */                                                                                      \
  |  |   73|    205|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 205, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    205|        return #name;
  |  |  ------------------
  |  |   74|    205|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|     75|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 75, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     75|        return #name;
  |  |  ------------------
  |  |   80|    205|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 205, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    205|        return #name;
  |  |  ------------------
  |  |   81|    205|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |   82|    207|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    207|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 207, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    207|        return #name;
  |  |  ------------------
  |  |   83|    207|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 102, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    102|        return #name;
  |  |  ------------------
  |  |   84|    102|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   85|     67|                                                                                                   \
  |  |   86|     67|    /* Greater than */                                                                             \
  |  |   87|     71|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |   88|    224|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 224, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    224|        return #name;
  |  |  ------------------
  |  |   89|    224|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   90|    231|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    231|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 231, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    231|        return #name;
  |  |  ------------------
  |  |   91|    231|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    203|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 203, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    203|        return #name;
  |  |  ------------------
  |  |   92|    203|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 201, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    201|        return #name;
  |  |  ------------------
  |  |   93|    201|                                                                                                   \
  |  |   94|    201|    /* Less than or equal */                                                                       \
  |  |   95|    454|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    454|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 454, False: 29.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    454|        return #name;
  |  |  ------------------
  |  |   96|    454|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   97|    194|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   98|     70|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   99|    209|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 209, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    209|        return #name;
  |  |  ------------------
  |  |  100|    209|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  101|    194|                                                                                                   \
  |  |  102|    194|    /* Greater than or equal */                                                                    \
  |  |  103|    194|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 73, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     73|        return #name;
  |  |  ------------------
  |  |  104|     73|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  105|    968|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    968|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 968, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    968|        return #name;
  |  |  ------------------
  |  |  106|    968|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    369|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 369, False: 29.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    369|        return #name;
  |  |  ------------------
  |  |  107|    369|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |  108|    380|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    380|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 380, False: 29.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    380|        return #name;
  |  |  ------------------
  |  |  109|    380|                                                                                                   \
  |  |  110|    380|    /* Equal */                                                                                    \
  |  |  111|    380|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  112|    236|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 236, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    236|        return #name;
  |  |  ------------------
  |  |  113|    236|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |  114|  1.07k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.07k, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.07k|        return #name;
  |  |  ------------------
  |  |  115|  1.07k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  116|     66|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|     68|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  120|    227|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    227|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 227, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    227|        return #name;
  |  |  ------------------
  |  |  121|    227|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  122|    195|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  123|     66|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  124|     75|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 75, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     75|        return #name;
  |  |  ------------------
  |  |  125|     75|                                                                                                   \
  |  |  126|     75|    /* Conditional branching */                                                                    \
  |  |  127|     75|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  128|    207|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    207|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 207, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    207|        return #name;
  |  |  ------------------
  |  |  129|    726|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    726|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 726, False: 28.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    726|        return #name;
  |  |  ------------------
  |  |  130|  2.67k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.67k, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.67k|        return #name;
  |  |  ------------------
  |  |  131|  2.67k|                                                                                                   \
  |  |  132|  2.67k|    /* Unconditional branching */                                                                  \
  |  |  133|  2.67k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12, False: 29.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     12|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  135|    199|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |  136|    199|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|     67|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  140|    194|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  141|    194|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  142|    194|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  143|    194|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  144|     70|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  145|     70|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  147|    962|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    962|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 962, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    962|        return #name;
  |  |  ------------------
  |  |  148|    962|                                                                                                   \
  |  |  149|    962|    /* Storing data */                                                                             \
  |  |  150|    962|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |  151|    210|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |  152|  1.32k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  1.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.32k, False: 28.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.32k|        return #name;
  |  |  ------------------
  |  |  153|  1.32k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    360|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 360, False: 29.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    360|        return #name;
  |  |  ------------------
  |  |  154|    360|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  155|     70|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  156|     73|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 73, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     73|        return #name;
  |  |  ------------------
  |  |  157|     73|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  158|     67|                                                                                                   \
  |  |  159|     67|    /* Moving data */                                                                              \
  |  |  160|    194|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  161|    194|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 94, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     94|        return #name;
  |  |  ------------------
  |  |  162|     94|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  163|     86|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|     83|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  167|    195|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  168|    196|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  169|    196|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |  170|     71|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  171|    578|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    578|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 578, False: 29.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    578|        return #name;
  |  |  ------------------
  |  |  172|    578|                                                                                                   \
  |  |  173|    578|    /* Other */                                                                                    \
  |  |  174|    578|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 128, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    128|        return #name;
  |  |  ------------------
  |  |  175|    128|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |  176|    205|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 205, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    205|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 29.6k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  29.6k|        }
  219|  29.6k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  14.4k|    {
   31|  14.4k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.10k, False: 13.3k]
  ------------------
   32|  1.10k|        {
   33|  1.10k|            return true;
   34|  1.10k|        }
   35|       |
   36|  13.3k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 13.3k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|  13.3k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 552, False: 12.7k]
  ------------------
   42|    552|        {
   43|    552|            return true;
   44|    552|        }
   45|       |
   46|  12.7k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 12.7k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  12.7k|        return false;
   52|  12.7k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  12.7k|    {
   56|  12.7k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 12.7k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  12.7k|        const char first_char = token.at(0u);
   62|       |
   63|  12.7k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 4.33k, False: 8.41k]
  ------------------
   64|  4.33k|        {
   65|  4.33k|            return phi::is_alpha(first_char);
   66|  4.33k|        }
   67|       |
   68|  8.41k|        phi::boolean just_under_scores = (first_char == '_');
   69|  8.41k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 1.82k, False: 6.59k]
  |  Branch (69:13): [True: 1.68k, False: 6.73k]
  |  Branch (69:43): [True: 1.68k, False: 141]
  ------------------
   70|  1.68k|        {
   71|  1.68k|            return false;
   72|  1.68k|        }
   73|       |
   74|  31.0k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 26.5k, False: 4.53k]
  ------------------
   75|  26.5k|        {
   76|  26.5k|            const char c{token.at(index)};
   77|       |
   78|  26.5k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 12.6k, False: 13.8k]
  ------------------
   79|  12.6k|            {
   80|  12.6k|                just_under_scores = false;
   81|  12.6k|            }
   82|  13.8k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 11.6k, False: 2.19k]
  ------------------
   83|  11.6k|            {
   84|  11.6k|                continue;
   85|  11.6k|            }
   86|  2.19k|            else
   87|  2.19k|            {
   88|  2.19k|                return false;
   89|  2.19k|            }
   90|  26.5k|        }
   91|       |
   92|  4.53k|        return !just_under_scores;
   93|  6.73k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  88.8k|    {
  100|  88.8k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 88.8k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  88.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 7.34k, False: 81.5k]
  ------------------
  106|  7.34k|        {
  107|  7.34k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 3.21k, False: 4.13k]
  ------------------
  108|  3.21k|            {
  109|  3.21k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  3.21k|            }
  111|       |
  112|  4.13k|            return {};
  113|  7.34k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  81.5k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 439, False: 81.0k]
  ------------------
  117|    439|        {
  118|    439|            return {};
  119|    439|        }
  120|       |
  121|  81.0k|        std::int32_t number{0};
  122|  81.0k|        phi::boolean is_negative{false};
  123|  81.0k|        phi::boolean starts_with_zero{false};
  124|  81.0k|        phi::boolean parsing_binary{false};
  125|  81.0k|        phi::boolean parsing_octal{false};
  126|  81.0k|        phi::boolean parsing_hexadecimal{false};
  127|  81.0k|        phi::boolean parsed_something{false};
  128|  81.0k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  91.8k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 90.3k, False: 1.50k]
  ------------------
  133|  90.3k|        {
  134|  90.3k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  90.3k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 81.0k, False: 9.23k]
  ------------------
  138|  81.0k|            {
  139|  81.0k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 88, False: 80.9k]
  ------------------
  140|     88|                {
  141|     88|                    continue;
  142|     88|                }
  143|       |
  144|  80.9k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 989, False: 79.9k]
  ------------------
  145|    989|                {
  146|    989|                    is_negative = true;
  147|    989|                    continue;
  148|    989|                }
  149|       |
  150|  79.9k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 4.64k, False: 75.3k]
  ------------------
  151|  4.64k|                {
  152|  4.64k|                    starts_with_zero = true;
  153|  4.64k|                    continue;
  154|  4.64k|                }
  155|       |
  156|  75.3k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 66, False: 75.2k]
  ------------------
  157|     66|                {
  158|     66|                    return {};
  159|     66|                }
  160|  75.3k|            }
  161|       |
  162|       |            // Second character
  163|  84.5k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 6.03k, False: 78.4k]
  ------------------
  164|  6.03k|            {
  165|  6.03k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 4.64k, False: 1.38k]
  ------------------
  166|  4.64k|                {
  167|       |                    // Binary
  168|  4.64k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 278, False: 4.36k]
  |  Branch (168:37): [True: 919, False: 3.45k]
  ------------------
  169|  1.19k|                    {
  170|  1.19k|                        parsing_binary = true;
  171|  1.19k|                        continue;
  172|  1.19k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  3.45k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 737, False: 2.71k]
  |  Branch (175:37): [True: 72, False: 2.64k]
  ------------------
  176|    809|                    {
  177|    809|                        parsing_hexadecimal = true;
  178|    809|                        continue;
  179|    809|                    }
  180|       |
  181|       |                    // Octal
  182|  2.64k|                    parsing_octal = true;
  183|  2.64k|                }
  184|  6.03k|            }
  185|       |
  186|       |            // Handle seperators
  187|  82.5k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 140, False: 82.3k]
  ------------------
  188|    140|            {
  189|    140|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 68, False: 72]
  ------------------
  190|     68|                {
  191|     68|                    return {};
  192|     68|                }
  193|       |
  194|     72|                parsed_separator = true;
  195|     72|                continue;
  196|    140|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  82.3k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 1.03k, False: 81.3k]
  |  Branch (199:32): [True: 0, False: 1.03k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  82.3k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 81.3k, False: 1.03k]
  |  Branch (204:17): [True: 0, False: 82.3k]
  |  Branch (204:33): [True: 0, False: 81.3k]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  82.3k|            parsed_separator = false;
  211|  82.3k|            parsed_something = true;
  212|       |
  213|  82.3k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 1.06k, False: 81.3k]
  ------------------
  214|  1.06k|            {
  215|  1.06k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 931, False: 135]
  ------------------
  216|    931|                {
  217|    931|                    return {};
  218|    931|                }
  219|       |
  220|    135|                number <<= 1;
  221|    135|                number |= (c - '0');
  222|    135|            }
  223|  81.3k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 3.09k, False: 78.2k]
  ------------------
  224|  3.09k|            {
  225|  3.09k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 2.37k, False: 721]
  ------------------
  226|  2.37k|                {
  227|  2.37k|                    return {};
  228|  2.37k|                }
  229|       |
  230|    721|                number <<= 3;
  231|    721|                number |= (c - '0');
  232|    721|            }
  233|  78.2k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 934, False: 77.2k]
  ------------------
  234|    934|            {
  235|    934|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 159, False: 775]
  ------------------
  236|    159|                {
  237|    159|                    return {};
  238|    159|                }
  239|       |
  240|    775|                number <<= 4;
  241|    775|                number |= phi::hex_digit_value(c).unsafe();
  242|    775|            }
  243|  77.2k|            else
  244|  77.2k|            {
  245|  77.2k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 75.1k, False: 2.13k]
  ------------------
  246|  75.1k|                {
  247|  75.1k|                    return {};
  248|  75.1k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  2.13k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 1.24k, False: 894]
  |  Branch (251:36): [True: 834, False: 408]
  ------------------
  252|    834|                {
  253|    834|                    return {};
  254|    834|                }
  255|       |
  256|  1.30k|                number *= 10;
  257|  1.30k|                number += (c - '0');
  258|  1.30k|            }
  259|  82.3k|        }
  260|       |
  261|  1.50k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.29k, False: 208]
  ------------------
  262|  1.29k|        {
  263|       |            // Check for over/underflow
  264|  1.29k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 92, False: 1.20k]
  |  Branch (264:32): [True: 0, False: 92]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  1.29k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.20k, False: 92]
  |  Branch (269:17): [True: 0, False: 1.29k]
  |  Branch (269:33): [True: 0, False: 1.20k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  1.29k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 92, False: 1.20k]
  ------------------
  276|     92|            {
  277|     92|                return static_cast<std::int16_t>(-number);
  278|     92|            }
  279|       |
  280|  1.20k|            return static_cast<std::int16_t>(number);
  281|  1.29k|        }
  282|       |
  283|    208|        return {};
  284|  1.50k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  8.38k|    {
   97|  8.38k|        switch (value)
   98|  8.38k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  1.26k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.26k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.26k, False: 7.11k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.26k|        return #name;
  |  |  ------------------
  |  |   14|  1.43k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.43k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.43k, False: 6.95k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.43k|        return #name;
  |  |  ------------------
  |  |   15|  1.43k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 8.37k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   16|     32|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|     32|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 32, False: 8.35k]
  |  |  |  |  ------------------
  |  |  |  |  101|     32|        return #name;
  |  |  ------------------
  |  |   17|     32|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 8, False: 8.37k]
  |  |  |  |  ------------------
  |  |  |  |  101|      8|        return #name;
  |  |  ------------------
  |  |   18|      8|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 8.37k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   19|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 8.38k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   20|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 8.37k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   21|    520|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|    520|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 520, False: 7.86k]
  |  |  |  |  ------------------
  |  |  |  |  101|    520|        return #name;
  |  |  ------------------
  |  |   22|    520|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|     51|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 51, False: 8.33k]
  |  |  |  |  ------------------
  |  |  |  |  101|     51|        return #name;
  |  |  ------------------
  |  |   23|     51|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 15, False: 8.36k]
  |  |  |  |  ------------------
  |  |  |  |  101|     15|        return #name;
  |  |  ------------------
  |  |   24|     15|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 8.38k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   25|      2|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 8.38k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   26|      1|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 8.38k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   27|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 8.37k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   28|     22|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|     22|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 22, False: 8.36k]
  |  |  |  |  ------------------
  |  |  |  |  101|     22|        return #name;
  |  |  ------------------
  |  |   29|    306|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|    306|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 306, False: 8.07k]
  |  |  |  |  ------------------
  |  |  |  |  101|    306|        return #name;
  |  |  ------------------
  |  |   30|    338|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|    338|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 338, False: 8.04k]
  |  |  |  |  ------------------
  |  |  |  |  101|    338|        return #name;
  |  |  ------------------
  |  |   31|    338|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     28|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 28, False: 8.35k]
  |  |  |  |  ------------------
  |  |  |  |  101|     28|        return #name;
  |  |  ------------------
  |  |   32|    840|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|    840|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 840, False: 7.54k]
  |  |  |  |  ------------------
  |  |  |  |  101|    840|        return #name;
  |  |  ------------------
  |  |   33|    840|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    312|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 312, False: 8.07k]
  |  |  |  |  ------------------
  |  |  |  |  101|    312|        return #name;
  |  |  ------------------
  |  |   34|    312|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 26, False: 8.35k]
  |  |  |  |  ------------------
  |  |  |  |  101|     26|        return #name;
  |  |  ------------------
  |  |   35|     54|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|     54|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 54, False: 8.33k]
  |  |  |  |  ------------------
  |  |  |  |  101|     54|        return #name;
  |  |  ------------------
  |  |   36|     54|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     52|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 52, False: 8.33k]
  |  |  |  |  ------------------
  |  |  |  |  101|     52|        return #name;
  |  |  ------------------
  |  |   37|    504|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|    504|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 504, False: 7.88k]
  |  |  |  |  ------------------
  |  |  |  |  101|    504|        return #name;
  |  |  ------------------
  |  |   38|  1.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|  1.01k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.01k, False: 7.36k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.01k|        return #name;
  |  |  ------------------
  |  |   39|  1.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 8.38k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   40|    479|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    479|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 479, False: 7.90k]
  |  |  |  |  ------------------
  |  |  |  |  101|    479|        return #name;
  |  |  ------------------
  |  |   41|    479|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 26, False: 8.35k]
  |  |  |  |  ------------------
  |  |  |  |  101|     26|        return #name;
  |  |  ------------------
  |  |   42|     71|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|     71|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 71, False: 8.31k]
  |  |  |  |  ------------------
  |  |  |  |  101|     71|        return #name;
  |  |  ------------------
  |  |   43|     74|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|     74|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 74, False: 8.31k]
  |  |  |  |  ------------------
  |  |  |  |  101|     74|        return #name;
  |  |  ------------------
  |  |   44|    877|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    877|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 877, False: 7.50k]
  |  |  |  |  ------------------
  |  |  |  |  101|    877|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 8.38k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  8.38k|        }
  110|  8.38k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  2.46k|    {
  134|  2.46k|        switch (value)
  135|  2.46k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    117|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|    117|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 117, False: 2.34k]
  |  |  |  |  ------------------
  |  |  |  |  138|    117|        return #name;
  |  |  ------------------
  |  |   48|    150|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    150|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 150, False: 2.31k]
  |  |  |  |  ------------------
  |  |  |  |  138|    150|        return #name;
  |  |  ------------------
  |  |   49|    496|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|    496|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 496, False: 1.96k]
  |  |  |  |  ------------------
  |  |  |  |  138|    496|        return #name;
  |  |  ------------------
  |  |   50|    496|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 9, False: 2.45k]
  |  |  |  |  ------------------
  |  |  |  |  138|      9|        return #name;
  |  |  ------------------
  |  |   51|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   52|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 15, False: 2.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|     15|        return #name;
  |  |  ------------------
  |  |   53|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   54|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   55|     90|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|     90|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 90, False: 2.37k]
  |  |  |  |  ------------------
  |  |  |  |  138|     90|        return #name;
  |  |  ------------------
  |  |   56|     90|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 2.45k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   57|    702|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|    702|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 702, False: 1.76k]
  |  |  |  |  ------------------
  |  |  |  |  138|    702|        return #name;
  |  |  ------------------
  |  |   58|    702|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   59|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 2.45k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   60|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   61|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 39, False: 2.42k]
  |  |  |  |  ------------------
  |  |  |  |  138|     39|        return #name;
  |  |  ------------------
  |  |   62|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   63|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 13, False: 2.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|     13|        return #name;
  |  |  ------------------
  |  |   64|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   66|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 2.45k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   67|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   68|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   70|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|     48|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 48, False: 2.41k]
  |  |  |  |  ------------------
  |  |  |  |  138|     48|        return #name;
  |  |  ------------------
  |  |   71|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   74|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   75|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   76|     14|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14, False: 2.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|     14|        return #name;
  |  |  ------------------
  |  |   77|    513|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|    513|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 513, False: 1.94k]
  |  |  |  |  ------------------
  |  |  |  |  138|    513|        return #name;
  |  |  ------------------
  |  |   78|    513|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|    228|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 228, False: 2.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|    228|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 2.46k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  2.46k|        }
  147|  2.46k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  5.14k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  5.14k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 45.6k, False: 0]
  ------------------
   64|  45.6k|            {
   65|  45.6k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 5.14k, False: 40.5k]
  ------------------
   66|  5.14k|                {
   67|  5.14k|                    return &token;
   68|  5.14k|                }
   69|  45.6k|            }
   70|       |
   71|      0|            return nullptr;
   72|  5.14k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  88.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  88.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  88.3k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   129k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   129k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   129k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  14.9k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  14.9k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  14.9k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  21.3k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  6.71k|    {
   25|  6.71k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  6.71k|        switch (argument_number.unsafe())
   28|  6.71k|        {
   29|  4.08k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 4.08k, False: 2.63k]
  ------------------
   30|  4.08k|                m_Arg1 = argument;
   31|  4.08k|                break;
   32|  1.77k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.77k, False: 4.93k]
  ------------------
   33|  1.77k|                m_Arg2 = argument;
   34|  1.77k|                break;
   35|    856|            case 2u:
  ------------------
  |  Branch (35:13): [True: 856, False: 5.86k]
  ------------------
   36|    856|                m_Arg3 = argument;
   37|    856|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 6.71k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  6.71k|#endif
   42|  6.71k|        }
   43|  6.71k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  70.6k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  4.40k|    {
  173|  4.40k|        InstructionArgument arg;
  174|  4.40k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  4.40k|        arg.register_int.register_id = id;
  176|  4.40k|        return arg;
  177|  4.40k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|     66|    {
  181|     66|        InstructionArgument arg;
  182|     66|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|     66|        arg.register_float.register_id = id;
  184|     66|        return arg;
  185|     66|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    779|    {
  189|    779|        InstructionArgument arg;
  190|    779|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    779|        arg.immediate_value.signed_value = value;
  192|    779|        return arg;
  193|    779|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  1.46k|    {
  207|  1.46k|        InstructionArgument arg;
  208|  1.46k|        arg.m_Type           = ArgumentType::Label;
  209|  1.46k|        arg.label.label_name = label_name;
  210|  1.46k|        return arg;
  211|  1.46k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  21.3k|    {
  453|  21.3k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  21.3k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  84.3k|    {
   24|  84.3k|        switch (token.length().unsafe())
   25|  84.3k|        {
   26|       |            // 1 character OpCodes
   27|  8.52k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 8.52k, False: 75.7k]
  ------------------
   28|  8.52k|                const char c1 = token[0u];
   29|       |
   30|  8.52k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 2.33k, False: 6.18k]
  ------------------
   31|  2.33k|                {
   32|  2.33k|                    return OpCode::J;
   33|  2.33k|                }
   34|  6.18k|                break;
   35|  8.52k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  15.4k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 15.4k, False: 68.8k]
  ------------------
   39|  15.4k|                const char c1 = token[0u];
   40|  15.4k|                const char c2 = token[1u];
   41|       |
   42|  15.4k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 5.63k, False: 9.81k]
  ------------------
   43|  15.4k|                {
   44|     99|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 99, False: 15.3k]
  ------------------
   45|    220|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 121, False: 15.3k]
  ------------------
   46|    220|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 133, False: 87]
  ------------------
   47|    133|                        {
   48|    133|                            return OpCode::JR;
   49|    133|                        }
   50|     87|                        break;
   51|       |
   52|  1.67k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 1.67k, False: 13.7k]
  ------------------
   53|  2.67k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.00k, False: 14.4k]
  ------------------
   54|  2.67k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 160, False: 2.51k]
  ------------------
   55|  2.67k|                        {
   56|    194|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 194, False: 2.48k]
  ------------------
   57|    774|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 580, False: 2.09k]
  ------------------
   58|    774|                                return OpCode::LB;
   59|    962|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 962, False: 1.71k]
  ------------------
   60|  1.02k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 66, False: 2.61k]
  ------------------
   61|  1.02k|                                return OpCode::LD;
   62|     66|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 66, False: 2.61k]
  ------------------
   63|    132|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 66, False: 2.61k]
  ------------------
   64|    132|                                return OpCode::LF;
   65|    194|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 194, False: 2.48k]
  ------------------
   66|    260|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 66, False: 2.61k]
  ------------------
   67|    260|                                return OpCode::LH;
   68|     70|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 70, False: 2.60k]
  ------------------
   69|    324|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 254, False: 2.42k]
  ------------------
   70|    324|                                return OpCode::LW;
   71|  2.67k|                        }
   72|    160|                        break;
   73|  1.89k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 1.89k, False: 13.5k]
  ------------------
   74|  2.01k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 121, False: 15.3k]
  ------------------
   75|  2.01k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 389, False: 1.62k]
  ------------------
   76|    389|                        {
   77|    389|                            return OpCode::OR;
   78|    389|                        }
   79|  1.62k|                        break;
   80|  2.73k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 2.73k, False: 12.7k]
  ------------------
   81|  4.89k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 2.16k, False: 13.2k]
  ------------------
   82|  4.89k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 2.61k, False: 2.28k]
  ------------------
   83|  4.89k|                        {
   84|     69|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 69, False: 4.83k]
  ------------------
   85|    135|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 66, False: 4.83k]
  ------------------
   86|    135|                                return OpCode::SB;
   87|     69|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 69, False: 4.83k]
  ------------------
   88|    408|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 339, False: 4.56k]
  ------------------
   89|    408|                                return OpCode::SD;
   90|     73|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 73, False: 4.82k]
  ------------------
   91|    267|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 4.70k]
  ------------------
   92|    267|                                return OpCode::SF;
   93|  1.14k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 1.14k, False: 3.75k]
  ------------------
   94|  1.20k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 66, False: 4.83k]
  ------------------
   95|  1.20k|                                return OpCode::SH;
   96|    194|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 194, False: 4.70k]
  ------------------
   97|    264|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 70, False: 4.82k]
  ------------------
   98|    264|                                return OpCode::SW;
   99|  4.89k|                        }
  100|  2.61k|                        break;
  101|  15.4k|                }
  102|  10.1k|                break;
  103|  15.4k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  23.6k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 23.6k, False: 60.6k]
  ------------------
  107|  23.6k|                const char c1 = token[0u];
  108|  23.6k|                const char c2 = token[1u];
  109|  23.6k|                const char c3 = token[2u];
  110|       |
  111|  23.6k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 3.41k, False: 20.2k]
  ------------------
  112|  23.6k|                {
  113|  4.04k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 4.04k, False: 19.5k]
  ------------------
  114|  4.74k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 708, False: 22.9k]
  ------------------
  115|  4.74k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 3.73k, False: 1.01k]
  |  Branch (115:29): [True: 3.66k, False: 1.08k]
  |  Branch (115:45): [True: 3.66k, False: 67]
  ------------------
  116|  3.66k|                        {
  117|  3.66k|                            return OpCode::ADD;
  118|  3.66k|                        }
  119|  1.08k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 945, False: 136]
  |  Branch (119:34): [True: 741, False: 340]
  |  Branch (119:50): [True: 741, False: 204]
  ------------------
  120|    741|                        {
  121|    741|                            return OpCode::AND;
  122|    741|                        }
  123|    340|                        break;
  124|       |
  125|    417|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 417, False: 23.2k]
  ------------------
  126|    492|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 75, False: 23.5k]
  ------------------
  127|    492|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 363, False: 129]
  |  Branch (127:29): [True: 297, False: 195]
  |  Branch (127:45): [True: 297, False: 66]
  ------------------
  128|    297|                        {
  129|    297|                            return OpCode::DIV;
  130|    297|                        }
  131|    195|                        break;
  132|       |
  133|    317|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 317, False: 23.3k]
  ------------------
  134|    452|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 135, False: 23.5k]
  ------------------
  135|    452|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 369, False: 83]
  ------------------
  136|    369|                        {
  137|    369|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 132, False: 237]
  ------------------
  138|    132|                            {
  139|    132|                                return OpCode::EQD;
  140|    132|                            }
  141|    237|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 132, False: 105]
  ------------------
  142|    132|                            {
  143|    132|                                return OpCode::EQF;
  144|    132|                            }
  145|    369|                        }
  146|    188|                        break;
  147|       |
  148|  1.45k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.45k, False: 22.1k]
  ------------------
  149|  1.97k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 519, False: 23.1k]
  ------------------
  150|  1.97k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 906, False: 1.06k]
  ------------------
  151|    906|                        {
  152|    906|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 446, False: 460]
  ------------------
  153|    446|                            {
  154|    446|                                return OpCode::GED;
  155|    446|                            }
  156|    460|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 394, False: 66]
  ------------------
  157|    394|                            {
  158|    394|                                return OpCode::GEF;
  159|    394|                            }
  160|    906|                        }
  161|  1.06k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 999, False: 66]
  ------------------
  162|    999|                        {
  163|    999|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 473, False: 526]
  ------------------
  164|    473|                            {
  165|    473|                                return OpCode::GTD;
  166|    473|                            }
  167|    526|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 274, False: 252]
  ------------------
  168|    274|                            {
  169|    274|                                return OpCode::GTF;
  170|    274|                            }
  171|    526|                        }
  172|    384|                        break;
  173|       |
  174|    384|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 203, False: 23.4k]
  ------------------
  175|    543|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 340, False: 23.2k]
  ------------------
  176|    543|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 472, False: 71]
  |  Branch (176:29): [True: 265, False: 278]
  |  Branch (176:45): [True: 265, False: 207]
  ------------------
  177|    265|                        {
  178|    265|                            return OpCode::JAL;
  179|    265|                        }
  180|    278|                        break;
  181|       |
  182|    987|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 987, False: 22.6k]
  ------------------
  183|  2.40k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 1.41k, False: 22.2k]
  ------------------
  184|  2.40k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 67, False: 2.33k]
  ------------------
  185|  2.40k|                        {
  186|     66|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 66, False: 2.33k]
  ------------------
  187|    604|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 538, False: 1.86k]
  ------------------
  188|    604|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 142, False: 462]
  ------------------
  189|    142|                                {
  190|    142|                                    return OpCode::LBU;
  191|    142|                                }
  192|    462|                                break;
  193|       |
  194|    462|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 417, False: 1.98k]
  ------------------
  195|    729|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 312, False: 2.09k]
  ------------------
  196|    729|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 388, False: 341]
  ------------------
  197|    388|                                {
  198|    388|                                    return OpCode::LED;
  199|    388|                                }
  200|    341|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 275, False: 66]
  ------------------
  201|    275|                                {
  202|    275|                                    return OpCode::LEF;
  203|    275|                                }
  204|     66|                                break;
  205|       |
  206|    200|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 200, False: 2.20k]
  ------------------
  207|    427|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 227, False: 2.17k]
  ------------------
  208|    427|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 133, False: 294]
  ------------------
  209|    133|                                {
  210|    133|                                    return OpCode::LHI;
  211|    133|                                }
  212|    294|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 228, False: 66]
  ------------------
  213|    228|                                {
  214|    228|                                    return OpCode::LHU;
  215|    228|                                }
  216|     66|                                break;
  217|       |
  218|    182|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 182, False: 2.22k]
  ------------------
  219|    368|                            case 't':
  ------------------
  |  Branch (219:29): [True: 186, False: 2.21k]
  ------------------
  220|    368|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 133, False: 235]
  ------------------
  221|    133|                                {
  222|    133|                                    return OpCode::LTD;
  223|    133|                                }
  224|    235|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 168, False: 67]
  ------------------
  225|    168|                                {
  226|    168|                                    return OpCode::LTF;
  227|    168|                                }
  228|     67|                                break;
  229|       |
  230|     78|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 78, False: 2.32k]
  ------------------
  231|    208|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 130, False: 2.27k]
  ------------------
  232|    208|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 132, False: 76]
  ------------------
  233|    132|                                {
  234|    132|                                    return OpCode::LWU;
  235|    132|                                }
  236|     76|                                break;
  237|  2.40k|                        }
  238|    804|                        break;
  239|       |
  240|    852|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 852, False: 22.7k]
  ------------------
  241|  1.76k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 915, False: 22.7k]
  ------------------
  242|  1.76k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 723, False: 1.04k]
  ------------------
  243|    723|                        {
  244|    723|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 141, False: 582]
  ------------------
  245|    141|                            {
  246|    141|                                return OpCode::NED;
  247|    141|                            }
  248|    582|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 132, False: 450]
  ------------------
  249|    132|                            {
  250|    132|                                return OpCode::NEF;
  251|    132|                            }
  252|    723|                        }
  253|  1.04k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 721, False: 323]
  |  Branch (253:34): [True: 271, False: 773]
  |  Branch (253:50): [True: 271, False: 450]
  ------------------
  254|    271|                        {
  255|    271|                            return OpCode::NOP;
  256|    271|                        }
  257|       |
  258|  1.22k|                        break;
  259|       |
  260|  1.22k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 315, False: 23.3k]
  ------------------
  261|    394|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 79, False: 23.5k]
  ------------------
  262|    394|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 326, False: 68]
  |  Branch (262:29): [True: 260, False: 134]
  |  Branch (262:45): [True: 260, False: 66]
  ------------------
  263|    260|                        {
  264|    260|                            return OpCode::ORI;
  265|    260|                        }
  266|    134|                        break;
  267|       |
  268|  6.28k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 6.28k, False: 17.3k]
  ------------------
  269|  6.87k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 594, False: 23.0k]
  ------------------
  270|  6.87k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 314, False: 6.56k]
  ------------------
  271|  6.87k|                        {
  272|    210|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 210, False: 6.66k]
  ------------------
  273|    349|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 139, False: 6.73k]
  ------------------
  274|    349|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 276, False: 73]
  ------------------
  275|    276|                                {
  276|    276|                                    return OpCode::SBU;
  277|    276|                                }
  278|     73|                                break;
  279|       |
  280|     79|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 79, False: 6.79k]
  ------------------
  281|  1.39k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 1.32k, False: 5.55k]
  ------------------
  282|  1.39k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 808, False: 591]
  ------------------
  283|    808|                                {
  284|    808|                                    return OpCode::SEQ;
  285|    808|                                }
  286|    591|                                break;
  287|       |
  288|    591|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 145, False: 6.73k]
  ------------------
  289|    360|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 215, False: 6.66k]
  ------------------
  290|    360|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 139, False: 221]
  ------------------
  291|    139|                                {
  292|    139|                                    return OpCode::SGE;
  293|    139|                                }
  294|    221|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 145, False: 76]
  ------------------
  295|    145|                                {
  296|    145|                                    return OpCode::SGT;
  297|    145|                                }
  298|     76|                                break;
  299|       |
  300|    363|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 363, False: 6.51k]
  ------------------
  301|    496|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 133, False: 6.74k]
  ------------------
  302|    496|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 426, False: 70]
  ------------------
  303|    426|                                {
  304|    426|                                    return OpCode::SHU;
  305|    426|                                }
  306|     70|                                break;
  307|       |
  308|    960|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 960, False: 5.91k]
  ------------------
  309|  1.24k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 288, False: 6.59k]
  ------------------
  310|  1.24k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 66, False: 1.18k]
  ------------------
  311|  1.24k|                                {
  312|    194|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 194, False: 1.05k]
  ------------------
  313|    260|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 66, False: 1.18k]
  ------------------
  314|    260|                                        return OpCode::SLA;
  315|       |
  316|    454|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 454, False: 794]
  ------------------
  317|    521|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 67, False: 1.18k]
  ------------------
  318|    521|                                        return OpCode::SLE;
  319|       |
  320|    198|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 198, False: 1.05k]
  ------------------
  321|    268|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 70, False: 1.17k]
  ------------------
  322|    268|                                        return OpCode::SLL;
  323|       |
  324|     66|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 66, False: 1.18k]
  ------------------
  325|    133|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 67, False: 1.18k]
  ------------------
  326|    133|                                        return OpCode::SLT;
  327|  1.24k|                                }
  328|     66|                                break;
  329|       |
  330|     70|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 70, False: 6.80k]
  ------------------
  331|    214|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 144, False: 6.73k]
  ------------------
  332|    214|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 147, False: 67]
  ------------------
  333|    147|                                {
  334|    147|                                    return OpCode::SNE;
  335|    147|                                }
  336|     67|                                break;
  337|       |
  338|    888|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 888, False: 5.99k]
  ------------------
  339|  1.88k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 992, False: 5.88k]
  ------------------
  340|  1.88k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 821, False: 1.05k]
  ------------------
  341|    821|                                {
  342|    821|                                    return OpCode::SRA;
  343|    821|                                }
  344|  1.05k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 225, False: 834]
  ------------------
  345|    225|                                {
  346|    225|                                    return OpCode::SRL;
  347|    225|                                }
  348|    834|                                break;
  349|       |
  350|    834|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 215, False: 6.66k]
  ------------------
  351|    408|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 193, False: 6.68k]
  ------------------
  352|    408|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 332, False: 76]
  ------------------
  353|    332|                                {
  354|    332|                                    return OpCode::SUB;
  355|    332|                                }
  356|     76|                                break;
  357|       |
  358|    137|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 137, False: 6.74k]
  ------------------
  359|    210|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 73, False: 6.80k]
  ------------------
  360|    210|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 144, False: 66]
  ------------------
  361|    144|                                {
  362|    144|                                    return OpCode::SWU;
  363|    144|                                }
  364|     66|                                break;
  365|  6.87k|                        }
  366|       |
  367|  2.35k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 124, False: 23.5k]
  ------------------
  368|  2.80k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 452, False: 23.1k]
  ------------------
  369|  2.80k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 393, False: 2.41k]
  |  Branch (369:29): [True: 197, False: 2.61k]
  |  Branch (369:45): [True: 197, False: 196]
  ------------------
  370|    197|                        {
  371|    197|                            return OpCode::XOR;
  372|    197|                        }
  373|  2.61k|                        break;
  374|  23.6k|                }
  375|  9.57k|                break;
  376|  23.6k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  23.7k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 23.7k, False: 60.5k]
  ------------------
  380|  23.7k|                const char c1 = token[0u];
  381|  23.7k|                const char c2 = token[1u];
  382|  23.7k|                const char c3 = token[2u];
  383|  23.7k|                const char c4 = token[3u];
  384|       |
  385|  23.7k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 2.17k, False: 21.5k]
  ------------------
  386|  23.7k|                {
  387|  2.25k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 2.25k, False: 21.4k]
  ------------------
  388|  2.53k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 280, False: 23.4k]
  ------------------
  389|  2.53k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 66, False: 2.47k]
  ------------------
  390|  2.53k|                        {
  391|  2.04k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.04k, False: 496]
  ------------------
  392|  2.19k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 157, False: 2.38k]
  ------------------
  393|  2.19k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 1.99k, False: 202]
  ------------------
  394|  1.99k|                                {
  395|  1.99k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 66, False: 1.93k]
  ------------------
  396|  1.99k|                                    {
  397|    517|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 517, False: 1.48k]
  ------------------
  398|    583|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 1.93k]
  ------------------
  399|    583|                                            return OpCode::ADDD;
  400|       |
  401|    444|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 444, False: 1.55k]
  ------------------
  402|    510|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 66, False: 1.93k]
  ------------------
  403|    510|                                            return OpCode::ADDF;
  404|       |
  405|    423|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 423, False: 1.57k]
  ------------------
  406|    489|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 1.93k]
  ------------------
  407|    489|                                            return OpCode::ADDI;
  408|       |
  409|    283|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 283, False: 1.71k]
  ------------------
  410|    349|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 1.93k]
  ------------------
  411|    349|                                            return OpCode::ADDU;
  412|  1.99k|                                    }
  413|  1.99k|                                }
  414|    268|                                break;
  415|       |
  416|    268|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 102, False: 2.43k]
  ------------------
  417|    273|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 171, False: 2.36k]
  ------------------
  418|    273|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 206, False: 67]
  |  Branch (418:37): [True: 134, False: 139]
  |  Branch (418:53): [True: 134, False: 72]
  ------------------
  419|    134|                                {
  420|    134|                                    return OpCode::ANDI;
  421|    134|                                }
  422|       |
  423|    139|                                break;
  424|  2.53k|                        }
  425|    473|                        break;
  426|       |
  427|  2.96k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 2.96k, False: 20.7k]
  ------------------
  428|  4.12k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 1.16k, False: 22.5k]
  ------------------
  429|  4.12k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 73, False: 4.05k]
  ------------------
  430|  4.12k|                        {
  431|    122|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 122, False: 4.00k]
  ------------------
  432|    914|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 792, False: 3.33k]
  ------------------
  433|    914|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 662, False: 252]
  |  Branch (433:37): [True: 594, False: 320]
  |  Branch (433:53): [True: 594, False: 68]
  ------------------
  434|    594|                                {
  435|    594|                                    return OpCode::BEQZ;
  436|    594|                                }
  437|    320|                                break;
  438|       |
  439|  2.47k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 2.47k, False: 1.64k]
  ------------------
  440|  2.74k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 264, False: 3.86k]
  ------------------
  441|  2.74k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 2.67k, False: 66]
  ------------------
  442|  2.67k|                                {
  443|  2.67k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 2.04k, False: 637]
  ------------------
  444|  2.04k|                                    {
  445|  2.04k|                                        return OpCode::BFPF;
  446|  2.04k|                                    }
  447|    637|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 571, False: 66]
  ------------------
  448|    571|                                    {
  449|    571|                                        return OpCode::BFPT;
  450|    571|                                    }
  451|  2.67k|                                }
  452|    132|                                break;
  453|       |
  454|    229|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 229, False: 3.89k]
  ------------------
  455|    395|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 166, False: 3.95k]
  ------------------
  456|    395|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 329, False: 66]
  |  Branch (456:37): [True: 263, False: 132]
  |  Branch (456:53): [True: 263, False: 66]
  ------------------
  457|    263|                                {
  458|    263|                                    return OpCode::BNEZ;
  459|    263|                                }
  460|  4.12k|                        }
  461|    657|                        break;
  462|       |
  463|  1.11k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.11k, False: 22.6k]
  ------------------
  464|  1.22k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 114, False: 23.6k]
  ------------------
  465|  1.22k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 1.10k, False: 118]
  |  Branch (465:29): [True: 1.04k, False: 184]
  |  Branch (465:45): [True: 1.04k, False: 66]
  ------------------
  466|  1.04k|                        {
  467|  1.04k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 104, False: 938]
  ------------------
  468|  1.04k|                            {
  469|    194|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 194, False: 848]
  ------------------
  470|    260|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 976]
  ------------------
  471|    260|                                    return OpCode::DIVD;
  472|       |
  473|     66|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 66, False: 976]
  ------------------
  474|    132|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 976]
  ------------------
  475|    132|                                    return OpCode::DIVF;
  476|       |
  477|    218|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 218, False: 824]
  ------------------
  478|    284|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 66, False: 976]
  ------------------
  479|    284|                                    return OpCode::DIVI;
  480|       |
  481|    196|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 196, False: 846]
  ------------------
  482|    262|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 66, False: 976]
  ------------------
  483|    262|                                    return OpCode::DIVU;
  484|  1.04k|                            }
  485|  1.04k|                        }
  486|    288|                        break;
  487|       |
  488|    288|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 93, False: 23.6k]
  ------------------
  489|    752|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 659, False: 23.0k]
  ------------------
  490|    752|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 656, False: 96]
  |  Branch (490:29): [True: 140, False: 612]
  |  Branch (490:45): [True: 590, False: 66]
  |  Branch (490:61): [True: 140, False: 450]
  ------------------
  491|    140|                        {
  492|    140|                            return OpCode::HALT;
  493|    140|                        }
  494|    612|                        break;
  495|       |
  496|    612|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 416, False: 23.3k]
  ------------------
  497|    981|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 565, False: 23.1k]
  ------------------
  498|    981|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 652, False: 329]
  |  Branch (498:29): [True: 132, False: 849]
  |  Branch (498:45): [True: 198, False: 454]
  |  Branch (498:61): [True: 132, False: 66]
  ------------------
  499|    132|                        {
  500|    132|                            return OpCode::JALR;
  501|    132|                        }
  502|    849|                        break;
  503|       |
  504|    849|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 752, False: 22.9k]
  ------------------
  505|  1.33k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 586, False: 23.1k]
  ------------------
  506|  1.33k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 552, False: 786]
  |  Branch (506:29): [True: 486, False: 852]
  |  Branch (506:45): [True: 486, False: 66]
  ------------------
  507|    486|                        {
  508|    486|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 260, False: 226]
  ------------------
  509|    260|                            {
  510|    260|                                return OpCode::MOVD;
  511|    260|                            }
  512|    226|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 160, False: 66]
  ------------------
  513|    160|                            {
  514|    160|                                return OpCode::MOVF;
  515|    160|                            }
  516|    486|                        }
  517|    852|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 764, False: 88]
  |  Branch (517:34): [True: 142, False: 710]
  |  Branch (517:50): [True: 690, False: 74]
  |  Branch (517:66): [True: 142, False: 548]
  ------------------
  518|    142|                        {
  519|    142|                            return OpCode::MULT;
  520|    142|                        }
  521|    776|                        break;
  522|       |
  523|  8.01k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 8.01k, False: 15.7k]
  ------------------
  524|  9.38k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 1.37k, False: 22.3k]
  ------------------
  525|  9.38k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 117, False: 9.26k]
  ------------------
  526|  9.38k|                        {
  527|    283|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 283, False: 9.10k]
  ------------------
  528|  1.32k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 1.04k, False: 8.34k]
  ------------------
  529|  1.32k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 751, False: 574]
  ------------------
  530|    751|                                {
  531|    751|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 536, False: 215]
  ------------------
  532|    536|                                    {
  533|    536|                                        return OpCode::SEQI;
  534|    536|                                    }
  535|    215|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 134, False: 81]
  ------------------
  536|    134|                                    {
  537|    134|                                        return OpCode::SEQU;
  538|    134|                                    }
  539|    751|                                }
  540|    655|                                break;
  541|       |
  542|  1.32k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 1.32k, False: 8.05k]
  ------------------
  543|  3.07k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 1.74k, False: 7.63k]
  ------------------
  544|  3.07k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 1.23k, False: 1.83k]
  ------------------
  545|  1.23k|                                {
  546|  1.23k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 132, False: 1.10k]
  ------------------
  547|    132|                                    {
  548|    132|                                        return OpCode::SGEI;
  549|    132|                                    }
  550|  1.10k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 1.03k, False: 66]
  ------------------
  551|  1.03k|                                    {
  552|  1.03k|                                        return OpCode::SGEU;
  553|  1.03k|                                    }
  554|  1.23k|                                }
  555|  1.83k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.76k, False: 70]
  ------------------
  556|  1.76k|                                {
  557|  1.76k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 290, False: 1.47k]
  ------------------
  558|    290|                                    {
  559|    290|                                        return OpCode::SGTI;
  560|    290|                                    }
  561|  1.47k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 132, False: 1.34k]
  ------------------
  562|    132|                                    {
  563|    132|                                        return OpCode::SGTU;
  564|    132|                                    }
  565|  1.76k|                                }
  566|  1.48k|                                break;
  567|       |
  568|  1.48k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 1.01k, False: 8.36k]
  ------------------
  569|  1.71k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 702, False: 8.68k]
  ------------------
  570|  1.71k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 66, False: 1.65k]
  ------------------
  571|  1.71k|                                {
  572|    213|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 213, False: 1.50k]
  ------------------
  573|    326|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 113, False: 1.60k]
  ------------------
  574|    326|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 260, False: 66]
  ------------------
  575|    260|                                        {
  576|    260|                                            return OpCode::SLAI;
  577|    260|                                        }
  578|     66|                                        break;
  579|       |
  580|    327|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 327, False: 1.39k]
  ------------------
  581|    491|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 164, False: 1.55k]
  ------------------
  582|    491|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 260, False: 231]
  ------------------
  583|    260|                                        {
  584|    260|                                            return OpCode::SLEI;
  585|    260|                                        }
  586|    231|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 165, False: 66]
  ------------------
  587|    165|                                        {
  588|    165|                                            return OpCode::SLEU;
  589|    165|                                        }
  590|     66|                                        break;
  591|       |
  592|    216|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 216, False: 1.50k]
  ------------------
  593|    349|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 133, False: 1.58k]
  ------------------
  594|    349|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 280, False: 69]
  ------------------
  595|    280|                                        {
  596|    280|                                            return OpCode::SLLI;
  597|    280|                                        }
  598|     69|                                        break;
  599|       |
  600|    344|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 344, False: 1.37k]
  ------------------
  601|    485|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 141, False: 1.57k]
  ------------------
  602|    485|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 271, False: 214]
  ------------------
  603|    271|                                        {
  604|    271|                                            return OpCode::SLTI;
  605|    271|                                        }
  606|    214|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 148, False: 66]
  ------------------
  607|    148|                                        {
  608|    148|                                            return OpCode::SLTU;
  609|    148|                                        }
  610|     66|                                        break;
  611|  1.71k|                                }
  612|       |
  613|    754|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 421, False: 8.96k]
  ------------------
  614|  1.15k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 398, False: 8.98k]
  ------------------
  615|  1.15k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 884, False: 268]
  ------------------
  616|    884|                                {
  617|    884|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 293, False: 591]
  ------------------
  618|    293|                                    {
  619|    293|                                        return OpCode::SNEI;
  620|    293|                                    }
  621|    591|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 525, False: 66]
  ------------------
  622|    525|                                    {
  623|    525|                                        return OpCode::SNEU;
  624|    525|                                    }
  625|    884|                                }
  626|    334|                                break;
  627|       |
  628|    334|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 238, False: 9.14k]
  ------------------
  629|    439|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 201, False: 9.18k]
  ------------------
  630|    439|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 204, False: 235]
  |  Branch (630:37): [True: 137, False: 302]
  |  Branch (630:53): [True: 137, False: 67]
  ------------------
  631|    137|                                {
  632|    137|                                    return OpCode::SRAI;
  633|    137|                                }
  634|    302|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 228, False: 74]
  |  Branch (634:42): [True: 133, False: 169]
  |  Branch (634:58): [True: 133, False: 95]
  ------------------
  635|    133|                                {
  636|    133|                                    return OpCode::SRLI;
  637|    133|                                }
  638|    169|                                break;
  639|       |
  640|    880|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 880, False: 8.50k]
  ------------------
  641|  1.89k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.01k, False: 8.36k]
  ------------------
  642|  1.89k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 1.56k, False: 335]
  ------------------
  643|  1.56k|                                {
  644|  1.56k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 416, False: 1.14k]
  ------------------
  645|  1.56k|                                    {
  646|     68|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 68, False: 1.49k]
  ------------------
  647|    134|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 1.49k]
  ------------------
  648|    134|                                            return OpCode::SUBD;
  649|       |
  650|    196|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 196, False: 1.36k]
  ------------------
  651|    262|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 66, False: 1.49k]
  ------------------
  652|    262|                                            return OpCode::SUBF;
  653|       |
  654|    205|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 205, False: 1.35k]
  ------------------
  655|    271|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 66, False: 1.49k]
  ------------------
  656|    271|                                            return OpCode::SUBI;
  657|       |
  658|    411|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 411, False: 1.14k]
  ------------------
  659|    477|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 1.49k]
  ------------------
  660|    477|                                            return OpCode::SUBU;
  661|  1.56k|                                    }
  662|  1.56k|                                }
  663|    751|                                break;
  664|  9.38k|                        }
  665|  3.50k|                        break;
  666|       |
  667|  3.50k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 754, False: 22.9k]
  ------------------
  668|    867|                    case 't':
  ------------------
  |  Branch (668:21): [True: 113, False: 23.6k]
  ------------------
  669|    867|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 800, False: 67]
  |  Branch (669:29): [True: 618, False: 249]
  |  Branch (669:45): [True: 726, False: 74]
  |  Branch (669:61): [True: 618, False: 108]
  ------------------
  670|    618|                        {
  671|    618|                            return OpCode::TRAP;
  672|    618|                        }
  673|    249|                        break;
  674|    249|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 170, False: 23.5k]
  ------------------
  675|    335|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 165, False: 23.5k]
  ------------------
  676|    335|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 265, False: 70]
  |  Branch (676:29): [True: 133, False: 202]
  |  Branch (676:45): [True: 199, False: 66]
  |  Branch (676:61): [True: 133, False: 66]
  ------------------
  677|    133|                        {
  678|    133|                            return OpCode::XORI;
  679|    133|                        }
  680|    202|                        break;
  681|  23.7k|                }
  682|  9.78k|                break;
  683|  23.7k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  9.78k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 5.24k, False: 79.0k]
  ------------------
  687|  5.24k|                const char c1 = token[0u];
  688|  5.24k|                const char c2 = token[1u];
  689|  5.24k|                const char c3 = token[2u];
  690|  5.24k|                const char c4 = token[3u];
  691|  5.24k|                const char c5 = token[4u];
  692|       |
  693|  5.24k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 1.92k, False: 3.31k]
  ------------------
  694|  5.24k|                {
  695|    423|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 423, False: 4.82k]
  ------------------
  696|    423|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 5.24k]
  ------------------
  697|    423|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 423, False: 0]
  |  Branch (697:29): [True: 423, False: 0]
  |  Branch (697:45): [True: 423, False: 0]
  |  Branch (697:61): [True: 423, False: 0]
  |  Branch (697:77): [True: 423, False: 0]
  ------------------
  698|    423|                        {
  699|    423|                            return OpCode::ADDUI;
  700|    423|                        }
  701|      0|                        break;
  702|       |
  703|    325|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 325, False: 4.92k]
  ------------------
  704|    325|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 5.24k]
  ------------------
  705|    325|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 325, False: 0]
  |  Branch (705:29): [True: 325, False: 0]
  |  Branch (705:45): [True: 325, False: 0]
  |  Branch (705:61): [True: 325, False: 0]
  |  Branch (705:77): [True: 325, False: 0]
  ------------------
  706|    325|                        {
  707|    325|                            return OpCode::DIVUI;
  708|    325|                        }
  709|      0|                        break;
  710|       |
  711|    408|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 408, False: 4.83k]
  ------------------
  712|    408|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 5.24k]
  ------------------
  713|    408|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 408, False: 0]
  |  Branch (713:29): [True: 408, False: 0]
  |  Branch (713:45): [True: 408, False: 0]
  |  Branch (713:61): [True: 408, False: 0]
  ------------------
  714|    408|                        {
  715|    408|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 408]
  ------------------
  716|    408|                            {
  717|     66|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 66, False: 342]
  ------------------
  718|     66|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 408]
  ------------------
  719|     66|                                    return OpCode::MULTD;
  720|       |
  721|    201|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 201, False: 207]
  ------------------
  722|    201|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 408]
  ------------------
  723|    201|                                    return OpCode::MULTF;
  724|       |
  725|     75|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 75, False: 333]
  ------------------
  726|     75|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 408]
  ------------------
  727|     75|                                    return OpCode::MULTI;
  728|       |
  729|     66|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 66, False: 342]
  ------------------
  730|     66|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 408]
  ------------------
  731|     66|                                    return OpCode::MULTU;
  732|    408|                            }
  733|    408|                        }
  734|      0|                        break;
  735|       |
  736|  2.16k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 2.16k, False: 3.08k]
  ------------------
  737|  2.16k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 5.24k]
  ------------------
  738|  2.16k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 2.16k]
  ------------------
  739|  2.16k|                        {
  740|  1.01k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 1.01k, False: 1.15k]
  ------------------
  741|  1.01k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 2.16k]
  ------------------
  742|  1.01k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 1.01k, False: 0]
  |  Branch (742:37): [True: 1.01k, False: 0]
  |  Branch (742:53): [True: 1.01k, False: 0]
  |  Branch (742:69): [True: 1.01k, False: 0]
  ------------------
  743|  1.01k|                                {
  744|  1.01k|                                    return OpCode::SEQUI;
  745|  1.01k|                                }
  746|      0|                                break;
  747|       |
  748|    600|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 600, False: 1.56k]
  ------------------
  749|    600|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 2.16k]
  ------------------
  750|    600|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 369, False: 231]
  |  Branch (750:37): [True: 369, False: 231]
  |  Branch (750:53): [True: 369, False: 0]
  |  Branch (750:69): [True: 369, False: 0]
  ------------------
  751|    369|                                {
  752|    369|                                    return OpCode::SGEUI;
  753|    369|                                }
  754|    231|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 231, False: 0]
  |  Branch (754:42): [True: 231, False: 0]
  |  Branch (754:58): [True: 231, False: 0]
  |  Branch (754:74): [True: 231, False: 0]
  ------------------
  755|    231|                                {
  756|    231|                                    return OpCode::SGTUI;
  757|    231|                                }
  758|      0|                                break;
  759|       |
  760|    265|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 265, False: 1.89k]
  ------------------
  761|    265|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 2.16k]
  ------------------
  762|    265|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 70, False: 195]
  |  Branch (762:37): [True: 70, False: 195]
  |  Branch (762:53): [True: 70, False: 0]
  |  Branch (762:69): [True: 70, False: 0]
  ------------------
  763|     70|                                {
  764|     70|                                    return OpCode::SLEUI;
  765|     70|                                }
  766|    195|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 195, False: 0]
  |  Branch (766:42): [True: 195, False: 0]
  |  Branch (766:58): [True: 195, False: 0]
  |  Branch (766:74): [True: 195, False: 0]
  ------------------
  767|    195|                                {
  768|    195|                                    return OpCode::SLTUI;
  769|    195|                                }
  770|      0|                                break;
  771|       |
  772|     66|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 66, False: 2.09k]
  ------------------
  773|     66|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 2.16k]
  ------------------
  774|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:53): [True: 66, False: 0]
  |  Branch (774:69): [True: 66, False: 0]
  ------------------
  775|     66|                                {
  776|     66|                                    return OpCode::SNEUI;
  777|     66|                                }
  778|      0|                                break;
  779|       |
  780|    219|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 219, False: 1.94k]
  ------------------
  781|    219|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 2.16k]
  ------------------
  782|    219|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 219, False: 0]
  |  Branch (782:37): [True: 219, False: 0]
  |  Branch (782:53): [True: 219, False: 0]
  |  Branch (782:69): [True: 219, False: 0]
  ------------------
  783|    219|                                {
  784|    219|                                    return OpCode::SUBUI;
  785|    219|                                }
  786|      0|                                break;
  787|  2.16k|                        }
  788|       |
  789|      0|                        break;
  790|  5.24k|                }
  791|       |
  792|  1.92k|                break;
  793|  5.24k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  1.92k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 1.83k, False: 82.4k]
  ------------------
  797|  1.83k|                const char c1 = token[0u];
  798|  1.83k|                const char c2 = token[1u];
  799|  1.83k|                const char c3 = token[2u];
  800|  1.83k|                const char c4 = token[3u];
  801|  1.83k|                const char c5 = token[4u];
  802|  1.83k|                const char c6 = token[5u];
  803|       |
  804|  1.83k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 1.16k, False: 669]
  |  Branch (804:21): [True: 1.16k, False: 669]
  |  Branch (804:37): [True: 1.16k, False: 0]
  |  Branch (804:53): [True: 1.16k, False: 0]
  ------------------
  805|  1.16k|                {
  806|  1.16k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 1.16k]
  ------------------
  807|  1.16k|                    {
  808|    262|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 262, False: 905]
  ------------------
  809|    262|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 1.16k]
  ------------------
  810|    262|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 262, False: 0]
  ------------------
  811|    262|                            {
  812|    262|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 195, False: 67]
  ------------------
  813|    195|                                {
  814|    195|                                    return OpCode::CVTD2F;
  815|    195|                                }
  816|     67|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 67, False: 0]
  ------------------
  817|     67|                                {
  818|     67|                                    return OpCode::CVTD2I;
  819|     67|                                }
  820|    262|                            }
  821|      0|                            break;
  822|       |
  823|    260|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 260, False: 907]
  ------------------
  824|    260|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 1.16k]
  ------------------
  825|    260|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 260, False: 0]
  ------------------
  826|    260|                            {
  827|    260|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 66, False: 194]
  ------------------
  828|     66|                                {
  829|     66|                                    return OpCode::CVTF2D;
  830|     66|                                }
  831|    194|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 194, False: 0]
  ------------------
  832|    194|                                {
  833|    194|                                    return OpCode::CVTF2I;
  834|    194|                                }
  835|    260|                            }
  836|      0|                            break;
  837|       |
  838|    645|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 645, False: 522]
  ------------------
  839|    645|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 1.16k]
  ------------------
  840|    645|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 645, False: 0]
  ------------------
  841|    645|                            {
  842|    645|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 578, False: 67]
  ------------------
  843|    578|                                {
  844|    578|                                    return OpCode::CVTI2D;
  845|    578|                                }
  846|     67|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 67, False: 0]
  ------------------
  847|     67|                                {
  848|     67|                                    return OpCode::CVTI2F;
  849|     67|                                }
  850|    645|                            }
  851|  1.16k|                    }
  852|  1.16k|                }
  853|    669|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 323, False: 346]
  |  Branch (853:26): [True: 323, False: 346]
  |  Branch (853:42): [True: 323, False: 0]
  |  Branch (853:58): [True: 323, False: 0]
  |  Branch (853:74): [True: 323, False: 0]
  ------------------
  854|    669|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 323, False: 0]
  |  Branch (854:42): [True: 323, False: 0]
  ------------------
  855|    323|                {
  856|    323|                    return OpCode::MULTUI;
  857|    323|                }
  858|    346|                break;
  859|  1.83k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|    346|            case 7: {
  ------------------
  |  Branch (862:13): [True: 269, False: 84.0k]
  ------------------
  863|    269|                const char c1 = token[0u];
  864|    269|                const char c2 = token[1u];
  865|    269|                const char c3 = token[2u];
  866|    269|                const char c4 = token[3u];
  867|    269|                const char c5 = token[4u];
  868|    269|                const char c6 = token[5u];
  869|    269|                const char c7 = token[6u];
  870|       |
  871|    269|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 169, False: 100]
  |  Branch (871:21): [True: 169, False: 100]
  |  Branch (871:37): [True: 169, False: 0]
  |  Branch (871:53): [True: 169, False: 0]
  ------------------
  872|    169|                {
  873|    169|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 83, False: 86]
  |  Branch (873:25): [True: 83, False: 86]
  |  Branch (873:41): [True: 83, False: 0]
  |  Branch (873:54): [True: 83, False: 0]
  |  Branch (873:70): [True: 83, False: 0]
  ------------------
  874|     83|                    {
  875|     83|                        return OpCode::MOVI2FP;
  876|     83|                    }
  877|     86|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 86, False: 0]
  |  Branch (877:25): [True: 86, False: 0]
  |  Branch (877:41): [True: 86, False: 0]
  |  Branch (877:57): [True: 86, False: 0]
  |  Branch (877:70): [True: 86, False: 0]
  ------------------
  878|     86|                    {
  879|     86|                        return OpCode::MOVFP2I;
  880|     86|                    }
  881|     86|                }
  882|    100|                break;
  883|    269|            }
  884|       |
  885|  5.63k|            default: {
  ------------------
  |  Branch (885:13): [True: 5.63k, False: 78.6k]
  ------------------
  886|  5.63k|                break;
  887|    269|            }
  888|  84.3k|        }
  889|       |
  890|       |        // None found
  891|  43.6k|        return OpCode::NONE;
  892|  84.3k|    }
_ZN3dlx3iceEcc:
   17|   114k|    {
   18|   114k|        constexpr const char diff = 'a' - 'A';
   19|   114k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 54.3k, False: 60.4k]
  |  Branch (19:28): [True: 20.7k, False: 39.6k]
  ------------------
   20|   114k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  84.2k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  1.24k|    {
  195|  1.24k|        ParseError err;
  196|       |
  197|  1.24k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  1.24k|        err.m_LineNumber                           = line_number;
  199|  1.24k|        err.m_Column                               = column;
  200|  1.24k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  1.24k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  1.24k|        return err;
  204|  1.24k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  1.24k|    {
  209|  1.24k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  1.24k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  1.24k|                                                         actual_type);
  212|  1.24k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|     69|    {
  218|     69|        ParseError err;
  219|       |
  220|     69|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|     69|        err.m_LineNumber        = line_number;
  222|     69|        err.m_Column            = column;
  223|     69|        err.invalid_number.text = text;
  224|       |
  225|     69|        return err;
  226|     69|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|     69|    {
  230|     69|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|     69|                                                token.GetColumn().unsafe(), token.GetText());
  232|     69|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  26.6k|    {
  257|  26.6k|        ParseError err;
  258|       |
  259|  26.6k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  26.6k|        err.m_LineNumber                   = line_number;
  261|  26.6k|        err.m_Column                       = column;
  262|  26.6k|        err.unexpected_token.expected_type = expected_type;
  263|  26.6k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  26.6k|        return err;
  266|  26.6k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  26.6k|    {
  271|  26.6k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  26.6k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  26.6k|                                                  token.GetType());
  274|  26.6k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  2.24k|    {
  279|  2.24k|        ParseError err;
  280|       |
  281|  2.24k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  2.24k|        err.m_LineNumber                   = line_number;
  283|  2.24k|        err.m_Column                       = column;
  284|  2.24k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  2.24k|        return err;
  287|  2.24k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    522|    {
  291|    522|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    522|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    522|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  19.3k|    {
  298|  19.3k|        ParseError err;
  299|       |
  300|  19.3k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  19.3k|        err.m_LineNumber                       = line_number;
  302|  19.3k|        err.m_Column                           = column;
  303|  19.3k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  19.3k|        return err;
  306|  19.3k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  19.3k|    {
  311|  19.3k|        return ConstructInvalidLabelIdentifierParseError(
  312|  19.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  19.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  5.14k|    {
  319|  5.14k|        ParseError err;
  320|       |
  321|  5.14k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  5.14k|        err.m_LineNumber                     = line_number;
  323|  5.14k|        err.m_Column                         = column;
  324|  5.14k|        err.label_already_defined.label_name = label_name;
  325|  5.14k|        err.label_already_defined.at_line    = at_line;
  326|  5.14k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  5.14k|        return err;
  329|  5.14k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  5.14k|    {
  334|  5.14k|        return ConstructLabelAlreadyDefinedParseError(
  335|  5.14k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  5.14k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  5.14k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  17.5k|    {
  342|  17.5k|        ParseError err;
  343|       |
  344|  17.5k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  17.5k|        err.m_LineNumber = line_number;
  346|  17.5k|        err.m_Column     = column;
  347|       |
  348|  17.5k|        return err;
  349|  17.5k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  17.5k|    {
  354|  17.5k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  17.5k|                                                        token.GetColumn().unsafe());
  356|  17.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  10.4k|    {
  362|  10.4k|        ParseError err;
  363|       |
  364|  10.4k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  10.4k|        err.m_LineNumber               = line_number;
  366|  10.4k|        err.m_Column                   = column;
  367|  10.4k|        err.too_few_arguments.required = required;
  368|  10.4k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  10.4k|        return err;
  371|  10.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  10.4k|    {
  376|  10.4k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  10.4k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  10.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  1.44k|    {
  383|  1.44k|        ParseError err;
  384|       |
  385|  1.44k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  1.44k|        err.m_LineNumber           = line_number;
  387|  1.44k|        err.m_Column               = column;
  388|  1.44k|        err.empty_label.label_name = label_name;
  389|       |
  390|  1.44k|        return err;
  391|  1.44k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  1.44k|    {
  395|  1.44k|        return ConstructEmptyLabelParseError(
  396|  1.44k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  1.44k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 1.29k, False: 146]
  ------------------
  398|  1.29k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  1.44k|                        token.GetText());
  400|  1.44k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    155|    {
  405|    155|        ParseError err;
  406|       |
  407|    155|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    155|        err.m_LineNumber = line_number;
  409|    155|        err.m_Column     = column;
  410|       |
  411|    155|        return err;
  412|    155|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    155|    {
  416|    155|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    155|                                               token.GetColumn().unsafe());
  418|    155|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  84.2k|    {
   19|  84.2k|        m_ParseErrors.emplace_back(phi::move(error));
   20|  84.2k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  3.41k|    {
  181|  3.41k|        ParsedProgram program;
  182|       |
  183|  3.41k|        program.m_Tokens = tokens;
  184|       |
  185|  3.41k|        phi::boolean line_has_instruction{false};
  186|  3.41k|        phi::usize   label_count{0u};
  187|       |
  188|   204k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 201k, False: 3.41k]
  ------------------
  189|   201k|        {
  190|   201k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   201k|            switch (current_token.GetType())
  195|   201k|            {
  196|       |                // Ignore comments
  197|  38.2k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 38.2k, False: 162k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  38.2k|                    break;
  200|       |
  201|  76.1k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 76.1k, False: 124k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  76.1k|                    line_has_instruction = false;
  204|  76.1k|                    break;
  205|       |
  206|  26.6k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 26.6k, False: 174k]
  ------------------
  207|  26.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 1.02k, False: 25.6k]
  ------------------
  208|  1.02k|                    {
  209|  1.02k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  1.02k|                                current_token, Token::Type::NewLine));
  211|  1.02k|                        break;
  212|  1.02k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  25.6k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 14.8k, False: 10.7k]
  ------------------
  217|  14.8k|                    {
  218|  14.8k|                        program.AddParseError(
  219|  14.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  14.8k|                        break;
  221|  14.8k|                    }
  222|       |
  223|  10.7k|                    phi::string_view label_name = current_token.GetText();
  224|  10.7k|                    label_name.remove_suffix(1u);
  225|       |
  226|  10.7k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.72k, False: 9.06k]
  ------------------
  227|  1.72k|                    {
  228|  1.72k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.72k|                                current_token.GetLineNumber().unsafe(),
  230|  1.72k|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.72k|                        break;
  232|  1.72k|                    }
  233|       |
  234|  9.06k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 2.28k, False: 6.77k]
  ------------------
  235|  2.28k|                    {
  236|  2.28k|                        program.AddParseError(
  237|  2.28k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  2.28k|                        break;
  239|  2.28k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  6.77k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 5.14k, False: 1.63k]
  ------------------
  243|  5.14k|                    {
  244|       |                        // Find first defintions of label
  245|  5.14k|                        const Token* first_label_definition =
  246|  5.14k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  5.14k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  5.14k|                                    {
  249|  5.14k|                                        phi::string_view token_label_name = t.GetText();
  250|  5.14k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  5.14k|                                        if (token_label_name == label_name)
  253|  5.14k|                                        {
  254|  5.14k|                                            return true;
  255|  5.14k|                                        }
  256|  5.14k|                                    }
  257|       |
  258|  5.14k|                                    return false;
  259|  5.14k|                                });
  260|       |
  261|  5.14k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  5.14k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  5.14k|                                current_token, *first_label_definition));
  265|  5.14k|                        break;
  266|  5.14k|                    }
  267|       |
  268|  1.63k|                    program.m_JumpData[label_name] =
  269|  1.63k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  1.63k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  1.63k|                    break;
  276|  6.77k|                }
  277|       |
  278|  38.8k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 38.8k, False: 162k]
  ------------------
  279|  38.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 17.5k, False: 21.3k]
  ------------------
  280|  17.5k|                    {
  281|  17.5k|                        program.AddParseError(
  282|  17.5k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  17.5k|                        break;
  284|  17.5k|                    }
  285|       |
  286|  21.3k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  21.3k|                    PHI_ASSERT(current_token.HasHint());
  290|  21.3k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  21.3k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  21.3k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  21.3k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  21.3k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  21.3k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  21.3k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  21.3k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  21.3k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  33.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 31.1k, False: 2.52k]
  ------------------
  312|  31.1k|                    {
  313|       |                        // Get next token
  314|  31.1k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 137, False: 31.0k]
  ------------------
  315|    137|                        {
  316|    137|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    137|                                    current_token, number_of_argument_required.unsafe(),
  318|    137|                                    argument_num.unsafe()));
  319|    137|                            break;
  320|    137|                        }
  321|       |
  322|  31.0k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  31.0k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 5.66k, False: 25.3k]
  ------------------
  326|  5.66k|                        {
  327|  5.66k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 155, False: 5.50k]
  ------------------
  328|    155|                            {
  329|    155|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    155|                            }
  331|       |
  332|  5.66k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  5.66k|                            continue;
  335|  5.66k|                        }
  336|       |
  337|  25.3k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 10.2k, False: 15.0k]
  ------------------
  338|  10.2k|                        {
  339|  10.2k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  10.2k|                                    token, number_of_argument_required.unsafe(),
  341|  10.2k|                                    argument_num.unsafe()));
  342|  10.2k|                            break;
  343|  10.2k|                        }
  344|       |
  345|  15.0k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  15.0k|                                parse_instruction_argument(
  347|  15.0k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  15.0k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 8.37k, False: 6.71k]
  ------------------
  349|  8.37k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  8.37k|                            break;
  352|  8.37k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  6.71k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  6.71k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  6.71k|                        argument_num++;
  359|  6.71k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  6.71k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  21.3k|                    program.m_Instructions.emplace_back(instruction);
  367|  21.3k|                    line_has_instruction = true;
  368|  21.3k|                    break;
  369|  38.8k|                }
  370|       |
  371|  21.3k|                default:
  ------------------
  |  Branch (371:17): [True: 21.3k, False: 179k]
  ------------------
  372|  21.3k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  21.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 7.60k, False: 13.7k]
  ------------------
  374|  7.60k|                    {
  375|  7.60k|                        expected_token_type = Token::Type::NewLine;
  376|  7.60k|                    }
  377|       |
  378|  21.3k|                    program.AddParseError(
  379|  21.3k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  21.3k|                    break;
  381|   201k|            }
  382|   201k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  3.41k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 255, False: 3.15k]
  ------------------
  386|    255|        {
  387|  2.70k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 2.45k, False: 255]
  ------------------
  388|  2.45k|            {
  389|  2.45k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  2.45k|                const Token& token = *it;
  392|  2.45k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 1.44k, False: 1.00k]
  ------------------
  393|  1.44k|                {
  394|  1.44k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  1.44k|                    --label_count;
  396|  1.44k|                }
  397|  2.45k|            }
  398|    255|        }
  399|       |
  400|  3.41k|        return program;
  401|  3.41k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  3.41k|    {
  405|  3.41k|        TokenStream tokens = Tokenize(source);
  406|  3.41k|        return Parse(tokens);
  407|  3.41k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  15.0k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  15.0k|        switch (token.GetType())
   37|  15.0k|        {
   38|    400|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 400, False: 14.6k]
  ------------------
   39|    400|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 73, False: 327]
  ------------------
   40|    400|                                          ArgumentType::AddressDisplacement))
   41|     73|                {
   42|     73|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|     73|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|     73|                    return {};
   46|     73|                }
   47|       |
   48|       |                // Get address displacement
   49|    327|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    327|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|    327|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 325]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    325|                auto         it           = tokens.current_position();
   61|    325|                const Token& first_token  = tokens.consume();
   62|    325|                const Token& second_token = tokens.consume();
   63|    325|                const Token& third_token  = tokens.consume();
   64|       |
   65|    325|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 325, False: 0]
  ------------------
   66|    325|                {
   67|    325|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    325|                            first_token, Token::Type::OpenBracket));
   69|    325|                    return {};
   70|    325|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  4.61k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 4.61k, False: 10.4k]
  ------------------
   97|  4.61k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 213, False: 4.40k]
  ------------------
   98|    213|                {
   99|    213|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    213|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    213|                    return {};
  102|    213|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  4.40k|                return ConstructInstructionArgumentRegisterInt(
  108|  4.40k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  4.61k|            }
  110|    207|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 207, False: 14.8k]
  ------------------
  111|    207|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 141, False: 66]
  ------------------
  112|    141|                {
  113|    141|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    141|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    141|                    return {};
  116|    141|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|     66|                return ConstructInstructionArgumentRegisterFloat(
  122|     66|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    207|            }
  124|    522|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 522, False: 14.5k]
  ------------------
  125|    522|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    522|                return {};
  128|    207|            }
  129|  4.18k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 4.18k, False: 10.9k]
  ------------------
  130|       |                // Parse as Label
  131|  4.18k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 488, False: 3.69k]
  ------------------
  132|    488|                {
  133|    488|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    488|                            token, expected_argument_type, ArgumentType::Label));
  135|    488|                    return {};
  136|    488|                }
  137|       |
  138|  3.69k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 3.69k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  3.69k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 2.22k, False: 1.46k]
  ------------------
  145|  2.22k|                {
  146|  2.22k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  2.22k|                    return {};
  148|  2.22k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.46k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  3.69k|            }
  154|  1.17k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 1.17k, False: 13.9k]
  ------------------
  155|  1.17k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 327, False: 848]
  ------------------
  156|    327|                {
  157|    327|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    327|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    327|                    return {};
  160|    327|                }
  161|       |
  162|    848|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 779, False: 69]
  ------------------
  163|    779|                {
  164|    779|                    return ConstructInstructionArgumentImmediateValue(
  165|    779|                            static_cast<std::int16_t>(token.GetHint()));
  166|    779|                }
  167|       |
  168|     69|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|     69|                return {};
  170|    848|            }
  171|       |
  172|  3.98k|            default:
  ------------------
  |  Branch (172:13): [True: 3.98k, False: 11.1k]
  ------------------
  173|  3.98k|                program.AddParseError(
  174|  3.98k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  3.98k|                return {};
  176|  15.0k|        }
  177|  15.0k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  45.6k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  45.6k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 20.0k, False: 25.6k]
  ------------------
  248|  20.0k|                                    {
  249|  20.0k|                                        phi::string_view token_label_name = t.GetText();
  250|  20.0k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  20.0k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 5.14k, False: 14.8k]
  ------------------
  253|  5.14k|                                        {
  254|  5.14k|                                            return true;
  255|  5.14k|                                        }
  256|  20.0k|                                    }
  257|       |
  258|  40.5k|                                    return false;
  259|  45.6k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    155|    {
  354|    155|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 155]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    155|        m_CurrentProgram = &program;
  361|       |
  362|    155|        m_ProgramCounter               = 0u;
  363|    155|        m_Halted                       = false;
  364|    155|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    155|        m_LastRaisedException          = Exception::None;
  366|    155|        m_CurrentStepCount             = 0u;
  367|       |
  368|    155|        return true;
  369|    155|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  95.6k|    {
   13|  95.6k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 20.8k, False: 74.8k]
  ------------------
   14|  20.8k|        {
   15|  20.8k|            const char first_char = token[0u];
   16|  20.8k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 3.68k, False: 17.1k]
  |  Branch (16:38): [True: 2.56k, False: 14.5k]
  ------------------
   17|  6.25k|            {
   18|  6.25k|                const char second_char = token[1u];
   19|  6.25k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 6.15k, False: 94]
  |  Branch (19:43): [True: 4.42k, False: 1.73k]
  ------------------
   20|  4.42k|                {
   21|  4.42k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  4.42k|                }
   23|  6.25k|            }
   24|  20.8k|        }
   25|  74.8k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 29.5k, False: 45.2k]
  ------------------
   26|  29.5k|        {
   27|  29.5k|            const char first_char = token[0u];
   28|  29.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 4.37k, False: 25.2k]
  |  Branch (28:38): [True: 1.42k, False: 23.7k]
  ------------------
   29|  5.79k|            {
   30|  5.79k|                const char second_char = token[1u];
   31|  5.79k|                const char third_char  = token[2u];
   32|       |
   33|  5.79k|                switch (second_char)
   34|  5.79k|                {
   35|  2.19k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 2.19k, False: 3.60k]
  ------------------
   36|  2.19k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 2.12k, False: 74]
  |  Branch (36:50): [True: 1.54k, False: 579]
  ------------------
   37|  1.54k|                        {
   38|  1.54k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  1.54k|                        }
   40|    653|                        break;
   41|  2.19k|                    }
   42|  3.15k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 3.15k, False: 2.64k]
  ------------------
   43|  3.15k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 3.08k, False: 66]
  |  Branch (43:50): [True: 2.51k, False: 578]
  ------------------
   44|  2.51k|                        {
   45|  2.51k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  2.51k|                        }
   47|    644|                        break;
   48|  3.15k|                    }
   49|    644|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 380, False: 5.41k]
  ------------------
   50|    380|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 74, False: 306]
  |  Branch (50:50): [True: 240, False: 66]
  ------------------
   51|    314|                        {
   52|    314|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    314|                        }
   54|     66|                        break;
   55|    380|                    }
   56|     68|                    default: {
  ------------------
  |  Branch (56:21): [True: 68, False: 5.72k]
  ------------------
   57|     68|                        break;
   58|    380|                    }
   59|  5.79k|                }
   60|  5.79k|            }
   61|  29.5k|        }
   62|       |
   63|  86.8k|        return IntRegisterID::None;
   64|  95.6k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  86.8k|    {
   68|  86.8k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 16.3k, False: 70.4k]
  ------------------
   69|  16.3k|        {
   70|  16.3k|            const char first_char = token[0u];
   71|  16.3k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 895, False: 15.5k]
  |  Branch (71:38): [True: 477, False: 15.0k]
  ------------------
   72|  1.37k|            {
   73|  1.37k|                const char second_char = token[1u];
   74|  1.37k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 1.29k, False: 79]
  |  Branch (74:43): [True: 950, False: 343]
  ------------------
   75|    950|                {
   76|    950|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|    950|                }
   78|  1.37k|            }
   79|  16.3k|        }
   80|  70.4k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 25.2k, False: 45.2k]
  ------------------
   81|  25.2k|        {
   82|  25.2k|            const char first_char = token[0u];
   83|  25.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 1.60k, False: 23.6k]
  |  Branch (83:38): [True: 1.08k, False: 22.5k]
  ------------------
   84|  2.68k|            {
   85|  2.68k|                const char second_char = token[1u];
   86|  2.68k|                const char third_char  = token[2u];
   87|       |
   88|  2.68k|                switch (second_char)
   89|  2.68k|                {
   90|    917|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 917, False: 1.77k]
  ------------------
   91|    917|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 850, False: 67]
  |  Branch (91:50): [True: 766, False: 84]
  ------------------
   92|    766|                        {
   93|    766|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|    766|                        }
   95|    151|                        break;
   96|    917|                    }
   97|    850|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 850, False: 1.83k]
  ------------------
   98|    850|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 271, False: 579]
  |  Branch (98:50): [True: 70, False: 201]
  ------------------
   99|     70|                        {
  100|     70|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|     70|                        }
  102|    780|                        break;
  103|    850|                    }
  104|    842|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 842, False: 1.84k]
  ------------------
  105|    842|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 513, False: 329]
  |  Branch (105:50): [True: 228, False: 101]
  ------------------
  106|    741|                        {
  107|    741|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    741|                        }
  109|    101|                        break;
  110|    842|                    }
  111|    101|                    default: {
  ------------------
  |  Branch (111:21): [True: 78, False: 2.60k]
  ------------------
  112|     78|                        break;
  113|    842|                    }
  114|  2.68k|                }
  115|  2.68k|            }
  116|  25.2k|        }
  117|       |
  118|  84.3k|        return FloatRegisterID::None;
  119|  86.8k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  96.3k|    {
  123|  96.3k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 26.1k, False: 70.1k]
  ------------------
  124|  26.1k|        {
  125|  26.1k|            const char c1 = token[0u];
  126|  26.1k|            const char c2 = token[1u];
  127|  26.1k|            const char c3 = token[2u];
  128|  26.1k|            const char c4 = token[3u];
  129|       |
  130|  26.1k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 2.51k, False: 23.6k]
  |  Branch (130:34): [True: 165, False: 23.5k]
  |  Branch (130:49): [True: 2.48k, False: 193]
  |  Branch (130:62): [True: 127, False: 66]
  ------------------
  131|  26.1k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 2.47k, False: 132]
  |  Branch (131:34): [True: 66, False: 66]
  |  Branch (131:49): [True: 2.47k, False: 66]
  |  Branch (131:62): [True: 0, False: 66]
  ------------------
  132|  26.1k|        }
  133|       |
  134|  70.1k|        return false;
  135|  96.3k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   178k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  54.7k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   580k|    {
   41|   580k|        return m_Type;
   42|   580k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   402k|    {
   51|   402k|        return m_LineNumber;
   52|   402k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   786k|    {
   56|   786k|        return m_Column;
   57|   786k|    }
_ZNK3dlx5Token9GetLengthEv:
   60|   550k|    {
   61|   550k|        return m_Text.length();
   62|   550k|    }
_ZNK3dlx5Token7GetTextEv:
   65|  94.5k|    {
   66|  94.5k|        return m_Text;
   67|  94.5k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  22.5k|    {
   80|  22.5k|        return m_HasHint;
   81|  22.5k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  26.9k|    {
   85|  26.9k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  26.9k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  26.9k|                   m_Type == Type::ImmediateInteger);
   88|  26.9k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  26.9k|        return m_Hint;
   91|  26.9k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  3.41k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  3.41k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  3.41k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|    327|    {
   52|    327|        return x + m_Iterator <= m_Tokens.size();
   53|    327|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   235k|    {
   57|   235k|        return m_Iterator < m_Tokens.size();
   58|   235k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   233k|    {
   62|   233k|        return m_Iterator >= m_Tokens.size();
   63|   233k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   233k|    {
   77|   233k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   233k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   233k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|    325|    {
  156|    325|        return m_Iterator;
  157|    325|    }
_ZNK3dlx11TokenStream5beginEv:
  169|  3.41k|    {
  170|       |#if defined(PHI_DEBUG)
  171|       |        //PHI_ASSERT(m_Finialized);
  172|       |#endif
  173|       |
  174|  3.41k|        return m_Tokens.begin();
  175|  3.41k|    }
_ZNK3dlx11TokenStream3endEv:
  187|  3.41k|    {
  188|       |#if defined(PHI_DEBUG)
  189|       |        //PHI_ASSERT(m_Finialized);
  190|       |#endif
  191|       |
  192|  3.41k|        return m_Tokens.end();
  193|  3.41k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    255|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    255|        return m_Tokens.rbegin();
  211|    255|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  2.45k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  2.45k|        return m_Tokens.rend();
  220|  2.45k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  3.41k|    {
   66|  3.41k|        TokenStream tokens;
   67|       |
   68|  3.41k|        phi::string_view current_token;
   69|       |
   70|  3.41k|        phi::u64 current_line_number{1u};
   71|  3.41k|        phi::u64 current_column{1u};
   72|  3.41k|        phi::u64 token_begin{0u};
   73|       |
   74|  3.41k|        phi::boolean parsing_comment{false};
   75|       |
   76|   527k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 524k, False: 3.41k]
  ------------------
   77|   524k|        {
   78|   524k|            const char c{source.at(i)};
   79|       |
   80|   524k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 87.0k, False: 437k]
  ------------------
   81|  87.0k|            {
   82|  87.0k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 16.9k, False: 70.1k]
  ------------------
   83|  16.9k|                {
   84|       |                    // Skip empty lines
   85|  16.9k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  16.9k|                                        current_line_number, current_column);
   87|       |
   88|  16.9k|                    parsing_comment = false;
   89|  16.9k|                    current_line_number += 1u;
   90|  16.9k|                    current_column = 1u;
   91|  16.9k|                    continue;
   92|  16.9k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  70.1k|                tokens.emplace_back(ParseToken(
   96|  70.1k|                        source.substring_view(
   97|  70.1k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  70.1k|                                current_token.length()),
   99|  70.1k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  70.1k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  70.1k|                                    current_line_number, current_column);
  103|       |
  104|  70.1k|                current_token   = phi::string_view{};
  105|  70.1k|                parsing_comment = false;
  106|  70.1k|                current_line_number += 1u;
  107|  70.1k|                current_column = 0u;
  108|  70.1k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   437k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 1.57k, False: 435k]
  |  Branch (110:34): [True: 40.3k, False: 395k]
  ------------------
  111|  41.9k|            {
  112|  41.9k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 38.8k, False: 3.04k]
  ------------------
  113|  38.8k|                {
  114|  38.8k|                    token_begin = i;
  115|  38.8k|                }
  116|  3.04k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 2.21k, False: 828]
  ------------------
  117|  2.21k|                {
  118|  2.21k|                    tokens.emplace_back(ParseToken(
  119|  2.21k|                            source.substring_view(
  120|  2.21k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  2.21k|                                    current_token.length()),
  122|  2.21k|                            current_line_number, current_column - current_token.length()));
  123|  2.21k|                    token_begin   = i;
  124|  2.21k|                    current_token = phi::string_view{};
  125|  2.21k|                }
  126|       |
  127|  41.9k|                parsing_comment = true;
  128|  41.9k|                current_token   = source.substring_view(
  129|  41.9k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  41.9k|                        current_token.length() + 1u);
  131|  41.9k|            }
  132|   395k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 45.4k, False: 349k]
  ------------------
  133|  45.4k|            {
  134|       |                // simply append the character
  135|  45.4k|                current_token = source.substring_view(
  136|  45.4k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  45.4k|                        current_token.length() + 1u);
  138|  45.4k|            }
  139|   349k|            else
  140|   349k|            {
  141|       |                // Not parsing a comment
  142|   349k|                switch (c)
  143|   349k|                {
  144|  31.9k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 31.9k, False: 317k]
  ------------------
  145|  32.3k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 400, False: 349k]
  ------------------
  146|  32.3k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 349k]
  ------------------
  147|  32.3k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 273, False: 32.0k]
  ------------------
  148|    273|                        {
  149|    273|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    273|                            continue;
  152|    273|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  32.0k|                        tokens.emplace_back(ParseToken(
  156|  32.0k|                                source.substring_view(
  157|  32.0k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  32.0k|                                        current_token.length()),
  159|  32.0k|                                current_line_number, current_column - current_token.length()));
  160|  32.0k|                        current_token = phi::string_view{};
  161|  32.0k|                        break;
  162|  12.6k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 12.6k, False: 337k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  12.6k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 11.4k, False: 1.22k]
  ------------------
  165|  11.4k|                        {
  166|  11.4k|                            current_token = source.substring_view(
  167|  11.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  11.4k|                                    current_token.length() + 1u);
  169|  11.4k|                            tokens.emplace_back(ParseToken(
  170|  11.4k|                                    source.substring_view(
  171|  11.4k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  11.4k|                                                    token_begin),
  173|  11.4k|                                            current_token.length()),
  174|  11.4k|                                    current_line_number,
  175|  11.4k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  11.4k|                            current_token = phi::string_view{};
  178|  11.4k|                        }
  179|  1.22k|                        else
  180|  1.22k|                        {
  181|       |                            // Orphan colon
  182|  1.22k|                            token_begin = i;
  183|       |
  184|  1.22k|                            tokens.emplace_back(
  185|  1.22k|                                    Token::Type::Colon,
  186|  1.22k|                                    source.substring_view(
  187|  1.22k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  1.22k|                                                    token_begin),
  189|  1.22k|                                            1u),
  190|  1.22k|                                    current_line_number, current_column);
  191|  1.22k|                        }
  192|  12.6k|                        break;
  193|  12.9k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 12.9k, False: 336k]
  ------------------
  194|  14.4k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 1.55k, False: 348k]
  ------------------
  195|  14.9k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 464, False: 349k]
  ------------------
  196|  14.9k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 12.8k, False: 2.05k]
  ------------------
  197|  12.8k|                        {
  198|  12.8k|                            tokens.emplace_back(ParseToken(
  199|  12.8k|                                    source.substring_view(
  200|  12.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  12.8k|                                                    token_begin),
  202|  12.8k|                                            current_token.length()),
  203|  12.8k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  12.8k|                            current_token = phi::string_view{};
  206|  12.8k|                        }
  207|       |
  208|  14.9k|                        Token::Type type;
  209|  14.9k|                        switch (c)
  210|  14.9k|                        {
  211|  12.9k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 12.9k, False: 2.02k]
  ------------------
  212|  12.9k|                                type = Token::Type::Comma;
  213|  12.9k|                                break;
  214|  1.55k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 1.55k, False: 13.3k]
  ------------------
  215|  1.55k|                                type = Token::Type::OpenBracket;
  216|  1.55k|                                break;
  217|    464|                            case ')':
  ------------------
  |  Branch (217:29): [True: 464, False: 14.4k]
  ------------------
  218|    464|                                type = Token::Type::ClosingBracket;
  219|    464|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 14.9k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  14.9k|#endif
  225|  14.9k|                        }
  226|       |
  227|  14.9k|                        token_begin = i;
  228|       |
  229|  14.9k|                        tokens.emplace_back(
  230|  14.9k|                                type,
  231|  14.9k|                                source.substring_view(
  232|  14.9k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  14.9k|                                        1u),
  234|  14.9k|                                current_line_number, current_column);
  235|  14.9k|                        break;
  236|       |
  237|   289k|                    default:
  ------------------
  |  Branch (237:21): [True: 289k, False: 59.9k]
  ------------------
  238|   289k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 88.8k, False: 200k]
  ------------------
  239|  88.8k|                        {
  240|  88.8k|                            token_begin = i;
  241|  88.8k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   289k|                        current_token = source.substring_view(
  245|   289k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   289k|                                current_token.length() + 1u);
  247|   349k|                }
  248|   349k|            }
  249|       |
  250|   506k|            current_column += 1u;
  251|   506k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  3.41k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 1.19k, False: 2.21k]
  ------------------
  255|  1.19k|        {
  256|  1.19k|            tokens.emplace_back(
  257|  1.19k|                    ParseToken(source.substring_view(
  258|  1.19k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  1.19k|                                       current_token.length()),
  260|  1.19k|                               current_line_number, current_column - current_token.length()));
  261|  1.19k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  3.41k|        tokens.finalize();
  265|       |
  266|  3.41k|        return tokens;
  267|  3.41k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   129k|    {
   14|   129k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 2.51k, False: 127k]
  |  Branch (14:13): [True: 2.25k, False: 127k]
  |  Branch (14:36): [True: 2.25k, False: 259]
  ------------------
   15|  2.25k|        {
   16|  2.25k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  2.25k|            if (number)
  ------------------
  |  Branch (18:17): [True: 1.53k, False: 715]
  ------------------
   19|  1.53k|            {
   20|  1.53k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  1.53k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  1.53k|            }
   23|       |
   24|    715|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  2.25k|        }
   26|       |
   27|   127k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 804, False: 126k]
  |  Branch (27:13): [True: 41.0k, False: 86.6k]
  |  Branch (27:36): [True: 40.2k, False: 86.6k]
  ------------------
   28|  41.0k|        {
   29|  41.0k|            return {Token::Type::Comment, token, line_number, column};
   30|  41.0k|        }
   31|       |
   32|  86.6k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.96k, False: 83.6k]
  ------------------
   33|  2.96k|        {
   34|  2.96k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.96k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.96k|        }
   37|       |
   38|  83.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 2.47k, False: 81.1k]
  ------------------
   39|  2.47k|        {
   40|  2.47k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  2.47k|        }
   42|       |
   43|  81.1k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 7.68k, False: 73.4k]
  ------------------
   44|  7.68k|        {
   45|  7.68k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  7.68k|                    static_cast<phi::uint32_t>(id)};
   47|  7.68k|        }
   48|       |
   49|  73.4k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 2.46k, False: 71.0k]
  ------------------
   50|  2.46k|        {
   51|  2.46k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  2.46k|                    static_cast<phi::uint32_t>(id)};
   53|  2.46k|        }
   54|       |
   55|  71.0k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 40.0k, False: 30.9k]
  ------------------
   56|  40.0k|        {
   57|  40.0k|            return {Token::Type::OpCode, token, line_number, column,
   58|  40.0k|                    static_cast<phi::uint32_t>(opcode)};
   59|  40.0k|        }
   60|       |
   61|  30.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  71.0k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   59|  3.41k|    {
   60|       |        // Constants
   61|  3.41k|        constexpr std::uint8_t number_of_opcodes =
   62|  3.41k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   63|  3.41k|        constexpr std::uint8_t number_of_int_registers   = 32;
   64|  3.41k|        constexpr std::uint8_t number_of_float_registers = 32;
   65|       |
   66|  3.41k|        std::string ret;
   67|       |
   68|   106k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (68:36): [True: 103k, False: 3.39k]
  ------------------
   69|   103k|        {
   70|   103k|            std::uint8_t current_value = data[index++];
   71|       |
   72|   103k|            switch (current_value)
   73|   103k|            {
   74|       |                // OpCode
   75|  29.6k|                case 0: {
  ------------------
  |  Branch (75:17): [True: 29.6k, False: 73.4k]
  ------------------
   76|       |                    // Has one more value
   77|  29.6k|                    if (index < size)
  ------------------
  |  Branch (77:25): [True: 29.6k, False: 7]
  ------------------
   78|  29.6k|                    {
   79|  29.6k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   80|       |
   81|  29.6k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   82|       |
   83|  29.6k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (83:29): [True: 3, False: 29.6k]
  ------------------
   84|      3|                        {
   85|      3|                            return detail::ErrorString;
   86|      3|                        }
   87|  29.6k|                    }
   88|  29.6k|                    break;
   89|  29.6k|                }
   90|       |
   91|       |                // Int Register
   92|  29.6k|                case 1: {
  ------------------
  |  Branch (92:17): [True: 8.38k, False: 94.6k]
  ------------------
   93|       |                    // Has one more value
   94|  8.38k|                    if (index < size)
  ------------------
  |  Branch (94:25): [True: 8.38k, False: 4]
  ------------------
   95|  8.38k|                    {
   96|  8.38k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   97|       |
   98|  8.38k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   99|  8.38k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (99:29): [True: 1, False: 8.38k]
  ------------------
  100|      1|                        {
  101|      1|                            return detail::ErrorString;
  102|      1|                        }
  103|  8.38k|                    }
  104|  8.38k|                    break;
  105|  8.38k|                }
  106|       |
  107|       |                // Float register
  108|  8.38k|                case 2: {
  ------------------
  |  Branch (108:17): [True: 2.46k, False: 100k]
  ------------------
  109|       |                    // Has one more value
  110|  2.46k|                    if (index < size)
  ------------------
  |  Branch (110:25): [True: 2.46k, False: 1]
  ------------------
  111|  2.46k|                    {
  112|  2.46k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  113|       |
  114|  2.46k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  115|  2.46k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (115:29): [True: 1, False: 2.46k]
  ------------------
  116|      1|                        {
  117|      1|                            return detail::ErrorString;
  118|      1|                        }
  119|  2.46k|                    }
  120|  2.46k|                    break;
  121|  2.46k|                }
  122|       |
  123|       |                // Floating point status register
  124|  2.56k|                case 3: {
  ------------------
  |  Branch (124:17): [True: 2.56k, False: 100k]
  ------------------
  125|  2.56k|                    ret += "FPSR";
  126|  2.56k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (126:25): [True: 1, False: 2.56k]
  ------------------
  127|      1|                    {
  128|      1|                        return detail::ErrorString;
  129|      1|                    }
  130|       |
  131|  2.56k|                    break;
  132|  2.56k|                }
  133|       |
  134|       |                // Immediate integer
  135|  3.07k|                case 4: {
  ------------------
  |  Branch (135:17): [True: 3.07k, False: 100k]
  ------------------
  136|  3.07k|                    ret += "#";
  137|  3.07k|                    [[fallthrough]];
  138|  3.07k|                }
  139|       |
  140|       |                // Integer literal
  141|  7.58k|                case 5: {
  ------------------
  |  Branch (141:17): [True: 4.51k, False: 98.5k]
  ------------------
  142|  7.58k|                    std::size_t size_of_int = std::min(2ul, size - index);
  143|       |
  144|  7.58k|                    if (size_of_int > 0)
  ------------------
  |  Branch (144:25): [True: 7.53k, False: 47]
  ------------------
  145|  7.53k|                    {
  146|  7.53k|                        std::int16_t value = 0;
  147|       |
  148|  22.5k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (148:32): [True: 15.0k, False: 7.53k]
  ------------------
  149|  15.0k|                        {
  150|  15.0k|                            value <<= 8;
  151|  15.0k|                            value &= data[index++];
  152|  15.0k|                        }
  153|       |
  154|  7.53k|                        ret += std::to_string(value);
  155|  7.53k|                    }
  156|  7.58k|                    break;
  157|  3.07k|                }
  158|       |
  159|       |                // Label
  160|  3.16k|                case 6: {
  ------------------
  |  Branch (160:17): [True: 3.16k, False: 99.9k]
  ------------------
  161|  3.16k|                    std::size_t label_length = std::min(5ul, size - index);
  162|       |
  163|  3.16k|                    if (label_length > 0)
  ------------------
  |  Branch (163:25): [True: 3.15k, False: 1]
  ------------------
  164|  3.15k|                    {
  165|  3.15k|                        std::string label_name = "lbl_";
  166|       |
  167|  18.7k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (167:32): [True: 15.6k, False: 3.15k]
  ------------------
  168|  15.6k|                        {
  169|  15.6k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  170|       |
  171|  15.6k|                            label_name += c;
  172|  15.6k|                        }
  173|       |
  174|       |                        // Add 1 in 10 chance to add a colon
  175|  3.15k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (175:29): [True: 3.08k, False: 71]
  |  Branch (175:45): [True: 2.57k, False: 518]
  ------------------
  176|  2.57k|                        {
  177|  2.57k|                            label_name += ':';
  178|  2.57k|                            ret += label_name;
  179|  2.57k|                        }
  180|    589|                        else
  181|    589|                        {
  182|    589|                            ret += label_name;
  183|    589|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (183:33): [True: 1, False: 588]
  ------------------
  184|      1|                            {
  185|      1|                                return detail::ErrorString;
  186|      1|                            }
  187|    589|                        }
  188|  3.15k|                    }
  189|  3.15k|                    break;
  190|  3.16k|                }
  191|       |
  192|       |                // Newline
  193|  8.91k|                case 7: {
  ------------------
  |  Branch (193:17): [True: 8.91k, False: 94.1k]
  ------------------
  194|  8.91k|                    ret += '\n';
  195|  8.91k|                    break;
  196|  3.16k|                }
  197|       |
  198|       |                // Comment
  199|  40.3k|                case 8: {
  ------------------
  |  Branch (199:17): [True: 40.3k, False: 62.7k]
  ------------------
  200|  40.3k|                    std::size_t comment_length = std::min(5ul, size - index);
  201|       |
  202|  40.3k|                    if (comment_length > 0)
  ------------------
  |  Branch (202:25): [True: 40.3k, False: 15]
  ------------------
  203|  40.3k|                    {
  204|  40.3k|                        std::string comment = "; ";
  205|       |
  206|   240k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (206:32): [True: 199k, False: 40.3k]
  ------------------
  207|   199k|                        {
  208|   199k|                            comment += static_cast<char>(data[index++]);
  209|   199k|                        }
  210|       |
  211|  40.3k|                        ret += comment + '\n';
  212|  40.3k|                    }
  213|  40.3k|                    break;
  214|  3.16k|                }
  215|       |
  216|       |                // Ignore
  217|      8|                default:
  ------------------
  |  Branch (217:17): [True: 8, False: 103k]
  ------------------
  218|      8|                    return detail::ErrorString;
  219|   103k|            }
  220|   103k|        }
  221|       |
  222|  3.39k|        return ret;
  223|  3.41k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   24|  43.6k|        {
   25|  43.6k|            if (index < size)
  ------------------
  |  Branch (25:17): [True: 42.5k, False: 1.08k]
  ------------------
   26|  42.5k|            {
   27|  42.5k|                std::uint8_t val = data[index++];
   28|  42.5k|                if (val == 0)
  ------------------
  |  Branch (28:21): [True: 31.7k, False: 10.8k]
  ------------------
   29|  31.7k|                {
   30|  31.7k|                    text += ' ';
   31|  31.7k|                }
   32|  10.8k|                else if (val == 1)
  ------------------
  |  Branch (32:26): [True: 10.8k, False: 7]
  ------------------
   33|  10.8k|                {
   34|  10.8k|                    text += ',';
   35|  10.8k|                }
   36|      7|                else
   37|      7|                {
   38|      7|                    return false;
   39|      7|                }
   40|  42.5k|            }
   41|       |
   42|  43.6k|            return true;
   43|  43.6k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   48|  15.6k|        {
   49|  15.6k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (49:17): [True: 11.6k, False: 3.95k]
  ------------------
   50|  11.6k|            {
   51|  11.6k|                return '_';
   52|  11.6k|            }
   53|       |
   54|  3.95k|            return c;
   55|  15.6k|        }

LLVMFuzzerTestOneInput:
   11|  3.41k|{
   12|  3.41k|    static dlxemu::Emulator emu;
   13|       |
   14|  3.41k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|  3.41k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  3.41k|    editor.SetText(source);
   20|  3.41k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  3.41k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  3.41k|    editor.ColorizeInternal();
   25|       |
   26|  3.41k|    return 0;
   27|  3.41k|}


_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  195|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  200|  36.6k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  238|  7.32k|    {
  239|  7.32k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (239:13): [True: 5.38k, False: 1.94k]
  ------------------
  240|  5.38k|        {
  241|  5.38k|            return m_Line < other.m_Line;
  242|  5.38k|        }
  243|       |
  244|  1.94k|        return m_Column <= other.m_Column;
  245|  7.32k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  249|      1|    {
  250|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (250:13): [True: 0, False: 1]
  ------------------
  251|      0|        {
  252|      0|            return m_Line > other.m_Line;
  253|      0|        }
  254|       |
  255|      1|        return m_Column >= other.m_Column;
  256|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  263|  4.31M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  291|      1|    {
  292|      1|        Colorize();
  293|      1|        m_Lines.push_back(Line());
  294|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  297|      1|    {
  298|      1|        VerifyInternalState();
  299|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  347|  7.32k|    {
  348|  7.32k|        m_ErrorMarkers.clear();
  349|  7.32k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  412|  7.32k|    {
  413|  7.32k|        m_Breakpoints.clear();
  414|  7.32k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  492|  7.32k|    {
  493|  7.32k|        m_Lines.clear();
  494|  7.32k|        ResetState();
  495|  7.32k|        m_Lines.emplace_back(Line());
  496|       |
  497|  7.32k|        for (const char character : text)
  ------------------
  |  Branch (497:35): [True: 5.63M, False: 7.32k]
  ------------------
  498|  5.63M|        {
  499|  5.63M|            if (character == '\r' ||
  ------------------
  |  Branch (499:17): [True: 1.79k, False: 5.63M]
  |  Branch (499:17): [True: 333k, False: 5.29M]
  ------------------
  500|  5.63M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (500:18): [True: 1.31M, False: 4.31M]
  |  Branch (500:48): [True: 334k, False: 982k]
  |  Branch (500:69): [True: 331k, False: 3.31k]
  ------------------
  501|   333k|            {
  502|       |                // ignore the carriage return character and control characters
  503|   333k|            }
  504|  5.29M|            else if (character == '\n')
  ------------------
  |  Branch (504:22): [True: 982k, False: 4.31M]
  ------------------
  505|   982k|            {
  506|   982k|                m_Lines.emplace_back(Line());
  507|   982k|            }
  508|  4.31M|            else
  509|  4.31M|            {
  510|  4.31M|                m_Lines.back().emplace_back(
  511|  4.31M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  512|  4.31M|            }
  513|  5.63M|        }
  514|       |
  515|  7.32k|        m_TextChanged = true;
  516|  7.32k|        m_ScrollToTop = true;
  517|       |
  518|  7.32k|        m_UndoBuffer.clear();
  519|  7.32k|        m_UndoIndex = 0u;
  520|       |
  521|  7.32k|        Colorize();
  522|  7.32k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  525|  7.32k|    {
  526|  7.32k|        const phi::u32 max_line = GetMaxLineNumber();
  527|       |
  528|  7.32k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  529|  7.32k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1501|      1|    {
 1502|       |        // Lines should never be empty
 1503|      1|        PHI_ASSERT(!m_Lines.empty());
 1504|       |
 1505|       |        // Verify Selection is still in a valid state
 1506|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1507|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1509|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1511|       |
 1512|       |        // Verify cursor position
 1513|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1514|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1515|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1516|       |
 1517|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1518|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1519|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1520|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1521|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1522|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1523|       |#endif
 1524|       |
 1525|       |        // Verify that all breakpoints are on existing lines
 1526|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1526:35): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            PHI_ASSERT(break_point != 0u);
 1529|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1530|      0|        }
 1531|       |
 1532|       |        // Verify that all error markers are on existing lines
 1533|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1533:34): [True: 0, False: 1]
  ------------------
 1534|      0|        {
 1535|      0|            const phi::u32 line_number = error_marker.first;
 1536|       |
 1537|      0|            PHI_ASSERT(line_number != 0u);
 1538|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1539|      0|        }
 1540|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1543|      1|    {
 1544|      1|        constexpr const static Palette palette = {{
 1545|      1|                0xff7f7f7f, // Default
 1546|      1|                0xffd69c56, // OpCode
 1547|      1|                0xff00ff00, // Register
 1548|      1|                0xff7070e0, // IntegerLiteral
 1549|      1|                0xff206020, // Comment
 1550|      1|                0xff101010, // Background
 1551|      1|                0xffe0e0e0, // Cursor
 1552|      1|                0x80a06020, // Selection
 1553|      1|                0x800020ff, // ErrorMarker
 1554|      1|                0x40f08000, // Breakpoint
 1555|      1|                0xff707000, // Line number
 1556|      1|                0x40000000, // Current line fill
 1557|      1|                0x40808080, // Current line fill (inactive)
 1558|      1|                0x40a0a0a0, // Current line edge
 1559|      1|        }};
 1560|       |
 1561|      1|        return palette;
 1562|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1729|  7.32k|    {
 1730|       |        // TODO: This is quite unreadable
 1731|  7.32k|        const phi::u32 to_line =
 1732|  7.32k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1732:17): [True: 7.32k, False: 0]
  ------------------
 1733|  7.32k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1734|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1735|       |
 1736|  7.32k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1737|  7.32k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1738|  7.32k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1739|  7.32k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1740|  7.32k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1846|  7.32k|    {
 1847|  7.32k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1848|  7.32k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1849|  7.32k|        PHI_ASSERT(start <= end);
 1850|       |
 1851|  7.32k|        std::string result;
 1852|       |
 1853|  7.32k|        phi::u32   lstart = start.m_Line;
 1854|  7.32k|        phi::u32   lend   = end.m_Line;
 1855|  7.32k|        phi::u32   istart = GetCharacterIndex(start);
 1856|  7.32k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1857|  7.32k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1858|  7.32k|        phi::usize size   = 0u;
 1859|       |
 1860|   996k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1860:35): [True: 989k, False: 7.32k]
  ------------------
 1861|   989k|        {
 1862|   989k|            PHI_ASSERT(i < m_Lines.size());
 1863|   989k|            size += m_Lines[i.unsafe()].size();
 1864|   989k|        }
 1865|       |
 1866|  7.32k|        result.reserve((size + size / 8u).unsafe());
 1867|       |
 1868|  5.30M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1868:16): [True: 1.93M, False: 3.36M]
  |  Branch (1868:16): [True: 5.29M, False: 7.32k]
  |  Branch (1868:33): [True: 3.36M, False: 7.32k]
  ------------------
 1869|  5.29M|        {
 1870|  5.29M|            PHI_ASSERT(lstart < m_Lines.size());
 1871|       |
 1872|  5.29M|            const Line& line = m_Lines[lstart.unsafe()];
 1873|  5.29M|            if (istart < line.size())
  ------------------
  |  Branch (1873:17): [True: 4.31M, False: 982k]
  ------------------
 1874|  4.31M|            {
 1875|  4.31M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1876|  4.31M|                istart++;
 1877|  4.31M|            }
 1878|   982k|            else
 1879|   982k|            {
 1880|   982k|                istart = 0u;
 1881|   982k|                ++lstart;
 1882|       |
 1883|   982k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1883:21): [True: 982k, False: 0]
  ------------------
 1884|   982k|                {
 1885|   982k|                    result += '\n';
 1886|   982k|                }
 1887|   982k|            }
 1888|  5.29M|        }
 1889|       |
 1890|  7.32k|        return result;
 1891|  7.32k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2427|  14.6k|    {
 2428|  14.6k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2429|       |
 2430|  14.6k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2431|  14.6k|        phi::u32    index = 0u;
 2432|   961k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2432:35): [True: 953k, False: 8.66k]
  |  Branch (2432:35): [True: 947k, False: 14.6k]
  |  Branch (2432:58): [True: 947k, False: 5.99k]
  ------------------
 2433|   947k|        {
 2434|   947k|            PHI_ASSERT(index < line.size());
 2435|   947k|            const Char character = line[index.unsafe()].m_Char;
 2436|       |
 2437|   947k|            if (character == '\t')
  ------------------
  |  Branch (2437:17): [True: 0, False: 947k]
  ------------------
 2438|      0|            {
 2439|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2440|      0|            }
 2441|   947k|            else
 2442|   947k|            {
 2443|   947k|                ++column;
 2444|   947k|            }
 2445|       |
 2446|   947k|            index += UTF8CharLength(character);
 2447|   947k|        }
 2448|       |
 2449|  14.6k|        return index;
 2450|  14.6k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2499|  7.32k|    {
 2500|  7.32k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2500:13): [True: 0, False: 7.32k]
  ------------------
 2501|      0|        {
 2502|      0|            return 0u;
 2503|      0|        }
 2504|       |
 2505|  7.32k|        const Line& line = m_Lines[line_number.unsafe()];
 2506|  7.32k|        phi::u32    col  = 0u;
 2507|       |
 2508|   954k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2508:32): [True: 947k, False: 7.32k]
  ------------------
 2509|   947k|        {
 2510|   947k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2511|   947k|            if (character == '\t')
  ------------------
  |  Branch (2511:17): [True: 0, False: 947k]
  ------------------
 2512|      0|            {
 2513|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2514|      0|            }
 2515|   947k|            else
 2516|   947k|            {
 2517|   947k|                col++;
 2518|   947k|            }
 2519|       |
 2520|   947k|            i += UTF8CharLength(character);
 2521|   947k|        }
 2522|       |
 2523|  7.32k|        return col;
 2524|  7.32k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2527|  7.32k|    {
 2528|  7.32k|        PHI_ASSERT(!m_Lines.empty());
 2529|       |
 2530|  7.32k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2531|  7.32k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3659|  2.36M|    {
 3660|  2.36M|        PaletteIndex palette_index{PaletteIndex::Default};
 3661|       |
 3662|       |        // Determine palette color
 3663|  2.36M|        switch (token.GetType())
 3664|  2.36M|        {
 3665|   286k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3665:13): [True: 286k, False: 2.07M]
  ------------------
 3666|   286k|                palette_index = PaletteIndex::Comment;
 3667|   286k|                break;
 3668|  33.1k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3668:13): [True: 33.1k, False: 2.32M]
  ------------------
 3669|  57.9k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3669:13): [True: 24.7k, False: 2.33M]
  ------------------
 3670|  57.9k|                palette_index = PaletteIndex::IntegerLiteral;
 3671|  57.9k|                break;
 3672|   506k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3672:13): [True: 506k, False: 1.85M]
  ------------------
 3673|   506k|                palette_index = PaletteIndex::OpCode;
 3674|   506k|                break;
 3675|  22.7k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3675:13): [True: 22.7k, False: 2.33M]
  ------------------
 3676|   114k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3676:13): [True: 92.1k, False: 2.26M]
  ------------------
 3677|   143k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3677:13): [True: 28.7k, False: 2.33M]
  ------------------
 3678|   143k|                palette_index = PaletteIndex::Register;
 3679|   143k|                break;
 3680|   982k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3680:13): [True: 982k, False: 1.37M]
  ------------------
 3681|   982k|                return;
 3682|   385k|            default:
  ------------------
  |  Branch (3682:13): [True: 385k, False: 1.97M]
  ------------------
 3683|   385k|                break;
 3684|  2.36M|        }
 3685|       |
 3686|  1.37M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3687|  1.37M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3688|       |
 3689|  1.37M|        for (phi::u64 index{token.GetColumn() - 1u};
 3690|  5.22M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3690:14): [True: 3.84M, False: 1.37M]
  ------------------
 3691|  3.84M|        {
 3692|  3.84M|            PHI_ASSERT(index < line.size());
 3693|  3.84M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3694|  3.84M|        }
 3695|  1.37M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3698|  7.32k|    {
 3699|  7.32k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3700|       |
 3701|  7.32k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3701:38): [True: 2.36M, False: 7.32k]
  ------------------
 3702|  2.36M|        {
 3703|  2.36M|            ColorizeToken(token);
 3704|  2.36M|        }
 3705|  7.32k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3708|  7.32k|    {
 3709|  7.32k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3710|  7.32k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3711|  7.32k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3712|       |
 3713|       |        // Clear breakpoints and markers
 3714|  7.32k|        ClearBreakPoints();
 3715|  7.32k|        ClearErrorMarkers();
 3716|  7.32k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  133|   947k|{
  134|   947k|    return UTF8CharLength(static_cast<char>(characater));
  135|   947k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  103|  1.89M|{
  104|  1.89M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (104:9): [True: 0, False: 1.89M]
  ------------------
  105|      0|    {
  106|      0|        return 6_u8;
  107|      0|    }
  108|       |
  109|  1.89M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (109:9): [True: 0, False: 1.89M]
  ------------------
  110|      0|    {
  111|      0|        return 5_u8;
  112|      0|    }
  113|       |
  114|  1.89M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (114:9): [True: 0, False: 1.89M]
  ------------------
  115|      0|    {
  116|      0|        return 4_u8;
  117|      0|    }
  118|       |
  119|  1.89M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (119:9): [True: 0, False: 1.89M]
  ------------------
  120|      0|    {
  121|      0|        return 3_u8;
  122|      0|    }
  123|       |
  124|  1.89M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (124:9): [True: 0, False: 1.89M]
  ------------------
  125|      0|    {
  126|      0|        return 2_u8;
  127|      0|    }
  128|       |
  129|  1.89M|    return 1_u8;
  130|  1.89M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  7.32k|    {
  175|  7.32k|        return m_DLXProgram;
  176|  7.32k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  7.32k|    {
  180|  7.32k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  7.32k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 196, False: 7.13k]
  ------------------
  183|    196|        {
  184|    196|            m_Processor.LoadProgram(m_DLXProgram);
  185|    196|        }
  186|  7.32k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  7.32k|    {
  200|  7.32k|        return m_CodeEditor;
  201|  7.32k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|      1|    {
  107|      1|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 1]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 1]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|      1|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 1]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   572k|        {
  169|   572k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   572k|            switch (index.unsafe())
  172|   572k|            {
  173|   241k|                case 0:
  ------------------
  |  Branch (173:17): [True: 241k, False: 330k]
  ------------------
  174|   241k|                    return m_Arg1Type;
  175|       |
  176|   171k|                case 1:
  ------------------
  |  Branch (176:17): [True: 171k, False: 400k]
  ------------------
  177|   171k|                    return m_Arg2Type;
  178|       |
  179|   159k|                case 2:
  ------------------
  |  Branch (179:17): [True: 159k, False: 412k]
  ------------------
  180|   159k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 572k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   572k|#endif
  187|   572k|            }
  188|   572k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   153k|        {
  195|   153k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   153k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 153k, False: 179]
  ------------------
  199|   153k|            {
  200|   153k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   153k|            }
  202|   153k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 124k, False: 29.6k]
  ------------------
  203|   124k|            {
  204|   124k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   124k|            }
  206|   153k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 79.6k, False: 74.0k]
  ------------------
  207|  79.6k|            {
  208|  79.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  79.6k|            }
  210|       |
  211|   153k|            return number_of_argument_required;
  212|   153k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   153k|        {
  221|   153k|            return m_Executor;
  222|   153k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  67.0k|    {
   38|  67.0k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  67.0k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  67.0k|                                         static_cast<underlying_t>(rhs));
   42|  67.0k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  67.0k|    {
   55|  67.0k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  67.0k|        return static_cast<underlying_t>(type & test) != 0;
   58|  67.0k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   453k|    {
  204|   453k|        switch (value)
  205|   453k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   164k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   164k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 164k, False: 289k]
  |  |  |  |  ------------------
  |  |  |  |  208|   164k|        return #name;
  |  |  ------------------
  |  |   16|   164k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  11.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.3k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.3k|        return #name;
  |  |  ------------------
  |  |   17|  11.3k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.15k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.15k|        return #name;
  |  |  ------------------
  |  |   18|  19.0k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  19.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 19.0k, False: 434k]
  |  |  |  |  ------------------
  |  |  |  |  208|  19.0k|        return #name;
  |  |  ------------------
  |  |   19|  19.0k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.00k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.00k|        return #name;
  |  |  ------------------
  |  |   20|  4.48k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.48k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.48k|        return #name;
  |  |  ------------------
  |  |   21|  4.48k|                                                                                                   \
  |  |   22|  4.48k|    /* Sub */                                                                                      \
  |  |   23|  4.48k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.41k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.41k|        return #name;
  |  |  ------------------
  |  |   24|  4.99k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.99k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.99k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.99k|        return #name;
  |  |  ------------------
  |  |   25|  4.99k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.09k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.09k|        return #name;
  |  |  ------------------
  |  |   26|  6.38k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  6.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.38k, False: 446k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.38k|        return #name;
  |  |  ------------------
  |  |   27|  6.38k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.16k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.16k|        return #name;
  |  |  ------------------
  |  |   28|  4.16k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    133|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 133, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    133|        return #name;
  |  |  ------------------
  |  |   29|    133|                                                                                                   \
  |  |   30|    133|    /* Multiplication */                                                                           \
  |  |   31|    885|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    885|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 885, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    885|        return #name;
  |  |  ------------------
  |  |   32|    885|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    638|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 638, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    638|        return #name;
  |  |  ------------------
  |  |   33|  1.33k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.33k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.33k|        return #name;
  |  |  ------------------
  |  |   34|  2.83k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.83k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.83k|        return #name;
  |  |  ------------------
  |  |   35|  8.94k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  8.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.94k, False: 444k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.94k|        return #name;
  |  |  ------------------
  |  |   36|  8.94k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    299|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 299, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    299|        return #name;
  |  |  ------------------
  |  |   37|    299|                                                                                                   \
  |  |   38|    299|    /* Division */                                                                                 \
  |  |   39|  1.54k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.54k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.54k|        return #name;
  |  |  ------------------
  |  |   40|  1.54k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    237|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 237, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    237|        return #name;
  |  |  ------------------
  |  |   41|  4.62k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.62k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.62k|        return #name;
  |  |  ------------------
  |  |   42|  4.62k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.09k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.09k|        return #name;
  |  |  ------------------
  |  |   43|  1.09k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    185|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 185, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    185|        return #name;
  |  |  ------------------
  |  |   44|  4.53k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.53k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.53k|        return #name;
  |  |  ------------------
  |  |   45|  4.53k|                                                                                                   \
  |  |   46|  4.53k|    /* Shift left (logical) */                                                                     \
  |  |   47|  5.32k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.32k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.32k|        return #name;
  |  |  ------------------
  |  |   48|  5.32k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.34k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.34k|        return #name;
  |  |  ------------------
  |  |   49|  3.34k|                                                                                                   \
  |  |   50|  3.34k|    /* Shift right (logical) */                                                                    \
  |  |   51|  3.34k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 92, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     92|        return #name;
  |  |  ------------------
  |  |   52|    825|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    825|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 825, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    825|        return #name;
  |  |  ------------------
  |  |   53|    825|                                                                                                   \
  |  |   54|    825|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  4.48k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.48k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.48k|        return #name;
  |  |  ------------------
  |  |   56|  4.48k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.54k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.54k|        return #name;
  |  |  ------------------
  |  |   57|  3.54k|                                                                                                   \
  |  |   58|  3.54k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  3.54k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.94k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.94k|        return #name;
  |  |  ------------------
  |  |   60|  1.94k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    627|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 627, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    627|        return #name;
  |  |  ------------------
  |  |   61|    627|                                                                                                   \
  |  |   62|    627|    /* Logic */                                                                                    \
  |  |   63|    627|                                                                                                   \
  |  |   64|    627|    /* And */                                                                                      \
  |  |   65|  5.53k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.53k, False: 447k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.53k|        return #name;
  |  |  ------------------
  |  |   66|  5.53k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    854|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 854, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    854|        return #name;
  |  |  ------------------
  |  |   67|    854|                                                                                                   \
  |  |   68|    854|    /* Or */                                                                                       \
  |  |   69|  2.24k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.24k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.24k|        return #name;
  |  |  ------------------
  |  |   70|  2.24k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    670|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 670, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    670|        return #name;
  |  |  ------------------
  |  |   71|    670|                                                                                                   \
  |  |   72|    670|    /* XOR */                                                                                      \
  |  |   73|  2.80k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.80k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.80k|        return #name;
  |  |  ------------------
  |  |   74|  2.80k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    106|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 106, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    106|        return #name;
  |  |  ------------------
  |  |   75|    106|                                                                                                   \
  |  |   76|    106|    /* Set conditionals */                                                                         \
  |  |   77|    106|                                                                                                   \
  |  |   78|    106|    /* Less than */                                                                                \
  |  |   79|    263|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    263|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 263, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    263|        return #name;
  |  |  ------------------
  |  |   80|  4.20k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.20k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.20k|        return #name;
  |  |  ------------------
  |  |   81|  4.20k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 101, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    101|        return #name;
  |  |  ------------------
  |  |   82|  1.70k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.70k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.70k|        return #name;
  |  |  ------------------
  |  |   83|  1.70k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    376|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 376, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    376|        return #name;
  |  |  ------------------
  |  |   84|    715|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    715|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 715, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    715|        return #name;
  |  |  ------------------
  |  |   85|    715|                                                                                                   \
  |  |   86|    715|    /* Greater than */                                                                             \
  |  |   87|    715|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |   88|  1.01k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.01k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.01k|        return #name;
  |  |  ------------------
  |  |   89|  1.01k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 236, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    236|        return #name;
  |  |  ------------------
  |  |   90|  6.43k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  6.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.43k, False: 446k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.43k|        return #name;
  |  |  ------------------
  |  |   91|  9.21k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  9.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.21k, False: 444k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.21k|        return #name;
  |  |  ------------------
  |  |   92|  9.21k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  6.81k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.81k, False: 446k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.81k|        return #name;
  |  |  ------------------
  |  |   93|  6.81k|                                                                                                   \
  |  |   94|  6.81k|    /* Less than or equal */                                                                       \
  |  |   95|  6.81k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.79k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.79k|        return #name;
  |  |  ------------------
  |  |   96|  13.7k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  13.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 13.7k, False: 439k]
  |  |  |  |  ------------------
  |  |  |  |  208|  13.7k|        return #name;
  |  |  ------------------
  |  |   97|  13.7k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.20k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.20k|        return #name;
  |  |  ------------------
  |  |   98|  3.55k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.55k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.55k|        return #name;
  |  |  ------------------
  |  |   99|  5.77k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.77k, False: 447k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.77k|        return #name;
  |  |  ------------------
  |  |  100|  5.77k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    687|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 687, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    687|        return #name;
  |  |  ------------------
  |  |  101|    687|                                                                                                   \
  |  |  102|    687|    /* Greater than or equal */                                                                    \
  |  |  103|    687|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    277|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 277, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    277|        return #name;
  |  |  ------------------
  |  |  104|    277|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    115|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 115, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    115|        return #name;
  |  |  ------------------
  |  |  105|  2.38k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.38k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.38k|        return #name;
  |  |  ------------------
  |  |  106|  6.32k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  6.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.32k, False: 447k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.32k|        return #name;
  |  |  ------------------
  |  |  107|  6.32k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    226|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 226, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    226|        return #name;
  |  |  ------------------
  |  |  108|  5.21k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.21k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.21k|        return #name;
  |  |  ------------------
  |  |  109|  5.21k|                                                                                                   \
  |  |  110|  5.21k|    /* Equal */                                                                                    \
  |  |  111|  5.21k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.43k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.43k|        return #name;
  |  |  ------------------
  |  |  112|  1.51k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.51k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.51k|        return #name;
  |  |  ------------------
  |  |  113|  2.54k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.54k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.54k|        return #name;
  |  |  ------------------
  |  |  114|  5.21k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  5.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.21k, False: 448k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.21k|        return #name;
  |  |  ------------------
  |  |  115|  5.21k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.01k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.01k|        return #name;
  |  |  ------------------
  |  |  116|  2.01k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    112|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 112, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    112|        return #name;
  |  |  ------------------
  |  |  117|    112|                                                                                                   \
  |  |  118|    112|    /* Not equal */                                                                                \
  |  |  119|    112|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 81, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     81|        return #name;
  |  |  ------------------
  |  |  120|    208|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 208, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    208|        return #name;
  |  |  ------------------
  |  |  121|  2.73k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.73k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.73k|        return #name;
  |  |  ------------------
  |  |  122|  2.73k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    269|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 269, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    269|        return #name;
  |  |  ------------------
  |  |  123|    445|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    445|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 445, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    445|        return #name;
  |  |  ------------------
  |  |  124|    445|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 69, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     69|        return #name;
  |  |  ------------------
  |  |  125|     69|                                                                                                   \
  |  |  126|     69|    /* Conditional branching */                                                                    \
  |  |  127|    135|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    135|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 135, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    135|        return #name;
  |  |  ------------------
  |  |  128|  5.55k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.55k, False: 447k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.55k|        return #name;
  |  |  ------------------
  |  |  129|  8.18k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  8.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.18k, False: 445k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.18k|        return #name;
  |  |  ------------------
  |  |  130|  16.4k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  16.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 16.4k, False: 436k]
  |  |  |  |  ------------------
  |  |  |  |  208|  16.4k|        return #name;
  |  |  ------------------
  |  |  131|  16.4k|                                                                                                   \
  |  |  132|  16.4k|    /* Unconditional branching */                                                                  \
  |  |  133|  16.4k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     12|        return #name;
  |  |  ------------------
  |  |  134|     70|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 70, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     70|        return #name;
  |  |  ------------------
  |  |  135|    114|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 114, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    114|        return #name;
  |  |  ------------------
  |  |  136|    114|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 66, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|  1.04k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |  140|  3.06k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.06k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.06k|        return #name;
  |  |  ------------------
  |  |  141|  3.06k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 66, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     66|        return #name;
  |  |  ------------------
  |  |  142|    196|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 196, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    196|        return #name;
  |  |  ------------------
  |  |  143|    196|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 66, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     66|        return #name;
  |  |  ------------------
  |  |  144|    125|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    125|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 125, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    125|        return #name;
  |  |  ------------------
  |  |  145|    199|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 199, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    199|        return #name;
  |  |  ------------------
  |  |  146|    199|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 68, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     68|        return #name;
  |  |  ------------------
  |  |  147|  1.26k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.26k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.26k|        return #name;
  |  |  ------------------
  |  |  148|  1.26k|                                                                                                   \
  |  |  149|  1.26k|    /* Storing data */                                                                             \
  |  |  150|  1.26k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 69, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     69|        return #name;
  |  |  ------------------
  |  |  151|  3.75k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.75k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.75k|        return #name;
  |  |  ------------------
  |  |  152|  11.9k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  11.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.9k, False: 441k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.9k|        return #name;
  |  |  ------------------
  |  |  153|  11.9k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.08k, False: 449k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.08k|        return #name;
  |  |  ------------------
  |  |  154|  4.08k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 76, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     76|        return #name;
  |  |  ------------------
  |  |  155|  1.18k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.18k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.18k|        return #name;
  |  |  ------------------
  |  |  156|  1.18k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 71, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     71|        return #name;
  |  |  ------------------
  |  |  157|    116|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    116|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 116, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    116|        return #name;
  |  |  ------------------
  |  |  158|    116|                                                                                                   \
  |  |  159|    116|    /* Moving data */                                                                              \
  |  |  160|  1.62k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.62k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.62k|        return #name;
  |  |  ------------------
  |  |  161|  1.62k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    953|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 953, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    953|        return #name;
  |  |  ------------------
  |  |  162|    953|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    611|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 611, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|    611|        return #name;
  |  |  ------------------
  |  |  163|    611|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    164|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 164, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    164|        return #name;
  |  |  ------------------
  |  |  164|    164|                                                                                                   \
  |  |  165|    164|    /* Converting data */                                                                          \
  |  |  166|  1.31k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.31k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.31k|        return #name;
  |  |  ------------------
  |  |  167|  2.34k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.34k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.34k|        return #name;
  |  |  ------------------
  |  |  168|  2.34k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.37k, False: 451k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.37k|        return #name;
  |  |  ------------------
  |  |  169|  1.37k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    160|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 160, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    160|        return #name;
  |  |  ------------------
  |  |  170|    160|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  171|  2.95k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.95k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.95k|        return #name;
  |  |  ------------------
  |  |  172|  2.95k|                                                                                                   \
  |  |  173|  2.95k|    /* Other */                                                                                    \
  |  |  174|  2.95k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.02k, False: 452k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.02k|        return #name;
  |  |  ------------------
  |  |  175|  1.02k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    118|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 118, False: 453k]
  |  |  |  |  ------------------
  |  |  |  |  208|    118|        return #name;
  |  |  ------------------
  |  |  176|  2.78k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  2.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.78k, False: 450k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.78k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 453k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   453k|        }
  217|   453k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  90.4k|    {
   32|  90.4k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 4.93k, False: 85.5k]
  ------------------
   33|  4.93k|        {
   34|  4.93k|            return true;
   35|  4.93k|        }
   36|       |
   37|  85.5k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 226, False: 85.2k]
  ------------------
   38|    226|        {
   39|    226|            return true;
   40|    226|        }
   41|       |
   42|  85.2k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 3.21k, False: 82.0k]
  ------------------
   43|  3.21k|        {
   44|  3.21k|            return true;
   45|  3.21k|        }
   46|       |
   47|  82.0k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 82.0k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  82.0k|        return false;
   53|  82.0k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  82.0k|    {
   57|  82.0k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 82.0k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  82.0k|        const char first_char = token.at(0);
   63|       |
   64|  82.0k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 18.3k, False: 63.7k]
  ------------------
   65|  18.3k|        {
   66|  18.3k|            return phi::is_alpha(first_char);
   67|  18.3k|        }
   68|       |
   69|  63.7k|        phi::boolean just_under_scores = (first_char == '_');
   70|  63.7k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 17.3k, False: 46.3k]
  |  Branch (70:15): [True: 46.2k, False: 17.5k]
  |  Branch (70:44): [True: 164, False: 17.3k]
  ------------------
   71|  17.3k|        {
   72|  17.3k|            return false;
   73|  17.3k|        }
   74|       |
   75|   211k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 175k, False: 35.1k]
  ------------------
   76|   175k|        {
   77|   175k|            const char c{token.at(index)};
   78|       |
   79|   175k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 83.9k, False: 91.9k]
  ------------------
   80|  83.9k|            {
   81|  83.9k|                just_under_scores = false;
   82|  83.9k|            }
   83|  91.9k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 80.6k, False: 11.2k]
  ------------------
   84|  80.6k|            {
   85|  80.6k|                continue;
   86|  80.6k|            }
   87|  11.2k|            else
   88|  11.2k|            {
   89|  11.2k|                return false;
   90|  11.2k|            }
   91|   175k|        }
   92|       |
   93|  35.1k|        return !just_under_scores;
   94|  46.3k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   926k|    {
  101|   926k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 926k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   926k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 77.6k, False: 848k]
  ------------------
  107|  77.6k|        {
  108|  77.6k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 43.1k, False: 34.4k]
  ------------------
  109|  43.1k|            {
  110|  43.1k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  43.1k|            }
  112|       |
  113|  34.4k|            return {};
  114|  77.6k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   848k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 4.39k, False: 844k]
  ------------------
  118|  4.39k|        {
  119|  4.39k|            return {};
  120|  4.39k|        }
  121|       |
  122|   844k|        std::int32_t number{0};
  123|   844k|        phi::boolean is_negative{false};
  124|   844k|        phi::boolean starts_with_zero{false};
  125|   844k|        phi::boolean parsing_binary{false};
  126|   844k|        phi::boolean parsing_octal{false};
  127|   844k|        phi::boolean parsing_hexadecimal{false};
  128|   844k|        phi::boolean parsed_something{false};
  129|   844k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   924k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 915k, False: 9.73k]
  ------------------
  134|   915k|        {
  135|   915k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   915k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 844k, False: 70.9k]
  ------------------
  139|   844k|            {
  140|   844k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.23k, False: 841k]
  ------------------
  141|  2.23k|                {
  142|  2.23k|                    continue;
  143|  2.23k|                }
  144|       |
  145|   841k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 3.55k, False: 838k]
  ------------------
  146|  3.55k|                {
  147|  3.55k|                    is_negative = true;
  148|  3.55k|                    continue;
  149|  3.55k|                }
  150|       |
  151|   838k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 40.1k, False: 798k]
  ------------------
  152|  40.1k|                {
  153|  40.1k|                    starts_with_zero = true;
  154|  40.1k|                    continue;
  155|  40.1k|                }
  156|       |
  157|   798k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 98, False: 798k]
  ------------------
  158|     98|                {
  159|     98|                    return {};
  160|     98|                }
  161|   798k|            }
  162|       |
  163|       |            // Second character
  164|   869k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 47.2k, False: 821k]
  ------------------
  165|  47.2k|            {
  166|  47.2k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 40.1k, False: 7.11k]
  ------------------
  167|  40.1k|                {
  168|       |                    // Binary
  169|  40.1k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 657, False: 39.5k]
  |  Branch (169:37): [True: 1.86k, False: 37.6k]
  ------------------
  170|  2.52k|                    {
  171|  2.52k|                        parsing_binary = true;
  172|  2.52k|                        continue;
  173|  2.52k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  37.6k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 4.05k, False: 33.5k]
  |  Branch (176:37): [True: 1.94k, False: 31.6k]
  ------------------
  177|  5.99k|                    {
  178|  5.99k|                        parsing_hexadecimal = true;
  179|  5.99k|                        continue;
  180|  5.99k|                    }
  181|       |
  182|       |                    // Octal
  183|  31.6k|                    parsing_octal = true;
  184|  31.6k|                }
  185|  47.2k|            }
  186|       |
  187|       |            // Handle seperators
  188|   860k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 187, False: 860k]
  ------------------
  189|    187|            {
  190|    187|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 68, False: 119]
  ------------------
  191|     68|                {
  192|     68|                    return {};
  193|     68|                }
  194|       |
  195|    119|                parsed_separator = true;
  196|    119|                continue;
  197|    187|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   860k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 3.59k, False: 856k]
  |  Branch (200:32): [True: 0, False: 3.59k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   860k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 856k, False: 3.59k]
  |  Branch (205:17): [True: 0, False: 860k]
  |  Branch (205:33): [True: 0, False: 856k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   860k|            parsed_separator = false;
  212|   860k|            parsed_something = true;
  213|       |
  214|   860k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.05k, False: 858k]
  ------------------
  215|  2.05k|            {
  216|  2.05k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.88k, False: 167]
  ------------------
  217|  1.88k|                {
  218|  1.88k|                    return {};
  219|  1.88k|                }
  220|       |
  221|    167|                number <<= 1;
  222|    167|                number |= (c - '0');
  223|    167|            }
  224|   858k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 46.1k, False: 812k]
  ------------------
  225|  46.1k|            {
  226|  46.1k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 26.6k, False: 19.4k]
  ------------------
  227|  26.6k|                {
  228|  26.6k|                    return {};
  229|  26.6k|                }
  230|       |
  231|  19.4k|                number <<= 3;
  232|  19.4k|                number |= (c - '0');
  233|  19.4k|            }
  234|   812k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 6.13k, False: 806k]
  ------------------
  235|  6.13k|            {
  236|  6.13k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 3.04k, False: 3.09k]
  ------------------
  237|  3.04k|                {
  238|  3.04k|                    return {};
  239|  3.04k|                }
  240|       |
  241|  3.09k|                number <<= 4;
  242|  3.09k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.09k|            }
  244|   806k|            else
  245|   806k|            {
  246|   806k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 801k, False: 4.82k]
  ------------------
  247|   801k|                {
  248|   801k|                    return {};
  249|   801k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  4.82k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 3.54k, False: 1.28k]
  |  Branch (252:36): [True: 1.37k, False: 2.16k]
  ------------------
  253|  1.37k|                {
  254|  1.37k|                    return {};
  255|  1.37k|                }
  256|       |
  257|  3.45k|                number *= 10;
  258|  3.45k|                number += (c - '0');
  259|  3.45k|            }
  260|   860k|        }
  261|       |
  262|  9.73k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 9.10k, False: 628]
  ------------------
  263|  9.10k|        {
  264|       |            // Check for over/underflow
  265|  9.10k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 811, False: 8.29k]
  |  Branch (265:32): [True: 0, False: 811]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  9.10k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 8.29k, False: 811]
  |  Branch (270:17): [True: 0, False: 9.10k]
  |  Branch (270:33): [True: 0, False: 8.29k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  9.10k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 811, False: 8.29k]
  ------------------
  277|    811|            {
  278|    811|                return static_cast<std::int16_t>(-number);
  279|    811|            }
  280|       |
  281|  8.29k|            return static_cast<std::int16_t>(number);
  282|  9.10k|        }
  283|       |
  284|    628|        return {};
  285|  9.73k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   108k|    {
   96|   108k|        switch (value)
   97|   108k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  26.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  26.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 26.4k, False: 81.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  26.4k|        return #name;
  |  |  ------------------
  |  |   14|  42.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  42.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 42.3k, False: 66.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  42.3k|        return #name;
  |  |  ------------------
  |  |   15|  42.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    147|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 147, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    147|        return #name;
  |  |  ------------------
  |  |   16|  2.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.41k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.41k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.41k|        return #name;
  |  |  ------------------
  |  |   17|  2.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|     73|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 73, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     73|        return #name;
  |  |  ------------------
  |  |   18|    130|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    130|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 130, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    130|        return #name;
  |  |  ------------------
  |  |   19|    764|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    764|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 764, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    764|        return #name;
  |  |  ------------------
  |  |   20|    764|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     88|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 88, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     88|        return #name;
  |  |  ------------------
  |  |   21|  3.19k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.19k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.19k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.19k|        return #name;
  |  |  ------------------
  |  |   22|  3.19k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    860|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 860, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    860|        return #name;
  |  |  ------------------
  |  |   23|    860|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    153|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 153, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    153|        return #name;
  |  |  ------------------
  |  |   24|    636|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    636|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 636, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    636|        return #name;
  |  |  ------------------
  |  |   25|    636|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     49|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 49, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     49|        return #name;
  |  |  ------------------
  |  |   26|     49|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     42|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 42, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     42|        return #name;
  |  |  ------------------
  |  |   27|    155|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    155|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 155, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    155|        return #name;
  |  |  ------------------
  |  |   28|    381|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    381|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 381, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    381|        return #name;
  |  |  ------------------
  |  |   29|    799|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    799|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 799, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    799|        return #name;
  |  |  ------------------
  |  |   30|  5.54k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.54k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.54k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.54k|        return #name;
  |  |  ------------------
  |  |   31|  5.54k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     51|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 51, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     51|        return #name;
  |  |  ------------------
  |  |   32|    860|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    860|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 860, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    860|        return #name;
  |  |  ------------------
  |  |   33|    860|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    171|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 171, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    171|        return #name;
  |  |  ------------------
  |  |   34|    438|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    438|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 438, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    438|        return #name;
  |  |  ------------------
  |  |   35|  1.60k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.60k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.60k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.60k|        return #name;
  |  |  ------------------
  |  |   36|  1.60k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.58k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.58k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.58k|        return #name;
  |  |  ------------------
  |  |   37|  2.81k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.81k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.81k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.81k|        return #name;
  |  |  ------------------
  |  |   38|  2.81k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    701|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 701, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    701|        return #name;
  |  |  ------------------
  |  |   39|    701|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|      6|        return #name;
  |  |  ------------------
  |  |   40|  3.14k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.14k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.14k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.14k|        return #name;
  |  |  ------------------
  |  |   41|  3.14k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.37k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.37k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.37k|        return #name;
  |  |  ------------------
  |  |   42|  1.37k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    105|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 105, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    105|        return #name;
  |  |  ------------------
  |  |   43|    515|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    515|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 515, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|    515|        return #name;
  |  |  ------------------
  |  |   44|  10.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  10.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10.7k, False: 97.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  10.7k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 108k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   108k|        }
  109|   108k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  26.7k|    {
  131|  26.7k|        switch (value)
  132|  26.7k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  4.28k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.28k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.28k, False: 22.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.28k|        return #name;
  |  |  ------------------
  |  |   48|  4.28k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.67k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.67k, False: 24.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.67k|        return #name;
  |  |  ------------------
  |  |   49|  4.05k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.05k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.05k, False: 22.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.05k|        return #name;
  |  |  ------------------
  |  |   50|  4.05k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   52|     51|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     51|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 51, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     51|        return #name;
  |  |  ------------------
  |  |   53|     51|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   54|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   55|    366|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    366|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 366, False: 26.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    366|        return #name;
  |  |  ------------------
  |  |   56|    366|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 26, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     26|        return #name;
  |  |  ------------------
  |  |   57|  5.00k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  5.00k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5.00k, False: 21.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  5.00k|        return #name;
  |  |  ------------------
  |  |   58|  5.00k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   59|    282|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|    282|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 282, False: 26.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    282|        return #name;
  |  |  ------------------
  |  |   60|    282|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   61|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|     42|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 42, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     42|        return #name;
  |  |  ------------------
  |  |   62|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   63|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   64|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   67|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   68|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|    491|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|    491|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 491, False: 26.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    491|        return #name;
  |  |  ------------------
  |  |   71|    491|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   72|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     59|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     59|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 59, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     59|        return #name;
  |  |  ------------------
  |  |   75|     59|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|    191|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|    191|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 191, False: 26.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    191|        return #name;
  |  |  ------------------
  |  |   77|  8.32k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  8.32k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8.32k, False: 18.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  8.32k|        return #name;
  |  |  ------------------
  |  |   78|  8.32k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    852|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 852, False: 25.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    852|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 26.7k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  26.7k|        }
  144|  26.7k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  37.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  37.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 664k, False: 0]
  ------------------
   64|   664k|            {
   65|   664k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 37.0k, False: 627k]
  ------------------
   66|  37.0k|                {
   67|  37.0k|                    return &token;
   68|  37.0k|                }
   69|   664k|            }
   70|       |
   71|      0|            return nullptr;
   72|  37.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   988k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   988k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   988k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.21M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.21M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.21M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   160k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   160k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   160k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   153k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  35.2k|    {
   24|  35.2k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  35.2k|        switch (argument_number.unsafe())
   27|  35.2k|        {
   28|  29.1k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 29.1k, False: 6.16k]
  ------------------
   29|  29.1k|                m_Arg1 = argument;
   30|  29.1k|                break;
   31|  5.57k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 5.57k, False: 29.7k]
  ------------------
   32|  5.57k|                m_Arg2 = argument;
   33|  5.57k|                break;
   34|    588|            case 2u:
  ------------------
  |  Branch (34:13): [True: 588, False: 34.7k]
  ------------------
   35|    588|                m_Arg3 = argument;
   36|    588|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 35.2k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  35.2k|#endif
   41|  35.2k|        }
   42|  35.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   496k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  16.7k|    {
  174|  16.7k|        InstructionArgument arg;
  175|  16.7k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  16.7k|        arg.register_int.register_id = id;
  177|  16.7k|        return arg;
  178|  16.7k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    209|    {
  183|    209|        InstructionArgument arg;
  184|    209|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    209|        arg.register_float.register_id = id;
  186|    209|        return arg;
  187|    209|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  7.50k|    {
  192|  7.50k|        InstructionArgument arg;
  193|  7.50k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  7.50k|        arg.immediate_value.signed_value = value;
  195|  7.50k|        return arg;
  196|  7.50k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  10.8k|    {
  211|  10.8k|        InstructionArgument arg;
  212|  10.8k|        arg.m_Type           = ArgumentType::Label;
  213|  10.8k|        arg.label.label_name = label_name;
  214|  10.8k|        return arg;
  215|  10.8k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   153k|    {
  453|   153k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   153k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   809k|    {
   24|   809k|        switch (token.length())
   25|   809k|        {
   26|       |            // 1 character OpCodes
   27|  52.9k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 52.9k, False: 756k]
  ------------------
   28|  52.9k|                char c1 = token[0];
   29|  52.9k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 10.2k, False: 42.6k]
  ------------------
   30|  10.2k|                {
   31|  10.2k|                    return OpCode::J;
   32|  10.2k|                }
   33|  42.6k|                break;
   34|  52.9k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   115k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 115k, False: 694k]
  ------------------
   38|   115k|                char c1 = token[0];
   39|   115k|                char c2 = token[1];
   40|       |
   41|   115k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 44.1k, False: 70.8k]
  ------------------
   42|   115k|                {
   43|    138|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 138, False: 114k]
  ------------------
   44|  1.46k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.33k, False: 113k]
  ------------------
   45|  1.46k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 171, False: 1.29k]
  ------------------
   46|    171|                        {
   47|    171|                            return OpCode::JR;
   48|    171|                        }
   49|  1.29k|                        break;
   50|       |
   51|  5.13k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 5.13k, False: 109k]
  ------------------
   52|  15.7k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 10.5k, False: 104k]
  ------------------
   53|  15.7k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 292, False: 15.4k]
  ------------------
   54|  15.7k|                        {
   55|  3.06k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 3.06k, False: 12.6k]
  ------------------
   56|  6.67k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 3.61k, False: 12.0k]
  ------------------
   57|  6.67k|                                return OpCode::LB;
   58|  1.26k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.26k, False: 14.4k]
  ------------------
   59|  2.19k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 930, False: 14.7k]
  ------------------
   60|  2.19k|                                return OpCode::LD;
   61|     68|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 68, False: 15.6k]
  ------------------
   62|    166|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 98, False: 15.6k]
  ------------------
   63|    166|                                return OpCode::LF;
   64|    196|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 196, False: 15.5k]
  ------------------
   65|    471|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 275, False: 15.4k]
  ------------------
   66|    471|                                return OpCode::LH;
   67|    125|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 125, False: 15.5k]
  ------------------
   68|  5.91k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 5.78k, False: 9.91k]
  ------------------
   69|  5.91k|                                return OpCode::LW;
   70|  15.7k|                        }
   71|    292|                        break;
   72|  14.3k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 14.3k, False: 100k]
  ------------------
   73|  14.4k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 170, False: 114k]
  ------------------
   74|  14.4k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 5.71k, False: 8.75k]
  ------------------
   75|  5.71k|                        {
   76|  5.71k|                            return OpCode::OR;
   77|  5.71k|                        }
   78|  8.75k|                        break;
   79|  20.1k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 20.1k, False: 94.8k]
  ------------------
   80|  39.2k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 19.0k, False: 95.9k]
  ------------------
   81|  39.2k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 22.4k, False: 16.7k]
  ------------------
   82|  39.2k|                        {
   83|     69|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 69, False: 39.1k]
  ------------------
   84|    135|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 66, False: 39.1k]
  ------------------
   85|    135|                                return OpCode::SB;
   86|    116|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 116, False: 39.1k]
  ------------------
   87|  1.50k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 1.38k, False: 37.8k]
  ------------------
   88|  1.50k|                                return OpCode::SD;
   89|     71|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 71, False: 39.1k]
  ------------------
   90|  2.38k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 2.31k, False: 36.9k]
  ------------------
   91|  2.38k|                                return OpCode::SF;
   92|  11.6k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 11.6k, False: 27.5k]
  ------------------
   93|  12.4k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 794, False: 38.4k]
  ------------------
   94|  12.4k|                                return OpCode::SH;
   95|    210|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 210, False: 39.0k]
  ------------------
   96|    286|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 76, False: 39.1k]
  ------------------
   97|    286|                                return OpCode::SW;
   98|  39.2k|                        }
   99|  22.4k|                        break;
  100|   115k|                }
  101|  76.9k|                break;
  102|   115k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   329k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 329k, False: 480k]
  ------------------
  106|   329k|                char c1 = token[0];
  107|   329k|                char c2 = token[1];
  108|   329k|                char c3 = token[2];
  109|       |
  110|   329k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 27.7k, False: 302k]
  ------------------
  111|   329k|                {
  112|   161k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 161k, False: 168k]
  ------------------
  113|   167k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 6.01k, False: 323k]
  ------------------
  114|   167k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 156k, False: 10.8k]
  |  Branch (114:29): [True: 156k, False: 11.0k]
  |  Branch (114:45): [True: 156k, False: 182]
  ------------------
  115|   156k|                        {
  116|   156k|                            return OpCode::ADD;
  117|   156k|                        }
  118|  11.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 10.5k, False: 528]
  |  Branch (118:34): [True: 9.59k, False: 1.43k]
  |  Branch (118:50): [True: 9.59k, False: 911]
  ------------------
  119|  9.59k|                        {
  120|  9.59k|                            return OpCode::AND;
  121|  9.59k|                        }
  122|  1.43k|                        break;
  123|       |
  124|  1.91k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.91k, False: 327k]
  ------------------
  125|  2.07k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 163, False: 329k]
  ------------------
  126|  2.07k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 1.84k, False: 227]
  |  Branch (126:29): [True: 1.78k, False: 293]
  |  Branch (126:45): [True: 1.78k, False: 66]
  ------------------
  127|  1.78k|                        {
  128|  1.78k|                            return OpCode::DIV;
  129|  1.78k|                        }
  130|    293|                        break;
  131|       |
  132|  3.99k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 3.99k, False: 325k]
  ------------------
  133|  4.35k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 361, False: 329k]
  ------------------
  134|  4.35k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 4.04k, False: 307]
  ------------------
  135|  4.04k|                        {
  136|  4.04k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 519, False: 3.52k]
  ------------------
  137|    519|                            {
  138|    519|                                return OpCode::EQD;
  139|    519|                            }
  140|  3.52k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 3.37k, False: 157]
  ------------------
  141|  3.37k|                            {
  142|  3.37k|                                return OpCode::EQF;
  143|  3.37k|                            }
  144|  4.04k|                        }
  145|    464|                        break;
  146|       |
  147|  25.2k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 25.2k, False: 304k]
  ------------------
  148|  28.5k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 3.33k, False: 326k]
  ------------------
  149|  28.5k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 8.71k, False: 19.8k]
  ------------------
  150|  8.71k|                        {
  151|  8.71k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 5.47k, False: 3.23k]
  ------------------
  152|  5.47k|                            {
  153|  5.47k|                                return OpCode::GED;
  154|  5.47k|                            }
  155|  3.23k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 3.17k, False: 66]
  ------------------
  156|  3.17k|                            {
  157|  3.17k|                                return OpCode::GEF;
  158|  3.17k|                            }
  159|  8.71k|                        }
  160|  19.8k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 19.7k, False: 82]
  ------------------
  161|  19.7k|                        {
  162|  19.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 9.01k, False: 10.7k]
  ------------------
  163|  9.01k|                            {
  164|  9.01k|                                return OpCode::GTD;
  165|  9.01k|                            }
  166|  10.7k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 9.26k, False: 1.46k]
  ------------------
  167|  9.26k|                            {
  168|  9.26k|                                return OpCode::GTF;
  169|  9.26k|                            }
  170|  10.7k|                        }
  171|  1.61k|                        break;
  172|       |
  173|  1.61k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 713, False: 329k]
  ------------------
  174|  1.79k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.08k, False: 328k]
  ------------------
  175|  1.79k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.60k, False: 191]
  |  Branch (175:29): [True: 544, False: 1.25k]
  |  Branch (175:45): [True: 544, False: 1.05k]
  ------------------
  176|    544|                        {
  177|    544|                            return OpCode::JAL;
  178|    544|                        }
  179|  1.25k|                        break;
  180|       |
  181|  9.18k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 9.18k, False: 320k]
  ------------------
  182|  18.7k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 9.51k, False: 320k]
  ------------------
  183|  18.7k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 306, False: 18.3k]
  ------------------
  184|  18.7k|                        {
  185|     66|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 66, False: 18.6k]
  ------------------
  186|  4.91k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 4.85k, False: 13.8k]
  ------------------
  187|  4.91k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 132, False: 4.78k]
  ------------------
  188|    132|                                {
  189|    132|                                    return OpCode::LBU;
  190|    132|                                }
  191|  4.78k|                                break;
  192|       |
  193|  6.42k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 6.42k, False: 12.2k]
  ------------------
  194|  6.72k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 301, False: 18.4k]
  ------------------
  195|  6.72k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 752, False: 5.97k]
  ------------------
  196|    752|                                {
  197|    752|                                    return OpCode::LED;
  198|    752|                                }
  199|  5.97k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 5.80k, False: 167]
  ------------------
  200|  5.80k|                                {
  201|  5.80k|                                    return OpCode::LEF;
  202|  5.80k|                                }
  203|    167|                                break;
  204|       |
  205|  1.13k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.13k, False: 17.5k]
  ------------------
  206|  2.16k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.02k, False: 17.6k]
  ------------------
  207|  2.16k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.11k, False: 1.04k]
  ------------------
  208|  1.11k|                                {
  209|  1.11k|                                    return OpCode::LHI;
  210|  1.11k|                                }
  211|  1.04k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.01k, False: 34]
  ------------------
  212|  1.01k|                                {
  213|  1.01k|                                    return OpCode::LHU;
  214|  1.01k|                                }
  215|     34|                                break;
  216|       |
  217|  1.10k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.10k, False: 17.5k]
  ------------------
  218|  1.64k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 536, False: 18.1k]
  ------------------
  219|  1.64k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 877, False: 764]
  ------------------
  220|    877|                                {
  221|    877|                                    return OpCode::LTD;
  222|    877|                                }
  223|    764|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 474, False: 290]
  ------------------
  224|    474|                                {
  225|    474|                                    return OpCode::LTF;
  226|    474|                                }
  227|    290|                                break;
  228|       |
  229|    290|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 211, False: 18.4k]
  ------------------
  230|  2.95k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 2.74k, False: 15.9k]
  ------------------
  231|  2.95k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 1.00k, False: 1.95k]
  ------------------
  232|  1.00k|                                {
  233|  1.00k|                                    return OpCode::LWU;
  234|  1.00k|                                }
  235|  1.95k|                                break;
  236|  18.7k|                        }
  237|  7.53k|                        break;
  238|       |
  239|  7.53k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 6.05k, False: 323k]
  ------------------
  240|  14.6k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 8.60k, False: 321k]
  ------------------
  241|  14.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 3.40k, False: 11.2k]
  ------------------
  242|  3.40k|                        {
  243|  3.40k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 199, False: 3.20k]
  ------------------
  244|    199|                            {
  245|    199|                                return OpCode::NED;
  246|    199|                            }
  247|  3.20k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 527, False: 2.67k]
  ------------------
  248|    527|                            {
  249|    527|                                return OpCode::NEF;
  250|    527|                            }
  251|  3.40k|                        }
  252|  11.2k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 6.00k, False: 5.25k]
  |  Branch (252:34): [True: 2.84k, False: 8.40k]
  |  Branch (252:50): [True: 2.84k, False: 3.15k]
  ------------------
  253|  2.84k|                        {
  254|  2.84k|                            return OpCode::NOP;
  255|  2.84k|                        }
  256|       |
  257|  11.0k|                        break;
  258|       |
  259|  11.0k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 851, False: 328k]
  ------------------
  260|  1.02k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 175, False: 329k]
  ------------------
  261|  1.02k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 846, False: 180]
  |  Branch (261:29): [True: 738, False: 288]
  |  Branch (261:45): [True: 738, False: 108]
  ------------------
  262|    738|                        {
  263|    738|                            return OpCode::ORI;
  264|    738|                        }
  265|    288|                        break;
  266|       |
  267|  48.2k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 48.2k, False: 281k]
  ------------------
  268|  54.7k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 6.48k, False: 323k]
  ------------------
  269|  54.7k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 365, False: 54.4k]
  ------------------
  270|  54.7k|                        {
  271|  3.75k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 3.75k, False: 51.0k]
  ------------------
  272|  4.11k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 363, False: 54.4k]
  ------------------
  273|  4.11k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 4.00k, False: 105]
  ------------------
  274|  4.00k|                                {
  275|  4.00k|                                    return OpCode::SBU;
  276|  4.00k|                                }
  277|    105|                                break;
  278|       |
  279|  1.43k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.43k, False: 53.3k]
  ------------------
  280|  6.93k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 5.50k, False: 49.2k]
  ------------------
  281|  6.93k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 5.03k, False: 1.89k]
  ------------------
  282|  5.03k|                                {
  283|  5.03k|                                    return OpCode::SEQ;
  284|  5.03k|                                }
  285|  1.89k|                                break;
  286|       |
  287|  1.89k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 339, False: 54.4k]
  ------------------
  288|  2.58k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.24k, False: 52.5k]
  ------------------
  289|  2.58k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 1.94k, False: 640]
  ------------------
  290|  1.94k|                                {
  291|  1.94k|                                    return OpCode::SGE;
  292|  1.94k|                                }
  293|    640|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 197, False: 443]
  ------------------
  294|    197|                                {
  295|    197|                                    return OpCode::SGT;
  296|    197|                                }
  297|    443|                                break;
  298|       |
  299|  4.08k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 4.08k, False: 50.6k]
  ------------------
  300|  4.50k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 418, False: 54.3k]
  ------------------
  301|  4.50k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.24k, False: 259]
  ------------------
  302|  4.24k|                                {
  303|  4.24k|                                    return OpCode::SHU;
  304|  4.24k|                                }
  305|    259|                                break;
  306|       |
  307|  12.9k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 12.9k, False: 41.8k]
  ------------------
  308|  14.5k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.63k, False: 53.1k]
  ------------------
  309|  14.5k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 75, False: 14.4k]
  ------------------
  310|  14.5k|                                {
  311|  4.48k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 4.48k, False: 10.0k]
  ------------------
  312|  4.55k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 70, False: 14.4k]
  ------------------
  313|  4.55k|                                        return OpCode::SLA;
  314|       |
  315|  2.78k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.78k, False: 11.7k]
  ------------------
  316|  2.85k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 72, False: 14.4k]
  ------------------
  317|  2.85k|                                        return OpCode::SLE;
  318|       |
  319|  5.32k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 5.32k, False: 9.21k]
  ------------------
  320|  6.22k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 899, False: 13.6k]
  ------------------
  321|  6.22k|                                        return OpCode::SLL;
  322|       |
  323|    262|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 262, False: 14.2k]
  ------------------
  324|    832|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 570, False: 13.9k]
  ------------------
  325|    832|                                        return OpCode::SLT;
  326|  14.5k|                                }
  327|     75|                                break;
  328|       |
  329|     83|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 83, False: 54.6k]
  ------------------
  330|    654|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 571, False: 54.2k]
  ------------------
  331|    654|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 520, False: 134]
  ------------------
  332|    520|                                {
  333|    520|                                    return OpCode::SNE;
  334|    520|                                }
  335|    134|                                break;
  336|       |
  337|  4.45k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 4.45k, False: 50.3k]
  ------------------
  338|  10.1k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 5.68k, False: 49.0k]
  ------------------
  339|  10.1k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 2.53k, False: 7.60k]
  ------------------
  340|  2.53k|                                {
  341|  2.53k|                                    return OpCode::SRA;
  342|  2.53k|                                }
  343|  7.60k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 2.65k, False: 4.95k]
  ------------------
  344|  2.65k|                                {
  345|  2.65k|                                    return OpCode::SRL;
  346|  2.65k|                                }
  347|  4.95k|                                break;
  348|       |
  349|  4.95k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 3.97k, False: 50.8k]
  ------------------
  350|  4.99k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.02k, False: 53.7k]
  ------------------
  351|  4.99k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 4.19k, False: 800]
  ------------------
  352|  4.19k|                                {
  353|  4.19k|                                    return OpCode::SUB;
  354|  4.19k|                                }
  355|    800|                                break;
  356|       |
  357|  4.42k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 4.42k, False: 50.3k]
  ------------------
  358|  5.93k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.50k, False: 53.2k]
  ------------------
  359|  5.93k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 4.41k, False: 1.51k]
  ------------------
  360|  4.41k|                                {
  361|  4.41k|                                    return OpCode::SWU;
  362|  4.41k|                                }
  363|  1.51k|                                break;
  364|  54.7k|                        }
  365|       |
  366|  11.4k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 913, False: 328k]
  ------------------
  367|  19.4k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 8.02k, False: 321k]
  ------------------
  368|  19.4k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 1.11k, False: 18.3k]
  |  Branch (368:29): [True: 1.01k, False: 18.4k]
  |  Branch (368:45): [True: 1.01k, False: 101]
  ------------------
  369|  1.01k|                        {
  370|  1.01k|                            return OpCode::XOR;
  371|  1.01k|                        }
  372|  18.4k|                        break;
  373|   329k|                }
  374|  70.1k|                break;
  375|   329k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   186k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 186k, False: 623k]
  ------------------
  379|   186k|                char c1 = token[0];
  380|   186k|                char c2 = token[1];
  381|   186k|                char c3 = token[2];
  382|   186k|                char c4 = token[3];
  383|       |
  384|   186k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 16.0k, False: 170k]
  ------------------
  385|   186k|                {
  386|  23.5k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 23.5k, False: 163k]
  ------------------
  387|  26.9k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 3.37k, False: 183k]
  ------------------
  388|  26.9k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 124, False: 26.8k]
  ------------------
  389|  26.9k|                        {
  390|  25.3k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 25.3k, False: 1.56k]
  ------------------
  391|  25.5k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 176, False: 26.7k]
  ------------------
  392|  25.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 22.3k, False: 3.23k]
  ------------------
  393|  22.3k|                                {
  394|  22.3k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 66, False: 22.2k]
  ------------------
  395|  22.3k|                                    {
  396|  4.21k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.21k, False: 18.1k]
  ------------------
  397|  4.29k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 82, False: 22.2k]
  ------------------
  398|  4.29k|                                            return OpCode::ADDD;
  399|       |
  400|  4.00k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 4.00k, False: 18.3k]
  ------------------
  401|  4.16k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 162, False: 22.1k]
  ------------------
  402|  4.16k|                                            return OpCode::ADDF;
  403|       |
  404|  10.6k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 10.6k, False: 11.6k]
  ------------------
  405|  10.7k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 22.2k]
  ------------------
  406|  10.7k|                                            return OpCode::ADDI;
  407|       |
  408|  2.88k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 2.88k, False: 19.4k]
  ------------------
  409|  3.08k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 194, False: 22.1k]
  ------------------
  410|  3.08k|                                            return OpCode::ADDU;
  411|  22.3k|                                    }
  412|  22.3k|                                }
  413|  3.29k|                                break;
  414|       |
  415|  3.29k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 906, False: 26.0k]
  ------------------
  416|  1.26k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 354, False: 26.5k]
  ------------------
  417|  1.26k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.16k, False: 99]
  |  Branch (417:37): [True: 920, False: 340]
  |  Branch (417:53): [True: 920, False: 241]
  ------------------
  418|    920|                                {
  419|    920|                                    return OpCode::ANDI;
  420|    920|                                }
  421|       |
  422|    340|                                break;
  423|  26.9k|                        }
  424|  3.76k|                        break;
  425|       |
  426|  27.8k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 27.8k, False: 158k]
  ------------------
  427|  34.1k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 6.37k, False: 180k]
  ------------------
  428|  34.1k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 728, False: 33.4k]
  ------------------
  429|  34.1k|                        {
  430|    316|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 316, False: 33.8k]
  ------------------
  431|  5.44k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 5.13k, False: 29.0k]
  ------------------
  432|  5.44k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 3.22k, False: 2.22k]
  |  Branch (432:37): [True: 3.11k, False: 2.32k]
  |  Branch (432:53): [True: 3.11k, False: 103]
  ------------------
  433|  3.11k|                                {
  434|  3.11k|                                    return OpCode::BEQZ;
  435|  3.11k|                                }
  436|  2.32k|                                break;
  437|       |
  438|  21.8k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 21.8k, False: 12.3k]
  ------------------
  439|  22.1k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 360, False: 33.8k]
  ------------------
  440|  22.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 22.0k, False: 98]
  ------------------
  441|  22.0k|                                {
  442|  22.0k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 13.9k, False: 8.09k]
  ------------------
  443|  13.9k|                                    {
  444|  13.9k|                                        return OpCode::BFPF;
  445|  13.9k|                                    }
  446|  8.09k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 8.03k, False: 66]
  ------------------
  447|  8.03k|                                    {
  448|  8.03k|                                        return OpCode::BFPT;
  449|  8.03k|                                    }
  450|  22.0k|                                }
  451|    164|                                break;
  452|       |
  453|  5.59k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 5.59k, False: 28.6k]
  ------------------
  454|  5.84k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 246, False: 33.9k]
  ------------------
  455|  5.84k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 5.74k, False: 98]
  |  Branch (455:37): [True: 5.68k, False: 164]
  |  Branch (455:53): [True: 5.68k, False: 66]
  ------------------
  456|  5.68k|                                {
  457|  5.68k|                                    return OpCode::BNEZ;
  458|  5.68k|                                }
  459|  34.1k|                        }
  460|  3.38k|                        break;
  461|       |
  462|  10.6k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 10.6k, False: 176k]
  ------------------
  463|  10.7k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 115, False: 186k]
  ------------------
  464|  10.7k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 10.6k, False: 118]
  |  Branch (464:29): [True: 10.6k, False: 193]
  |  Branch (464:45): [True: 10.6k, False: 75]
  ------------------
  465|  10.6k|                        {
  466|  10.6k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 288, False: 10.3k]
  ------------------
  467|  10.6k|                            {
  468|  4.52k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 4.52k, False: 6.07k]
  ------------------
  469|  4.59k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 10.5k]
  ------------------
  470|  4.59k|                                    return OpCode::DIVD;
  471|       |
  472|    185|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 185, False: 10.4k]
  ------------------
  473|    507|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 322, False: 10.2k]
  ------------------
  474|    507|                                    return OpCode::DIVF;
  475|       |
  476|    235|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 235, False: 10.3k]
  ------------------
  477|    301|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 10.5k]
  ------------------
  478|    301|                                    return OpCode::DIVI;
  479|       |
  480|  4.62k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 4.62k, False: 5.97k]
  ------------------
  481|  4.91k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 288, False: 10.3k]
  ------------------
  482|  4.91k|                                    return OpCode::DIVU;
  483|  10.6k|                            }
  484|  10.6k|                        }
  485|    481|                        break;
  486|       |
  487|    481|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 154, False: 186k]
  ------------------
  488|  2.32k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 2.16k, False: 184k]
  ------------------
  489|  2.32k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.12k, False: 191]
  |  Branch (489:29): [True: 184, False: 2.13k]
  |  Branch (489:45): [True: 2.06k, False: 66]
  |  Branch (489:61): [True: 184, False: 1.87k]
  ------------------
  490|    184|                        {
  491|    184|                            return OpCode::HALT;
  492|    184|                        }
  493|  2.13k|                        break;
  494|       |
  495|  2.13k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 239, False: 186k]
  ------------------
  496|  4.70k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 4.46k, False: 182k]
  ------------------
  497|  4.70k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 3.93k, False: 774]
  |  Branch (497:29): [True: 132, False: 4.57k]
  |  Branch (497:45): [True: 218, False: 3.71k]
  |  Branch (497:61): [True: 132, False: 86]
  ------------------
  498|    132|                        {
  499|    132|                            return OpCode::JALR;
  500|    132|                        }
  501|  4.57k|                        break;
  502|       |
  503|  5.10k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 5.10k, False: 181k]
  ------------------
  504|  9.53k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 4.42k, False: 182k]
  ------------------
  505|  9.53k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.94k, False: 6.58k]
  |  Branch (505:29): [True: 2.88k, False: 6.65k]
  |  Branch (505:45): [True: 2.88k, False: 66]
  ------------------
  506|  2.88k|                        {
  507|  2.88k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 1.68k, False: 1.19k]
  ------------------
  508|  1.68k|                            {
  509|  1.68k|                                return OpCode::MOVD;
  510|  1.68k|                            }
  511|  1.19k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.01k, False: 178]
  ------------------
  512|  1.01k|                            {
  513|  1.01k|                                return OpCode::MOVF;
  514|  1.01k|                            }
  515|  2.88k|                        }
  516|  6.65k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 6.53k, False: 116]
  |  Branch (516:34): [True: 951, False: 5.70k]
  |  Branch (516:50): [True: 5.84k, False: 695]
  |  Branch (516:66): [True: 951, False: 4.89k]
  ------------------
  517|    951|                        {
  518|    951|                            return OpCode::MULT;
  519|    951|                        }
  520|  5.87k|                        break;
  521|       |
  522|  67.5k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 67.5k, False: 119k]
  ------------------
  523|  77.8k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 10.2k, False: 176k]
  ------------------
  524|  77.8k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 214, False: 77.6k]
  ------------------
  525|  77.8k|                        {
  526|  3.66k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 3.66k, False: 74.1k]
  ------------------
  527|  9.43k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 5.76k, False: 72.0k]
  ------------------
  528|  9.43k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 7.39k, False: 2.03k]
  ------------------
  529|  7.39k|                                {
  530|  7.39k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 4.99k, False: 2.40k]
  ------------------
  531|  4.99k|                                    {
  532|  4.99k|                                        return OpCode::SEQI;
  533|  4.99k|                                    }
  534|  2.40k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 2.31k, False: 93]
  ------------------
  535|  2.31k|                                    {
  536|  2.31k|                                        return OpCode::SEQU;
  537|  2.31k|                                    }
  538|  7.39k|                                }
  539|  2.12k|                                break;
  540|       |
  541|  3.74k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 3.74k, False: 74.1k]
  ------------------
  542|  6.89k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 3.14k, False: 74.7k]
  ------------------
  543|  6.89k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 2.91k, False: 3.97k]
  ------------------
  544|  2.91k|                                {
  545|  2.91k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 181, False: 2.73k]
  ------------------
  546|    181|                                    {
  547|    181|                                        return OpCode::SGEI;
  548|    181|                                    }
  549|  2.73k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 2.44k, False: 290]
  ------------------
  550|  2.44k|                                    {
  551|  2.44k|                                        return OpCode::SGEU;
  552|  2.44k|                                    }
  553|  2.91k|                                }
  554|  3.97k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 3.66k, False: 309]
  ------------------
  555|  3.66k|                                {
  556|  3.66k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.39k, False: 2.26k]
  ------------------
  557|  1.39k|                                    {
  558|  1.39k|                                        return OpCode::SGTI;
  559|  1.39k|                                    }
  560|  2.26k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 343, False: 1.92k]
  ------------------
  561|    343|                                    {
  562|    343|                                        return OpCode::SGTU;
  563|    343|                                    }
  564|  3.66k|                                }
  565|  2.52k|                                break;
  566|       |
  567|  26.2k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 26.2k, False: 51.6k]
  ------------------
  568|  27.2k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 1.03k, False: 76.8k]
  ------------------
  569|  27.2k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 77, False: 27.2k]
  ------------------
  570|  27.2k|                                {
  571|  3.56k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 3.56k, False: 23.7k]
  ------------------
  572|  3.74k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 177, False: 27.1k]
  ------------------
  573|  3.74k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 3.61k, False: 130]
  ------------------
  574|  3.61k|                                        {
  575|  3.61k|                                            return OpCode::SLAI;
  576|  3.61k|                                        }
  577|    130|                                        break;
  578|       |
  579|  14.9k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 14.9k, False: 12.2k]
  ------------------
  580|  15.2k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 228, False: 27.0k]
  ------------------
  581|  15.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 13.7k, False: 1.43k]
  ------------------
  582|  13.7k|                                        {
  583|  13.7k|                                            return OpCode::SLEI;
  584|  13.7k|                                        }
  585|  1.43k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.36k, False: 66]
  ------------------
  586|  1.36k|                                        {
  587|  1.36k|                                            return OpCode::SLEU;
  588|  1.36k|                                        }
  589|     66|                                        break;
  590|       |
  591|  3.34k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 3.34k, False: 23.9k]
  ------------------
  592|  3.73k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 391, False: 26.8k]
  ------------------
  593|  3.73k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 3.45k, False: 278]
  ------------------
  594|  3.45k|                                        {
  595|  3.45k|                                            return OpCode::SLLI;
  596|  3.45k|                                        }
  597|    278|                                        break;
  598|       |
  599|  4.36k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 4.36k, False: 22.9k]
  ------------------
  600|  4.50k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 141, False: 27.1k]
  ------------------
  601|  4.50k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 4.27k, False: 232]
  ------------------
  602|  4.27k|                                        {
  603|  4.27k|                                            return OpCode::SLTI;
  604|  4.27k|                                        }
  605|    232|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 166, False: 66]
  ------------------
  606|    166|                                        {
  607|    166|                                            return OpCode::SLTU;
  608|    166|                                        }
  609|     66|                                        break;
  610|  27.2k|                                }
  611|       |
  612|  3.56k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.94k, False: 74.9k]
  ------------------
  613|  7.62k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 4.06k, False: 73.7k]
  ------------------
  614|  7.62k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 7.05k, False: 569]
  ------------------
  615|  7.05k|                                {
  616|  7.05k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 370, False: 6.68k]
  ------------------
  617|    370|                                    {
  618|    370|                                        return OpCode::SNEI;
  619|    370|                                    }
  620|  6.68k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 6.52k, False: 156]
  ------------------
  621|  6.52k|                                    {
  622|  6.52k|                                        return OpCode::SNEU;
  623|  6.52k|                                    }
  624|  7.05k|                                }
  625|    725|                                break;
  626|       |
  627|  1.87k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.87k, False: 75.9k]
  ------------------
  628|  2.63k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 760, False: 77.0k]
  ------------------
  629|  2.63k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.16k, False: 1.47k]
  |  Branch (629:37): [True: 616, False: 2.02k]
  |  Branch (629:53): [True: 616, False: 547]
  ------------------
  630|    616|                                {
  631|    616|                                    return OpCode::SRAI;
  632|    616|                                }
  633|  2.02k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.46k, False: 554]
  |  Branch (633:42): [True: 954, False: 1.06k]
  |  Branch (633:58): [True: 954, False: 512]
  ------------------
  634|    954|                                {
  635|    954|                                    return OpCode::SRLI;
  636|    954|                                }
  637|  1.06k|                                break;
  638|       |
  639|  13.2k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 13.2k, False: 64.5k]
  ------------------
  640|  24.4k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 11.1k, False: 66.7k]
  ------------------
  641|  24.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 22.0k, False: 2.31k]
  ------------------
  642|  22.0k|                                {
  643|  22.0k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 7.36k, False: 14.7k]
  ------------------
  644|  22.0k|                                    {
  645|    133|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 133, False: 21.9k]
  ------------------
  646|    296|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 163, False: 21.9k]
  ------------------
  647|    296|                                            return OpCode::SUBD;
  648|       |
  649|  4.16k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 4.16k, False: 17.9k]
  ------------------
  650|  4.23k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 66, False: 22.0k]
  ------------------
  651|  4.23k|                                            return OpCode::SUBF;
  652|       |
  653|  4.80k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 4.80k, False: 17.2k]
  ------------------
  654|  6.02k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.22k, False: 20.8k]
  ------------------
  655|  6.02k|                                            return OpCode::SUBI;
  656|       |
  657|  4.09k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 4.09k, False: 17.9k]
  ------------------
  658|  4.16k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 22.0k]
  ------------------
  659|  4.16k|                                            return OpCode::SUBU;
  660|  22.0k|                                    }
  661|  22.0k|                                }
  662|  9.68k|                                break;
  663|  77.8k|                        }
  664|  16.3k|                        break;
  665|       |
  666|  16.3k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 3.37k, False: 183k]
  ------------------
  667|  3.74k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 365, False: 186k]
  ------------------
  668|  3.74k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 3.59k, False: 144]
  |  Branch (668:29): [True: 3.14k, False: 603]
  |  Branch (668:45): [True: 3.35k, False: 249]
  |  Branch (668:61): [True: 3.14k, False: 210]
  ------------------
  669|  3.14k|                        {
  670|  3.14k|                            return OpCode::TRAP;
  671|  3.14k|                        }
  672|    603|                        break;
  673|    603|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 290, False: 186k]
  ------------------
  674|    595|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 305, False: 186k]
  ------------------
  675|    595|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 400, False: 195]
  |  Branch (675:29): [True: 236, False: 359]
  |  Branch (675:45): [True: 302, False: 98]
  |  Branch (675:61): [True: 236, False: 66]
  ------------------
  676|    236|                        {
  677|    236|                            return OpCode::XORI;
  678|    236|                        }
  679|    359|                        break;
  680|   186k|                }
  681|  53.5k|                break;
  682|   186k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  66.5k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 66.5k, False: 743k]
  ------------------
  686|  66.5k|                char c1 = token[0];
  687|  66.5k|                char c2 = token[1];
  688|  66.5k|                char c3 = token[2];
  689|  66.5k|                char c4 = token[3];
  690|  66.5k|                char c5 = token[4];
  691|       |
  692|  66.5k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 10.0k, False: 56.5k]
  ------------------
  693|  66.5k|                {
  694|  15.0k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 15.0k, False: 51.5k]
  ------------------
  695|  15.0k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 66.5k]
  ------------------
  696|  15.0k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 15.0k, False: 0]
  |  Branch (696:29): [True: 15.0k, False: 0]
  |  Branch (696:45): [True: 15.0k, False: 0]
  |  Branch (696:61): [True: 15.0k, False: 0]
  |  Branch (696:77): [True: 15.0k, False: 0]
  ------------------
  697|  15.0k|                        {
  698|  15.0k|                            return OpCode::ADDUI;
  699|  15.0k|                        }
  700|      0|                        break;
  701|       |
  702|  1.08k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.08k, False: 65.4k]
  ------------------
  703|  1.08k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 66.5k]
  ------------------
  704|  1.08k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.08k, False: 0]
  |  Branch (704:29): [True: 1.08k, False: 0]
  |  Branch (704:45): [True: 1.08k, False: 0]
  |  Branch (704:61): [True: 1.08k, False: 0]
  |  Branch (704:77): [True: 1.08k, False: 0]
  ------------------
  705|  1.08k|                        {
  706|  1.08k|                            return OpCode::DIVUI;
  707|  1.08k|                        }
  708|      0|                        break;
  709|       |
  710|  11.1k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 11.1k, False: 55.3k]
  ------------------
  711|  11.1k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 66.5k]
  ------------------
  712|  11.1k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 11.1k, False: 0]
  |  Branch (712:29): [True: 11.1k, False: 0]
  |  Branch (712:45): [True: 11.1k, False: 0]
  |  Branch (712:61): [True: 11.1k, False: 0]
  ------------------
  713|  11.1k|                        {
  714|  11.1k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 11.1k]
  ------------------
  715|  11.1k|                            {
  716|    299|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 299, False: 10.9k]
  ------------------
  717|    299|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 11.1k]
  ------------------
  718|    299|                                    return OpCode::MULTD;
  719|       |
  720|  8.92k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 8.92k, False: 2.27k]
  ------------------
  721|  8.92k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 11.1k]
  ------------------
  722|  8.92k|                                    return OpCode::MULTF;
  723|       |
  724|    638|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 638, False: 10.5k]
  ------------------
  725|    638|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 11.1k]
  ------------------
  726|    638|                                    return OpCode::MULTI;
  727|       |
  728|  1.33k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.33k, False: 9.86k]
  ------------------
  729|  1.33k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 11.1k]
  ------------------
  730|  1.33k|                                    return OpCode::MULTU;
  731|  11.1k|                            }
  732|  11.1k|                        }
  733|      0|                        break;
  734|       |
  735|  29.2k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 29.2k, False: 37.3k]
  ------------------
  736|  29.2k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 66.5k]
  ------------------
  737|  29.2k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 29.2k]
  ------------------
  738|  29.2k|                        {
  739|  4.97k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 4.97k, False: 24.2k]
  ------------------
  740|  4.97k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 29.2k]
  ------------------
  741|  4.97k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 4.97k, False: 0]
  |  Branch (741:37): [True: 4.97k, False: 0]
  |  Branch (741:53): [True: 4.97k, False: 0]
  |  Branch (741:69): [True: 4.97k, False: 0]
  ------------------
  742|  4.97k|                                {
  743|  4.97k|                                    return OpCode::SEQUI;
  744|  4.97k|                                }
  745|      0|                                break;
  746|       |
  747|  12.6k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 12.6k, False: 16.5k]
  ------------------
  748|  12.6k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 29.2k]
  ------------------
  749|  12.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 6.26k, False: 6.42k]
  |  Branch (749:37): [True: 6.26k, False: 6.42k]
  |  Branch (749:53): [True: 6.26k, False: 0]
  |  Branch (749:69): [True: 6.26k, False: 0]
  ------------------
  750|  6.26k|                                {
  751|  6.26k|                                    return OpCode::SGEUI;
  752|  6.26k|                                }
  753|  6.42k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 6.42k, False: 0]
  |  Branch (753:42): [True: 6.42k, False: 0]
  |  Branch (753:58): [True: 6.42k, False: 0]
  |  Branch (753:74): [True: 6.42k, False: 0]
  ------------------
  754|  6.42k|                                {
  755|  6.42k|                                    return OpCode::SGTUI;
  756|  6.42k|                                }
  757|      0|                                break;
  758|       |
  759|  5.20k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 5.20k, False: 24.0k]
  ------------------
  760|  5.20k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 29.2k]
  ------------------
  761|  5.20k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 3.52k, False: 1.68k]
  |  Branch (761:37): [True: 3.52k, False: 1.68k]
  |  Branch (761:53): [True: 3.52k, False: 0]
  |  Branch (761:69): [True: 3.52k, False: 0]
  ------------------
  762|  3.52k|                                {
  763|  3.52k|                                    return OpCode::SLEUI;
  764|  3.52k|                                }
  765|  1.68k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.68k, False: 0]
  |  Branch (765:42): [True: 1.68k, False: 0]
  |  Branch (765:58): [True: 1.68k, False: 0]
  |  Branch (765:74): [True: 1.68k, False: 0]
  ------------------
  766|  1.68k|                                {
  767|  1.68k|                                    return OpCode::SLTUI;
  768|  1.68k|                                }
  769|      0|                                break;
  770|       |
  771|    175|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 175, False: 29.0k]
  ------------------
  772|    175|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 29.2k]
  ------------------
  773|    175|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 175, False: 0]
  |  Branch (773:37): [True: 175, False: 0]
  |  Branch (773:53): [True: 175, False: 0]
  |  Branch (773:69): [True: 175, False: 0]
  ------------------
  774|    175|                                {
  775|    175|                                    return OpCode::SNEUI;
  776|    175|                                }
  777|      0|                                break;
  778|       |
  779|  6.16k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 6.16k, False: 23.0k]
  ------------------
  780|  6.16k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 29.2k]
  ------------------
  781|  6.16k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 6.16k, False: 0]
  |  Branch (781:37): [True: 6.16k, False: 0]
  |  Branch (781:53): [True: 6.16k, False: 0]
  |  Branch (781:69): [True: 6.16k, False: 0]
  ------------------
  782|  6.16k|                                {
  783|  6.16k|                                    return OpCode::SUBUI;
  784|  6.16k|                                }
  785|      0|                                break;
  786|  29.2k|                        }
  787|       |
  788|      0|                        break;
  789|  66.5k|                }
  790|       |
  791|  10.0k|                break;
  792|  66.5k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  17.1k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 17.1k, False: 792k]
  ------------------
  796|  17.1k|                char c1 = token[0];
  797|  17.1k|                char c2 = token[1];
  798|  17.1k|                char c3 = token[2];
  799|  17.1k|                char c4 = token[3];
  800|  17.1k|                char c5 = token[4];
  801|  17.1k|                char c6 = token[5];
  802|       |
  803|  17.1k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 8.20k, False: 8.93k]
  |  Branch (803:21): [True: 8.20k, False: 8.93k]
  |  Branch (803:37): [True: 8.20k, False: 0]
  |  Branch (803:53): [True: 8.20k, False: 0]
  ------------------
  804|  8.20k|                {
  805|  8.20k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 8.20k]
  ------------------
  806|  8.20k|                    {
  807|  1.53k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.53k, False: 6.66k]
  ------------------
  808|  1.53k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 8.20k]
  ------------------
  809|  1.53k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 1.53k, False: 0]
  ------------------
  810|  1.53k|                            {
  811|  1.53k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.37k, False: 160]
  ------------------
  812|  1.37k|                                {
  813|  1.37k|                                    return OpCode::CVTD2F;
  814|  1.37k|                                }
  815|    160|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 160, False: 0]
  ------------------
  816|    160|                                {
  817|    160|                                    return OpCode::CVTD2I;
  818|    160|                                }
  819|  1.53k|                            }
  820|      0|                            break;
  821|       |
  822|  3.64k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 3.64k, False: 4.55k]
  ------------------
  823|  3.64k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 8.20k]
  ------------------
  824|  3.64k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 3.64k, False: 0]
  ------------------
  825|  3.64k|                            {
  826|  3.64k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 1.30k, False: 2.34k]
  ------------------
  827|  1.30k|                                {
  828|  1.30k|                                    return OpCode::CVTF2D;
  829|  1.30k|                                }
  830|  2.34k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 2.34k, False: 0]
  ------------------
  831|  2.34k|                                {
  832|  2.34k|                                    return OpCode::CVTF2I;
  833|  2.34k|                                }
  834|  3.64k|                            }
  835|      0|                            break;
  836|       |
  837|  3.02k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 3.02k, False: 5.17k]
  ------------------
  838|  3.02k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 8.20k]
  ------------------
  839|  3.02k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 3.02k, False: 0]
  ------------------
  840|  3.02k|                            {
  841|  3.02k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 2.95k, False: 67]
  ------------------
  842|  2.95k|                                {
  843|  2.95k|                                    return OpCode::CVTI2D;
  844|  2.95k|                                }
  845|     67|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 67, False: 0]
  ------------------
  846|     67|                                {
  847|     67|                                    return OpCode::CVTI2F;
  848|     67|                                }
  849|  3.02k|                            }
  850|  8.20k|                    }
  851|  8.20k|                }
  852|  8.93k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.83k, False: 6.10k]
  |  Branch (852:26): [True: 2.83k, False: 6.10k]
  |  Branch (852:42): [True: 2.83k, False: 0]
  |  Branch (852:58): [True: 2.83k, False: 0]
  |  Branch (852:74): [True: 2.83k, False: 0]
  ------------------
  853|  8.93k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 2.83k, False: 0]
  |  Branch (853:42): [True: 2.83k, False: 0]
  ------------------
  854|  2.83k|                {
  855|  2.83k|                    return OpCode::MULTUI;
  856|  2.83k|                }
  857|  6.10k|                break;
  858|  17.1k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  6.10k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 2.02k, False: 807k]
  ------------------
  862|  2.02k|                char c1 = token[0];
  863|  2.02k|                char c2 = token[1];
  864|  2.02k|                char c3 = token[2];
  865|  2.02k|                char c4 = token[3];
  866|  2.02k|                char c5 = token[4];
  867|  2.02k|                char c6 = token[5];
  868|  2.02k|                char c7 = token[6];
  869|       |
  870|  2.02k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 775, False: 1.24k]
  |  Branch (870:21): [True: 775, False: 1.24k]
  |  Branch (870:37): [True: 775, False: 0]
  |  Branch (870:53): [True: 775, False: 0]
  ------------------
  871|    775|                {
  872|    775|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 164, False: 611]
  |  Branch (872:25): [True: 164, False: 611]
  |  Branch (872:41): [True: 164, False: 0]
  |  Branch (872:54): [True: 164, False: 0]
  |  Branch (872:70): [True: 164, False: 0]
  ------------------
  873|    164|                    {
  874|    164|                        return OpCode::MOVI2FP;
  875|    164|                    }
  876|    611|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 611, False: 0]
  |  Branch (876:30): [True: 611, False: 0]
  |  Branch (876:46): [True: 611, False: 0]
  |  Branch (876:62): [True: 611, False: 0]
  |  Branch (876:75): [True: 611, False: 0]
  ------------------
  877|    611|                    {
  878|    611|                        return OpCode::MOVFP2I;
  879|    611|                    }
  880|    775|                }
  881|  1.24k|                break;
  882|  2.02k|            }
  883|       |
  884|  39.6k|            default: {
  ------------------
  |  Branch (884:13): [True: 39.6k, False: 770k]
  ------------------
  885|  39.6k|                break;
  886|  2.02k|            }
  887|   809k|        }
  888|       |
  889|       |        // None found
  890|   300k|        return OpCode::NONE;
  891|   809k|    }
_ZN3dlx3iceEcc:
   17|  1.23M|    {
   18|  1.23M|        constexpr const char diff = 'a' - 'A';
   19|  1.23M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 845k, False: 390k]
  |  Branch (19:28): [True: 111k, False: 278k]
  ------------------
   20|  1.23M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   944k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  16.6k|    {
  193|  16.6k|        ParseError err;
  194|       |
  195|  16.6k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  16.6k|        err.m_LineNumber                           = line_number;
  197|  16.6k|        err.m_Column                               = column;
  198|  16.6k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  16.6k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  16.6k|        return err;
  202|  16.6k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  16.6k|    {
  207|  16.6k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  16.6k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  16.6k|                                                         actual_type);
  210|  16.6k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    594|    {
  216|    594|        ParseError err;
  217|       |
  218|    594|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    594|        err.m_LineNumber        = line_number;
  220|    594|        err.m_Column            = column;
  221|    594|        err.invalid_number.text = text;
  222|       |
  223|    594|        return err;
  224|    594|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    594|    {
  228|    594|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    594|                                                token.GetColumn().unsafe(), token.GetText());
  230|    594|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   333k|    {
  255|   333k|        ParseError err;
  256|       |
  257|   333k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   333k|        err.m_LineNumber                   = line_number;
  259|   333k|        err.m_Column                       = column;
  260|   333k|        err.unexpected_token.expected_type = expected_type;
  261|   333k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   333k|        return err;
  264|   333k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   333k|    {
  269|   333k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   333k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   333k|                                                  token.GetType());
  272|   333k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  12.7k|    {
  277|  12.7k|        ParseError err;
  278|       |
  279|  12.7k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  12.7k|        err.m_LineNumber                   = line_number;
  281|  12.7k|        err.m_Column                       = column;
  282|  12.7k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  12.7k|        return err;
  285|  12.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  4.35k|    {
  289|  4.35k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  4.35k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  4.35k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   141k|    {
  296|   141k|        ParseError err;
  297|       |
  298|   141k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   141k|        err.m_LineNumber                       = line_number;
  300|   141k|        err.m_Column                           = column;
  301|   141k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   141k|        return err;
  304|   141k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   141k|    {
  309|   141k|        return ConstructInvalidLabelIdentifierParseError(
  310|   141k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   141k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  37.0k|    {
  317|  37.0k|        ParseError err;
  318|       |
  319|  37.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  37.0k|        err.m_LineNumber                     = line_number;
  321|  37.0k|        err.m_Column                         = column;
  322|  37.0k|        err.label_already_defined.label_name = label_name;
  323|  37.0k|        err.label_already_defined.at_line    = at_line;
  324|  37.0k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  37.0k|        return err;
  327|  37.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  37.0k|    {
  332|  37.0k|        return ConstructLabelAlreadyDefinedParseError(
  333|  37.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  37.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  37.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   332k|    {
  340|   332k|        ParseError err;
  341|       |
  342|   332k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   332k|        err.m_LineNumber = line_number;
  344|   332k|        err.m_Column     = column;
  345|       |
  346|   332k|        return err;
  347|   332k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   332k|    {
  352|   332k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   332k|                                                        token.GetColumn().unsafe());
  354|   332k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  66.4k|    {
  360|  66.4k|        ParseError err;
  361|       |
  362|  66.4k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  66.4k|        err.m_LineNumber               = line_number;
  364|  66.4k|        err.m_Column                   = column;
  365|  66.4k|        err.too_few_arguments.required = required;
  366|  66.4k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  66.4k|        return err;
  369|  66.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  66.4k|    {
  374|  66.4k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  66.4k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  66.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  2.90k|    {
  381|  2.90k|        ParseError err;
  382|       |
  383|  2.90k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  2.90k|        err.m_LineNumber           = line_number;
  385|  2.90k|        err.m_Column               = column;
  386|  2.90k|        err.empty_label.label_name = label_name;
  387|       |
  388|  2.90k|        return err;
  389|  2.90k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  2.90k|    {
  393|  2.90k|        return ConstructEmptyLabelParseError(
  394|  2.90k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  2.90k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.66k, False: 1.24k]
  ------------------
  396|  1.66k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  2.90k|                        token.GetText());
  398|  2.90k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    192|    {
  403|    192|        ParseError err;
  404|       |
  405|    192|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    192|        err.m_LineNumber = line_number;
  407|    192|        err.m_Column     = column;
  408|       |
  409|    192|        return err;
  410|    192|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    192|    {
  414|    192|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    192|                                               token.GetColumn().unsafe());
  416|    192|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   944k|    {
   19|   944k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   944k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  7.32k|    {
  182|  7.32k|        ParsedProgram program;
  183|       |
  184|  7.32k|        program.m_Tokens = tokens;
  185|       |
  186|  7.32k|        phi::boolean line_has_instruction{false};
  187|  7.32k|        phi::usize   label_count{0u};
  188|       |
  189|  2.13M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.13M, False: 7.32k]
  ------------------
  190|  2.13M|        {
  191|  2.13M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.13M|            switch (current_token.GetType())
  196|  2.13M|            {
  197|       |                // Ignore comments
  198|   264k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 264k, False: 1.86M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   264k|                    break;
  201|       |
  202|   908k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 908k, False: 1.22M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   908k|                    line_has_instruction = false;
  205|   908k|                    break;
  206|       |
  207|   191k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 191k, False: 1.93M]
  ------------------
  208|   191k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 10.4k, False: 180k]
  ------------------
  209|  10.4k|                    {
  210|  10.4k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  10.4k|                                current_token, Token::Type::NewLine));
  212|  10.4k|                        break;
  213|  10.4k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   180k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 111k, False: 68.9k]
  ------------------
  218|   111k|                    {
  219|   111k|                        program.AddParseError(
  220|   111k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   111k|                        break;
  222|   111k|                    }
  223|       |
  224|  68.9k|                    std::string_view label_name = current_token.GetText();
  225|  68.9k|                    label_name.remove_suffix(1);
  226|       |
  227|  68.9k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 8.37k, False: 60.6k]
  ------------------
  228|  8.37k|                    {
  229|  8.37k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  8.37k|                                current_token.GetLineNumber().unsafe(),
  231|  8.37k|                                current_token.GetColumn().unsafe(), label_name));
  232|  8.37k|                        break;
  233|  8.37k|                    }
  234|       |
  235|  60.6k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 19.0k, False: 41.5k]
  ------------------
  236|  19.0k|                    {
  237|  19.0k|                        program.AddParseError(
  238|  19.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  19.0k|                        break;
  240|  19.0k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  41.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 37.0k, False: 4.51k]
  ------------------
  244|  37.0k|                    {
  245|       |                        // Find first defintions of label
  246|  37.0k|                        const Token* first_label_definition =
  247|  37.0k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  37.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  37.0k|                                    {
  250|  37.0k|                                        std::string_view token_label_name = t.GetText();
  251|  37.0k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  37.0k|                                        if (token_label_name == label_name)
  254|  37.0k|                                        {
  255|  37.0k|                                            return true;
  256|  37.0k|                                        }
  257|  37.0k|                                    }
  258|       |
  259|  37.0k|                                    return false;
  260|  37.0k|                                });
  261|       |
  262|  37.0k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  37.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  37.0k|                                current_token, *first_label_definition));
  266|  37.0k|                        break;
  267|  37.0k|                    }
  268|       |
  269|  4.51k|                    program.m_JumpData[label_name] =
  270|  4.51k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  4.51k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  4.51k|                    break;
  277|  41.5k|                }
  278|       |
  279|   486k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 486k, False: 1.64M]
  ------------------
  280|   486k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 332k, False: 153k]
  ------------------
  281|   332k|                    {
  282|   332k|                        program.AddParseError(
  283|   332k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   332k|                        break;
  285|   332k|                    }
  286|       |
  287|   153k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   153k|                    PHI_ASSERT(current_token.HasHint());
  291|   153k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   153k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   153k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   153k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   153k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   153k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   153k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   153k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   153k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   231k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 219k, False: 11.6k]
  ------------------
  313|   219k|                    {
  314|       |                        // Get next token
  315|   219k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 310, False: 219k]
  ------------------
  316|    310|                        {
  317|    310|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    310|                                    current_token, number_of_argument_required.unsafe(),
  319|    310|                                    argument_num.unsafe()));
  320|    310|                            break;
  321|    310|                        }
  322|       |
  323|   219k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   219k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 42.1k, False: 177k]
  ------------------
  327|  42.1k|                        {
  328|  42.1k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 192, False: 41.9k]
  ------------------
  329|    192|                            {
  330|    192|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    192|                            }
  332|       |
  333|  42.1k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  42.1k|                            continue;
  336|  42.1k|                        }
  337|       |
  338|   177k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 66.1k, False: 110k]
  ------------------
  339|  66.1k|                        {
  340|  66.1k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  66.1k|                                    token, number_of_argument_required.unsafe(),
  342|  66.1k|                                    argument_num.unsafe()));
  343|  66.1k|                            break;
  344|  66.1k|                        }
  345|       |
  346|   110k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   110k|                                parse_instruction_argument(
  348|   110k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   110k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 75.6k, False: 35.2k]
  ------------------
  350|  75.6k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  75.6k|                            break;
  353|  75.6k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  35.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  35.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  35.2k|                        argument_num++;
  360|  35.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  35.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   153k|                    program.m_Instructions.emplace_back(instruction);
  368|   153k|                    line_has_instruction = true;
  369|   153k|                    break;
  370|   486k|                }
  371|       |
  372|   279k|                default:
  ------------------
  |  Branch (372:17): [True: 279k, False: 1.85M]
  ------------------
  373|   279k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   279k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 178k, False: 101k]
  ------------------
  375|   178k|                    {
  376|   178k|                        expected_token_type = Token::Type::NewLine;
  377|   178k|                    }
  378|       |
  379|   279k|                    program.AddParseError(
  380|   279k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   279k|                    break;
  382|  2.13M|            }
  383|  2.13M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  7.32k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 497, False: 6.82k]
  ------------------
  387|    497|        {
  388|  10.6k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 10.2k, False: 497]
  ------------------
  389|  10.2k|            {
  390|  10.2k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  10.2k|                const Token& token = *it;
  393|  10.2k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 2.90k, False: 7.29k]
  ------------------
  394|  2.90k|                {
  395|  2.90k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  2.90k|                    --label_count;
  397|  2.90k|                }
  398|  10.2k|            }
  399|    497|        }
  400|       |
  401|  7.32k|        return program;
  402|  7.32k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  7.32k|    {
  406|  7.32k|        TokenStream tokens = Tokenize(source);
  407|  7.32k|        return Parse(tokens);
  408|  7.32k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   110k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   110k|        switch (token.GetType())
   38|   110k|        {
   39|  7.78k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 7.78k, False: 103k]
  ------------------
   40|  7.78k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 3.87k, False: 3.90k]
  ------------------
   41|  7.78k|                                          ArgumentType::AddressDisplacement))
   42|  3.87k|                {
   43|  3.87k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  3.87k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  3.87k|                    return {};
   47|  3.87k|                }
   48|       |
   49|       |                // Get address displacement
   50|  3.90k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  3.90k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  3.90k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 3.90k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  3.90k|                auto         it           = tokens.current_position();
   62|  3.90k|                const Token& first_token  = tokens.consume();
   63|  3.90k|                const Token& second_token = tokens.consume();
   64|  3.90k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  3.90k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.90k, False: 0]
  ------------------
   67|  3.90k|                {
   68|  3.90k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.90k|                            first_token, Token::Type::OpenBracket));
   70|  3.90k|                    return {};
   71|  3.90k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  21.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 21.2k, False: 89.6k]
  ------------------
   98|  21.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 4.55k, False: 16.7k]
  ------------------
   99|  4.55k|                {
  100|  4.55k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  4.55k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  4.55k|                    return {};
  103|  4.55k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  16.7k|                return ConstructInstructionArgumentRegisterInt(
  109|  16.7k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  21.2k|            }
  111|  2.19k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 2.19k, False: 108k]
  ------------------
  112|  2.19k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.98k, False: 209]
  ------------------
  113|  1.98k|                {
  114|  1.98k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.98k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.98k|                    return {};
  117|  1.98k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    209|                return ConstructInstructionArgumentRegisterFloat(
  123|    209|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  2.19k|            }
  125|  4.35k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 4.35k, False: 106k]
  ------------------
  126|  4.35k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  4.35k|                return {};
  129|  2.19k|            }
  130|  25.4k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 25.4k, False: 85.4k]
  ------------------
  131|       |                // Parse as Label
  132|  25.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 3.98k, False: 21.4k]
  ------------------
  133|  3.98k|                {
  134|  3.98k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  3.98k|                            token, expected_argument_type, ArgumentType::Label));
  136|  3.98k|                    return {};
  137|  3.98k|                }
  138|       |
  139|  21.4k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 21.4k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  21.4k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 10.6k, False: 10.8k]
  ------------------
  146|  10.6k|                {
  147|  10.6k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  10.6k|                    return {};
  149|  10.6k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  10.8k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  21.4k|            }
  155|  10.3k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 10.3k, False: 100k]
  ------------------
  156|  10.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 2.29k, False: 8.09k]
  ------------------
  157|  2.29k|                {
  158|  2.29k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  2.29k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  2.29k|                    return {};
  161|  2.29k|                }
  162|       |
  163|  8.09k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 7.50k, False: 594]
  ------------------
  164|  7.50k|                {
  165|  7.50k|                    return ConstructInstructionArgumentImmediateValue(
  166|  7.50k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  7.50k|                }
  168|       |
  169|    594|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    594|                return {};
  171|  8.09k|            }
  172|       |
  173|  39.4k|            default:
  ------------------
  |  Branch (173:13): [True: 39.4k, False: 71.4k]
  ------------------
  174|  39.4k|                program.AddParseError(
  175|  39.4k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  39.4k|                return {};
  177|   110k|        }
  178|   110k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   664k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   664k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 183k, False: 481k]
  ------------------
  249|   183k|                                    {
  250|   183k|                                        std::string_view token_label_name = t.GetText();
  251|   183k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   183k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 37.0k, False: 146k]
  ------------------
  254|  37.0k|                                        {
  255|  37.0k|                                            return true;
  256|  37.0k|                                        }
  257|   183k|                                    }
  258|       |
  259|   627k|                                    return false;
  260|   664k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|    196|    {
  353|    196|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 0, False: 196]
  ------------------
  354|      0|        {
  355|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|      0|            return false;
  357|      0|        }
  358|       |
  359|    196|        m_CurrentProgram = &program;
  360|       |
  361|    196|        m_ProgramCounter               = 0u;
  362|    196|        m_Halted                       = false;
  363|    196|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    196|        m_LastRaisedException          = Exception::None;
  365|    196|        m_CurrentStepCount             = 0u;
  366|       |
  367|    196|        return true;
  368|    196|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   929k|    {
   14|   929k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 196k, False: 733k]
  ------------------
   15|   196k|        {
   16|   196k|            char first_char = token[0];
   17|   196k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 69.3k, False: 126k]
  |  Branch (17:38): [True: 12.6k, False: 114k]
  ------------------
   18|  82.0k|            {
   19|  82.0k|                char second_char = token[1];
   20|  82.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 80.5k, False: 1.42k]
  |  Branch (20:43): [True: 71.7k, False: 8.83k]
  ------------------
   21|  71.7k|                {
   22|  71.7k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  71.7k|                }
   24|  82.0k|            }
   25|   196k|        }
   26|   733k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 368k, False: 364k]
  ------------------
   27|   368k|        {
   28|   368k|            char first_char = token[0];
   29|   368k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 25.3k, False: 343k]
  |  Branch (29:38): [True: 6.87k, False: 336k]
  ------------------
   30|  32.2k|            {
   31|  32.2k|                char second_char = token[1];
   32|  32.2k|                char third_char  = token[2];
   33|       |
   34|  32.2k|                switch (second_char)
   35|  32.2k|                {
   36|  9.79k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 9.79k, False: 22.4k]
  ------------------
   37|  9.79k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 9.58k, False: 205]
  |  Branch (37:50): [True: 8.62k, False: 965]
  ------------------
   38|  8.62k|                        {
   39|  8.62k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  8.62k|                        }
   41|  1.17k|                        break;
   42|  9.79k|                    }
   43|  15.9k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 15.9k, False: 16.3k]
  ------------------
   44|  15.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 15.7k, False: 210]
  |  Branch (44:50): [True: 11.8k, False: 3.82k]
  ------------------
   45|  11.8k|                        {
   46|  11.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  11.8k|                        }
   48|  4.03k|                        break;
   49|  15.9k|                    }
   50|  4.89k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 4.89k, False: 27.3k]
  ------------------
   51|  4.89k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 515, False: 4.37k]
  |  Branch (51:50): [True: 4.30k, False: 66]
  ------------------
   52|  4.82k|                        {
   53|  4.82k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  4.82k|                        }
   55|     66|                        break;
   56|  4.89k|                    }
   57|  1.62k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.62k, False: 30.5k]
  ------------------
   58|  1.62k|                        break;
   59|  4.89k|                    }
   60|  32.2k|                }
   61|  32.2k|            }
   62|   368k|        }
   63|       |
   64|   832k|        return IntRegisterID::None;
   65|   929k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   832k|    {
   69|   832k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 124k, False: 708k]
  ------------------
   70|   124k|        {
   71|   124k|            char first_char = token[0];
   72|   124k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 9.04k, False: 115k]
  |  Branch (72:38): [True: 3.96k, False: 111k]
  ------------------
   73|  13.0k|            {
   74|  13.0k|                char second_char = token[1];
   75|  13.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 12.8k, False: 153]
  |  Branch (75:43): [True: 9.27k, False: 3.57k]
  ------------------
   76|  9.27k|                {
   77|  9.27k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  9.27k|                }
   79|  13.0k|            }
   80|   124k|        }
   81|   708k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 343k, False: 364k]
  ------------------
   82|   343k|        {
   83|   343k|            char first_char = token[0];
   84|   343k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 13.7k, False: 329k]
  |  Branch (84:38): [True: 5.49k, False: 324k]
  ------------------
   85|  19.2k|            {
   86|  19.2k|                char second_char = token[1];
   87|  19.2k|                char third_char  = token[2];
   88|       |
   89|  19.2k|                switch (second_char)
   90|  19.2k|                {
   91|  4.68k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 4.68k, False: 14.5k]
  ------------------
   92|  4.68k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 4.02k, False: 662]
  |  Branch (92:50): [True: 3.78k, False: 245]
  ------------------
   93|  3.78k|                        {
   94|  3.78k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  3.78k|                        }
   96|    907|                        break;
   97|  4.68k|                    }
   98|  4.65k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 4.65k, False: 14.5k]
  ------------------
   99|  4.65k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.09k, False: 3.55k]
  |  Branch (99:50): [True: 749, False: 345]
  ------------------
  100|    749|                        {
  101|    749|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    749|                        }
  103|  3.90k|                        break;
  104|  4.65k|                    }
  105|  9.34k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 9.34k, False: 9.87k]
  ------------------
  106|  9.34k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 8.32k, False: 1.01k]
  |  Branch (106:50): [True: 852, False: 164]
  ------------------
  107|  9.18k|                        {
  108|  9.18k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  9.18k|                        }
  110|    164|                        break;
  111|  9.34k|                    }
  112|    537|                    default: {
  ------------------
  |  Branch (112:21): [True: 537, False: 18.6k]
  ------------------
  113|    537|                        break;
  114|  9.34k|                    }
  115|  19.2k|                }
  116|  19.2k|            }
  117|   343k|        }
  118|       |
  119|   809k|        return FloatRegisterID::None;
  120|   832k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   950k|    {
  124|   950k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 215k, False: 734k]
  ------------------
  125|   215k|        {
  126|   215k|            char c1 = token[0];
  127|   215k|            char c2 = token[1];
  128|   215k|            char c3 = token[2];
  129|   215k|            char c4 = token[3];
  130|       |
  131|   215k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 28.8k, False: 186k]
  |  Branch (131:34): [True: 216, False: 186k]
  |  Branch (131:49): [True: 28.7k, False: 308]
  |  Branch (131:62): [True: 191, False: 117]
  ------------------
  132|   215k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 28.7k, False: 196]
  |  Branch (132:34): [True: 130, False: 66]
  |  Branch (132:49): [True: 28.7k, False: 130]
  |  Branch (132:62): [True: 0, False: 130]
  ------------------
  133|   215k|        }
  134|       |
  135|   734k|        return false;
  136|   950k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.68M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   673k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  6.01M|    {
   41|  6.01M|        return m_Type;
   42|  6.01M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  3.89M|    {
   51|  3.89M|        return m_LineNumber;
   52|  3.89M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  7.58M|    {
   56|  7.58M|        return m_Column;
   57|  7.58M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  5.22M|    {
   61|  5.22M|        return m_Text.length();
   62|  5.22M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   678k|    {
   66|   678k|        return m_Text;
   67|   678k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   165k|    {
   80|   165k|        return m_HasHint;
   81|   165k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   182k|    {
   85|   182k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   182k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   182k|                   m_Type == Type::ImmediateInteger);
   88|   182k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   182k|        return m_Hint;
   91|   182k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  7.32k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  7.32k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  7.32k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  3.90k|    {
   51|  3.90k|        auto it = m_Iterator;
   52|  15.6k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 11.7k, False: 3.90k]
  ------------------
   53|  11.7k|        {
   54|  11.7k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 11.7k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  11.7k|        }
   59|       |
   60|  3.90k|        return true;
   61|  3.90k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  2.35M|    {
   65|  2.35M|        return m_Iterator != m_Tokens.end();
   66|  2.35M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  2.36M|    {
   70|  2.36M|        return m_Iterator == m_Tokens.end();
   71|  2.36M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  2.36M|    {
   85|  2.36M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  2.36M|        return *m_Iterator++;
   91|  2.36M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  3.90k|    {
  164|  3.90k|        return m_Iterator;
  165|  3.90k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  7.32k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  7.32k|        return m_Tokens.begin();
  188|  7.32k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  7.32k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  7.32k|        return m_Tokens.end();
  206|  7.32k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    497|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    497|        return m_Tokens.rbegin();
  224|    497|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  10.2k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  10.2k|        return m_Tokens.rend();
  233|  10.2k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  7.32k|    {
   63|  7.32k|        TokenStream tokens;
   64|       |
   65|  7.32k|        std::string_view current_token;
   66|       |
   67|  7.32k|        phi::u64 current_line_number{1u};
   68|  7.32k|        phi::u64 current_column{1u};
   69|  7.32k|        phi::u64 token_begin{0u};
   70|       |
   71|  7.32k|        phi::boolean parsing_comment{false};
   72|       |
   73|  5.30M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 5.29M, False: 7.32k]
  ------------------
   74|  5.29M|        {
   75|  5.29M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  5.29M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 982k, False: 4.31M]
  ------------------
   78|   982k|            {
   79|   982k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 493k, False: 488k]
  ------------------
   80|   493k|                {
   81|       |                    // Skip empty lines
   82|   493k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   493k|                                        current_line_number, current_column);
   84|       |
   85|   493k|                    parsing_comment = false;
   86|   493k|                    current_line_number += 1u;
   87|   493k|                    current_column = 1u;
   88|   493k|                    continue;
   89|   493k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   488k|                tokens.emplace_back(
   93|   488k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   488k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   488k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   488k|                                    current_line_number, current_column);
   98|       |
   99|   488k|                current_token   = std::string_view{};
  100|   488k|                parsing_comment = false;
  101|   488k|                current_line_number += 1u;
  102|   488k|                current_column = 0u;
  103|   488k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  4.31M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 17.2k, False: 4.30M]
  |  Branch (105:34): [True: 279k, False: 4.02M]
  ------------------
  106|   296k|            {
  107|   296k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 253k, False: 43.0k]
  ------------------
  108|   253k|                {
  109|   253k|                    token_begin = i;
  110|   253k|                }
  111|  43.0k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 32.6k, False: 10.4k]
  ------------------
  112|  32.6k|                {
  113|  32.6k|                    tokens.emplace_back(ParseToken(
  114|  32.6k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  32.6k|                            current_line_number, current_column - current_token.length()));
  116|  32.6k|                    token_begin   = i;
  117|  32.6k|                    current_token = std::string_view{};
  118|  32.6k|                }
  119|       |
  120|   296k|                parsing_comment = true;
  121|   296k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   296k|            }
  123|  4.02M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 333k, False: 3.68M]
  ------------------
  124|   333k|            {
  125|       |                // simply append the character
  126|   333k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   333k|            }
  128|  3.68M|            else
  129|  3.68M|            {
  130|       |                // Not parsing a comment
  131|  3.68M|                switch (c)
  132|  3.68M|                {
  133|   469k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 469k, False: 3.21M]
  ------------------
  134|   469k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 711, False: 3.68M]
  ------------------
  135|   469k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 3.68M]
  ------------------
  136|   469k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 574, False: 469k]
  ------------------
  137|    574|                        {
  138|    574|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    574|                            continue;
  141|    574|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   469k|                        tokens.emplace_back(ParseToken(
  145|   469k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   469k|                                current_line_number, current_column - current_token.length()));
  147|   469k|                        current_token = std::string_view{};
  148|   469k|                        break;
  149|  80.3k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 80.3k, False: 3.60M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  80.3k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 74.1k, False: 6.22k]
  ------------------
  152|  74.1k|                        {
  153|  74.1k|                            current_token =
  154|  74.1k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  74.1k|                            tokens.emplace_back(ParseToken(
  156|  74.1k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  74.1k|                                    current_line_number,
  158|  74.1k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  74.1k|                            current_token = std::string_view{};
  161|  74.1k|                        }
  162|  6.22k|                        else
  163|  6.22k|                        {
  164|       |                            // Orphan colon
  165|  6.22k|                            token_begin = i;
  166|       |
  167|  6.22k|                            tokens.emplace_back(Token::Type::Colon,
  168|  6.22k|                                                source.substr(token_begin.unsafe(), 1),
  169|  6.22k|                                                current_line_number, current_column);
  170|  6.22k|                        }
  171|  80.3k|                        break;
  172|   145k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 145k, False: 3.54M]
  ------------------
  173|   160k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 15.2k, False: 3.67M]
  ------------------
  174|   160k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 264, False: 3.68M]
  ------------------
  175|   160k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 145k, False: 15.4k]
  ------------------
  176|   145k|                        {
  177|   145k|                            tokens.emplace_back(ParseToken(
  178|   145k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   145k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   145k|                            current_token = std::string_view{};
  182|   145k|                        }
  183|       |
  184|   160k|                        Token::Type type;
  185|   160k|                        switch (c)
  186|   160k|                        {
  187|   145k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 145k, False: 15.5k]
  ------------------
  188|   145k|                                type = Token::Type::Comma;
  189|   145k|                                break;
  190|  15.2k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 15.2k, False: 145k]
  ------------------
  191|  15.2k|                                type = Token::Type::OpenBracket;
  192|  15.2k|                                break;
  193|    264|                            case ')':
  ------------------
  |  Branch (193:29): [True: 264, False: 160k]
  ------------------
  194|    264|                                type = Token::Type::ClosingBracket;
  195|    264|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 160k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   160k|#endif
  201|   160k|                        }
  202|       |
  203|   160k|                        token_begin = i;
  204|       |
  205|   160k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   160k|                                            current_line_number, current_column);
  207|   160k|                        break;
  208|       |
  209|  2.97M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.97M, False: 710k]
  ------------------
  210|  2.97M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 926k, False: 2.05M]
  ------------------
  211|   926k|                        {
  212|   926k|                            token_begin = i;
  213|   926k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.97M|                        current_token =
  217|  2.97M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  3.68M|                }
  219|  3.68M|            }
  220|       |
  221|  4.80M|            current_column += 1u;
  222|  4.80M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  7.32k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.39k, False: 4.93k]
  ------------------
  226|  2.39k|        {
  227|  2.39k|            tokens.emplace_back(
  228|  2.39k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.39k|                               current_line_number, current_column - current_token.length()));
  230|  2.39k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  7.32k|        tokens.finalize();
  234|       |
  235|  7.32k|        return tokens;
  236|  7.32k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.21M|    {
   11|  1.21M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 33.5k, False: 1.17M]
  |  Branch (11:35): [True: 33.1k, False: 323]
  ------------------
   12|  33.1k|        {
   13|  33.1k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  33.1k|            if (number)
  ------------------
  |  Branch (15:17): [True: 27.5k, False: 5.68k]
  ------------------
   16|  27.5k|            {
   17|  27.5k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  27.5k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  27.5k|            }
   20|       |
   21|  5.68k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  33.1k|        }
   23|       |
   24|  1.17M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 7.28k, False: 1.17M]
  |  Branch (24:35): [True: 279k, False: 892k]
  ------------------
   25|   286k|        {
   26|   286k|            return {Token::Type::Comment, token, line_number, column};
   27|   286k|        }
   28|       |
   29|   892k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 24.7k, False: 868k]
  ------------------
   30|  24.7k|        {
   31|  24.7k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  24.7k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  24.7k|        }
   34|       |
   35|   868k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 28.7k, False: 839k]
  ------------------
   36|  28.7k|        {
   37|  28.7k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  28.7k|        }
   39|       |
   40|   839k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 92.1k, False: 747k]
  ------------------
   41|  92.1k|        {
   42|  92.1k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  92.1k|                    static_cast<std::uint32_t>(id)};
   44|  92.1k|        }
   45|       |
   46|   747k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 22.7k, False: 724k]
  ------------------
   47|  22.7k|        {
   48|  22.7k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  22.7k|                    static_cast<std::uint32_t>(id)};
   50|  22.7k|        }
   51|       |
   52|   724k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 506k, False: 218k]
  ------------------
   53|   506k|        {
   54|   506k|            return {Token::Type::OpCode, token, line_number, column,
   55|   506k|                    static_cast<std::uint32_t>(opcode)};
   56|   506k|        }
   57|       |
   58|   218k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   724k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  7.32k|    {
   53|       |        // Constants
   54|  7.32k|        constexpr std::uint8_t number_of_opcodes =
   55|  7.32k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  7.32k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  7.32k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  7.32k|        std::string ret;
   60|       |
   61|  1.47M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.47M, False: 7.26k]
  ------------------
   62|  1.47M|        {
   63|  1.47M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.47M|            switch (current_value)
   66|  1.47M|            {
   67|       |                // OpCode
   68|   453k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 453k, False: 1.01M]
  ------------------
   69|       |                    // Has one more value
   70|   453k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 453k, False: 448]
  ------------------
   71|   453k|                    {
   72|   453k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   453k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   453k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 13, False: 453k]
  ------------------
   77|     13|                        {
   78|     13|                            return detail::ErrorString;
   79|     13|                        }
   80|   453k|                    }
   81|   453k|                    break;
   82|   453k|                }
   83|       |
   84|       |                // Int Register
   85|   453k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 108k, False: 1.36M]
  ------------------
   86|       |                    // Has one more value
   87|   108k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 108k, False: 78]
  ------------------
   88|   108k|                    {
   89|   108k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   108k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   108k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 3, False: 108k]
  ------------------
   93|      3|                        {
   94|      3|                            return detail::ErrorString;
   95|      3|                        }
   96|   108k|                    }
   97|   108k|                    break;
   98|   108k|                }
   99|       |
  100|       |                // Float register
  101|   108k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 26.8k, False: 1.44M]
  ------------------
  102|       |                    // Has one more value
  103|  26.8k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 26.7k, False: 45]
  ------------------
  104|  26.7k|                    {
  105|  26.7k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  26.7k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  26.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 27, False: 26.7k]
  ------------------
  109|     27|                        {
  110|     27|                            return detail::ErrorString;
  111|     27|                        }
  112|  26.7k|                    }
  113|  26.7k|                    break;
  114|  26.8k|                }
  115|       |
  116|       |                // Floating point status register
  117|  30.6k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 30.6k, False: 1.43M]
  ------------------
  118|  30.6k|                    ret += "FPSR";
  119|  30.6k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 1, False: 30.6k]
  ------------------
  120|      1|                    {
  121|      1|                        return detail::ErrorString;
  122|      1|                    }
  123|       |
  124|  30.6k|                    break;
  125|  30.6k|                }
  126|       |
  127|       |                // Immediate integer
  128|  40.4k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 40.4k, False: 1.42M]
  ------------------
  129|  40.4k|                    ret += "#";
  130|  40.4k|                    [[fallthrough]];
  131|  40.4k|                }
  132|       |
  133|       |                // Integer literal
  134|   104k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 64.1k, False: 1.40M]
  ------------------
  135|   104k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   104k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 104k, False: 140]
  ------------------
  138|   104k|                    {
  139|   104k|                        std::int16_t value = 0;
  140|       |
  141|   313k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 208k, False: 104k]
  ------------------
  142|   208k|                        {
  143|   208k|                            value <<= 8;
  144|   208k|                            value &= data[index++];
  145|   208k|                        }
  146|       |
  147|   104k|                        ret += std::to_string(value);
  148|   104k|                    }
  149|   104k|                    break;
  150|  40.4k|                }
  151|       |
  152|       |                // Label
  153|  22.7k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 22.7k, False: 1.44M]
  ------------------
  154|  22.7k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  22.7k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 22.7k, False: 1]
  ------------------
  157|  22.7k|                    {
  158|  22.7k|                        std::string label_name = "lbl_";
  159|       |
  160|   136k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 113k, False: 22.7k]
  ------------------
  161|   113k|                        {
  162|   113k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   113k|                            label_name += c;
  165|   113k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  22.7k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 22.5k, False: 189]
  |  Branch (168:45): [True: 17.6k, False: 4.90k]
  ------------------
  169|  17.6k|                        {
  170|  17.6k|                            label_name += ':';
  171|  17.6k|                            ret += label_name;
  172|  17.6k|                        }
  173|  5.09k|                        else
  174|  5.09k|                        {
  175|  5.09k|                            ret += label_name;
  176|  5.09k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 5, False: 5.08k]
  ------------------
  177|      5|                            {
  178|      5|                                return detail::ErrorString;
  179|      5|                            }
  180|  5.09k|                        }
  181|  22.7k|                    }
  182|  22.7k|                    break;
  183|  22.7k|                }
  184|       |
  185|       |                // Newline
  186|   445k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 445k, False: 1.02M]
  ------------------
  187|   445k|                    ret += '\n';
  188|   445k|                    break;
  189|  22.7k|                }
  190|       |
  191|       |                // Comment
  192|   277k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 277k, False: 1.19M]
  ------------------
  193|   277k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   277k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 277k, False: 216]
  ------------------
  196|   277k|                    {
  197|   277k|                        std::string comment = "; ";
  198|       |
  199|  1.66M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 1.38M, False: 277k]
  ------------------
  200|  1.38M|                        {
  201|  1.38M|                            comment += static_cast<char>(data[index++]);
  202|  1.38M|                        }
  203|       |
  204|   277k|                        ret += comment + '\n';
  205|   277k|                    }
  206|   277k|                    break;
  207|  22.7k|                }
  208|       |
  209|       |                // Ignore
  210|     17|                default:
  ------------------
  |  Branch (210:17): [True: 17, False: 1.47M]
  ------------------
  211|     17|                    return detail::ErrorString;
  212|  1.47M|            }
  213|  1.47M|        }
  214|       |
  215|  7.26k|        return ret;
  216|  7.32k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   624k|        {
   20|   624k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 622k, False: 2.03k]
  ------------------
   21|   622k|            {
   22|   622k|                std::uint8_t val = data[index++];
   23|   622k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 475k, False: 147k]
  ------------------
   24|   475k|                {
   25|   475k|                    text += ' ';
   26|   475k|                }
   27|   147k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 147k, False: 49]
  ------------------
   28|   147k|                {
   29|   147k|                    text += ',';
   30|   147k|                }
   31|     49|                else
   32|     49|                {
   33|     49|                    return false;
   34|     49|                }
   35|   622k|            }
   36|       |
   37|   624k|            return true;
   38|   624k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   113k|        {
   42|   113k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 87.5k, False: 25.7k]
  ------------------
   43|  87.5k|            {
   44|  87.5k|                return '_';
   45|  87.5k|            }
   46|       |
   47|  25.7k|            return c;
   48|   113k|        }

LLVMFuzzerTestOneInput:
   12|  7.32k|{
   13|  7.32k|    static dlxemu::Emulator emu;
   14|       |
   15|  7.32k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  7.32k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  7.32k|    editor.SetText(source);
   21|  7.32k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  7.32k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  7.32k|    editor.ColorizeInternal();
   26|       |
   27|  7.32k|    return 0;
   28|  7.32k|}


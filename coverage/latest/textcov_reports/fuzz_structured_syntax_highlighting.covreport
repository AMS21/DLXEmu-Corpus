_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  19.9k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  3.99k|    {
  240|  3.99k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 2.57k, False: 1.41k]
  ------------------
  241|  2.57k|        {
  242|  2.57k|            return m_Line < other.m_Line;
  243|  2.57k|        }
  244|       |
  245|  1.41k|        return m_Column <= other.m_Column;
  246|  3.99k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  1.26M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  3.99k|    {
  349|  3.99k|        m_ErrorMarkers.clear();
  350|  3.99k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  3.99k|    {
  414|  3.99k|        m_Breakpoints.clear();
  415|  3.99k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  3.99k|    {
  494|  3.99k|        m_Lines.clear();
  495|  3.99k|        ResetState();
  496|  3.99k|        m_Lines.emplace_back(Line());
  497|       |
  498|  3.99k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 1.58M, False: 3.99k]
  ------------------
  499|  1.58M|        {
  500|  1.58M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 1.47k, False: 1.58M]
  |  Branch (500:17): [True: 94.0k, False: 1.49M]
  ------------------
  501|  1.58M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 328k, False: 1.25M]
  |  Branch (501:48): [True: 93.9k, False: 234k]
  |  Branch (501:69): [True: 92.5k, False: 1.34k]
  ------------------
  502|  94.0k|            {
  503|       |                // ignore the carriage return character and control characters
  504|  94.0k|            }
  505|  1.49M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 234k, False: 1.26M]
  ------------------
  506|   234k|            {
  507|   234k|                m_Lines.emplace_back(Line());
  508|   234k|            }
  509|  1.26M|            else
  510|  1.26M|            {
  511|  1.26M|                m_Lines.back().emplace_back(
  512|  1.26M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  1.26M|            }
  514|  1.58M|        }
  515|       |
  516|  3.99k|        m_TextChanged = true;
  517|  3.99k|        m_ScrollToTop = true;
  518|       |
  519|  3.99k|        m_UndoBuffer.clear();
  520|  3.99k|        m_UndoIndex = 0u;
  521|       |
  522|  3.99k|        Colorize();
  523|  3.99k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  3.99k|    {
  527|  3.99k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  3.99k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  3.99k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  3.99k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  3.99k|        const phi::u32 to_line =
 1724|  3.99k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 3.99k, False: 0]
  ------------------
 1725|  3.99k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  3.99k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  3.99k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  3.99k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  3.99k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  3.99k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  3.99k|    {
 1839|  3.99k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  3.99k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  3.99k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  3.99k|        std::string result;
 1844|       |
 1845|  3.99k|        phi::u32   lstart = start.m_Line;
 1846|  3.99k|        phi::u32   lend   = end.m_Line;
 1847|  3.99k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  3.99k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  3.99k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  3.99k|        phi::usize size   = 0u;
 1851|       |
 1852|   242k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 238k, False: 3.99k]
  ------------------
 1853|   238k|        {
 1854|   238k|            PHI_ASSERT(i < m_Lines.size());
 1855|   238k|            size += m_Lines[i.unsafe()].size();
 1856|   238k|        }
 1857|       |
 1858|  3.99k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  1.49M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 648k, False: 850k]
  |  Branch (1860:16): [True: 1.49M, False: 3.99k]
  |  Branch (1860:33): [True: 846k, False: 3.99k]
  ------------------
 1861|  1.49M|        {
 1862|  1.49M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  1.49M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  1.49M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 1.26M, False: 234k]
  ------------------
 1866|  1.26M|            {
 1867|  1.26M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  1.26M|                istart++;
 1869|  1.26M|            }
 1870|   234k|            else
 1871|   234k|            {
 1872|   234k|                istart = 0u;
 1873|   234k|                ++lstart;
 1874|       |
 1875|   234k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 234k, False: 0]
  ------------------
 1876|   234k|                {
 1877|   234k|                    result += '\n';
 1878|   234k|                }
 1879|   234k|            }
 1880|  1.49M|        }
 1881|       |
 1882|  3.99k|        return result;
 1883|  3.99k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  7.98k|    {
 2422|  7.98k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  7.98k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  7.98k|        phi::u32    index = 0u;
 2426|   421k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 416k, False: 4.33k]
  |  Branch (2426:35): [True: 413k, False: 7.98k]
  |  Branch (2426:58): [True: 413k, False: 3.65k]
  ------------------
 2427|   413k|        {
 2428|   413k|            PHI_ASSERT(index < line.size());
 2429|   413k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   413k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 413k]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|   413k|            else
 2436|   413k|            {
 2437|   413k|                ++column;
 2438|   413k|            }
 2439|       |
 2440|   413k|            index += UTF8CharLength(character);
 2441|   413k|        }
 2442|       |
 2443|  7.98k|        return index;
 2444|  7.98k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  3.99k|    {
 2494|  3.99k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 3.99k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  3.99k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  3.99k|        phi::u32    col  = 0u;
 2501|       |
 2502|   417k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 413k, False: 3.99k]
  ------------------
 2503|   413k|        {
 2504|   413k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   413k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 413k]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|   413k|            else
 2510|   413k|            {
 2511|   413k|                col++;
 2512|   413k|            }
 2513|       |
 2514|   413k|            i += UTF8CharLength(character);
 2515|   413k|        }
 2516|       |
 2517|  3.99k|        return col;
 2518|  3.99k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  3.99k|    {
 2522|  3.99k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  3.99k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  3.99k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   641k|    {
 3661|   641k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   641k|        switch (token.GetType())
 3665|   641k|        {
 3666|  88.2k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 88.2k, False: 553k]
  ------------------
 3667|  88.2k|                palette_index = PaletteIndex::Comment;
 3668|  88.2k|                break;
 3669|  8.76k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 8.76k, False: 633k]
  ------------------
 3670|  16.8k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 8.12k, False: 633k]
  ------------------
 3671|  16.8k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  16.8k|                break;
 3673|   139k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 139k, False: 501k]
  ------------------
 3674|   139k|                palette_index = PaletteIndex::OpCode;
 3675|   139k|                break;
 3676|  8.56k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 8.56k, False: 633k]
  ------------------
 3677|  35.4k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 26.9k, False: 614k]
  ------------------
 3678|  45.0k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 9.53k, False: 632k]
  ------------------
 3679|  45.0k|                palette_index = PaletteIndex::Register;
 3680|  45.0k|                break;
 3681|   234k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 234k, False: 407k]
  ------------------
 3682|   234k|                return;
 3683|   116k|            default:
  ------------------
  |  Branch (3683:13): [True: 116k, False: 524k]
  ------------------
 3684|   116k|                break;
 3685|   641k|        }
 3686|       |
 3687|   407k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   407k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   407k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  1.53M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 1.12M, False: 407k]
  ------------------
 3692|  1.12M|        {
 3693|  1.12M|            PHI_ASSERT(index < line.size());
 3694|  1.12M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  1.12M|        }
 3696|   407k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  3.99k|    {
 3700|  3.99k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  3.99k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 641k, False: 3.99k]
  ------------------
 3703|   641k|        {
 3704|   641k|            ColorizeToken(token);
 3705|   641k|        }
 3706|  3.99k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  3.99k|    {
 3710|  3.99k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  3.99k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  3.99k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  3.99k|        ClearBreakPoints();
 3716|  3.99k|        ClearErrorMarkers();
 3717|  3.99k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   413k|{
  135|   413k|    return UTF8CharLength(static_cast<char>(characater));
  136|   413k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|   826k|{
  105|   826k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 826k]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|   826k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 826k]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|   826k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 826k]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|   826k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 826k]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|   826k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 826k]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|   826k|    return 1_u8;
  131|   826k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  3.99k|    {
  175|  3.99k|        return m_DLXProgram;
  176|  3.99k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  3.99k|    {
  180|  3.99k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  3.99k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 156, False: 3.83k]
  ------------------
  183|    156|        {
  184|    156|            m_Processor.LoadProgram(m_DLXProgram);
  185|    156|        }
  186|  3.99k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  3.99k|    {
  200|  3.99k|        return m_CodeEditor;
  201|  3.99k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   157k|        {
  169|   157k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   157k|            switch (index.unsafe())
  172|   157k|            {
  173|  67.2k|                case 0:
  ------------------
  |  Branch (173:17): [True: 67.2k, False: 90.5k]
  ------------------
  174|  67.2k|                    return m_Arg1Type;
  175|       |
  176|  46.9k|                case 1:
  ------------------
  |  Branch (176:17): [True: 46.9k, False: 110k]
  ------------------
  177|  46.9k|                    return m_Arg2Type;
  178|       |
  179|  43.5k|                case 2:
  ------------------
  |  Branch (179:17): [True: 43.5k, False: 114k]
  ------------------
  180|  43.5k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 157k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   157k|#endif
  187|   157k|            }
  188|   157k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  42.1k|        {
  195|  42.1k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  42.1k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 41.9k, False: 166]
  ------------------
  199|  41.9k|            {
  200|  41.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  41.9k|            }
  202|  42.1k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 34.7k, False: 7.36k]
  ------------------
  203|  34.7k|            {
  204|  34.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  34.7k|            }
  206|  42.1k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 23.5k, False: 18.6k]
  ------------------
  207|  23.5k|            {
  208|  23.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  23.5k|            }
  210|       |
  211|  42.1k|            return number_of_argument_required;
  212|  42.1k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  42.1k|        {
  221|  42.1k|            return m_Executor;
  222|  42.1k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  17.4k|    {
   38|  17.4k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  17.4k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  17.4k|                                         static_cast<underlying_t>(rhs));
   42|  17.4k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  17.4k|    {
   55|  17.4k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  17.4k|        return static_cast<underlying_t>(type & test) != 0;
   58|  17.4k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|   126k|    {
  205|   126k|        switch (value)
  206|   126k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  33.3k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  33.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 33.3k, False: 93.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|  33.3k|        return #name;
  |  |  ------------------
  |  |   16|  33.3k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.23k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.23k|        return #name;
  |  |  ------------------
  |  |   17|  3.36k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.36k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.36k|        return #name;
  |  |  ------------------
  |  |   18|  5.04k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  5.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.04k, False: 121k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.04k|        return #name;
  |  |  ------------------
  |  |   19|  5.04k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.83k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.83k|        return #name;
  |  |  ------------------
  |  |   20|  2.09k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.09k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.09k|        return #name;
  |  |  ------------------
  |  |   21|  2.09k|                                                                                                   \
  |  |   22|  2.09k|    /* Sub */                                                                                      \
  |  |   23|  2.70k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.70k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.70k|        return #name;
  |  |  ------------------
  |  |   24|  2.70k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.18k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.18k|        return #name;
  |  |  ------------------
  |  |   25|  2.18k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.07k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.07k|        return #name;
  |  |  ------------------
  |  |   26|  2.19k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.19k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.19k|        return #name;
  |  |  ------------------
  |  |   27|  2.19k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    947|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 947, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    947|        return #name;
  |  |  ------------------
  |  |   28|    947|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 89, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     89|        return #name;
  |  |  ------------------
  |  |   29|     89|                                                                                                   \
  |  |   30|     89|    /* Multiplication */                                                                           \
  |  |   31|     89|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 76, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     76|        return #name;
  |  |  ------------------
  |  |   32|     76|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   33|    160|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    160|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 160, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    160|        return #name;
  |  |  ------------------
  |  |   34|  1.11k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.11k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.11k|        return #name;
  |  |  ------------------
  |  |   35|  2.80k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.80k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.80k|        return #name;
  |  |  ------------------
  |  |   36|  2.80k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |   37|    102|                                                                                                   \
  |  |   38|    102|    /* Division */                                                                                 \
  |  |   39|  1.73k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.73k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.73k|        return #name;
  |  |  ------------------
  |  |   40|  1.73k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    347|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 347, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    347|        return #name;
  |  |  ------------------
  |  |   41|    451|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    451|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 451, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    451|        return #name;
  |  |  ------------------
  |  |   42|    451|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    221|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 221, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    221|        return #name;
  |  |  ------------------
  |  |   43|    221|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   44|    456|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    456|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 456, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    456|        return #name;
  |  |  ------------------
  |  |   45|    456|                                                                                                   \
  |  |   46|    456|    /* Shift left (logical) */                                                                     \
  |  |   47|  1.47k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.47k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.47k|        return #name;
  |  |  ------------------
  |  |   48|  1.47k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.08k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.08k|        return #name;
  |  |  ------------------
  |  |   49|  1.08k|                                                                                                   \
  |  |   50|  1.08k|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.08k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 74, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     74|        return #name;
  |  |  ------------------
  |  |   52|    209|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 209, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    209|        return #name;
  |  |  ------------------
  |  |   53|    209|                                                                                                   \
  |  |   54|    209|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.39k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.39k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.39k|        return #name;
  |  |  ------------------
  |  |   56|  1.39k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    673|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 673, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    673|        return #name;
  |  |  ------------------
  |  |   57|    673|                                                                                                   \
  |  |   58|    673|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    844|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    844|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 844, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    844|        return #name;
  |  |  ------------------
  |  |   60|    844|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |   61|     97|                                                                                                   \
  |  |   62|     97|    /* Logic */                                                                                    \
  |  |   63|     97|                                                                                                   \
  |  |   64|     97|    /* And */                                                                                      \
  |  |   65|    800|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    800|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 800, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    800|        return #name;
  |  |  ------------------
  |  |   66|    800|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    166|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 166, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    166|        return #name;
  |  |  ------------------
  |  |   67|    166|                                                                                                   \
  |  |   68|    166|    /* Or */                                                                                       \
  |  |   69|    706|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    706|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 706, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    706|        return #name;
  |  |  ------------------
  |  |   70|    706|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 76, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     76|        return #name;
  |  |  ------------------
  |  |   71|     76|                                                                                                   \
  |  |   72|     76|    /* XOR */                                                                                      \
  |  |   73|    677|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    677|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 677, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    677|        return #name;
  |  |  ------------------
  |  |   74|    677|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|     98|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |   80|  2.15k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.15k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.15k|        return #name;
  |  |  ------------------
  |  |   81|  2.15k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   82|  1.61k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.61k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.61k|        return #name;
  |  |  ------------------
  |  |   83|  1.61k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    106|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 106, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    106|        return #name;
  |  |  ------------------
  |  |   84|    106|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |   85|     72|                                                                                                   \
  |  |   86|     72|    /* Greater than */                                                                             \
  |  |   87|     84|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |   88|    643|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    643|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 643, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    643|        return #name;
  |  |  ------------------
  |  |   89|    643|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |   90|  2.29k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.29k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.29k|        return #name;
  |  |  ------------------
  |  |   91|  2.29k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.90k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.90k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.90k|        return #name;
  |  |  ------------------
  |  |   92|  1.90k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    697|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 697, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    697|        return #name;
  |  |  ------------------
  |  |   93|    697|                                                                                                   \
  |  |   94|    697|    /* Less than or equal */                                                                       \
  |  |   95|  1.85k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.85k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.85k|        return #name;
  |  |  ------------------
  |  |   96|  3.36k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.36k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.36k|        return #name;
  |  |  ------------------
  |  |   97|  3.36k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    351|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 351, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    351|        return #name;
  |  |  ------------------
  |  |   98|    351|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    158|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 158, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    158|        return #name;
  |  |  ------------------
  |  |   99|  1.73k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.73k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.73k|        return #name;
  |  |  ------------------
  |  |  100|  1.73k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 201, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    201|        return #name;
  |  |  ------------------
  |  |  101|    201|                                                                                                   \
  |  |  102|    201|    /* Greater than or equal */                                                                    \
  |  |  103|    201|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |  104|     88|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  105|  1.22k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.22k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.22k|        return #name;
  |  |  ------------------
  |  |  106|  3.14k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  3.14k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.14k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.14k|        return #name;
  |  |  ------------------
  |  |  107|  3.14k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  108|  1.97k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.97k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.97k|        return #name;
  |  |  ------------------
  |  |  109|  1.97k|                                                                                                   \
  |  |  110|  1.97k|    /* Equal */                                                                                    \
  |  |  111|  1.97k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |  112|    427|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    427|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 427, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    427|        return #name;
  |  |  ------------------
  |  |  113|    427|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    424|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 424, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    424|        return #name;
  |  |  ------------------
  |  |  114|  2.04k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.04k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.04k|        return #name;
  |  |  ------------------
  |  |  115|  2.04k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  116|     66|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|     67|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  120|    131|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    131|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 131, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    131|        return #name;
  |  |  ------------------
  |  |  121|    996|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    996|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 996, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    996|        return #name;
  |  |  ------------------
  |  |  122|    996|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  123|     66|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  124|     91|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 91, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     91|        return #name;
  |  |  ------------------
  |  |  125|     91|                                                                                                   \
  |  |  126|     91|    /* Conditional branching */                                                                    \
  |  |  127|     91|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|  1.00k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.00k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.00k|        return #name;
  |  |  ------------------
  |  |  129|  1.02k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.02k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.02k|        return #name;
  |  |  ------------------
  |  |  130|  4.05k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.05k, False: 122k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.05k|        return #name;
  |  |  ------------------
  |  |  131|  4.05k|                                                                                                   \
  |  |  132|  4.05k|    /* Unconditional branching */                                                                  \
  |  |  133|  4.05k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|     23|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 23, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     23|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     83|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  136|     83|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|     71|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  140|    752|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    752|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 752, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    752|        return #name;
  |  |  ------------------
  |  |  141|    752|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  142|    962|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    962|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 962, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    962|        return #name;
  |  |  ------------------
  |  |  143|    962|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  144|     82|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 82, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     82|        return #name;
  |  |  ------------------
  |  |  145|     82|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|    844|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    844|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 844, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    844|        return #name;
  |  |  ------------------
  |  |  148|    844|                                                                                                   \
  |  |  149|    844|    /* Storing data */                                                                             \
  |  |  150|    844|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  151|  1.66k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.66k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.66k|        return #name;
  |  |  ------------------
  |  |  152|  2.54k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  2.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.54k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.54k|        return #name;
  |  |  ------------------
  |  |  153|  2.54k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.93k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.93k|        return #name;
  |  |  ------------------
  |  |  154|  1.93k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|     98|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |  156|     98|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  157|     96|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 96, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     96|        return #name;
  |  |  ------------------
  |  |  158|     96|                                                                                                   \
  |  |  159|     96|    /* Moving data */                                                                              \
  |  |  160|  4.51k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.51k, False: 122k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.51k|        return #name;
  |  |  ------------------
  |  |  161|  4.51k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 128, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    128|        return #name;
  |  |  ------------------
  |  |  162|    128|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    125|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 125, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    125|        return #name;
  |  |  ------------------
  |  |  163|    125|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  164|     90|                                                                                                   \
  |  |  165|     90|    /* Converting data */                                                                          \
  |  |  166|    202|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 202, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    202|        return #name;
  |  |  ------------------
  |  |  167|    840|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    840|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 840, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    840|        return #name;
  |  |  ------------------
  |  |  168|    840|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    718|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 718, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    718|        return #name;
  |  |  ------------------
  |  |  169|    718|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  170|     85|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |  171|  1.27k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.27k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.27k|        return #name;
  |  |  ------------------
  |  |  172|  1.27k|                                                                                                   \
  |  |  173|  1.27k|    /* Other */                                                                                    \
  |  |  174|  1.27k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    186|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 186, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|    186|        return #name;
  |  |  ------------------
  |  |  175|    186|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |  176|    631|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|    631|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 631, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  209|    631|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 126k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   126k|        }
  218|   126k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  24.5k|    {
   32|  24.5k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 1.70k, False: 22.8k]
  ------------------
   33|  1.70k|        {
   34|  1.70k|            return true;
   35|  1.70k|        }
   36|       |
   37|  22.8k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 66, False: 22.8k]
  ------------------
   38|     66|        {
   39|     66|            return true;
   40|     66|        }
   41|       |
   42|  22.8k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 636, False: 22.1k]
  ------------------
   43|    636|        {
   44|    636|            return true;
   45|    636|        }
   46|       |
   47|  22.1k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 22.1k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  22.1k|        return false;
   53|  22.1k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  22.1k|    {
   57|  22.1k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 22.1k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  22.1k|        const char first_char = token.at(0);
   63|       |
   64|  22.1k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 7.53k, False: 14.6k]
  ------------------
   65|  7.53k|        {
   66|  7.53k|            return phi::is_alpha(first_char);
   67|  7.53k|        }
   68|       |
   69|  14.6k|        phi::boolean just_under_scores = (first_char == '_');
   70|  14.6k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 2.11k, False: 12.5k]
  |  Branch (70:15): [True: 12.3k, False: 2.25k]
  |  Branch (70:44): [True: 144, False: 2.11k]
  ------------------
   71|  2.11k|        {
   72|  2.11k|            return false;
   73|  2.11k|        }
   74|       |
   75|  54.6k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 45.6k, False: 8.96k]
  ------------------
   76|  45.6k|        {
   77|  45.6k|            const char c{token.at(index)};
   78|       |
   79|  45.6k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 21.2k, False: 24.4k]
  ------------------
   80|  21.2k|            {
   81|  21.2k|                just_under_scores = false;
   82|  21.2k|            }
   83|  24.4k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 20.8k, False: 3.57k]
  ------------------
   84|  20.8k|            {
   85|  20.8k|                continue;
   86|  20.8k|            }
   87|  3.57k|            else
   88|  3.57k|            {
   89|  3.57k|                return false;
   90|  3.57k|            }
   91|  45.6k|        }
   92|       |
   93|  8.96k|        return !just_under_scores;
   94|  12.5k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   266k|    {
  101|   266k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 266k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   266k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 20.2k, False: 245k]
  ------------------
  107|  20.2k|        {
  108|  20.2k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 11.7k, False: 8.53k]
  ------------------
  109|  11.7k|            {
  110|  11.7k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  11.7k|            }
  112|       |
  113|  8.53k|            return {};
  114|  20.2k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   245k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 1.91k, False: 243k]
  ------------------
  118|  1.91k|        {
  119|  1.91k|            return {};
  120|  1.91k|        }
  121|       |
  122|   243k|        std::int32_t number{0};
  123|   243k|        phi::boolean is_negative{false};
  124|   243k|        phi::boolean starts_with_zero{false};
  125|   243k|        phi::boolean parsing_binary{false};
  126|   243k|        phi::boolean parsing_octal{false};
  127|   243k|        phi::boolean parsing_hexadecimal{false};
  128|   243k|        phi::boolean parsed_something{false};
  129|   243k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   266k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 262k, False: 4.18k]
  ------------------
  134|   262k|        {
  135|   262k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   262k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 243k, False: 18.8k]
  ------------------
  139|   243k|            {
  140|   243k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 170, False: 243k]
  ------------------
  141|    170|                {
  142|    170|                    continue;
  143|    170|                }
  144|       |
  145|   243k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 2.93k, False: 240k]
  ------------------
  146|  2.93k|                {
  147|  2.93k|                    is_negative = true;
  148|  2.93k|                    continue;
  149|  2.93k|                }
  150|       |
  151|   240k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 10.0k, False: 230k]
  ------------------
  152|  10.0k|                {
  153|  10.0k|                    starts_with_zero = true;
  154|  10.0k|                    continue;
  155|  10.0k|                }
  156|       |
  157|   230k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 69, False: 230k]
  ------------------
  158|     69|                {
  159|     69|                    return {};
  160|     69|                }
  161|   230k|            }
  162|       |
  163|       |            // Second character
  164|   249k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 13.5k, False: 236k]
  ------------------
  165|  13.5k|            {
  166|  13.5k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 10.0k, False: 3.59k]
  ------------------
  167|  10.0k|                {
  168|       |                    // Binary
  169|  10.0k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 276, False: 9.72k]
  |  Branch (169:37): [True: 150, False: 9.57k]
  ------------------
  170|    426|                    {
  171|    426|                        parsing_binary = true;
  172|    426|                        continue;
  173|    426|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  9.57k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.35k, False: 7.22k]
  |  Branch (176:37): [True: 349, False: 6.87k]
  ------------------
  177|  2.69k|                    {
  178|  2.69k|                        parsing_hexadecimal = true;
  179|  2.69k|                        continue;
  180|  2.69k|                    }
  181|       |
  182|       |                    // Octal
  183|  6.87k|                    parsing_octal = true;
  184|  6.87k|                }
  185|  13.5k|            }
  186|       |
  187|       |            // Handle seperators
  188|   246k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 140, False: 246k]
  ------------------
  189|    140|            {
  190|    140|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 68, False: 72]
  ------------------
  191|     68|                {
  192|     68|                    return {};
  193|     68|                }
  194|       |
  195|     72|                parsed_separator = true;
  196|     72|                continue;
  197|    140|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   246k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 2.97k, False: 243k]
  |  Branch (200:32): [True: 0, False: 2.97k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   246k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 243k, False: 2.97k]
  |  Branch (205:17): [True: 0, False: 246k]
  |  Branch (205:33): [True: 0, False: 243k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   246k|            parsed_separator = false;
  212|   246k|            parsed_something = true;
  213|       |
  214|   246k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 294, False: 246k]
  ------------------
  215|    294|            {
  216|    294|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 162, False: 132]
  ------------------
  217|    162|                {
  218|    162|                    return {};
  219|    162|                }
  220|       |
  221|    132|                number <<= 1;
  222|    132|                number |= (c - '0');
  223|    132|            }
  224|   246k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 8.43k, False: 237k]
  ------------------
  225|  8.43k|            {
  226|  8.43k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 6.07k, False: 2.35k]
  ------------------
  227|  6.07k|                {
  228|  6.07k|                    return {};
  229|  6.07k|                }
  230|       |
  231|  2.35k|                number <<= 3;
  232|  2.35k|                number |= (c - '0');
  233|  2.35k|            }
  234|   237k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 2.79k, False: 234k]
  ------------------
  235|  2.79k|            {
  236|  2.79k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 443, False: 2.35k]
  ------------------
  237|    443|                {
  238|    443|                    return {};
  239|    443|                }
  240|       |
  241|  2.35k|                number <<= 4;
  242|  2.35k|                number |= phi::hex_digit_value(c).unsafe();
  243|  2.35k|            }
  244|   234k|            else
  245|   234k|            {
  246|   234k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 230k, False: 3.95k]
  ------------------
  247|   230k|                {
  248|   230k|                    return {};
  249|   230k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  3.95k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 3.18k, False: 769]
  |  Branch (252:36): [True: 2.00k, False: 1.17k]
  ------------------
  253|  2.00k|                {
  254|  2.00k|                    return {};
  255|  2.00k|                }
  256|       |
  257|  1.94k|                number *= 10;
  258|  1.94k|                number += (c - '0');
  259|  1.94k|            }
  260|   246k|        }
  261|       |
  262|  4.18k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 3.94k, False: 240]
  ------------------
  263|  3.94k|        {
  264|       |            // Check for over/underflow
  265|  3.94k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 680, False: 3.26k]
  |  Branch (265:32): [True: 0, False: 680]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  3.94k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 3.26k, False: 680]
  |  Branch (270:17): [True: 0, False: 3.94k]
  |  Branch (270:33): [True: 0, False: 3.26k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  3.94k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 680, False: 3.26k]
  ------------------
  277|    680|            {
  278|    680|                return static_cast<std::int16_t>(-number);
  279|    680|            }
  280|       |
  281|  3.26k|            return static_cast<std::int16_t>(number);
  282|  3.94k|        }
  283|       |
  284|    240|        return {};
  285|  4.18k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  27.7k|    {
   96|  27.7k|        switch (value)
   97|  27.7k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  6.25k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.25k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.25k, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.25k|        return #name;
  |  |  ------------------
  |  |   14|  10.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  10.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10.5k, False: 17.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  10.5k|        return #name;
  |  |  ------------------
  |  |   15|  10.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     92|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 92, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     92|        return #name;
  |  |  ------------------
  |  |   16|    953|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|    953|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 953, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    953|        return #name;
  |  |  ------------------
  |  |   17|    953|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 27.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   18|     77|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     77|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 77, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     77|        return #name;
  |  |  ------------------
  |  |   19|    194|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    194|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 194, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    194|        return #name;
  |  |  ------------------
  |  |   20|    194|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     32|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 32, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     32|        return #name;
  |  |  ------------------
  |  |   21|  1.30k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.30k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.30k, False: 26.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.30k|        return #name;
  |  |  ------------------
  |  |   22|  1.30k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    357|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 357, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    357|        return #name;
  |  |  ------------------
  |  |   23|    357|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    127|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 127, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    127|        return #name;
  |  |  ------------------
  |  |   24|    127|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|     32|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 32, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     32|        return #name;
  |  |  ------------------
  |  |   25|     32|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   26|     12|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 27.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   27|     46|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     46|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 46, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     46|        return #name;
  |  |  ------------------
  |  |   28|     46|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|     40|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 40, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     40|        return #name;
  |  |  ------------------
  |  |   29|    146|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    146|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 146, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    146|        return #name;
  |  |  ------------------
  |  |   30|  1.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.63k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.63k, False: 26.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.63k|        return #name;
  |  |  ------------------
  |  |   31|  1.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 57, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     57|        return #name;
  |  |  ------------------
  |  |   32|    119|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    119|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 119, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    119|        return #name;
  |  |  ------------------
  |  |   33|    119|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|     69|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 69, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     69|        return #name;
  |  |  ------------------
  |  |   34|    158|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    158|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 158, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    158|        return #name;
  |  |  ------------------
  |  |   35|    775|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|    775|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 775, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    775|        return #name;
  |  |  ------------------
  |  |   36|    775|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    209|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 209, False: 27.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    209|        return #name;
  |  |  ------------------
  |  |   37|    922|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|    922|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 922, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    922|        return #name;
  |  |  ------------------
  |  |   38|    922|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    108|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 108, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    108|        return #name;
  |  |  ------------------
  |  |   39|    108|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 27.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   40|  1.30k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.30k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.30k, False: 26.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.30k|        return #name;
  |  |  ------------------
  |  |   41|  1.30k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|    162|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 162, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    162|        return #name;
  |  |  ------------------
  |  |   42|    162|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     82|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 82, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     82|        return #name;
  |  |  ------------------
  |  |   43|     85|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|     85|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 85, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     85|        return #name;
  |  |  ------------------
  |  |   44|  1.76k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  1.76k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.76k, False: 25.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.76k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 27.7k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  27.7k|        }
  109|  27.7k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  8.57k|    {
  131|  8.57k|        switch (value)
  132|  8.57k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    730|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|    730|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 730, False: 7.84k]
  |  |  |  |  ------------------
  |  |  |  |  135|    730|        return #name;
  |  |  ------------------
  |  |   48|  1.40k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.40k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.40k, False: 7.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.40k|        return #name;
  |  |  ------------------
  |  |   49|  1.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.66k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.66k, False: 6.90k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.66k|        return #name;
  |  |  ------------------
  |  |   50|  1.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|     44|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 44, False: 8.52k]
  |  |  |  |  ------------------
  |  |  |  |  135|     44|        return #name;
  |  |  ------------------
  |  |   51|     44|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   52|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 8.56k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   53|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   54|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 8.56k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   55|    123|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    123|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 123, False: 8.44k]
  |  |  |  |  ------------------
  |  |  |  |  135|    123|        return #name;
  |  |  ------------------
  |  |   56|    123|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19, False: 8.55k]
  |  |  |  |  ------------------
  |  |  |  |  135|     19|        return #name;
  |  |  ------------------
  |  |   57|  1.50k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.50k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.50k, False: 7.07k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.50k|        return #name;
  |  |  ------------------
  |  |   58|  1.50k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 8.56k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|    184|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|    184|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 184, False: 8.38k]
  |  |  |  |  ------------------
  |  |  |  |  135|    184|        return #name;
  |  |  ------------------
  |  |   60|    184|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 8.56k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   61|    108|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    108|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 108, False: 8.46k]
  |  |  |  |  ------------------
  |  |  |  |  135|    108|        return #name;
  |  |  ------------------
  |  |   62|    108|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 8.56k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   63|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 39, False: 8.53k]
  |  |  |  |  ------------------
  |  |  |  |  135|     39|        return #name;
  |  |  ------------------
  |  |   64|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 8.55k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   67|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 8.56k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   68|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|     64|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     64|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 64, False: 8.50k]
  |  |  |  |  ------------------
  |  |  |  |  135|     64|        return #name;
  |  |  ------------------
  |  |   71|     64|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 17, False: 8.55k]
  |  |  |  |  ------------------
  |  |  |  |  135|     17|        return #name;
  |  |  ------------------
  |  |   75|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 8.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 8.54k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   77|  2.44k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  2.44k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.44k, False: 6.12k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.44k|        return #name;
  |  |  ------------------
  |  |   78|  2.44k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    147|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 147, False: 8.42k]
  |  |  |  |  ------------------
  |  |  |  |  135|    147|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 8.57k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  8.57k|        }
  144|  8.57k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  11.6k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  11.6k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 195k, False: 0]
  ------------------
   64|   195k|            {
   65|   195k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 11.6k, False: 183k]
  ------------------
   66|  11.6k|                {
   67|  11.6k|                    return &token;
   68|  11.6k|                }
   69|   195k|            }
   70|       |
   71|      0|            return nullptr;
   72|  11.6k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   237k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   237k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   237k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   354k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   354k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   354k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  49.4k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  49.4k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  49.4k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  42.1k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  8.37k|    {
   25|  8.37k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  8.37k|        switch (argument_number.unsafe())
   28|  8.37k|        {
   29|  6.87k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 6.87k, False: 1.49k]
  ------------------
   30|  6.87k|                m_Arg1 = argument;
   31|  6.87k|                break;
   32|  1.41k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.41k, False: 6.95k]
  ------------------
   33|  1.41k|                m_Arg2 = argument;
   34|  1.41k|                break;
   35|     79|            case 2u:
  ------------------
  |  Branch (35:13): [True: 79, False: 8.29k]
  ------------------
   36|     79|                m_Arg3 = argument;
   37|     79|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 8.37k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  8.37k|#endif
   42|  8.37k|        }
   43|  8.37k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   134k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  4.23k|    {
  171|  4.23k|        InstructionArgument arg;
  172|  4.23k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  4.23k|        arg.register_int.register_id = id;
  174|  4.23k|        return arg;
  175|  4.23k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|     89|    {
  179|     89|        InstructionArgument arg;
  180|     89|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|     89|        arg.register_float.register_id = id;
  182|     89|        return arg;
  183|     89|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.04k|    {
  187|  2.04k|        InstructionArgument arg;
  188|  2.04k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.04k|        arg.immediate_value.signed_value = value;
  190|  2.04k|        return arg;
  191|  2.04k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  2.00k|    {
  205|  2.00k|        InstructionArgument arg;
  206|  2.00k|        arg.m_Type           = ArgumentType::Label;
  207|  2.00k|        arg.label.label_name = label_name;
  208|  2.00k|        return arg;
  209|  2.00k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  42.1k|    {
  453|  42.1k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  42.1k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   226k|    {
   24|   226k|        switch (token.length())
   25|   226k|        {
   26|       |            // 1 character OpCodes
   27|  16.1k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 16.1k, False: 210k]
  ------------------
   28|  16.1k|                char c1 = token[0];
   29|  16.1k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 2.39k, False: 13.7k]
  ------------------
   30|  2.39k|                {
   31|  2.39k|                    return OpCode::J;
   32|  2.39k|                }
   33|  13.7k|                break;
   34|  16.1k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  32.1k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 32.1k, False: 194k]
  ------------------
   38|  32.1k|                char c1 = token[0];
   39|  32.1k|                char c2 = token[1];
   40|       |
   41|  32.1k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 13.1k, False: 18.9k]
  ------------------
   42|  32.1k|                {
   43|     99|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 99, False: 32.0k]
  ------------------
   44|    400|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 301, False: 31.8k]
  ------------------
   45|    400|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 133, False: 267]
  ------------------
   46|    133|                        {
   47|    133|                            return OpCode::JR;
   48|    133|                        }
   49|    267|                        break;
   50|       |
   51|  2.93k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 2.93k, False: 29.2k]
  ------------------
   52|  4.12k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 1.18k, False: 30.9k]
  ------------------
   53|  4.12k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 263, False: 3.85k]
  ------------------
   54|  4.12k|                        {
   55|    752|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 752, False: 3.36k]
  ------------------
   56|    948|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 196, False: 3.92k]
  ------------------
   57|    948|                                return OpCode::LB;
   58|    844|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 844, False: 3.27k]
  ------------------
   59|    942|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 98, False: 4.02k]
  ------------------
   60|    942|                                return OpCode::LD;
   61|     66|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 66, False: 4.05k]
  ------------------
   62|    132|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 66, False: 4.05k]
  ------------------
   63|    132|                                return OpCode::LF;
   64|    962|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 962, False: 3.15k]
  ------------------
   65|  1.02k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 67, False: 4.05k]
  ------------------
   66|  1.02k|                                return OpCode::LH;
   67|     82|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 82, False: 4.03k]
  ------------------
   68|    807|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 725, False: 3.39k]
  ------------------
   69|    807|                                return OpCode::LW;
   70|  4.12k|                        }
   71|    263|                        break;
   72|  4.55k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 4.55k, False: 27.5k]
  ------------------
   73|  4.69k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 143, False: 32.0k]
  ------------------
   74|  4.69k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.30k, False: 3.38k]
  ------------------
   75|  1.30k|                        {
   76|  1.30k|                            return OpCode::OR;
   77|  1.30k|                        }
   78|  3.38k|                        break;
   79|  5.70k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 5.70k, False: 26.4k]
  ------------------
   80|  9.77k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 4.07k, False: 28.0k]
  ------------------
   81|  9.77k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 5.33k, False: 4.44k]
  ------------------
   82|  9.77k|                        {
   83|     90|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 90, False: 9.68k]
  ------------------
   84|    156|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 66, False: 9.71k]
  ------------------
   85|    156|                                return OpCode::SB;
   86|     97|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 97, False: 9.68k]
  ------------------
   87|    428|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 331, False: 9.44k]
  ------------------
   88|    428|                                return OpCode::SD;
   89|     67|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 67, False: 9.71k]
  ------------------
   90|  1.02k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 962, False: 8.81k]
  ------------------
   91|  1.02k|                                return OpCode::SF;
   92|  2.47k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.47k, False: 7.30k]
  ------------------
   93|  2.57k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 95, False: 9.68k]
  ------------------
   94|  2.57k|                                return OpCode::SH;
   95|    194|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 194, False: 9.58k]
  ------------------
   96|    264|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 70, False: 9.70k]
  ------------------
   97|    264|                                return OpCode::SW;
   98|  9.77k|                        }
   99|  5.33k|                        break;
  100|  32.1k|                }
  101|  22.4k|                break;
  102|  32.1k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  81.3k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 81.3k, False: 145k]
  ------------------
  106|  81.3k|                char c1 = token[0];
  107|  81.3k|                char c2 = token[1];
  108|  81.3k|                char c3 = token[2];
  109|       |
  110|  81.3k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 5.99k, False: 75.3k]
  ------------------
  111|  81.3k|                {
  112|  31.4k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 31.4k, False: 49.9k]
  ------------------
  113|  34.2k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 2.82k, False: 78.4k]
  ------------------
  114|  34.2k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 30.6k, False: 3.60k]
  |  Branch (114:29): [True: 30.5k, False: 3.67k]
  |  Branch (114:45): [True: 30.5k, False: 68]
  ------------------
  115|  30.5k|                        {
  116|  30.5k|                            return OpCode::ADD;
  117|  30.5k|                        }
  118|  3.67k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 3.26k, False: 409]
  |  Branch (118:34): [True: 1.85k, False: 1.82k]
  |  Branch (118:50): [True: 1.85k, False: 1.41k]
  ------------------
  119|  1.85k|                        {
  120|  1.85k|                            return OpCode::AND;
  121|  1.85k|                        }
  122|  1.82k|                        break;
  123|       |
  124|  1.94k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.94k, False: 79.3k]
  ------------------
  125|  2.01k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 75, False: 81.2k]
  ------------------
  126|  2.01k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 1.88k, False: 129]
  |  Branch (126:29): [True: 1.82k, False: 195]
  |  Branch (126:45): [True: 1.82k, False: 66]
  ------------------
  127|  1.82k|                        {
  128|  1.82k|                            return OpCode::DIV;
  129|  1.82k|                        }
  130|    195|                        break;
  131|       |
  132|    411|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 411, False: 80.9k]
  ------------------
  133|    595|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 184, False: 81.1k]
  ------------------
  134|    595|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 471, False: 124]
  ------------------
  135|    471|                        {
  136|    471|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 132, False: 339]
  ------------------
  137|    132|                            {
  138|    132|                                return OpCode::EQD;
  139|    132|                            }
  140|    339|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 189, False: 150]
  ------------------
  141|    189|                            {
  142|    189|                                return OpCode::EQF;
  143|    189|                            }
  144|    471|                        }
  145|    274|                        break;
  146|       |
  147|  6.76k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 6.76k, False: 74.5k]
  ------------------
  148|  7.67k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 904, False: 80.4k]
  ------------------
  149|  7.67k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 2.88k, False: 4.78k]
  ------------------
  150|  2.88k|                        {
  151|  2.88k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 2.03k, False: 851]
  ------------------
  152|  2.03k|                            {
  153|  2.03k|                                return OpCode::GED;
  154|  2.03k|                            }
  155|    851|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 785, False: 66]
  ------------------
  156|    785|                            {
  157|    785|                                return OpCode::GEF;
  158|    785|                            }
  159|  2.88k|                        }
  160|  4.78k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 4.71k, False: 72]
  ------------------
  161|  4.71k|                        {
  162|  4.71k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.65k, False: 3.05k]
  ------------------
  163|  1.65k|                            {
  164|  1.65k|                                return OpCode::GTD;
  165|  1.65k|                            }
  166|  3.05k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.97k, False: 1.08k]
  ------------------
  167|  1.97k|                            {
  168|  1.97k|                                return OpCode::GTF;
  169|  1.97k|                            }
  170|  3.05k|                        }
  171|  1.22k|                        break;
  172|       |
  173|  1.22k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 89, False: 81.2k]
  ------------------
  174|    429|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 340, False: 80.9k]
  ------------------
  175|    429|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 357, False: 72]
  |  Branch (175:29): [True: 149, False: 280]
  |  Branch (175:45): [True: 149, False: 208]
  ------------------
  176|    149|                        {
  177|    149|                            return OpCode::JAL;
  178|    149|                        }
  179|    280|                        break;
  180|       |
  181|  2.55k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 2.55k, False: 78.7k]
  ------------------
  182|  4.80k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 2.24k, False: 79.0k]
  ------------------
  183|  4.80k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 168, False: 4.63k]
  ------------------
  184|  4.80k|                        {
  185|     66|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 66, False: 4.73k]
  ------------------
  186|  1.51k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.44k, False: 3.35k]
  ------------------
  187|  1.51k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 163, False: 1.34k]
  ------------------
  188|    163|                                {
  189|    163|                                    return OpCode::LBU;
  190|    163|                                }
  191|  1.34k|                                break;
  192|       |
  193|  1.93k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.93k, False: 2.86k]
  ------------------
  194|  2.12k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 184, False: 4.61k]
  ------------------
  195|  2.12k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 267, False: 1.85k]
  ------------------
  196|    267|                                {
  197|    267|                                    return OpCode::LED;
  198|    267|                                }
  199|  1.85k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.78k, False: 66]
  ------------------
  200|  1.78k|                                {
  201|  1.78k|                                    return OpCode::LEF;
  202|  1.78k|                                }
  203|     66|                                break;
  204|       |
  205|    197|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 197, False: 4.60k]
  ------------------
  206|    342|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 145, False: 4.65k]
  ------------------
  207|    342|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 144, False: 198]
  ------------------
  208|    144|                                {
  209|    144|                                    return OpCode::LHI;
  210|    144|                                }
  211|    198|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 132, False: 66]
  ------------------
  212|    132|                                {
  213|    132|                                    return OpCode::LHU;
  214|    132|                                }
  215|     66|                                break;
  216|       |
  217|    191|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 191, False: 4.60k]
  ------------------
  218|    392|                            case 't':
  ------------------
  |  Branch (218:29): [True: 201, False: 4.59k]
  ------------------
  219|    392|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 138, False: 254]
  ------------------
  220|    138|                                {
  221|    138|                                    return OpCode::LTD;
  222|    138|                                }
  223|    254|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 172, False: 82]
  ------------------
  224|    172|                                {
  225|    172|                                    return OpCode::LTF;
  226|    172|                                }
  227|     82|                                break;
  228|       |
  229|     82|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 78, False: 4.72k]
  ------------------
  230|    266|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 188, False: 4.61k]
  ------------------
  231|    266|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 132, False: 134]
  ------------------
  232|    132|                                {
  233|    132|                                    return OpCode::LWU;
  234|    132|                                }
  235|    134|                                break;
  236|  4.80k|                        }
  237|  1.86k|                        break;
  238|       |
  239|  1.86k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 1.54k, False: 79.7k]
  ------------------
  240|  4.40k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 2.86k, False: 78.4k]
  ------------------
  241|  4.40k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 995, False: 3.41k]
  ------------------
  242|    995|                        {
  243|    995|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 157, False: 838]
  ------------------
  244|    157|                            {
  245|    157|                                return OpCode::NED;
  246|    157|                            }
  247|    838|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 132, False: 706]
  ------------------
  248|    132|                            {
  249|    132|                                return OpCode::NEF;
  250|    132|                            }
  251|    995|                        }
  252|  3.41k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 2.09k, False: 1.32k]
  |  Branch (252:34): [True: 697, False: 2.71k]
  |  Branch (252:50): [True: 697, False: 1.39k]
  ------------------
  253|    697|                        {
  254|    697|                            return OpCode::NOP;
  255|    697|                        }
  256|       |
  257|  3.42k|                        break;
  258|       |
  259|  3.42k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 250, False: 81.0k]
  ------------------
  260|    334|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 84, False: 81.2k]
  ------------------
  261|    334|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 226, False: 108]
  |  Branch (261:29): [True: 142, False: 192]
  |  Branch (261:45): [True: 142, False: 84]
  ------------------
  262|    142|                        {
  263|    142|                            return OpCode::ORI;
  264|    142|                        }
  265|    192|                        break;
  266|       |
  267|  17.9k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 17.9k, False: 63.3k]
  ------------------
  268|  18.6k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 715, False: 80.5k]
  ------------------
  269|  18.6k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 198, False: 18.4k]
  ------------------
  270|  18.6k|                        {
  271|  1.66k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.66k, False: 17.0k]
  ------------------
  272|  1.81k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 151, False: 18.5k]
  ------------------
  273|  1.81k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.73k, False: 85]
  ------------------
  274|  1.73k|                                {
  275|  1.73k|                                    return OpCode::SBU;
  276|  1.73k|                                }
  277|     85|                                break;
  278|       |
  279|    102|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 102, False: 18.5k]
  ------------------
  280|  2.16k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 2.06k, False: 16.6k]
  ------------------
  281|  2.16k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 1.56k, False: 594]
  ------------------
  282|  1.56k|                                {
  283|  1.56k|                                    return OpCode::SEQ;
  284|  1.56k|                                }
  285|    594|                                break;
  286|       |
  287|    594|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 173, False: 18.5k]
  ------------------
  288|    441|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 268, False: 18.4k]
  ------------------
  289|    441|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 212, False: 229]
  ------------------
  290|    212|                                {
  291|    212|                                    return OpCode::SGE;
  292|    212|                                }
  293|    229|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 154, False: 75]
  ------------------
  294|    154|                                {
  295|    154|                                    return OpCode::SGT;
  296|    154|                                }
  297|     75|                                break;
  298|       |
  299|  1.94k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.94k, False: 16.7k]
  ------------------
  300|  2.07k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 129, False: 18.5k]
  ------------------
  301|  2.07k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.00k, False: 66]
  ------------------
  302|  2.00k|                                {
  303|  2.00k|                                    return OpCode::SHU;
  304|  2.00k|                                }
  305|     66|                                break;
  306|       |
  307|  4.87k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 4.87k, False: 13.8k]
  ------------------
  308|  5.17k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 300, False: 18.3k]
  ------------------
  309|  5.17k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 68, False: 5.10k]
  ------------------
  310|  5.17k|                                {
  311|  1.39k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.39k, False: 3.77k]
  ------------------
  312|  1.46k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 69, False: 5.10k]
  ------------------
  313|  1.46k|                                        return OpCode::SLA;
  314|       |
  315|  1.85k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.85k, False: 3.32k]
  ------------------
  316|  1.92k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 72, False: 5.10k]
  ------------------
  317|  1.92k|                                        return OpCode::SLE;
  318|       |
  319|  1.47k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 1.47k, False: 3.69k]
  ------------------
  320|  1.54k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 70, False: 5.10k]
  ------------------
  321|  1.54k|                                        return OpCode::SLL;
  322|       |
  323|     98|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 98, False: 5.07k]
  ------------------
  324|    167|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 69, False: 5.10k]
  ------------------
  325|    167|                                        return OpCode::SLT;
  326|  5.17k|                                }
  327|     68|                                break;
  328|       |
  329|     69|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 69, False: 18.6k]
  ------------------
  330|    231|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 162, False: 18.5k]
  ------------------
  331|    231|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 164, False: 67]
  ------------------
  332|    164|                                {
  333|    164|                                    return OpCode::SNE;
  334|    164|                                }
  335|     67|                                break;
  336|       |
  337|  1.37k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.37k, False: 17.3k]
  ------------------
  338|  3.64k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 2.26k, False: 16.4k]
  ------------------
  339|  3.64k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 954, False: 2.68k]
  ------------------
  340|    954|                                {
  341|    954|                                    return OpCode::SRA;
  342|    954|                                }
  343|  2.68k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 567, False: 2.11k]
  ------------------
  344|    567|                                {
  345|    567|                                    return OpCode::SRL;
  346|    567|                                }
  347|  2.11k|                                break;
  348|       |
  349|  2.17k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 2.17k, False: 16.5k]
  ------------------
  350|  2.42k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 244, False: 18.4k]
  ------------------
  351|  2.42k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 2.33k, False: 91]
  ------------------
  352|  2.33k|                                {
  353|  2.33k|                                    return OpCode::SUB;
  354|  2.33k|                                }
  355|     91|                                break;
  356|       |
  357|    213|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 213, False: 18.4k]
  ------------------
  358|    518|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 305, False: 18.3k]
  ------------------
  359|    518|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 220, False: 298]
  ------------------
  360|    220|                                {
  361|    220|                                    return OpCode::SWU;
  362|    220|                                }
  363|    298|                                break;
  364|  18.6k|                        }
  365|       |
  366|  3.94k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 281, False: 81.0k]
  ------------------
  367|  5.82k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 1.88k, False: 79.4k]
  ------------------
  368|  5.82k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 422, False: 5.40k]
  |  Branch (368:29): [True: 354, False: 5.46k]
  |  Branch (368:45): [True: 354, False: 68]
  ------------------
  369|    354|                        {
  370|    354|                            return OpCode::XOR;
  371|    354|                        }
  372|  5.46k|                        break;
  373|  81.3k|                }
  374|  20.7k|                break;
  375|  81.3k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  61.6k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 61.6k, False: 165k]
  ------------------
  379|  61.6k|                char c1 = token[0];
  380|  61.6k|                char c2 = token[1];
  381|  61.6k|                char c3 = token[2];
  382|  61.6k|                char c4 = token[3];
  383|       |
  384|  61.6k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 4.60k, False: 57.0k]
  ------------------
  385|  61.6k|                {
  386|  9.86k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 9.86k, False: 51.8k]
  ------------------
  387|  10.4k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 561, False: 61.1k]
  ------------------
  388|  10.4k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 67, False: 10.3k]
  ------------------
  389|  10.4k|                        {
  390|  9.80k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 9.80k, False: 616]
  ------------------
  391|  9.96k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 158, False: 10.2k]
  ------------------
  392|  9.96k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 9.50k, False: 460]
  ------------------
  393|  9.50k|                                {
  394|  9.50k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 66, False: 9.43k]
  ------------------
  395|  9.50k|                                    {
  396|  1.88k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.88k, False: 7.61k]
  ------------------
  397|  1.95k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 9.43k]
  ------------------
  398|  1.95k|                                            return OpCode::ADDD;
  399|       |
  400|  1.82k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 1.82k, False: 7.67k]
  ------------------
  401|  1.89k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 66, False: 9.43k]
  ------------------
  402|  1.89k|                                            return OpCode::ADDF;
  403|       |
  404|  2.08k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 2.08k, False: 7.42k]
  ------------------
  405|  2.14k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 9.43k]
  ------------------
  406|  2.14k|                                            return OpCode::ADDI;
  407|       |
  408|  3.31k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.31k, False: 6.19k]
  ------------------
  409|  3.44k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 130, False: 9.37k]
  ------------------
  410|  3.44k|                                            return OpCode::ADDU;
  411|  9.50k|                                    }
  412|  9.50k|                                }
  413|    526|                                break;
  414|       |
  415|    526|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 198, False: 10.2k]
  ------------------
  416|    391|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 193, False: 10.2k]
  ------------------
  417|    391|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 302, False: 89]
  |  Branch (417:37): [True: 230, False: 161]
  |  Branch (417:53): [True: 230, False: 72]
  ------------------
  418|    230|                                {
  419|    230|                                    return OpCode::ANDI;
  420|    230|                                }
  421|       |
  422|    161|                                break;
  423|  10.4k|                        }
  424|    754|                        break;
  425|       |
  426|  6.21k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 6.21k, False: 55.4k]
  ------------------
  427|  7.68k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 1.47k, False: 60.2k]
  ------------------
  428|  7.68k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 99, False: 7.58k]
  ------------------
  429|  7.68k|                        {
  430|    124|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 124, False: 7.55k]
  ------------------
  431|  1.19k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.07k, False: 6.61k]
  ------------------
  432|  1.19k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 786, False: 409]
  |  Branch (432:37): [True: 710, False: 485]
  |  Branch (432:53): [True: 710, False: 76]
  ------------------
  433|    710|                                {
  434|    710|                                    return OpCode::BEQZ;
  435|    710|                                }
  436|    485|                                break;
  437|       |
  438|  4.93k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 4.93k, False: 2.75k]
  ------------------
  439|  5.19k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 264, False: 7.41k]
  ------------------
  440|  5.19k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 5.13k, False: 66]
  ------------------
  441|  5.13k|                                {
  442|  5.13k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 3.98k, False: 1.14k]
  ------------------
  443|  3.98k|                                    {
  444|  3.98k|                                        return OpCode::BFPF;
  445|  3.98k|                                    }
  446|  1.14k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.08k, False: 66]
  ------------------
  447|  1.08k|                                    {
  448|  1.08k|                                        return OpCode::BFPT;
  449|  1.08k|                                    }
  450|  5.13k|                                }
  451|    132|                                break;
  452|       |
  453|  1.02k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.02k, False: 6.65k]
  ------------------
  454|  1.19k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 166, False: 7.51k]
  ------------------
  455|  1.19k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.12k, False: 66]
  |  Branch (455:37): [True: 1.06k, False: 132]
  |  Branch (455:53): [True: 1.06k, False: 66]
  ------------------
  456|  1.06k|                                {
  457|  1.06k|                                    return OpCode::BNEZ;
  458|  1.06k|                                }
  459|  7.68k|                        }
  460|    848|                        break;
  461|       |
  462|  1.74k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.74k, False: 59.9k]
  ------------------
  463|  1.86k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 114, False: 61.5k]
  ------------------
  464|  1.86k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 1.74k, False: 118]
  |  Branch (464:29): [True: 1.67k, False: 190]
  |  Branch (464:45): [True: 1.67k, False: 72]
  ------------------
  465|  1.67k|                        {
  466|  1.67k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 97, False: 1.57k]
  ------------------
  467|  1.67k|                            {
  468|    455|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 455, False: 1.21k]
  ------------------
  469|    521|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 1.60k]
  ------------------
  470|    521|                                    return OpCode::DIVD;
  471|       |
  472|     70|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 70, False: 1.60k]
  ------------------
  473|    136|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 1.60k]
  ------------------
  474|    136|                                    return OpCode::DIVF;
  475|       |
  476|    334|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 334, False: 1.33k]
  ------------------
  477|    400|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 1.60k]
  ------------------
  478|    400|                                    return OpCode::DIVI;
  479|       |
  480|    451|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 451, False: 1.22k]
  ------------------
  481|    517|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 66, False: 1.60k]
  ------------------
  482|    517|                                    return OpCode::DIVU;
  483|  1.67k|                            }
  484|  1.67k|                        }
  485|    287|                        break;
  486|       |
  487|    287|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 94, False: 61.5k]
  ------------------
  488|  1.78k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 1.68k, False: 60.0k]
  ------------------
  489|  1.78k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 1.66k, False: 118]
  |  Branch (489:29): [True: 141, False: 1.64k]
  |  Branch (489:45): [True: 1.59k, False: 66]
  |  Branch (489:61): [True: 141, False: 1.45k]
  ------------------
  490|    141|                        {
  491|    141|                            return OpCode::HALT;
  492|    141|                        }
  493|  1.64k|                        break;
  494|       |
  495|  1.64k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 288, False: 61.4k]
  ------------------
  496|  1.12k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 841, False: 60.8k]
  ------------------
  497|  1.12k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 909, False: 220]
  |  Branch (497:29): [True: 132, False: 997]
  |  Branch (497:45): [True: 198, False: 711]
  |  Branch (497:61): [True: 132, False: 66]
  ------------------
  498|    132|                        {
  499|    132|                            return OpCode::JALR;
  500|    132|                        }
  501|    997|                        break;
  502|       |
  503|  5.55k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 5.55k, False: 56.1k]
  ------------------
  504|  7.48k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.92k, False: 59.7k]
  ------------------
  505|  7.48k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 4.90k, False: 2.57k]
  |  Branch (505:29): [True: 4.84k, False: 2.64k]
  |  Branch (505:45): [True: 4.84k, False: 66]
  ------------------
  506|  4.84k|                        {
  507|  4.84k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 4.58k, False: 260]
  ------------------
  508|  4.58k|                            {
  509|  4.58k|                                return OpCode::MOVD;
  510|  4.58k|                            }
  511|    260|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 194, False: 66]
  ------------------
  512|    194|                            {
  513|    194|                                return OpCode::MOVF;
  514|    194|                            }
  515|  4.84k|                        }
  516|  2.64k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.53k, False: 105]
  |  Branch (516:34): [True: 142, False: 2.49k]
  |  Branch (516:50): [True: 2.41k, False: 126]
  |  Branch (516:66): [True: 142, False: 2.26k]
  ------------------
  517|    142|                        {
  518|    142|                            return OpCode::MULT;
  519|    142|                        }
  520|  2.56k|                        break;
  521|       |
  522|  21.6k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 21.6k, False: 40.0k]
  ------------------
  523|  25.1k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 3.53k, False: 58.1k]
  ------------------
  524|  25.1k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 152, False: 25.0k]
  ------------------
  525|  25.1k|                        {
  526|    827|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 827, False: 24.3k]
  ------------------
  527|  2.43k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.60k, False: 23.5k]
  ------------------
  528|  2.43k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 1.82k, False: 611]
  ------------------
  529|  1.82k|                                {
  530|  1.82k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.27k, False: 551]
  ------------------
  531|  1.27k|                                    {
  532|  1.27k|                                        return OpCode::SEQI;
  533|  1.27k|                                    }
  534|    551|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 469, False: 82]
  ------------------
  535|    469|                                    {
  536|    469|                                        return OpCode::SEQU;
  537|    469|                                    }
  538|  1.82k|                                }
  539|    693|                                break;
  540|       |
  541|  2.02k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 2.02k, False: 23.1k]
  ------------------
  542|  3.64k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.62k, False: 23.5k]
  ------------------
  543|  3.64k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.50k, False: 2.14k]
  ------------------
  544|  1.50k|                                {
  545|  1.50k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 147, False: 1.35k]
  ------------------
  546|    147|                                    {
  547|    147|                                        return OpCode::SGEI;
  548|    147|                                    }
  549|  1.35k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.29k, False: 66]
  ------------------
  550|  1.29k|                                    {
  551|  1.29k|                                        return OpCode::SGEU;
  552|  1.29k|                                    }
  553|  1.50k|                                }
  554|  2.14k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 2.06k, False: 75]
  ------------------
  555|  2.06k|                                {
  556|  2.06k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 709, False: 1.35k]
  ------------------
  557|    709|                                    {
  558|    709|                                        return OpCode::SGTI;
  559|    709|                                    }
  560|  1.35k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 140, False: 1.21k]
  ------------------
  561|    140|                                    {
  562|    140|                                        return OpCode::SGTU;
  563|    140|                                    }
  564|  2.06k|                                }
  565|  1.35k|                                break;
  566|       |
  567|  7.79k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 7.79k, False: 17.3k]
  ------------------
  568|  8.49k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 702, False: 24.4k]
  ------------------
  569|  8.49k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 66, False: 8.42k]
  ------------------
  570|  8.49k|                                {
  571|    692|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 692, False: 7.80k]
  ------------------
  572|    837|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 145, False: 8.34k]
  ------------------
  573|    837|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 739, False: 98]
  ------------------
  574|    739|                                        {
  575|    739|                                            return OpCode::SLAI;
  576|    739|                                        }
  577|     98|                                        break;
  578|       |
  579|  3.78k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 3.78k, False: 4.70k]
  ------------------
  580|  3.95k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 164, False: 8.32k]
  ------------------
  581|  3.95k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 3.43k, False: 516]
  ------------------
  582|  3.43k|                                        {
  583|  3.43k|                                            return OpCode::SLEI;
  584|  3.43k|                                        }
  585|    516|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 450, False: 66]
  ------------------
  586|    450|                                        {
  587|    450|                                            return OpCode::SLEU;
  588|    450|                                        }
  589|     66|                                        break;
  590|       |
  591|  1.09k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.09k, False: 7.40k]
  ------------------
  592|  1.22k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 133, False: 8.36k]
  ------------------
  593|  1.22k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.15k, False: 69]
  ------------------
  594|  1.15k|                                        {
  595|  1.15k|                                            return OpCode::SLLI;
  596|  1.15k|                                        }
  597|     69|                                        break;
  598|       |
  599|  2.27k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.27k, False: 6.21k]
  ------------------
  600|  2.41k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 141, False: 8.35k]
  ------------------
  601|  2.41k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 2.21k, False: 199]
  ------------------
  602|  2.21k|                                        {
  603|  2.21k|                                            return OpCode::SLTI;
  604|  2.21k|                                        }
  605|    199|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 133, False: 66]
  ------------------
  606|    133|                                        {
  607|    133|                                            return OpCode::SLTU;
  608|    133|                                        }
  609|     66|                                        break;
  610|  8.49k|                                }
  611|       |
  612|  1.49k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.12k, False: 24.0k]
  ------------------
  613|  2.65k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.16k, False: 24.0k]
  ------------------
  614|  2.65k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 2.35k, False: 300]
  ------------------
  615|  2.35k|                                {
  616|  2.35k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 197, False: 2.16k]
  ------------------
  617|    197|                                    {
  618|    197|                                        return OpCode::SNEI;
  619|    197|                                    }
  620|  2.16k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 2.09k, False: 66]
  ------------------
  621|  2.09k|                                    {
  622|  2.09k|                                        return OpCode::SNEU;
  623|  2.09k|                                    }
  624|  2.35k|                                }
  625|    366|                                break;
  626|       |
  627|    396|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 396, False: 24.7k]
  ------------------
  628|    598|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 202, False: 24.9k]
  ------------------
  629|    598|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 220, False: 378]
  |  Branch (629:37): [True: 153, False: 445]
  |  Branch (629:53): [True: 153, False: 67]
  ------------------
  630|    153|                                {
  631|    153|                                    return OpCode::SRAI;
  632|    153|                                }
  633|    445|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 371, False: 74]
  |  Branch (633:42): [True: 275, False: 170]
  |  Branch (633:58): [True: 275, False: 96]
  ------------------
  634|    275|                                {
  635|    275|                                    return OpCode::SRLI;
  636|    275|                                }
  637|    170|                                break;
  638|       |
  639|  4.30k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 4.30k, False: 20.8k]
  ------------------
  640|  7.55k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 3.25k, False: 21.9k]
  ------------------
  641|  7.55k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 7.05k, False: 500]
  ------------------
  642|  7.05k|                                {
  643|  7.05k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.43k, False: 4.61k]
  ------------------
  644|  7.05k|                                    {
  645|     89|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 89, False: 6.96k]
  ------------------
  646|    155|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 6.98k]
  ------------------
  647|    155|                                            return OpCode::SUBD;
  648|       |
  649|    947|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 947, False: 6.10k]
  ------------------
  650|  1.01k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 66, False: 6.98k]
  ------------------
  651|  1.01k|                                            return OpCode::SUBF;
  652|       |
  653|  2.18k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 2.18k, False: 4.86k]
  ------------------
  654|  2.31k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 130, False: 6.92k]
  ------------------
  655|  2.31k|                                            return OpCode::SUBI;
  656|       |
  657|  1.06k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 1.06k, False: 5.98k]
  ------------------
  658|  1.13k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 6.98k]
  ------------------
  659|  1.13k|                                            return OpCode::SUBU;
  660|  7.05k|                                    }
  661|  7.05k|                                }
  662|  2.93k|                                break;
  663|  25.1k|                        }
  664|  5.67k|                        break;
  665|       |
  666|  5.67k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.09k, False: 60.5k]
  ------------------
  667|  1.21k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 118, False: 61.5k]
  ------------------
  668|  1.21k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 1.15k, False: 66]
  |  Branch (668:29): [True: 964, False: 253]
  |  Branch (668:45): [True: 1.07k, False: 80]
  |  Branch (668:61): [True: 964, False: 107]
  ------------------
  669|    964|                        {
  670|    964|                            return OpCode::TRAP;
  671|    964|                        }
  672|    253|                        break;
  673|    253|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 170, False: 61.5k]
  ------------------
  674|    342|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 172, False: 61.5k]
  ------------------
  675|    342|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 265, False: 77]
  |  Branch (675:29): [True: 133, False: 209]
  |  Branch (675:45): [True: 199, False: 66]
  |  Branch (675:61): [True: 133, False: 66]
  ------------------
  676|    133|                        {
  677|    133|                            return OpCode::XORI;
  678|    133|                        }
  679|    209|                        break;
  680|  61.6k|                }
  681|  17.8k|                break;
  682|  61.6k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  20.6k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 20.6k, False: 206k]
  ------------------
  686|  20.6k|                char c1 = token[0];
  687|  20.6k|                char c2 = token[1];
  688|  20.6k|                char c3 = token[2];
  689|  20.6k|                char c4 = token[3];
  690|  20.6k|                char c5 = token[4];
  691|       |
  692|  20.6k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 1.16k, False: 19.4k]
  ------------------
  693|  20.6k|                {
  694|  4.74k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 4.74k, False: 15.9k]
  ------------------
  695|  4.74k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 20.6k]
  ------------------
  696|  4.74k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 4.74k, False: 0]
  |  Branch (696:29): [True: 4.74k, False: 0]
  |  Branch (696:45): [True: 4.74k, False: 0]
  |  Branch (696:61): [True: 4.74k, False: 0]
  |  Branch (696:77): [True: 4.74k, False: 0]
  ------------------
  697|  4.74k|                        {
  698|  4.74k|                            return OpCode::ADDUI;
  699|  4.74k|                        }
  700|      0|                        break;
  701|       |
  702|    219|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 219, False: 20.4k]
  ------------------
  703|    219|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 20.6k]
  ------------------
  704|    219|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 219, False: 0]
  |  Branch (704:29): [True: 219, False: 0]
  |  Branch (704:45): [True: 219, False: 0]
  |  Branch (704:61): [True: 219, False: 0]
  |  Branch (704:77): [True: 219, False: 0]
  ------------------
  705|    219|                        {
  706|    219|                            return OpCode::DIVUI;
  707|    219|                        }
  708|      0|                        break;
  709|       |
  710|  3.13k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 3.13k, False: 17.5k]
  ------------------
  711|  3.13k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 20.6k]
  ------------------
  712|  3.13k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 3.13k, False: 0]
  |  Branch (712:29): [True: 3.13k, False: 0]
  |  Branch (712:45): [True: 3.13k, False: 0]
  |  Branch (712:61): [True: 3.13k, False: 0]
  ------------------
  713|  3.13k|                        {
  714|  3.13k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 3.13k]
  ------------------
  715|  3.13k|                            {
  716|    102|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 102, False: 3.03k]
  ------------------
  717|    102|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 3.13k]
  ------------------
  718|    102|                                    return OpCode::MULTD;
  719|       |
  720|  2.80k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 2.80k, False: 329]
  ------------------
  721|  2.80k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 3.13k]
  ------------------
  722|  2.80k|                                    return OpCode::MULTF;
  723|       |
  724|     68|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 68, False: 3.07k]
  ------------------
  725|     68|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 3.13k]
  ------------------
  726|     68|                                    return OpCode::MULTI;
  727|       |
  728|    159|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 159, False: 2.97k]
  ------------------
  729|    159|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 3.13k]
  ------------------
  730|    159|                                    return OpCode::MULTU;
  731|  3.13k|                            }
  732|  3.13k|                        }
  733|      0|                        break;
  734|       |
  735|  11.3k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 11.3k, False: 9.26k]
  ------------------
  736|  11.3k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 20.6k]
  ------------------
  737|  11.3k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 11.3k]
  ------------------
  738|  11.3k|                        {
  739|  1.97k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.97k, False: 9.41k]
  ------------------
  740|  1.97k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 11.3k]
  ------------------
  741|  1.97k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.97k, False: 0]
  |  Branch (741:37): [True: 1.97k, False: 0]
  |  Branch (741:53): [True: 1.97k, False: 0]
  |  Branch (741:69): [True: 1.97k, False: 0]
  ------------------
  742|  1.97k|                                {
  743|  1.97k|                                    return OpCode::SEQUI;
  744|  1.97k|                                }
  745|      0|                                break;
  746|       |
  747|  5.39k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 5.39k, False: 5.99k]
  ------------------
  748|  5.39k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 11.3k]
  ------------------
  749|  5.39k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 3.10k, False: 2.29k]
  |  Branch (749:37): [True: 3.10k, False: 2.29k]
  |  Branch (749:53): [True: 3.10k, False: 0]
  |  Branch (749:69): [True: 3.10k, False: 0]
  ------------------
  750|  3.10k|                                {
  751|  3.10k|                                    return OpCode::SGEUI;
  752|  3.10k|                                }
  753|  2.29k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 2.29k, False: 0]
  |  Branch (753:42): [True: 2.29k, False: 0]
  |  Branch (753:58): [True: 2.29k, False: 0]
  |  Branch (753:74): [True: 2.29k, False: 0]
  ------------------
  754|  2.29k|                                {
  755|  2.29k|                                    return OpCode::SGTUI;
  756|  2.29k|                                }
  757|      0|                                break;
  758|       |
  759|  1.76k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 1.76k, False: 9.62k]
  ------------------
  760|  1.76k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 11.3k]
  ------------------
  761|  1.76k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 158, False: 1.60k]
  |  Branch (761:37): [True: 158, False: 1.60k]
  |  Branch (761:53): [True: 158, False: 0]
  |  Branch (761:69): [True: 158, False: 0]
  ------------------
  762|    158|                                {
  763|    158|                                    return OpCode::SLEUI;
  764|    158|                                }
  765|  1.60k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.60k, False: 0]
  |  Branch (765:42): [True: 1.60k, False: 0]
  |  Branch (765:58): [True: 1.60k, False: 0]
  |  Branch (765:74): [True: 1.60k, False: 0]
  ------------------
  766|  1.60k|                                {
  767|  1.60k|                                    return OpCode::SLTUI;
  768|  1.60k|                                }
  769|      0|                                break;
  770|       |
  771|     66|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 66, False: 11.3k]
  ------------------
  772|     66|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 11.3k]
  ------------------
  773|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 66, False: 0]
  |  Branch (773:37): [True: 66, False: 0]
  |  Branch (773:53): [True: 66, False: 0]
  |  Branch (773:69): [True: 66, False: 0]
  ------------------
  774|     66|                                {
  775|     66|                                    return OpCode::SNEUI;
  776|     66|                                }
  777|      0|                                break;
  778|       |
  779|  2.18k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 2.18k, False: 9.20k]
  ------------------
  780|  2.18k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 11.3k]
  ------------------
  781|  2.18k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 2.18k, False: 0]
  |  Branch (781:37): [True: 2.18k, False: 0]
  |  Branch (781:53): [True: 2.18k, False: 0]
  |  Branch (781:69): [True: 2.18k, False: 0]
  ------------------
  782|  2.18k|                                {
  783|  2.18k|                                    return OpCode::SUBUI;
  784|  2.18k|                                }
  785|      0|                                break;
  786|  11.3k|                        }
  787|       |
  788|      0|                        break;
  789|  20.6k|                }
  790|       |
  791|  1.16k|                break;
  792|  20.6k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  5.07k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 5.07k, False: 221k]
  ------------------
  796|  5.07k|                char c1 = token[0];
  797|  5.07k|                char c2 = token[1];
  798|  5.07k|                char c3 = token[2];
  799|  5.07k|                char c4 = token[3];
  800|  5.07k|                char c5 = token[4];
  801|  5.07k|                char c6 = token[5];
  802|       |
  803|  5.07k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 3.19k, False: 1.88k]
  |  Branch (803:21): [True: 3.19k, False: 1.88k]
  |  Branch (803:37): [True: 3.19k, False: 0]
  |  Branch (803:53): [True: 3.19k, False: 0]
  ------------------
  804|  3.19k|                {
  805|  3.19k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 3.19k]
  ------------------
  806|  3.19k|                    {
  807|    802|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 802, False: 2.38k]
  ------------------
  808|    802|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 3.19k]
  ------------------
  809|    802|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 802, False: 0]
  ------------------
  810|    802|                            {
  811|    802|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 717, False: 85]
  ------------------
  812|    717|                                {
  813|    717|                                    return OpCode::CVTD2F;
  814|    717|                                }
  815|     85|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 85, False: 0]
  ------------------
  816|     85|                                {
  817|     85|                                    return OpCode::CVTD2I;
  818|     85|                                }
  819|    802|                            }
  820|      0|                            break;
  821|       |
  822|  1.03k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 1.03k, False: 2.15k]
  ------------------
  823|  1.03k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 3.19k]
  ------------------
  824|  1.03k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 1.03k, False: 0]
  ------------------
  825|  1.03k|                            {
  826|  1.03k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 201, False: 838]
  ------------------
  827|    201|                                {
  828|    201|                                    return OpCode::CVTF2D;
  829|    201|                                }
  830|    838|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 838, False: 0]
  ------------------
  831|    838|                                {
  832|    838|                                    return OpCode::CVTF2I;
  833|    838|                                }
  834|  1.03k|                            }
  835|      0|                            break;
  836|       |
  837|  1.35k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.35k, False: 1.84k]
  ------------------
  838|  1.35k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 3.19k]
  ------------------
  839|  1.35k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.35k, False: 0]
  ------------------
  840|  1.35k|                            {
  841|  1.35k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.27k, False: 72]
  ------------------
  842|  1.27k|                                {
  843|  1.27k|                                    return OpCode::CVTI2D;
  844|  1.27k|                                }
  845|     72|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 72, False: 0]
  ------------------
  846|     72|                                {
  847|     72|                                    return OpCode::CVTI2F;
  848|     72|                                }
  849|  1.35k|                            }
  850|  3.19k|                    }
  851|  3.19k|                }
  852|  1.88k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 1.11k, False: 764]
  |  Branch (852:26): [True: 1.11k, False: 764]
  |  Branch (852:42): [True: 1.11k, False: 0]
  |  Branch (852:58): [True: 1.11k, False: 0]
  |  Branch (852:74): [True: 1.11k, False: 0]
  ------------------
  853|  1.88k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.11k, False: 0]
  |  Branch (853:42): [True: 1.11k, False: 0]
  ------------------
  854|  1.11k|                {
  855|  1.11k|                    return OpCode::MULTUI;
  856|  1.11k|                }
  857|    764|                break;
  858|  5.07k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|    764|            case 7: {
  ------------------
  |  Branch (861:13): [True: 418, False: 226k]
  ------------------
  862|    418|                char c1 = token[0];
  863|    418|                char c2 = token[1];
  864|    418|                char c3 = token[2];
  865|    418|                char c4 = token[3];
  866|    418|                char c5 = token[4];
  867|    418|                char c6 = token[5];
  868|    418|                char c7 = token[6];
  869|       |
  870|    418|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 215, False: 203]
  |  Branch (870:21): [True: 215, False: 203]
  |  Branch (870:37): [True: 215, False: 0]
  |  Branch (870:53): [True: 215, False: 0]
  ------------------
  871|    215|                {
  872|    215|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 90, False: 125]
  |  Branch (872:25): [True: 90, False: 125]
  |  Branch (872:41): [True: 90, False: 0]
  |  Branch (872:54): [True: 90, False: 0]
  |  Branch (872:70): [True: 90, False: 0]
  ------------------
  873|     90|                    {
  874|     90|                        return OpCode::MOVI2FP;
  875|     90|                    }
  876|    125|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 125, False: 0]
  |  Branch (876:30): [True: 125, False: 0]
  |  Branch (876:46): [True: 125, False: 0]
  |  Branch (876:62): [True: 125, False: 0]
  |  Branch (876:75): [True: 125, False: 0]
  ------------------
  877|    125|                    {
  878|    125|                        return OpCode::MOVFP2I;
  879|    125|                    }
  880|    215|                }
  881|    203|                break;
  882|    418|            }
  883|       |
  884|  9.52k|            default: {
  ------------------
  |  Branch (884:13): [True: 9.52k, False: 217k]
  ------------------
  885|  9.52k|                break;
  886|    418|            }
  887|   226k|        }
  888|       |
  889|       |        // None found
  890|  86.3k|        return OpCode::NONE;
  891|   226k|    }
_ZN3dlx3iceEcc:
   17|   365k|    {
   18|   365k|        constexpr const char diff = 'a' - 'A';
   19|   365k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 239k, False: 126k]
  |  Branch (19:28): [True: 37.2k, False: 88.8k]
  ------------------
   20|   365k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   278k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  4.75k|    {
  193|  4.75k|        ParseError err;
  194|       |
  195|  4.75k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  4.75k|        err.m_LineNumber                           = line_number;
  197|  4.75k|        err.m_Column                               = column;
  198|  4.75k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  4.75k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  4.75k|        return err;
  202|  4.75k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  4.75k|    {
  207|  4.75k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  4.75k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  4.75k|                                                         actual_type);
  210|  4.75k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    154|    {
  216|    154|        ParseError err;
  217|       |
  218|    154|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    154|        err.m_LineNumber        = line_number;
  220|    154|        err.m_Column            = column;
  221|    154|        err.invalid_number.text = text;
  222|       |
  223|    154|        return err;
  224|    154|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    154|    {
  228|    154|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    154|                                                token.GetColumn().unsafe(), token.GetText());
  230|    154|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   105k|    {
  255|   105k|        ParseError err;
  256|       |
  257|   105k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   105k|        err.m_LineNumber                   = line_number;
  259|   105k|        err.m_Column                       = column;
  260|   105k|        err.unexpected_token.expected_type = expected_type;
  261|   105k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   105k|        return err;
  264|   105k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   105k|    {
  269|   105k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   105k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   105k|                                                  token.GetType());
  272|   105k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  4.84k|    {
  277|  4.84k|        ParseError err;
  278|       |
  279|  4.84k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  4.84k|        err.m_LineNumber                   = line_number;
  281|  4.84k|        err.m_Column                       = column;
  282|  4.84k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  4.84k|        return err;
  285|  4.84k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.44k|    {
  289|  2.44k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.44k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.44k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  41.8k|    {
  296|  41.8k|        ParseError err;
  297|       |
  298|  41.8k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  41.8k|        err.m_LineNumber                       = line_number;
  300|  41.8k|        err.m_Column                           = column;
  301|  41.8k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  41.8k|        return err;
  304|  41.8k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  41.8k|    {
  309|  41.8k|        return ConstructInvalidLabelIdentifierParseError(
  310|  41.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  41.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  11.6k|    {
  317|  11.6k|        ParseError err;
  318|       |
  319|  11.6k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  11.6k|        err.m_LineNumber                     = line_number;
  321|  11.6k|        err.m_Column                         = column;
  322|  11.6k|        err.label_already_defined.label_name = label_name;
  323|  11.6k|        err.label_already_defined.at_line    = at_line;
  324|  11.6k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  11.6k|        return err;
  327|  11.6k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  11.6k|    {
  332|  11.6k|        return ConstructLabelAlreadyDefinedParseError(
  333|  11.6k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  11.6k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  11.6k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  91.6k|    {
  340|  91.6k|        ParseError err;
  341|       |
  342|  91.6k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  91.6k|        err.m_LineNumber = line_number;
  344|  91.6k|        err.m_Column     = column;
  345|       |
  346|  91.6k|        return err;
  347|  91.6k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  91.6k|    {
  352|  91.6k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  91.6k|                                                        token.GetColumn().unsafe());
  354|  91.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  16.9k|    {
  360|  16.9k|        ParseError err;
  361|       |
  362|  16.9k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  16.9k|        err.m_LineNumber               = line_number;
  364|  16.9k|        err.m_Column                   = column;
  365|  16.9k|        err.too_few_arguments.required = required;
  366|  16.9k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  16.9k|        return err;
  369|  16.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  16.9k|    {
  374|  16.9k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  16.9k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  16.9k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.43k|    {
  381|  1.43k|        ParseError err;
  382|       |
  383|  1.43k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.43k|        err.m_LineNumber           = line_number;
  385|  1.43k|        err.m_Column               = column;
  386|  1.43k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.43k|        return err;
  389|  1.43k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.43k|    {
  393|  1.43k|        return ConstructEmptyLabelParseError(
  394|  1.43k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.43k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.28k, False: 157]
  ------------------
  396|  1.28k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.43k|                        token.GetText());
  398|  1.43k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    121|    {
  403|    121|        ParseError err;
  404|       |
  405|    121|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    121|        err.m_LineNumber = line_number;
  407|    121|        err.m_Column     = column;
  408|       |
  409|    121|        return err;
  410|    121|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    121|    {
  414|    121|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    121|                                               token.GetColumn().unsafe());
  416|    121|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   278k|    {
   19|   278k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   278k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  3.99k|    {
  182|  3.99k|        ParsedProgram program;
  183|       |
  184|  3.99k|        program.m_Tokens = tokens;
  185|       |
  186|  3.99k|        phi::boolean line_has_instruction{false};
  187|  3.99k|        phi::usize   label_count{0u};
  188|       |
  189|   581k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 577k, False: 3.99k]
  ------------------
  190|   577k|        {
  191|   577k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   577k|            switch (current_token.GetType())
  196|   577k|            {
  197|       |                // Ignore comments
  198|  81.9k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 81.9k, False: 495k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  81.9k|                    break;
  201|       |
  202|   214k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 214k, False: 363k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   214k|                    line_has_instruction = false;
  205|   214k|                    break;
  206|       |
  207|  57.7k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 57.7k, False: 519k]
  ------------------
  208|  57.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 2.20k, False: 55.5k]
  ------------------
  209|  2.20k|                    {
  210|  2.20k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  2.20k|                                current_token, Token::Type::NewLine));
  212|  2.20k|                        break;
  213|  2.20k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  55.5k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 35.2k, False: 20.3k]
  ------------------
  218|  35.2k|                    {
  219|  35.2k|                        program.AddParseError(
  220|  35.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  35.2k|                        break;
  222|  35.2k|                    }
  223|       |
  224|  20.3k|                    std::string_view label_name = current_token.GetText();
  225|  20.3k|                    label_name.remove_suffix(1);
  226|       |
  227|  20.3k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 2.40k, False: 17.9k]
  ------------------
  228|  2.40k|                    {
  229|  2.40k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  2.40k|                                current_token.GetLineNumber().unsafe(),
  231|  2.40k|                                current_token.GetColumn().unsafe(), label_name));
  232|  2.40k|                        break;
  233|  2.40k|                    }
  234|       |
  235|  17.9k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 4.34k, False: 13.5k]
  ------------------
  236|  4.34k|                    {
  237|  4.34k|                        program.AddParseError(
  238|  4.34k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  4.34k|                        break;
  240|  4.34k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  13.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 11.6k, False: 1.93k]
  ------------------
  244|  11.6k|                    {
  245|       |                        // Find first defintions of label
  246|  11.6k|                        const Token* first_label_definition =
  247|  11.6k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  11.6k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  11.6k|                                    {
  250|  11.6k|                                        std::string_view token_label_name = t.GetText();
  251|  11.6k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  11.6k|                                        if (token_label_name == label_name)
  254|  11.6k|                                        {
  255|  11.6k|                                            return true;
  256|  11.6k|                                        }
  257|  11.6k|                                    }
  258|       |
  259|  11.6k|                                    return false;
  260|  11.6k|                                });
  261|       |
  262|  11.6k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  11.6k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  11.6k|                                current_token, *first_label_definition));
  266|  11.6k|                        break;
  267|  11.6k|                    }
  268|       |
  269|  1.93k|                    program.m_JumpData[label_name] =
  270|  1.93k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  1.93k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  1.93k|                    break;
  277|  13.5k|                }
  278|       |
  279|   133k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 133k, False: 443k]
  ------------------
  280|   133k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 91.6k, False: 42.1k]
  ------------------
  281|  91.6k|                    {
  282|  91.6k|                        program.AddParseError(
  283|  91.6k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  91.6k|                        break;
  285|  91.6k|                    }
  286|       |
  287|  42.1k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  42.1k|                    PHI_ASSERT(current_token.HasHint());
  291|  42.1k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  42.1k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  42.1k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  42.1k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  42.1k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  42.1k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  42.1k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  42.1k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  42.1k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  61.4k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 59.1k, False: 2.28k]
  ------------------
  313|  59.1k|                    {
  314|       |                        // Get next token
  315|  59.1k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 199, False: 58.9k]
  ------------------
  316|    199|                        {
  317|    199|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    199|                                    current_token, number_of_argument_required.unsafe(),
  319|    199|                                    argument_num.unsafe()));
  320|    199|                            break;
  321|    199|                        }
  322|       |
  323|  58.9k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  58.9k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 10.9k, False: 48.0k]
  ------------------
  327|  10.9k|                        {
  328|  10.9k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 121, False: 10.7k]
  ------------------
  329|    121|                            {
  330|    121|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    121|                            }
  332|       |
  333|  10.9k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  10.9k|                            continue;
  336|  10.9k|                        }
  337|       |
  338|  48.0k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 16.7k, False: 31.3k]
  ------------------
  339|  16.7k|                        {
  340|  16.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  16.7k|                                    token, number_of_argument_required.unsafe(),
  342|  16.7k|                                    argument_num.unsafe()));
  343|  16.7k|                            break;
  344|  16.7k|                        }
  345|       |
  346|  31.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  31.3k|                                parse_instruction_argument(
  348|  31.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  31.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 22.9k, False: 8.37k]
  ------------------
  350|  22.9k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  22.9k|                            break;
  353|  22.9k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  8.37k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  8.37k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  8.37k|                        argument_num++;
  360|  8.37k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  8.37k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  42.1k|                    program.m_Instructions.emplace_back(instruction);
  368|  42.1k|                    line_has_instruction = true;
  369|  42.1k|                    break;
  370|   133k|                }
  371|       |
  372|  89.6k|                default:
  ------------------
  |  Branch (372:17): [True: 89.6k, False: 487k]
  ------------------
  373|  89.6k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  89.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 56.1k, False: 33.4k]
  ------------------
  375|  56.1k|                    {
  376|  56.1k|                        expected_token_type = Token::Type::NewLine;
  377|  56.1k|                    }
  378|       |
  379|  89.6k|                    program.AddParseError(
  380|  89.6k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  89.6k|                    break;
  382|   577k|            }
  383|   577k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  3.99k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 296, False: 3.69k]
  ------------------
  387|    296|        {
  388|  2.84k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 2.54k, False: 296]
  ------------------
  389|  2.54k|            {
  390|  2.54k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  2.54k|                const Token& token = *it;
  393|  2.54k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.43k, False: 1.10k]
  ------------------
  394|  1.43k|                {
  395|  1.43k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.43k|                    --label_count;
  397|  1.43k|                }
  398|  2.54k|            }
  399|    296|        }
  400|       |
  401|  3.99k|        return program;
  402|  3.99k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  3.99k|    {
  406|  3.99k|        TokenStream tokens = Tokenize(source);
  407|  3.99k|        return Parse(tokens);
  408|  3.99k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  31.3k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  31.3k|        switch (token.GetType())
   38|  31.3k|        {
   39|  2.49k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 2.49k, False: 28.8k]
  ------------------
   40|  2.49k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 602, False: 1.88k]
  ------------------
   41|  2.49k|                                          ArgumentType::AddressDisplacement))
   42|    602|                {
   43|    602|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    602|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    602|                    return {};
   47|    602|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.88k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.88k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.88k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 1.88k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  1.88k|                auto         it           = tokens.current_position();
   62|  1.88k|                const Token& first_token  = tokens.consume();
   63|  1.88k|                const Token& second_token = tokens.consume();
   64|  1.88k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.88k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.88k, False: 0]
  ------------------
   67|  1.88k|                {
   68|  1.88k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.88k|                            first_token, Token::Type::OpenBracket));
   70|  1.88k|                    return {};
   71|  1.88k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  5.16k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 5.16k, False: 26.1k]
  ------------------
   98|  5.16k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 923, False: 4.23k]
  ------------------
   99|    923|                {
  100|    923|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    923|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    923|                    return {};
  103|    923|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  4.23k|                return ConstructInstructionArgumentRegisterInt(
  109|  4.23k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  5.16k|            }
  111|    492|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 492, False: 30.8k]
  ------------------
  112|    492|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 403, False: 89]
  ------------------
  113|    403|                {
  114|    403|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    403|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    403|                    return {};
  117|    403|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|     89|                return ConstructInstructionArgumentRegisterFloat(
  123|     89|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    492|            }
  125|  2.44k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.44k, False: 28.8k]
  ------------------
  126|  2.44k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.44k|                return {};
  129|    492|            }
  130|  5.89k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 5.89k, False: 25.4k]
  ------------------
  131|       |                // Parse as Label
  132|  5.89k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.63k, False: 4.26k]
  ------------------
  133|  1.63k|                {
  134|  1.63k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.63k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.63k|                    return {};
  137|  1.63k|                }
  138|       |
  139|  4.26k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 4.26k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  4.26k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 2.25k, False: 2.00k]
  ------------------
  146|  2.25k|                {
  147|  2.25k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  2.25k|                    return {};
  149|  2.25k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  2.00k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  4.26k|            }
  155|  3.39k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 3.39k, False: 27.9k]
  ------------------
  156|  3.39k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.19k, False: 2.19k]
  ------------------
  157|  1.19k|                {
  158|  1.19k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.19k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.19k|                    return {};
  161|  1.19k|                }
  162|       |
  163|  2.19k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.04k, False: 154]
  ------------------
  164|  2.04k|                {
  165|  2.04k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.04k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.04k|                }
  168|       |
  169|    154|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    154|                return {};
  171|  2.19k|            }
  172|       |
  173|  11.4k|            default:
  ------------------
  |  Branch (173:13): [True: 11.4k, False: 19.8k]
  ------------------
  174|  11.4k|                program.AddParseError(
  175|  11.4k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  11.4k|                return {};
  177|  31.3k|        }
  178|  31.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   195k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   195k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 52.6k, False: 142k]
  ------------------
  249|  52.6k|                                    {
  250|  52.6k|                                        std::string_view token_label_name = t.GetText();
  251|  52.6k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  52.6k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 11.6k, False: 41.0k]
  ------------------
  254|  11.6k|                                        {
  255|  11.6k|                                            return true;
  256|  11.6k|                                        }
  257|  52.6k|                                    }
  258|       |
  259|   183k|                                    return false;
  260|   195k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    156|    {
  354|    156|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 156]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    156|        m_CurrentProgram = &program;
  361|       |
  362|    156|        m_ProgramCounter               = 0u;
  363|    156|        m_Halted                       = false;
  364|    156|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    156|        m_LastRaisedException          = Exception::None;
  366|    156|        m_CurrentStepCount             = 0u;
  367|       |
  368|    156|        return true;
  369|    156|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   264k|    {
   14|   264k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 57.5k, False: 206k]
  ------------------
   15|  57.5k|        {
   16|  57.5k|            char first_char = token[0];
   17|  57.5k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 20.4k, False: 37.0k]
  |  Branch (17:38): [True: 4.05k, False: 33.0k]
  ------------------
   18|  24.4k|            {
   19|  24.4k|                char second_char = token[1];
   20|  24.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 24.3k, False: 177]
  |  Branch (20:43): [True: 21.2k, False: 3.02k]
  ------------------
   21|  21.2k|                {
   22|  21.2k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  21.2k|                }
   24|  24.4k|            }
   25|  57.5k|        }
   26|   206k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 93.2k, False: 113k]
  ------------------
   27|  93.2k|        {
   28|  93.2k|            char first_char = token[0];
   29|  93.2k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 7.34k, False: 85.8k]
  |  Branch (29:38): [True: 2.07k, False: 83.7k]
  ------------------
   30|  9.41k|            {
   31|  9.41k|                char second_char = token[1];
   32|  9.41k|                char third_char  = token[2];
   33|       |
   34|  9.41k|                switch (second_char)
   35|  9.41k|                {
   36|  2.64k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.64k, False: 6.77k]
  ------------------
   37|  2.64k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 2.56k, False: 74]
  |  Branch (37:50): [True: 2.20k, False: 358]
  ------------------
   38|  2.20k|                        {
   39|  2.20k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  2.20k|                        }
   41|    432|                        break;
   42|  2.64k|                    }
   43|  5.17k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 5.17k, False: 4.24k]
  ------------------
   44|  5.17k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 5.10k, False: 69]
  |  Branch (44:50): [True: 3.75k, False: 1.34k]
  ------------------
   45|  3.75k|                        {
   46|  3.75k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  3.75k|                        }
   48|  1.41k|                        break;
   49|  5.17k|                    }
   50|  1.43k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.43k, False: 7.98k]
  ------------------
   51|  1.43k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 85, False: 1.34k]
  |  Branch (51:50): [True: 1.27k, False: 66]
  ------------------
   52|  1.36k|                        {
   53|  1.36k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.36k|                        }
   55|     66|                        break;
   56|  1.43k|                    }
   57|    175|                    default: {
  ------------------
  |  Branch (57:21): [True: 175, False: 9.24k]
  ------------------
   58|    175|                        break;
   59|  1.43k|                    }
   60|  9.41k|                }
   61|  9.41k|            }
   62|  93.2k|        }
   63|       |
   64|   235k|        return IntRegisterID::None;
   65|   264k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   235k|    {
   69|   235k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 36.2k, False: 199k]
  ------------------
   70|  36.2k|        {
   71|  36.2k|            char first_char = token[0];
   72|  36.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 4.01k, False: 32.2k]
  |  Branch (72:38): [True: 605, False: 31.5k]
  ------------------
   73|  4.61k|            {
   74|  4.61k|                char second_char = token[1];
   75|  4.61k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 4.54k, False: 75]
  |  Branch (75:43): [True: 4.06k, False: 479]
  ------------------
   76|  4.06k|                {
   77|  4.06k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  4.06k|                }
   79|  4.61k|            }
   80|  36.2k|        }
   81|   199k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 85.8k, False: 113k]
  ------------------
   82|  85.8k|        {
   83|  85.8k|            char first_char = token[0];
   84|  85.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 4.58k, False: 81.2k]
  |  Branch (84:38): [True: 1.17k, False: 80.1k]
  ------------------
   85|  5.75k|            {
   86|  5.75k|                char second_char = token[1];
   87|  5.75k|                char third_char  = token[2];
   88|       |
   89|  5.75k|                switch (second_char)
   90|  5.75k|                {
   91|  2.08k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.08k, False: 3.67k]
  ------------------
   92|  2.08k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.94k, False: 142]
  |  Branch (92:50): [True: 1.86k, False: 84]
  ------------------
   93|  1.86k|                        {
   94|  1.86k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.86k|                        }
   96|    226|                        break;
   97|  2.08k|                    }
   98|    894|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 894, False: 4.86k]
  ------------------
   99|    894|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 188, False: 706]
  |  Branch (99:50): [True: 115, False: 73]
  ------------------
  100|    115|                        {
  101|    115|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    115|                        }
  103|    779|                        break;
  104|    894|                    }
  105|  2.69k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 2.69k, False: 3.06k]
  ------------------
  106|  2.69k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 2.44k, False: 252]
  |  Branch (106:50): [True: 147, False: 105]
  ------------------
  107|  2.59k|                        {
  108|  2.59k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  2.59k|                        }
  110|    105|                        break;
  111|  2.69k|                    }
  112|    105|                    default: {
  ------------------
  |  Branch (112:21): [True: 79, False: 5.67k]
  ------------------
  113|     79|                        break;
  114|  2.69k|                    }
  115|  5.75k|                }
  116|  5.75k|            }
  117|  85.8k|        }
  118|       |
  119|   226k|        return FloatRegisterID::None;
  120|   235k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   271k|    {
  124|   271k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 71.2k, False: 200k]
  ------------------
  125|  71.2k|        {
  126|  71.2k|            char c1 = token[0];
  127|  71.2k|            char c2 = token[1];
  128|  71.2k|            char c3 = token[2];
  129|  71.2k|            char c4 = token[3];
  130|       |
  131|  71.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 9.57k, False: 61.6k]
  |  Branch (131:34): [True: 165, False: 61.4k]
  |  Branch (131:49): [True: 9.54k, False: 193]
  |  Branch (131:62): [True: 127, False: 66]
  ------------------
  132|  71.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 9.53k, False: 132]
  |  Branch (132:34): [True: 66, False: 66]
  |  Branch (132:49): [True: 9.53k, False: 66]
  |  Branch (132:62): [True: 0, False: 66]
  ------------------
  133|  71.2k|        }
  134|       |
  135|   200k|        return false;
  136|   271k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   450k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   191k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  1.66M|    {
   41|  1.66M|        return m_Type;
   42|  1.66M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.14M|    {
   51|  1.14M|        return m_LineNumber;
   52|  1.14M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  2.23M|    {
   56|  2.23M|        return m_Column;
   57|  2.23M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  1.53M|    {
   61|  1.53M|        return m_Text.length();
   62|  1.53M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   199k|    {
   66|   199k|        return m_Text;
   67|   199k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  46.2k|    {
   80|  46.2k|        return m_HasHint;
   81|  46.2k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  50.4k|    {
   85|  50.4k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  50.4k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  50.4k|                   m_Type == Type::ImmediateInteger);
   88|  50.4k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  50.4k|        return m_Hint;
   91|  50.4k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  3.99k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  3.99k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  3.99k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.88k|    {
   51|  1.88k|        auto it = m_Iterator;
   52|  7.54k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 5.66k, False: 1.88k]
  ------------------
   53|  5.66k|        {
   54|  5.66k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 5.65k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  5.66k|        }
   59|       |
   60|  1.88k|        return true;
   61|  1.88k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   640k|    {
   65|   640k|        return m_Iterator != m_Tokens.end();
   66|   640k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   641k|    {
   70|   641k|        return m_Iterator == m_Tokens.end();
   71|   641k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   641k|    {
   85|   641k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   641k|        return *m_Iterator++;
   91|   641k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.88k|    {
  164|  1.88k|        return m_Iterator;
  165|  1.88k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  3.99k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  3.99k|        return m_Tokens.begin();
  188|  3.99k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  3.99k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  3.99k|        return m_Tokens.end();
  206|  3.99k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    296|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    296|        return m_Tokens.rbegin();
  224|    296|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  2.54k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  2.54k|        return m_Tokens.rend();
  233|  2.54k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  3.99k|    {
   63|  3.99k|        TokenStream tokens;
   64|       |
   65|  3.99k|        std::string_view current_token;
   66|       |
   67|  3.99k|        phi::u64 current_line_number{1u};
   68|  3.99k|        phi::u64 current_column{1u};
   69|  3.99k|        phi::u64 token_begin{0u};
   70|       |
   71|  3.99k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.49M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.49M, False: 3.99k]
  ------------------
   74|  1.49M|        {
   75|  1.49M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.49M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 234k, False: 1.26M]
  ------------------
   78|   234k|            {
   79|   234k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 85.5k, False: 149k]
  ------------------
   80|  85.5k|                {
   81|       |                    // Skip empty lines
   82|  85.5k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  85.5k|                                        current_line_number, current_column);
   84|       |
   85|  85.5k|                    parsing_comment = false;
   86|  85.5k|                    current_line_number += 1u;
   87|  85.5k|                    current_column = 1u;
   88|  85.5k|                    continue;
   89|  85.5k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   149k|                tokens.emplace_back(
   93|   149k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   149k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   149k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   149k|                                    current_line_number, current_column);
   98|       |
   99|   149k|                current_token   = std::string_view{};
  100|   149k|                parsing_comment = false;
  101|   149k|                current_line_number += 1u;
  102|   149k|                current_column = 0u;
  103|   149k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.26M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 8.28k, False: 1.25M]
  |  Branch (105:34): [True: 85.1k, False: 1.16M]
  ------------------
  106|  93.4k|            {
  107|  93.4k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 80.1k, False: 13.2k]
  ------------------
  108|  80.1k|                {
  109|  80.1k|                    token_begin = i;
  110|  80.1k|                }
  111|  13.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 8.14k, False: 5.14k]
  ------------------
  112|  8.14k|                {
  113|  8.14k|                    tokens.emplace_back(ParseToken(
  114|  8.14k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  8.14k|                            current_line_number, current_column - current_token.length()));
  116|  8.14k|                    token_begin   = i;
  117|  8.14k|                    current_token = std::string_view{};
  118|  8.14k|                }
  119|       |
  120|  93.4k|                parsing_comment = true;
  121|  93.4k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  93.4k|            }
  123|  1.16M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 100k, False: 1.06M]
  ------------------
  124|   100k|            {
  125|       |                // simply append the character
  126|   100k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   100k|            }
  128|  1.06M|            else
  129|  1.06M|            {
  130|       |                // Not parsing a comment
  131|  1.06M|                switch (c)
  132|  1.06M|                {
  133|   130k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 130k, False: 935k]
  ------------------
  134|   130k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 249, False: 1.06M]
  ------------------
  135|   130k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 1.06M]
  ------------------
  136|   130k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 495, False: 130k]
  ------------------
  137|    495|                        {
  138|    495|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    495|                            continue;
  141|    495|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   130k|                        tokens.emplace_back(ParseToken(
  145|   130k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   130k|                                current_line_number, current_column - current_token.length()));
  147|   130k|                        current_token = std::string_view{};
  148|   130k|                        break;
  149|  25.0k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 25.0k, False: 1.04M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  25.0k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 21.7k, False: 3.33k]
  ------------------
  152|  21.7k|                        {
  153|  21.7k|                            current_token =
  154|  21.7k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  21.7k|                            tokens.emplace_back(ParseToken(
  156|  21.7k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  21.7k|                                    current_line_number,
  158|  21.7k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  21.7k|                            current_token = std::string_view{};
  161|  21.7k|                        }
  162|  3.33k|                        else
  163|  3.33k|                        {
  164|       |                            // Orphan colon
  165|  3.33k|                            token_begin = i;
  166|       |
  167|  3.33k|                            tokens.emplace_back(Token::Type::Colon,
  168|  3.33k|                                                source.substr(token_begin.unsafe(), 1),
  169|  3.33k|                                                current_line_number, current_column);
  170|  3.33k|                        }
  171|  25.0k|                        break;
  172|  43.6k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 43.6k, False: 1.02M]
  ------------------
  173|  48.9k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 5.31k, False: 1.06M]
  ------------------
  174|  49.4k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 514, False: 1.06M]
  ------------------
  175|  49.4k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 43.6k, False: 5.84k]
  ------------------
  176|  43.6k|                        {
  177|  43.6k|                            tokens.emplace_back(ParseToken(
  178|  43.6k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  43.6k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  43.6k|                            current_token = std::string_view{};
  182|  43.6k|                        }
  183|       |
  184|  49.4k|                        Token::Type type;
  185|  49.4k|                        switch (c)
  186|  49.4k|                        {
  187|  43.6k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 43.6k, False: 5.82k]
  ------------------
  188|  43.6k|                                type = Token::Type::Comma;
  189|  43.6k|                                break;
  190|  5.31k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 5.31k, False: 44.1k]
  ------------------
  191|  5.31k|                                type = Token::Type::OpenBracket;
  192|  5.31k|                                break;
  193|    514|                            case ')':
  ------------------
  |  Branch (193:29): [True: 514, False: 48.9k]
  ------------------
  194|    514|                                type = Token::Type::ClosingBracket;
  195|    514|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 49.4k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  49.4k|#endif
  201|  49.4k|                        }
  202|       |
  203|  49.4k|                        token_begin = i;
  204|       |
  205|  49.4k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  49.4k|                                            current_line_number, current_column);
  207|  49.4k|                        break;
  208|       |
  209|   860k|                    default:
  ------------------
  |  Branch (209:21): [True: 860k, False: 205k]
  ------------------
  210|   860k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 266k, False: 594k]
  ------------------
  211|   266k|                        {
  212|   266k|                            token_begin = i;
  213|   266k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   860k|                        current_token =
  217|   860k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.06M|                }
  219|  1.06M|            }
  220|       |
  221|  1.40M|            current_column += 1u;
  222|  1.40M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  3.99k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 1.35k, False: 2.63k]
  ------------------
  226|  1.35k|        {
  227|  1.35k|            tokens.emplace_back(
  228|  1.35k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  1.35k|                               current_line_number, current_column - current_token.length()));
  230|  1.35k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  3.99k|        tokens.finalize();
  234|       |
  235|  3.99k|        return tokens;
  236|  3.99k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   354k|    {
   11|   354k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 8.91k, False: 345k]
  |  Branch (11:35): [True: 8.76k, False: 148]
  ------------------
   12|  8.76k|        {
   13|  8.76k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  8.76k|            if (number)
  ------------------
  |  Branch (15:17): [True: 7.58k, False: 1.18k]
  ------------------
   16|  7.58k|            {
   17|  7.58k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  7.58k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  7.58k|            }
   20|       |
   21|  1.18k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  8.76k|        }
   23|       |
   24|   345k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 3.19k, False: 342k]
  |  Branch (24:35): [True: 85.0k, False: 257k]
  ------------------
   25|  88.2k|        {
   26|  88.2k|            return {Token::Type::Comment, token, line_number, column};
   27|  88.2k|        }
   28|       |
   29|   257k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 8.12k, False: 249k]
  ------------------
   30|  8.12k|        {
   31|  8.12k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  8.12k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  8.12k|        }
   34|       |
   35|   249k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 9.53k, False: 239k]
  ------------------
   36|  9.53k|        {
   37|  9.53k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  9.53k|        }
   39|       |
   40|   239k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 26.9k, False: 212k]
  ------------------
   41|  26.9k|        {
   42|  26.9k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  26.9k|                    static_cast<std::uint32_t>(id)};
   44|  26.9k|        }
   45|       |
   46|   212k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 8.56k, False: 204k]
  ------------------
   47|  8.56k|        {
   48|  8.56k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  8.56k|                    static_cast<std::uint32_t>(id)};
   50|  8.56k|        }
   51|       |
   52|   204k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 139k, False: 64.1k]
  ------------------
   53|   139k|        {
   54|   139k|            return {Token::Type::OpCode, token, line_number, column,
   55|   139k|                    static_cast<std::uint32_t>(opcode)};
   56|   139k|        }
   57|       |
   58|  64.1k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   204k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  3.99k|    {
   53|       |        // Constants
   54|  3.99k|        constexpr std::uint8_t number_of_opcodes =
   55|  3.99k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  3.99k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  3.99k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  3.99k|        std::string ret;
   60|       |
   61|   361k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 357k, False: 3.96k]
  ------------------
   62|   357k|        {
   63|   357k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   357k|            switch (current_value)
   66|   357k|            {
   67|       |                // OpCode
   68|   126k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 126k, False: 230k]
  ------------------
   69|       |                    // Has one more value
   70|   126k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 126k, False: 157]
  ------------------
   71|   126k|                    {
   72|   126k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   126k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   126k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 13, False: 126k]
  ------------------
   77|     13|                        {
   78|     13|                            return detail::ErrorString;
   79|     13|                        }
   80|   126k|                    }
   81|   126k|                    break;
   82|   126k|                }
   83|       |
   84|       |                // Int Register
   85|   126k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 27.7k, False: 329k]
  ------------------
   86|       |                    // Has one more value
   87|  27.7k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 27.7k, False: 29]
  ------------------
   88|  27.7k|                    {
   89|  27.7k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  27.7k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  27.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 27.7k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  27.7k|                    }
   97|  27.7k|                    break;
   98|  27.7k|                }
   99|       |
  100|       |                // Float register
  101|  27.7k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 8.57k, False: 348k]
  ------------------
  102|       |                    // Has one more value
  103|  8.57k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 8.57k, False: 6]
  ------------------
  104|  8.57k|                    {
  105|  8.57k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  8.57k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  8.57k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 8.57k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  8.57k|                    }
  113|  8.57k|                    break;
  114|  8.57k|                }
  115|       |
  116|       |                // Floating point status register
  117|  9.62k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 9.62k, False: 347k]
  ------------------
  118|  9.62k|                    ret += "FPSR";
  119|  9.62k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 1, False: 9.62k]
  ------------------
  120|      1|                    {
  121|      1|                        return detail::ErrorString;
  122|      1|                    }
  123|       |
  124|  9.62k|                    break;
  125|  9.62k|                }
  126|       |
  127|       |                // Immediate integer
  128|  10.4k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 10.4k, False: 346k]
  ------------------
  129|  10.4k|                    ret += "#";
  130|  10.4k|                    [[fallthrough]];
  131|  10.4k|                }
  132|       |
  133|       |                // Integer literal
  134|  22.6k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 12.1k, False: 345k]
  ------------------
  135|  22.6k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  22.6k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 22.5k, False: 47]
  ------------------
  138|  22.5k|                    {
  139|  22.5k|                        std::int16_t value = 0;
  140|       |
  141|  67.6k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 45.0k, False: 22.5k]
  ------------------
  142|  45.0k|                        {
  143|  45.0k|                            value <<= 8;
  144|  45.0k|                            value &= data[index++];
  145|  45.0k|                        }
  146|       |
  147|  22.5k|                        ret += std::to_string(value);
  148|  22.5k|                    }
  149|  22.6k|                    break;
  150|  10.4k|                }
  151|       |
  152|       |                // Label
  153|  6.54k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 6.54k, False: 350k]
  ------------------
  154|  6.54k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  6.54k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 6.53k, False: 8]
  ------------------
  157|  6.53k|                    {
  158|  6.53k|                        std::string label_name = "lbl_";
  159|       |
  160|  39.0k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 32.4k, False: 6.53k]
  ------------------
  161|  32.4k|                        {
  162|  32.4k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  32.4k|                            label_name += c;
  165|  32.4k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  6.53k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 6.46k, False: 69]
  |  Branch (168:45): [True: 4.59k, False: 1.86k]
  ------------------
  169|  4.59k|                        {
  170|  4.59k|                            label_name += ':';
  171|  4.59k|                            ret += label_name;
  172|  4.59k|                        }
  173|  1.93k|                        else
  174|  1.93k|                        {
  175|  1.93k|                            ret += label_name;
  176|  1.93k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 4, False: 1.93k]
  ------------------
  177|      4|                            {
  178|      4|                                return detail::ErrorString;
  179|      4|                            }
  180|  1.93k|                        }
  181|  6.53k|                    }
  182|  6.53k|                    break;
  183|  6.54k|                }
  184|       |
  185|       |                // Newline
  186|  70.6k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 70.6k, False: 286k]
  ------------------
  187|  70.6k|                    ret += '\n';
  188|  70.6k|                    break;
  189|  6.54k|                }
  190|       |
  191|       |                // Comment
  192|  84.8k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 84.8k, False: 272k]
  ------------------
  193|  84.8k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  84.8k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 84.7k, False: 44]
  ------------------
  196|  84.7k|                    {
  197|  84.7k|                        std::string comment = "; ";
  198|       |
  199|   506k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 422k, False: 84.7k]
  ------------------
  200|   422k|                        {
  201|   422k|                            comment += static_cast<char>(data[index++]);
  202|   422k|                        }
  203|       |
  204|  84.7k|                        ret += comment + '\n';
  205|  84.7k|                    }
  206|  84.8k|                    break;
  207|  6.54k|                }
  208|       |
  209|       |                // Ignore
  210|      8|                default:
  ------------------
  |  Branch (210:17): [True: 8, False: 357k]
  ------------------
  211|      8|                    return detail::ErrorString;
  212|   357k|            }
  213|   357k|        }
  214|       |
  215|  3.96k|        return ret;
  216|  3.99k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   174k|        {
   20|   174k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 173k, False: 1.22k]
  ------------------
   21|   173k|            {
   22|   173k|                std::uint8_t val = data[index++];
   23|   173k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 132k, False: 41.1k]
  ------------------
   24|   132k|                {
   25|   132k|                    text += ' ';
   26|   132k|                }
   27|  41.1k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 41.0k, False: 20]
  ------------------
   28|  41.0k|                {
   29|  41.0k|                    text += ',';
   30|  41.0k|                }
   31|     20|                else
   32|     20|                {
   33|     20|                    return false;
   34|     20|                }
   35|   173k|            }
   36|       |
   37|   174k|            return true;
   38|   174k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  32.4k|        {
   42|  32.4k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 26.3k, False: 6.10k]
  ------------------
   43|  26.3k|            {
   44|  26.3k|                return '_';
   45|  26.3k|            }
   46|       |
   47|  6.10k|            return c;
   48|  32.4k|        }

LLVMFuzzerTestOneInput:
   12|  3.99k|{
   13|  3.99k|    static dlxemu::Emulator emu;
   14|       |
   15|  3.99k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  3.99k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  3.99k|    editor.SetText(source);
   21|  3.99k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  3.99k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  3.99k|    editor.ColorizeInternal();
   26|       |
   27|  3.99k|    return 0;
   28|  3.99k|}


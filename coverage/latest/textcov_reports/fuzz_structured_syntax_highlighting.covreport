_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  15.9k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  3.19k|    {
  240|  3.19k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 2.02k, False: 1.16k]
  ------------------
  241|  2.02k|        {
  242|  2.02k|            return m_Line < other.m_Line;
  243|  2.02k|        }
  244|       |
  245|  1.16k|        return m_Column <= other.m_Column;
  246|  3.19k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|   350k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  3.19k|    {
  349|  3.19k|        m_ErrorMarkers.clear();
  350|  3.19k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  3.19k|    {
  414|  3.19k|        m_Breakpoints.clear();
  415|  3.19k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  3.19k|    {
  494|  3.19k|        m_Lines.clear();
  495|  3.19k|        ResetState();
  496|  3.19k|        m_Lines.emplace_back(Line());
  497|       |
  498|  3.19k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 441k, False: 3.19k]
  ------------------
  499|   441k|        {
  500|   441k|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 310, False: 441k]
  |  Branch (500:17): [True: 22.7k, False: 418k]
  ------------------
  501|   441k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 91.4k, False: 349k]
  |  Branch (501:48): [True: 22.8k, False: 68.6k]
  |  Branch (501:69): [True: 22.4k, False: 360]
  ------------------
  502|  22.7k|            {
  503|       |                // ignore the carriage return character and control characters
  504|  22.7k|            }
  505|   418k|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 68.6k, False: 350k]
  ------------------
  506|  68.6k|            {
  507|  68.6k|                m_Lines.emplace_back(Line());
  508|  68.6k|            }
  509|   350k|            else
  510|   350k|            {
  511|   350k|                m_Lines.back().emplace_back(
  512|   350k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|   350k|            }
  514|   441k|        }
  515|       |
  516|  3.19k|        m_TextChanged = true;
  517|  3.19k|        m_ScrollToTop = true;
  518|       |
  519|  3.19k|        m_UndoBuffer.clear();
  520|  3.19k|        m_UndoIndex = 0u;
  521|       |
  522|  3.19k|        Colorize();
  523|  3.19k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  3.19k|    {
  527|  3.19k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  3.19k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  3.19k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  3.19k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  3.19k|        const phi::u32 to_line =
 1724|  3.19k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 3.19k, False: 0]
  ------------------
 1725|  3.19k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  3.19k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  3.19k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  3.19k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  3.19k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  3.19k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  3.19k|    {
 1839|  3.19k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  3.19k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  3.19k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  3.19k|        std::string result;
 1844|       |
 1845|  3.19k|        phi::u32   lstart = start.m_Line;
 1846|  3.19k|        phi::u32   lend   = end.m_Line;
 1847|  3.19k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  3.19k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  3.19k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  3.19k|        phi::usize size   = 0u;
 1851|       |
 1852|  75.0k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 71.8k, False: 3.19k]
  ------------------
 1853|  71.8k|        {
 1854|  71.8k|            PHI_ASSERT(i < m_Lines.size());
 1855|  71.8k|            size += m_Lines[i.unsafe()].size();
 1856|  71.8k|        }
 1857|       |
 1858|  3.19k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|   422k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 169k, False: 252k]
  |  Branch (1860:16): [True: 418k, False: 3.19k]
  |  Branch (1860:33): [True: 249k, False: 3.19k]
  ------------------
 1861|   418k|        {
 1862|   418k|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|   418k|            const Line& line = m_Lines[lstart.unsafe()];
 1865|   418k|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 350k, False: 68.6k]
  ------------------
 1866|   350k|            {
 1867|   350k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|   350k|                istart++;
 1869|   350k|            }
 1870|  68.6k|            else
 1871|  68.6k|            {
 1872|  68.6k|                istart = 0u;
 1873|  68.6k|                ++lstart;
 1874|       |
 1875|  68.6k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 68.6k, False: 0]
  ------------------
 1876|  68.6k|                {
 1877|  68.6k|                    result += '\n';
 1878|  68.6k|                }
 1879|  68.6k|            }
 1880|   418k|        }
 1881|       |
 1882|  3.19k|        return result;
 1883|  3.19k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  6.38k|    {
 2422|  6.38k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  6.38k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  6.38k|        phi::u32    index = 0u;
 2426|   119k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 116k, False: 3.29k]
  |  Branch (2426:35): [True: 113k, False: 6.38k]
  |  Branch (2426:58): [True: 113k, False: 3.08k]
  ------------------
 2427|   113k|        {
 2428|   113k|            PHI_ASSERT(index < line.size());
 2429|   113k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   113k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 113k]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|   113k|            else
 2436|   113k|            {
 2437|   113k|                ++column;
 2438|   113k|            }
 2439|       |
 2440|   113k|            index += UTF8CharLength(character);
 2441|   113k|        }
 2442|       |
 2443|  6.38k|        return index;
 2444|  6.38k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  3.19k|    {
 2494|  3.19k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 3.19k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  3.19k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  3.19k|        phi::u32    col  = 0u;
 2501|       |
 2502|   116k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 113k, False: 3.19k]
  ------------------
 2503|   113k|        {
 2504|   113k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   113k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 113k]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|   113k|            else
 2510|   113k|            {
 2511|   113k|                col++;
 2512|   113k|            }
 2513|       |
 2514|   113k|            i += UTF8CharLength(character);
 2515|   113k|        }
 2516|       |
 2517|  3.19k|        return col;
 2518|  3.19k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  3.19k|    {
 2522|  3.19k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  3.19k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  3.19k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   181k|    {
 3661|   181k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   181k|        switch (token.GetType())
 3665|   181k|        {
 3666|  29.3k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 29.3k, False: 152k]
  ------------------
 3667|  29.3k|                palette_index = PaletteIndex::Comment;
 3668|  29.3k|                break;
 3669|  1.65k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 1.65k, False: 180k]
  ------------------
 3670|  3.45k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 1.80k, False: 180k]
  ------------------
 3671|  3.45k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  3.45k|                break;
 3673|  36.0k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 36.0k, False: 145k]
  ------------------
 3674|  36.0k|                palette_index = PaletteIndex::OpCode;
 3675|  36.0k|                break;
 3676|  1.79k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 1.79k, False: 180k]
  ------------------
 3677|  7.77k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 5.97k, False: 175k]
  ------------------
 3678|  9.76k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 1.99k, False: 179k]
  ------------------
 3679|  9.76k|                palette_index = PaletteIndex::Register;
 3680|  9.76k|                break;
 3681|  68.6k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 68.6k, False: 113k]
  ------------------
 3682|  68.6k|                return;
 3683|  34.5k|            default:
  ------------------
  |  Branch (3683:13): [True: 34.5k, False: 147k]
  ------------------
 3684|  34.5k|                break;
 3685|   181k|        }
 3686|       |
 3687|   113k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   113k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   113k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|   436k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 322k, False: 113k]
  ------------------
 3692|   322k|        {
 3693|   322k|            PHI_ASSERT(index < line.size());
 3694|   322k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|   322k|        }
 3696|   113k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  3.19k|    {
 3700|  3.19k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  3.19k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 181k, False: 3.19k]
  ------------------
 3703|   181k|        {
 3704|   181k|            ColorizeToken(token);
 3705|   181k|        }
 3706|  3.19k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  3.19k|    {
 3710|  3.19k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  3.19k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  3.19k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  3.19k|        ClearBreakPoints();
 3716|  3.19k|        ClearErrorMarkers();
 3717|  3.19k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   113k|{
  135|   113k|    return UTF8CharLength(static_cast<char>(characater));
  136|   113k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|   227k|{
  105|   227k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 227k]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|   227k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 227k]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|   227k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 227k]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|   227k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 227k]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|   227k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 227k]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|   227k|    return 1_u8;
  131|   227k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  3.19k|    {
  175|  3.19k|        return m_DLXProgram;
  176|  3.19k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  3.19k|    {
  180|  3.19k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  3.19k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 136, False: 3.05k]
  ------------------
  183|    136|        {
  184|    136|            m_Processor.LoadProgram(m_DLXProgram);
  185|    136|        }
  186|  3.19k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  3.19k|    {
  200|  3.19k|        return m_CodeEditor;
  201|  3.19k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  54.4k|        {
  169|  54.4k|            PHI_ASSERT(index < 3u);
  170|       |
  171|  54.4k|            switch (index.unsafe())
  172|  54.4k|            {
  173|  22.1k|                case 0:
  ------------------
  |  Branch (173:17): [True: 22.1k, False: 32.3k]
  ------------------
  174|  22.1k|                    return m_Arg1Type;
  175|       |
  176|  16.4k|                case 1:
  ------------------
  |  Branch (176:17): [True: 16.4k, False: 37.9k]
  ------------------
  177|  16.4k|                    return m_Arg2Type;
  178|       |
  179|  15.8k|                case 2:
  ------------------
  |  Branch (179:17): [True: 15.8k, False: 38.5k]
  ------------------
  180|  15.8k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 54.4k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  54.4k|#endif
  187|  54.4k|            }
  188|  54.4k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  15.3k|        {
  195|  15.3k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  15.3k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 15.2k, False: 160]
  ------------------
  199|  15.2k|            {
  200|  15.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  15.2k|            }
  202|  15.3k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 12.1k, False: 3.21k]
  ------------------
  203|  12.1k|            {
  204|  12.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  12.1k|            }
  206|  15.3k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 7.29k, False: 8.09k]
  ------------------
  207|  7.29k|            {
  208|  7.29k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  7.29k|            }
  210|       |
  211|  15.3k|            return number_of_argument_required;
  212|  15.3k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  15.3k|        {
  221|  15.3k|            return m_Executor;
  222|  15.3k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  5.08k|    {
   38|  5.08k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  5.08k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  5.08k|                                         static_cast<underlying_t>(rhs));
   42|  5.08k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  5.08k|    {
   55|  5.08k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  5.08k|        return static_cast<underlying_t>(type & test) != 0;
   58|  5.08k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|  27.3k|    {
  205|  27.3k|        switch (value)
  206|  27.3k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  5.55k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  5.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.55k, False: 21.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.55k|        return #name;
  |  |  ------------------
  |  |   16|  5.55k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    576|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 576, False: 26.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    576|        return #name;
  |  |  ------------------
  |  |   17|    576|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    369|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 369, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    369|        return #name;
  |  |  ------------------
  |  |   18|    901|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    901|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 901, False: 26.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    901|        return #name;
  |  |  ------------------
  |  |   19|    901|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    405|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 405, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    405|        return #name;
  |  |  ------------------
  |  |   20|    405|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    348|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 348, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    348|        return #name;
  |  |  ------------------
  |  |   21|    348|                                                                                                   \
  |  |   22|    348|    /* Sub */                                                                                      \
  |  |   23|    415|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    415|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 415, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    415|        return #name;
  |  |  ------------------
  |  |   24|    415|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    322|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 322, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    322|        return #name;
  |  |  ------------------
  |  |   25|    322|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    267|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 267, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    267|        return #name;
  |  |  ------------------
  |  |   26|    315|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    315|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 315, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    315|        return #name;
  |  |  ------------------
  |  |   27|    315|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    258|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 258, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    258|        return #name;
  |  |  ------------------
  |  |   28|    258|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   29|     68|                                                                                                   \
  |  |   30|     68|    /* Multiplication */                                                                           \
  |  |   31|     69|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |   32|     69|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   33|     75|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |   34|    197|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 197, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    197|        return #name;
  |  |  ------------------
  |  |   35|    457|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    457|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 457, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    457|        return #name;
  |  |  ------------------
  |  |   36|    457|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |   37|     71|                                                                                                   \
  |  |   38|     71|    /* Division */                                                                                 \
  |  |   39|    194|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 194, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    194|        return #name;
  |  |  ------------------
  |  |   40|    207|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    207|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 207, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    207|        return #name;
  |  |  ------------------
  |  |   41|    207|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 194, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    194|        return #name;
  |  |  ------------------
  |  |   42|    194|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   43|     86|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   44|    202|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 202, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    202|        return #name;
  |  |  ------------------
  |  |   45|    202|                                                                                                   \
  |  |   46|    202|    /* Shift left (logical) */                                                                     \
  |  |   47|    424|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    424|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 424, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    424|        return #name;
  |  |  ------------------
  |  |   48|    424|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    288|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 288, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    288|        return #name;
  |  |  ------------------
  |  |   49|    288|                                                                                                   \
  |  |   50|    288|    /* Shift right (logical) */                                                                    \
  |  |   51|    288|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   52|     97|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |   53|     97|                                                                                                   \
  |  |   54|     97|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    260|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    260|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 260, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    260|        return #name;
  |  |  ------------------
  |  |   56|    269|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    269|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 269, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    269|        return #name;
  |  |  ------------------
  |  |   57|    269|                                                                                                   \
  |  |   58|    269|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    269|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 200, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    200|        return #name;
  |  |  ------------------
  |  |   60|    200|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |   61|     79|                                                                                                   \
  |  |   62|     79|    /* Logic */                                                                                    \
  |  |   63|     79|                                                                                                   \
  |  |   64|     79|    /* And */                                                                                      \
  |  |   65|    247|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    247|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 247, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    247|        return #name;
  |  |  ------------------
  |  |   66|    247|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 96, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     96|        return #name;
  |  |  ------------------
  |  |   67|     96|                                                                                                   \
  |  |   68|     96|    /* Or */                                                                                       \
  |  |   69|    194|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 194, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    194|        return #name;
  |  |  ------------------
  |  |   70|    194|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   71|     68|                                                                                                   \
  |  |   72|     68|    /* XOR */                                                                                      \
  |  |   73|    195|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 195, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    195|        return #name;
  |  |  ------------------
  |  |   74|    195|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|     73|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 73, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     73|        return #name;
  |  |  ------------------
  |  |   80|    256|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    256|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 256, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    256|        return #name;
  |  |  ------------------
  |  |   81|    256|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   82|    203|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    203|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 203, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    203|        return #name;
  |  |  ------------------
  |  |   83|    203|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    100|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 100, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    100|        return #name;
  |  |  ------------------
  |  |   84|    100|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   85|     68|                                                                                                   \
  |  |   86|     68|    /* Greater than */                                                                             \
  |  |   87|     70|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   88|    139|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    139|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 139, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    139|        return #name;
  |  |  ------------------
  |  |   89|    139|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   90|    378|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    378|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 378, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    378|        return #name;
  |  |  ------------------
  |  |   91|    378|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    280|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 280, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    280|        return #name;
  |  |  ------------------
  |  |   92|    280|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    251|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 251, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    251|        return #name;
  |  |  ------------------
  |  |   93|    251|                                                                                                   \
  |  |   94|    251|    /* Less than or equal */                                                                       \
  |  |   95|    362|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    362|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 362, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    362|        return #name;
  |  |  ------------------
  |  |   96|    454|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    454|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 454, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    454|        return #name;
  |  |  ------------------
  |  |   97|    454|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 109, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    109|        return #name;
  |  |  ------------------
  |  |   98|    109|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 77, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     77|        return #name;
  |  |  ------------------
  |  |   99|    254|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    254|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 254, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    254|        return #name;
  |  |  ------------------
  |  |  100|    254|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 196, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    196|        return #name;
  |  |  ------------------
  |  |  101|    196|                                                                                                   \
  |  |  102|    196|    /* Greater than or equal */                                                                    \
  |  |  103|    196|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  104|     71|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  105|    250|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    250|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 250, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    250|        return #name;
  |  |  ------------------
  |  |  106|    453|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    453|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 453, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    453|        return #name;
  |  |  ------------------
  |  |  107|    453|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  108|    333|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    333|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 333, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    333|        return #name;
  |  |  ------------------
  |  |  109|    333|                                                                                                   \
  |  |  110|    333|    /* Equal */                                                                                    \
  |  |  111|    333|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  112|    325|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    325|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 325, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    325|        return #name;
  |  |  ------------------
  |  |  113|    325|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 122, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    122|        return #name;
  |  |  ------------------
  |  |  114|    480|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    480|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 480, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    480|        return #name;
  |  |  ------------------
  |  |  115|    480|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  116|     66|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|     67|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  120|    107|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 107, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    107|        return #name;
  |  |  ------------------
  |  |  121|    199|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 199, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    199|        return #name;
  |  |  ------------------
  |  |  122|    199|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  123|     66|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  124|     68|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |  125|     68|                                                                                                   \
  |  |  126|     68|    /* Conditional branching */                                                                    \
  |  |  127|     68|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|    286|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    286|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 286, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    286|        return #name;
  |  |  ------------------
  |  |  129|    456|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    456|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 456, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    456|        return #name;
  |  |  ------------------
  |  |  130|  1.10k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.10k, False: 26.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.10k|        return #name;
  |  |  ------------------
  |  |  131|  1.10k|                                                                                                   \
  |  |  132|  1.10k|    /* Unconditional branching */                                                                  \
  |  |  133|  1.10k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|     14|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     14|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     71|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  136|     71|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|     70|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  140|    236|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 236, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    236|        return #name;
  |  |  ------------------
  |  |  141|    236|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  142|    194|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 194, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    194|        return #name;
  |  |  ------------------
  |  |  143|    194|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  144|     67|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  145|     67|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|    196|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 196, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    196|        return #name;
  |  |  ------------------
  |  |  148|    196|                                                                                                   \
  |  |  149|    196|    /* Storing data */                                                                             \
  |  |  150|    196|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  151|    242|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    242|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 242, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    242|        return #name;
  |  |  ------------------
  |  |  152|    655|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    655|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 655, False: 26.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    655|        return #name;
  |  |  ------------------
  |  |  153|    655|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    316|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 316, False: 27.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    316|        return #name;
  |  |  ------------------
  |  |  154|    316|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|     75|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |  156|     75|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  157|     70|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  158|     70|                                                                                                   \
  |  |  159|     70|    /* Moving data */                                                                              \
  |  |  160|    456|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    456|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 456, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    456|        return #name;
  |  |  ------------------
  |  |  161|    456|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 89, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     89|        return #name;
  |  |  ------------------
  |  |  162|    107|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 107, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    107|        return #name;
  |  |  ------------------
  |  |  163|    107|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  164|     84|                                                                                                   \
  |  |  165|     84|    /* Converting data */                                                                          \
  |  |  166|     95|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     95|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 95, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     95|        return #name;
  |  |  ------------------
  |  |  167|    197|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 197, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    197|        return #name;
  |  |  ------------------
  |  |  168|    198|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 198, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    198|        return #name;
  |  |  ------------------
  |  |  169|    198|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |  170|     69|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  171|    250|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    250|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 250, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    250|        return #name;
  |  |  ------------------
  |  |  172|    250|                                                                                                   \
  |  |  173|    250|    /* Other */                                                                                    \
  |  |  174|    250|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 114, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    114|        return #name;
  |  |  ------------------
  |  |  175|    114|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  176|    279|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|    279|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 279, False: 27.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    279|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 27.3k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|  27.3k|        }
  218|  27.3k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  9.25k|    {
   32|  9.25k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 394, False: 8.85k]
  ------------------
   33|    394|        {
   34|    394|            return true;
   35|    394|        }
   36|       |
   37|  8.85k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 66, False: 8.79k]
  ------------------
   38|     66|        {
   39|     66|            return true;
   40|     66|        }
   41|       |
   42|  8.79k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 544, False: 8.24k]
  ------------------
   43|    544|        {
   44|    544|            return true;
   45|    544|        }
   46|       |
   47|  8.24k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 8.24k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  8.24k|        return false;
   53|  8.24k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  8.24k|    {
   57|  8.24k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 8.24k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  8.24k|        const char first_char = token.at(0);
   63|       |
   64|  8.24k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 2.00k, False: 6.24k]
  ------------------
   65|  2.00k|        {
   66|  2.00k|            return phi::is_alpha(first_char);
   67|  2.00k|        }
   68|       |
   69|  6.24k|        phi::boolean just_under_scores = (first_char == '_');
   70|  6.24k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 747, False: 5.49k]
  |  Branch (70:15): [True: 5.36k, False: 885]
  |  Branch (70:44): [True: 138, False: 747]
  ------------------
   71|    747|        {
   72|    747|            return false;
   73|    747|        }
   74|       |
   75|  28.1k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 24.3k, False: 3.80k]
  ------------------
   76|  24.3k|        {
   77|  24.3k|            const char c{token.at(index)};
   78|       |
   79|  24.3k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 10.6k, False: 13.6k]
  ------------------
   80|  10.6k|            {
   81|  10.6k|                just_under_scores = false;
   82|  10.6k|            }
   83|  13.6k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 11.9k, False: 1.69k]
  ------------------
   84|  11.9k|            {
   85|  11.9k|                continue;
   86|  11.9k|            }
   87|  1.69k|            else
   88|  1.69k|            {
   89|  1.69k|                return false;
   90|  1.69k|            }
   91|  24.3k|        }
   92|       |
   93|  3.80k|        return !just_under_scores;
   94|  5.49k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  71.0k|    {
  101|  71.0k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 71.0k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  71.0k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 5.04k, False: 66.0k]
  ------------------
  107|  5.04k|        {
  108|  5.04k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 2.12k, False: 2.91k]
  ------------------
  109|  2.12k|            {
  110|  2.12k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  2.12k|            }
  112|       |
  113|  2.91k|            return {};
  114|  5.04k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  66.0k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 404, False: 65.6k]
  ------------------
  118|    404|        {
  119|    404|            return {};
  120|    404|        }
  121|       |
  122|  65.6k|        std::int32_t number{0};
  123|  65.6k|        phi::boolean is_negative{false};
  124|  65.6k|        phi::boolean starts_with_zero{false};
  125|  65.6k|        phi::boolean parsing_binary{false};
  126|  65.6k|        phi::boolean parsing_octal{false};
  127|  65.6k|        phi::boolean parsing_hexadecimal{false};
  128|  65.6k|        phi::boolean parsed_something{false};
  129|  65.6k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  72.6k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 71.4k, False: 1.19k]
  ------------------
  134|  71.4k|        {
  135|  71.4k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  71.4k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 65.6k, False: 5.80k]
  ------------------
  139|  65.6k|            {
  140|  65.6k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 96, False: 65.5k]
  ------------------
  141|     96|                {
  142|     96|                    continue;
  143|     96|                }
  144|       |
  145|  65.5k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 528, False: 64.9k]
  ------------------
  146|    528|                {
  147|    528|                    is_negative = true;
  148|    528|                    continue;
  149|    528|                }
  150|       |
  151|  64.9k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 2.73k, False: 62.2k]
  ------------------
  152|  2.73k|                {
  153|  2.73k|                    starts_with_zero = true;
  154|  2.73k|                    continue;
  155|  2.73k|                }
  156|       |
  157|  62.2k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 67, False: 62.2k]
  ------------------
  158|     67|                {
  159|     67|                    return {};
  160|     67|                }
  161|  62.2k|            }
  162|       |
  163|       |            // Second character
  164|  68.0k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 3.64k, False: 64.3k]
  ------------------
  165|  3.64k|            {
  166|  3.64k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 2.73k, False: 916]
  ------------------
  167|  2.73k|                {
  168|       |                    // Binary
  169|  2.73k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 276, False: 2.45k]
  |  Branch (169:37): [True: 110, False: 2.34k]
  ------------------
  170|    386|                    {
  171|    386|                        parsing_binary = true;
  172|    386|                        continue;
  173|    386|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  2.34k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 398, False: 1.94k]
  |  Branch (176:37): [True: 101, False: 1.84k]
  ------------------
  177|    499|                    {
  178|    499|                        parsing_hexadecimal = true;
  179|    499|                        continue;
  180|    499|                    }
  181|       |
  182|       |                    // Octal
  183|  1.84k|                    parsing_octal = true;
  184|  1.84k|                }
  185|  3.64k|            }
  186|       |
  187|       |            // Handle seperators
  188|  67.1k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 140, False: 66.9k]
  ------------------
  189|    140|            {
  190|    140|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 68, False: 72]
  ------------------
  191|     68|                {
  192|     68|                    return {};
  193|     68|                }
  194|       |
  195|     72|                parsed_separator = true;
  196|     72|                continue;
  197|    140|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  66.9k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 576, False: 66.4k]
  |  Branch (200:32): [True: 0, False: 576]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|  66.9k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 66.4k, False: 576]
  |  Branch (205:17): [True: 0, False: 66.9k]
  |  Branch (205:33): [True: 0, False: 66.4k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|  66.9k|            parsed_separator = false;
  212|  66.9k|            parsed_something = true;
  213|       |
  214|  66.9k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 254, False: 66.7k]
  ------------------
  215|    254|            {
  216|    254|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 122, False: 132]
  ------------------
  217|    122|                {
  218|    122|                    return {};
  219|    122|                }
  220|       |
  221|    132|                number <<= 1;
  222|    132|                number |= (c - '0');
  223|    132|            }
  224|  66.7k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 2.45k, False: 64.2k]
  ------------------
  225|  2.45k|            {
  226|  2.45k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 1.56k, False: 893]
  ------------------
  227|  1.56k|                {
  228|  1.56k|                    return {};
  229|  1.56k|                }
  230|       |
  231|    893|                number <<= 3;
  232|    893|                number |= (c - '0');
  233|    893|            }
  234|  64.2k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 640, False: 63.6k]
  ------------------
  235|    640|            {
  236|    640|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 211, False: 429]
  ------------------
  237|    211|                {
  238|    211|                    return {};
  239|    211|                }
  240|       |
  241|    429|                number <<= 4;
  242|    429|                number |= phi::hex_digit_value(c).unsafe();
  243|    429|            }
  244|  63.6k|            else
  245|  63.6k|            {
  246|  63.6k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 62.1k, False: 1.49k]
  ------------------
  247|  62.1k|                {
  248|  62.1k|                    return {};
  249|  62.1k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  1.49k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 733, False: 764]
  |  Branch (252:36): [True: 261, False: 472]
  ------------------
  253|    261|                {
  254|    261|                    return {};
  255|    261|                }
  256|       |
  257|  1.23k|                number *= 10;
  258|  1.23k|                number += (c - '0');
  259|  1.23k|            }
  260|  66.9k|        }
  261|       |
  262|  1.19k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 980, False: 212]
  ------------------
  263|    980|        {
  264|       |            // Check for over/underflow
  265|    980|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 177, False: 803]
  |  Branch (265:32): [True: 0, False: 177]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|    980|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 803, False: 177]
  |  Branch (270:17): [True: 0, False: 980]
  |  Branch (270:33): [True: 0, False: 803]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|    980|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 177, False: 803]
  ------------------
  277|    177|            {
  278|    177|                return static_cast<std::int16_t>(-number);
  279|    177|            }
  280|       |
  281|    803|            return static_cast<std::int16_t>(number);
  282|    980|        }
  283|       |
  284|    212|        return {};
  285|  1.19k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  6.34k|    {
   96|  6.34k|        switch (value)
   97|  6.34k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  1.05k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.05k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.05k, False: 5.29k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.05k|        return #name;
  |  |  ------------------
  |  |   14|  2.29k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.29k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.29k, False: 4.04k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.29k|        return #name;
  |  |  ------------------
  |  |   15|  2.29k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45, False: 6.30k]
  |  |  |  |  ------------------
  |  |  |  |  100|     45|        return #name;
  |  |  ------------------
  |  |   16|    117|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|    117|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 117, False: 6.22k]
  |  |  |  |  ------------------
  |  |  |  |  100|    117|        return #name;
  |  |  ------------------
  |  |   17|    117|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 6.34k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   18|     12|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 6.33k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   19|     25|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|     25|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 25, False: 6.32k]
  |  |  |  |  ------------------
  |  |  |  |  100|     25|        return #name;
  |  |  ------------------
  |  |   20|     25|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6, False: 6.33k]
  |  |  |  |  ------------------
  |  |  |  |  100|      6|        return #name;
  |  |  ------------------
  |  |   21|    343|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    343|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 343, False: 6.00k]
  |  |  |  |  ------------------
  |  |  |  |  100|    343|        return #name;
  |  |  ------------------
  |  |   22|    343|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|     79|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 79, False: 6.26k]
  |  |  |  |  ------------------
  |  |  |  |  100|     79|        return #name;
  |  |  ------------------
  |  |   23|     79|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     23|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 23, False: 6.32k]
  |  |  |  |  ------------------
  |  |  |  |  100|     23|        return #name;
  |  |  ------------------
  |  |   24|     23|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11, False: 6.33k]
  |  |  |  |  ------------------
  |  |  |  |  100|     11|        return #name;
  |  |  ------------------
  |  |   25|     11|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 6.34k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   26|      4|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 6.34k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   27|     11|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11, False: 6.33k]
  |  |  |  |  ------------------
  |  |  |  |  100|     11|        return #name;
  |  |  ------------------
  |  |   28|     12|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 6.33k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   29|     45|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45, False: 6.30k]
  |  |  |  |  ------------------
  |  |  |  |  100|     45|        return #name;
  |  |  ------------------
  |  |   30|    370|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    370|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 370, False: 5.97k]
  |  |  |  |  ------------------
  |  |  |  |  100|    370|        return #name;
  |  |  ------------------
  |  |   31|    370|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11, False: 6.33k]
  |  |  |  |  ------------------
  |  |  |  |  100|     11|        return #name;
  |  |  ------------------
  |  |   32|     93|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|     93|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 93, False: 6.25k]
  |  |  |  |  ------------------
  |  |  |  |  100|     93|        return #name;
  |  |  ------------------
  |  |   33|     93|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|     33|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 33, False: 6.31k]
  |  |  |  |  ------------------
  |  |  |  |  100|     33|        return #name;
  |  |  ------------------
  |  |   34|     38|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|     38|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 38, False: 6.30k]
  |  |  |  |  ------------------
  |  |  |  |  100|     38|        return #name;
  |  |  ------------------
  |  |   35|    175|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|    175|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 175, False: 6.17k]
  |  |  |  |  ------------------
  |  |  |  |  100|    175|        return #name;
  |  |  ------------------
  |  |   36|    175|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|     72|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 72, False: 6.27k]
  |  |  |  |  ------------------
  |  |  |  |  100|     72|        return #name;
  |  |  ------------------
  |  |   37|    287|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|    287|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 287, False: 6.05k]
  |  |  |  |  ------------------
  |  |  |  |  100|    287|        return #name;
  |  |  ------------------
  |  |   38|    287|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     88|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 88, False: 6.25k]
  |  |  |  |  ------------------
  |  |  |  |  100|     88|        return #name;
  |  |  ------------------
  |  |   39|     88|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 6.34k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   40|    343|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|    343|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 343, False: 6.00k]
  |  |  |  |  ------------------
  |  |  |  |  100|    343|        return #name;
  |  |  ------------------
  |  |   41|    343|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 57, False: 6.28k]
  |  |  |  |  ------------------
  |  |  |  |  100|     57|        return #name;
  |  |  ------------------
  |  |   42|     57|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     34|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 34, False: 6.31k]
  |  |  |  |  ------------------
  |  |  |  |  100|     34|        return #name;
  |  |  ------------------
  |  |   43|     68|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|     68|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 68, False: 6.27k]
  |  |  |  |  ------------------
  |  |  |  |  100|     68|        return #name;
  |  |  ------------------
  |  |   44|    587|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    587|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 587, False: 5.75k]
  |  |  |  |  ------------------
  |  |  |  |  100|    587|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 6.34k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  6.34k|        }
  109|  6.34k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  1.80k|    {
  131|  1.80k|        switch (value)
  132|  1.80k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    164|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|    164|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 164, False: 1.63k]
  |  |  |  |  ------------------
  |  |  |  |  135|    164|        return #name;
  |  |  ------------------
  |  |   48|    260|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|    260|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 260, False: 1.54k]
  |  |  |  |  ------------------
  |  |  |  |  135|    260|        return #name;
  |  |  ------------------
  |  |   49|    265|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|    265|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 265, False: 1.53k]
  |  |  |  |  ------------------
  |  |  |  |  135|    265|        return #name;
  |  |  ------------------
  |  |   50|    265|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 1.79k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   51|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   52|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   53|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   54|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   55|     41|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|     41|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 41, False: 1.76k]
  |  |  |  |  ------------------
  |  |  |  |  135|     41|        return #name;
  |  |  ------------------
  |  |   56|     41|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 1.78k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   57|    223|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|    223|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 223, False: 1.57k]
  |  |  |  |  ------------------
  |  |  |  |  135|    223|        return #name;
  |  |  ------------------
  |  |   58|    223|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   59|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 1.78k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   60|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   61|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 26, False: 1.77k]
  |  |  |  |  ------------------
  |  |  |  |  135|     26|        return #name;
  |  |  ------------------
  |  |   62|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 1.79k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   63|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 1.79k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   64|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   67|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   68|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|     52|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     52|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 52, False: 1.75k]
  |  |  |  |  ------------------
  |  |  |  |  135|     52|        return #name;
  |  |  ------------------
  |  |   71|     52|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   72|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 1.79k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   75|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 1.78k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   77|    546|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    546|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 546, False: 1.25k]
  |  |  |  |  ------------------
  |  |  |  |  135|    546|        return #name;
  |  |  ------------------
  |  |   78|    546|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    132|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 132, False: 1.67k]
  |  |  |  |  ------------------
  |  |  |  |  135|    132|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 1.80k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  1.80k|        }
  144|  1.80k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  3.23k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  3.23k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 46.3k, False: 0]
  ------------------
   64|  46.3k|            {
   65|  46.3k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 3.23k, False: 43.1k]
  ------------------
   66|  3.23k|                {
   67|  3.23k|                    return &token;
   68|  3.23k|                }
   69|  46.3k|            }
   70|       |
   71|      0|            return nullptr;
   72|  3.23k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  68.9k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  68.9k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  68.9k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   100k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   100k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   100k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  12.4k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  12.4k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  12.4k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  15.3k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  2.56k|    {
   25|  2.56k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  2.56k|        switch (argument_number.unsafe())
   28|  2.56k|        {
   29|  1.99k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 1.99k, False: 563]
  ------------------
   30|  1.99k|                m_Arg1 = argument;
   31|  1.99k|                break;
   32|    491|            case 1u:
  ------------------
  |  Branch (32:13): [True: 491, False: 2.06k]
  ------------------
   33|    491|                m_Arg2 = argument;
   34|    491|                break;
   35|     72|            case 2u:
  ------------------
  |  Branch (35:13): [True: 72, False: 2.48k]
  ------------------
   36|     72|                m_Arg3 = argument;
   37|     72|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 2.56k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  2.56k|#endif
   42|  2.56k|        }
   43|  2.56k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  48.7k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  1.25k|    {
  171|  1.25k|        InstructionArgument arg;
  172|  1.25k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  1.25k|        arg.register_int.register_id = id;
  174|  1.25k|        return arg;
  175|  1.25k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|     70|    {
  179|     70|        InstructionArgument arg;
  180|     70|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|     70|        arg.register_float.register_id = id;
  182|     70|        return arg;
  183|     70|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|    346|    {
  187|    346|        InstructionArgument arg;
  188|    346|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|    346|        arg.immediate_value.signed_value = value;
  190|    346|        return arg;
  191|    346|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|    888|    {
  205|    888|        InstructionArgument arg;
  206|    888|        arg.m_Type           = ArgumentType::Label;
  207|    888|        arg.label.label_name = label_name;
  208|    888|        return arg;
  209|    888|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  15.3k|    {
  453|  15.3k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  15.3k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  66.6k|    {
   24|  66.6k|        switch (token.length())
   25|  66.6k|        {
   26|       |            // 1 character OpCodes
   27|  4.97k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 4.97k, False: 61.6k]
  ------------------
   28|  4.97k|                char c1 = token[0];
   29|  4.97k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 1.33k, False: 3.63k]
  ------------------
   30|  1.33k|                {
   31|  1.33k|                    return OpCode::J;
   32|  1.33k|                }
   33|  3.63k|                break;
   34|  4.97k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  9.91k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 9.91k, False: 56.7k]
  ------------------
   38|  9.91k|                char c1 = token[0];
   39|  9.91k|                char c2 = token[1];
   40|       |
   41|  9.91k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 3.49k, False: 6.42k]
  ------------------
   42|  9.91k|                {
   43|     99|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 99, False: 9.81k]
  ------------------
   44|    254|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 155, False: 9.76k]
  ------------------
   45|    254|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 133, False: 121]
  ------------------
   46|    133|                        {
   47|    133|                            return OpCode::JR;
   48|    133|                        }
   49|    121|                        break;
   50|       |
   51|    915|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 915, False: 9.00k]
  ------------------
   52|  1.51k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 604, False: 9.31k]
  ------------------
   53|  1.51k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 106, False: 1.41k]
  ------------------
   54|  1.51k|                        {
   55|    236|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 236, False: 1.28k]
  ------------------
   56|    432|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 196, False: 1.32k]
  ------------------
   57|    432|                                return OpCode::LB;
   58|    196|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 196, False: 1.32k]
  ------------------
   59|    262|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 66, False: 1.45k]
  ------------------
   60|    262|                                return OpCode::LD;
   61|     66|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 66, False: 1.45k]
  ------------------
   62|    132|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 66, False: 1.45k]
  ------------------
   63|    132|                                return OpCode::LF;
   64|    194|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 194, False: 1.32k]
  ------------------
   65|    261|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 67, False: 1.45k]
  ------------------
   66|    261|                                return OpCode::LH;
   67|     67|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 67, False: 1.45k]
  ------------------
   68|    326|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 259, False: 1.26k]
  ------------------
   69|    326|                                return OpCode::LW;
   70|  1.51k|                        }
   71|    106|                        break;
   72|  1.09k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 1.09k, False: 8.82k]
  ------------------
   73|  1.23k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 143, False: 9.77k]
  ------------------
   74|  1.23k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 391, False: 844]
  ------------------
   75|    391|                        {
   76|    391|                            return OpCode::OR;
   77|    391|                        }
   78|    844|                        break;
   79|  1.83k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 1.83k, False: 8.07k]
  ------------------
   80|  3.41k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 1.58k, False: 8.33k]
  ------------------
   81|  3.41k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 1.62k, False: 1.79k]
  ------------------
   82|  3.41k|                        {
   83|     67|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 67, False: 3.35k]
  ------------------
   84|    133|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 66, False: 3.35k]
  ------------------
   85|    133|                                return OpCode::SB;
   86|     71|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 71, False: 3.34k]
  ------------------
   87|    427|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 356, False: 3.06k]
  ------------------
   88|    427|                                return OpCode::SD;
   89|     67|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 67, False: 3.35k]
  ------------------
   90|    261|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 194, False: 3.22k]
  ------------------
   91|    261|                                return OpCode::SF;
   92|    630|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 630, False: 2.78k]
  ------------------
   93|    706|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 76, False: 3.34k]
  ------------------
   94|    706|                                return OpCode::SH;
   95|    194|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 194, False: 3.22k]
  ------------------
   96|    264|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 70, False: 3.34k]
  ------------------
   97|    264|                                return OpCode::SW;
   98|  3.41k|                        }
   99|  1.62k|                        break;
  100|  9.91k|                }
  101|  6.18k|                break;
  102|  9.91k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  21.3k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 21.3k, False: 45.2k]
  ------------------
  106|  21.3k|                char c1 = token[0];
  107|  21.3k|                char c2 = token[1];
  108|  21.3k|                char c3 = token[2];
  109|       |
  110|  21.3k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 2.23k, False: 19.1k]
  ------------------
  111|  21.3k|                {
  112|  5.53k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 5.53k, False: 15.8k]
  ------------------
  113|  6.01k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 477, False: 20.8k]
  ------------------
  114|  6.01k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 5.29k, False: 726]
  |  Branch (114:29): [True: 5.22k, False: 795]
  |  Branch (114:45): [True: 5.22k, False: 69]
  ------------------
  115|  5.22k|                        {
  116|  5.22k|                            return OpCode::ADD;
  117|  5.22k|                        }
  118|    795|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 643, False: 152]
  |  Branch (118:34): [True: 429, False: 366]
  |  Branch (118:50): [True: 429, False: 214]
  ------------------
  119|    429|                        {
  120|    429|                            return OpCode::AND;
  121|    429|                        }
  122|    366|                        break;
  123|       |
  124|    405|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 405, False: 20.9k]
  ------------------
  125|    480|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 75, False: 21.2k]
  ------------------
  126|    480|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 351, False: 129]
  |  Branch (126:29): [True: 285, False: 195]
  |  Branch (126:45): [True: 285, False: 66]
  ------------------
  127|    285|                        {
  128|    285|                            return OpCode::DIV;
  129|    285|                        }
  130|    195|                        break;
  131|       |
  132|    363|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 363, False: 20.9k]
  ------------------
  133|    541|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 178, False: 21.1k]
  ------------------
  134|    541|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 425, False: 116]
  ------------------
  135|    425|                        {
  136|    425|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 132, False: 293]
  ------------------
  137|    132|                            {
  138|    132|                                return OpCode::EQD;
  139|    132|                            }
  140|    293|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 156, False: 137]
  ------------------
  141|    156|                            {
  142|    156|                                return OpCode::EQF;
  143|    156|                            }
  144|    425|                        }
  145|    253|                        break;
  146|       |
  147|  1.76k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 1.76k, False: 19.5k]
  ------------------
  148|  2.16k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 392, False: 20.9k]
  ------------------
  149|  2.16k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 726, False: 1.43k]
  ------------------
  150|    726|                        {
  151|    726|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 399, False: 327]
  ------------------
  152|    399|                            {
  153|    399|                                return OpCode::GED;
  154|    399|                            }
  155|    327|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 261, False: 66]
  ------------------
  156|    261|                            {
  157|    261|                                return OpCode::GEF;
  158|    261|                            }
  159|    726|                        }
  160|  1.43k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.36k, False: 68]
  ------------------
  161|  1.36k|                        {
  162|  1.36k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 670, False: 696]
  ------------------
  163|    670|                            {
  164|    670|                                return OpCode::GTD;
  165|    670|                            }
  166|    696|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 346, False: 350]
  ------------------
  167|    346|                            {
  168|    346|                                return OpCode::GTF;
  169|    346|                            }
  170|    696|                        }
  171|    484|                        break;
  172|       |
  173|    484|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 74, False: 21.2k]
  ------------------
  174|    416|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 342, False: 21.0k]
  ------------------
  175|    416|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 345, False: 71]
  |  Branch (175:29): [True: 137, False: 279]
  |  Branch (175:45): [True: 137, False: 208]
  ------------------
  176|    137|                        {
  177|    137|                            return OpCode::JAL;
  178|    137|                        }
  179|    279|                        break;
  180|       |
  181|  1.03k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 1.03k, False: 20.3k]
  ------------------
  182|  1.98k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 949, False: 20.4k]
  ------------------
  183|  1.98k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 69, False: 1.91k]
  ------------------
  184|  1.98k|                        {
  185|     66|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 66, False: 1.91k]
  ------------------
  186|    328|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 262, False: 1.71k]
  ------------------
  187|    328|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 132, False: 196]
  ------------------
  188|    132|                                {
  189|    132|                                    return OpCode::LBU;
  190|    132|                                }
  191|    196|                                break;
  192|       |
  193|    461|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 461, False: 1.52k]
  ------------------
  194|    645|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 184, False: 1.79k]
  ------------------
  195|    645|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 261, False: 384]
  ------------------
  196|    261|                                {
  197|    261|                                    return OpCode::LED;
  198|    261|                                }
  199|    384|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 318, False: 66]
  ------------------
  200|    318|                                {
  201|    318|                                    return OpCode::LEF;
  202|    318|                                }
  203|     66|                                break;
  204|       |
  205|    196|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 196, False: 1.78k]
  ------------------
  206|    341|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 145, False: 1.83k]
  ------------------
  207|    341|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 143, False: 198]
  ------------------
  208|    143|                                {
  209|    143|                                    return OpCode::LHI;
  210|    143|                                }
  211|    198|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 132, False: 66]
  ------------------
  212|    132|                                {
  213|    132|                                    return OpCode::LHU;
  214|    132|                                }
  215|     66|                                break;
  216|       |
  217|    181|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 181, False: 1.80k]
  ------------------
  218|    382|                            case 't':
  ------------------
  |  Branch (218:29): [True: 201, False: 1.78k]
  ------------------
  219|    382|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 134, False: 248]
  ------------------
  220|    134|                                {
  221|    134|                                    return OpCode::LTD;
  222|    134|                                }
  223|    248|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 166, False: 82]
  ------------------
  224|    166|                                {
  225|    166|                                    return OpCode::LTF;
  226|    166|                                }
  227|     82|                                break;
  228|       |
  229|     82|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 78, False: 1.90k]
  ------------------
  230|    216|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 138, False: 1.84k]
  ------------------
  231|    216|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 132, False: 84]
  ------------------
  232|    132|                                {
  233|    132|                                    return OpCode::LWU;
  234|    132|                                }
  235|     84|                                break;
  236|  1.98k|                        }
  237|    563|                        break;
  238|       |
  239|    657|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 657, False: 20.7k]
  ------------------
  240|  1.41k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 753, False: 20.6k]
  ------------------
  241|  1.41k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 460, False: 950]
  ------------------
  242|    460|                        {
  243|    460|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 134, False: 326]
  ------------------
  244|    134|                            {
  245|    134|                                return OpCode::NED;
  246|    134|                            }
  247|    326|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 132, False: 194]
  ------------------
  248|    132|                            {
  249|    132|                                return OpCode::NEF;
  250|    132|                            }
  251|    460|                        }
  252|    950|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 595, False: 355]
  |  Branch (252:34): [True: 345, False: 605]
  |  Branch (252:50): [True: 345, False: 250]
  ------------------
  253|    345|                        {
  254|    345|                            return OpCode::NOP;
  255|    345|                        }
  256|       |
  257|    799|                        break;
  258|       |
  259|    799|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 195, False: 21.1k]
  ------------------
  260|    275|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 80, False: 21.2k]
  ------------------
  261|    275|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 203, False: 72]
  |  Branch (261:29): [True: 136, False: 139]
  |  Branch (261:45): [True: 136, False: 67]
  ------------------
  262|    136|                        {
  263|    136|                            return OpCode::ORI;
  264|    136|                        }
  265|    139|                        break;
  266|       |
  267|  4.92k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 4.92k, False: 16.4k]
  ------------------
  268|  5.51k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 592, False: 20.7k]
  ------------------
  269|  5.51k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 156, False: 5.36k]
  ------------------
  270|  5.51k|                        {
  271|    242|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 242, False: 5.27k]
  ------------------
  272|    376|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 134, False: 5.38k]
  ------------------
  273|    376|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 308, False: 68]
  ------------------
  274|    308|                                {
  275|    308|                                    return OpCode::SBU;
  276|    308|                                }
  277|     68|                                break;
  278|       |
  279|     84|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 84, False: 5.43k]
  ------------------
  280|    746|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 662, False: 4.85k]
  ------------------
  281|    746|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 416, False: 330]
  ------------------
  282|    416|                                {
  283|    416|                                    return OpCode::SEQ;
  284|    416|                                }
  285|    330|                                break;
  286|       |
  287|    330|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 142, False: 5.37k]
  ------------------
  288|    345|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 203, False: 5.31k]
  ------------------
  289|    345|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 139, False: 206]
  ------------------
  290|    139|                                {
  291|    139|                                    return OpCode::SGE;
  292|    139|                                }
  293|    206|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 140, False: 66]
  ------------------
  294|    140|                                {
  295|    140|                                    return OpCode::SGT;
  296|    140|                                }
  297|     66|                                break;
  298|       |
  299|    319|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 319, False: 5.19k]
  ------------------
  300|    448|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 129, False: 5.38k]
  ------------------
  301|    448|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 382, False: 66]
  ------------------
  302|    382|                                {
  303|    382|                                    return OpCode::SHU;
  304|    382|                                }
  305|     66|                                break;
  306|       |
  307|  1.16k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.16k, False: 4.34k]
  ------------------
  308|  1.46k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 301, False: 5.21k]
  ------------------
  309|  1.46k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 68, False: 1.40k]
  ------------------
  310|  1.46k|                                {
  311|    260|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 260, False: 1.20k]
  ------------------
  312|    329|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 69, False: 1.39k]
  ------------------
  313|    329|                                        return OpCode::SLA;
  314|       |
  315|    362|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 362, False: 1.10k]
  ------------------
  316|    434|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 72, False: 1.39k]
  ------------------
  317|    434|                                        return OpCode::SLE;
  318|       |
  319|    424|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 424, False: 1.04k]
  ------------------
  320|    495|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 71, False: 1.39k]
  ------------------
  321|    495|                                        return OpCode::SLL;
  322|       |
  323|     73|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 73, False: 1.39k]
  ------------------
  324|    142|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 69, False: 1.39k]
  ------------------
  325|    142|                                        return OpCode::SLT;
  326|  1.46k|                                }
  327|     68|                                break;
  328|       |
  329|     69|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 69, False: 5.44k]
  ------------------
  330|    217|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 148, False: 5.36k]
  ------------------
  331|    217|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 150, False: 67]
  ------------------
  332|    150|                                {
  333|    150|                                    return OpCode::SNE;
  334|    150|                                }
  335|     67|                                break;
  336|       |
  337|    380|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 380, False: 5.13k]
  ------------------
  338|    981|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 601, False: 4.91k]
  ------------------
  339|    981|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 310, False: 671]
  ------------------
  340|    310|                                {
  341|    310|                                    return OpCode::SRA;
  342|    310|                                }
  343|    671|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 227, False: 444]
  ------------------
  344|    227|                                {
  345|    227|                                    return OpCode::SRL;
  346|    227|                                }
  347|    444|                                break;
  348|       |
  349|    444|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 347, False: 5.16k]
  ------------------
  350|    545|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 198, False: 5.31k]
  ------------------
  351|    545|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 470, False: 75]
  ------------------
  352|    470|                                {
  353|    470|                                    return OpCode::SUB;
  354|    470|                                }
  355|     75|                                break;
  356|       |
  357|    134|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 134, False: 5.38k]
  ------------------
  358|    234|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 100, False: 5.41k]
  ------------------
  359|    234|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 141, False: 93]
  ------------------
  360|    141|                                {
  361|    141|                                    return OpCode::SWU;
  362|    141|                                }
  363|     93|                                break;
  364|  5.51k|                        }
  365|       |
  366|  1.53k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 99, False: 21.2k]
  ------------------
  367|  1.76k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 230, False: 21.1k]
  ------------------
  368|  1.76k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 240, False: 1.52k]
  |  Branch (368:29): [True: 172, False: 1.59k]
  |  Branch (368:45): [True: 172, False: 68]
  ------------------
  369|    172|                        {
  370|    172|                            return OpCode::XOR;
  371|    172|                        }
  372|  1.59k|                        break;
  373|  21.3k|                }
  374|  6.90k|                break;
  375|  21.3k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  19.3k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 19.3k, False: 47.2k]
  ------------------
  379|  19.3k|                char c1 = token[0];
  380|  19.3k|                char c2 = token[1];
  381|  19.3k|                char c3 = token[2];
  382|  19.3k|                char c4 = token[3];
  383|       |
  384|  19.3k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 1.51k, False: 17.8k]
  ------------------
  385|  19.3k|                {
  386|  2.20k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 2.20k, False: 17.1k]
  ------------------
  387|  2.49k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 286, False: 19.0k]
  ------------------
  388|  2.49k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 67, False: 2.42k]
  ------------------
  389|  2.49k|                        {
  390|  1.97k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 1.97k, False: 524]
  ------------------
  391|  2.12k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 156, False: 2.33k]
  ------------------
  392|  2.12k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 1.92k, False: 205]
  ------------------
  393|  1.92k|                                {
  394|  1.92k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 66, False: 1.85k]
  ------------------
  395|  1.92k|                                    {
  396|    308|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 308, False: 1.61k]
  ------------------
  397|    374|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 1.85k]
  ------------------
  398|    374|                                            return OpCode::ADDD;
  399|       |
  400|    402|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 402, False: 1.51k]
  ------------------
  401|    468|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 66, False: 1.85k]
  ------------------
  402|    468|                                            return OpCode::ADDF;
  403|       |
  404|    535|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 535, False: 1.38k]
  ------------------
  405|    601|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 1.85k]
  ------------------
  406|    601|                                            return OpCode::ADDI;
  407|       |
  408|    346|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 346, False: 1.57k]
  ------------------
  409|    412|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 66, False: 1.85k]
  ------------------
  410|    412|                                            return OpCode::ADDU;
  411|  1.92k|                                    }
  412|  1.92k|                                }
  413|    271|                                break;
  414|       |
  415|    271|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 128, False: 2.36k]
  ------------------
  416|    301|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 173, False: 2.32k]
  ------------------
  417|    301|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 232, False: 69]
  |  Branch (417:37): [True: 160, False: 141]
  |  Branch (417:53): [True: 160, False: 72]
  ------------------
  418|    160|                                {
  419|    160|                                    return OpCode::ANDI;
  420|    160|                                }
  421|       |
  422|    141|                                break;
  423|  2.49k|                        }
  424|    479|                        break;
  425|       |
  426|  2.01k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 2.01k, False: 17.3k]
  ------------------
  427|  3.17k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 1.15k, False: 18.2k]
  ------------------
  428|  3.17k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 89, False: 3.08k]
  ------------------
  429|  3.17k|                        {
  430|    114|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 114, False: 3.05k]
  ------------------
  431|    885|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 771, False: 2.40k]
  ------------------
  432|    885|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 538, False: 347]
  |  Branch (432:37): [True: 467, False: 418]
  |  Branch (432:53): [True: 467, False: 71]
  ------------------
  433|    467|                                {
  434|    467|                                    return OpCode::BEQZ;
  435|    467|                                }
  436|    418|                                break;
  437|       |
  438|  1.46k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.46k, False: 1.70k]
  ------------------
  439|  1.72k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 264, False: 2.90k]
  ------------------
  440|  1.72k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 1.66k, False: 66]
  ------------------
  441|  1.66k|                                {
  442|  1.66k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.07k, False: 585]
  ------------------
  443|  1.07k|                                    {
  444|  1.07k|                                        return OpCode::BFPF;
  445|  1.07k|                                    }
  446|    585|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 519, False: 66]
  ------------------
  447|    519|                                    {
  448|    519|                                        return OpCode::BFPT;
  449|    519|                                    }
  450|  1.66k|                                }
  451|    132|                                break;
  452|       |
  453|    302|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 302, False: 2.86k]
  ------------------
  454|    468|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 166, False: 3.00k]
  ------------------
  455|    468|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 402, False: 66]
  |  Branch (455:37): [True: 336, False: 132]
  |  Branch (455:53): [True: 336, False: 66]
  ------------------
  456|    336|                                {
  457|    336|                                    return OpCode::BNEZ;
  458|    336|                                }
  459|  3.17k|                        }
  460|    771|                        break;
  461|       |
  462|  1.09k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.09k, False: 18.2k]
  ------------------
  463|  1.21k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 114, False: 19.2k]
  ------------------
  464|  1.21k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 1.09k, False: 118]
  |  Branch (464:29): [True: 1.02k, False: 185]
  |  Branch (464:45): [True: 1.02k, False: 67]
  ------------------
  465|  1.02k|                        {
  466|  1.02k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 97, False: 928]
  ------------------
  467|  1.02k|                            {
  468|    201|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 201, False: 824]
  ------------------
  469|    267|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 959]
  ------------------
  470|    267|                                    return OpCode::DIVD;
  471|       |
  472|     68|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 68, False: 957]
  ------------------
  473|    134|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 959]
  ------------------
  474|    134|                                    return OpCode::DIVF;
  475|       |
  476|    201|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 201, False: 824]
  ------------------
  477|    267|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 959]
  ------------------
  478|    267|                                    return OpCode::DIVI;
  479|       |
  480|    194|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 194, False: 831]
  ------------------
  481|    260|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 66, False: 959]
  ------------------
  482|    260|                                    return OpCode::DIVU;
  483|  1.02k|                            }
  484|  1.02k|                        }
  485|    282|                        break;
  486|       |
  487|    282|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 90, False: 19.2k]
  ------------------
  488|    580|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 490, False: 18.8k]
  ------------------
  489|    580|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 482, False: 98]
  |  Branch (489:29): [True: 136, False: 444]
  |  Branch (489:45): [True: 416, False: 66]
  |  Branch (489:61): [True: 136, False: 280]
  ------------------
  490|    136|                        {
  491|    136|                            return OpCode::HALT;
  492|    136|                        }
  493|    444|                        break;
  494|       |
  495|    444|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 288, False: 19.0k]
  ------------------
  496|    732|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 444, False: 18.9k]
  ------------------
  497|    732|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 524, False: 208]
  |  Branch (497:29): [True: 132, False: 600]
  |  Branch (497:45): [True: 198, False: 326]
  |  Branch (497:61): [True: 132, False: 66]
  ------------------
  498|    132|                        {
  499|    132|                            return OpCode::JALR;
  500|    132|                        }
  501|    600|                        break;
  502|       |
  503|    995|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 995, False: 18.3k]
  ------------------
  504|  1.36k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 373, False: 18.9k]
  ------------------
  505|  1.36k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 809, False: 559]
  |  Branch (505:29): [True: 743, False: 625]
  |  Branch (505:45): [True: 743, False: 66]
  ------------------
  506|    743|                        {
  507|    743|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 522, False: 221]
  ------------------
  508|    522|                            {
  509|    522|                                return OpCode::MOVD;
  510|    522|                            }
  511|    221|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 155, False: 66]
  ------------------
  512|    155|                            {
  513|    155|                                return OpCode::MOVF;
  514|    155|                            }
  515|    743|                        }
  516|    625|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 555, False: 70]
  |  Branch (516:34): [True: 135, False: 490]
  |  Branch (516:50): [True: 486, False: 69]
  |  Branch (516:66): [True: 135, False: 351]
  ------------------
  517|    135|                        {
  518|    135|                            return OpCode::MULT;
  519|    135|                        }
  520|    556|                        break;
  521|       |
  522|  6.02k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 6.02k, False: 13.3k]
  ------------------
  523|  7.35k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 1.33k, False: 18.0k]
  ------------------
  524|  7.35k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 104, False: 7.24k]
  ------------------
  525|  7.35k|                        {
  526|    437|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 437, False: 6.91k]
  ------------------
  527|  1.11k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 678, False: 6.67k]
  ------------------
  528|  1.11k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 787, False: 328]
  ------------------
  529|    787|                                {
  530|    787|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 524, False: 263]
  ------------------
  531|    524|                                    {
  532|    524|                                        return OpCode::SEQI;
  533|    524|                                    }
  534|    263|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 181, False: 82]
  ------------------
  535|    181|                                    {
  536|    181|                                        return OpCode::SEQU;
  537|    181|                                    }
  538|    787|                                }
  539|    410|                                break;
  540|       |
  541|    525|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 525, False: 6.82k]
  ------------------
  542|  1.11k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 593, False: 6.75k]
  ------------------
  543|  1.11k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 517, False: 601]
  ------------------
  544|    517|                                {
  545|    517|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 135, False: 382]
  ------------------
  546|    135|                                    {
  547|    135|                                        return OpCode::SGEI;
  548|    135|                                    }
  549|    382|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 316, False: 66]
  ------------------
  550|    316|                                    {
  551|    316|                                        return OpCode::SGEU;
  552|    316|                                    }
  553|    517|                                }
  554|    601|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 532, False: 69]
  ------------------
  555|    532|                                {
  556|    532|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 205, False: 327]
  ------------------
  557|    205|                                    {
  558|    205|                                        return OpCode::SGTI;
  559|    205|                                    }
  560|    327|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 133, False: 194]
  ------------------
  561|    133|                                    {
  562|    133|                                        return OpCode::SGTU;
  563|    133|                                    }
  564|    532|                                }
  565|    329|                                break;
  566|       |
  567|  1.50k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 1.50k, False: 5.85k]
  ------------------
  568|  2.20k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 702, False: 6.65k]
  ------------------
  569|  2.20k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 66, False: 2.13k]
  ------------------
  570|  2.20k|                                {
  571|    288|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 288, False: 1.91k]
  ------------------
  572|    401|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 113, False: 2.08k]
  ------------------
  573|    401|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 335, False: 66]
  ------------------
  574|    335|                                        {
  575|    335|                                            return OpCode::SLAI;
  576|    335|                                        }
  577|     66|                                        break;
  578|       |
  579|    630|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 630, False: 1.57k]
  ------------------
  580|    794|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 164, False: 2.03k]
  ------------------
  581|    794|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 520, False: 274]
  ------------------
  582|    520|                                        {
  583|    520|                                            return OpCode::SLEI;
  584|    520|                                        }
  585|    274|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 208, False: 66]
  ------------------
  586|    208|                                        {
  587|    208|                                            return OpCode::SLEU;
  588|    208|                                        }
  589|     66|                                        break;
  590|       |
  591|    290|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 290, False: 1.91k]
  ------------------
  592|    423|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 133, False: 2.06k]
  ------------------
  593|    423|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 354, False: 69]
  ------------------
  594|    354|                                        {
  595|    354|                                            return OpCode::SLLI;
  596|    354|                                        }
  597|     69|                                        break;
  598|       |
  599|    377|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 377, False: 1.82k]
  ------------------
  600|    518|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 141, False: 2.06k]
  ------------------
  601|    518|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 320, False: 198]
  ------------------
  602|    320|                                        {
  603|    320|                                            return OpCode::SLTI;
  604|    320|                                        }
  605|    198|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 132, False: 66]
  ------------------
  606|    132|                                        {
  607|    132|                                            return OpCode::SLTU;
  608|    132|                                        }
  609|     66|                                        break;
  610|  2.20k|                                }
  611|       |
  612|    639|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 306, False: 7.04k]
  ------------------
  613|    911|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 272, False: 7.08k]
  ------------------
  614|    911|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 643, False: 268]
  ------------------
  615|    643|                                {
  616|    643|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 173, False: 470]
  ------------------
  617|    173|                                    {
  618|    173|                                        return OpCode::SNEI;
  619|    173|                                    }
  620|    470|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 403, False: 67]
  ------------------
  621|    403|                                    {
  622|    403|                                        return OpCode::SNEU;
  623|    403|                                    }
  624|    643|                                }
  625|    335|                                break;
  626|       |
  627|    335|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 272, False: 7.08k]
  ------------------
  628|    474|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 202, False: 7.15k]
  ------------------
  629|    474|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 208, False: 266]
  |  Branch (629:37): [True: 141, False: 333]
  |  Branch (629:53): [True: 141, False: 67]
  ------------------
  630|    141|                                {
  631|    141|                                    return OpCode::SRAI;
  632|    141|                                }
  633|    333|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 259, False: 74]
  |  Branch (633:42): [True: 163, False: 170]
  |  Branch (633:58): [True: 163, False: 96]
  ------------------
  634|    163|                                {
  635|    163|                                    return OpCode::SRLI;
  636|    163|                                }
  637|    170|                                break;
  638|       |
  639|    913|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 913, False: 6.43k]
  ------------------
  640|  1.76k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 848, False: 6.50k]
  ------------------
  641|  1.76k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 1.55k, False: 203]
  ------------------
  642|  1.55k|                                {
  643|  1.55k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 383, False: 1.17k]
  ------------------
  644|  1.55k|                                    {
  645|     68|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 68, False: 1.49k]
  ------------------
  646|    134|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 1.49k]
  ------------------
  647|    134|                                            return OpCode::SUBD;
  648|       |
  649|    258|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 258, False: 1.30k]
  ------------------
  650|    324|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 66, False: 1.49k]
  ------------------
  651|    324|                                            return OpCode::SUBF;
  652|       |
  653|    320|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 320, False: 1.23k]
  ------------------
  654|    386|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 1.49k]
  ------------------
  655|    386|                                            return OpCode::SUBI;
  656|       |
  657|    265|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 265, False: 1.29k]
  ------------------
  658|    331|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 1.49k]
  ------------------
  659|    331|                                            return OpCode::SUBU;
  660|  1.55k|                                    }
  661|  1.55k|                                }
  662|    586|                                break;
  663|  7.35k|                        }
  664|  1.93k|                        break;
  665|       |
  666|  1.93k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 486, False: 18.8k]
  ------------------
  667|    600|                    case 't':
  ------------------
  |  Branch (667:21): [True: 114, False: 19.2k]
  ------------------
  668|    600|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 534, False: 66]
  |  Branch (668:29): [True: 353, False: 247]
  |  Branch (668:45): [True: 458, False: 76]
  |  Branch (668:61): [True: 353, False: 105]
  ------------------
  669|    353|                        {
  670|    353|                            return OpCode::TRAP;
  671|    353|                        }
  672|    247|                        break;
  673|    247|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 170, False: 19.1k]
  ------------------
  674|    332|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 162, False: 19.1k]
  ------------------
  675|    332|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 265, False: 67]
  |  Branch (675:29): [True: 133, False: 199]
  |  Branch (675:45): [True: 199, False: 66]
  |  Branch (675:61): [True: 133, False: 66]
  ------------------
  676|    133|                        {
  677|    133|                            return OpCode::XORI;
  678|    133|                        }
  679|    199|                        break;
  680|  19.3k|                }
  681|  7.02k|                break;
  682|  19.3k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  7.02k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 4.00k, False: 62.6k]
  ------------------
  686|  4.00k|                char c1 = token[0];
  687|  4.00k|                char c2 = token[1];
  688|  4.00k|                char c3 = token[2];
  689|  4.00k|                char c4 = token[3];
  690|  4.00k|                char c5 = token[4];
  691|       |
  692|  4.00k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 508, False: 3.49k]
  ------------------
  693|  4.00k|                {
  694|    809|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 809, False: 3.19k]
  ------------------
  695|    809|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 4.00k]
  ------------------
  696|    809|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 809, False: 0]
  |  Branch (696:29): [True: 809, False: 0]
  |  Branch (696:45): [True: 809, False: 0]
  |  Branch (696:61): [True: 809, False: 0]
  |  Branch (696:77): [True: 809, False: 0]
  ------------------
  697|    809|                        {
  698|    809|                            return OpCode::ADDUI;
  699|    809|                        }
  700|      0|                        break;
  701|       |
  702|     84|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 84, False: 3.92k]
  ------------------
  703|     84|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 4.00k]
  ------------------
  704|     84|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 84, False: 0]
  |  Branch (704:29): [True: 84, False: 0]
  |  Branch (704:45): [True: 84, False: 0]
  |  Branch (704:61): [True: 84, False: 0]
  |  Branch (704:77): [True: 84, False: 0]
  ------------------
  705|     84|                        {
  706|     84|                            return OpCode::DIVUI;
  707|     84|                        }
  708|      0|                        break;
  709|       |
  710|    669|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 669, False: 3.33k]
  ------------------
  711|    669|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 4.00k]
  ------------------
  712|    669|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 669, False: 0]
  |  Branch (712:29): [True: 669, False: 0]
  |  Branch (712:45): [True: 669, False: 0]
  |  Branch (712:61): [True: 669, False: 0]
  ------------------
  713|    669|                        {
  714|    669|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 669]
  ------------------
  715|    669|                            {
  716|     71|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 71, False: 598]
  ------------------
  717|     71|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 669]
  ------------------
  718|     71|                                    return OpCode::MULTD;
  719|       |
  720|    456|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 456, False: 213]
  ------------------
  721|    456|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 669]
  ------------------
  722|    456|                                    return OpCode::MULTF;
  723|       |
  724|     67|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 67, False: 602]
  ------------------
  725|     67|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 669]
  ------------------
  726|     67|                                    return OpCode::MULTI;
  727|       |
  728|     75|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 75, False: 594]
  ------------------
  729|     75|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 669]
  ------------------
  730|     75|                                    return OpCode::MULTU;
  731|    669|                            }
  732|    669|                        }
  733|      0|                        break;
  734|       |
  735|  1.93k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 1.93k, False: 2.07k]
  ------------------
  736|  1.93k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 4.00k]
  ------------------
  737|  1.93k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 1.93k]
  ------------------
  738|  1.93k|                        {
  739|    459|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 459, False: 1.47k]
  ------------------
  740|    459|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 1.93k]
  ------------------
  741|    459|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 459, False: 0]
  |  Branch (741:37): [True: 459, False: 0]
  |  Branch (741:53): [True: 459, False: 0]
  |  Branch (741:69): [True: 459, False: 0]
  ------------------
  742|    459|                                {
  743|    459|                                    return OpCode::SEQUI;
  744|    459|                                }
  745|      0|                                break;
  746|       |
  747|    823|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 823, False: 1.11k]
  ------------------
  748|    823|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 1.93k]
  ------------------
  749|    823|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 446, False: 377]
  |  Branch (749:37): [True: 446, False: 377]
  |  Branch (749:53): [True: 446, False: 0]
  |  Branch (749:69): [True: 446, False: 0]
  ------------------
  750|    446|                                {
  751|    446|                                    return OpCode::SGEUI;
  752|    446|                                }
  753|    377|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 377, False: 0]
  |  Branch (753:42): [True: 377, False: 0]
  |  Branch (753:58): [True: 377, False: 0]
  |  Branch (753:74): [True: 377, False: 0]
  ------------------
  754|    377|                                {
  755|    377|                                    return OpCode::SGTUI;
  756|    377|                                }
  757|      0|                                break;
  758|       |
  759|    277|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 277, False: 1.65k]
  ------------------
  760|    277|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 1.93k]
  ------------------
  761|    277|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 77, False: 200]
  |  Branch (761:37): [True: 77, False: 200]
  |  Branch (761:53): [True: 77, False: 0]
  |  Branch (761:69): [True: 77, False: 0]
  ------------------
  762|     77|                                {
  763|     77|                                    return OpCode::SLEUI;
  764|     77|                                }
  765|    200|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 200, False: 0]
  |  Branch (765:42): [True: 200, False: 0]
  |  Branch (765:58): [True: 200, False: 0]
  |  Branch (765:74): [True: 200, False: 0]
  ------------------
  766|    200|                                {
  767|    200|                                    return OpCode::SLTUI;
  768|    200|                                }
  769|      0|                                break;
  770|       |
  771|     66|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 66, False: 1.86k]
  ------------------
  772|     66|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 1.93k]
  ------------------
  773|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 66, False: 0]
  |  Branch (773:37): [True: 66, False: 0]
  |  Branch (773:53): [True: 66, False: 0]
  |  Branch (773:69): [True: 66, False: 0]
  ------------------
  774|     66|                                {
  775|     66|                                    return OpCode::SNEUI;
  776|     66|                                }
  777|      0|                                break;
  778|       |
  779|    309|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 309, False: 1.62k]
  ------------------
  780|    309|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 1.93k]
  ------------------
  781|    309|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 309, False: 0]
  |  Branch (781:37): [True: 309, False: 0]
  |  Branch (781:53): [True: 309, False: 0]
  |  Branch (781:69): [True: 309, False: 0]
  ------------------
  782|    309|                                {
  783|    309|                                    return OpCode::SUBUI;
  784|    309|                                }
  785|      0|                                break;
  786|  1.93k|                        }
  787|       |
  788|      0|                        break;
  789|  4.00k|                }
  790|       |
  791|    508|                break;
  792|  4.00k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  1.33k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 1.33k, False: 65.2k]
  ------------------
  796|  1.33k|                char c1 = token[0];
  797|  1.33k|                char c2 = token[1];
  798|  1.33k|                char c3 = token[2];
  799|  1.33k|                char c4 = token[3];
  800|  1.33k|                char c5 = token[4];
  801|  1.33k|                char c6 = token[5];
  802|       |
  803|  1.33k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 873, False: 466]
  |  Branch (803:21): [True: 873, False: 466]
  |  Branch (803:37): [True: 873, False: 0]
  |  Branch (803:53): [True: 873, False: 0]
  ------------------
  804|    873|                {
  805|    873|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 873]
  ------------------
  806|    873|                    {
  807|    265|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 265, False: 608]
  ------------------
  808|    265|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 873]
  ------------------
  809|    265|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 265, False: 0]
  ------------------
  810|    265|                            {
  811|    265|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 197, False: 68]
  ------------------
  812|    197|                                {
  813|    197|                                    return OpCode::CVTD2F;
  814|    197|                                }
  815|     68|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 68, False: 0]
  ------------------
  816|     68|                                {
  817|     68|                                    return OpCode::CVTD2I;
  818|     68|                                }
  819|    265|                            }
  820|      0|                            break;
  821|       |
  822|    289|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 289, False: 584]
  ------------------
  823|    289|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 873]
  ------------------
  824|    289|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 289, False: 0]
  ------------------
  825|    289|                            {
  826|    289|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 94, False: 195]
  ------------------
  827|     94|                                {
  828|     94|                                    return OpCode::CVTF2D;
  829|     94|                                }
  830|    195|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 195, False: 0]
  ------------------
  831|    195|                                {
  832|    195|                                    return OpCode::CVTF2I;
  833|    195|                                }
  834|    289|                            }
  835|      0|                            break;
  836|       |
  837|    319|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 319, False: 554]
  ------------------
  838|    319|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 873]
  ------------------
  839|    319|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 319, False: 0]
  ------------------
  840|    319|                            {
  841|    319|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 250, False: 69]
  ------------------
  842|    250|                                {
  843|    250|                                    return OpCode::CVTI2D;
  844|    250|                                }
  845|     69|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 69, False: 0]
  ------------------
  846|     69|                                {
  847|     69|                                    return OpCode::CVTI2F;
  848|     69|                                }
  849|    319|                            }
  850|    873|                    }
  851|    873|                }
  852|    466|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 197, False: 269]
  |  Branch (852:26): [True: 197, False: 269]
  |  Branch (852:42): [True: 197, False: 0]
  |  Branch (852:58): [True: 197, False: 0]
  |  Branch (852:74): [True: 197, False: 0]
  ------------------
  853|    466|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 197, False: 0]
  |  Branch (853:42): [True: 197, False: 0]
  ------------------
  854|    197|                {
  855|    197|                    return OpCode::MULTUI;
  856|    197|                }
  857|    269|                break;
  858|  1.33k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|    291|            case 7: {
  ------------------
  |  Branch (861:13): [True: 291, False: 66.3k]
  ------------------
  862|    291|                char c1 = token[0];
  863|    291|                char c2 = token[1];
  864|    291|                char c3 = token[2];
  865|    291|                char c4 = token[3];
  866|    291|                char c5 = token[4];
  867|    291|                char c6 = token[5];
  868|    291|                char c7 = token[6];
  869|       |
  870|    291|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 191, False: 100]
  |  Branch (870:21): [True: 191, False: 100]
  |  Branch (870:37): [True: 191, False: 0]
  |  Branch (870:53): [True: 191, False: 0]
  ------------------
  871|    191|                {
  872|    191|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 84, False: 107]
  |  Branch (872:25): [True: 84, False: 107]
  |  Branch (872:41): [True: 84, False: 0]
  |  Branch (872:54): [True: 84, False: 0]
  |  Branch (872:70): [True: 84, False: 0]
  ------------------
  873|     84|                    {
  874|     84|                        return OpCode::MOVI2FP;
  875|     84|                    }
  876|    107|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 107, False: 0]
  |  Branch (876:30): [True: 107, False: 0]
  |  Branch (876:46): [True: 107, False: 0]
  |  Branch (876:62): [True: 107, False: 0]
  |  Branch (876:75): [True: 107, False: 0]
  ------------------
  877|    107|                    {
  878|    107|                        return OpCode::MOVFP2I;
  879|    107|                    }
  880|    191|                }
  881|    100|                break;
  882|    291|            }
  883|       |
  884|  5.40k|            default: {
  ------------------
  |  Branch (884:13): [True: 5.40k, False: 61.2k]
  ------------------
  885|  5.40k|                break;
  886|    291|            }
  887|  66.6k|        }
  888|       |
  889|       |        // None found
  890|  30.0k|        return OpCode::NONE;
  891|  66.6k|    }
_ZN3dlx3iceEcc:
   17|  96.2k|    {
   18|  96.2k|        constexpr const char diff = 'a' - 'A';
   19|  96.2k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 52.0k, False: 44.1k]
  |  Branch (19:28): [True: 16.1k, False: 28.0k]
  ------------------
   20|  96.2k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  71.7k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  1.02k|    {
  193|  1.02k|        ParseError err;
  194|       |
  195|  1.02k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  1.02k|        err.m_LineNumber                           = line_number;
  197|  1.02k|        err.m_Column                               = column;
  198|  1.02k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  1.02k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  1.02k|        return err;
  202|  1.02k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  1.02k|    {
  207|  1.02k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  1.02k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  1.02k|                                                         actual_type);
  210|  1.02k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|     79|    {
  216|     79|        ParseError err;
  217|       |
  218|     79|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|     79|        err.m_LineNumber        = line_number;
  220|     79|        err.m_Column            = column;
  221|     79|        err.invalid_number.text = text;
  222|       |
  223|     79|        return err;
  224|     79|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|     79|    {
  228|     79|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|     79|                                                token.GetColumn().unsafe(), token.GetText());
  230|     79|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  22.5k|    {
  255|  22.5k|        ParseError err;
  256|       |
  257|  22.5k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  22.5k|        err.m_LineNumber                   = line_number;
  259|  22.5k|        err.m_Column                       = column;
  260|  22.5k|        err.unexpected_token.expected_type = expected_type;
  261|  22.5k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  22.5k|        return err;
  264|  22.5k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  22.5k|    {
  269|  22.5k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  22.5k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  22.5k|                                                  token.GetType());
  272|  22.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  1.42k|    {
  277|  1.42k|        ParseError err;
  278|       |
  279|  1.42k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  1.42k|        err.m_LineNumber                   = line_number;
  281|  1.42k|        err.m_Column                       = column;
  282|  1.42k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  1.42k|        return err;
  285|  1.42k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    417|    {
  289|    417|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    417|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    417|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  14.4k|    {
  296|  14.4k|        ParseError err;
  297|       |
  298|  14.4k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  14.4k|        err.m_LineNumber                       = line_number;
  300|  14.4k|        err.m_Column                           = column;
  301|  14.4k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  14.4k|        return err;
  304|  14.4k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  14.4k|    {
  309|  14.4k|        return ConstructInvalidLabelIdentifierParseError(
  310|  14.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  14.4k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  3.23k|    {
  317|  3.23k|        ParseError err;
  318|       |
  319|  3.23k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  3.23k|        err.m_LineNumber                     = line_number;
  321|  3.23k|        err.m_Column                         = column;
  322|  3.23k|        err.label_already_defined.label_name = label_name;
  323|  3.23k|        err.label_already_defined.at_line    = at_line;
  324|  3.23k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  3.23k|        return err;
  327|  3.23k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  3.23k|    {
  332|  3.23k|        return ConstructLabelAlreadyDefinedParseError(
  333|  3.23k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  3.23k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  3.23k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  19.1k|    {
  340|  19.1k|        ParseError err;
  341|       |
  342|  19.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  19.1k|        err.m_LineNumber = line_number;
  344|  19.1k|        err.m_Column     = column;
  345|       |
  346|  19.1k|        return err;
  347|  19.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  19.1k|    {
  352|  19.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  19.1k|                                                        token.GetColumn().unsafe());
  354|  19.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  8.52k|    {
  360|  8.52k|        ParseError err;
  361|       |
  362|  8.52k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  8.52k|        err.m_LineNumber               = line_number;
  364|  8.52k|        err.m_Column                   = column;
  365|  8.52k|        err.too_few_arguments.required = required;
  366|  8.52k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  8.52k|        return err;
  369|  8.52k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  8.52k|    {
  374|  8.52k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  8.52k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  8.52k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.14k|    {
  381|  1.14k|        ParseError err;
  382|       |
  383|  1.14k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.14k|        err.m_LineNumber           = line_number;
  385|  1.14k|        err.m_Column               = column;
  386|  1.14k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.14k|        return err;
  389|  1.14k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.14k|    {
  393|  1.14k|        return ConstructEmptyLabelParseError(
  394|  1.14k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.14k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.01k, False: 125]
  ------------------
  396|  1.01k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.14k|                        token.GetText());
  398|  1.14k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    121|    {
  403|    121|        ParseError err;
  404|       |
  405|    121|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    121|        err.m_LineNumber = line_number;
  407|    121|        err.m_Column     = column;
  408|       |
  409|    121|        return err;
  410|    121|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    121|    {
  414|    121|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    121|                                               token.GetColumn().unsafe());
  416|    121|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  71.7k|    {
   19|  71.7k|        m_ParseErrors.emplace_back(phi::move(error));
   20|  71.7k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  3.19k|    {
  182|  3.19k|        ParsedProgram program;
  183|       |
  184|  3.19k|        program.m_Tokens = tokens;
  185|       |
  186|  3.19k|        phi::boolean line_has_instruction{false};
  187|  3.19k|        phi::usize   label_count{0u};
  188|       |
  189|   163k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 160k, False: 3.19k]
  ------------------
  190|   160k|        {
  191|   160k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   160k|            switch (current_token.GetType())
  196|   160k|            {
  197|       |                // Ignore comments
  198|  27.9k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 27.9k, False: 132k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  27.9k|                    break;
  201|       |
  202|  59.7k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 59.7k, False: 100k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  59.7k|                    line_has_instruction = false;
  205|  59.7k|                    break;
  206|       |
  207|  19.4k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 19.4k, False: 141k]
  ------------------
  208|  19.4k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 586, False: 18.8k]
  ------------------
  209|    586|                    {
  210|    586|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|    586|                                current_token, Token::Type::NewLine));
  212|    586|                        break;
  213|    586|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  18.8k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 11.6k, False: 7.21k]
  ------------------
  218|  11.6k|                    {
  219|  11.6k|                        program.AddParseError(
  220|  11.6k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  11.6k|                        break;
  222|  11.6k|                    }
  223|       |
  224|  7.21k|                    std::string_view label_name = current_token.GetText();
  225|  7.21k|                    label_name.remove_suffix(1);
  226|       |
  227|  7.21k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 1.00k, False: 6.21k]
  ------------------
  228|  1.00k|                    {
  229|  1.00k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  1.00k|                                current_token.GetLineNumber().unsafe(),
  231|  1.00k|                                current_token.GetColumn().unsafe(), label_name));
  232|  1.00k|                        break;
  233|  1.00k|                    }
  234|       |
  235|  6.21k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 1.68k, False: 4.52k]
  ------------------
  236|  1.68k|                    {
  237|  1.68k|                        program.AddParseError(
  238|  1.68k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  1.68k|                        break;
  240|  1.68k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  4.52k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 3.23k, False: 1.29k]
  ------------------
  244|  3.23k|                    {
  245|       |                        // Find first defintions of label
  246|  3.23k|                        const Token* first_label_definition =
  247|  3.23k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  3.23k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  3.23k|                                    {
  250|  3.23k|                                        std::string_view token_label_name = t.GetText();
  251|  3.23k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  3.23k|                                        if (token_label_name == label_name)
  254|  3.23k|                                        {
  255|  3.23k|                                            return true;
  256|  3.23k|                                        }
  257|  3.23k|                                    }
  258|       |
  259|  3.23k|                                    return false;
  260|  3.23k|                                });
  261|       |
  262|  3.23k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  3.23k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  3.23k|                                current_token, *first_label_definition));
  266|  3.23k|                        break;
  267|  3.23k|                    }
  268|       |
  269|  1.29k|                    program.m_JumpData[label_name] =
  270|  1.29k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  1.29k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  1.29k|                    break;
  277|  4.52k|                }
  278|       |
  279|  34.5k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 34.5k, False: 126k]
  ------------------
  280|  34.5k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 19.1k, False: 15.3k]
  ------------------
  281|  19.1k|                    {
  282|  19.1k|                        program.AddParseError(
  283|  19.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  19.1k|                        break;
  285|  19.1k|                    }
  286|       |
  287|  15.3k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  15.3k|                    PHI_ASSERT(current_token.HasHint());
  291|  15.3k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  15.3k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  15.3k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  15.3k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  15.3k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  15.3k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  15.3k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  15.3k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  15.3k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  21.6k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 20.5k, False: 1.15k]
  ------------------
  313|  20.5k|                    {
  314|       |                        // Get next token
  315|  20.5k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 148, False: 20.3k]
  ------------------
  316|    148|                        {
  317|    148|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    148|                                    current_token, number_of_argument_required.unsafe(),
  319|    148|                                    argument_num.unsafe()));
  320|    148|                            break;
  321|    148|                        }
  322|       |
  323|  20.3k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  20.3k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 3.72k, False: 16.6k]
  ------------------
  327|  3.72k|                        {
  328|  3.72k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 121, False: 3.60k]
  ------------------
  329|    121|                            {
  330|    121|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    121|                            }
  332|       |
  333|  3.72k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  3.72k|                            continue;
  336|  3.72k|                        }
  337|       |
  338|  16.6k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 8.37k, False: 8.27k]
  ------------------
  339|  8.37k|                        {
  340|  8.37k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  8.37k|                                    token, number_of_argument_required.unsafe(),
  342|  8.37k|                                    argument_num.unsafe()));
  343|  8.37k|                            break;
  344|  8.37k|                        }
  345|       |
  346|  8.27k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  8.27k|                                parse_instruction_argument(
  348|  8.27k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  8.27k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 5.71k, False: 2.56k]
  ------------------
  350|  5.71k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  5.71k|                            break;
  353|  5.71k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  2.56k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  2.56k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  2.56k|                        argument_num++;
  360|  2.56k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  2.56k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  15.3k|                    program.m_Instructions.emplace_back(instruction);
  368|  15.3k|                    line_has_instruction = true;
  369|  15.3k|                    break;
  370|  34.5k|                }
  371|       |
  372|  18.9k|                default:
  ------------------
  |  Branch (372:17): [True: 18.9k, False: 141k]
  ------------------
  373|  18.9k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  18.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 9.97k, False: 8.97k]
  ------------------
  375|  9.97k|                    {
  376|  9.97k|                        expected_token_type = Token::Type::NewLine;
  377|  9.97k|                    }
  378|       |
  379|  18.9k|                    program.AddParseError(
  380|  18.9k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  18.9k|                    break;
  382|   160k|            }
  383|   160k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  3.19k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 223, False: 2.97k]
  ------------------
  387|    223|        {
  388|  2.00k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 1.78k, False: 223]
  ------------------
  389|  1.78k|            {
  390|  1.78k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  1.78k|                const Token& token = *it;
  393|  1.78k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.14k, False: 643]
  ------------------
  394|  1.14k|                {
  395|  1.14k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.14k|                    --label_count;
  397|  1.14k|                }
  398|  1.78k|            }
  399|    223|        }
  400|       |
  401|  3.19k|        return program;
  402|  3.19k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  3.19k|    {
  406|  3.19k|        TokenStream tokens = Tokenize(source);
  407|  3.19k|        return Parse(tokens);
  408|  3.19k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  8.27k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  8.27k|        switch (token.GetType())
   38|  8.27k|        {
   39|    440|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 440, False: 7.83k]
  ------------------
   40|    440|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 160, False: 280]
  ------------------
   41|    440|                                          ArgumentType::AddressDisplacement))
   42|    160|                {
   43|    160|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    160|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    160|                    return {};
   47|    160|                }
   48|       |
   49|       |                // Get address displacement
   50|    280|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    280|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    280|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 277]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|    277|                auto         it           = tokens.current_position();
   62|    277|                const Token& first_token  = tokens.consume();
   63|    277|                const Token& second_token = tokens.consume();
   64|    277|                const Token& third_token  = tokens.consume();
   65|       |
   66|    277|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 277, False: 0]
  ------------------
   67|    277|                {
   68|    277|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    277|                            first_token, Token::Type::OpenBracket));
   70|    277|                    return {};
   71|    277|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  1.55k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 1.55k, False: 6.71k]
  ------------------
   98|  1.55k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 296, False: 1.25k]
  ------------------
   99|    296|                {
  100|    296|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    296|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    296|                    return {};
  103|    296|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  1.25k|                return ConstructInstructionArgumentRegisterInt(
  109|  1.25k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  1.55k|            }
  111|    185|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 185, False: 8.08k]
  ------------------
  112|    185|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 115, False: 70]
  ------------------
  113|    115|                {
  114|    115|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    115|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    115|                    return {};
  117|    115|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|     70|                return ConstructInstructionArgumentRegisterFloat(
  123|     70|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    185|            }
  125|    417|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 417, False: 7.85k]
  ------------------
  126|    417|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    417|                return {};
  129|    185|            }
  130|  2.26k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 2.26k, False: 6.00k]
  ------------------
  131|       |                // Parse as Label
  132|  2.26k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 227, False: 2.03k]
  ------------------
  133|    227|                {
  134|    227|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|    227|                            token, expected_argument_type, ArgumentType::Label));
  136|    227|                    return {};
  137|    227|                }
  138|       |
  139|  2.03k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 2.03k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  2.03k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 1.14k, False: 888]
  ------------------
  146|  1.14k|                {
  147|  1.14k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  1.14k|                    return {};
  149|  1.14k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|    888|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  2.03k|            }
  155|    648|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 648, False: 7.62k]
  ------------------
  156|    648|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 223, False: 425]
  ------------------
  157|    223|                {
  158|    223|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    223|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    223|                    return {};
  161|    223|                }
  162|       |
  163|    425|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 346, False: 79]
  ------------------
  164|    346|                {
  165|    346|                    return ConstructInstructionArgumentImmediateValue(
  166|    346|                            static_cast<std::int16_t>(token.GetHint()));
  167|    346|                }
  168|       |
  169|     79|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|     79|                return {};
  171|    425|            }
  172|       |
  173|  2.76k|            default:
  ------------------
  |  Branch (173:13): [True: 2.76k, False: 5.50k]
  ------------------
  174|  2.76k|                program.AddParseError(
  175|  2.76k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  2.76k|                return {};
  177|  8.27k|        }
  178|  8.27k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  46.3k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  46.3k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 17.3k, False: 29.0k]
  ------------------
  249|  17.3k|                                    {
  250|  17.3k|                                        std::string_view token_label_name = t.GetText();
  251|  17.3k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  17.3k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 3.23k, False: 14.0k]
  ------------------
  254|  3.23k|                                        {
  255|  3.23k|                                            return true;
  256|  3.23k|                                        }
  257|  17.3k|                                    }
  258|       |
  259|  43.1k|                                    return false;
  260|  46.3k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    136|    {
  354|    136|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 136]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    136|        m_CurrentProgram = &program;
  361|       |
  362|    136|        m_ProgramCounter               = 0u;
  363|    136|        m_Halted                       = false;
  364|    136|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    136|        m_LastRaisedException          = Exception::None;
  366|    136|        m_CurrentStepCount             = 0u;
  367|       |
  368|    136|        return true;
  369|    136|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  74.8k|    {
   14|  74.8k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 15.0k, False: 59.7k]
  ------------------
   15|  15.0k|        {
   16|  15.0k|            char first_char = token[0];
   17|  15.0k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 4.14k, False: 10.9k]
  |  Branch (17:38): [True: 1.08k, False: 9.84k]
  ------------------
   18|  5.23k|            {
   19|  5.23k|                char second_char = token[1];
   20|  5.23k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 5.11k, False: 120]
  |  Branch (20:43): [True: 4.33k, False: 774]
  ------------------
   21|  4.33k|                {
   22|  4.33k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  4.33k|                }
   24|  5.23k|            }
   25|  15.0k|        }
   26|  59.7k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 24.4k, False: 35.3k]
  ------------------
   27|  24.4k|        {
   28|  24.4k|            char first_char = token[0];
   29|  24.4k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 2.03k, False: 22.3k]
  |  Branch (29:38): [True: 699, False: 21.6k]
  ------------------
   30|  2.73k|            {
   31|  2.73k|                char second_char = token[1];
   32|  2.73k|                char third_char  = token[2];
   33|       |
   34|  2.73k|                switch (second_char)
   35|  2.73k|                {
   36|    781|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 781, False: 1.95k]
  ------------------
   37|    781|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 707, False: 74]
  |  Branch (37:50): [True: 577, False: 130]
  ------------------
   38|    577|                        {
   39|    577|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|    577|                        }
   41|    204|                        break;
   42|    781|                    }
   43|  1.45k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 1.45k, False: 1.28k]
  ------------------
   44|  1.45k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.38k, False: 67]
  |  Branch (44:50): [True: 1.11k, False: 271]
  ------------------
   45|  1.11k|                        {
   46|  1.11k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  1.11k|                        }
   48|    338|                        break;
   49|  1.45k|                    }
   50|    408|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 408, False: 2.32k]
  ------------------
   51|    408|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 68, False: 340]
  |  Branch (51:50): [True: 274, False: 66]
  ------------------
   52|    342|                        {
   53|    342|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    342|                        }
   55|     66|                        break;
   56|    408|                    }
   57|     98|                    default: {
  ------------------
  |  Branch (57:21): [True: 98, False: 2.63k]
  ------------------
   58|     98|                        break;
   59|    408|                    }
   60|  2.73k|                }
   61|  2.73k|            }
   62|  24.4k|        }
   63|       |
   64|  68.5k|        return IntRegisterID::None;
   65|  74.8k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  68.5k|    {
   69|  68.5k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 10.7k, False: 57.7k]
  ------------------
   70|  10.7k|        {
   71|  10.7k|            char first_char = token[0];
   72|  10.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 761, False: 9.97k]
  |  Branch (72:38): [True: 349, False: 9.62k]
  ------------------
   73|  1.11k|            {
   74|  1.11k|                char second_char = token[1];
   75|  1.11k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 1.03k, False: 75]
  |  Branch (75:43): [True: 820, False: 215]
  ------------------
   76|    820|                {
   77|    820|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|    820|                }
   79|  1.11k|            }
   80|  10.7k|        }
   81|  57.7k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 22.4k, False: 35.3k]
  ------------------
   82|  22.4k|        {
   83|  22.4k|            char first_char = token[0];
   84|  22.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 1.05k, False: 21.3k]
  |  Branch (84:38): [True: 579, False: 20.7k]
  ------------------
   85|  1.63k|            {
   86|  1.63k|                char second_char = token[1];
   87|  1.63k|                char third_char  = token[2];
   88|       |
   89|  1.63k|                switch (second_char)
   90|  1.63k|                {
   91|    439|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 439, False: 1.19k]
  ------------------
   92|    439|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 370, False: 69]
  |  Branch (92:50): [True: 286, False: 84]
  ------------------
   93|    286|                        {
   94|    286|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    286|                        }
   96|    153|                        break;
   97|    439|                    }
   98|    347|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 347, False: 1.29k]
  ------------------
   99|    347|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 153, False: 194]
  |  Branch (99:50): [True: 80, False: 73]
  ------------------
  100|     80|                        {
  101|     80|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|     80|                        }
  103|    267|                        break;
  104|    347|                    }
  105|    779|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 779, False: 859]
  ------------------
  106|    779|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 546, False: 233]
  |  Branch (106:50): [True: 132, False: 101]
  ------------------
  107|    678|                        {
  108|    678|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    678|                        }
  110|    101|                        break;
  111|    779|                    }
  112|    101|                    default: {
  ------------------
  |  Branch (112:21): [True: 73, False: 1.56k]
  ------------------
  113|     73|                        break;
  114|    779|                    }
  115|  1.63k|                }
  116|  1.63k|            }
  117|  22.4k|        }
  118|       |
  119|  66.6k|        return FloatRegisterID::None;
  120|  68.5k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  75.8k|    {
  124|  75.8k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 21.3k, False: 54.5k]
  ------------------
  125|  21.3k|        {
  126|  21.3k|            char c1 = token[0];
  127|  21.3k|            char c2 = token[1];
  128|  21.3k|            char c3 = token[2];
  129|  21.3k|            char c4 = token[3];
  130|       |
  131|  21.3k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.02k, False: 19.3k]
  |  Branch (131:34): [True: 165, False: 19.1k]
  |  Branch (131:49): [True: 2.00k, False: 193]
  |  Branch (131:62): [True: 127, False: 66]
  ------------------
  132|  21.3k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 1.99k, False: 132]
  |  Branch (132:34): [True: 66, False: 66]
  |  Branch (132:49): [True: 1.99k, False: 66]
  |  Branch (132:62): [True: 0, False: 66]
  ------------------
  133|  21.3k|        }
  134|       |
  135|  54.5k|        return false;
  136|  75.8k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   134k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  46.9k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   458k|    {
   41|   458k|        return m_Type;
   42|   458k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   316k|    {
   51|   316k|        return m_LineNumber;
   52|   316k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   624k|    {
   56|   624k|        return m_Column;
   57|   624k|    }
_ZNK3dlx5Token9GetLengthEv:
   60|   436k|    {
   61|   436k|        return m_Text.length();
   62|   436k|    }
_ZNK3dlx5Token7GetTextEv:
   65|  69.8k|    {
   66|  69.8k|        return m_Text;
   67|  69.8k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  16.0k|    {
   80|  16.0k|        return m_HasHint;
   81|  16.0k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  17.3k|    {
   85|  17.3k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  17.3k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  17.3k|                   m_Type == Type::ImmediateInteger);
   88|  17.3k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  17.3k|        return m_Hint;
   91|  17.3k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  3.19k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  3.19k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  3.19k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    280|    {
   51|    280|        auto it = m_Iterator;
   52|  1.11k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 836, False: 277]
  ------------------
   53|    836|        {
   54|    836|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 833]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|    836|        }
   59|       |
   60|    277|        return true;
   61|    280|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   184k|    {
   65|   184k|        return m_Iterator != m_Tokens.end();
   66|   184k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   181k|    {
   70|   181k|        return m_Iterator == m_Tokens.end();
   71|   181k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   181k|    {
   85|   181k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   181k|        return *m_Iterator++;
   91|   181k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    277|    {
  164|    277|        return m_Iterator;
  165|    277|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  3.19k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  3.19k|        return m_Tokens.begin();
  188|  3.19k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  3.19k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  3.19k|        return m_Tokens.end();
  206|  3.19k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    223|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    223|        return m_Tokens.rbegin();
  224|    223|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  1.78k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  1.78k|        return m_Tokens.rend();
  233|  1.78k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  3.19k|    {
   63|  3.19k|        TokenStream tokens;
   64|       |
   65|  3.19k|        std::string_view current_token;
   66|       |
   67|  3.19k|        phi::u64 current_line_number{1u};
   68|  3.19k|        phi::u64 current_column{1u};
   69|  3.19k|        phi::u64 token_begin{0u};
   70|       |
   71|  3.19k|        phi::boolean parsing_comment{false};
   72|       |
   73|   422k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 418k, False: 3.19k]
  ------------------
   74|   418k|        {
   75|   418k|            const char c{source.at(i.unsafe())};
   76|       |
   77|   418k|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 68.6k, False: 350k]
  ------------------
   78|  68.6k|            {
   79|  68.6k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 17.1k, False: 51.4k]
  ------------------
   80|  17.1k|                {
   81|       |                    // Skip empty lines
   82|  17.1k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  17.1k|                                        current_line_number, current_column);
   84|       |
   85|  17.1k|                    parsing_comment = false;
   86|  17.1k|                    current_line_number += 1u;
   87|  17.1k|                    current_column = 1u;
   88|  17.1k|                    continue;
   89|  17.1k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  51.4k|                tokens.emplace_back(
   93|  51.4k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  51.4k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  51.4k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  51.4k|                                    current_line_number, current_column);
   98|       |
   99|  51.4k|                current_token   = std::string_view{};
  100|  51.4k|                parsing_comment = false;
  101|  51.4k|                current_line_number += 1u;
  102|  51.4k|                current_column = 0u;
  103|  51.4k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|   350k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.43k, False: 348k]
  |  Branch (105:34): [True: 28.7k, False: 320k]
  ------------------
  106|  30.2k|            {
  107|  30.2k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 27.7k, False: 2.48k]
  ------------------
  108|  27.7k|                {
  109|  27.7k|                    token_begin = i;
  110|  27.7k|                }
  111|  2.48k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 1.64k, False: 840]
  ------------------
  112|  1.64k|                {
  113|  1.64k|                    tokens.emplace_back(ParseToken(
  114|  1.64k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  1.64k|                            current_line_number, current_column - current_token.length()));
  116|  1.64k|                    token_begin   = i;
  117|  1.64k|                    current_token = std::string_view{};
  118|  1.64k|                }
  119|       |
  120|  30.2k|                parsing_comment = true;
  121|  30.2k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  30.2k|            }
  123|   320k|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 32.5k, False: 287k]
  ------------------
  124|  32.5k|            {
  125|       |                // simply append the character
  126|  32.5k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  32.5k|            }
  128|   287k|            else
  129|   287k|            {
  130|       |                // Not parsing a comment
  131|   287k|                switch (c)
  132|   287k|                {
  133|  27.2k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 27.2k, False: 260k]
  ------------------
  134|  27.4k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 192, False: 287k]
  ------------------
  135|  27.4k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 287k]
  ------------------
  136|  27.4k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 91, False: 27.3k]
  ------------------
  137|     91|                        {
  138|     91|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|     91|                            continue;
  141|     91|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  27.3k|                        tokens.emplace_back(ParseToken(
  145|  27.3k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  27.3k|                                current_line_number, current_column - current_token.length()));
  147|  27.3k|                        current_token = std::string_view{};
  148|  27.3k|                        break;
  149|  8.04k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 8.04k, False: 279k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  8.04k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 7.72k, False: 324]
  ------------------
  152|  7.72k|                        {
  153|  7.72k|                            current_token =
  154|  7.72k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  7.72k|                            tokens.emplace_back(ParseToken(
  156|  7.72k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  7.72k|                                    current_line_number,
  158|  7.72k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  7.72k|                            current_token = std::string_view{};
  161|  7.72k|                        }
  162|    324|                        else
  163|    324|                        {
  164|       |                            // Orphan colon
  165|    324|                            token_begin = i;
  166|       |
  167|    324|                            tokens.emplace_back(Token::Type::Colon,
  168|    324|                                                source.substr(token_begin.unsafe(), 1),
  169|    324|                                                current_line_number, current_column);
  170|    324|                        }
  171|  8.04k|                        break;
  172|  11.1k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 11.1k, False: 276k]
  ------------------
  173|  12.0k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 916, False: 286k]
  ------------------
  174|  12.4k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 367, False: 287k]
  ------------------
  175|  12.4k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 11.0k, False: 1.35k]
  ------------------
  176|  11.0k|                        {
  177|  11.0k|                            tokens.emplace_back(ParseToken(
  178|  11.0k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  11.0k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  11.0k|                            current_token = std::string_view{};
  182|  11.0k|                        }
  183|       |
  184|  12.4k|                        Token::Type type;
  185|  12.4k|                        switch (c)
  186|  12.4k|                        {
  187|  11.1k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 11.1k, False: 1.28k]
  ------------------
  188|  11.1k|                                type = Token::Type::Comma;
  189|  11.1k|                                break;
  190|    916|                            case '(':
  ------------------
  |  Branch (190:29): [True: 916, False: 11.5k]
  ------------------
  191|    916|                                type = Token::Type::OpenBracket;
  192|    916|                                break;
  193|    367|                            case ')':
  ------------------
  |  Branch (193:29): [True: 367, False: 12.0k]
  ------------------
  194|    367|                                type = Token::Type::ClosingBracket;
  195|    367|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 12.4k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  12.4k|#endif
  201|  12.4k|                        }
  202|       |
  203|  12.4k|                        token_begin = i;
  204|       |
  205|  12.4k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  12.4k|                                            current_line_number, current_column);
  207|  12.4k|                        break;
  208|       |
  209|   239k|                    default:
  ------------------
  |  Branch (209:21): [True: 239k, False: 47.9k]
  ------------------
  210|   239k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 71.0k, False: 168k]
  ------------------
  211|  71.0k|                        {
  212|  71.0k|                            token_begin = i;
  213|  71.0k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   239k|                        current_token =
  217|   239k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   287k|                }
  219|   287k|            }
  220|       |
  221|   401k|            current_column += 1u;
  222|   401k|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  3.19k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 1.14k, False: 2.04k]
  ------------------
  226|  1.14k|        {
  227|  1.14k|            tokens.emplace_back(
  228|  1.14k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  1.14k|                               current_line_number, current_column - current_token.length()));
  230|  1.14k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  3.19k|        tokens.finalize();
  234|       |
  235|  3.19k|        return tokens;
  236|  3.19k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   100k|    {
   11|   100k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 1.78k, False: 98.6k]
  |  Branch (11:35): [True: 1.65k, False: 127]
  ------------------
   12|  1.65k|        {
   13|  1.65k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  1.65k|            if (number)
  ------------------
  |  Branch (15:17): [True: 1.30k, False: 351]
  ------------------
   16|  1.30k|            {
   17|  1.30k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  1.30k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  1.30k|            }
   20|       |
   21|    351|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  1.65k|        }
   23|       |
   24|  98.7k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 636, False: 98.1k]
  |  Branch (24:35): [True: 28.7k, False: 69.4k]
  ------------------
   25|  29.3k|        {
   26|  29.3k|            return {Token::Type::Comment, token, line_number, column};
   27|  29.3k|        }
   28|       |
   29|  69.4k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 1.80k, False: 67.6k]
  ------------------
   30|  1.80k|        {
   31|  1.80k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  1.80k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  1.80k|        }
   34|       |
   35|  67.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 1.99k, False: 65.6k]
  ------------------
   36|  1.99k|        {
   37|  1.99k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  1.99k|        }
   39|       |
   40|  65.6k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 5.97k, False: 59.6k]
  ------------------
   41|  5.97k|        {
   42|  5.97k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  5.97k|                    static_cast<std::uint32_t>(id)};
   44|  5.97k|        }
   45|       |
   46|  59.6k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 1.79k, False: 57.8k]
  ------------------
   47|  1.79k|        {
   48|  1.79k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  1.79k|                    static_cast<std::uint32_t>(id)};
   50|  1.79k|        }
   51|       |
   52|  57.8k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 36.0k, False: 21.7k]
  ------------------
   53|  36.0k|        {
   54|  36.0k|            return {Token::Type::OpCode, token, line_number, column,
   55|  36.0k|                    static_cast<std::uint32_t>(opcode)};
   56|  36.0k|        }
   57|       |
   58|  21.7k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  57.8k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  3.19k|    {
   53|       |        // Constants
   54|  3.19k|        constexpr std::uint8_t number_of_opcodes =
   55|  3.19k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  3.19k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  3.19k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  3.19k|        std::string ret;
   60|       |
   61|  90.2k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 87.0k, False: 3.18k]
  ------------------
   62|  87.0k|        {
   63|  87.0k|            std::uint8_t current_value = data[index++];
   64|       |
   65|  87.0k|            switch (current_value)
   66|  87.0k|            {
   67|       |                // OpCode
   68|  27.4k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 27.4k, False: 59.6k]
  ------------------
   69|       |                    // Has one more value
   70|  27.4k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 27.3k, False: 25]
  ------------------
   71|  27.3k|                    {
   72|  27.3k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|  27.3k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|  27.3k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 3, False: 27.3k]
  ------------------
   77|      3|                        {
   78|      3|                            return detail::ErrorString;
   79|      3|                        }
   80|  27.3k|                    }
   81|  27.4k|                    break;
   82|  27.4k|                }
   83|       |
   84|       |                // Int Register
   85|  27.4k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 6.35k, False: 80.6k]
  ------------------
   86|       |                    // Has one more value
   87|  6.35k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 6.34k, False: 9]
  ------------------
   88|  6.34k|                    {
   89|  6.34k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  6.34k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  6.34k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 6.34k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  6.34k|                    }
   97|  6.35k|                    break;
   98|  6.35k|                }
   99|       |
  100|       |                // Float register
  101|  6.35k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 1.80k, False: 85.2k]
  ------------------
  102|       |                    // Has one more value
  103|  1.80k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 1.80k, False: 3]
  ------------------
  104|  1.80k|                    {
  105|  1.80k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  1.80k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  1.80k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 1.80k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  1.80k|                    }
  113|  1.80k|                    break;
  114|  1.80k|                }
  115|       |
  116|       |                // Floating point status register
  117|  2.05k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 2.05k, False: 84.9k]
  ------------------
  118|  2.05k|                    ret += "FPSR";
  119|  2.05k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 1, False: 2.05k]
  ------------------
  120|      1|                    {
  121|      1|                        return detail::ErrorString;
  122|      1|                    }
  123|       |
  124|  2.05k|                    break;
  125|  2.05k|                }
  126|       |
  127|       |                // Immediate integer
  128|  2.29k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 2.29k, False: 84.7k]
  ------------------
  129|  2.29k|                    ret += "#";
  130|  2.29k|                    [[fallthrough]];
  131|  2.29k|                }
  132|       |
  133|       |                // Integer literal
  134|  5.50k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 3.21k, False: 83.8k]
  ------------------
  135|  5.50k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  5.50k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 5.46k, False: 42]
  ------------------
  138|  5.46k|                    {
  139|  5.46k|                        std::int16_t value = 0;
  140|       |
  141|  16.3k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 10.8k, False: 5.46k]
  ------------------
  142|  10.8k|                        {
  143|  10.8k|                            value <<= 8;
  144|  10.8k|                            value &= data[index++];
  145|  10.8k|                        }
  146|       |
  147|  5.46k|                        ret += std::to_string(value);
  148|  5.46k|                    }
  149|  5.50k|                    break;
  150|  2.29k|                }
  151|       |
  152|       |                // Label
  153|  3.09k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 3.09k, False: 83.9k]
  ------------------
  154|  3.09k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  3.09k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 3.09k, False: 2]
  ------------------
  157|  3.09k|                    {
  158|  3.09k|                        std::string label_name = "lbl_";
  159|       |
  160|  18.3k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 15.2k, False: 3.09k]
  ------------------
  161|  15.2k|                        {
  162|  15.2k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  15.2k|                            label_name += c;
  165|  15.2k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  3.09k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 3.02k, False: 69]
  |  Branch (168:45): [True: 2.56k, False: 459]
  ------------------
  169|  2.56k|                        {
  170|  2.56k|                            label_name += ':';
  171|  2.56k|                            ret += label_name;
  172|  2.56k|                        }
  173|    528|                        else
  174|    528|                        {
  175|    528|                            ret += label_name;
  176|    528|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 527]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|    528|                        }
  181|  3.09k|                    }
  182|  3.09k|                    break;
  183|  3.09k|                }
  184|       |
  185|       |                // Newline
  186|  12.1k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 12.1k, False: 74.8k]
  ------------------
  187|  12.1k|                    ret += '\n';
  188|  12.1k|                    break;
  189|  3.09k|                }
  190|       |
  191|       |                // Comment
  192|  28.6k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 28.6k, False: 58.4k]
  ------------------
  193|  28.6k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  28.6k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 28.6k, False: 13]
  ------------------
  196|  28.6k|                    {
  197|  28.6k|                        std::string comment = "; ";
  198|       |
  199|   170k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 141k, False: 28.6k]
  ------------------
  200|   141k|                        {
  201|   141k|                            comment += static_cast<char>(data[index++]);
  202|   141k|                        }
  203|       |
  204|  28.6k|                        ret += comment + '\n';
  205|  28.6k|                    }
  206|  28.6k|                    break;
  207|  3.09k|                }
  208|       |
  209|       |                // Ignore
  210|      2|                default:
  ------------------
  |  Branch (210:17): [True: 2, False: 87.0k]
  ------------------
  211|      2|                    return detail::ErrorString;
  212|  87.0k|            }
  213|  87.0k|        }
  214|       |
  215|  3.18k|        return ret;
  216|  3.19k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|  38.1k|        {
   20|  38.1k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 37.0k, False: 1.04k]
  ------------------
   21|  37.0k|            {
   22|  37.0k|                std::uint8_t val = data[index++];
   23|  37.0k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 27.4k, False: 9.64k]
  ------------------
   24|  27.4k|                {
   25|  27.4k|                    text += ' ';
   26|  27.4k|                }
   27|  9.64k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 9.63k, False: 7]
  ------------------
   28|  9.63k|                {
   29|  9.63k|                    text += ',';
   30|  9.63k|                }
   31|      7|                else
   32|      7|                {
   33|      7|                    return false;
   34|      7|                }
   35|  37.0k|            }
   36|       |
   37|  38.1k|            return true;
   38|  38.1k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  15.2k|        {
   42|  15.2k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 11.8k, False: 3.47k]
  ------------------
   43|  11.8k|            {
   44|  11.8k|                return '_';
   45|  11.8k|            }
   46|       |
   47|  3.47k|            return c;
   48|  15.2k|        }

LLVMFuzzerTestOneInput:
   12|  3.19k|{
   13|  3.19k|    static dlxemu::Emulator emu;
   14|       |
   15|  3.19k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  3.19k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  3.19k|    editor.SetText(source);
   21|  3.19k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  3.19k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  3.19k|    editor.ColorizeInternal();
   26|       |
   27|  3.19k|    return 0;
   28|  3.19k|}


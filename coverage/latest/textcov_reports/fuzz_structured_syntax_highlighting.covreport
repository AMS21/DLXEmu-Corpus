_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  21.2k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  4.25k|    {
  240|  4.25k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 2.88k, False: 1.36k]
  ------------------
  241|  2.88k|        {
  242|  2.88k|            return m_Line < other.m_Line;
  243|  2.88k|        }
  244|       |
  245|  1.36k|        return m_Column <= other.m_Column;
  246|  4.25k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  1.63M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  4.25k|    {
  349|  4.25k|        m_ErrorMarkers.clear();
  350|  4.25k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  4.25k|    {
  414|  4.25k|        m_Breakpoints.clear();
  415|  4.25k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  4.25k|    {
  494|  4.25k|        m_Lines.clear();
  495|  4.25k|        ResetState();
  496|  4.25k|        m_Lines.emplace_back(Line());
  497|       |
  498|  4.25k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 2.08M, False: 4.25k]
  ------------------
  499|  2.08M|        {
  500|  2.08M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 3.38k, False: 2.07M]
  |  Branch (500:17): [True: 130k, False: 1.95M]
  ------------------
  501|  2.08M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 443k, False: 1.63M]
  |  Branch (501:48): [True: 129k, False: 314k]
  |  Branch (501:69): [True: 126k, False: 2.77k]
  ------------------
  502|   130k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   130k|            }
  505|  1.95M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 314k, False: 1.63M]
  ------------------
  506|   314k|            {
  507|   314k|                m_Lines.emplace_back(Line());
  508|   314k|            }
  509|  1.63M|            else
  510|  1.63M|            {
  511|  1.63M|                m_Lines.back().emplace_back(
  512|  1.63M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  1.63M|            }
  514|  2.08M|        }
  515|       |
  516|  4.25k|        m_TextChanged = true;
  517|  4.25k|        m_ScrollToTop = true;
  518|       |
  519|  4.25k|        m_UndoBuffer.clear();
  520|  4.25k|        m_UndoIndex = 0u;
  521|       |
  522|  4.25k|        Colorize();
  523|  4.25k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  4.25k|    {
  527|  4.25k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  4.25k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  4.25k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  4.25k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  4.25k|        const phi::u32 to_line =
 1724|  4.25k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 4.25k, False: 0]
  ------------------
 1725|  4.25k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  4.25k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  4.25k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  4.25k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  4.25k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  4.25k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  4.25k|    {
 1839|  4.25k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  4.25k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  4.25k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  4.25k|        std::string result;
 1844|       |
 1845|  4.25k|        phi::u32   lstart = start.m_Line;
 1846|  4.25k|        phi::u32   lend   = end.m_Line;
 1847|  4.25k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  4.25k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  4.25k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  4.25k|        phi::usize size   = 0u;
 1851|       |
 1852|   322k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 318k, False: 4.25k]
  ------------------
 1853|   318k|        {
 1854|   318k|            PHI_ASSERT(i < m_Lines.size());
 1855|   318k|            size += m_Lines[i.unsafe()].size();
 1856|   318k|        }
 1857|       |
 1858|  4.25k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  1.95M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 763k, False: 1.19M]
  |  Branch (1860:16): [True: 1.95M, False: 4.25k]
  |  Branch (1860:33): [True: 1.18M, False: 4.25k]
  ------------------
 1861|  1.95M|        {
 1862|  1.95M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  1.95M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  1.95M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 1.63M, False: 314k]
  ------------------
 1866|  1.63M|            {
 1867|  1.63M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  1.63M|                istart++;
 1869|  1.63M|            }
 1870|   314k|            else
 1871|   314k|            {
 1872|   314k|                istart = 0u;
 1873|   314k|                ++lstart;
 1874|       |
 1875|   314k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 314k, False: 0]
  ------------------
 1876|   314k|                {
 1877|   314k|                    result += '\n';
 1878|   314k|                }
 1879|   314k|            }
 1880|  1.95M|        }
 1881|       |
 1882|  4.25k|        return result;
 1883|  4.25k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  8.50k|    {
 2422|  8.50k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  8.50k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  8.50k|        phi::u32    index = 0u;
 2426|   459k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 454k, False: 4.67k]
  |  Branch (2426:35): [True: 450k, False: 8.50k]
  |  Branch (2426:58): [True: 450k, False: 3.82k]
  ------------------
 2427|   450k|        {
 2428|   450k|            PHI_ASSERT(index < line.size());
 2429|   450k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   450k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 450k]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|   450k|            else
 2436|   450k|            {
 2437|   450k|                ++column;
 2438|   450k|            }
 2439|       |
 2440|   450k|            index += UTF8CharLength(character);
 2441|   450k|        }
 2442|       |
 2443|  8.50k|        return index;
 2444|  8.50k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  4.25k|    {
 2494|  4.25k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 4.25k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  4.25k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  4.25k|        phi::u32    col  = 0u;
 2501|       |
 2502|   454k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 450k, False: 4.25k]
  ------------------
 2503|   450k|        {
 2504|   450k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   450k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 450k]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|   450k|            else
 2510|   450k|            {
 2511|   450k|                col++;
 2512|   450k|            }
 2513|       |
 2514|   450k|            i += UTF8CharLength(character);
 2515|   450k|        }
 2516|       |
 2517|  4.25k|        return col;
 2518|  4.25k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  4.25k|    {
 2522|  4.25k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  4.25k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  4.25k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   847k|    {
 3661|   847k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   847k|        switch (token.GetType())
 3665|   847k|        {
 3666|   114k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 114k, False: 733k]
  ------------------
 3667|   114k|                palette_index = PaletteIndex::Comment;
 3668|   114k|                break;
 3669|  14.4k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 14.4k, False: 833k]
  ------------------
 3670|  23.4k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 8.98k, False: 839k]
  ------------------
 3671|  23.4k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  23.4k|                break;
 3673|   179k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 179k, False: 668k]
  ------------------
 3674|   179k|                palette_index = PaletteIndex::OpCode;
 3675|   179k|                break;
 3676|  11.0k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 11.0k, False: 836k]
  ------------------
 3677|  52.2k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 41.2k, False: 806k]
  ------------------
 3678|  62.3k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 10.1k, False: 837k]
  ------------------
 3679|  62.3k|                palette_index = PaletteIndex::Register;
 3680|  62.3k|                break;
 3681|   314k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 314k, False: 533k]
  ------------------
 3682|   314k|                return;
 3683|   154k|            default:
  ------------------
  |  Branch (3683:13): [True: 154k, False: 693k]
  ------------------
 3684|   154k|                break;
 3685|   847k|        }
 3686|       |
 3687|   533k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   533k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   533k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  2.00M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 1.46M, False: 533k]
  ------------------
 3692|  1.46M|        {
 3693|  1.46M|            PHI_ASSERT(index < line.size());
 3694|  1.46M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  1.46M|        }
 3696|   533k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  4.25k|    {
 3700|  4.25k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  4.25k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 847k, False: 4.25k]
  ------------------
 3703|   847k|        {
 3704|   847k|            ColorizeToken(token);
 3705|   847k|        }
 3706|  4.25k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  4.25k|    {
 3710|  4.25k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  4.25k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  4.25k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  4.25k|        ClearBreakPoints();
 3716|  4.25k|        ClearErrorMarkers();
 3717|  4.25k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   450k|{
  135|   450k|    return UTF8CharLength(static_cast<char>(characater));
  136|   450k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|   901k|{
  105|   901k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 901k]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|   901k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 901k]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|   901k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 901k]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|   901k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 901k]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|   901k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 901k]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|   901k|    return 1_u8;
  131|   901k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  4.25k|    {
  175|  4.25k|        return m_DLXProgram;
  176|  4.25k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  4.25k|    {
  180|  4.25k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  4.25k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 143, False: 4.11k]
  ------------------
  183|    143|        {
  184|    143|            m_Processor.LoadProgram(m_DLXProgram);
  185|    143|        }
  186|  4.25k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  4.25k|    {
  200|  4.25k|        return m_CodeEditor;
  201|  4.25k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   200k|        {
  169|   200k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   200k|            switch (index.unsafe())
  172|   200k|            {
  173|  84.0k|                case 0:
  ------------------
  |  Branch (173:17): [True: 84.0k, False: 116k]
  ------------------
  174|  84.0k|                    return m_Arg1Type;
  175|       |
  176|  60.4k|                case 1:
  ------------------
  |  Branch (176:17): [True: 60.4k, False: 139k]
  ------------------
  177|  60.4k|                    return m_Arg2Type;
  178|       |
  179|  55.8k|                case 2:
  ------------------
  |  Branch (179:17): [True: 55.8k, False: 144k]
  ------------------
  180|  55.8k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 200k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   200k|#endif
  187|   200k|            }
  188|   200k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  52.9k|        {
  195|  52.9k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  52.9k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 52.7k, False: 163]
  ------------------
  199|  52.7k|            {
  200|  52.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  52.7k|            }
  202|  52.9k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 43.6k, False: 9.32k]
  ------------------
  203|  43.6k|            {
  204|  43.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  43.6k|            }
  206|  52.9k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 30.9k, False: 21.9k]
  ------------------
  207|  30.9k|            {
  208|  30.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  30.9k|            }
  210|       |
  211|  52.9k|            return number_of_argument_required;
  212|  52.9k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  52.9k|        {
  221|  52.9k|            return m_Executor;
  222|  52.9k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  24.6k|    {
   38|  24.6k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  24.6k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  24.6k|                                         static_cast<underlying_t>(rhs));
   42|  24.6k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  24.6k|    {
   55|  24.6k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  24.6k|        return static_cast<underlying_t>(type & test) != 0;
   58|  24.6k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|   161k|    {
  205|   161k|        switch (value)
  206|   161k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  45.5k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  45.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 45.5k, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  209|  45.5k|        return #name;
  |  |  ------------------
  |  |   16|  45.5k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.54k, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.54k|        return #name;
  |  |  ------------------
  |  |   17|  3.54k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.38k, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.38k|        return #name;
  |  |  ------------------
  |  |   18|  6.59k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  6.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.59k, False: 154k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.59k|        return #name;
  |  |  ------------------
  |  |   19|  6.59k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.74k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.74k|        return #name;
  |  |  ------------------
  |  |   20|  2.74k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.81k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.81k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.81k|        return #name;
  |  |  ------------------
  |  |   21|  1.81k|                                                                                                   \
  |  |   22|  1.81k|    /* Sub */                                                                                      \
  |  |   23|  2.89k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.89k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.89k|        return #name;
  |  |  ------------------
  |  |   24|  2.89k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.10k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.10k|        return #name;
  |  |  ------------------
  |  |   25|  2.22k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.22k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.22k|        return #name;
  |  |  ------------------
  |  |   26|  3.33k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  3.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.33k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.33k|        return #name;
  |  |  ------------------
  |  |   27|  3.33k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.44k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.44k|        return #name;
  |  |  ------------------
  |  |   28|  1.44k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |   29|     68|                                                                                                   \
  |  |   30|     68|    /* Multiplication */                                                                           \
  |  |   31|     80|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |   32|     80|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   33|     94|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |   34|    477|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    477|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 477, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    477|        return #name;
  |  |  ------------------
  |  |   35|  3.55k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  3.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.55k, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.55k|        return #name;
  |  |  ------------------
  |  |   36|  3.55k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     95|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 95, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     95|        return #name;
  |  |  ------------------
  |  |   37|     95|                                                                                                   \
  |  |   38|     95|    /* Division */                                                                                 \
  |  |   39|    723|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    723|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 723, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    723|        return #name;
  |  |  ------------------
  |  |   40|  1.01k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.01k, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.01k|        return #name;
  |  |  ------------------
  |  |   41|  1.35k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.35k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.35k|        return #name;
  |  |  ------------------
  |  |   42|  1.35k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    154|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 154, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    154|        return #name;
  |  |  ------------------
  |  |   43|    154|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |   44|  1.38k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.38k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.38k|        return #name;
  |  |  ------------------
  |  |   45|  1.38k|                                                                                                   \
  |  |   46|  1.38k|    /* Shift left (logical) */                                                                     \
  |  |   47|  2.66k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.66k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.66k|        return #name;
  |  |  ------------------
  |  |   48|  2.66k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.02k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.02k|        return #name;
  |  |  ------------------
  |  |   49|  2.02k|                                                                                                   \
  |  |   50|  2.02k|    /* Shift right (logical) */                                                                    \
  |  |   51|  2.02k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   52|    276|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    276|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 276, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    276|        return #name;
  |  |  ------------------
  |  |   53|    276|                                                                                                   \
  |  |   54|    276|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.68k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.68k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.68k|        return #name;
  |  |  ------------------
  |  |   56|  1.68k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.58k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.58k|        return #name;
  |  |  ------------------
  |  |   57|  1.58k|                                                                                                   \
  |  |   58|  1.58k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  1.58k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.49k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.49k|        return #name;
  |  |  ------------------
  |  |   60|  1.49k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    140|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 140, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    140|        return #name;
  |  |  ------------------
  |  |   61|    140|                                                                                                   \
  |  |   62|    140|    /* Logic */                                                                                    \
  |  |   63|    140|                                                                                                   \
  |  |   64|    140|    /* And */                                                                                      \
  |  |   65|  1.76k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.76k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.76k|        return #name;
  |  |  ------------------
  |  |   66|  1.76k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    271|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 271, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    271|        return #name;
  |  |  ------------------
  |  |   67|    271|                                                                                                   \
  |  |   68|    271|    /* Or */                                                                                       \
  |  |   69|    707|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    707|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 707, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    707|        return #name;
  |  |  ------------------
  |  |   70|    707|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 74, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     74|        return #name;
  |  |  ------------------
  |  |   71|     74|                                                                                                   \
  |  |   72|     74|    /* XOR */                                                                                      \
  |  |   73|    664|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    664|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 664, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    664|        return #name;
  |  |  ------------------
  |  |   74|    664|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|    116|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    116|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 116, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    116|        return #name;
  |  |  ------------------
  |  |   80|  1.68k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.68k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.68k|        return #name;
  |  |  ------------------
  |  |   81|  1.68k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |   82|  2.01k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.01k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.01k|        return #name;
  |  |  ------------------
  |  |   83|  2.01k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 128, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    128|        return #name;
  |  |  ------------------
  |  |   84|    128|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |   85|     69|                                                                                                   \
  |  |   86|     69|    /* Greater than */                                                                             \
  |  |   87|     88|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |   88|    432|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    432|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 432, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    432|        return #name;
  |  |  ------------------
  |  |   89|    432|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 91, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     91|        return #name;
  |  |  ------------------
  |  |   90|  1.92k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.92k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.92k|        return #name;
  |  |  ------------------
  |  |   91|  2.11k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.11k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.11k|        return #name;
  |  |  ------------------
  |  |   92|  2.11k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.26k, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.26k|        return #name;
  |  |  ------------------
  |  |   93|  1.26k|                                                                                                   \
  |  |   94|  1.26k|    /* Less than or equal */                                                                       \
  |  |   95|  3.11k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.11k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.11k|        return #name;
  |  |  ------------------
  |  |   96|  3.68k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.68k, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.68k|        return #name;
  |  |  ------------------
  |  |   97|  3.68k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    515|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 515, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    515|        return #name;
  |  |  ------------------
  |  |   98|    515|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 156, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    156|        return #name;
  |  |  ------------------
  |  |   99|  1.42k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.42k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.42k|        return #name;
  |  |  ------------------
  |  |  100|  1.42k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 195, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    195|        return #name;
  |  |  ------------------
  |  |  101|    195|                                                                                                   \
  |  |  102|    195|    /* Greater than or equal */                                                                    \
  |  |  103|    195|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 107, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    107|        return #name;
  |  |  ------------------
  |  |  104|    107|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  105|  1.18k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.18k, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.18k|        return #name;
  |  |  ------------------
  |  |  106|  3.12k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  3.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.12k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.12k|        return #name;
  |  |  ------------------
  |  |  107|  3.12k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  108|  1.52k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.52k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.52k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.52k|        return #name;
  |  |  ------------------
  |  |  109|  1.52k|                                                                                                   \
  |  |  110|  1.52k|    /* Equal */                                                                                    \
  |  |  111|  1.52k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |  112|    399|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    399|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 399, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    399|        return #name;
  |  |  ------------------
  |  |  113|    724|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    724|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 724, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    724|        return #name;
  |  |  ------------------
  |  |  114|  3.38k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  3.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.38k, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.38k|        return #name;
  |  |  ------------------
  |  |  115|  3.38k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  116|     66|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|     67|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  120|    166|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    166|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 166, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    166|        return #name;
  |  |  ------------------
  |  |  121|  1.09k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.09k, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.09k|        return #name;
  |  |  ------------------
  |  |  122|  1.09k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  123|     70|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  124|     79|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  125|     79|                                                                                                   \
  |  |  126|     79|    /* Conditional branching */                                                                    \
  |  |  127|     79|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|  2.35k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.35k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.35k|        return #name;
  |  |  ------------------
  |  |  129|  2.35k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.49k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.49k|        return #name;
  |  |  ------------------
  |  |  130|  4.79k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.79k, False: 156k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.79k|        return #name;
  |  |  ------------------
  |  |  131|  4.79k|                                                                                                   \
  |  |  132|  4.79k|    /* Unconditional branching */                                                                  \
  |  |  133|  4.79k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|     14|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     14|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     77|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 77, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     77|        return #name;
  |  |  ------------------
  |  |  136|     77|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|     88|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |  140|  1.47k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.47k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.47k|        return #name;
  |  |  ------------------
  |  |  141|  1.47k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  142|  1.60k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.60k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.60k|        return #name;
  |  |  ------------------
  |  |  143|  1.60k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  144|     74|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 74, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     74|        return #name;
  |  |  ------------------
  |  |  145|     74|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|    968|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    968|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 968, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    968|        return #name;
  |  |  ------------------
  |  |  148|    968|                                                                                                   \
  |  |  149|    968|    /* Storing data */                                                                             \
  |  |  150|    968|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  151|  1.93k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.93k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.93k|        return #name;
  |  |  ------------------
  |  |  152|  3.22k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  3.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.22k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.22k|        return #name;
  |  |  ------------------
  |  |  153|  3.22k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.43k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.43k|        return #name;
  |  |  ------------------
  |  |  154|  1.43k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|    141|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    141|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 141, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    141|        return #name;
  |  |  ------------------
  |  |  156|    141|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  157|     69|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  158|     69|                                                                                                   \
  |  |  159|     69|    /* Moving data */                                                                              \
  |  |  160|  5.96k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.96k, False: 155k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.96k|        return #name;
  |  |  ------------------
  |  |  161|  5.96k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     95|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 95, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     95|        return #name;
  |  |  ------------------
  |  |  162|    130|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    130|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 130, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    130|        return #name;
  |  |  ------------------
  |  |  163|    130|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  164|     84|                                                                                                   \
  |  |  165|     84|    /* Converting data */                                                                          \
  |  |  166|    314|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    314|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 314, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    314|        return #name;
  |  |  ------------------
  |  |  167|    583|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    583|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 583, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    583|        return #name;
  |  |  ------------------
  |  |  168|  1.35k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.35k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.35k|        return #name;
  |  |  ------------------
  |  |  169|  1.35k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |  170|     68|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |  171|  1.15k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.15k, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.15k|        return #name;
  |  |  ------------------
  |  |  172|  1.15k|                                                                                                   \
  |  |  173|  1.15k|    /* Other */                                                                                    \
  |  |  174|  1.15k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    333|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 333, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|    333|        return #name;
  |  |  ------------------
  |  |  175|    333|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 73, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  209|     73|        return #name;
  |  |  ------------------
  |  |  176|    961|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|    961|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 961, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  209|    961|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 161k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   161k|        }
  218|   161k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  33.5k|    {
   32|  33.5k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 2.32k, False: 31.1k]
  ------------------
   33|  2.32k|        {
   34|  2.32k|            return true;
   35|  2.32k|        }
   36|       |
   37|  31.1k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 66, False: 31.1k]
  ------------------
   38|     66|        {
   39|     66|            return true;
   40|     66|        }
   41|       |
   42|  31.1k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 687, False: 30.4k]
  ------------------
   43|    687|        {
   44|    687|            return true;
   45|    687|        }
   46|       |
   47|  30.4k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 30.4k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  30.4k|        return false;
   53|  30.4k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  30.4k|    {
   57|  30.4k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 30.4k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  30.4k|        const char first_char = token.at(0);
   63|       |
   64|  30.4k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 9.50k, False: 20.9k]
  ------------------
   65|  9.50k|        {
   66|  9.50k|            return phi::is_alpha(first_char);
   67|  9.50k|        }
   68|       |
   69|  20.9k|        phi::boolean just_under_scores = (first_char == '_');
   70|  20.9k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 4.40k, False: 16.5k]
  |  Branch (70:15): [True: 16.3k, False: 4.57k]
  |  Branch (70:44): [True: 170, False: 4.40k]
  ------------------
   71|  4.40k|        {
   72|  4.40k|            return false;
   73|  4.40k|        }
   74|       |
   75|  72.4k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 59.9k, False: 12.5k]
  ------------------
   76|  59.9k|        {
   77|  59.9k|            const char c{token.at(index)};
   78|       |
   79|  59.9k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 28.7k, False: 31.1k]
  ------------------
   80|  28.7k|            {
   81|  28.7k|                just_under_scores = false;
   82|  28.7k|            }
   83|  31.1k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 27.1k, False: 3.94k]
  ------------------
   84|  27.1k|            {
   85|  27.1k|                continue;
   86|  27.1k|            }
   87|  3.94k|            else
   88|  3.94k|            {
   89|  3.94k|                return false;
   90|  3.94k|            }
   91|  59.9k|        }
   92|       |
   93|  12.5k|        return !just_under_scores;
   94|  16.5k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   346k|    {
  101|   346k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 346k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   346k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 27.9k, False: 318k]
  ------------------
  107|  27.9k|        {
  108|  27.9k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 16.8k, False: 11.1k]
  ------------------
  109|  16.8k|            {
  110|  16.8k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  16.8k|            }
  112|       |
  113|  11.1k|            return {};
  114|  27.9k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   318k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 1.94k, False: 316k]
  ------------------
  118|  1.94k|        {
  119|  1.94k|            return {};
  120|  1.94k|        }
  121|       |
  122|   316k|        std::int32_t number{0};
  123|   316k|        phi::boolean is_negative{false};
  124|   316k|        phi::boolean starts_with_zero{false};
  125|   316k|        phi::boolean parsing_binary{false};
  126|   316k|        phi::boolean parsing_octal{false};
  127|   316k|        phi::boolean parsing_hexadecimal{false};
  128|   316k|        phi::boolean parsed_something{false};
  129|   316k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   346k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 341k, False: 5.00k]
  ------------------
  134|   341k|        {
  135|   341k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   341k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 316k, False: 24.3k]
  ------------------
  139|   316k|            {
  140|   316k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 356, False: 316k]
  ------------------
  141|    356|                {
  142|    356|                    continue;
  143|    356|                }
  144|       |
  145|   316k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 2.75k, False: 313k]
  ------------------
  146|  2.75k|                {
  147|  2.75k|                    is_negative = true;
  148|  2.75k|                    continue;
  149|  2.75k|                }
  150|       |
  151|   313k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 13.6k, False: 300k]
  ------------------
  152|  13.6k|                {
  153|  13.6k|                    starts_with_zero = true;
  154|  13.6k|                    continue;
  155|  13.6k|                }
  156|       |
  157|   300k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 72, False: 300k]
  ------------------
  158|     72|                {
  159|     72|                    return {};
  160|     72|                }
  161|   300k|            }
  162|       |
  163|       |            // Second character
  164|   324k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 17.4k, False: 307k]
  ------------------
  165|  17.4k|            {
  166|  17.4k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 13.6k, False: 3.77k]
  ------------------
  167|  13.6k|                {
  168|       |                    // Binary
  169|  13.6k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 679, False: 12.9k]
  |  Branch (169:37): [True: 301, False: 12.6k]
  ------------------
  170|    980|                    {
  171|    980|                        parsing_binary = true;
  172|    980|                        continue;
  173|    980|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  12.6k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 1.90k, False: 10.7k]
  |  Branch (176:37): [True: 326, False: 10.4k]
  ------------------
  177|  2.23k|                    {
  178|  2.23k|                        parsing_hexadecimal = true;
  179|  2.23k|                        continue;
  180|  2.23k|                    }
  181|       |
  182|       |                    // Octal
  183|  10.4k|                    parsing_octal = true;
  184|  10.4k|                }
  185|  17.4k|            }
  186|       |
  187|       |            // Handle seperators
  188|   321k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 140, False: 321k]
  ------------------
  189|    140|            {
  190|    140|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 68, False: 72]
  ------------------
  191|     68|                {
  192|     68|                    return {};
  193|     68|                }
  194|       |
  195|     72|                parsed_separator = true;
  196|     72|                continue;
  197|    140|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   321k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 2.80k, False: 318k]
  |  Branch (200:32): [True: 0, False: 2.80k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   321k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 318k, False: 2.80k]
  |  Branch (205:17): [True: 0, False: 321k]
  |  Branch (205:33): [True: 0, False: 318k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   321k|            parsed_separator = false;
  212|   321k|            parsed_something = true;
  213|       |
  214|   321k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 448, False: 320k]
  ------------------
  215|    448|            {
  216|    448|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 316, False: 132]
  ------------------
  217|    316|                {
  218|    316|                    return {};
  219|    316|                }
  220|       |
  221|    132|                number <<= 1;
  222|    132|                number |= (c - '0');
  223|    132|            }
  224|   320k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 13.5k, False: 307k]
  ------------------
  225|  13.5k|            {
  226|  13.5k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 9.02k, False: 4.56k]
  ------------------
  227|  9.02k|                {
  228|  9.02k|                    return {};
  229|  9.02k|                }
  230|       |
  231|  4.56k|                number <<= 3;
  232|  4.56k|                number |= (c - '0');
  233|  4.56k|            }
  234|   307k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 2.42k, False: 304k]
  ------------------
  235|  2.42k|            {
  236|  2.42k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 525, False: 1.89k]
  ------------------
  237|    525|                {
  238|    525|                    return {};
  239|    525|                }
  240|       |
  241|  1.89k|                number <<= 4;
  242|  1.89k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.89k|            }
  244|   304k|            else
  245|   304k|            {
  246|   304k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 300k, False: 4.25k]
  ------------------
  247|   300k|                {
  248|   300k|                    return {};
  249|   300k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  4.25k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 3.10k, False: 1.14k]
  |  Branch (252:36): [True: 1.57k, False: 1.53k]
  ------------------
  253|  1.57k|                {
  254|  1.57k|                    return {};
  255|  1.57k|                }
  256|       |
  257|  2.68k|                number *= 10;
  258|  2.68k|                number += (c - '0');
  259|  2.68k|            }
  260|   321k|        }
  261|       |
  262|  5.00k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 4.37k, False: 633]
  ------------------
  263|  4.37k|        {
  264|       |            // Check for over/underflow
  265|  4.37k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 878, False: 3.49k]
  |  Branch (265:32): [True: 0, False: 878]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  4.37k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 3.49k, False: 878]
  |  Branch (270:17): [True: 0, False: 4.37k]
  |  Branch (270:33): [True: 0, False: 3.49k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  4.37k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 878, False: 3.49k]
  ------------------
  277|    878|            {
  278|    878|                return static_cast<std::int16_t>(-number);
  279|    878|            }
  280|       |
  281|  3.49k|            return static_cast<std::int16_t>(number);
  282|  4.37k|        }
  283|       |
  284|    633|        return {};
  285|  5.00k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  43.3k|    {
   96|  43.3k|        switch (value)
   97|  43.3k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  8.95k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  8.95k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8.95k, False: 34.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|  8.95k|        return #name;
  |  |  ------------------
  |  |   14|  15.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  15.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15.4k, False: 27.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  15.4k|        return #name;
  |  |  ------------------
  |  |   15|  15.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     86|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 86, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     86|        return #name;
  |  |  ------------------
  |  |   16|    809|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|    809|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 809, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    809|        return #name;
  |  |  ------------------
  |  |   17|    809|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 43.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   18|     68|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     68|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 68, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     68|        return #name;
  |  |  ------------------
  |  |   19|    153|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    153|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 153, False: 43.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    153|        return #name;
  |  |  ------------------
  |  |   20|    153|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     32|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 32, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     32|        return #name;
  |  |  ------------------
  |  |   21|  2.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.63k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.63k, False: 40.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.63k|        return #name;
  |  |  ------------------
  |  |   22|  2.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    681|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 681, False: 42.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|    681|        return #name;
  |  |  ------------------
  |  |   23|    681|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    262|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 262, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    262|        return #name;
  |  |  ------------------
  |  |   24|    262|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    116|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 116, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    116|        return #name;
  |  |  ------------------
  |  |   25|    116|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15, False: 43.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|     15|        return #name;
  |  |  ------------------
  |  |   26|     19|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 19, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     19|        return #name;
  |  |  ------------------
  |  |   27|     85|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     85|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 85, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     85|        return #name;
  |  |  ------------------
  |  |   28|     85|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|     52|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 52, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     52|        return #name;
  |  |  ------------------
  |  |   29|    245|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    245|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 245, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    245|        return #name;
  |  |  ------------------
  |  |   30|  2.54k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.54k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.54k, False: 40.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.54k|        return #name;
  |  |  ------------------
  |  |   31|  2.54k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     87|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 87, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     87|        return #name;
  |  |  ------------------
  |  |   32|    226|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    226|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 226, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    226|        return #name;
  |  |  ------------------
  |  |   33|    226|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    177|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 177, False: 43.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    177|        return #name;
  |  |  ------------------
  |  |   34|    261|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    261|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 261, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    261|        return #name;
  |  |  ------------------
  |  |   35|  1.36k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.36k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.36k, False: 41.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.36k|        return #name;
  |  |  ------------------
  |  |   36|  1.36k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    360|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 360, False: 42.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    360|        return #name;
  |  |  ------------------
  |  |   37|  1.97k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.97k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.97k, False: 41.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.97k|        return #name;
  |  |  ------------------
  |  |   38|  1.97k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    223|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 223, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    223|        return #name;
  |  |  ------------------
  |  |   39|    223|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 43.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   40|  2.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.38k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.38k, False: 40.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.38k|        return #name;
  |  |  ------------------
  |  |   41|  2.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|    249|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 249, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    249|        return #name;
  |  |  ------------------
  |  |   42|    249|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    208|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 208, False: 43.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    208|        return #name;
  |  |  ------------------
  |  |   43|    208|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|     81|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 81, False: 43.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     81|        return #name;
  |  |  ------------------
  |  |   44|  3.47k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  3.47k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.47k, False: 39.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.47k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 43.3k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  43.3k|        }
  109|  43.3k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  11.0k|    {
  131|  11.0k|        switch (value)
  132|  11.0k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  1.57k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.57k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.57k, False: 9.45k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.57k|        return #name;
  |  |  ------------------
  |  |   48|  1.57k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|    738|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 738, False: 10.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    738|        return #name;
  |  |  ------------------
  |  |   49|  1.69k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.69k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.69k, False: 9.33k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.69k|        return #name;
  |  |  ------------------
  |  |   50|  1.69k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   51|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   52|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   53|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   54|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     24|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 24, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     24|        return #name;
  |  |  ------------------
  |  |   55|    202|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    202|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 202, False: 10.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    202|        return #name;
  |  |  ------------------
  |  |   56|    202|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   57|  1.73k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.73k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.73k, False: 9.29k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.73k|        return #name;
  |  |  ------------------
  |  |   58|  1.73k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   59|    110|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|    110|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 110, False: 10.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    110|        return #name;
  |  |  ------------------
  |  |   60|    110|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   61|    122|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    122|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 122, False: 10.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    122|        return #name;
  |  |  ------------------
  |  |   62|    122|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   63|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|     36|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 36, False: 10.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|     36|        return #name;
  |  |  ------------------
  |  |   64|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   67|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   68|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|     89|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     89|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 89, False: 10.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|     89|        return #name;
  |  |  ------------------
  |  |   71|     89|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   72|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   73|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   75|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 11.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|     31|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     31|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 31, False: 10.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|     31|        return #name;
  |  |  ------------------
  |  |   77|  4.39k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.39k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.39k, False: 6.63k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.39k|        return #name;
  |  |  ------------------
  |  |   78|  4.39k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    154|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 154, False: 10.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    154|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 11.0k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  11.0k|        }
  144|  11.0k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  16.1k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  16.1k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 299k, False: 0]
  ------------------
   64|   299k|            {
   65|   299k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 16.1k, False: 283k]
  ------------------
   66|  16.1k|                {
   67|  16.1k|                    return &token;
   68|  16.1k|                }
   69|   299k|            }
   70|       |
   71|      0|            return nullptr;
   72|  16.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   317k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   317k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   317k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   461k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   461k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   461k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  69.4k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  69.4k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  69.4k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  52.9k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  13.1k|    {
   25|  13.1k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  13.1k|        switch (argument_number.unsafe())
   28|  13.1k|        {
   29|  9.99k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 9.99k, False: 3.11k]
  ------------------
   30|  9.99k|                m_Arg1 = argument;
   31|  9.99k|                break;
   32|  2.94k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 2.94k, False: 10.1k]
  ------------------
   33|  2.94k|                m_Arg2 = argument;
   34|  2.94k|                break;
   35|    174|            case 2u:
  ------------------
  |  Branch (35:13): [True: 174, False: 12.9k]
  ------------------
   36|    174|                m_Arg3 = argument;
   37|    174|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 13.1k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  13.1k|#endif
   42|  13.1k|        }
   43|  13.1k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   171k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  8.05k|    {
  171|  8.05k|        InstructionArgument arg;
  172|  8.05k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  8.05k|        arg.register_int.register_id = id;
  174|  8.05k|        return arg;
  175|  8.05k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|     86|    {
  179|     86|        InstructionArgument arg;
  180|     86|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|     86|        arg.register_float.register_id = id;
  182|     86|        return arg;
  183|     86|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.50k|    {
  187|  2.50k|        InstructionArgument arg;
  188|  2.50k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.50k|        arg.immediate_value.signed_value = value;
  190|  2.50k|        return arg;
  191|  2.50k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  2.46k|    {
  205|  2.46k|        InstructionArgument arg;
  206|  2.46k|        arg.m_Type           = ArgumentType::Label;
  207|  2.46k|        arg.label.label_name = label_name;
  208|  2.46k|        return arg;
  209|  2.46k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  52.9k|    {
  453|  52.9k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  52.9k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   292k|    {
   24|   292k|        switch (token.length())
   25|   292k|        {
   26|       |            // 1 character OpCodes
   27|  20.7k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 20.7k, False: 271k]
  ------------------
   28|  20.7k|                char c1 = token[0];
   29|  20.7k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 2.96k, False: 17.7k]
  ------------------
   30|  2.96k|                {
   31|  2.96k|                    return OpCode::J;
   32|  2.96k|                }
   33|  17.7k|                break;
   34|  20.7k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  41.9k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 41.9k, False: 250k]
  ------------------
   38|  41.9k|                char c1 = token[0];
   39|  41.9k|                char c2 = token[1];
   40|       |
   41|  41.9k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 17.3k, False: 24.5k]
  ------------------
   42|  41.9k|                {
   43|     99|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 99, False: 41.8k]
  ------------------
   44|    413|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 314, False: 41.6k]
  ------------------
   45|    413|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 165, False: 248]
  ------------------
   46|    165|                        {
   47|    165|                            return OpCode::JR;
   48|    165|                        }
   49|    248|                        break;
   50|       |
   51|  4.37k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 4.37k, False: 37.5k]
  ------------------
   52|  5.60k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 1.23k, False: 40.7k]
  ------------------
   53|  5.60k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 161, False: 5.44k]
  ------------------
   54|  5.60k|                        {
   55|  1.47k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 1.47k, False: 4.13k]
  ------------------
   56|  1.70k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 237, False: 5.36k]
  ------------------
   57|  1.70k|                                return OpCode::LB;
   58|    968|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 968, False: 4.63k]
  ------------------
   59|  1.13k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 162, False: 5.44k]
  ------------------
   60|  1.13k|                                return OpCode::LD;
   61|     66|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 66, False: 5.53k]
  ------------------
   62|    132|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 66, False: 5.53k]
  ------------------
   63|    132|                                return OpCode::LF;
   64|  1.60k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.60k, False: 4.00k]
  ------------------
   65|  1.66k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 67, False: 5.53k]
  ------------------
   66|  1.66k|                                return OpCode::LH;
   67|     74|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 74, False: 5.52k]
  ------------------
   68|    803|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 729, False: 4.87k]
  ------------------
   69|    803|                                return OpCode::LW;
   70|  5.60k|                        }
   71|    161|                        break;
   72|  5.80k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 5.80k, False: 36.1k]
  ------------------
   73|  5.91k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 111, False: 41.8k]
  ------------------
   74|  5.91k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 1.16k, False: 4.74k]
  ------------------
   75|  1.16k|                        {
   76|  1.16k|                            return OpCode::OR;
   77|  1.16k|                        }
   78|  4.74k|                        break;
   79|  7.87k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 7.87k, False: 34.0k]
  ------------------
   80|  12.6k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 4.74k, False: 37.1k]
  ------------------
   81|  12.6k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 7.24k, False: 5.38k]
  ------------------
   82|  12.6k|                        {
   83|     69|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 69, False: 12.5k]
  ------------------
   84|    135|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 66, False: 12.5k]
  ------------------
   85|    135|                                return OpCode::SB;
   86|     71|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 71, False: 12.5k]
  ------------------
   87|    869|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 798, False: 11.8k]
  ------------------
   88|    869|                                return OpCode::SD;
   89|     67|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 67, False: 12.5k]
  ------------------
   90|    773|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 706, False: 11.9k]
  ------------------
   91|    773|                                return OpCode::SF;
   92|  3.09k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 3.09k, False: 9.52k]
  ------------------
   93|  3.21k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 115, False: 12.5k]
  ------------------
   94|  3.21k|                                return OpCode::SH;
   95|    322|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 322, False: 12.2k]
  ------------------
   96|    392|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 70, False: 12.5k]
  ------------------
   97|    392|                                return OpCode::SW;
   98|  12.6k|                        }
   99|  7.24k|                        break;
  100|  41.9k|                }
  101|  29.7k|                break;
  102|  41.9k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   105k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 105k, False: 186k]
  ------------------
  106|   105k|                char c1 = token[0];
  107|   105k|                char c2 = token[1];
  108|   105k|                char c3 = token[2];
  109|       |
  110|   105k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 8.79k, False: 97.0k]
  ------------------
  111|   105k|                {
  112|  44.5k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 44.5k, False: 61.2k]
  ------------------
  113|  47.2k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 2.68k, False: 103k]
  ------------------
  114|  47.2k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 42.8k, False: 4.38k]
  |  Branch (114:29): [True: 42.7k, False: 4.46k]
  |  Branch (114:45): [True: 42.7k, False: 83]
  ------------------
  115|  42.7k|                        {
  116|  42.7k|                            return OpCode::ADD;
  117|  42.7k|                        }
  118|  4.46k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 4.11k, False: 359]
  |  Branch (118:34): [True: 2.27k, False: 2.19k]
  |  Branch (118:50): [True: 2.27k, False: 1.84k]
  ------------------
  119|  2.27k|                        {
  120|  2.27k|                            return OpCode::AND;
  121|  2.27k|                        }
  122|  2.19k|                        break;
  123|       |
  124|  2.19k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 934, False: 104k]
  ------------------
  125|  1.00k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 75, False: 105k]
  ------------------
  126|  1.00k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 880, False: 129]
  |  Branch (126:29): [True: 814, False: 195]
  |  Branch (126:45): [True: 814, False: 66]
  ------------------
  127|    814|                        {
  128|    814|                            return OpCode::DIV;
  129|    814|                        }
  130|    195|                        break;
  131|       |
  132|    624|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 624, False: 105k]
  ------------------
  133|    816|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 192, False: 105k]
  ------------------
  134|    816|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 693, False: 123]
  ------------------
  135|    693|                        {
  136|    693|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 132, False: 561]
  ------------------
  137|    132|                            {
  138|    132|                                return OpCode::EQD;
  139|    132|                            }
  140|    561|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 403, False: 158]
  ------------------
  141|    403|                            {
  142|    403|                                return OpCode::EQF;
  143|    403|                            }
  144|    693|                        }
  145|    281|                        break;
  146|       |
  147|  6.40k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 6.40k, False: 99.4k]
  ------------------
  148|  8.07k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.67k, False: 104k]
  ------------------
  149|  8.07k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 3.20k, False: 4.87k]
  ------------------
  150|  3.20k|                        {
  151|  3.20k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.59k, False: 1.61k]
  ------------------
  152|  1.59k|                            {
  153|  1.59k|                                return OpCode::GED;
  154|  1.59k|                            }
  155|  1.61k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 1.54k, False: 66]
  ------------------
  156|  1.54k|                            {
  157|  1.54k|                                return OpCode::GEF;
  158|  1.54k|                            }
  159|  3.20k|                        }
  160|  4.87k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 4.80k, False: 69]
  ------------------
  161|  4.80k|                        {
  162|  4.80k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 2.00k, False: 2.79k]
  ------------------
  163|  2.00k|                            {
  164|  2.00k|                                return OpCode::GTD;
  165|  2.00k|                            }
  166|  2.79k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 2.18k, False: 612]
  ------------------
  167|  2.18k|                            {
  168|  2.18k|                                return OpCode::GTF;
  169|  2.18k|                            }
  170|  2.79k|                        }
  171|    747|                        break;
  172|       |
  173|    747|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 80, False: 105k]
  ------------------
  174|    683|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 603, False: 105k]
  ------------------
  175|    683|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 608, False: 75]
  |  Branch (175:29): [True: 143, False: 540]
  |  Branch (175:45): [True: 143, False: 465]
  ------------------
  176|    143|                        {
  177|    143|                            return OpCode::JAL;
  178|    143|                        }
  179|    540|                        break;
  180|       |
  181|  2.22k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 2.22k, False: 103k]
  ------------------
  182|  4.36k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 2.13k, False: 103k]
  ------------------
  183|  4.36k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 95, False: 4.26k]
  ------------------
  184|  4.36k|                        {
  185|     69|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 69, False: 4.29k]
  ------------------
  186|  1.29k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.22k, False: 3.13k]
  ------------------
  187|  1.29k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 135, False: 1.16k]
  ------------------
  188|    135|                                {
  189|    135|                                    return OpCode::LBU;
  190|    135|                                }
  191|  1.16k|                                break;
  192|       |
  193|  1.60k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.60k, False: 2.75k]
  ------------------
  194|  1.79k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 184, False: 4.18k]
  ------------------
  195|  1.79k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 260, False: 1.53k]
  ------------------
  196|    260|                                {
  197|    260|                                    return OpCode::LED;
  198|    260|                                }
  199|  1.53k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.46k, False: 66]
  ------------------
  200|  1.46k|                                {
  201|  1.46k|                                    return OpCode::LEF;
  202|  1.46k|                                }
  203|     66|                                break;
  204|       |
  205|    213|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 213, False: 4.15k]
  ------------------
  206|    367|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 154, False: 4.21k]
  ------------------
  207|    367|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 161, False: 206]
  ------------------
  208|    161|                                {
  209|    161|                                    return OpCode::LHI;
  210|    161|                                }
  211|    206|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 140, False: 66]
  ------------------
  212|    140|                                {
  213|    140|                                    return OpCode::LHU;
  214|    140|                                }
  215|     66|                                break;
  216|       |
  217|    210|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 210, False: 4.15k]
  ------------------
  218|    411|                            case 't':
  ------------------
  |  Branch (218:29): [True: 201, False: 4.16k]
  ------------------
  219|    411|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 135, False: 276]
  ------------------
  220|    135|                                {
  221|    135|                                    return OpCode::LTD;
  222|    135|                                }
  223|    276|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 194, False: 82]
  ------------------
  224|    194|                                {
  225|    194|                                    return OpCode::LTF;
  226|    194|                                }
  227|     82|                                break;
  228|       |
  229|     82|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 78, False: 4.28k]
  ------------------
  230|    404|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 326, False: 4.03k]
  ------------------
  231|    404|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 196, False: 208]
  ------------------
  232|    196|                                {
  233|    196|                                    return OpCode::LWU;
  234|    196|                                }
  235|    208|                                break;
  236|  4.36k|                        }
  237|  1.67k|                        break;
  238|       |
  239|  2.31k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 2.31k, False: 103k]
  ------------------
  240|  5.29k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 2.98k, False: 102k]
  ------------------
  241|  5.29k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.43k, False: 3.86k]
  ------------------
  242|  1.43k|                        {
  243|  1.43k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 145, False: 1.28k]
  ------------------
  244|    145|                            {
  245|    145|                                return OpCode::NED;
  246|    145|                            }
  247|  1.28k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 132, False: 1.15k]
  ------------------
  248|    132|                            {
  249|    132|                                return OpCode::NEF;
  250|    132|                            }
  251|  1.43k|                        }
  252|  3.86k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 2.49k, False: 1.36k]
  |  Branch (252:34): [True: 1.02k, False: 2.83k]
  |  Branch (252:50): [True: 1.02k, False: 1.46k]
  ------------------
  253|  1.02k|                        {
  254|  1.02k|                            return OpCode::NOP;
  255|  1.02k|                        }
  256|       |
  257|  3.98k|                        break;
  258|       |
  259|  3.98k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 230, False: 105k]
  ------------------
  260|    318|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 88, False: 105k]
  ------------------
  261|    318|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 215, False: 103]
  |  Branch (261:29): [True: 142, False: 176]
  |  Branch (261:45): [True: 142, False: 73]
  ------------------
  262|    142|                        {
  263|    142|                            return OpCode::ORI;
  264|    142|                        }
  265|    176|                        break;
  266|       |
  267|  25.2k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 25.2k, False: 80.6k]
  ------------------
  268|  26.2k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 963, False: 104k]
  ------------------
  269|  26.2k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 216, False: 25.9k]
  ------------------
  270|  26.2k|                        {
  271|  1.93k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 1.93k, False: 24.2k]
  ------------------
  272|  2.10k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 165, False: 26.0k]
  ------------------
  273|  2.10k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 2.03k, False: 67]
  ------------------
  274|  2.03k|                                {
  275|  2.03k|                                    return OpCode::SBU;
  276|  2.03k|                                }
  277|     67|                                break;
  278|       |
  279|    103|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 103, False: 26.1k]
  ------------------
  280|  4.68k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 4.58k, False: 21.6k]
  ------------------
  281|  4.68k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 4.02k, False: 655]
  ------------------
  282|  4.02k|                                {
  283|  4.02k|                                    return OpCode::SEQ;
  284|  4.02k|                                }
  285|    655|                                break;
  286|       |
  287|    655|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 196, False: 26.0k]
  ------------------
  288|    423|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 227, False: 25.9k]
  ------------------
  289|    423|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 191, False: 232]
  ------------------
  290|    191|                                {
  291|    191|                                    return OpCode::SGE;
  292|    191|                                }
  293|    232|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 166, False: 66]
  ------------------
  294|    166|                                {
  295|    166|                                    return OpCode::SGT;
  296|    166|                                }
  297|     66|                                break;
  298|       |
  299|  1.43k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.43k, False: 24.7k]
  ------------------
  300|  1.62k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 193, False: 26.0k]
  ------------------
  301|  1.62k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.49k, False: 130]
  ------------------
  302|  1.49k|                                {
  303|  1.49k|                                    return OpCode::SHU;
  304|  1.49k|                                }
  305|    130|                                break;
  306|       |
  307|  7.61k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 7.61k, False: 18.5k]
  ------------------
  308|  7.99k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 378, False: 25.8k]
  ------------------
  309|  7.99k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 68, False: 7.92k]
  ------------------
  310|  7.99k|                                {
  311|  1.68k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.68k, False: 6.30k]
  ------------------
  312|  1.75k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 73, False: 7.91k]
  ------------------
  313|  1.75k|                                        return OpCode::SLA;
  314|       |
  315|  3.10k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 3.10k, False: 4.88k]
  ------------------
  316|  3.17k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 72, False: 7.91k]
  ------------------
  317|  3.17k|                                        return OpCode::SLE;
  318|       |
  319|  2.66k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 2.66k, False: 5.33k]
  ------------------
  320|  2.79k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 135, False: 7.85k]
  ------------------
  321|  2.79k|                                        return OpCode::SLL;
  322|       |
  323|    116|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 116, False: 7.87k]
  ------------------
  324|    194|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 78, False: 7.91k]
  ------------------
  325|    194|                                        return OpCode::SLT;
  326|  7.99k|                                }
  327|     68|                                break;
  328|       |
  329|     69|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 69, False: 26.1k]
  ------------------
  330|    277|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 208, False: 25.9k]
  ------------------
  331|    277|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 209, False: 68]
  ------------------
  332|    209|                                {
  333|    209|                                    return OpCode::SNE;
  334|    209|                                }
  335|     68|                                break;
  336|       |
  337|  2.20k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 2.20k, False: 24.0k]
  ------------------
  338|  5.13k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 2.93k, False: 23.2k]
  ------------------
  339|  5.13k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.60k, False: 3.53k]
  ------------------
  340|  1.60k|                                {
  341|  1.60k|                                    return OpCode::SRA;
  342|  1.60k|                                }
  343|  3.53k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 757, False: 2.77k]
  ------------------
  344|    757|                                {
  345|    757|                                    return OpCode::SRL;
  346|    757|                                }
  347|  2.77k|                                break;
  348|       |
  349|  2.77k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 2.72k, False: 23.4k]
  ------------------
  350|  3.03k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 309, False: 25.8k]
  ------------------
  351|  3.03k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 2.88k, False: 146]
  ------------------
  352|  2.88k|                                {
  353|  2.88k|                                    return OpCode::SUB;
  354|  2.88k|                                }
  355|    146|                                break;
  356|       |
  357|    412|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 412, False: 25.7k]
  ------------------
  358|    720|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 308, False: 25.8k]
  ------------------
  359|    720|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 419, False: 301]
  ------------------
  360|    419|                                {
  361|    419|                                    return OpCode::SWU;
  362|    419|                                }
  363|    301|                                break;
  364|  26.2k|                        }
  365|       |
  366|  4.82k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 333, False: 105k]
  ------------------
  367|  7.51k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 2.69k, False: 103k]
  ------------------
  368|  7.51k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 469, False: 7.05k]
  |  Branch (368:29): [True: 398, False: 7.12k]
  |  Branch (368:45): [True: 398, False: 71]
  ------------------
  369|    398|                        {
  370|    398|                            return OpCode::XOR;
  371|    398|                        }
  372|  7.12k|                        break;
  373|   105k|                }
  374|  25.7k|                break;
  375|   105k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  78.8k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 78.8k, False: 213k]
  ------------------
  379|  78.8k|                char c1 = token[0];
  380|  78.8k|                char c2 = token[1];
  381|  78.8k|                char c3 = token[2];
  382|  78.8k|                char c4 = token[3];
  383|       |
  384|  78.8k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 6.31k, False: 72.4k]
  ------------------
  385|  78.8k|                {
  386|  11.9k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 11.9k, False: 66.8k]
  ------------------
  387|  13.5k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.64k, False: 77.1k]
  ------------------
  388|  13.5k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 72, False: 13.4k]
  ------------------
  389|  13.5k|                        {
  390|  12.8k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 12.8k, False: 715]
  ------------------
  391|  13.0k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 156, False: 13.4k]
  ------------------
  392|  13.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 11.4k, False: 1.54k]
  ------------------
  393|  11.4k|                                {
  394|  11.4k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 66, False: 11.3k]
  ------------------
  395|  11.4k|                                    {
  396|  1.66k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.66k, False: 9.79k]
  ------------------
  397|  1.73k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 11.3k]
  ------------------
  398|  1.73k|                                            return OpCode::ADDD;
  399|       |
  400|  2.72k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 2.72k, False: 8.73k]
  ------------------
  401|  2.79k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 66, False: 11.3k]
  ------------------
  402|  2.79k|                                            return OpCode::ADDF;
  403|       |
  404|  3.41k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 3.41k, False: 8.04k]
  ------------------
  405|  3.48k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 11.3k]
  ------------------
  406|  3.48k|                                            return OpCode::ADDI;
  407|       |
  408|  3.32k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.32k, False: 8.14k]
  ------------------
  409|  3.38k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 66, False: 11.3k]
  ------------------
  410|  3.38k|                                            return OpCode::ADDU;
  411|  11.4k|                                    }
  412|  11.4k|                                }
  413|  1.61k|                                break;
  414|       |
  415|  1.61k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 303, False: 13.2k]
  ------------------
  416|    487|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 184, False: 13.3k]
  ------------------
  417|    487|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 407, False: 80]
  |  Branch (417:37): [True: 335, False: 152]
  |  Branch (417:53): [True: 335, False: 72]
  ------------------
  418|    335|                                {
  419|    335|                                    return OpCode::ANDI;
  420|    335|                                }
  421|       |
  422|    152|                                break;
  423|  13.5k|                        }
  424|  1.83k|                        break;
  425|       |
  426|  8.57k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 8.57k, False: 70.2k]
  ------------------
  427|  10.2k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 1.65k, False: 77.1k]
  ------------------
  428|  10.2k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 149, False: 10.0k]
  ------------------
  429|  10.2k|                        {
  430|    122|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 122, False: 10.1k]
  ------------------
  431|  1.33k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.21k, False: 9.02k]
  ------------------
  432|  1.33k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 779, False: 553]
  |  Branch (432:37): [True: 705, False: 627]
  |  Branch (432:53): [True: 705, False: 74]
  ------------------
  433|    705|                                {
  434|    705|                                    return OpCode::BEQZ;
  435|    705|                                }
  436|    627|                                break;
  437|       |
  438|  5.94k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 5.94k, False: 4.29k]
  ------------------
  439|  6.21k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 264, False: 9.97k]
  ------------------
  440|  6.21k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 6.14k, False: 66]
  ------------------
  441|  6.14k|                                {
  442|  6.14k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 4.53k, False: 1.61k]
  ------------------
  443|  4.53k|                                    {
  444|  4.53k|                                        return OpCode::BFPF;
  445|  4.53k|                                    }
  446|  1.61k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.54k, False: 66]
  ------------------
  447|  1.54k|                                    {
  448|  1.54k|                                        return OpCode::BFPT;
  449|  1.54k|                                    }
  450|  6.14k|                                }
  451|    132|                                break;
  452|       |
  453|  2.38k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.38k, False: 7.85k]
  ------------------
  454|  2.54k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 166, False: 10.0k]
  ------------------
  455|  2.54k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 2.48k, False: 66]
  |  Branch (455:37): [True: 2.41k, False: 132]
  |  Branch (455:53): [True: 2.41k, False: 66]
  ------------------
  456|  2.41k|                                {
  457|  2.41k|                                    return OpCode::BNEZ;
  458|  2.41k|                                }
  459|  10.2k|                        }
  460|  1.04k|                        break;
  461|       |
  462|  4.27k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 4.27k, False: 74.5k]
  ------------------
  463|  4.38k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 114, False: 78.6k]
  ------------------
  464|  4.38k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 4.26k, False: 118]
  |  Branch (464:29): [True: 4.19k, False: 194]
  |  Branch (464:45): [True: 4.19k, False: 76]
  ------------------
  465|  4.19k|                        {
  466|  4.19k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 97, False: 4.09k]
  ------------------
  467|  4.19k|                            {
  468|  1.37k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.37k, False: 2.81k]
  ------------------
  469|  1.44k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 4.12k]
  ------------------
  470|  1.44k|                                    return OpCode::DIVD;
  471|       |
  472|    101|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 101, False: 4.09k]
  ------------------
  473|    167|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 4.12k]
  ------------------
  474|    167|                                    return OpCode::DIVF;
  475|       |
  476|    992|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 992, False: 3.20k]
  ------------------
  477|  1.05k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 4.12k]
  ------------------
  478|  1.05k|                                    return OpCode::DIVI;
  479|       |
  480|  1.35k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 1.35k, False: 2.83k]
  ------------------
  481|  1.42k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 66, False: 4.12k]
  ------------------
  482|  1.42k|                                    return OpCode::DIVU;
  483|  4.19k|                            }
  484|  4.19k|                        }
  485|    291|                        break;
  486|       |
  487|    291|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 93, False: 78.7k]
  ------------------
  488|  2.76k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 2.66k, False: 76.1k]
  ------------------
  489|  2.76k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.64k, False: 122]
  |  Branch (489:29): [True: 139, False: 2.62k]
  |  Branch (489:45): [True: 2.57k, False: 66]
  |  Branch (489:61): [True: 139, False: 2.43k]
  ------------------
  490|    139|                        {
  491|    139|                            return OpCode::HALT;
  492|    139|                        }
  493|  2.62k|                        break;
  494|       |
  495|  2.62k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 416, False: 78.3k]
  ------------------
  496|  1.25k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 836, False: 77.9k]
  ------------------
  497|  1.25k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 908, False: 344]
  |  Branch (497:29): [True: 132, False: 1.12k]
  |  Branch (497:45): [True: 198, False: 710]
  |  Branch (497:61): [True: 132, False: 66]
  ------------------
  498|    132|                        {
  499|    132|                            return OpCode::JALR;
  500|    132|                        }
  501|  1.12k|                        break;
  502|       |
  503|  6.85k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 6.85k, False: 71.9k]
  ------------------
  504|  8.29k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.43k, False: 77.3k]
  ------------------
  505|  8.29k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 6.31k, False: 1.97k]
  |  Branch (505:29): [True: 6.25k, False: 2.04k]
  |  Branch (505:45): [True: 6.25k, False: 66]
  ------------------
  506|  6.25k|                        {
  507|  6.25k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 6.02k, False: 227]
  ------------------
  508|  6.02k|                            {
  509|  6.02k|                                return OpCode::MOVD;
  510|  6.02k|                            }
  511|    227|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 161, False: 66]
  ------------------
  512|    161|                            {
  513|    161|                                return OpCode::MOVF;
  514|    161|                            }
  515|  6.25k|                        }
  516|  2.04k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.95k, False: 90]
  |  Branch (516:34): [True: 146, False: 1.89k]
  |  Branch (516:50): [True: 1.83k, False: 119]
  |  Branch (516:66): [True: 146, False: 1.68k]
  ------------------
  517|    146|                        {
  518|    146|                            return OpCode::MULT;
  519|    146|                        }
  520|  1.96k|                        break;
  521|       |
  522|  26.3k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 26.3k, False: 52.4k]
  ------------------
  523|  29.9k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 3.62k, False: 75.1k]
  ------------------
  524|  29.9k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 183, False: 29.7k]
  ------------------
  525|  29.9k|                        {
  526|  1.07k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.07k, False: 28.8k]
  ------------------
  527|  3.16k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 2.09k, False: 27.8k]
  ------------------
  528|  3.16k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 2.37k, False: 796]
  ------------------
  529|  2.37k|                                {
  530|  2.37k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.50k, False: 872]
  ------------------
  531|  1.50k|                                    {
  532|  1.50k|                                        return OpCode::SEQI;
  533|  1.50k|                                    }
  534|    872|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 740, False: 132]
  ------------------
  535|    740|                                    {
  536|    740|                                        return OpCode::SEQU;
  537|    740|                                    }
  538|  2.37k|                                }
  539|    928|                                break;
  540|       |
  541|  1.79k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 1.79k, False: 28.1k]
  ------------------
  542|  2.99k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.20k, False: 28.7k]
  ------------------
  543|  2.99k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.46k, False: 1.52k]
  ------------------
  544|  1.46k|                                {
  545|  1.46k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 151, False: 1.31k]
  ------------------
  546|    151|                                    {
  547|    151|                                        return OpCode::SGEI;
  548|    151|                                    }
  549|  1.31k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.25k, False: 66]
  ------------------
  550|  1.25k|                                    {
  551|  1.25k|                                        return OpCode::SGEU;
  552|  1.25k|                                    }
  553|  1.46k|                                }
  554|  1.52k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.45k, False: 69]
  ------------------
  555|  1.45k|                                {
  556|  1.45k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 562, False: 895]
  ------------------
  557|    562|                                    {
  558|    562|                                        return OpCode::SGTI;
  559|    562|                                    }
  560|    895|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 157, False: 738]
  ------------------
  561|    157|                                    {
  562|    157|                                        return OpCode::SGTU;
  563|    157|                                    }
  564|  1.45k|                                }
  565|    873|                                break;
  566|       |
  567|  9.64k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 9.64k, False: 20.3k]
  ------------------
  568|  10.3k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 740, False: 29.2k]
  ------------------
  569|  10.3k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 66, False: 10.3k]
  ------------------
  570|  10.3k|                                {
  571|  1.60k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.60k, False: 8.78k]
  ------------------
  572|  1.74k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 145, False: 10.2k]
  ------------------
  573|  1.74k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.64k, False: 98]
  ------------------
  574|  1.64k|                                        {
  575|  1.64k|                                            return OpCode::SLAI;
  576|  1.64k|                                        }
  577|     98|                                        break;
  578|       |
  579|  4.26k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 4.26k, False: 6.12k]
  ------------------
  580|  4.42k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 164, False: 10.2k]
  ------------------
  581|  4.42k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 3.74k, False: 680]
  ------------------
  582|  3.74k|                                        {
  583|  3.74k|                                            return OpCode::SLEI;
  584|  3.74k|                                        }
  585|    680|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 614, False: 66]
  ------------------
  586|    614|                                        {
  587|    614|                                            return OpCode::SLEU;
  588|    614|                                        }
  589|     66|                                        break;
  590|       |
  591|  2.02k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 2.02k, False: 8.35k]
  ------------------
  592|  2.20k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 172, False: 10.2k]
  ------------------
  593|  2.20k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.12k, False: 75]
  ------------------
  594|  2.12k|                                        {
  595|  2.12k|                                            return OpCode::SLLI;
  596|  2.12k|                                        }
  597|     75|                                        break;
  598|       |
  599|  1.80k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.80k, False: 8.58k]
  ------------------
  600|  1.94k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 141, False: 10.2k]
  ------------------
  601|  1.94k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.73k, False: 212]
  ------------------
  602|  1.73k|                                        {
  603|  1.73k|                                            return OpCode::SLTI;
  604|  1.73k|                                        }
  605|    212|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 146, False: 66]
  ------------------
  606|    146|                                        {
  607|    146|                                            return OpCode::SLTU;
  608|    146|                                        }
  609|     66|                                        break;
  610|  10.3k|                                }
  611|       |
  612|  1.63k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.26k, False: 28.6k]
  ------------------
  613|  3.20k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.56k, False: 28.3k]
  ------------------
  614|  3.20k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 2.89k, False: 306]
  ------------------
  615|  2.89k|                                {
  616|  2.89k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 232, False: 2.66k]
  ------------------
  617|    232|                                    {
  618|    232|                                        return OpCode::SNEI;
  619|    232|                                    }
  620|  2.66k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 2.59k, False: 72]
  ------------------
  621|  2.59k|                                    {
  622|  2.59k|                                        return OpCode::SNEU;
  623|  2.59k|                                    }
  624|  2.89k|                                }
  625|    378|                                break;
  626|       |
  627|    521|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 521, False: 29.4k]
  ------------------
  628|    725|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 204, False: 29.7k]
  ------------------
  629|    725|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 248, False: 477]
  |  Branch (629:37): [True: 181, False: 544]
  |  Branch (629:53): [True: 181, False: 67]
  ------------------
  630|    181|                                {
  631|    181|                                    return OpCode::SRAI;
  632|    181|                                }
  633|    544|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 470, False: 74]
  |  Branch (633:42): [True: 342, False: 202]
  |  Branch (633:58): [True: 342, False: 128]
  ------------------
  634|    342|                                {
  635|    342|                                    return OpCode::SRLI;
  636|    342|                                }
  637|    202|                                break;
  638|       |
  639|  5.83k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 5.83k, False: 24.1k]
  ------------------
  640|  9.66k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 3.83k, False: 26.1k]
  ------------------
  641|  9.66k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 8.66k, False: 1.00k]
  ------------------
  642|  8.66k|                                {
  643|  8.66k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.58k, False: 6.07k]
  ------------------
  644|  8.66k|                                    {
  645|     68|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 68, False: 8.59k]
  ------------------
  646|    134|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 8.59k]
  ------------------
  647|    134|                                            return OpCode::SUBD;
  648|       |
  649|  1.44k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 1.44k, False: 7.21k]
  ------------------
  650|  1.51k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 66, False: 8.59k]
  ------------------
  651|  1.51k|                                            return OpCode::SUBF;
  652|       |
  653|  2.08k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 2.08k, False: 6.57k]
  ------------------
  654|  2.15k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 8.59k]
  ------------------
  655|  2.15k|                                            return OpCode::SUBI;
  656|       |
  657|  2.21k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 2.21k, False: 6.44k]
  ------------------
  658|  2.28k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 8.59k]
  ------------------
  659|  2.28k|                                            return OpCode::SUBU;
  660|  8.66k|                                    }
  661|  8.66k|                                }
  662|  3.59k|                                break;
  663|  29.9k|                        }
  664|  6.15k|                        break;
  665|       |
  666|  6.15k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.55k, False: 77.2k]
  ------------------
  667|  1.69k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 141, False: 78.6k]
  ------------------
  668|  1.69k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 1.63k, False: 66]
  |  Branch (668:29): [True: 1.42k, False: 277]
  |  Branch (668:45): [True: 1.52k, False: 103]
  |  Branch (668:61): [True: 1.42k, False: 108]
  ------------------
  669|  1.42k|                        {
  670|  1.42k|                            return OpCode::TRAP;
  671|  1.42k|                        }
  672|    277|                        break;
  673|    277|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 173, False: 78.6k]
  ------------------
  674|    335|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 162, False: 78.6k]
  ------------------
  675|    335|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 268, False: 67]
  |  Branch (675:29): [True: 136, False: 199]
  |  Branch (675:45): [True: 202, False: 66]
  |  Branch (675:61): [True: 136, False: 66]
  ------------------
  676|    136|                        {
  677|    136|                            return OpCode::XORI;
  678|    136|                        }
  679|    199|                        break;
  680|  78.8k|                }
  681|  21.8k|                break;
  682|  78.8k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  25.9k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 25.9k, False: 266k]
  ------------------
  686|  25.9k|                char c1 = token[0];
  687|  25.9k|                char c2 = token[1];
  688|  25.9k|                char c3 = token[2];
  689|  25.9k|                char c4 = token[3];
  690|  25.9k|                char c5 = token[4];
  691|       |
  692|  25.9k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 2.14k, False: 23.8k]
  ------------------
  693|  25.9k|                {
  694|  6.04k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 6.04k, False: 19.9k]
  ------------------
  695|  6.04k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 25.9k]
  ------------------
  696|  6.04k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 6.04k, False: 0]
  |  Branch (696:29): [True: 6.04k, False: 0]
  |  Branch (696:45): [True: 6.04k, False: 0]
  |  Branch (696:61): [True: 6.04k, False: 0]
  |  Branch (696:77): [True: 6.04k, False: 0]
  ------------------
  697|  6.04k|                        {
  698|  6.04k|                            return OpCode::ADDUI;
  699|  6.04k|                        }
  700|      0|                        break;
  701|       |
  702|    152|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 152, False: 25.7k]
  ------------------
  703|    152|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 25.9k]
  ------------------
  704|    152|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 152, False: 0]
  |  Branch (704:29): [True: 152, False: 0]
  |  Branch (704:45): [True: 152, False: 0]
  |  Branch (704:61): [True: 152, False: 0]
  |  Branch (704:77): [True: 152, False: 0]
  ------------------
  705|    152|                        {
  706|    152|                            return OpCode::DIVUI;
  707|    152|                        }
  708|      0|                        break;
  709|       |
  710|  3.80k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 3.80k, False: 22.1k]
  ------------------
  711|  3.80k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 25.9k]
  ------------------
  712|  3.80k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 3.80k, False: 0]
  |  Branch (712:29): [True: 3.80k, False: 0]
  |  Branch (712:45): [True: 3.80k, False: 0]
  |  Branch (712:61): [True: 3.80k, False: 0]
  ------------------
  713|  3.80k|                        {
  714|  3.80k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 3.80k]
  ------------------
  715|  3.80k|                            {
  716|     95|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 95, False: 3.70k]
  ------------------
  717|     95|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 3.80k]
  ------------------
  718|     95|                                    return OpCode::MULTD;
  719|       |
  720|  3.54k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 3.54k, False: 256]
  ------------------
  721|  3.54k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 3.80k]
  ------------------
  722|  3.54k|                                    return OpCode::MULTF;
  723|       |
  724|     67|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 67, False: 3.73k]
  ------------------
  725|     67|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 3.80k]
  ------------------
  726|     67|                                    return OpCode::MULTI;
  727|       |
  728|     94|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 94, False: 3.71k]
  ------------------
  729|     94|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 3.80k]
  ------------------
  730|     94|                                    return OpCode::MULTU;
  731|  3.80k|                            }
  732|  3.80k|                        }
  733|      0|                        break;
  734|       |
  735|  13.8k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 13.8k, False: 12.1k]
  ------------------
  736|  13.8k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 25.9k]
  ------------------
  737|  13.8k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 13.8k]
  ------------------
  738|  13.8k|                        {
  739|  3.27k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 3.27k, False: 10.5k]
  ------------------
  740|  3.27k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 13.8k]
  ------------------
  741|  3.27k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 3.27k, False: 0]
  |  Branch (741:37): [True: 3.27k, False: 0]
  |  Branch (741:53): [True: 3.27k, False: 0]
  |  Branch (741:69): [True: 3.27k, False: 0]
  ------------------
  742|  3.27k|                                {
  743|  3.27k|                                    return OpCode::SEQUI;
  744|  3.27k|                                }
  745|      0|                                break;
  746|       |
  747|  4.98k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 4.98k, False: 8.81k]
  ------------------
  748|  4.98k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 13.8k]
  ------------------
  749|  4.98k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 3.07k, False: 1.91k]
  |  Branch (749:37): [True: 3.07k, False: 1.91k]
  |  Branch (749:53): [True: 3.07k, False: 0]
  |  Branch (749:69): [True: 3.07k, False: 0]
  ------------------
  750|  3.07k|                                {
  751|  3.07k|                                    return OpCode::SGEUI;
  752|  3.07k|                                }
  753|  1.91k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 1.91k, False: 0]
  |  Branch (753:42): [True: 1.91k, False: 0]
  |  Branch (753:58): [True: 1.91k, False: 0]
  |  Branch (753:74): [True: 1.91k, False: 0]
  ------------------
  754|  1.91k|                                {
  755|  1.91k|                                    return OpCode::SGTUI;
  756|  1.91k|                                }
  757|      0|                                break;
  758|       |
  759|  2.17k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.17k, False: 11.6k]
  ------------------
  760|  2.17k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 13.8k]
  ------------------
  761|  2.17k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 156, False: 2.01k]
  |  Branch (761:37): [True: 156, False: 2.01k]
  |  Branch (761:53): [True: 156, False: 0]
  |  Branch (761:69): [True: 156, False: 0]
  ------------------
  762|    156|                                {
  763|    156|                                    return OpCode::SLEUI;
  764|    156|                                }
  765|  2.01k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 2.01k, False: 0]
  |  Branch (765:42): [True: 2.01k, False: 0]
  |  Branch (765:58): [True: 2.01k, False: 0]
  |  Branch (765:74): [True: 2.01k, False: 0]
  ------------------
  766|  2.01k|                                {
  767|  2.01k|                                    return OpCode::SLTUI;
  768|  2.01k|                                }
  769|      0|                                break;
  770|       |
  771|     70|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 70, False: 13.7k]
  ------------------
  772|     70|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 13.8k]
  ------------------
  773|     70|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 70, False: 0]
  |  Branch (773:37): [True: 70, False: 0]
  |  Branch (773:53): [True: 70, False: 0]
  |  Branch (773:69): [True: 70, False: 0]
  ------------------
  774|     70|                                {
  775|     70|                                    return OpCode::SNEUI;
  776|     70|                                }
  777|      0|                                break;
  778|       |
  779|  3.30k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 3.30k, False: 10.5k]
  ------------------
  780|  3.30k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 13.8k]
  ------------------
  781|  3.30k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 3.30k, False: 0]
  |  Branch (781:37): [True: 3.30k, False: 0]
  |  Branch (781:53): [True: 3.30k, False: 0]
  |  Branch (781:69): [True: 3.30k, False: 0]
  ------------------
  782|  3.30k|                                {
  783|  3.30k|                                    return OpCode::SUBUI;
  784|  3.30k|                                }
  785|      0|                                break;
  786|  13.8k|                        }
  787|       |
  788|      0|                        break;
  789|  25.9k|                }
  790|       |
  791|  2.14k|                break;
  792|  25.9k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  5.54k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 5.54k, False: 286k]
  ------------------
  796|  5.54k|                char c1 = token[0];
  797|  5.54k|                char c2 = token[1];
  798|  5.54k|                char c3 = token[2];
  799|  5.54k|                char c4 = token[3];
  800|  5.54k|                char c5 = token[4];
  801|  5.54k|                char c6 = token[5];
  802|       |
  803|  5.54k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 3.54k, False: 2.00k]
  |  Branch (803:21): [True: 3.54k, False: 2.00k]
  |  Branch (803:37): [True: 3.54k, False: 0]
  |  Branch (803:53): [True: 3.54k, False: 0]
  ------------------
  804|  3.54k|                {
  805|  3.54k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 3.54k]
  ------------------
  806|  3.54k|                    {
  807|  1.42k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.42k, False: 2.11k]
  ------------------
  808|  1.42k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 3.54k]
  ------------------
  809|  1.42k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 1.42k, False: 0]
  ------------------
  810|  1.42k|                            {
  811|  1.42k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.35k, False: 68]
  ------------------
  812|  1.35k|                                {
  813|  1.35k|                                    return OpCode::CVTD2F;
  814|  1.35k|                                }
  815|     68|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 68, False: 0]
  ------------------
  816|     68|                                {
  817|     68|                                    return OpCode::CVTD2I;
  818|     68|                                }
  819|  1.42k|                            }
  820|      0|                            break;
  821|       |
  822|    894|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 894, False: 2.65k]
  ------------------
  823|    894|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 3.54k]
  ------------------
  824|    894|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 894, False: 0]
  ------------------
  825|    894|                            {
  826|    894|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 313, False: 581]
  ------------------
  827|    313|                                {
  828|    313|                                    return OpCode::CVTF2D;
  829|    313|                                }
  830|    581|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 581, False: 0]
  ------------------
  831|    581|                                {
  832|    581|                                    return OpCode::CVTF2I;
  833|    581|                                }
  834|    894|                            }
  835|      0|                            break;
  836|       |
  837|  1.22k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.22k, False: 2.32k]
  ------------------
  838|  1.22k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 3.54k]
  ------------------
  839|  1.22k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.22k, False: 0]
  ------------------
  840|  1.22k|                            {
  841|  1.22k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.15k, False: 68]
  ------------------
  842|  1.15k|                                {
  843|  1.15k|                                    return OpCode::CVTI2D;
  844|  1.15k|                                }
  845|     68|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 68, False: 0]
  ------------------
  846|     68|                                {
  847|     68|                                    return OpCode::CVTI2F;
  848|     68|                                }
  849|  1.22k|                            }
  850|  3.54k|                    }
  851|  3.54k|                }
  852|  2.00k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 477, False: 1.52k]
  |  Branch (852:26): [True: 477, False: 1.52k]
  |  Branch (852:42): [True: 477, False: 0]
  |  Branch (852:58): [True: 477, False: 0]
  |  Branch (852:74): [True: 477, False: 0]
  ------------------
  853|  2.00k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 477, False: 0]
  |  Branch (853:42): [True: 477, False: 0]
  ------------------
  854|    477|                {
  855|    477|                    return OpCode::MULTUI;
  856|    477|                }
  857|  1.52k|                break;
  858|  5.54k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  1.52k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 581, False: 291k]
  ------------------
  862|    581|                char c1 = token[0];
  863|    581|                char c2 = token[1];
  864|    581|                char c3 = token[2];
  865|    581|                char c4 = token[3];
  866|    581|                char c5 = token[4];
  867|    581|                char c6 = token[5];
  868|    581|                char c7 = token[6];
  869|       |
  870|    581|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 214, False: 367]
  |  Branch (870:21): [True: 214, False: 367]
  |  Branch (870:37): [True: 214, False: 0]
  |  Branch (870:53): [True: 214, False: 0]
  ------------------
  871|    214|                {
  872|    214|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 84, False: 130]
  |  Branch (872:25): [True: 84, False: 130]
  |  Branch (872:41): [True: 84, False: 0]
  |  Branch (872:54): [True: 84, False: 0]
  |  Branch (872:70): [True: 84, False: 0]
  ------------------
  873|     84|                    {
  874|     84|                        return OpCode::MOVI2FP;
  875|     84|                    }
  876|    130|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 130, False: 0]
  |  Branch (876:30): [True: 130, False: 0]
  |  Branch (876:46): [True: 130, False: 0]
  |  Branch (876:62): [True: 130, False: 0]
  |  Branch (876:75): [True: 130, False: 0]
  ------------------
  877|    130|                    {
  878|    130|                        return OpCode::MOVFP2I;
  879|    130|                    }
  880|    214|                }
  881|    367|                break;
  882|    581|            }
  883|       |
  884|  12.8k|            default: {
  ------------------
  |  Branch (884:13): [True: 12.8k, False: 279k]
  ------------------
  885|  12.8k|                break;
  886|    581|            }
  887|   292k|        }
  888|       |
  889|       |        // None found
  890|   111k|        return OpCode::NONE;
  891|   292k|    }
_ZN3dlx3iceEcc:
   17|   446k|    {
   18|   446k|        constexpr const char diff = 'a' - 'A';
   19|   446k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 299k, False: 146k]
  |  Branch (19:28): [True: 43.6k, False: 102k]
  ------------------
   20|   446k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   364k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  6.58k|    {
  193|  6.58k|        ParseError err;
  194|       |
  195|  6.58k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  6.58k|        err.m_LineNumber                           = line_number;
  197|  6.58k|        err.m_Column                               = column;
  198|  6.58k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  6.58k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  6.58k|        return err;
  202|  6.58k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  6.58k|    {
  207|  6.58k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  6.58k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  6.58k|                                                         actual_type);
  210|  6.58k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    207|    {
  216|    207|        ParseError err;
  217|       |
  218|    207|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    207|        err.m_LineNumber        = line_number;
  220|    207|        err.m_Column            = column;
  221|    207|        err.invalid_number.text = text;
  222|       |
  223|    207|        return err;
  224|    207|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    207|    {
  228|    207|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    207|                                                token.GetColumn().unsafe(), token.GetText());
  230|    207|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   139k|    {
  255|   139k|        ParseError err;
  256|       |
  257|   139k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   139k|        err.m_LineNumber                   = line_number;
  259|   139k|        err.m_Column                       = column;
  260|   139k|        err.unexpected_token.expected_type = expected_type;
  261|   139k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   139k|        return err;
  264|   139k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   139k|    {
  269|   139k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   139k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   139k|                                                  token.GetType());
  272|   139k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  5.56k|    {
  277|  5.56k|        ParseError err;
  278|       |
  279|  5.56k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  5.56k|        err.m_LineNumber                   = line_number;
  281|  5.56k|        err.m_Column                       = column;
  282|  5.56k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  5.56k|        return err;
  285|  5.56k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.49k|    {
  289|  2.49k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.49k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.49k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  52.9k|    {
  296|  52.9k|        ParseError err;
  297|       |
  298|  52.9k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  52.9k|        err.m_LineNumber                       = line_number;
  300|  52.9k|        err.m_Column                           = column;
  301|  52.9k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  52.9k|        return err;
  304|  52.9k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  52.9k|    {
  309|  52.9k|        return ConstructInvalidLabelIdentifierParseError(
  310|  52.9k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  52.9k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  16.1k|    {
  317|  16.1k|        ParseError err;
  318|       |
  319|  16.1k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  16.1k|        err.m_LineNumber                     = line_number;
  321|  16.1k|        err.m_Column                         = column;
  322|  16.1k|        err.label_already_defined.label_name = label_name;
  323|  16.1k|        err.label_already_defined.at_line    = at_line;
  324|  16.1k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  16.1k|        return err;
  327|  16.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  16.1k|    {
  332|  16.1k|        return ConstructLabelAlreadyDefinedParseError(
  333|  16.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  16.1k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  16.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   119k|    {
  340|   119k|        ParseError err;
  341|       |
  342|   119k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   119k|        err.m_LineNumber = line_number;
  344|   119k|        err.m_Column     = column;
  345|       |
  346|   119k|        return err;
  347|   119k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   119k|    {
  352|   119k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   119k|                                                        token.GetColumn().unsafe());
  354|   119k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  21.7k|    {
  360|  21.7k|        ParseError err;
  361|       |
  362|  21.7k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  21.7k|        err.m_LineNumber               = line_number;
  364|  21.7k|        err.m_Column                   = column;
  365|  21.7k|        err.too_few_arguments.required = required;
  366|  21.7k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  21.7k|        return err;
  369|  21.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  21.7k|    {
  374|  21.7k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  21.7k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  21.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.91k|    {
  381|  1.91k|        ParseError err;
  382|       |
  383|  1.91k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.91k|        err.m_LineNumber           = line_number;
  385|  1.91k|        err.m_Column               = column;
  386|  1.91k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.91k|        return err;
  389|  1.91k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.91k|    {
  393|  1.91k|        return ConstructEmptyLabelParseError(
  394|  1.91k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.91k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.59k, False: 319]
  ------------------
  396|  1.59k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.91k|                        token.GetText());
  398|  1.91k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    157|    {
  403|    157|        ParseError err;
  404|       |
  405|    157|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    157|        err.m_LineNumber = line_number;
  407|    157|        err.m_Column     = column;
  408|       |
  409|    157|        return err;
  410|    157|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    157|    {
  414|    157|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    157|                                               token.GetColumn().unsafe());
  416|    157|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   364k|    {
   19|   364k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   364k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.25k|    {
  182|  4.25k|        ParsedProgram program;
  183|       |
  184|  4.25k|        program.m_Tokens = tokens;
  185|       |
  186|  4.25k|        phi::boolean line_has_instruction{false};
  187|  4.25k|        phi::usize   label_count{0u};
  188|       |
  189|   768k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 764k, False: 4.25k]
  ------------------
  190|   764k|        {
  191|   764k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   764k|            switch (current_token.GetType())
  196|   764k|            {
  197|       |                // Ignore comments
  198|   106k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 106k, False: 657k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   106k|                    break;
  201|       |
  202|   290k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 290k, False: 474k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   290k|                    line_has_instruction = false;
  205|   290k|                    break;
  206|       |
  207|  73.9k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 73.9k, False: 690k]
  ------------------
  208|  73.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 2.64k, False: 71.3k]
  ------------------
  209|  2.64k|                    {
  210|  2.64k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  2.64k|                                current_token, Token::Type::NewLine));
  212|  2.64k|                        break;
  213|  2.64k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  71.3k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 43.7k, False: 27.6k]
  ------------------
  218|  43.7k|                    {
  219|  43.7k|                        program.AddParseError(
  220|  43.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  43.7k|                        break;
  222|  43.7k|                    }
  223|       |
  224|  27.6k|                    std::string_view label_name = current_token.GetText();
  225|  27.6k|                    label_name.remove_suffix(1);
  226|       |
  227|  27.6k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 3.07k, False: 24.5k]
  ------------------
  228|  3.07k|                    {
  229|  3.07k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  3.07k|                                current_token.GetLineNumber().unsafe(),
  231|  3.07k|                                current_token.GetColumn().unsafe(), label_name));
  232|  3.07k|                        break;
  233|  3.07k|                    }
  234|       |
  235|  24.5k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 5.76k, False: 18.7k]
  ------------------
  236|  5.76k|                    {
  237|  5.76k|                        program.AddParseError(
  238|  5.76k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  5.76k|                        break;
  240|  5.76k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  18.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 16.1k, False: 2.57k]
  ------------------
  244|  16.1k|                    {
  245|       |                        // Find first defintions of label
  246|  16.1k|                        const Token* first_label_definition =
  247|  16.1k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  16.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  16.1k|                                    {
  250|  16.1k|                                        std::string_view token_label_name = t.GetText();
  251|  16.1k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  16.1k|                                        if (token_label_name == label_name)
  254|  16.1k|                                        {
  255|  16.1k|                                            return true;
  256|  16.1k|                                        }
  257|  16.1k|                                    }
  258|       |
  259|  16.1k|                                    return false;
  260|  16.1k|                                });
  261|       |
  262|  16.1k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  16.1k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  16.1k|                                current_token, *first_label_definition));
  266|  16.1k|                        break;
  267|  16.1k|                    }
  268|       |
  269|  2.57k|                    program.m_JumpData[label_name] =
  270|  2.57k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  2.57k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  2.57k|                    break;
  277|  18.7k|                }
  278|       |
  279|   172k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 172k, False: 591k]
  ------------------
  280|   172k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 119k, False: 52.9k]
  ------------------
  281|   119k|                    {
  282|   119k|                        program.AddParseError(
  283|   119k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   119k|                        break;
  285|   119k|                    }
  286|       |
  287|  52.9k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  52.9k|                    PHI_ASSERT(current_token.HasHint());
  291|  52.9k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  52.9k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  52.9k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  52.9k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  52.9k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  52.9k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  52.9k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  52.9k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  52.9k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  82.8k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 80.0k, False: 2.83k]
  ------------------
  313|  80.0k|                    {
  314|       |                        // Get next token
  315|  80.0k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 218, False: 79.8k]
  ------------------
  316|    218|                        {
  317|    218|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    218|                                    current_token, number_of_argument_required.unsafe(),
  319|    218|                                    argument_num.unsafe()));
  320|    218|                            break;
  321|    218|                        }
  322|       |
  323|  79.8k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  79.8k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 16.8k, False: 62.9k]
  ------------------
  327|  16.8k|                        {
  328|  16.8k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 157, False: 16.6k]
  ------------------
  329|    157|                            {
  330|    157|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    157|                            }
  332|       |
  333|  16.8k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  16.8k|                            continue;
  336|  16.8k|                        }
  337|       |
  338|  62.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 21.5k, False: 41.4k]
  ------------------
  339|  21.5k|                        {
  340|  21.5k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  21.5k|                                    token, number_of_argument_required.unsafe(),
  342|  21.5k|                                    argument_num.unsafe()));
  343|  21.5k|                            break;
  344|  21.5k|                        }
  345|       |
  346|  41.4k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  41.4k|                                parse_instruction_argument(
  348|  41.4k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  41.4k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 28.3k, False: 13.1k]
  ------------------
  350|  28.3k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  28.3k|                            break;
  353|  28.3k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  13.1k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  13.1k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  13.1k|                        argument_num++;
  360|  13.1k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  13.1k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  52.9k|                    program.m_Instructions.emplace_back(instruction);
  368|  52.9k|                    line_has_instruction = true;
  369|  52.9k|                    break;
  370|   172k|                }
  371|       |
  372|   121k|                default:
  ------------------
  |  Branch (372:17): [True: 121k, False: 642k]
  ------------------
  373|   121k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   121k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 72.6k, False: 48.7k]
  ------------------
  375|  72.6k|                    {
  376|  72.6k|                        expected_token_type = Token::Type::NewLine;
  377|  72.6k|                    }
  378|       |
  379|   121k|                    program.AddParseError(
  380|   121k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   121k|                    break;
  382|   764k|            }
  383|   764k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.25k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 335, False: 3.91k]
  ------------------
  387|    335|        {
  388|  5.01k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 4.68k, False: 335]
  ------------------
  389|  4.68k|            {
  390|  4.68k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  4.68k|                const Token& token = *it;
  393|  4.68k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.91k, False: 2.76k]
  ------------------
  394|  1.91k|                {
  395|  1.91k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.91k|                    --label_count;
  397|  1.91k|                }
  398|  4.68k|            }
  399|    335|        }
  400|       |
  401|  4.25k|        return program;
  402|  4.25k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.25k|    {
  406|  4.25k|        TokenStream tokens = Tokenize(source);
  407|  4.25k|        return Parse(tokens);
  408|  4.25k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  41.4k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  41.4k|        switch (token.GetType())
   38|  41.4k|        {
   39|  2.04k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 2.04k, False: 39.4k]
  ------------------
   40|  2.04k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 720, False: 1.32k]
  ------------------
   41|  2.04k|                                          ArgumentType::AddressDisplacement))
   42|    720|                {
   43|    720|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    720|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    720|                    return {};
   47|    720|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.32k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.32k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.32k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 1.32k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  1.32k|                auto         it           = tokens.current_position();
   62|  1.32k|                const Token& first_token  = tokens.consume();
   63|  1.32k|                const Token& second_token = tokens.consume();
   64|  1.32k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.32k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.32k, False: 0]
  ------------------
   67|  1.32k|                {
   68|  1.32k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.32k|                            first_token, Token::Type::OpenBracket));
   70|  1.32k|                    return {};
   71|  1.32k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  10.0k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 10.0k, False: 31.4k]
  ------------------
   98|  10.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.98k, False: 8.05k]
  ------------------
   99|  1.98k|                {
  100|  1.98k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.98k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.98k|                    return {};
  103|  1.98k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  8.05k|                return ConstructInstructionArgumentRegisterInt(
  109|  8.05k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  10.0k|            }
  111|    816|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 816, False: 40.6k]
  ------------------
  112|    816|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 730, False: 86]
  ------------------
  113|    730|                {
  114|    730|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    730|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    730|                    return {};
  117|    730|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|     86|                return ConstructInstructionArgumentRegisterFloat(
  123|     86|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|    816|            }
  125|  2.49k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.49k, False: 38.9k]
  ------------------
  126|  2.49k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.49k|                return {};
  129|    816|            }
  130|  7.10k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 7.10k, False: 34.3k]
  ------------------
  131|       |                // Parse as Label
  132|  7.10k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.19k, False: 5.90k]
  ------------------
  133|  1.19k|                {
  134|  1.19k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.19k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.19k|                    return {};
  137|  1.19k|                }
  138|       |
  139|  5.90k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 5.90k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  5.90k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 3.44k, False: 2.46k]
  ------------------
  146|  3.44k|                {
  147|  3.44k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  3.44k|                    return {};
  149|  3.44k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  2.46k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  5.90k|            }
  155|  4.66k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 4.66k, False: 36.7k]
  ------------------
  156|  4.66k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.95k, False: 2.70k]
  ------------------
  157|  1.95k|                {
  158|  1.95k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.95k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.95k|                    return {};
  161|  1.95k|                }
  162|       |
  163|  2.70k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.50k, False: 207]
  ------------------
  164|  2.50k|                {
  165|  2.50k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.50k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.50k|                }
  168|       |
  169|    207|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    207|                return {};
  171|  2.70k|            }
  172|       |
  173|  14.3k|            default:
  ------------------
  |  Branch (173:13): [True: 14.3k, False: 27.1k]
  ------------------
  174|  14.3k|                program.AddParseError(
  175|  14.3k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  14.3k|                return {};
  177|  41.4k|        }
  178|  41.4k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   299k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   299k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 83.3k, False: 216k]
  ------------------
  249|  83.3k|                                    {
  250|  83.3k|                                        std::string_view token_label_name = t.GetText();
  251|  83.3k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  83.3k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 16.1k, False: 67.2k]
  ------------------
  254|  16.1k|                                        {
  255|  16.1k|                                            return true;
  256|  16.1k|                                        }
  257|  83.3k|                                    }
  258|       |
  259|   283k|                                    return false;
  260|   299k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    143|    {
  354|    143|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 143]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    143|        m_CurrentProgram = &program;
  361|       |
  362|    143|        m_ProgramCounter               = 0u;
  363|    143|        m_Halted                       = false;
  364|    143|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    143|        m_LastRaisedException          = Exception::None;
  366|    143|        m_CurrentStepCount             = 0u;
  367|       |
  368|    143|        return true;
  369|    143|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   346k|    {
   14|   346k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 77.0k, False: 269k]
  ------------------
   15|  77.0k|        {
   16|  77.0k|            char first_char = token[0];
   17|  77.0k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 29.3k, False: 47.7k]
  |  Branch (17:38): [True: 5.65k, False: 42.0k]
  ------------------
   18|  34.9k|            {
   19|  34.9k|                char second_char = token[1];
   20|  34.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 34.6k, False: 329]
  |  Branch (20:43): [True: 30.7k, False: 3.86k]
  ------------------
   21|  30.7k|                {
   22|  30.7k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  30.7k|                }
   24|  34.9k|            }
   25|  77.0k|        }
   26|   269k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 125k, False: 144k]
  ------------------
   27|   125k|        {
   28|   125k|            char first_char = token[0];
   29|   125k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 12.7k, False: 112k]
  |  Branch (29:38): [True: 2.86k, False: 109k]
  ------------------
   30|  15.6k|            {
   31|  15.6k|                char second_char = token[1];
   32|  15.6k|                char third_char  = token[2];
   33|       |
   34|  15.6k|                switch (second_char)
   35|  15.6k|                {
   36|  4.28k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 4.28k, False: 11.3k]
  ------------------
   37|  4.28k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 4.20k, False: 74]
  |  Branch (37:50): [True: 3.62k, False: 582]
  ------------------
   38|  3.62k|                        {
   39|  3.62k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  3.62k|                        }
   41|    656|                        break;
   42|  4.28k|                    }
   43|  8.98k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 8.98k, False: 6.65k]
  ------------------
   44|  8.98k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 8.87k, False: 106]
  |  Branch (44:50): [True: 7.14k, False: 1.73k]
  ------------------
   45|  7.14k|                        {
   46|  7.14k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  7.14k|                        }
   48|  1.84k|                        break;
   49|  8.98k|                    }
   50|  2.05k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 2.05k, False: 13.5k]
  ------------------
   51|  2.05k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 81, False: 1.97k]
  |  Branch (51:50): [True: 1.90k, False: 66]
  ------------------
   52|  1.98k|                        {
   53|  1.98k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.98k|                        }
   55|     66|                        break;
   56|  2.05k|                    }
   57|    318|                    default: {
  ------------------
  |  Branch (57:21): [True: 318, False: 15.3k]
  ------------------
   58|    318|                        break;
   59|  2.05k|                    }
   60|  15.6k|                }
   61|  15.6k|            }
   62|   125k|        }
   63|       |
   64|   303k|        return IntRegisterID::None;
   65|   346k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   303k|    {
   69|   303k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 46.2k, False: 256k]
  ------------------
   70|  46.2k|        {
   71|  46.2k|            char first_char = token[0];
   72|  46.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 4.29k, False: 41.9k]
  |  Branch (72:38): [True: 1.91k, False: 40.0k]
  ------------------
   73|  6.20k|            {
   74|  6.20k|                char second_char = token[1];
   75|  6.20k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 6.12k, False: 80]
  |  Branch (75:43): [True: 4.34k, False: 1.78k]
  ------------------
   76|  4.34k|                {
   77|  4.34k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  4.34k|                }
   79|  6.20k|            }
   80|  46.2k|        }
   81|   256k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 112k, False: 144k]
  ------------------
   82|   112k|        {
   83|   112k|            char first_char = token[0];
   84|   112k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 6.74k, False: 105k]
  |  Branch (84:38): [True: 1.72k, False: 104k]
  ------------------
   85|  8.47k|            {
   86|  8.47k|                char second_char = token[1];
   87|  8.47k|                char third_char  = token[2];
   88|       |
   89|  8.47k|                switch (second_char)
   90|  8.47k|                {
   91|  2.20k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.20k, False: 6.26k]
  ------------------
   92|  2.20k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.10k, False: 100]
  |  Branch (92:50): [True: 2.02k, False: 84]
  ------------------
   93|  2.02k|                        {
   94|  2.02k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  2.02k|                        }
   96|    184|                        break;
   97|  2.20k|                    }
   98|  1.51k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 1.51k, False: 6.95k]
  ------------------
   99|  1.51k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 232, False: 1.28k]
  |  Branch (99:50): [True: 159, False: 73]
  ------------------
  100|    159|                        {
  101|    159|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    159|                        }
  103|  1.35k|                        break;
  104|  1.51k|                    }
  105|  4.65k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 4.65k, False: 3.81k]
  ------------------
  106|  4.65k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 4.39k, False: 263]
  |  Branch (106:50): [True: 154, False: 109]
  ------------------
  107|  4.54k|                        {
  108|  4.54k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  4.54k|                        }
  110|    109|                        break;
  111|  4.65k|                    }
  112|    109|                    default: {
  ------------------
  |  Branch (112:21): [True: 93, False: 8.38k]
  ------------------
  113|     93|                        break;
  114|  4.65k|                    }
  115|  8.47k|                }
  116|  8.47k|            }
  117|   112k|        }
  118|       |
  119|   292k|        return FloatRegisterID::None;
  120|   303k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   353k|    {
  124|   353k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 88.9k, False: 264k]
  ------------------
  125|  88.9k|        {
  126|  88.9k|            char c1 = token[0];
  127|  88.9k|            char c2 = token[1];
  128|  88.9k|            char c3 = token[2];
  129|  88.9k|            char c4 = token[3];
  130|       |
  131|  88.9k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 10.2k, False: 78.7k]
  |  Branch (131:34): [True: 165, False: 78.6k]
  |  Branch (131:49): [True: 10.1k, False: 193]
  |  Branch (131:62): [True: 127, False: 66]
  ------------------
  132|  88.9k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 10.1k, False: 132]
  |  Branch (132:34): [True: 66, False: 66]
  |  Branch (132:49): [True: 10.1k, False: 66]
  |  Branch (132:62): [True: 0, False: 66]
  ------------------
  133|  88.9k|        }
  134|       |
  135|   264k|        return false;
  136|   353k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   594k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   253k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  2.24M|    {
   41|  2.24M|        return m_Type;
   42|  2.24M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.50M|    {
   51|  1.50M|        return m_LineNumber;
   52|  1.50M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  2.91M|    {
   56|  2.91M|        return m_Column;
   57|  2.91M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  2.00M|    {
   61|  2.00M|        return m_Text.length();
   62|  2.00M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   273k|    {
   66|   273k|        return m_Text;
   67|   273k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  56.9k|    {
   80|  56.9k|        return m_HasHint;
   81|  56.9k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  64.9k|    {
   85|  64.9k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  64.9k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  64.9k|                   m_Type == Type::ImmediateInteger);
   88|  64.9k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  64.9k|        return m_Hint;
   91|  64.9k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.25k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.25k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.25k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.32k|    {
   51|  1.32k|        auto it = m_Iterator;
   52|  5.28k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 3.96k, False: 1.32k]
  ------------------
   53|  3.96k|        {
   54|  3.96k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 3.96k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  3.96k|        }
   59|       |
   60|  1.32k|        return true;
   61|  1.32k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   848k|    {
   65|   848k|        return m_Iterator != m_Tokens.end();
   66|   848k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   847k|    {
   70|   847k|        return m_Iterator == m_Tokens.end();
   71|   847k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   847k|    {
   85|   847k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   847k|        return *m_Iterator++;
   91|   847k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.32k|    {
  164|  1.32k|        return m_Iterator;
  165|  1.32k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  4.25k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  4.25k|        return m_Tokens.begin();
  188|  4.25k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  4.25k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  4.25k|        return m_Tokens.end();
  206|  4.25k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    335|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    335|        return m_Tokens.rbegin();
  224|    335|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  4.68k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  4.68k|        return m_Tokens.rend();
  233|  4.68k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.25k|    {
   63|  4.25k|        TokenStream tokens;
   64|       |
   65|  4.25k|        std::string_view current_token;
   66|       |
   67|  4.25k|        phi::u64 current_line_number{1u};
   68|  4.25k|        phi::u64 current_column{1u};
   69|  4.25k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.25k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.95M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.95M, False: 4.25k]
  ------------------
   74|  1.95M|        {
   75|  1.95M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.95M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 314k, False: 1.63M]
  ------------------
   78|   314k|            {
   79|   314k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 125k, False: 189k]
  ------------------
   80|   125k|                {
   81|       |                    // Skip empty lines
   82|   125k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   125k|                                        current_line_number, current_column);
   84|       |
   85|   125k|                    parsing_comment = false;
   86|   125k|                    current_line_number += 1u;
   87|   125k|                    current_column = 1u;
   88|   125k|                    continue;
   89|   125k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   189k|                tokens.emplace_back(
   93|   189k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   189k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   189k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   189k|                                    current_line_number, current_column);
   98|       |
   99|   189k|                current_token   = std::string_view{};
  100|   189k|                parsing_comment = false;
  101|   189k|                current_line_number += 1u;
  102|   189k|                current_column = 0u;
  103|   189k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.63M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 12.5k, False: 1.62M]
  |  Branch (105:34): [True: 109k, False: 1.51M]
  ------------------
  106|   122k|            {
  107|   122k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 101k, False: 20.2k]
  ------------------
  108|   101k|                {
  109|   101k|                    token_begin = i;
  110|   101k|                }
  111|  20.2k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 12.3k, False: 7.92k]
  ------------------
  112|  12.3k|                {
  113|  12.3k|                    tokens.emplace_back(ParseToken(
  114|  12.3k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  12.3k|                            current_line_number, current_column - current_token.length()));
  116|  12.3k|                    token_begin   = i;
  117|  12.3k|                    current_token = std::string_view{};
  118|  12.3k|                }
  119|       |
  120|   122k|                parsing_comment = true;
  121|   122k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   122k|            }
  123|  1.51M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 131k, False: 1.38M]
  ------------------
  124|   131k|            {
  125|       |                // simply append the character
  126|   131k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   131k|            }
  128|  1.38M|            else
  129|  1.38M|            {
  130|       |                // Not parsing a comment
  131|  1.38M|                switch (c)
  132|  1.38M|                {
  133|   169k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 169k, False: 1.21M]
  ------------------
  134|   169k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 240, False: 1.38M]
  ------------------
  135|   169k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 1.38M]
  ------------------
  136|   169k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 376, False: 169k]
  ------------------
  137|    376|                        {
  138|    376|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    376|                            continue;
  141|    376|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   169k|                        tokens.emplace_back(ParseToken(
  145|   169k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   169k|                                current_line_number, current_column - current_token.length()));
  147|   169k|                        current_token = std::string_view{};
  148|   169k|                        break;
  149|  32.1k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 32.1k, False: 1.35M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  32.1k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 28.9k, False: 3.16k]
  ------------------
  152|  28.9k|                        {
  153|  28.9k|                            current_token =
  154|  28.9k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  28.9k|                            tokens.emplace_back(ParseToken(
  156|  28.9k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  28.9k|                                    current_line_number,
  158|  28.9k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  28.9k|                            current_token = std::string_view{};
  161|  28.9k|                        }
  162|  3.16k|                        else
  163|  3.16k|                        {
  164|       |                            // Orphan colon
  165|  3.16k|                            token_begin = i;
  166|       |
  167|  3.16k|                            tokens.emplace_back(Token::Type::Colon,
  168|  3.16k|                                                source.substr(token_begin.unsafe(), 1),
  169|  3.16k|                                                current_line_number, current_column);
  170|  3.16k|                        }
  171|  32.1k|                        break;
  172|  59.9k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 59.9k, False: 1.32M]
  ------------------
  173|  68.1k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 8.16k, False: 1.37M]
  ------------------
  174|  69.4k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 1.27k, False: 1.38M]
  ------------------
  175|  69.4k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 59.9k, False: 9.44k]
  ------------------
  176|  59.9k|                        {
  177|  59.9k|                            tokens.emplace_back(ParseToken(
  178|  59.9k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  59.9k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  59.9k|                            current_token = std::string_view{};
  182|  59.9k|                        }
  183|       |
  184|  69.4k|                        Token::Type type;
  185|  69.4k|                        switch (c)
  186|  69.4k|                        {
  187|  59.9k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 59.9k, False: 9.43k]
  ------------------
  188|  59.9k|                                type = Token::Type::Comma;
  189|  59.9k|                                break;
  190|  8.16k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 8.16k, False: 61.2k]
  ------------------
  191|  8.16k|                                type = Token::Type::OpenBracket;
  192|  8.16k|                                break;
  193|  1.27k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 1.27k, False: 68.1k]
  ------------------
  194|  1.27k|                                type = Token::Type::ClosingBracket;
  195|  1.27k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 69.4k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  69.4k|#endif
  201|  69.4k|                        }
  202|       |
  203|  69.4k|                        token_begin = i;
  204|       |
  205|  69.4k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  69.4k|                                            current_line_number, current_column);
  207|  69.4k|                        break;
  208|       |
  209|  1.11M|                    default:
  ------------------
  |  Branch (209:21): [True: 1.11M, False: 271k]
  ------------------
  210|  1.11M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 346k, False: 765k]
  ------------------
  211|   346k|                        {
  212|   346k|                            token_begin = i;
  213|   346k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  1.11M|                        current_token =
  217|  1.11M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.38M|                }
  219|  1.38M|            }
  220|       |
  221|  1.82M|            current_column += 1u;
  222|  1.82M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.25k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 1.49k, False: 2.75k]
  ------------------
  226|  1.49k|        {
  227|  1.49k|            tokens.emplace_back(
  228|  1.49k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  1.49k|                               current_line_number, current_column - current_token.length()));
  230|  1.49k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.25k|        tokens.finalize();
  234|       |
  235|  4.25k|        return tokens;
  236|  4.25k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   461k|    {
   11|   461k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 14.6k, False: 446k]
  |  Branch (11:35): [True: 14.4k, False: 169]
  ------------------
   12|  14.4k|        {
   13|  14.4k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  14.4k|            if (number)
  ------------------
  |  Branch (15:17): [True: 12.2k, False: 2.22k]
  ------------------
   16|  12.2k|            {
   17|  12.2k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  12.2k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  12.2k|            }
   20|       |
   21|  2.22k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  14.4k|        }
   23|       |
   24|   446k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 4.68k, False: 441k]
  |  Branch (24:35): [True: 109k, False: 332k]
  ------------------
   25|   114k|        {
   26|   114k|            return {Token::Type::Comment, token, line_number, column};
   27|   114k|        }
   28|       |
   29|   332k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 8.98k, False: 323k]
  ------------------
   30|  8.98k|        {
   31|  8.98k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  8.98k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  8.98k|        }
   34|       |
   35|   323k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 10.1k, False: 313k]
  ------------------
   36|  10.1k|        {
   37|  10.1k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  10.1k|        }
   39|       |
   40|   313k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 41.2k, False: 272k]
  ------------------
   41|  41.2k|        {
   42|  41.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  41.2k|                    static_cast<std::uint32_t>(id)};
   44|  41.2k|        }
   45|       |
   46|   272k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 11.0k, False: 261k]
  ------------------
   47|  11.0k|        {
   48|  11.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  11.0k|                    static_cast<std::uint32_t>(id)};
   50|  11.0k|        }
   51|       |
   52|   261k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 179k, False: 81.4k]
  ------------------
   53|   179k|        {
   54|   179k|            return {Token::Type::OpCode, token, line_number, column,
   55|   179k|                    static_cast<std::uint32_t>(opcode)};
   56|   179k|        }
   57|       |
   58|  81.4k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   261k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  4.25k|    {
   53|       |        // Constants
   54|  4.25k|        constexpr std::uint8_t number_of_opcodes =
   55|  4.25k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  4.25k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  4.25k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  4.25k|        std::string ret;
   60|       |
   61|   486k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 482k, False: 4.23k]
  ------------------
   62|   482k|        {
   63|   482k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   482k|            switch (current_value)
   66|   482k|            {
   67|       |                // OpCode
   68|   161k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 161k, False: 321k]
  ------------------
   69|       |                    // Has one more value
   70|   161k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 161k, False: 102]
  ------------------
   71|   161k|                    {
   72|   161k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   161k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   161k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 4, False: 161k]
  ------------------
   77|      4|                        {
   78|      4|                            return detail::ErrorString;
   79|      4|                        }
   80|   161k|                    }
   81|   161k|                    break;
   82|   161k|                }
   83|       |
   84|       |                // Int Register
   85|   161k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 43.3k, False: 439k]
  ------------------
   86|       |                    // Has one more value
   87|  43.3k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 43.3k, False: 38]
  ------------------
   88|  43.3k|                    {
   89|  43.3k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  43.3k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  43.3k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 43.3k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  43.3k|                    }
   97|  43.3k|                    break;
   98|  43.3k|                }
   99|       |
  100|       |                // Float register
  101|  43.3k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 11.0k, False: 471k]
  ------------------
  102|       |                    // Has one more value
  103|  11.0k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 11.0k, False: 5]
  ------------------
  104|  11.0k|                    {
  105|  11.0k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  11.0k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  11.0k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 11.0k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  11.0k|                    }
  113|  11.0k|                    break;
  114|  11.0k|                }
  115|       |
  116|       |                // Floating point status register
  117|  11.0k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 10.3k, False: 472k]
  ------------------
  118|  10.3k|                    ret += "FPSR";
  119|  10.3k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 1, False: 10.3k]
  ------------------
  120|      1|                    {
  121|      1|                        return detail::ErrorString;
  122|      1|                    }
  123|       |
  124|  10.3k|                    break;
  125|  10.3k|                }
  126|       |
  127|       |                // Immediate integer
  128|  17.3k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 17.3k, False: 465k]
  ------------------
  129|  17.3k|                    ret += "#";
  130|  17.3k|                    [[fallthrough]];
  131|  17.3k|                }
  132|       |
  133|       |                // Integer literal
  134|  34.2k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 16.9k, False: 465k]
  ------------------
  135|  34.2k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  34.2k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 34.2k, False: 49]
  ------------------
  138|  34.2k|                    {
  139|  34.2k|                        std::int16_t value = 0;
  140|       |
  141|   102k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 68.4k, False: 34.2k]
  ------------------
  142|  68.4k|                        {
  143|  68.4k|                            value <<= 8;
  144|  68.4k|                            value &= data[index++];
  145|  68.4k|                        }
  146|       |
  147|  34.2k|                        ret += std::to_string(value);
  148|  34.2k|                    }
  149|  34.2k|                    break;
  150|  17.3k|                }
  151|       |
  152|       |                // Label
  153|  7.36k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 7.36k, False: 475k]
  ------------------
  154|  7.36k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  7.36k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 7.35k, False: 1]
  ------------------
  157|  7.35k|                    {
  158|  7.35k|                        std::string label_name = "lbl_";
  159|       |
  160|  43.9k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 36.5k, False: 7.35k]
  ------------------
  161|  36.5k|                        {
  162|  36.5k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  36.5k|                            label_name += c;
  165|  36.5k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  7.35k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 7.25k, False: 102]
  |  Branch (168:45): [True: 6.06k, False: 1.19k]
  ------------------
  169|  6.06k|                        {
  170|  6.06k|                            label_name += ':';
  171|  6.06k|                            ret += label_name;
  172|  6.06k|                        }
  173|  1.29k|                        else
  174|  1.29k|                        {
  175|  1.29k|                            ret += label_name;
  176|  1.29k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 1.29k]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|  1.29k|                        }
  181|  7.35k|                    }
  182|  7.35k|                    break;
  183|  7.36k|                }
  184|       |
  185|       |                // Newline
  186|   105k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 105k, False: 376k]
  ------------------
  187|   105k|                    ret += '\n';
  188|   105k|                    break;
  189|  7.36k|                }
  190|       |
  191|       |                // Comment
  192|   109k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 109k, False: 373k]
  ------------------
  193|   109k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   109k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 109k, False: 51]
  ------------------
  196|   109k|                    {
  197|   109k|                        std::string comment = "; ";
  198|       |
  199|   652k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 543k, False: 109k]
  ------------------
  200|   543k|                        {
  201|   543k|                            comment += static_cast<char>(data[index++]);
  202|   543k|                        }
  203|       |
  204|   109k|                        ret += comment + '\n';
  205|   109k|                    }
  206|   109k|                    break;
  207|  7.36k|                }
  208|       |
  209|       |                // Ignore
  210|      8|                default:
  ------------------
  |  Branch (210:17): [True: 8, False: 482k]
  ------------------
  211|      8|                    return detail::ErrorString;
  212|   482k|            }
  213|   482k|        }
  214|       |
  215|  4.23k|        return ret;
  216|  4.25k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   227k|        {
   20|   227k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 225k, False: 1.31k]
  ------------------
   21|   225k|            {
   22|   225k|                std::uint8_t val = data[index++];
   23|   225k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 169k, False: 56.5k]
  ------------------
   24|   169k|                {
   25|   169k|                    text += ' ';
   26|   169k|                }
   27|  56.5k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 56.4k, False: 8]
  ------------------
   28|  56.4k|                {
   29|  56.4k|                    text += ',';
   30|  56.4k|                }
   31|      8|                else
   32|      8|                {
   33|      8|                    return false;
   34|      8|                }
   35|   225k|            }
   36|       |
   37|   227k|            return true;
   38|   227k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  36.5k|        {
   42|  36.5k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 28.1k, False: 8.37k]
  ------------------
   43|  28.1k|            {
   44|  28.1k|                return '_';
   45|  28.1k|            }
   46|       |
   47|  8.37k|            return c;
   48|  36.5k|        }

LLVMFuzzerTestOneInput:
   12|  4.25k|{
   13|  4.25k|    static dlxemu::Emulator emu;
   14|       |
   15|  4.25k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  4.25k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  4.25k|    editor.SetText(source);
   21|  4.25k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  4.25k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  4.25k|    editor.ColorizeInternal();
   26|       |
   27|  4.25k|    return 0;
   28|  4.25k|}


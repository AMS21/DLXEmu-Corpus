_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  50.2k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  237|  10.0k|    {
  238|  10.0k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (238:13): [True: 7.24k, False: 2.80k]
  ------------------
  239|  7.24k|        {
  240|  7.24k|            return m_Line < other.m_Line;
  241|  7.24k|        }
  242|       |
  243|  2.80k|        return m_Column <= other.m_Column;
  244|  10.0k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  248|      1|    {
  249|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (249:13): [True: 0, False: 1]
  ------------------
  250|      0|        {
  251|      0|            return m_Line > other.m_Line;
  252|      0|        }
  253|       |
  254|      1|        return m_Column >= other.m_Column;
  255|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  262|  4.70M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  290|      1|    {
  291|      1|        Colorize();
  292|      1|        m_Lines.push_back(Line());
  293|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  296|      1|    {
  297|      1|        VerifyInternalState();
  298|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  346|  10.0k|    {
  347|  10.0k|        m_ErrorMarkers.clear();
  348|  10.0k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  411|  10.0k|    {
  412|  10.0k|        m_Breakpoints.clear();
  413|  10.0k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  508|  10.0k|    {
  509|  10.0k|        m_Lines.clear();
  510|  10.0k|        ResetState();
  511|  10.0k|        m_Lines.emplace_back(Line());
  512|       |
  513|  10.0k|        for (const char character : text)
  ------------------
  |  Branch (513:35): [True: 6.36M, False: 10.0k]
  ------------------
  514|  6.36M|        {
  515|  6.36M|            if (character == '\r' ||
  ------------------
  |  Branch (515:17): [True: 532, False: 6.36M]
  |  Branch (515:17): [True: 335k, False: 6.03M]
  ------------------
  516|  6.36M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (516:18): [True: 1.66M, False: 4.70M]
  |  Branch (516:48): [True: 336k, False: 1.32M]
  |  Branch (516:69): [True: 335k, False: 1.58k]
  ------------------
  517|   335k|            {
  518|       |                // ignore the carriage return character and control characters
  519|   335k|            }
  520|  6.03M|            else if (character == '\n')
  ------------------
  |  Branch (520:22): [True: 1.32M, False: 4.70M]
  ------------------
  521|  1.32M|            {
  522|  1.32M|                m_Lines.emplace_back(Line());
  523|  1.32M|            }
  524|  4.70M|            else
  525|  4.70M|            {
  526|  4.70M|                m_Lines.back().emplace_back(
  527|  4.70M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  528|  4.70M|            }
  529|  6.36M|        }
  530|       |
  531|  10.0k|        m_TextChanged = true;
  532|  10.0k|        m_ScrollToTop = true;
  533|       |
  534|  10.0k|        m_UndoBuffer.clear();
  535|  10.0k|        m_UndoIndex = 0u;
  536|       |
  537|  10.0k|        Colorize();
  538|  10.0k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  541|  10.0k|    {
  542|  10.0k|        const phi::u32 max_line = GetMaxLineNumber();
  543|       |
  544|  10.0k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  545|  10.0k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1505|      1|    {
 1506|       |        // Lines should never be empty
 1507|      1|        PHI_ASSERT(!m_Lines.empty());
 1508|       |
 1509|       |        // Verify Selection is still in a valid state
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1511|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1512|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1513|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1514|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1515|       |
 1516|       |        // Verify cursor position
 1517|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1518|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1519|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1520|       |
 1521|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1522|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1523|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1524|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1525|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1526|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1527|       |#endif
 1528|       |
 1529|       |        // Verify that all breakpoints are on existing lines
 1530|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1530:35): [True: 0, False: 1]
  ------------------
 1531|      0|        {
 1532|      0|            PHI_ASSERT(break_point != 0u);
 1533|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1534|      0|        }
 1535|       |
 1536|       |        // Verify that all error markers are on existing lines
 1537|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1537:34): [True: 0, False: 1]
  ------------------
 1538|      0|        {
 1539|      0|            const phi::u32 line_number = error_marker.first;
 1540|       |
 1541|      0|            PHI_ASSERT(line_number != 0u);
 1542|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1543|      0|        }
 1544|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1547|      1|    {
 1548|      1|        constexpr const static Palette palette = {{
 1549|      1|                0xff7f7f7f, // Default
 1550|      1|                0xffd69c56, // OpCode
 1551|      1|                0xff00ff00, // Register
 1552|      1|                0xff7070e0, // IntegerLiteral
 1553|      1|                0xff206020, // Comment
 1554|      1|                0xff101010, // Background
 1555|      1|                0xffe0e0e0, // Cursor
 1556|      1|                0x80a06020, // Selection
 1557|      1|                0x800020ff, // ErrorMarker
 1558|      1|                0x40f08000, // Breakpoint
 1559|      1|                0xff707000, // Line number
 1560|      1|                0x40000000, // Current line fill
 1561|      1|                0x40808080, // Current line fill (inactive)
 1562|      1|                0x40a0a0a0, // Current line edge
 1563|      1|        }};
 1564|       |
 1565|      1|        return palette;
 1566|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1733|  10.0k|    {
 1734|       |        // TODO: This is quite unreadable
 1735|  10.0k|        const phi::u32 to_line =
 1736|  10.0k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1736:17): [True: 10.0k, False: 0]
  ------------------
 1737|  10.0k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1738|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1739|       |
 1740|  10.0k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1741|  10.0k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1742|  10.0k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1743|  10.0k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1744|  10.0k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1850|  10.0k|    {
 1851|  10.0k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1852|  10.0k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1853|  10.0k|        PHI_ASSERT(start <= end);
 1854|       |
 1855|  10.0k|        std::string result;
 1856|       |
 1857|  10.0k|        phi::u32   lstart = start.m_Line;
 1858|  10.0k|        phi::u32   lend   = end.m_Line;
 1859|  10.0k|        phi::u32   istart = GetCharacterIndex(start);
 1860|  10.0k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1861|  10.0k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1862|  10.0k|        phi::usize size   = 0u;
 1863|       |
 1864|  1.34M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1864:35): [True: 1.33M, False: 10.0k]
  ------------------
 1865|  1.33M|        {
 1866|  1.33M|            PHI_ASSERT(i < m_Lines.size());
 1867|  1.33M|            size += m_Lines[i.unsafe()].size();
 1868|  1.33M|        }
 1869|       |
 1870|  10.0k|        result.reserve((size + size / 8u).unsafe());
 1871|       |
 1872|  6.04M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1872:16): [True: 2.58M, False: 3.45M]
  |  Branch (1872:16): [True: 6.03M, False: 10.0k]
  |  Branch (1872:33): [True: 3.44M, False: 10.0k]
  ------------------
 1873|  6.03M|        {
 1874|  6.03M|            PHI_ASSERT(lstart < m_Lines.size());
 1875|       |
 1876|  6.03M|            const Line& line = m_Lines[lstart.unsafe()];
 1877|  6.03M|            if (istart < line.size())
  ------------------
  |  Branch (1877:17): [True: 4.70M, False: 1.32M]
  ------------------
 1878|  4.70M|            {
 1879|  4.70M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1880|  4.70M|                istart++;
 1881|  4.70M|            }
 1882|  1.32M|            else
 1883|  1.32M|            {
 1884|  1.32M|                istart = 0u;
 1885|  1.32M|                ++lstart;
 1886|       |
 1887|  1.32M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1887:21): [True: 1.32M, False: 0]
  ------------------
 1888|  1.32M|                {
 1889|  1.32M|                    result += '\n';
 1890|  1.32M|                }
 1891|  1.32M|            }
 1892|  6.03M|        }
 1893|       |
 1894|  10.0k|        return result;
 1895|  10.0k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2431|  20.0k|    {
 2432|  20.0k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2433|       |
 2434|  20.0k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2435|  20.0k|        phi::u32    index = 0u;
 2436|  1.41M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2436:35): [True: 1.40M, False: 12.6k]
  |  Branch (2436:35): [True: 1.39M, False: 20.0k]
  |  Branch (2436:58): [True: 1.39M, False: 7.42k]
  ------------------
 2437|  1.39M|        {
 2438|  1.39M|            PHI_ASSERT(index < line.size());
 2439|  1.39M|            const Char character = line[index.unsafe()].m_Char;
 2440|       |
 2441|  1.39M|            if (character == '\t')
  ------------------
  |  Branch (2441:17): [True: 0, False: 1.39M]
  ------------------
 2442|      0|            {
 2443|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2444|      0|            }
 2445|  1.39M|            else
 2446|  1.39M|            {
 2447|  1.39M|                ++column;
 2448|  1.39M|            }
 2449|       |
 2450|  1.39M|            index += UTF8CharLength(character);
 2451|  1.39M|        }
 2452|       |
 2453|  20.0k|        return index;
 2454|  20.0k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2503|  10.0k|    {
 2504|  10.0k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2504:13): [True: 0, False: 10.0k]
  ------------------
 2505|      0|        {
 2506|      0|            return 0u;
 2507|      0|        }
 2508|       |
 2509|  10.0k|        const Line& line = m_Lines[line_number.unsafe()];
 2510|  10.0k|        phi::u32    col  = 0u;
 2511|       |
 2512|  1.40M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2512:32): [True: 1.39M, False: 10.0k]
  ------------------
 2513|  1.39M|        {
 2514|  1.39M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2515|  1.39M|            if (character == '\t')
  ------------------
  |  Branch (2515:17): [True: 0, False: 1.39M]
  ------------------
 2516|      0|            {
 2517|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2518|      0|            }
 2519|  1.39M|            else
 2520|  1.39M|            {
 2521|  1.39M|                col++;
 2522|  1.39M|            }
 2523|       |
 2524|  1.39M|            i += UTF8CharLength(character);
 2525|  1.39M|        }
 2526|       |
 2527|  10.0k|        return col;
 2528|  10.0k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2531|  10.0k|    {
 2532|  10.0k|        PHI_ASSERT(!m_Lines.empty());
 2533|       |
 2534|  10.0k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2535|  10.0k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3663|  2.80M|    {
 3664|  2.80M|        PaletteIndex palette_index{PaletteIndex::Default};
 3665|       |
 3666|       |        // Determine palette color
 3667|  2.80M|        switch (token.GetType())
 3668|  2.80M|        {
 3669|   280k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3669:13): [True: 280k, False: 2.52M]
  ------------------
 3670|   280k|                palette_index = PaletteIndex::Comment;
 3671|   280k|                break;
 3672|  19.7k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3672:13): [True: 19.7k, False: 2.78M]
  ------------------
 3673|  49.2k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3673:13): [True: 29.4k, False: 2.77M]
  ------------------
 3674|  49.2k|                palette_index = PaletteIndex::IntegerLiteral;
 3675|  49.2k|                break;
 3676|   608k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3676:13): [True: 608k, False: 2.19M]
  ------------------
 3677|   608k|                palette_index = PaletteIndex::OpCode;
 3678|   608k|                break;
 3679|  23.3k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3679:13): [True: 23.3k, False: 2.78M]
  ------------------
 3680|   135k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3680:13): [True: 111k, False: 2.69M]
  ------------------
 3681|   152k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3681:13): [True: 17.3k, False: 2.78M]
  ------------------
 3682|   152k|                palette_index = PaletteIndex::Register;
 3683|   152k|                break;
 3684|  1.32M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3684:13): [True: 1.32M, False: 1.47M]
  ------------------
 3685|  1.32M|                return;
 3686|   386k|            default:
  ------------------
  |  Branch (3686:13): [True: 386k, False: 2.41M]
  ------------------
 3687|   386k|                break;
 3688|  2.80M|        }
 3689|       |
 3690|  1.47M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3691|  1.47M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3692|       |
 3693|  1.47M|        for (phi::u64 index{token.GetColumn() - 1u};
 3694|  5.59M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3694:14): [True: 4.11M, False: 1.47M]
  ------------------
 3695|  4.11M|        {
 3696|  4.11M|            PHI_ASSERT(index < line.size());
 3697|  4.11M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3698|  4.11M|        }
 3699|  1.47M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3702|  10.0k|    {
 3703|  10.0k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3704|       |
 3705|  10.0k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3705:38): [True: 2.80M, False: 10.0k]
  ------------------
 3706|  2.80M|        {
 3707|  2.80M|            ColorizeToken(token);
 3708|  2.80M|        }
 3709|  10.0k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3712|  10.0k|    {
 3713|  10.0k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3714|  10.0k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3715|  10.0k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3716|       |
 3717|       |        // Clear breakpoints and markers
 3718|  10.0k|        ClearBreakPoints();
 3719|  10.0k|        ClearErrorMarkers();
 3720|  10.0k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|  1.39M|{
  133|  1.39M|    return UTF8CharLength(static_cast<char>(characater));
  134|  1.39M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  2.79M|{
  103|  2.79M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 2.79M]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|  2.79M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 2.79M]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|  2.79M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 2.79M]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|  2.79M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 2.79M]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|  2.79M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 2.79M]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|  2.79M|    return 1_u8;
  129|  2.79M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  10.0k|    {
  175|  10.0k|        return m_DLXProgram;
  176|  10.0k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  10.0k|    {
  180|  10.0k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  10.0k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 274, False: 9.77k]
  ------------------
  183|    274|        {
  184|    274|            m_Processor.LoadProgram(m_DLXProgram);
  185|    274|        }
  186|  10.0k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  10.0k|    {
  200|  10.0k|        return m_CodeEditor;
  201|  10.0k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|      1|    {
  107|      1|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 1]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 1]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|      1|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 1]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   518k|        {
  169|   518k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   518k|            switch (index.unsafe())
  172|   518k|            {
  173|   221k|                case 0:
  ------------------
  |  Branch (173:17): [True: 221k, False: 297k]
  ------------------
  174|   221k|                    return m_Arg1Type;
  175|       |
  176|   151k|                case 1:
  ------------------
  |  Branch (176:17): [True: 151k, False: 367k]
  ------------------
  177|   151k|                    return m_Arg2Type;
  178|       |
  179|   146k|                case 2:
  ------------------
  |  Branch (179:17): [True: 146k, False: 372k]
  ------------------
  180|   146k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 518k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   518k|#endif
  187|   518k|            }
  188|   518k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   142k|        {
  195|   142k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   142k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 141k, False: 575]
  ------------------
  199|   141k|            {
  200|   141k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   141k|            }
  202|   142k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 112k, False: 30.5k]
  ------------------
  203|   112k|            {
  204|   112k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   112k|            }
  206|   142k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 77.1k, False: 65.4k]
  ------------------
  207|  77.1k|            {
  208|  77.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  77.1k|            }
  210|       |
  211|   142k|            return number_of_argument_required;
  212|   142k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   142k|        {
  221|   142k|            return m_Executor;
  222|   142k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  51.2k|    {
   38|  51.2k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  51.2k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  51.2k|                                         static_cast<underlying_t>(rhs));
   42|  51.2k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  51.2k|    {
   55|  51.2k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  51.2k|        return static_cast<underlying_t>(type & test) != 0;
   58|  51.2k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   564k|    {
  204|   564k|        switch (value)
  205|   564k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   309k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   309k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 309k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  208|   309k|        return #name;
  |  |  ------------------
  |  |   16|   309k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  10.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.2k, False: 554k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.2k|        return #name;
  |  |  ------------------
  |  |   17|  10.2k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.56k, False: 560k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.56k|        return #name;
  |  |  ------------------
  |  |   18|  10.4k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  10.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.4k, False: 554k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.4k|        return #name;
  |  |  ------------------
  |  |   19|  10.4k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.11k, False: 557k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.11k|        return #name;
  |  |  ------------------
  |  |   20|  7.11k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.70k, False: 559k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.70k|        return #name;
  |  |  ------------------
  |  |   21|  4.70k|                                                                                                   \
  |  |   22|  4.70k|    /* Sub */                                                                                      \
  |  |   23|  6.87k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  6.87k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.87k, False: 557k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.87k|        return #name;
  |  |  ------------------
  |  |   24|  6.87k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.75k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.75k|        return #name;
  |  |  ------------------
  |  |   25|  4.22k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.22k, False: 560k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.22k|        return #name;
  |  |  ------------------
  |  |   26|  4.32k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.32k, False: 560k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.32k|        return #name;
  |  |  ------------------
  |  |   27|  5.50k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.50k, False: 559k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.50k|        return #name;
  |  |  ------------------
  |  |   28|  5.50k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    353|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 353, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    353|        return #name;
  |  |  ------------------
  |  |   29|    353|                                                                                                   \
  |  |   30|    353|    /* Multiplication */                                                                           \
  |  |   31|  1.30k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.30k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.30k|        return #name;
  |  |  ------------------
  |  |   32|  1.30k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    631|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 631, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    631|        return #name;
  |  |  ------------------
  |  |   33|  1.29k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.29k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.29k|        return #name;
  |  |  ------------------
  |  |   34|  1.85k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.85k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.85k|        return #name;
  |  |  ------------------
  |  |   35|  2.66k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.66k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.66k|        return #name;
  |  |  ------------------
  |  |   36|  2.66k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    739|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 739, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    739|        return #name;
  |  |  ------------------
  |  |   37|    739|                                                                                                   \
  |  |   38|    739|    /* Division */                                                                                 \
  |  |   39|    977|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    977|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 977, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    977|        return #name;
  |  |  ------------------
  |  |   40|    977|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    871|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 871, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    871|        return #name;
  |  |  ------------------
  |  |   41|  2.75k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.75k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.75k|        return #name;
  |  |  ------------------
  |  |   42|  2.75k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.65k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.65k|        return #name;
  |  |  ------------------
  |  |   43|  1.65k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    328|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 328, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    328|        return #name;
  |  |  ------------------
  |  |   44|  2.21k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.21k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.21k|        return #name;
  |  |  ------------------
  |  |   45|  2.21k|                                                                                                   \
  |  |   46|  2.21k|    /* Shift left (logical) */                                                                     \
  |  |   47|  4.38k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.38k, False: 560k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.38k|        return #name;
  |  |  ------------------
  |  |   48|  4.38k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.63k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.63k|        return #name;
  |  |  ------------------
  |  |   49|  1.63k|                                                                                                   \
  |  |   50|  1.63k|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.63k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    539|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 539, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    539|        return #name;
  |  |  ------------------
  |  |   52|  1.43k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.43k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.43k|        return #name;
  |  |  ------------------
  |  |   53|  1.43k|                                                                                                   \
  |  |   54|  1.43k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.43k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    833|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 833, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    833|        return #name;
  |  |  ------------------
  |  |   56|  2.68k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.68k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.68k|        return #name;
  |  |  ------------------
  |  |   57|  2.68k|                                                                                                   \
  |  |   58|  2.68k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  2.68k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.87k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.87k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.87k|        return #name;
  |  |  ------------------
  |  |   60|  1.87k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.24k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.24k|        return #name;
  |  |  ------------------
  |  |   61|  1.24k|                                                                                                   \
  |  |   62|  1.24k|    /* Logic */                                                                                    \
  |  |   63|  1.24k|                                                                                                   \
  |  |   64|  1.24k|    /* And */                                                                                      \
  |  |   65|  5.44k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.44k, False: 559k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.44k|        return #name;
  |  |  ------------------
  |  |   66|  5.44k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.91k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.91k|        return #name;
  |  |  ------------------
  |  |   67|  1.91k|                                                                                                   \
  |  |   68|  1.91k|    /* Or */                                                                                       \
  |  |   69|  1.91k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.10k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.10k|        return #name;
  |  |  ------------------
  |  |   70|  1.46k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.46k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.46k|        return #name;
  |  |  ------------------
  |  |   71|  1.46k|                                                                                                   \
  |  |   72|  1.46k|    /* XOR */                                                                                      \
  |  |   73|  3.31k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.31k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.31k|        return #name;
  |  |  ------------------
  |  |   74|  3.31k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    175|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 175, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    175|        return #name;
  |  |  ------------------
  |  |   75|    175|                                                                                                   \
  |  |   76|    175|    /* Set conditionals */                                                                         \
  |  |   77|    175|                                                                                                   \
  |  |   78|    175|    /* Less than */                                                                                \
  |  |   79|    618|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    618|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 618, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    618|        return #name;
  |  |  ------------------
  |  |   80|  1.67k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.67k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.67k|        return #name;
  |  |  ------------------
  |  |   81|  1.67k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 93, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|     93|        return #name;
  |  |  ------------------
  |  |   82|  1.03k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.03k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.03k|        return #name;
  |  |  ------------------
  |  |   83|  1.03k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    622|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 622, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    622|        return #name;
  |  |  ------------------
  |  |   84|  2.15k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.15k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.15k|        return #name;
  |  |  ------------------
  |  |   85|  2.15k|                                                                                                   \
  |  |   86|  2.15k|    /* Greater than */                                                                             \
  |  |   87|  2.15k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    909|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 909, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    909|        return #name;
  |  |  ------------------
  |  |   88|  1.34k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.34k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.34k|        return #name;
  |  |  ------------------
  |  |   89|  1.34k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    615|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 615, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    615|        return #name;
  |  |  ------------------
  |  |   90|  7.33k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  7.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.33k, False: 557k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.33k|        return #name;
  |  |  ------------------
  |  |   91|  7.61k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.61k, False: 556k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.61k|        return #name;
  |  |  ------------------
  |  |   92|  7.61k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.76k, False: 560k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.76k|        return #name;
  |  |  ------------------
  |  |   93|  3.76k|                                                                                                   \
  |  |   94|  3.76k|    /* Less than or equal */                                                                       \
  |  |   95|  3.76k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.03k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.03k|        return #name;
  |  |  ------------------
  |  |   96|  6.80k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  6.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.80k, False: 557k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.80k|        return #name;
  |  |  ------------------
  |  |   97|  6.80k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.31k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.31k|        return #name;
  |  |  ------------------
  |  |   98|  2.10k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.10k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.10k|        return #name;
  |  |  ------------------
  |  |   99|  2.10k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.51k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.51k|        return #name;
  |  |  ------------------
  |  |  100|  9.17k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  9.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.17k, False: 555k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.17k|        return #name;
  |  |  ------------------
  |  |  101|  9.17k|                                                                                                   \
  |  |  102|  9.17k|    /* Greater than or equal */                                                                    \
  |  |  103|  9.17k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.41k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.41k|        return #name;
  |  |  ------------------
  |  |  104|  2.41k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    372|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 372, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    372|        return #name;
  |  |  ------------------
  |  |  105|  3.54k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.54k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.54k|        return #name;
  |  |  ------------------
  |  |  106|  5.79k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  5.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.79k, False: 558k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.79k|        return #name;
  |  |  ------------------
  |  |  107|  5.79k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.45k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.45k|        return #name;
  |  |  ------------------
  |  |  108|  1.45k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.43k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.43k|        return #name;
  |  |  ------------------
  |  |  109|  1.43k|                                                                                                   \
  |  |  110|  1.43k|    /* Equal */                                                                                    \
  |  |  111|  2.11k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.11k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.11k|        return #name;
  |  |  ------------------
  |  |  112|  3.37k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.37k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.37k|        return #name;
  |  |  ------------------
  |  |  113|  3.37k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.93k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.93k|        return #name;
  |  |  ------------------
  |  |  114|  3.08k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.08k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.08k|        return #name;
  |  |  ------------------
  |  |  115|  3.08k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    663|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 663, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    663|        return #name;
  |  |  ------------------
  |  |  116|    663|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 76, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|     76|        return #name;
  |  |  ------------------
  |  |  117|     76|                                                                                                   \
  |  |  118|     76|    /* Not equal */                                                                                \
  |  |  119|    291|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    291|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 291, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    291|        return #name;
  |  |  ------------------
  |  |  120|    291|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 229, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    229|        return #name;
  |  |  ------------------
  |  |  121|  2.48k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.48k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.48k|        return #name;
  |  |  ------------------
  |  |  122|  2.48k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    212|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 212, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    212|        return #name;
  |  |  ------------------
  |  |  123|  1.01k|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.01k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.01k|        return #name;
  |  |  ------------------
  |  |  124|  1.01k|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 69, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|     69|        return #name;
  |  |  ------------------
  |  |  125|     69|                                                                                                   \
  |  |  126|     69|    /* Conditional branching */                                                                    \
  |  |  127|    158|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    158|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 158, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    158|        return #name;
  |  |  ------------------
  |  |  128|  3.15k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.15k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.15k|        return #name;
  |  |  ------------------
  |  |  129|  4.86k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.86k, False: 559k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.86k|        return #name;
  |  |  ------------------
  |  |  130|  20.2k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  20.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 20.2k, False: 544k]
  |  |  |  |  ------------------
  |  |  |  |  208|  20.2k|        return #name;
  |  |  ------------------
  |  |  131|  20.2k|                                                                                                   \
  |  |  132|  20.2k|    /* Unconditional branching */                                                                  \
  |  |  133|  20.2k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|     42|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 42, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|     42|        return #name;
  |  |  ------------------
  |  |  134|    456|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    456|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 456, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    456|        return #name;
  |  |  ------------------
  |  |  135|    456|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    150|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 150, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    150|        return #name;
  |  |  ------------------
  |  |  136|    150|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 93, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|     93|        return #name;
  |  |  ------------------
  |  |  137|     93|                                                                                                   \
  |  |  138|     93|    /* Loading data */                                                                             \
  |  |  139|  1.18k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.18k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.18k|        return #name;
  |  |  ------------------
  |  |  140|  3.95k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.95k, False: 560k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.95k|        return #name;
  |  |  ------------------
  |  |  141|  3.95k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    242|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 242, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    242|        return #name;
  |  |  ------------------
  |  |  142|    626|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    626|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 626, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    626|        return #name;
  |  |  ------------------
  |  |  143|    626|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    396|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 396, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    396|        return #name;
  |  |  ------------------
  |  |  144|    396|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    244|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 244, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    244|        return #name;
  |  |  ------------------
  |  |  145|  1.39k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.39k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.39k|        return #name;
  |  |  ------------------
  |  |  146|  1.39k|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 98, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|     98|        return #name;
  |  |  ------------------
  |  |  147|  2.91k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.91k, False: 561k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.91k|        return #name;
  |  |  ------------------
  |  |  148|  2.91k|                                                                                                   \
  |  |  149|  2.91k|    /* Storing data */                                                                             \
  |  |  150|  2.91k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 101, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    101|        return #name;
  |  |  ------------------
  |  |  151|  2.20k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.20k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.20k|        return #name;
  |  |  ------------------
  |  |  152|  2.32k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.32k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.32k|        return #name;
  |  |  ------------------
  |  |  153|  2.32k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.18k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.18k|        return #name;
  |  |  ------------------
  |  |  154|  2.18k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    157|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 157, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    157|        return #name;
  |  |  ------------------
  |  |  155|  1.85k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.85k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.85k|        return #name;
  |  |  ------------------
  |  |  156|  1.85k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    219|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 219, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    219|        return #name;
  |  |  ------------------
  |  |  157|    266|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    266|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 266, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    266|        return #name;
  |  |  ------------------
  |  |  158|    266|                                                                                                   \
  |  |  159|    266|    /* Moving data */                                                                              \
  |  |  160|  1.91k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.91k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.91k|        return #name;
  |  |  ------------------
  |  |  161|  1.91k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.01k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.01k|        return #name;
  |  |  ------------------
  |  |  162|  1.44k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  1.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.44k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.44k|        return #name;
  |  |  ------------------
  |  |  163|  1.44k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    393|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 393, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    393|        return #name;
  |  |  ------------------
  |  |  164|    393|                                                                                                   \
  |  |  165|    393|    /* Converting data */                                                                          \
  |  |  166|  2.55k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.55k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.55k|        return #name;
  |  |  ------------------
  |  |  167|  2.55k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.04k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.04k|        return #name;
  |  |  ------------------
  |  |  168|  2.26k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.26k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.26k|        return #name;
  |  |  ------------------
  |  |  169|  2.26k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    917|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 917, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|    917|        return #name;
  |  |  ------------------
  |  |  170|    917|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    254|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 254, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    254|        return #name;
  |  |  ------------------
  |  |  171|  1.20k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.20k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.20k|        return #name;
  |  |  ------------------
  |  |  172|  1.20k|                                                                                                   \
  |  |  173|  1.20k|    /* Other */                                                                                    \
  |  |  174|  1.32k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.32k, False: 563k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.32k|        return #name;
  |  |  ------------------
  |  |  175|  1.32k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    591|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 591, False: 564k]
  |  |  |  |  ------------------
  |  |  |  |  208|    591|        return #name;
  |  |  ------------------
  |  |  176|  2.30k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  2.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.30k, False: 562k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.30k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 564k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   564k|        }
  217|   564k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  91.6k|    {
   32|  91.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 5.20k, False: 86.4k]
  ------------------
   33|  5.20k|        {
   34|  5.20k|            return true;
   35|  5.20k|        }
   36|       |
   37|  86.4k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 1.10k, False: 85.3k]
  ------------------
   38|  1.10k|        {
   39|  1.10k|            return true;
   40|  1.10k|        }
   41|       |
   42|  85.3k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 3.51k, False: 81.8k]
  ------------------
   43|  3.51k|        {
   44|  3.51k|            return true;
   45|  3.51k|        }
   46|       |
   47|  81.8k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 81.8k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  81.8k|        return false;
   53|  81.8k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  81.8k|    {
   57|  81.8k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 81.8k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  81.8k|        const char first_char = token.at(0);
   63|       |
   64|  81.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 9.98k, False: 71.8k]
  ------------------
   65|  9.98k|        {
   66|  9.98k|            return phi::is_alpha(first_char);
   67|  9.98k|        }
   68|       |
   69|  71.8k|        phi::boolean just_under_scores = (first_char == '_');
   70|  71.8k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 21.0k, False: 50.8k]
  |  Branch (70:15): [True: 48.2k, False: 23.6k]
  |  Branch (70:44): [True: 2.64k, False: 21.0k]
  ------------------
   71|  21.0k|        {
   72|  21.0k|            return false;
   73|  21.0k|        }
   74|       |
   75|   185k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 152k, False: 33.1k]
  ------------------
   76|   152k|        {
   77|   152k|            const char c{token.at(index)};
   78|       |
   79|   152k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 71.5k, False: 81.1k]
  ------------------
   80|  71.5k|            {
   81|  71.5k|                just_under_scores = false;
   82|  71.5k|            }
   83|  81.1k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 63.4k, False: 17.6k]
  ------------------
   84|  63.4k|            {
   85|  63.4k|                continue;
   86|  63.4k|            }
   87|  17.6k|            else
   88|  17.6k|            {
   89|  17.6k|                return false;
   90|  17.6k|            }
   91|   152k|        }
   92|       |
   93|  33.1k|        return !just_under_scores;
   94|  50.8k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.03M|    {
  101|  1.03M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.03M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.03M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 59.4k, False: 971k]
  ------------------
  107|  59.4k|        {
  108|  59.4k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 31.1k, False: 28.3k]
  ------------------
  109|  31.1k|            {
  110|  31.1k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  31.1k|            }
  112|       |
  113|  28.3k|            return {};
  114|  59.4k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   971k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 2.36k, False: 969k]
  ------------------
  118|  2.36k|        {
  119|  2.36k|            return {};
  120|  2.36k|        }
  121|       |
  122|   969k|        std::int32_t number{0};
  123|   969k|        phi::boolean is_negative{false};
  124|   969k|        phi::boolean starts_with_zero{false};
  125|   969k|        phi::boolean parsing_binary{false};
  126|   969k|        phi::boolean parsing_octal{false};
  127|   969k|        phi::boolean parsing_hexadecimal{false};
  128|   969k|        phi::boolean parsed_something{false};
  129|   969k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.06M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.05M, False: 12.8k]
  ------------------
  134|  1.05M|        {
  135|  1.05M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.05M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 969k, False: 85.8k]
  ------------------
  139|   969k|            {
  140|   969k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.47k, False: 967k]
  ------------------
  141|  2.47k|                {
  142|  2.47k|                    continue;
  143|  2.47k|                }
  144|       |
  145|   967k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 3.60k, False: 963k]
  ------------------
  146|  3.60k|                {
  147|  3.60k|                    is_negative = true;
  148|  3.60k|                    continue;
  149|  3.60k|                }
  150|       |
  151|   963k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 42.7k, False: 920k]
  ------------------
  152|  42.7k|                {
  153|  42.7k|                    starts_with_zero = true;
  154|  42.7k|                    continue;
  155|  42.7k|                }
  156|       |
  157|   920k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 141, False: 920k]
  ------------------
  158|    141|                {
  159|    141|                    return {};
  160|    141|                }
  161|   920k|            }
  162|       |
  163|       |            // Second character
  164|  1.00M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 49.8k, False: 956k]
  ------------------
  165|  49.8k|            {
  166|  49.8k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 42.7k, False: 7.12k]
  ------------------
  167|  42.7k|                {
  168|       |                    // Binary
  169|  42.7k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 605, False: 42.1k]
  |  Branch (169:37): [True: 1.43k, False: 40.7k]
  ------------------
  170|  2.03k|                    {
  171|  2.03k|                        parsing_binary = true;
  172|  2.03k|                        continue;
  173|  2.03k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  40.7k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 3.15k, False: 37.5k]
  |  Branch (176:37): [True: 1.44k, False: 36.1k]
  ------------------
  177|  4.59k|                    {
  178|  4.59k|                        parsing_hexadecimal = true;
  179|  4.59k|                        continue;
  180|  4.59k|                    }
  181|       |
  182|       |                    // Octal
  183|  36.1k|                    parsing_octal = true;
  184|  36.1k|                }
  185|  49.8k|            }
  186|       |
  187|       |            // Handle seperators
  188|   999k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 397, False: 999k]
  ------------------
  189|    397|            {
  190|    397|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 84, False: 313]
  ------------------
  191|     84|                {
  192|     84|                    return {};
  193|     84|                }
  194|       |
  195|    313|                parsed_separator = true;
  196|    313|                continue;
  197|    397|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   999k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 3.70k, False: 995k]
  |  Branch (200:32): [True: 0, False: 3.70k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   999k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 995k, False: 3.70k]
  |  Branch (205:17): [True: 0, False: 999k]
  |  Branch (205:33): [True: 0, False: 995k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   999k|            parsed_separator = false;
  212|   999k|            parsed_something = true;
  213|       |
  214|   999k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 1.89k, False: 997k]
  ------------------
  215|  1.89k|            {
  216|  1.89k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.55k, False: 344]
  ------------------
  217|  1.55k|                {
  218|  1.55k|                    return {};
  219|  1.55k|                }
  220|       |
  221|    344|                number <<= 1;
  222|    344|                number |= (c - '0');
  223|    344|            }
  224|   997k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 63.4k, False: 934k]
  ------------------
  225|  63.4k|            {
  226|  63.4k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 26.1k, False: 37.3k]
  ------------------
  227|  26.1k|                {
  228|  26.1k|                    return {};
  229|  26.1k|                }
  230|       |
  231|  37.3k|                number <<= 3;
  232|  37.3k|                number |= (c - '0');
  233|  37.3k|            }
  234|   934k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 5.00k, False: 929k]
  ------------------
  235|  5.00k|            {
  236|  5.00k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 3.14k, False: 1.86k]
  ------------------
  237|  3.14k|                {
  238|  3.14k|                    return {};
  239|  3.14k|                }
  240|       |
  241|  1.86k|                number <<= 4;
  242|  1.86k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.86k|            }
  244|   929k|            else
  245|   929k|            {
  246|   929k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 924k, False: 4.07k]
  ------------------
  247|   924k|                {
  248|   924k|                    return {};
  249|   924k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  4.07k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 2.16k, False: 1.90k]
  |  Branch (252:36): [True: 706, False: 1.46k]
  ------------------
  253|    706|                {
  254|    706|                    return {};
  255|    706|                }
  256|       |
  257|  3.36k|                number *= 10;
  258|  3.36k|                number += (c - '0');
  259|  3.36k|            }
  260|   999k|        }
  261|       |
  262|  12.8k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 12.5k, False: 329]
  ------------------
  263|  12.5k|        {
  264|       |            // Check for over/underflow
  265|  12.5k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 398, False: 12.1k]
  |  Branch (265:32): [True: 0, False: 398]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  12.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 12.1k, False: 398]
  |  Branch (270:17): [True: 0, False: 12.5k]
  |  Branch (270:33): [True: 0, False: 12.1k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  12.5k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 398, False: 12.1k]
  ------------------
  277|    398|            {
  278|    398|                return static_cast<std::int16_t>(-number);
  279|    398|            }
  280|       |
  281|  12.1k|            return static_cast<std::int16_t>(number);
  282|  12.5k|        }
  283|       |
  284|    329|        return {};
  285|  12.8k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   125k|    {
   96|   125k|        switch (value)
   97|   125k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  27.0k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  27.0k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 27.0k, False: 98.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  27.0k|        return #name;
  |  |  ------------------
  |  |   14|  59.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  59.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 59.7k, False: 65.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|  59.7k|        return #name;
  |  |  ------------------
  |  |   15|  59.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    148|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 148, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    148|        return #name;
  |  |  ------------------
  |  |   16|  3.13k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.13k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.13k, False: 121k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.13k|        return #name;
  |  |  ------------------
  |  |   17|  3.13k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    163|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 163, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    163|        return #name;
  |  |  ------------------
  |  |   18|    186|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    186|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 186, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    186|        return #name;
  |  |  ------------------
  |  |   19|    646|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    646|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 646, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    646|        return #name;
  |  |  ------------------
  |  |   20|    646|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    118|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 118, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    118|        return #name;
  |  |  ------------------
  |  |   21|  1.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.85k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.85k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.85k|        return #name;
  |  |  ------------------
  |  |   22|  1.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    648|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 648, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    648|        return #name;
  |  |  ------------------
  |  |   23|    648|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    164|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 164, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    164|        return #name;
  |  |  ------------------
  |  |   24|    428|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    428|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 428, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    428|        return #name;
  |  |  ------------------
  |  |   25|    428|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  100|     15|        return #name;
  |  |  ------------------
  |  |   26|     26|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 26, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  100|     26|        return #name;
  |  |  ------------------
  |  |   27|    283|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    283|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 283, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    283|        return #name;
  |  |  ------------------
  |  |   28|  2.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.00k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.00k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.00k|        return #name;
  |  |  ------------------
  |  |   29|  2.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    999|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 999, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    999|        return #name;
  |  |  ------------------
  |  |   30|  3.76k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.76k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.76k, False: 121k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.76k|        return #name;
  |  |  ------------------
  |  |   31|  3.76k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  100|     11|        return #name;
  |  |  ------------------
  |  |   32|  2.27k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.27k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.27k, False: 122k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.27k|        return #name;
  |  |  ------------------
  |  |   33|  2.27k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    109|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 109, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    109|        return #name;
  |  |  ------------------
  |  |   34|    145|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    145|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 145, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    145|        return #name;
  |  |  ------------------
  |  |   35|    954|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|    954|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 954, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    954|        return #name;
  |  |  ------------------
  |  |   36|  1.43k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.43k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.43k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.43k|        return #name;
  |  |  ------------------
  |  |   37|  1.73k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.73k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.73k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.73k|        return #name;
  |  |  ------------------
  |  |   38|  1.73k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    988|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 988, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|    988|        return #name;
  |  |  ------------------
  |  |   39|    988|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  100|     11|        return #name;
  |  |  ------------------
  |  |   40|  2.12k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.12k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.12k, False: 122k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.12k|        return #name;
  |  |  ------------------
  |  |   41|  2.12k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.58k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.58k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.58k|        return #name;
  |  |  ------------------
  |  |   42|  1.58k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     71|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 71, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  100|     71|        return #name;
  |  |  ------------------
  |  |   43|  1.03k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.03k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.03k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.03k|        return #name;
  |  |  ------------------
  |  |   44|  11.2k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  11.2k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11.2k, False: 113k]
  |  |  |  |  ------------------
  |  |  |  |  100|  11.2k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 125k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   125k|        }
  109|   125k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  23.7k|    {
  131|  23.7k|        switch (value)
  132|  23.7k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  6.36k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  6.36k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.36k, False: 17.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.36k|        return #name;
  |  |  ------------------
  |  |   48|  6.36k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.27k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.27k, False: 22.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.27k|        return #name;
  |  |  ------------------
  |  |   49|  1.27k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.21k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.21k, False: 22.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.21k|        return #name;
  |  |  ------------------
  |  |   50|  1.21k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|     77|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 77, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     77|        return #name;
  |  |  ------------------
  |  |   51|     77|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   52|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     42|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 42, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     42|        return #name;
  |  |  ------------------
  |  |   53|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   54|     52|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     52|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 52, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     52|        return #name;
  |  |  ------------------
  |  |   55|    368|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    368|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 368, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    368|        return #name;
  |  |  ------------------
  |  |   56|    368|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     63|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 63, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     63|        return #name;
  |  |  ------------------
  |  |   57|  4.16k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.16k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.16k, False: 19.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.16k|        return #name;
  |  |  ------------------
  |  |   58|  4.16k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|     98|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 98, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     98|        return #name;
  |  |  ------------------
  |  |   59|     98|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   60|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   61|     53|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|     53|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 53, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     53|        return #name;
  |  |  ------------------
  |  |   62|     96|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     96|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 96, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     96|        return #name;
  |  |  ------------------
  |  |   63|     96|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   64|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   67|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 23, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     23|        return #name;
  |  |  ------------------
  |  |   68|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   69|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|  1.21k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.21k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.21k, False: 22.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.21k|        return #name;
  |  |  ------------------
  |  |   71|  1.21k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   73|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     45|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     45|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 45, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     45|        return #name;
  |  |  ------------------
  |  |   75|     45|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 23.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   76|    926|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|    926|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 926, False: 22.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    926|        return #name;
  |  |  ------------------
  |  |   77|  6.79k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  6.79k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.79k, False: 16.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.79k|        return #name;
  |  |  ------------------
  |  |   78|  6.79k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    771|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 771, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    771|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 23.7k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  23.7k|        }
  144|  23.7k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  28.1k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  28.1k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 920k, False: 0]
  ------------------
   64|   920k|            {
   65|   920k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 28.1k, False: 892k]
  ------------------
   66|  28.1k|                {
   67|  28.1k|                    return &token;
   68|  28.1k|                }
   69|   920k|            }
   70|       |
   71|      0|            return nullptr;
   72|  28.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.34M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.34M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.34M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.31M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.31M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.31M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   151k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   151k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   151k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   142k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  22.3k|    {
   24|  22.3k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  22.3k|        switch (argument_number.unsafe())
   27|  22.3k|        {
   28|  16.7k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 16.7k, False: 5.64k]
  ------------------
   29|  16.7k|                m_Arg1 = argument;
   30|  16.7k|                break;
   31|  4.29k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 4.29k, False: 18.0k]
  ------------------
   32|  4.29k|                m_Arg2 = argument;
   33|  4.29k|                break;
   34|  1.35k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 1.35k, False: 21.0k]
  ------------------
   35|  1.35k|                m_Arg3 = argument;
   36|  1.35k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 22.3k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  22.3k|#endif
   41|  22.3k|        }
   42|  22.3k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   450k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  12.9k|    {
  174|  12.9k|        InstructionArgument arg;
  175|  12.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  12.9k|        arg.register_int.register_id = id;
  177|  12.9k|        return arg;
  178|  12.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    418|    {
  183|    418|        InstructionArgument arg;
  184|    418|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    418|        arg.register_float.register_id = id;
  186|    418|        return arg;
  187|    418|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  1.58k|    {
  192|  1.58k|        InstructionArgument arg;
  193|  1.58k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  1.58k|        arg.immediate_value.signed_value = value;
  195|  1.58k|        return arg;
  196|  1.58k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  7.42k|    {
  211|  7.42k|        InstructionArgument arg;
  212|  7.42k|        arg.m_Type           = ArgumentType::Label;
  213|  7.42k|        arg.label.label_name = label_name;
  214|  7.42k|        return arg;
  215|  7.42k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   142k|    {
  453|   142k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   142k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   914k|    {
   24|   914k|        switch (token.length())
   25|   914k|        {
   26|       |            // 1 character OpCodes
   27|  38.4k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 38.4k, False: 876k]
  ------------------
   28|  38.4k|                char c1 = token[0];
   29|  38.4k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 7.82k, False: 30.5k]
  ------------------
   30|  7.82k|                {
   31|  7.82k|                    return OpCode::J;
   32|  7.82k|                }
   33|  30.5k|                break;
   34|  38.4k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   106k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 106k, False: 808k]
  ------------------
   38|   106k|                char c1 = token[0];
   39|   106k|                char c2 = token[1];
   40|       |
   41|   106k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 55.7k, False: 50.6k]
  ------------------
   42|   106k|                {
   43|    495|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 495, False: 105k]
  ------------------
   44|  2.00k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.50k, False: 104k]
  ------------------
   45|  2.00k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 849, False: 1.15k]
  ------------------
   46|    849|                        {
   47|    849|                            return OpCode::JR;
   48|    849|                        }
   49|  1.15k|                        break;
   50|       |
   51|  8.62k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 8.62k, False: 97.8k]
  ------------------
   52|  21.3k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 12.7k, False: 93.7k]
  ------------------
   53|  21.3k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 337, False: 21.0k]
  ------------------
   54|  21.3k|                        {
   55|  3.95k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 3.95k, False: 17.4k]
  ------------------
   56|  6.37k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 2.42k, False: 18.9k]
  ------------------
   57|  6.37k|                                return OpCode::LB;
   58|  2.91k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 2.91k, False: 18.4k]
  ------------------
   59|  4.31k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 1.39k, False: 19.9k]
  ------------------
   60|  4.31k|                                return OpCode::LD;
   61|     98|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 98, False: 21.2k]
  ------------------
   62|    668|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 570, False: 20.7k]
  ------------------
   63|    668|                                return OpCode::LF;
   64|    626|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 626, False: 20.7k]
  ------------------
   65|  1.30k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 683, False: 20.6k]
  ------------------
   66|  1.30k|                                return OpCode::LH;
   67|    237|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 237, False: 21.1k]
  ------------------
   68|  8.34k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 8.10k, False: 13.2k]
  ------------------
   69|  8.34k|                                return OpCode::LW;
   70|  21.3k|                        }
   71|    337|                        break;
   72|  6.54k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 6.54k, False: 99.9k]
  ------------------
   73|  6.95k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 415, False: 106k]
  ------------------
   74|  6.95k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 3.64k, False: 3.31k]
  ------------------
   75|  3.64k|                        {
   76|  3.64k|                            return OpCode::OR;
   77|  3.64k|                        }
   78|  3.31k|                        break;
   79|  7.31k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 7.31k, False: 99.1k]
  ------------------
   80|  20.3k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 13.0k, False: 93.4k]
  ------------------
   81|  20.3k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 14.0k, False: 6.34k]
  ------------------
   82|  20.3k|                        {
   83|    101|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 101, False: 20.2k]
  ------------------
   84|    178|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 77, False: 20.2k]
  ------------------
   85|    178|                                return OpCode::SB;
   86|    266|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 266, False: 20.1k]
  ------------------
   87|    445|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 179, False: 20.1k]
  ------------------
   88|    445|                                return OpCode::SD;
   89|    219|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 219, False: 20.1k]
  ------------------
   90|  1.51k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 1.29k, False: 19.0k]
  ------------------
   91|  1.51k|                                return OpCode::SF;
   92|  2.25k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.25k, False: 18.1k]
  ------------------
   93|  3.37k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 1.11k, False: 19.2k]
  ------------------
   94|  3.37k|                                return OpCode::SH;
   95|    680|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 680, False: 19.6k]
  ------------------
   96|    837|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 157, False: 20.2k]
  ------------------
   97|    837|                                return OpCode::SW;
   98|  20.3k|                        }
   99|  14.0k|                        break;
  100|   106k|                }
  101|  74.6k|                break;
  102|   106k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   479k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 479k, False: 435k]
  ------------------
  106|   479k|                char c1 = token[0];
  107|   479k|                char c2 = token[1];
  108|   479k|                char c3 = token[2];
  109|       |
  110|   479k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 37.2k, False: 442k]
  ------------------
  111|   479k|                {
  112|   305k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 305k, False: 174k]
  ------------------
  113|   310k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 4.78k, False: 474k]
  ------------------
  114|   310k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 300k, False: 9.79k]
  |  Branch (114:29): [True: 300k, False: 9.82k]
  |  Branch (114:45): [True: 300k, False: 26]
  ------------------
  115|   300k|                        {
  116|   300k|                            return OpCode::ADD;
  117|   300k|                        }
  118|  9.82k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 7.73k, False: 2.08k]
  |  Branch (118:34): [True: 5.57k, False: 4.24k]
  |  Branch (118:50): [True: 5.57k, False: 2.15k]
  ------------------
  119|  5.57k|                        {
  120|  5.57k|                            return OpCode::AND;
  121|  5.57k|                        }
  122|  4.24k|                        break;
  123|       |
  124|  4.24k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.81k, False: 477k]
  ------------------
  125|  2.07k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 266, False: 479k]
  ------------------
  126|  2.07k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 1.73k, False: 345]
  |  Branch (126:29): [True: 1.16k, False: 915]
  |  Branch (126:45): [True: 1.16k, False: 570]
  ------------------
  127|  1.16k|                        {
  128|  1.16k|                            return OpCode::DIV;
  129|  1.16k|                        }
  130|    915|                        break;
  131|       |
  132|  3.62k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 3.62k, False: 475k]
  ------------------
  133|  4.16k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 542, False: 478k]
  ------------------
  134|  4.16k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 3.90k, False: 255]
  ------------------
  135|  3.90k|                        {
  136|  3.90k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 628, False: 3.28k]
  ------------------
  137|    628|                            {
  138|    628|                                return OpCode::EQD;
  139|    628|                            }
  140|  3.28k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 2.78k, False: 495]
  ------------------
  141|  2.78k|                            {
  142|  2.78k|                                return OpCode::EQF;
  143|  2.78k|                            }
  144|  3.90k|                        }
  145|    750|                        break;
  146|       |
  147|  15.6k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 15.6k, False: 463k]
  ------------------
  148|  18.7k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 3.05k, False: 476k]
  ------------------
  149|  18.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 4.84k, False: 13.8k]
  ------------------
  150|  4.84k|                        {
  151|  4.84k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.79k, False: 3.05k]
  ------------------
  152|  1.79k|                            {
  153|  1.79k|                                return OpCode::GED;
  154|  1.79k|                            }
  155|  3.05k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.78k, False: 274]
  ------------------
  156|  2.78k|                            {
  157|  2.78k|                                return OpCode::GEF;
  158|  2.78k|                            }
  159|  4.84k|                        }
  160|  13.8k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 12.7k, False: 1.10k]
  ------------------
  161|  12.7k|                        {
  162|  12.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.85k, False: 7.91k]
  ------------------
  163|  4.85k|                            {
  164|  4.85k|                                return OpCode::GTD;
  165|  4.85k|                            }
  166|  7.91k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 7.14k, False: 768]
  ------------------
  167|  7.14k|                            {
  168|  7.14k|                                return OpCode::GTF;
  169|  7.14k|                            }
  170|  7.91k|                        }
  171|  2.14k|                        break;
  172|       |
  173|  2.14k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 931, False: 478k]
  ------------------
  174|  2.02k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.09k, False: 478k]
  ------------------
  175|  2.02k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.60k, False: 425]
  |  Branch (175:29): [True: 1.17k, False: 850]
  |  Branch (175:45): [True: 1.17k, False: 425]
  ------------------
  176|  1.17k|                        {
  177|  1.17k|                            return OpCode::JAL;
  178|  1.17k|                        }
  179|    850|                        break;
  180|       |
  181|  17.2k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 17.2k, False: 462k]
  ------------------
  182|  26.2k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 9.09k, False: 470k]
  ------------------
  183|  26.2k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 638, False: 25.6k]
  ------------------
  184|  26.2k|                        {
  185|    242|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 242, False: 26.0k]
  ------------------
  186|  2.05k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.80k, False: 24.4k]
  ------------------
  187|  2.05k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 308, False: 1.74k]
  ------------------
  188|    308|                                {
  189|    308|                                    return OpCode::LBU;
  190|    308|                                }
  191|  1.74k|                                break;
  192|       |
  193|  10.6k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 10.6k, False: 15.6k]
  ------------------
  194|  13.4k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 2.76k, False: 23.5k]
  ------------------
  195|  13.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 9.23k, False: 4.20k]
  ------------------
  196|  9.23k|                                {
  197|  9.23k|                                    return OpCode::LED;
  198|  9.23k|                                }
  199|  4.20k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.58k, False: 2.62k]
  ------------------
  200|  1.58k|                                {
  201|  1.58k|                                    return OpCode::LEF;
  202|  1.58k|                                }
  203|  2.62k|                                break;
  204|       |
  205|  2.62k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.66k, False: 24.6k]
  ------------------
  206|  2.56k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 895, False: 25.3k]
  ------------------
  207|  2.56k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.27k, False: 1.28k]
  ------------------
  208|  1.27k|                                {
  209|  1.27k|                                    return OpCode::LHI;
  210|  1.27k|                                }
  211|  1.28k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.20k, False: 81]
  ------------------
  212|  1.20k|                                {
  213|  1.20k|                                    return OpCode::LHU;
  214|  1.20k|                                }
  215|     81|                                break;
  216|       |
  217|  2.78k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 2.78k, False: 23.5k]
  ------------------
  218|  3.73k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 950, False: 25.3k]
  ------------------
  219|  3.73k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 2.17k, False: 1.55k]
  ------------------
  220|  2.17k|                                {
  221|  2.17k|                                    return OpCode::LTD;
  222|  2.17k|                                }
  223|  1.55k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.21k, False: 346]
  ------------------
  224|  1.21k|                                {
  225|  1.21k|                                    return OpCode::LTF;
  226|  1.21k|                                }
  227|    346|                                break;
  228|       |
  229|  1.40k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.40k, False: 24.8k]
  ------------------
  230|  3.86k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 2.45k, False: 23.8k]
  ------------------
  231|  3.86k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 2.09k, False: 1.77k]
  ------------------
  232|  2.09k|                                {
  233|  2.09k|                                    return OpCode::LWU;
  234|  2.09k|                                }
  235|  1.77k|                                break;
  236|  26.2k|                        }
  237|  7.21k|                        break;
  238|       |
  239|  7.21k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 4.87k, False: 474k]
  ------------------
  240|  9.43k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 4.56k, False: 474k]
  ------------------
  241|  9.43k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 2.96k, False: 6.47k]
  ------------------
  242|  2.96k|                        {
  243|  2.96k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 455, False: 2.50k]
  ------------------
  244|    455|                            {
  245|    455|                                return OpCode::NED;
  246|    455|                            }
  247|  2.50k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 1.19k, False: 1.31k]
  ------------------
  248|  1.19k|                            {
  249|  1.19k|                                return OpCode::NEF;
  250|  1.19k|                            }
  251|  2.96k|                        }
  252|  6.47k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 4.07k, False: 2.40k]
  |  Branch (252:34): [True: 2.39k, False: 4.07k]
  |  Branch (252:50): [True: 2.39k, False: 1.67k]
  ------------------
  253|  2.39k|                        {
  254|  2.39k|                            return OpCode::NOP;
  255|  2.39k|                        }
  256|       |
  257|  5.38k|                        break;
  258|       |
  259|  5.38k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 1.62k, False: 477k]
  ------------------
  260|  1.88k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 260, False: 479k]
  ------------------
  261|  1.88k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.56k, False: 319]
  |  Branch (261:29): [True: 1.52k, False: 360]
  |  Branch (261:45): [True: 1.52k, False: 41]
  ------------------
  262|  1.52k|                        {
  263|  1.52k|                            return OpCode::ORI;
  264|  1.52k|                        }
  265|    360|                        break;
  266|       |
  267|  45.3k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 45.3k, False: 434k]
  ------------------
  268|  49.5k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 4.19k, False: 475k]
  ------------------
  269|  49.5k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 1.14k, False: 48.4k]
  ------------------
  270|  49.5k|                        {
  271|  2.20k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 2.20k, False: 47.3k]
  ------------------
  272|  2.77k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 569, False: 48.9k]
  ------------------
  273|  2.77k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 2.66k, False: 118]
  ------------------
  274|  2.66k|                                {
  275|  2.66k|                                    return OpCode::SBU;
  276|  2.66k|                                }
  277|    118|                                break;
  278|       |
  279|  2.11k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 2.11k, False: 47.4k]
  ------------------
  280|  5.66k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 3.54k, False: 46.0k]
  ------------------
  281|  5.66k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 2.93k, False: 2.73k]
  ------------------
  282|  2.93k|                                {
  283|  2.93k|                                    return OpCode::SEQ;
  284|  2.93k|                                }
  285|  2.73k|                                break;
  286|       |
  287|  3.30k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.30k, False: 46.2k]
  ------------------
  288|  6.09k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.78k, False: 46.7k]
  ------------------
  289|  6.09k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 3.61k, False: 2.47k]
  ------------------
  290|  3.61k|                                {
  291|  3.61k|                                    return OpCode::SGE;
  292|  3.61k|                                }
  293|  2.47k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 1.09k, False: 1.37k]
  ------------------
  294|  1.09k|                                {
  295|  1.09k|                                    return OpCode::SGT;
  296|  1.09k|                                }
  297|  1.37k|                                break;
  298|       |
  299|  2.18k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 2.18k, False: 47.3k]
  ------------------
  300|  2.52k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 336, False: 49.2k]
  ------------------
  301|  2.52k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.25k, False: 273]
  ------------------
  302|  2.25k|                                {
  303|  2.25k|                                    return OpCode::SHU;
  304|  2.25k|                                }
  305|    273|                                break;
  306|       |
  307|  7.93k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 7.93k, False: 41.6k]
  ------------------
  308|  10.3k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 2.37k, False: 47.1k]
  ------------------
  309|  10.3k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 155, False: 10.1k]
  ------------------
  310|  10.3k|                                {
  311|    833|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 833, False: 9.48k]
  ------------------
  312|    920|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 87, False: 10.2k]
  ------------------
  313|    920|                                        return OpCode::SLA;
  314|       |
  315|  2.02k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.02k, False: 8.28k]
  ------------------
  316|  2.12k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 98, False: 10.2k]
  ------------------
  317|  2.12k|                                        return OpCode::SLE;
  318|       |
  319|  4.38k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 4.38k, False: 5.93k]
  ------------------
  320|  5.01k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 630, False: 9.68k]
  ------------------
  321|  5.01k|                                        return OpCode::SLL;
  322|       |
  323|    617|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 617, False: 9.70k]
  ------------------
  324|  2.09k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 1.48k, False: 8.83k]
  ------------------
  325|  2.09k|                                        return OpCode::SLT;
  326|  10.3k|                                }
  327|    155|                                break;
  328|       |
  329|    296|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 296, False: 49.2k]
  ------------------
  330|  2.50k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 2.21k, False: 47.3k]
  ------------------
  331|  2.50k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 2.10k, False: 407]
  ------------------
  332|  2.10k|                                {
  333|  2.10k|                                    return OpCode::SNE;
  334|  2.10k|                                }
  335|    407|                                break;
  336|       |
  337|  4.36k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 4.36k, False: 45.1k]
  ------------------
  338|  7.69k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 3.33k, False: 46.2k]
  ------------------
  339|  7.69k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 2.66k, False: 5.03k]
  ------------------
  340|  2.66k|                                {
  341|  2.66k|                                    return OpCode::SRA;
  342|  2.66k|                                }
  343|  5.03k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 3.20k, False: 1.82k]
  ------------------
  344|  3.20k|                                {
  345|  3.20k|                                    return OpCode::SRL;
  346|  3.20k|                                }
  347|  1.82k|                                break;
  348|       |
  349|  5.49k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 5.49k, False: 44.0k]
  ------------------
  350|  7.64k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 2.14k, False: 47.4k]
  ------------------
  351|  7.64k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 5.78k, False: 1.86k]
  ------------------
  352|  5.78k|                                {
  353|  5.78k|                                    return OpCode::SUB;
  354|  5.78k|                                }
  355|  1.86k|                                break;
  356|       |
  357|  1.98k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.98k, False: 47.5k]
  ------------------
  358|  3.19k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.21k, False: 48.3k]
  ------------------
  359|  3.19k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.99k, False: 1.20k]
  ------------------
  360|  1.99k|                                {
  361|  1.99k|                                    return OpCode::SWU;
  362|  1.99k|                                }
  363|  1.20k|                                break;
  364|  49.5k|                        }
  365|       |
  366|  12.9k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.89k, False: 477k]
  ------------------
  367|  29.0k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 16.0k, False: 463k]
  ------------------
  368|  29.0k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 2.94k, False: 26.1k]
  |  Branch (368:29): [True: 1.95k, False: 27.0k]
  |  Branch (368:45): [True: 1.95k, False: 986]
  ------------------
  369|  1.95k|                        {
  370|  1.95k|                            return OpCode::XOR;
  371|  1.95k|                        }
  372|  27.0k|                        break;
  373|   479k|                }
  374|  86.2k|                break;
  375|   479k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   191k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 191k, False: 723k]
  ------------------
  379|   191k|                char c1 = token[0];
  380|   191k|                char c2 = token[1];
  381|   191k|                char c3 = token[2];
  382|   191k|                char c4 = token[3];
  383|       |
  384|   191k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 19.1k, False: 172k]
  ------------------
  385|   191k|                {
  386|  29.3k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 29.3k, False: 162k]
  ------------------
  387|  31.7k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.33k, False: 189k]
  ------------------
  388|  31.7k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 95, False: 31.6k]
  ------------------
  389|  31.7k|                        {
  390|  27.8k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 27.8k, False: 3.85k]
  ------------------
  391|  28.0k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 146, False: 31.5k]
  ------------------
  392|  28.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 25.8k, False: 2.16k]
  ------------------
  393|  25.8k|                                {
  394|  25.8k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 80, False: 25.7k]
  ------------------
  395|  25.8k|                                    {
  396|  4.55k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.55k, False: 21.2k]
  ------------------
  397|  4.59k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 45, False: 25.8k]
  ------------------
  398|  4.59k|                                            return OpCode::ADDD;
  399|       |
  400|  6.97k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 6.97k, False: 18.8k]
  ------------------
  401|  7.07k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 98, False: 25.7k]
  ------------------
  402|  7.07k|                                            return OpCode::ADDF;
  403|       |
  404|  9.08k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 9.08k, False: 16.7k]
  ------------------
  405|  9.14k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 25.7k]
  ------------------
  406|  9.14k|                                            return OpCode::ADDI;
  407|       |
  408|  4.52k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 4.52k, False: 21.3k]
  ------------------
  409|  4.94k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 426, False: 25.4k]
  ------------------
  410|  4.94k|                                            return OpCode::ADDU;
  411|  25.8k|                                    }
  412|  25.8k|                                }
  413|  2.24k|                                break;
  414|       |
  415|  2.24k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.98k, False: 29.7k]
  ------------------
  416|  3.61k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 1.63k, False: 30.0k]
  ------------------
  417|  3.61k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 3.49k, False: 125]
  |  Branch (417:37): [True: 2.02k, False: 1.59k]
  |  Branch (417:53): [True: 2.02k, False: 1.46k]
  ------------------
  418|  2.02k|                                {
  419|  2.02k|                                    return OpCode::ANDI;
  420|  2.02k|                                }
  421|       |
  422|  1.59k|                                break;
  423|  31.7k|                        }
  424|  3.92k|                        break;
  425|       |
  426|  27.9k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 27.9k, False: 163k]
  ------------------
  427|  32.7k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 4.80k, False: 186k]
  ------------------
  428|  32.7k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 631, False: 32.0k]
  ------------------
  429|  32.7k|                        {
  430|    246|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 246, False: 32.4k]
  ------------------
  431|  2.22k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.97k, False: 30.7k]
  ------------------
  432|  2.22k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.43k, False: 785]
  |  Branch (432:37): [True: 1.29k, False: 926]
  |  Branch (432:53): [True: 1.29k, False: 141]
  ------------------
  433|  1.29k|                                {
  434|  1.29k|                                    return OpCode::BEQZ;
  435|  1.29k|                                }
  436|    926|                                break;
  437|       |
  438|  23.6k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 23.6k, False: 9.07k]
  ------------------
  439|  25.7k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 2.08k, False: 30.6k]
  ------------------
  440|  25.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 24.2k, False: 1.52k]
  ------------------
  441|  24.2k|                                {
  442|  24.2k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 18.8k, False: 5.39k]
  ------------------
  443|  18.8k|                                    {
  444|  18.8k|                                        return OpCode::BFPF;
  445|  18.8k|                                    }
  446|  5.39k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 5.29k, False: 92]
  ------------------
  447|  5.29k|                                    {
  448|  5.29k|                                        return OpCode::BFPT;
  449|  5.29k|                                    }
  450|  24.2k|                                }
  451|  1.61k|                                break;
  452|       |
  453|  3.36k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 3.36k, False: 29.3k]
  ------------------
  454|  4.13k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 766, False: 31.9k]
  ------------------
  455|  4.13k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 3.87k, False: 258]
  |  Branch (455:37): [True: 3.83k, False: 298]
  |  Branch (455:53): [True: 3.83k, False: 40]
  ------------------
  456|  3.83k|                                {
  457|  3.83k|                                    return OpCode::BNEZ;
  458|  3.83k|                                }
  459|  32.7k|                        }
  460|  3.46k|                        break;
  461|       |
  462|  8.84k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 8.84k, False: 182k]
  ------------------
  463|  9.12k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 272, False: 191k]
  ------------------
  464|  9.12k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 8.82k, False: 292]
  |  Branch (464:29): [True: 8.42k, False: 696]
  |  Branch (464:45): [True: 8.42k, False: 404]
  ------------------
  465|  8.42k|                        {
  466|  8.42k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 198, False: 8.22k]
  ------------------
  467|  8.42k|                            {
  468|  2.21k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 2.21k, False: 6.21k]
  ------------------
  469|  2.28k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 8.35k]
  ------------------
  470|  2.28k|                                    return OpCode::DIVD;
  471|       |
  472|    280|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 280, False: 8.14k]
  ------------------
  473|    510|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 230, False: 8.19k]
  ------------------
  474|    510|                                    return OpCode::DIVF;
  475|       |
  476|    849|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 849, False: 7.57k]
  ------------------
  477|    883|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 34, False: 8.39k]
  ------------------
  478|    883|                                    return OpCode::DIVI;
  479|       |
  480|  2.75k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 2.75k, False: 5.66k]
  ------------------
  481|  4.55k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.79k, False: 6.62k]
  ------------------
  482|  4.55k|                                    return OpCode::DIVU;
  483|  8.42k|                            }
  484|  8.42k|                        }
  485|    894|                        break;
  486|       |
  487|  1.04k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.04k, False: 190k]
  ------------------
  488|  6.11k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 5.06k, False: 186k]
  ------------------
  489|  6.11k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 5.22k, False: 889]
  |  Branch (489:29): [True: 857, False: 5.25k]
  |  Branch (489:45): [True: 5.13k, False: 87]
  |  Branch (489:61): [True: 857, False: 4.28k]
  ------------------
  490|    857|                        {
  491|    857|                            return OpCode::HALT;
  492|    857|                        }
  493|  5.25k|                        break;
  494|       |
  495|  5.25k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 304, False: 191k]
  ------------------
  496|  3.04k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 2.74k, False: 188k]
  ------------------
  497|  3.04k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 2.17k, False: 867]
  |  Branch (497:29): [True: 162, False: 2.88k]
  |  Branch (497:45): [True: 236, False: 1.94k]
  |  Branch (497:61): [True: 162, False: 74]
  ------------------
  498|    162|                        {
  499|    162|                            return OpCode::JALR;
  500|    162|                        }
  501|  2.88k|                        break;
  502|       |
  503|  5.62k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 5.62k, False: 185k]
  ------------------
  504|  8.80k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 3.18k, False: 188k]
  ------------------
  505|  8.80k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 4.08k, False: 4.71k]
  |  Branch (505:29): [True: 3.99k, False: 4.81k]
  |  Branch (505:45): [True: 3.99k, False: 92]
  ------------------
  506|  3.99k|                        {
  507|  3.99k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 1.98k, False: 2.01k]
  ------------------
  508|  1.98k|                            {
  509|  1.98k|                                return OpCode::MOVD;
  510|  1.98k|                            }
  511|  2.01k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.21k, False: 803]
  ------------------
  512|  1.21k|                            {
  513|  1.21k|                                return OpCode::MOVF;
  514|  1.21k|                            }
  515|  3.99k|                        }
  516|  4.81k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 4.70k, False: 105]
  |  Branch (516:34): [True: 1.37k, False: 3.43k]
  |  Branch (516:50): [True: 2.82k, False: 1.88k]
  |  Branch (516:66): [True: 1.37k, False: 1.44k]
  ------------------
  517|  1.37k|                        {
  518|  1.37k|                            return OpCode::MULT;
  519|  1.37k|                        }
  520|  4.24k|                        break;
  521|       |
  522|  66.8k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 66.8k, False: 124k]
  ------------------
  523|  73.7k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 6.84k, False: 184k]
  ------------------
  524|  73.7k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 477, False: 73.2k]
  ------------------
  525|  73.7k|                        {
  526|  5.26k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 5.26k, False: 68.4k]
  ------------------
  527|  9.86k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 4.59k, False: 69.1k]
  ------------------
  528|  9.86k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 7.51k, False: 2.35k]
  ------------------
  529|  7.51k|                                {
  530|  7.51k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 5.40k, False: 2.10k]
  ------------------
  531|  5.40k|                                    {
  532|  5.40k|                                        return OpCode::SEQI;
  533|  5.40k|                                    }
  534|  2.10k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.95k, False: 152]
  ------------------
  535|  1.95k|                                    {
  536|  1.95k|                                        return OpCode::SEQU;
  537|  1.95k|                                    }
  538|  7.51k|                                }
  539|  2.50k|                                break;
  540|       |
  541|  5.87k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 5.87k, False: 67.8k]
  ------------------
  542|  8.57k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 2.69k, False: 71.0k]
  ------------------
  543|  8.57k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 4.71k, False: 3.86k]
  ------------------
  544|  4.71k|                                {
  545|  4.71k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 408, False: 4.30k]
  ------------------
  546|    408|                                    {
  547|    408|                                        return OpCode::SGEI;
  548|    408|                                    }
  549|  4.30k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 3.61k, False: 696]
  ------------------
  550|  3.61k|                                    {
  551|  3.61k|                                        return OpCode::SGEU;
  552|  3.61k|                                    }
  553|  4.71k|                                }
  554|  3.86k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 3.40k, False: 453]
  ------------------
  555|  3.40k|                                {
  556|  3.40k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.53k, False: 1.86k]
  ------------------
  557|  1.53k|                                    {
  558|  1.53k|                                        return OpCode::SGTI;
  559|  1.53k|                                    }
  560|  1.86k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 981, False: 888]
  ------------------
  561|    981|                                    {
  562|    981|                                        return OpCode::SGTU;
  563|    981|                                    }
  564|  3.40k|                                }
  565|  2.03k|                                break;
  566|       |
  567|  13.9k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 13.9k, False: 59.7k]
  ------------------
  568|  16.4k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 2.45k, False: 71.2k]
  ------------------
  569|  16.4k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 34, False: 16.4k]
  ------------------
  570|  16.4k|                                {
  571|  2.68k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 2.68k, False: 13.7k]
  ------------------
  572|  3.21k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 538, False: 15.9k]
  ------------------
  573|  3.21k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 2.88k, False: 329]
  ------------------
  574|  2.88k|                                        {
  575|  2.88k|                                            return OpCode::SLAI;
  576|  2.88k|                                        }
  577|    329|                                        break;
  578|       |
  579|  7.62k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 7.62k, False: 8.80k]
  ------------------
  580|  8.30k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 675, False: 15.7k]
  ------------------
  581|  8.30k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 6.31k, False: 1.99k]
  ------------------
  582|  6.31k|                                        {
  583|  6.31k|                                            return OpCode::SLEI;
  584|  6.31k|                                        }
  585|  1.99k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.66k, False: 330]
  ------------------
  586|  1.66k|                                        {
  587|  1.66k|                                            return OpCode::SLEU;
  588|  1.66k|                                        }
  589|    330|                                        break;
  590|       |
  591|  1.63k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.63k, False: 14.8k]
  ------------------
  592|  2.84k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.21k, False: 15.2k]
  ------------------
  593|  2.84k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.21k, False: 626]
  ------------------
  594|  2.21k|                                        {
  595|  2.21k|                                            return OpCode::SLLI;
  596|  2.21k|                                        }
  597|    626|                                        break;
  598|       |
  599|  1.83k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.83k, False: 14.6k]
  ------------------
  600|  2.03k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 205, False: 16.2k]
  ------------------
  601|  2.03k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.75k, False: 288]
  ------------------
  602|  1.75k|                                        {
  603|  1.75k|                                            return OpCode::SLTI;
  604|  1.75k|                                        }
  605|    288|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 254, False: 34]
  ------------------
  606|    254|                                        {
  607|    254|                                            return OpCode::SLTU;
  608|    254|                                        }
  609|     34|                                        break;
  610|  16.4k|                                }
  611|       |
  612|  4.06k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.71k, False: 70.9k]
  ------------------
  613|  6.52k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 2.45k, False: 71.2k]
  ------------------
  614|  6.52k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 5.48k, False: 1.04k]
  ------------------
  615|  5.48k|                                {
  616|  5.48k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 263, False: 5.22k]
  ------------------
  617|    263|                                    {
  618|    263|                                        return OpCode::SNEI;
  619|    263|                                    }
  620|  5.22k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 4.80k, False: 420]
  ------------------
  621|  4.80k|                                    {
  622|  4.80k|                                        return OpCode::SNEU;
  623|  4.80k|                                    }
  624|  5.48k|                                }
  625|  1.46k|                                break;
  626|       |
  627|  3.40k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 3.40k, False: 70.3k]
  ------------------
  628|  5.28k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.88k, False: 71.8k]
  ------------------
  629|  5.28k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 2.63k, False: 2.64k]
  |  Branch (629:37): [True: 1.95k, False: 3.32k]
  |  Branch (629:53): [True: 1.95k, False: 676]
  ------------------
  630|  1.95k|                                {
  631|  1.95k|                                    return OpCode::SRAI;
  632|  1.95k|                                }
  633|  3.32k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 2.63k, False: 691]
  |  Branch (633:42): [True: 1.67k, False: 1.65k]
  |  Branch (633:58): [True: 1.67k, False: 962]
  ------------------
  634|  1.67k|                                {
  635|  1.67k|                                    return OpCode::SRLI;
  636|  1.67k|                                }
  637|  1.65k|                                break;
  638|       |
  639|  12.6k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 12.6k, False: 61.0k]
  ------------------
  640|  27.8k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 15.2k, False: 58.4k]
  ------------------
  641|  27.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 17.1k, False: 10.6k]
  ------------------
  642|  17.1k|                                {
  643|  17.1k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.45k, False: 14.7k]
  ------------------
  644|  17.1k|                                    {
  645|    325|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 325, False: 16.8k]
  ------------------
  646|    505|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 180, False: 17.0k]
  ------------------
  647|    505|                                            return OpCode::SUBD;
  648|       |
  649|  5.49k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 5.49k, False: 11.7k]
  ------------------
  650|  5.56k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 66, False: 17.1k]
  ------------------
  651|  5.56k|                                            return OpCode::SUBF;
  652|       |
  653|  2.64k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 2.64k, False: 14.5k]
  ------------------
  654|  4.40k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.76k, False: 15.4k]
  ------------------
  655|  4.40k|                                            return OpCode::SUBI;
  656|       |
  657|  4.20k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 4.20k, False: 12.9k]
  ------------------
  658|  4.27k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 17.1k]
  ------------------
  659|  4.27k|                                            return OpCode::SUBU;
  660|  17.1k|                                    }
  661|  17.1k|                                }
  662|  13.1k|                                break;
  663|  73.7k|                        }
  664|  21.2k|                        break;
  665|       |
  666|  21.2k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 5.31k, False: 186k]
  ------------------
  667|  5.95k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 640, False: 190k]
  ------------------
  668|  5.95k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 5.69k, False: 261]
  |  Branch (668:29): [True: 4.35k, False: 1.60k]
  |  Branch (668:45): [True: 4.74k, False: 951]
  |  Branch (668:61): [True: 4.35k, False: 390]
  ------------------
  669|  4.35k|                        {
  670|  4.35k|                            return OpCode::TRAP;
  671|  4.35k|                        }
  672|  1.60k|                        break;
  673|  1.60k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 587, False: 191k]
  ------------------
  674|  1.24k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 657, False: 190k]
  ------------------
  675|  1.24k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 726, False: 518]
  |  Branch (675:29): [True: 386, False: 858]
  |  Branch (675:45): [True: 463, False: 263]
  |  Branch (675:61): [True: 386, False: 77]
  ------------------
  676|    386|                        {
  677|    386|                            return OpCode::XORI;
  678|    386|                        }
  679|    858|                        break;
  680|   191k|                }
  681|  63.5k|                break;
  682|   191k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  63.5k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 46.8k, False: 868k]
  ------------------
  686|  46.8k|                char c1 = token[0];
  687|  46.8k|                char c2 = token[1];
  688|  46.8k|                char c3 = token[2];
  689|  46.8k|                char c4 = token[3];
  690|  46.8k|                char c5 = token[4];
  691|       |
  692|  46.8k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 8.21k, False: 38.6k]
  ------------------
  693|  46.8k|                {
  694|  8.40k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 8.40k, False: 38.4k]
  ------------------
  695|  8.40k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 46.8k]
  ------------------
  696|  8.40k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 8.40k, False: 0]
  |  Branch (696:29): [True: 8.40k, False: 0]
  |  Branch (696:45): [True: 8.40k, False: 0]
  |  Branch (696:61): [True: 8.40k, False: 0]
  |  Branch (696:77): [True: 8.40k, False: 0]
  ------------------
  697|  8.40k|                        {
  698|  8.40k|                            return OpCode::ADDUI;
  699|  8.40k|                        }
  700|      0|                        break;
  701|       |
  702|  1.51k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.51k, False: 45.3k]
  ------------------
  703|  1.51k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 46.8k]
  ------------------
  704|  1.51k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.51k, False: 0]
  |  Branch (704:29): [True: 1.51k, False: 0]
  |  Branch (704:45): [True: 1.51k, False: 0]
  |  Branch (704:61): [True: 1.51k, False: 0]
  |  Branch (704:77): [True: 1.51k, False: 0]
  ------------------
  705|  1.51k|                        {
  706|  1.51k|                            return OpCode::DIVUI;
  707|  1.51k|                        }
  708|      0|                        break;
  709|       |
  710|  5.30k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 5.30k, False: 41.5k]
  ------------------
  711|  5.30k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 46.8k]
  ------------------
  712|  5.30k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 5.30k, False: 0]
  |  Branch (712:29): [True: 5.30k, False: 0]
  |  Branch (712:45): [True: 5.30k, False: 0]
  |  Branch (712:61): [True: 5.30k, False: 0]
  ------------------
  713|  5.30k|                        {
  714|  5.30k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 5.30k]
  ------------------
  715|  5.30k|                            {
  716|    739|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 739, False: 4.56k]
  ------------------
  717|    739|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 5.30k]
  ------------------
  718|    739|                                    return OpCode::MULTD;
  719|       |
  720|  2.64k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 2.64k, False: 2.65k]
  ------------------
  721|  2.64k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 5.30k]
  ------------------
  722|  2.64k|                                    return OpCode::MULTF;
  723|       |
  724|    627|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 627, False: 4.67k]
  ------------------
  725|    627|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 5.30k]
  ------------------
  726|    627|                                    return OpCode::MULTI;
  727|       |
  728|  1.28k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.28k, False: 4.01k]
  ------------------
  729|  1.28k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 5.30k]
  ------------------
  730|  1.28k|                                    return OpCode::MULTU;
  731|  5.30k|                            }
  732|  5.30k|                        }
  733|      0|                        break;
  734|       |
  735|  23.4k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 23.4k, False: 23.4k]
  ------------------
  736|  23.4k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 46.8k]
  ------------------
  737|  23.4k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 23.4k]
  ------------------
  738|  23.4k|                        {
  739|  3.01k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 3.01k, False: 20.4k]
  ------------------
  740|  3.01k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 23.4k]
  ------------------
  741|  3.01k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 3.01k, False: 0]
  |  Branch (741:37): [True: 3.01k, False: 0]
  |  Branch (741:53): [True: 3.01k, False: 0]
  |  Branch (741:69): [True: 3.01k, False: 0]
  ------------------
  742|  3.01k|                                {
  743|  3.01k|                                    return OpCode::SEQUI;
  744|  3.01k|                                }
  745|      0|                                break;
  746|       |
  747|  13.0k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 13.0k, False: 10.4k]
  ------------------
  748|  13.0k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 23.4k]
  ------------------
  749|  13.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 5.71k, False: 7.30k]
  |  Branch (749:37): [True: 5.71k, False: 7.30k]
  |  Branch (749:53): [True: 5.71k, False: 0]
  |  Branch (749:69): [True: 5.71k, False: 0]
  ------------------
  750|  5.71k|                                {
  751|  5.71k|                                    return OpCode::SGEUI;
  752|  5.71k|                                }
  753|  7.30k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 7.30k, False: 0]
  |  Branch (753:42): [True: 7.30k, False: 0]
  |  Branch (753:58): [True: 7.30k, False: 0]
  |  Branch (753:74): [True: 7.30k, False: 0]
  ------------------
  754|  7.30k|                                {
  755|  7.30k|                                    return OpCode::SGTUI;
  756|  7.30k|                                }
  757|      0|                                break;
  758|       |
  759|  2.99k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.99k, False: 20.4k]
  ------------------
  760|  2.99k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 23.4k]
  ------------------
  761|  2.99k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.95k, False: 1.03k]
  |  Branch (761:37): [True: 1.95k, False: 1.03k]
  |  Branch (761:53): [True: 1.95k, False: 0]
  |  Branch (761:69): [True: 1.95k, False: 0]
  ------------------
  762|  1.95k|                                {
  763|  1.95k|                                    return OpCode::SLEUI;
  764|  1.95k|                                }
  765|  1.03k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.03k, False: 0]
  |  Branch (765:42): [True: 1.03k, False: 0]
  |  Branch (765:58): [True: 1.03k, False: 0]
  |  Branch (765:74): [True: 1.03k, False: 0]
  ------------------
  766|  1.03k|                                {
  767|  1.03k|                                    return OpCode::SLTUI;
  768|  1.03k|                                }
  769|      0|                                break;
  770|       |
  771|    212|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 212, False: 23.2k]
  ------------------
  772|    212|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 23.4k]
  ------------------
  773|    212|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 212, False: 0]
  |  Branch (773:37): [True: 212, False: 0]
  |  Branch (773:53): [True: 212, False: 0]
  |  Branch (773:69): [True: 212, False: 0]
  ------------------
  774|    212|                                {
  775|    212|                                    return OpCode::SNEUI;
  776|    212|                                }
  777|      0|                                break;
  778|       |
  779|  4.21k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 4.21k, False: 19.2k]
  ------------------
  780|  4.21k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 23.4k]
  ------------------
  781|  4.21k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 4.21k, False: 0]
  |  Branch (781:37): [True: 4.21k, False: 0]
  |  Branch (781:53): [True: 4.21k, False: 0]
  |  Branch (781:69): [True: 4.21k, False: 0]
  ------------------
  782|  4.21k|                                {
  783|  4.21k|                                    return OpCode::SUBUI;
  784|  4.21k|                                }
  785|      0|                                break;
  786|  23.4k|                        }
  787|       |
  788|      0|                        break;
  789|  46.8k|                }
  790|       |
  791|  8.21k|                break;
  792|  46.8k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  14.1k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 14.1k, False: 900k]
  ------------------
  796|  14.1k|                char c1 = token[0];
  797|  14.1k|                char c2 = token[1];
  798|  14.1k|                char c3 = token[2];
  799|  14.1k|                char c4 = token[3];
  800|  14.1k|                char c5 = token[4];
  801|  14.1k|                char c6 = token[5];
  802|       |
  803|  14.1k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 9.20k, False: 4.91k]
  |  Branch (803:21): [True: 9.20k, False: 4.91k]
  |  Branch (803:37): [True: 9.20k, False: 0]
  |  Branch (803:53): [True: 9.20k, False: 0]
  ------------------
  804|  9.20k|                {
  805|  9.20k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 9.20k]
  ------------------
  806|  9.20k|                    {
  807|  3.17k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 3.17k, False: 6.02k]
  ------------------
  808|  3.17k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 9.20k]
  ------------------
  809|  3.17k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 3.17k, False: 0]
  ------------------
  810|  3.17k|                            {
  811|  3.17k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 2.26k, False: 917]
  ------------------
  812|  2.26k|                                {
  813|  2.26k|                                    return OpCode::CVTD2F;
  814|  2.26k|                                }
  815|    917|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 917, False: 0]
  ------------------
  816|    917|                                {
  817|    917|                                    return OpCode::CVTD2I;
  818|    917|                                }
  819|  3.17k|                            }
  820|      0|                            break;
  821|       |
  822|  4.57k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 4.57k, False: 4.63k]
  ------------------
  823|  4.57k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 9.20k]
  ------------------
  824|  4.57k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 4.57k, False: 0]
  ------------------
  825|  4.57k|                            {
  826|  4.57k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 2.55k, False: 2.01k]
  ------------------
  827|  2.55k|                                {
  828|  2.55k|                                    return OpCode::CVTF2D;
  829|  2.55k|                                }
  830|  2.01k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 2.01k, False: 0]
  ------------------
  831|  2.01k|                                {
  832|  2.01k|                                    return OpCode::CVTF2I;
  833|  2.01k|                                }
  834|  4.57k|                            }
  835|      0|                            break;
  836|       |
  837|  1.45k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.45k, False: 7.75k]
  ------------------
  838|  1.45k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 9.20k]
  ------------------
  839|  1.45k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.45k, False: 0]
  ------------------
  840|  1.45k|                            {
  841|  1.45k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.20k, False: 254]
  ------------------
  842|  1.20k|                                {
  843|  1.20k|                                    return OpCode::CVTI2D;
  844|  1.20k|                                }
  845|    254|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 254, False: 0]
  ------------------
  846|    254|                                {
  847|    254|                                    return OpCode::CVTI2F;
  848|    254|                                }
  849|  1.45k|                            }
  850|  9.20k|                    }
  851|  9.20k|                }
  852|  4.91k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 1.85k, False: 3.05k]
  |  Branch (852:26): [True: 1.85k, False: 3.05k]
  |  Branch (852:42): [True: 1.85k, False: 0]
  |  Branch (852:58): [True: 1.85k, False: 0]
  |  Branch (852:74): [True: 1.85k, False: 0]
  ------------------
  853|  4.91k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.85k, False: 0]
  |  Branch (853:42): [True: 1.85k, False: 0]
  ------------------
  854|  1.85k|                {
  855|  1.85k|                    return OpCode::MULTUI;
  856|  1.85k|                }
  857|  3.05k|                break;
  858|  14.1k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  3.05k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 2.97k, False: 911k]
  ------------------
  862|  2.97k|                char c1 = token[0];
  863|  2.97k|                char c2 = token[1];
  864|  2.97k|                char c3 = token[2];
  865|  2.97k|                char c4 = token[3];
  866|  2.97k|                char c5 = token[4];
  867|  2.97k|                char c6 = token[5];
  868|  2.97k|                char c7 = token[6];
  869|       |
  870|  2.97k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 1.83k, False: 1.13k]
  |  Branch (870:21): [True: 1.83k, False: 1.13k]
  |  Branch (870:37): [True: 1.83k, False: 0]
  |  Branch (870:53): [True: 1.83k, False: 0]
  ------------------
  871|  1.83k|                {
  872|  1.83k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 393, False: 1.44k]
  |  Branch (872:25): [True: 393, False: 1.44k]
  |  Branch (872:41): [True: 393, False: 0]
  |  Branch (872:54): [True: 393, False: 0]
  |  Branch (872:70): [True: 393, False: 0]
  ------------------
  873|    393|                    {
  874|    393|                        return OpCode::MOVI2FP;
  875|    393|                    }
  876|  1.44k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.44k, False: 0]
  |  Branch (876:30): [True: 1.44k, False: 0]
  |  Branch (876:46): [True: 1.44k, False: 0]
  |  Branch (876:62): [True: 1.44k, False: 0]
  |  Branch (876:75): [True: 1.44k, False: 0]
  ------------------
  877|  1.44k|                    {
  878|  1.44k|                        return OpCode::MOVFP2I;
  879|  1.44k|                    }
  880|  1.83k|                }
  881|  1.13k|                break;
  882|  2.97k|            }
  883|       |
  884|  35.1k|            default: {
  ------------------
  |  Branch (884:13): [True: 35.1k, False: 879k]
  ------------------
  885|  35.1k|                break;
  886|  2.97k|            }
  887|   914k|        }
  888|       |
  889|       |        // None found
  890|   302k|        return OpCode::NONE;
  891|   914k|    }
_ZN3dlx3iceEcc:
   17|  1.41M|    {
   18|  1.41M|        constexpr const char diff = 'a' - 'A';
   19|  1.41M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.06M, False: 348k]
  |  Branch (19:28): [True: 94.7k, False: 253k]
  ------------------
   20|  1.41M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.06M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  16.3k|    {
  193|  16.3k|        ParseError err;
  194|       |
  195|  16.3k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  16.3k|        err.m_LineNumber                           = line_number;
  197|  16.3k|        err.m_Column                               = column;
  198|  16.3k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  16.3k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  16.3k|        return err;
  202|  16.3k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  16.3k|    {
  207|  16.3k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  16.3k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  16.3k|                                                         actual_type);
  210|  16.3k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    564|    {
  216|    564|        ParseError err;
  217|       |
  218|    564|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    564|        err.m_LineNumber        = line_number;
  220|    564|        err.m_Column            = column;
  221|    564|        err.invalid_number.text = text;
  222|       |
  223|    564|        return err;
  224|    564|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    564|    {
  228|    564|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    564|                                                token.GetColumn().unsafe(), token.GetText());
  230|    564|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   351k|    {
  255|   351k|        ParseError err;
  256|       |
  257|   351k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   351k|        err.m_LineNumber                   = line_number;
  259|   351k|        err.m_Column                       = column;
  260|   351k|        err.unexpected_token.expected_type = expected_type;
  261|   351k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   351k|        return err;
  264|   351k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   351k|    {
  269|   351k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   351k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   351k|                                                  token.GetType());
  272|   351k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  12.1k|    {
  277|  12.1k|        ParseError err;
  278|       |
  279|  12.1k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  12.1k|        err.m_LineNumber                   = line_number;
  281|  12.1k|        err.m_Column                       = column;
  282|  12.1k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  12.1k|        return err;
  285|  12.1k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.37k|    {
  289|  2.37k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.37k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.37k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   152k|    {
  296|   152k|        ParseError err;
  297|       |
  298|   152k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   152k|        err.m_LineNumber                       = line_number;
  300|   152k|        err.m_Column                           = column;
  301|   152k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   152k|        return err;
  304|   152k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   152k|    {
  309|   152k|        return ConstructInvalidLabelIdentifierParseError(
  310|   152k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   152k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  28.1k|    {
  317|  28.1k|        ParseError err;
  318|       |
  319|  28.1k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  28.1k|        err.m_LineNumber                     = line_number;
  321|  28.1k|        err.m_Column                         = column;
  322|  28.1k|        err.label_already_defined.label_name = label_name;
  323|  28.1k|        err.label_already_defined.at_line    = at_line;
  324|  28.1k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  28.1k|        return err;
  327|  28.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  28.1k|    {
  332|  28.1k|        return ConstructLabelAlreadyDefinedParseError(
  333|  28.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  28.1k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  28.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   439k|    {
  340|   439k|        ParseError err;
  341|       |
  342|   439k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   439k|        err.m_LineNumber = line_number;
  344|   439k|        err.m_Column     = column;
  345|       |
  346|   439k|        return err;
  347|   439k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   439k|    {
  352|   439k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   439k|                                                        token.GetColumn().unsafe());
  354|   439k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  64.1k|    {
  360|  64.1k|        ParseError err;
  361|       |
  362|  64.1k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  64.1k|        err.m_LineNumber               = line_number;
  364|  64.1k|        err.m_Column                   = column;
  365|  64.1k|        err.too_few_arguments.required = required;
  366|  64.1k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  64.1k|        return err;
  369|  64.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  64.1k|    {
  374|  64.1k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  64.1k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  64.1k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.93k|    {
  381|  1.93k|        ParseError err;
  382|       |
  383|  1.93k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.93k|        err.m_LineNumber           = line_number;
  385|  1.93k|        err.m_Column               = column;
  386|  1.93k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.93k|        return err;
  389|  1.93k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.93k|    {
  393|  1.93k|        return ConstructEmptyLabelParseError(
  394|  1.93k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.93k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.48k, False: 448]
  ------------------
  396|  1.48k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.93k|                        token.GetText());
  398|  1.93k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  1.17k|    {
  403|  1.17k|        ParseError err;
  404|       |
  405|  1.17k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  1.17k|        err.m_LineNumber = line_number;
  407|  1.17k|        err.m_Column     = column;
  408|       |
  409|  1.17k|        return err;
  410|  1.17k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  1.17k|    {
  414|  1.17k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  1.17k|                                               token.GetColumn().unsafe());
  416|  1.17k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.06M|    {
   19|  1.06M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.06M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  10.0k|    {
  182|  10.0k|        ParsedProgram program;
  183|       |
  184|  10.0k|        program.m_Tokens = tokens;
  185|       |
  186|  10.0k|        phi::boolean line_has_instruction{false};
  187|  10.0k|        phi::usize   label_count{0u};
  188|       |
  189|  2.61M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.60M, False: 10.0k]
  ------------------
  190|  2.60M|        {
  191|  2.60M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.60M|            switch (current_token.GetType())
  196|  2.60M|            {
  197|       |                // Ignore comments
  198|   268k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 268k, False: 2.34M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   268k|                    break;
  201|       |
  202|  1.26M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.26M, False: 1.34M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.26M|                    line_has_instruction = false;
  205|  1.26M|                    break;
  206|       |
  207|   199k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 199k, False: 2.41M]
  ------------------
  208|   199k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 14.2k, False: 185k]
  ------------------
  209|  14.2k|                    {
  210|  14.2k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  14.2k|                                current_token, Token::Type::NewLine));
  212|  14.2k|                        break;
  213|  14.2k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   185k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 111k, False: 74.1k]
  ------------------
  218|   111k|                    {
  219|   111k|                        program.AddParseError(
  220|   111k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   111k|                        break;
  222|   111k|                    }
  223|       |
  224|  74.1k|                    std::string_view label_name = current_token.GetText();
  225|  74.1k|                    label_name.remove_suffix(1);
  226|       |
  227|  74.1k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 9.82k, False: 64.2k]
  ------------------
  228|  9.82k|                    {
  229|  9.82k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  9.82k|                                current_token.GetLineNumber().unsafe(),
  231|  9.82k|                                current_token.GetColumn().unsafe(), label_name));
  232|  9.82k|                        break;
  233|  9.82k|                    }
  234|       |
  235|  64.2k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 30.8k, False: 33.4k]
  ------------------
  236|  30.8k|                    {
  237|  30.8k|                        program.AddParseError(
  238|  30.8k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  30.8k|                        break;
  240|  30.8k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  33.4k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 28.1k, False: 5.29k]
  ------------------
  244|  28.1k|                    {
  245|       |                        // Find first defintions of label
  246|  28.1k|                        const Token* first_label_definition =
  247|  28.1k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  28.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  28.1k|                                    {
  250|  28.1k|                                        std::string_view token_label_name = t.GetText();
  251|  28.1k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  28.1k|                                        if (token_label_name == label_name)
  254|  28.1k|                                        {
  255|  28.1k|                                            return true;
  256|  28.1k|                                        }
  257|  28.1k|                                    }
  258|       |
  259|  28.1k|                                    return false;
  260|  28.1k|                                });
  261|       |
  262|  28.1k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  28.1k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  28.1k|                                current_token, *first_label_definition));
  266|  28.1k|                        break;
  267|  28.1k|                    }
  268|       |
  269|  5.29k|                    program.m_JumpData[label_name] =
  270|  5.29k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  5.29k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  5.29k|                    break;
  277|  33.4k|                }
  278|       |
  279|   582k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 582k, False: 2.02M]
  ------------------
  280|   582k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 439k, False: 142k]
  ------------------
  281|   439k|                    {
  282|   439k|                        program.AddParseError(
  283|   439k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   439k|                        break;
  285|   439k|                    }
  286|       |
  287|   142k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   142k|                    PHI_ASSERT(current_token.HasHint());
  291|   142k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   142k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   142k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   142k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   142k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   142k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   142k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   142k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   142k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   200k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 190k, False: 9.53k]
  ------------------
  313|   190k|                    {
  314|       |                        // Get next token
  315|   190k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 461, False: 190k]
  ------------------
  316|    461|                        {
  317|    461|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    461|                                    current_token, number_of_argument_required.unsafe(),
  319|    461|                                    argument_num.unsafe()));
  320|    461|                            break;
  321|    461|                        }
  322|       |
  323|   190k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   190k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 35.3k, False: 154k]
  ------------------
  327|  35.3k|                        {
  328|  35.3k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 1.17k, False: 34.2k]
  ------------------
  329|  1.17k|                            {
  330|  1.17k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  1.17k|                            }
  332|       |
  333|  35.3k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  35.3k|                            continue;
  336|  35.3k|                        }
  337|       |
  338|   154k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 63.6k, False: 91.2k]
  ------------------
  339|  63.6k|                        {
  340|  63.6k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  63.6k|                                    token, number_of_argument_required.unsafe(),
  342|  63.6k|                                    argument_num.unsafe()));
  343|  63.6k|                            break;
  344|  63.6k|                        }
  345|       |
  346|  91.2k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  91.2k|                                parse_instruction_argument(
  348|  91.2k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  91.2k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 68.8k, False: 22.3k]
  ------------------
  350|  68.8k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  68.8k|                            break;
  353|  68.8k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  22.3k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  22.3k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  22.3k|                        argument_num++;
  360|  22.3k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  22.3k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   142k|                    program.m_Instructions.emplace_back(instruction);
  368|   142k|                    line_has_instruction = true;
  369|   142k|                    break;
  370|   582k|                }
  371|       |
  372|   298k|                default:
  ------------------
  |  Branch (372:17): [True: 298k, False: 2.31M]
  ------------------
  373|   298k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   298k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 199k, False: 98.4k]
  ------------------
  375|   199k|                    {
  376|   199k|                        expected_token_type = Token::Type::NewLine;
  377|   199k|                    }
  378|       |
  379|   298k|                    program.AddParseError(
  380|   298k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   298k|                    break;
  382|  2.60M|            }
  383|  2.60M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  10.0k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 845, False: 9.20k]
  ------------------
  387|    845|        {
  388|  9.59k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 8.75k, False: 845]
  ------------------
  389|  8.75k|            {
  390|  8.75k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  8.75k|                const Token& token = *it;
  393|  8.75k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.93k, False: 6.82k]
  ------------------
  394|  1.93k|                {
  395|  1.93k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.93k|                    --label_count;
  397|  1.93k|                }
  398|  8.75k|            }
  399|    845|        }
  400|       |
  401|  10.0k|        return program;
  402|  10.0k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  10.0k|    {
  406|  10.0k|        TokenStream tokens = Tokenize(source);
  407|  10.0k|        return Parse(tokens);
  408|  10.0k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  91.2k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  91.2k|        switch (token.GetType())
   38|  91.2k|        {
   39|  7.74k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 7.74k, False: 83.4k]
  ------------------
   40|  7.74k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 5.86k, False: 1.88k]
  ------------------
   41|  7.74k|                                          ArgumentType::AddressDisplacement))
   42|  5.86k|                {
   43|  5.86k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  5.86k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  5.86k|                    return {};
   47|  5.86k|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.88k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.88k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.88k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 1.88k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  1.88k|                auto         it           = tokens.current_position();
   62|  1.88k|                const Token& first_token  = tokens.consume();
   63|  1.88k|                const Token& second_token = tokens.consume();
   64|  1.88k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.88k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.88k, False: 0]
  ------------------
   67|  1.88k|                {
   68|  1.88k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.88k|                            first_token, Token::Type::OpenBracket));
   70|  1.88k|                    return {};
   71|  1.88k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  15.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 15.9k, False: 75.2k]
  ------------------
   98|  15.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 3.05k, False: 12.9k]
  ------------------
   99|  3.05k|                {
  100|  3.05k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  3.05k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  3.05k|                    return {};
  103|  3.05k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  12.9k|                return ConstructInstructionArgumentRegisterInt(
  109|  12.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  15.9k|            }
  111|  1.70k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 1.70k, False: 89.5k]
  ------------------
  112|  1.70k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.28k, False: 418]
  ------------------
  113|  1.28k|                {
  114|  1.28k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.28k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.28k|                    return {};
  117|  1.28k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    418|                return ConstructInstructionArgumentRegisterFloat(
  123|    418|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  1.70k|            }
  125|  2.37k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.37k, False: 88.8k]
  ------------------
  126|  2.37k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.37k|                return {};
  129|  1.70k|            }
  130|  20.1k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 20.1k, False: 71.0k]
  ------------------
  131|       |                // Parse as Label
  132|  20.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 2.62k, False: 17.5k]
  ------------------
  133|  2.62k|                {
  134|  2.62k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  2.62k|                            token, expected_argument_type, ArgumentType::Label));
  136|  2.62k|                    return {};
  137|  2.62k|                }
  138|       |
  139|  17.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 17.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  17.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 10.1k, False: 7.42k]
  ------------------
  146|  10.1k|                {
  147|  10.1k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  10.1k|                    return {};
  149|  10.1k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  7.42k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  17.5k|            }
  155|  5.65k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 5.65k, False: 85.5k]
  ------------------
  156|  5.65k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.50k, False: 2.14k]
  ------------------
  157|  3.50k|                {
  158|  3.50k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.50k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.50k|                    return {};
  161|  3.50k|                }
  162|       |
  163|  2.14k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.58k, False: 564]
  ------------------
  164|  1.58k|                {
  165|  1.58k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.58k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.58k|                }
  168|       |
  169|    564|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    564|                return {};
  171|  2.14k|            }
  172|       |
  173|  37.5k|            default:
  ------------------
  |  Branch (173:13): [True: 37.5k, False: 53.6k]
  ------------------
  174|  37.5k|                program.AddParseError(
  175|  37.5k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  37.5k|                return {};
  177|  91.2k|        }
  178|  91.2k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   920k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   920k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 111k, False: 809k]
  ------------------
  249|   111k|                                    {
  250|   111k|                                        std::string_view token_label_name = t.GetText();
  251|   111k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   111k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 28.1k, False: 83.0k]
  ------------------
  254|  28.1k|                                        {
  255|  28.1k|                                            return true;
  256|  28.1k|                                        }
  257|   111k|                                    }
  258|       |
  259|   892k|                                    return false;
  260|   920k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|    274|    {
  353|    274|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 0, False: 274]
  ------------------
  354|      0|        {
  355|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|      0|            return false;
  357|      0|        }
  358|       |
  359|    274|        m_CurrentProgram = &program;
  360|       |
  361|    274|        m_ProgramCounter               = 0u;
  362|    274|        m_Halted                       = false;
  363|    274|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    274|        m_LastRaisedException          = Exception::None;
  365|    274|        m_CurrentStepCount             = 0u;
  366|       |
  367|    274|        return true;
  368|    274|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.05M|    {
   14|  1.05M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 211k, False: 844k]
  ------------------
   15|   211k|        {
   16|   211k|            char first_char = token[0];
   17|   211k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 90.2k, False: 121k]
  |  Branch (17:38): [True: 8.73k, False: 112k]
  ------------------
   18|  98.9k|            {
   19|  98.9k|                char second_char = token[1];
   20|  98.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 97.0k, False: 1.95k]
  |  Branch (20:43): [True: 94.7k, False: 2.26k]
  ------------------
   21|  94.7k|                {
   22|  94.7k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  94.7k|                }
   24|  98.9k|            }
   25|   211k|        }
   26|   844k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 515k, False: 329k]
  ------------------
   27|   515k|        {
   28|   515k|            char first_char = token[0];
   29|   515k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 22.4k, False: 493k]
  |  Branch (29:38): [True: 8.59k, False: 484k]
  ------------------
   30|  31.0k|            {
   31|  31.0k|                char second_char = token[1];
   32|  31.0k|                char third_char  = token[2];
   33|       |
   34|  31.0k|                switch (second_char)
   35|  31.0k|                {
   36|  10.7k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 10.7k, False: 20.2k]
  ------------------
   37|  10.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 10.3k, False: 450]
  |  Branch (37:50): [True: 9.93k, False: 373]
  ------------------
   38|  9.93k|                        {
   39|  9.93k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  9.93k|                        }
   41|    823|                        break;
   42|  10.7k|                    }
   43|  14.5k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 14.5k, False: 16.4k]
  ------------------
   44|  14.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 13.7k, False: 824]
  |  Branch (44:50): [True: 9.01k, False: 4.71k]
  ------------------
   45|  9.01k|                        {
   46|  9.01k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  9.01k|                        }
   48|  5.53k|                        break;
   49|  14.5k|                    }
   50|  5.53k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 3.73k, False: 27.2k]
  ------------------
   51|  3.73k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.01k, False: 2.72k]
  |  Branch (51:50): [True: 2.35k, False: 368]
  ------------------
   52|  3.36k|                        {
   53|  3.36k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  3.36k|                        }
   55|    368|                        break;
   56|  3.73k|                    }
   57|  1.99k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.99k, False: 29.0k]
  ------------------
   58|  1.99k|                        break;
   59|  3.73k|                    }
   60|  31.0k|                }
   61|  31.0k|            }
   62|   515k|        }
   63|       |
   64|   939k|        return IntRegisterID::None;
   65|  1.05M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   939k|    {
   69|   939k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 116k, False: 822k]
  ------------------
   70|   116k|        {
   71|   116k|            char first_char = token[0];
   72|   116k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 9.18k, False: 107k]
  |  Branch (72:38): [True: 4.16k, False: 103k]
  ------------------
   73|  13.3k|            {
   74|  13.3k|                char second_char = token[1];
   75|  13.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 13.0k, False: 333]
  |  Branch (75:43): [True: 10.2k, False: 2.74k]
  ------------------
   76|  10.2k|                {
   77|  10.2k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  10.2k|                }
   79|  13.3k|            }
   80|   116k|        }
   81|   822k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 493k, False: 329k]
  ------------------
   82|   493k|        {
   83|   493k|            char first_char = token[0];
   84|   493k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 14.1k, False: 479k]
  |  Branch (84:38): [True: 5.49k, False: 473k]
  ------------------
   85|  19.6k|            {
   86|  19.6k|                char second_char = token[1];
   87|  19.6k|                char third_char  = token[2];
   88|       |
   89|  19.6k|                switch (second_char)
   90|  19.6k|                {
   91|  6.74k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 6.74k, False: 12.9k]
  ------------------
   92|  6.74k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 5.47k, False: 1.26k]
  |  Branch (92:50): [True: 4.34k, False: 1.13k]
  ------------------
   93|  4.34k|                        {
   94|  4.34k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  4.34k|                        }
   96|  2.39k|                        break;
   97|  6.74k|                    }
   98|  3.83k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 3.83k, False: 15.8k]
  ------------------
   99|  3.83k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 2.61k, False: 1.22k]
  |  Branch (99:50): [True: 2.23k, False: 373]
  ------------------
  100|  2.23k|                        {
  101|  2.23k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  2.23k|                        }
  103|  1.59k|                        break;
  104|  3.83k|                    }
  105|  8.23k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 8.23k, False: 11.4k]
  ------------------
  106|  8.23k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 6.79k, False: 1.44k]
  |  Branch (106:50): [True: 771, False: 676]
  ------------------
  107|  7.56k|                        {
  108|  7.56k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  7.56k|                        }
  110|    676|                        break;
  111|  8.23k|                    }
  112|    856|                    default: {
  ------------------
  |  Branch (112:21): [True: 856, False: 18.8k]
  ------------------
  113|    856|                        break;
  114|  8.23k|                    }
  115|  19.6k|                }
  116|  19.6k|            }
  117|   493k|        }
  118|       |
  119|   914k|        return FloatRegisterID::None;
  120|   939k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.06M|    {
  124|  1.06M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 208k, False: 855k]
  ------------------
  125|   208k|        {
  126|   208k|            char c1 = token[0];
  127|   208k|            char c2 = token[1];
  128|   208k|            char c3 = token[2];
  129|   208k|            char c4 = token[3];
  130|       |
  131|   208k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 17.6k, False: 191k]
  |  Branch (131:34): [True: 312, False: 190k]
  |  Branch (131:49): [True: 17.3k, False: 625]
  |  Branch (131:62): [True: 447, False: 178]
  ------------------
  132|   208k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 17.3k, False: 469]
  |  Branch (132:34): [True: 387, False: 82]
  |  Branch (132:49): [True: 17.3k, False: 389]
  |  Branch (132:62): [True: 2, False: 387]
  ------------------
  133|   208k|        }
  134|       |
  135|   855k|        return false;
  136|  1.06M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  2.01M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   787k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  7.13M|    {
   41|  7.13M|        return m_Type;
   42|  7.13M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  4.19M|    {
   51|  4.19M|        return m_LineNumber;
   52|  4.19M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  8.16M|    {
   56|  8.16M|        return m_Column;
   57|  8.16M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  5.59M|    {
   61|  5.59M|        return m_Text.length();
   62|  5.59M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   601k|    {
   66|   601k|        return m_Text;
   67|   601k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   146k|    {
   80|   146k|        return m_HasHint;
   81|   146k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   159k|    {
   85|   159k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   159k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   159k|                   m_Type == Type::ImmediateInteger);
   88|   159k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   159k|        return m_Hint;
   91|   159k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  10.0k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  10.0k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  10.0k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.88k|    {
   51|  1.88k|        auto it = m_Iterator;
   52|  7.52k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 5.64k, False: 1.88k]
  ------------------
   53|  5.64k|        {
   54|  5.64k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 5.64k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  5.64k|        }
   59|       |
   60|  1.88k|        return true;
   61|  1.88k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  2.81M|    {
   65|  2.81M|        return m_Iterator != m_Tokens.end();
   66|  2.81M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  2.80M|    {
   70|  2.80M|        return m_Iterator == m_Tokens.end();
   71|  2.80M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  2.80M|    {
   85|  2.80M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  2.80M|        return *m_Iterator++;
   91|  2.80M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.88k|    {
  164|  1.88k|        return m_Iterator;
  165|  1.88k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  10.0k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  10.0k|        return m_Tokens.begin();
  188|  10.0k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  10.0k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  10.0k|        return m_Tokens.end();
  206|  10.0k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    845|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    845|        return m_Tokens.rbegin();
  224|    845|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  8.75k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  8.75k|        return m_Tokens.rend();
  233|  8.75k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  10.0k|    {
   63|  10.0k|        TokenStream tokens;
   64|       |
   65|  10.0k|        std::string_view current_token;
   66|       |
   67|  10.0k|        phi::u64 current_line_number{1u};
   68|  10.0k|        phi::u64 current_column{1u};
   69|  10.0k|        phi::u64 token_begin{0u};
   70|       |
   71|  10.0k|        phi::boolean parsing_comment{false};
   72|       |
   73|  6.04M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 6.03M, False: 10.0k]
  ------------------
   74|  6.03M|        {
   75|  6.03M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  6.03M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.32M, False: 4.70M]
  ------------------
   78|  1.32M|            {
   79|  1.32M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 853k, False: 474k]
  ------------------
   80|   853k|                {
   81|       |                    // Skip empty lines
   82|   853k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   853k|                                        current_line_number, current_column);
   84|       |
   85|   853k|                    parsing_comment = false;
   86|   853k|                    current_line_number += 1u;
   87|   853k|                    current_column = 1u;
   88|   853k|                    continue;
   89|   853k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   474k|                tokens.emplace_back(
   93|   474k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   474k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   474k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   474k|                                    current_line_number, current_column);
   98|       |
   99|   474k|                current_token   = std::string_view{};
  100|   474k|                parsing_comment = false;
  101|   474k|                current_line_number += 1u;
  102|   474k|                current_column = 0u;
  103|   474k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  4.70M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 6.55k, False: 4.69M]
  |  Branch (105:34): [True: 276k, False: 4.41M]
  ------------------
  106|   283k|            {
  107|   283k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 258k, False: 24.8k]
  ------------------
  108|   258k|                {
  109|   258k|                    token_begin = i;
  110|   258k|                }
  111|  24.8k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 22.1k, False: 2.73k]
  ------------------
  112|  22.1k|                {
  113|  22.1k|                    tokens.emplace_back(ParseToken(
  114|  22.1k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  22.1k|                            current_line_number, current_column - current_token.length()));
  116|  22.1k|                    token_begin   = i;
  117|  22.1k|                    current_token = std::string_view{};
  118|  22.1k|                }
  119|       |
  120|   283k|                parsing_comment = true;
  121|   283k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   283k|            }
  123|  4.41M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 325k, False: 4.09M]
  ------------------
  124|   325k|            {
  125|       |                // simply append the character
  126|   325k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   325k|            }
  128|  4.09M|            else
  129|  4.09M|            {
  130|       |                // Not parsing a comment
  131|  4.09M|                switch (c)
  132|  4.09M|                {
  133|   584k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 584k, False: 3.51M]
  ------------------
  134|   584k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 667, False: 4.09M]
  ------------------
  135|   584k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 4.09M]
  ------------------
  136|   584k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 603, False: 584k]
  ------------------
  137|    603|                        {
  138|    603|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    603|                            continue;
  141|    603|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   584k|                        tokens.emplace_back(ParseToken(
  145|   584k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   584k|                                current_line_number, current_column - current_token.length()));
  147|   584k|                        current_token = std::string_view{};
  148|   584k|                        break;
  149|  94.7k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 94.7k, False: 3.99M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  94.7k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 81.0k, False: 13.7k]
  ------------------
  152|  81.0k|                        {
  153|  81.0k|                            current_token =
  154|  81.0k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  81.0k|                            tokens.emplace_back(ParseToken(
  156|  81.0k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  81.0k|                                    current_line_number,
  158|  81.0k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  81.0k|                            current_token = std::string_view{};
  161|  81.0k|                        }
  162|  13.7k|                        else
  163|  13.7k|                        {
  164|       |                            // Orphan colon
  165|  13.7k|                            token_begin = i;
  166|       |
  167|  13.7k|                            tokens.emplace_back(Token::Type::Colon,
  168|  13.7k|                                                source.substr(token_begin.unsafe(), 1),
  169|  13.7k|                                                current_line_number, current_column);
  170|  13.7k|                        }
  171|  94.7k|                        break;
  172|   148k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 148k, False: 3.94M]
  ------------------
  173|   151k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 2.88k, False: 4.09M]
  ------------------
  174|   151k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 258, False: 4.09M]
  ------------------
  175|   151k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 147k, False: 4.41k]
  ------------------
  176|   147k|                        {
  177|   147k|                            tokens.emplace_back(ParseToken(
  178|   147k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   147k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   147k|                            current_token = std::string_view{};
  182|   147k|                        }
  183|       |
  184|   151k|                        Token::Type type;
  185|   151k|                        switch (c)
  186|   151k|                        {
  187|   148k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 148k, False: 3.14k]
  ------------------
  188|   148k|                                type = Token::Type::Comma;
  189|   148k|                                break;
  190|  2.88k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 2.88k, False: 148k]
  ------------------
  191|  2.88k|                                type = Token::Type::OpenBracket;
  192|  2.88k|                                break;
  193|    258|                            case ')':
  ------------------
  |  Branch (193:29): [True: 258, False: 151k]
  ------------------
  194|    258|                                type = Token::Type::ClosingBracket;
  195|    258|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 151k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   151k|#endif
  201|   151k|                        }
  202|       |
  203|   151k|                        token_begin = i;
  204|       |
  205|   151k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   151k|                                            current_line_number, current_column);
  207|   151k|                        break;
  208|       |
  209|  3.26M|                    default:
  ------------------
  |  Branch (209:21): [True: 3.26M, False: 831k]
  ------------------
  210|  3.26M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.03M, False: 2.23M]
  ------------------
  211|  1.03M|                        {
  212|  1.03M|                            token_begin = i;
  213|  1.03M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  3.26M|                        current_token =
  217|  3.26M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  4.09M|                }
  219|  4.09M|            }
  220|       |
  221|  5.17M|            current_column += 1u;
  222|  5.17M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  10.0k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 3.00k, False: 7.04k]
  ------------------
  226|  3.00k|        {
  227|  3.00k|            tokens.emplace_back(
  228|  3.00k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  3.00k|                               current_line_number, current_column - current_token.length()));
  230|  3.00k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  10.0k|        tokens.finalize();
  234|       |
  235|  10.0k|        return tokens;
  236|  10.0k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.31M|    {
   11|  1.31M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 19.8k, False: 1.29M]
  |  Branch (11:35): [True: 19.7k, False: 89]
  ------------------
   12|  19.7k|        {
   13|  19.7k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  19.7k|            if (number)
  ------------------
  |  Branch (15:17): [True: 14.1k, False: 5.59k]
  ------------------
   16|  14.1k|            {
   17|  14.1k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  14.1k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  14.1k|            }
   20|       |
   21|  5.59k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  19.7k|        }
   23|       |
   24|  1.29M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 4.40k, False: 1.28M]
  |  Branch (24:35): [True: 276k, False: 1.01M]
  ------------------
   25|   280k|        {
   26|   280k|            return {Token::Type::Comment, token, line_number, column};
   27|   280k|        }
   28|       |
   29|  1.01M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 29.4k, False: 982k]
  ------------------
   30|  29.4k|        {
   31|  29.4k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  29.4k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  29.4k|        }
   34|       |
   35|   982k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 17.3k, False: 964k]
  ------------------
   36|  17.3k|        {
   37|  17.3k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  17.3k|        }
   39|       |
   40|   964k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 111k, False: 852k]
  ------------------
   41|   111k|        {
   42|   111k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|   111k|                    static_cast<std::uint32_t>(id)};
   44|   111k|        }
   45|       |
   46|   852k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 23.3k, False: 829k]
  ------------------
   47|  23.3k|        {
   48|  23.3k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  23.3k|                    static_cast<std::uint32_t>(id)};
   50|  23.3k|        }
   51|       |
   52|   829k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 608k, False: 220k]
  ------------------
   53|   608k|        {
   54|   608k|            return {Token::Type::OpCode, token, line_number, column,
   55|   608k|                    static_cast<std::uint32_t>(opcode)};
   56|   608k|        }
   57|       |
   58|   220k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   829k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  10.0k|    {
   53|       |        // Constants
   54|  10.0k|        constexpr std::uint8_t number_of_opcodes =
   55|  10.0k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  10.0k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  10.0k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  10.0k|        std::string ret;
   60|       |
   61|  1.95M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.94M, False: 9.93k]
  ------------------
   62|  1.94M|        {
   63|  1.94M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.94M|            switch (current_value)
   66|  1.94M|            {
   67|       |                // OpCode
   68|   565k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 565k, False: 1.38M]
  ------------------
   69|       |                    // Has one more value
   70|   565k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 564k, False: 1.17k]
  ------------------
   71|   564k|                    {
   72|   564k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   564k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   564k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 30, False: 564k]
  ------------------
   77|     30|                        {
   78|     30|                            return detail::ErrorString;
   79|     30|                        }
   80|   564k|                    }
   81|   565k|                    break;
   82|   565k|                }
   83|       |
   84|       |                // Int Register
   85|   565k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 125k, False: 1.82M]
  ------------------
   86|       |                    // Has one more value
   87|   125k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 125k, False: 164]
  ------------------
   88|   125k|                    {
   89|   125k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   125k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   125k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 23, False: 125k]
  ------------------
   93|     23|                        {
   94|     23|                            return detail::ErrorString;
   95|     23|                        }
   96|   125k|                    }
   97|   125k|                    break;
   98|   125k|                }
   99|       |
  100|       |                // Float register
  101|   125k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 23.7k, False: 1.92M]
  ------------------
  102|       |                    // Has one more value
  103|  23.7k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 23.7k, False: 76]
  ------------------
  104|  23.7k|                    {
  105|  23.7k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  23.7k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  23.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 23.7k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  23.7k|                    }
  113|  23.7k|                    break;
  114|  23.7k|                }
  115|       |
  116|       |                // Floating point status register
  117|  23.7k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 19.6k, False: 1.93M]
  ------------------
  118|  19.6k|                    ret += "FPSR";
  119|  19.6k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 3, False: 19.6k]
  ------------------
  120|      3|                    {
  121|      3|                        return detail::ErrorString;
  122|      3|                    }
  123|       |
  124|  19.6k|                    break;
  125|  19.6k|                }
  126|       |
  127|       |                // Immediate integer
  128|  25.6k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 25.6k, False: 1.92M]
  ------------------
  129|  25.6k|                    ret += "#";
  130|  25.6k|                    [[fallthrough]];
  131|  25.6k|                }
  132|       |
  133|       |                // Integer literal
  134|   113k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 87.7k, False: 1.86M]
  ------------------
  135|   113k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   113k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 113k, False: 147]
  ------------------
  138|   113k|                    {
  139|   113k|                        std::int16_t value = 0;
  140|       |
  141|   339k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 226k, False: 113k]
  ------------------
  142|   226k|                        {
  143|   226k|                            value <<= 8;
  144|   226k|                            value &= data[index++];
  145|   226k|                        }
  146|       |
  147|   113k|                        ret += std::to_string(value);
  148|   113k|                    }
  149|   113k|                    break;
  150|  25.6k|                }
  151|       |
  152|       |                // Label
  153|  25.5k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 25.5k, False: 1.92M]
  ------------------
  154|  25.5k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  25.5k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 25.5k, False: 21]
  ------------------
  157|  25.5k|                    {
  158|  25.5k|                        std::string label_name = "lbl_";
  159|       |
  160|   152k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 127k, False: 25.5k]
  ------------------
  161|   127k|                        {
  162|   127k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   127k|                            label_name += c;
  165|   127k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  25.5k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 25.3k, False: 257]
  |  Branch (168:45): [True: 17.8k, False: 7.49k]
  ------------------
  169|  17.8k|                        {
  170|  17.8k|                            label_name += ':';
  171|  17.8k|                            ret += label_name;
  172|  17.8k|                        }
  173|  7.75k|                        else
  174|  7.75k|                        {
  175|  7.75k|                            ret += label_name;
  176|  7.75k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 16, False: 7.73k]
  ------------------
  177|     16|                            {
  178|     16|                                return detail::ErrorString;
  179|     16|                            }
  180|  7.75k|                        }
  181|  25.5k|                    }
  182|  25.5k|                    break;
  183|  25.5k|                }
  184|       |
  185|       |                // Newline
  186|   800k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 800k, False: 1.14M]
  ------------------
  187|   800k|                    ret += '\n';
  188|   800k|                    break;
  189|  25.5k|                }
  190|       |
  191|       |                // Comment
  192|   275k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 275k, False: 1.67M]
  ------------------
  193|   275k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   275k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 275k, False: 99]
  ------------------
  196|   275k|                    {
  197|   275k|                        std::string comment = "; ";
  198|       |
  199|  1.64M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 1.37M, False: 275k]
  ------------------
  200|  1.37M|                        {
  201|  1.37M|                            comment += static_cast<char>(data[index++]);
  202|  1.37M|                        }
  203|       |
  204|   275k|                        ret += comment + '\n';
  205|   275k|                    }
  206|   275k|                    break;
  207|  25.5k|                }
  208|       |
  209|       |                // Ignore
  210|     38|                default:
  ------------------
  |  Branch (210:17): [True: 38, False: 1.94M]
  ------------------
  211|     38|                    return detail::ErrorString;
  212|  1.94M|            }
  213|  1.94M|        }
  214|       |
  215|  9.93k|        return ret;
  216|  10.0k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   740k|        {
   20|   740k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 738k, False: 2.49k]
  ------------------
   21|   738k|            {
   22|   738k|                std::uint8_t val = data[index++];
   23|   738k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 592k, False: 145k]
  ------------------
   24|   592k|                {
   25|   592k|                    text += ' ';
   26|   592k|                }
   27|   145k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 145k, False: 73]
  ------------------
   28|   145k|                {
   29|   145k|                    text += ',';
   30|   145k|                }
   31|     73|                else
   32|     73|                {
   33|     73|                    return false;
   34|     73|                }
   35|   738k|            }
   36|       |
   37|   740k|            return true;
   38|   740k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   127k|        {
   42|   127k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 103k, False: 23.6k]
  ------------------
   43|   103k|            {
   44|   103k|                return '_';
   45|   103k|            }
   46|       |
   47|  23.6k|            return c;
   48|   127k|        }

LLVMFuzzerTestOneInput:
   12|  10.0k|{
   13|  10.0k|    static dlxemu::Emulator emu;
   14|       |
   15|  10.0k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  10.0k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  10.0k|    editor.SetText(source);
   21|  10.0k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  10.0k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  10.0k|    editor.ColorizeInternal();
   26|       |
   27|  10.0k|    return 0;
   28|  10.0k|}


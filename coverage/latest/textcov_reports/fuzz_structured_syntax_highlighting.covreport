_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  67.3k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  13.4k|    {
  240|  13.4k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 9.74k, False: 3.73k]
  ------------------
  241|  9.74k|        {
  242|  9.74k|            return m_Line < other.m_Line;
  243|  9.74k|        }
  244|       |
  245|  3.73k|        return m_Column <= other.m_Column;
  246|  13.4k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  9.67M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  13.4k|    {
  349|  13.4k|        m_ErrorMarkers.clear();
  350|  13.4k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  13.4k|    {
  414|  13.4k|        m_Breakpoints.clear();
  415|  13.4k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  13.4k|    {
  494|  13.4k|        m_Lines.clear();
  495|  13.4k|        ResetState();
  496|  13.4k|        m_Lines.emplace_back(Line());
  497|       |
  498|  13.4k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 12.3M, False: 13.4k]
  ------------------
  499|  12.3M|        {
  500|  12.3M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 37.1k, False: 12.2M]
  |  Branch (500:17): [True: 887k, False: 11.4M]
  ------------------
  501|  12.3M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 2.64M, False: 9.65M]
  |  Branch (501:48): [True: 872k, False: 1.77M]
  |  Branch (501:69): [True: 850k, False: 22.6k]
  ------------------
  502|   887k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   887k|            }
  505|  11.4M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.77M, False: 9.67M]
  ------------------
  506|  1.77M|            {
  507|  1.77M|                m_Lines.emplace_back(Line());
  508|  1.77M|            }
  509|  9.67M|            else
  510|  9.67M|            {
  511|  9.67M|                m_Lines.back().emplace_back(
  512|  9.67M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  9.67M|            }
  514|  12.3M|        }
  515|       |
  516|  13.4k|        m_TextChanged = true;
  517|  13.4k|        m_ScrollToTop = true;
  518|       |
  519|  13.4k|        m_UndoBuffer.clear();
  520|  13.4k|        m_UndoIndex = 0u;
  521|       |
  522|  13.4k|        Colorize();
  523|  13.4k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  13.4k|    {
  527|  13.4k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  13.4k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  13.4k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  13.4k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  13.4k|        const phi::u32 to_line =
 1724|  13.4k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 13.4k, False: 0]
  ------------------
 1725|  13.4k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  13.4k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  13.4k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  13.4k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  13.4k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  13.4k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  13.4k|    {
 1839|  13.4k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  13.4k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  13.4k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  13.4k|        std::string result;
 1844|       |
 1845|  13.4k|        phi::u32   lstart = start.m_Line;
 1846|  13.4k|        phi::u32   lend   = end.m_Line;
 1847|  13.4k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  13.4k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  13.4k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  13.4k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.79M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.78M, False: 13.4k]
  ------------------
 1853|  1.78M|        {
 1854|  1.78M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.78M|            size += m_Lines[i.unsafe()].size();
 1856|  1.78M|        }
 1857|       |
 1858|  13.4k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  11.4M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 4.46M, False: 6.98M]
  |  Branch (1860:16): [True: 11.4M, False: 13.4k]
  |  Branch (1860:33): [True: 6.97M, False: 13.4k]
  ------------------
 1861|  11.4M|        {
 1862|  11.4M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  11.4M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  11.4M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 9.67M, False: 1.77M]
  ------------------
 1866|  9.67M|            {
 1867|  9.67M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  9.67M|                istart++;
 1869|  9.67M|            }
 1870|  1.77M|            else
 1871|  1.77M|            {
 1872|  1.77M|                istart = 0u;
 1873|  1.77M|                ++lstart;
 1874|       |
 1875|  1.77M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.77M, False: 0]
  ------------------
 1876|  1.77M|                {
 1877|  1.77M|                    result += '\n';
 1878|  1.77M|                }
 1879|  1.77M|            }
 1880|  11.4M|        }
 1881|       |
 1882|  13.4k|        return result;
 1883|  13.4k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  26.9k|    {
 2422|  26.9k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  26.9k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  26.9k|        phi::u32    index = 0u;
 2426|  2.66M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 2.64M, False: 16.4k]
  |  Branch (2426:35): [True: 2.63M, False: 26.9k]
  |  Branch (2426:58): [True: 2.63M, False: 10.5k]
  ------------------
 2427|  2.63M|        {
 2428|  2.63M|            PHI_ASSERT(index < line.size());
 2429|  2.63M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  2.63M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 2.63M]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|  2.63M|            else
 2436|  2.63M|            {
 2437|  2.63M|                ++column;
 2438|  2.63M|            }
 2439|       |
 2440|  2.63M|            index += UTF8CharLength(character);
 2441|  2.63M|        }
 2442|       |
 2443|  26.9k|        return index;
 2444|  26.9k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  13.4k|    {
 2494|  13.4k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 13.4k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  13.4k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  13.4k|        phi::u32    col  = 0u;
 2501|       |
 2502|  2.64M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 2.63M, False: 13.4k]
  ------------------
 2503|  2.63M|        {
 2504|  2.63M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  2.63M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 2.63M]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|  2.63M|            else
 2510|  2.63M|            {
 2511|  2.63M|                col++;
 2512|  2.63M|            }
 2513|       |
 2514|  2.63M|            i += UTF8CharLength(character);
 2515|  2.63M|        }
 2516|       |
 2517|  13.4k|        return col;
 2518|  13.4k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  13.4k|    {
 2522|  13.4k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  13.4k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  13.4k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  4.99M|    {
 3661|  4.99M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  4.99M|        switch (token.GetType())
 3665|  4.99M|        {
 3666|   761k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 761k, False: 4.23M]
  ------------------
 3667|   761k|                palette_index = PaletteIndex::Comment;
 3668|   761k|                break;
 3669|  72.6k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 72.6k, False: 4.92M]
  ------------------
 3670|   136k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 63.7k, False: 4.93M]
  ------------------
 3671|   136k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|   136k|                break;
 3673|  1.02M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 1.02M, False: 3.97M]
  ------------------
 3674|  1.02M|                palette_index = PaletteIndex::OpCode;
 3675|  1.02M|                break;
 3676|  65.0k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 65.0k, False: 4.93M]
  ------------------
 3677|   255k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 190k, False: 4.80M]
  ------------------
 3678|   326k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 71.8k, False: 4.92M]
  ------------------
 3679|   326k|                palette_index = PaletteIndex::Register;
 3680|   326k|                break;
 3681|  1.77M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.77M, False: 3.22M]
  ------------------
 3682|  1.77M|                return;
 3683|   976k|            default:
  ------------------
  |  Branch (3683:13): [True: 976k, False: 4.02M]
  ------------------
 3684|   976k|                break;
 3685|  4.99M|        }
 3686|       |
 3687|  3.22M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  3.22M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  3.22M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  11.9M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 8.72M, False: 3.22M]
  ------------------
 3692|  8.72M|        {
 3693|  8.72M|            PHI_ASSERT(index < line.size());
 3694|  8.72M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  8.72M|        }
 3696|  3.22M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  13.4k|    {
 3700|  13.4k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  13.4k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 4.99M, False: 13.4k]
  ------------------
 3703|  4.99M|        {
 3704|  4.99M|            ColorizeToken(token);
 3705|  4.99M|        }
 3706|  13.4k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  13.4k|    {
 3710|  13.4k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  13.4k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  13.4k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  13.4k|        ClearBreakPoints();
 3716|  13.4k|        ClearErrorMarkers();
 3717|  13.4k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  2.63M|{
  135|  2.63M|    return UTF8CharLength(static_cast<char>(characater));
  136|  2.63M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  5.27M|{
  105|  5.27M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 5.27M]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|  5.27M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 5.27M]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|  5.27M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 5.27M]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|  5.27M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 5.27M]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|  5.27M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 5.27M]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|  5.27M|    return 1_u8;
  131|  5.27M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  173|  13.4k|    {
  174|  13.4k|        return m_DLXProgram;
  175|  13.4k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  178|  13.4k|    {
  179|  13.4k|        m_DLXProgram = dlx::Parser::Parse(source);
  180|       |
  181|  13.4k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (181:13): [True: 423, False: 13.0k]
  ------------------
  182|    423|        {
  183|    423|            m_Processor.LoadProgram(m_DLXProgram);
  184|    423|        }
  185|  13.4k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  198|  13.4k|    {
  199|  13.4k|        return m_CodeEditor;
  200|  13.4k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.34M|        {
  169|  1.34M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.34M|            switch (index.unsafe())
  172|  1.34M|            {
  173|   582k|                case 0:
  ------------------
  |  Branch (173:17): [True: 582k, False: 761k]
  ------------------
  174|   582k|                    return m_Arg1Type;
  175|       |
  176|   395k|                case 1:
  ------------------
  |  Branch (176:17): [True: 395k, False: 948k]
  ------------------
  177|   395k|                    return m_Arg2Type;
  178|       |
  179|   366k|                case 2:
  ------------------
  |  Branch (179:17): [True: 366k, False: 977k]
  ------------------
  180|   366k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.34M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.34M|#endif
  187|  1.34M|            }
  188|  1.34M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   348k|        {
  195|   348k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   348k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 348k, False: 184]
  ------------------
  199|   348k|            {
  200|   348k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   348k|            }
  202|   348k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 260k, False: 88.1k]
  ------------------
  203|   260k|            {
  204|   260k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   260k|            }
  206|   348k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 175k, False: 173k]
  ------------------
  207|   175k|            {
  208|   175k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   175k|            }
  210|       |
  211|   348k|            return number_of_argument_required;
  212|   348k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   348k|        {
  221|   348k|            return m_Executor;
  222|   348k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   162k|    {
   38|   162k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   162k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   162k|                                         static_cast<underlying_t>(rhs));
   42|   162k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   162k|    {
   55|   162k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   162k|        return static_cast<underlying_t>(type & test) != 0;
   58|   162k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  204|   906k|    {
  205|   906k|        switch (value)
  206|   906k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   167k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|   167k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 167k, False: 738k]
  |  |  |  |  ------------------
  |  |  |  |  209|   167k|        return #name;
  |  |  ------------------
  |  |   16|   167k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  16.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.8k, False: 889k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.8k|        return #name;
  |  |  ------------------
  |  |   17|  34.6k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  34.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 34.6k, False: 871k]
  |  |  |  |  ------------------
  |  |  |  |  209|  34.6k|        return #name;
  |  |  ------------------
  |  |   18|  42.1k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  42.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 42.1k, False: 863k]
  |  |  |  |  ------------------
  |  |  |  |  209|  42.1k|        return #name;
  |  |  ------------------
  |  |   19|  42.1k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  14.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.5k, False: 891k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.5k|        return #name;
  |  |  ------------------
  |  |   20|  15.4k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  15.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.4k, False: 890k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.4k|        return #name;
  |  |  ------------------
  |  |   21|  15.4k|                                                                                                   \
  |  |   22|  15.4k|    /* Sub */                                                                                      \
  |  |   23|  15.4k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.31k, False: 898k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.31k|        return #name;
  |  |  ------------------
  |  |   24|  22.7k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  22.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.7k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.7k|        return #name;
  |  |  ------------------
  |  |   25|  22.7k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.68k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.68k|        return #name;
  |  |  ------------------
  |  |   26|  10.5k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.5k, False: 895k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.5k|        return #name;
  |  |  ------------------
  |  |   27|  10.5k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.47k, False: 899k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.47k|        return #name;
  |  |  ------------------
  |  |   28|  6.47k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 129, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    129|        return #name;
  |  |  ------------------
  |  |   29|    129|                                                                                                   \
  |  |   30|    129|    /* Multiplication */                                                                           \
  |  |   31|    129|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |   32|    137|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    137|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 137, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    137|        return #name;
  |  |  ------------------
  |  |   33|    202|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 202, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    202|        return #name;
  |  |  ------------------
  |  |   34|  16.9k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  16.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.9k, False: 889k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.9k|        return #name;
  |  |  ------------------
  |  |   35|  19.5k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  19.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 19.5k, False: 886k]
  |  |  |  |  ------------------
  |  |  |  |  209|  19.5k|        return #name;
  |  |  ------------------
  |  |   36|  19.5k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 216, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    216|        return #name;
  |  |  ------------------
  |  |   37|    216|                                                                                                   \
  |  |   38|    216|    /* Division */                                                                                 \
  |  |   39|  12.7k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  12.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.7k, False: 893k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.7k|        return #name;
  |  |  ------------------
  |  |   40|  12.7k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.05k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.05k|        return #name;
  |  |  ------------------
  |  |   41|  6.30k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.30k, False: 899k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.30k|        return #name;
  |  |  ------------------
  |  |   42|  20.4k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  20.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.4k, False: 885k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.4k|        return #name;
  |  |  ------------------
  |  |   43|  20.4k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   44|  9.00k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.00k, False: 897k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.00k|        return #name;
  |  |  ------------------
  |  |   45|  9.00k|                                                                                                   \
  |  |   46|  9.00k|    /* Shift left (logical) */                                                                     \
  |  |   47|  9.00k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.16k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.16k|        return #name;
  |  |  ------------------
  |  |   48|  5.01k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.01k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.01k|        return #name;
  |  |  ------------------
  |  |   49|  5.01k|                                                                                                   \
  |  |   50|  5.01k|    /* Shift right (logical) */                                                                    \
  |  |   51|  5.01k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    120|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 120, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    120|        return #name;
  |  |  ------------------
  |  |   52|    263|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    263|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 263, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    263|        return #name;
  |  |  ------------------
  |  |   53|    263|                                                                                                   \
  |  |   54|    263|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  22.2k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  22.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.2k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.2k|        return #name;
  |  |  ------------------
  |  |   56|  22.2k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.00k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.00k|        return #name;
  |  |  ------------------
  |  |   57|  2.00k|                                                                                                   \
  |  |   58|  2.00k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  14.4k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  14.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.4k, False: 891k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.4k|        return #name;
  |  |  ------------------
  |  |   60|  14.4k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    438|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 438, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    438|        return #name;
  |  |  ------------------
  |  |   61|    438|                                                                                                   \
  |  |   62|    438|    /* Logic */                                                                                    \
  |  |   63|    438|                                                                                                   \
  |  |   64|    438|    /* And */                                                                                      \
  |  |   65|  6.05k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  6.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.05k, False: 900k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.05k|        return #name;
  |  |  ------------------
  |  |   66|  6.05k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    869|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 869, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    869|        return #name;
  |  |  ------------------
  |  |   67|    869|                                                                                                   \
  |  |   68|    869|    /* Or */                                                                                       \
  |  |   69|  1.86k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.86k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.86k|        return #name;
  |  |  ------------------
  |  |   70|  1.86k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |   71|     88|                                                                                                   \
  |  |   72|     88|    /* XOR */                                                                                      \
  |  |   73|  3.51k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.51k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.51k|        return #name;
  |  |  ------------------
  |  |   74|  3.51k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|    163|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    163|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 163, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    163|        return #name;
  |  |  ------------------
  |  |   80|  3.42k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.42k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.42k|        return #name;
  |  |  ------------------
  |  |   81|  3.42k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |   82|  20.1k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  20.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.1k, False: 885k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.1k|        return #name;
  |  |  ------------------
  |  |   83|  20.1k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    248|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 248, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    248|        return #name;
  |  |  ------------------
  |  |   84|    353|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    353|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 353, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    353|        return #name;
  |  |  ------------------
  |  |   85|    353|                                                                                                   \
  |  |   86|    353|    /* Greater than */                                                                             \
  |  |   87|    404|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    404|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 404, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    404|        return #name;
  |  |  ------------------
  |  |   88|  3.53k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.53k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.53k|        return #name;
  |  |  ------------------
  |  |   89|  3.53k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 74, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     74|        return #name;
  |  |  ------------------
  |  |   90|  10.6k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.6k, False: 895k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.6k|        return #name;
  |  |  ------------------
  |  |   91|  13.1k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.1k, False: 892k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.1k|        return #name;
  |  |  ------------------
  |  |   92|  13.1k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.39k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.39k|        return #name;
  |  |  ------------------
  |  |   93|  4.39k|                                                                                                   \
  |  |   94|  4.39k|    /* Less than or equal */                                                                       \
  |  |   95|  13.6k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.6k, False: 892k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.6k|        return #name;
  |  |  ------------------
  |  |   96|  22.4k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  22.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.4k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.4k|        return #name;
  |  |  ------------------
  |  |   97|  22.4k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.42k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.42k|        return #name;
  |  |  ------------------
  |  |   98|  1.42k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    808|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 808, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    808|        return #name;
  |  |  ------------------
  |  |   99|  4.50k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.50k, False: 901k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.50k|        return #name;
  |  |  ------------------
  |  |  100|  4.50k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.09k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.09k|        return #name;
  |  |  ------------------
  |  |  101|  1.09k|                                                                                                   \
  |  |  102|  1.09k|    /* Greater than or equal */                                                                    \
  |  |  103|  1.09k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    291|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 291, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    291|        return #name;
  |  |  ------------------
  |  |  104|    319|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    319|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 319, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    319|        return #name;
  |  |  ------------------
  |  |  105|  16.1k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  16.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.1k, False: 889k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.1k|        return #name;
  |  |  ------------------
  |  |  106|  16.1k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  15.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.4k, False: 890k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.4k|        return #name;
  |  |  ------------------
  |  |  107|  15.4k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  108|  25.9k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  25.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 25.9k, False: 880k]
  |  |  |  |  ------------------
  |  |  |  |  209|  25.9k|        return #name;
  |  |  ------------------
  |  |  109|  25.9k|                                                                                                   \
  |  |  110|  25.9k|    /* Equal */                                                                                    \
  |  |  111|  25.9k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    187|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 187, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    187|        return #name;
  |  |  ------------------
  |  |  112|  3.52k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.52k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.52k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.52k|        return #name;
  |  |  ------------------
  |  |  113|  3.52k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.13k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.13k|        return #name;
  |  |  ------------------
  |  |  114|  26.2k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  26.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 26.2k, False: 879k]
  |  |  |  |  ------------------
  |  |  |  |  209|  26.2k|        return #name;
  |  |  ------------------
  |  |  115|  26.2k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    367|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 367, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    367|        return #name;
  |  |  ------------------
  |  |  116|    367|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  117|     67|                                                                                                   \
  |  |  118|     67|    /* Not equal */                                                                                \
  |  |  119|    210|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 210, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    210|        return #name;
  |  |  ------------------
  |  |  120|  1.14k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.14k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.14k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.14k|        return #name;
  |  |  ------------------
  |  |  121|  11.8k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  11.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.8k, False: 894k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.8k|        return #name;
  |  |  ------------------
  |  |  122|  11.8k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  123|     78|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |  124|     79|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  125|     79|                                                                                                   \
  |  |  126|     79|    /* Conditional branching */                                                                    \
  |  |  127|     79|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|  9.82k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.82k, False: 896k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.82k|        return #name;
  |  |  ------------------
  |  |  129|  54.9k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  54.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 54.9k, False: 851k]
  |  |  |  |  ------------------
  |  |  |  |  209|  54.9k|        return #name;
  |  |  ------------------
  |  |  130|  54.9k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  26.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 26.8k, False: 879k]
  |  |  |  |  ------------------
  |  |  |  |  209|  26.8k|        return #name;
  |  |  ------------------
  |  |  131|  26.8k|                                                                                                   \
  |  |  132|  26.8k|    /* Unconditional branching */                                                                  \
  |  |  133|  26.8k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  134|    101|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     84|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  136|     99|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  137|     99|                                                                                                   \
  |  |  138|     99|    /* Loading data */                                                                             \
  |  |  139|     99|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  140|  7.19k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  7.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.19k, False: 898k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.19k|        return #name;
  |  |  ------------------
  |  |  141|  7.19k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    119|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 119, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    119|        return #name;
  |  |  ------------------
  |  |  142|  12.4k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  12.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.4k, False: 893k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.4k|        return #name;
  |  |  ------------------
  |  |  143|  12.4k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |  144|    217|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    217|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 217, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    217|        return #name;
  |  |  ------------------
  |  |  145|    217|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|  11.9k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  11.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.9k, False: 894k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.9k|        return #name;
  |  |  ------------------
  |  |  148|  11.9k|                                                                                                   \
  |  |  149|  11.9k|    /* Storing data */                                                                             \
  |  |  150|  11.9k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    173|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 173, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    173|        return #name;
  |  |  ------------------
  |  |  151|  7.43k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.43k, False: 898k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.43k|        return #name;
  |  |  ------------------
  |  |  152|  26.4k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  26.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 26.4k, False: 879k]
  |  |  |  |  ------------------
  |  |  |  |  209|  26.4k|        return #name;
  |  |  ------------------
  |  |  153|  26.4k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.5k, False: 892k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.5k|        return #name;
  |  |  ------------------
  |  |  154|  13.5k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|    166|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    166|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 166, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    166|        return #name;
  |  |  ------------------
  |  |  156|    166|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 128, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    128|        return #name;
  |  |  ------------------
  |  |  157|    962|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    962|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 962, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    962|        return #name;
  |  |  ------------------
  |  |  158|    962|                                                                                                   \
  |  |  159|    962|    /* Moving data */                                                                              \
  |  |  160|  18.3k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  18.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 18.3k, False: 887k]
  |  |  |  |  ------------------
  |  |  |  |  209|  18.3k|        return #name;
  |  |  ------------------
  |  |  161|  18.3k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    278|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 278, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    278|        return #name;
  |  |  ------------------
  |  |  162|    278|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    121|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 121, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    121|        return #name;
  |  |  ------------------
  |  |  163|    121|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|    782|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    782|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 782, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    782|        return #name;
  |  |  ------------------
  |  |  167|  1.77k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.77k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.77k|        return #name;
  |  |  ------------------
  |  |  168|  1.77k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.22k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.22k|        return #name;
  |  |  ------------------
  |  |  169|  1.22k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    889|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 889, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    889|        return #name;
  |  |  ------------------
  |  |  170|    889|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    136|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 136, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    136|        return #name;
  |  |  ------------------
  |  |  171|  12.3k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  12.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.3k, False: 893k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.3k|        return #name;
  |  |  ------------------
  |  |  172|  12.3k|                                                                                                   \
  |  |  173|  12.3k|    /* Other */                                                                                    \
  |  |  174|  12.3k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    519|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 519, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|    519|        return #name;
  |  |  ------------------
  |  |  175|    519|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 905k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  176|  1.75k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  1.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.75k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.75k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 906k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   906k|        }
  218|   906k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|   235k|    {
   31|   235k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 25.1k, False: 210k]
  ------------------
   32|  25.1k|        {
   33|  25.1k|            return true;
   34|  25.1k|        }
   35|       |
   36|   210k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 210k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|   210k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.85k, False: 208k]
  ------------------
   42|  1.85k|        {
   43|  1.85k|            return true;
   44|  1.85k|        }
   45|       |
   46|   208k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 208k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|   208k|        return false;
   52|   208k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   208k|    {
   56|   208k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 208k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   208k|        const char first_char = token.at(0u);
   62|       |
   63|   208k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 87.0k, False: 121k]
  ------------------
   64|  87.0k|        {
   65|  87.0k|            return phi::is_alpha(first_char);
   66|  87.0k|        }
   67|       |
   68|   121k|        phi::boolean just_under_scores = (first_char == '_');
   69|   121k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 23.4k, False: 98.0k]
  |  Branch (69:13): [True: 23.2k, False: 98.1k]
  |  Branch (69:43): [True: 23.2k, False: 174]
  ------------------
   70|  23.2k|        {
   71|  23.2k|            return false;
   72|  23.2k|        }
   73|       |
   74|   355k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 273k, False: 81.7k]
  ------------------
   75|   273k|        {
   76|   273k|            const char c{token.at(index)};
   77|       |
   78|   273k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 150k, False: 122k]
  ------------------
   79|   150k|            {
   80|   150k|                just_under_scores = false;
   81|   150k|            }
   82|   122k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 106k, False: 16.4k]
  ------------------
   83|   106k|            {
   84|   106k|                continue;
   85|   106k|            }
   86|  16.4k|            else
   87|  16.4k|            {
   88|  16.4k|                return false;
   89|  16.4k|            }
   90|   273k|        }
   91|       |
   92|  81.7k|        return !just_under_scores;
   93|  98.1k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  2.04M|    {
  100|  2.04M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 2.04M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  2.04M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 202k, False: 1.83M]
  ------------------
  106|   202k|        {
  107|   202k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 95.7k, False: 106k]
  ------------------
  108|  95.7k|            {
  109|  95.7k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  95.7k|            }
  111|       |
  112|   106k|            return {};
  113|   202k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  1.83M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 18.0k, False: 1.81M]
  ------------------
  117|  18.0k|        {
  118|  18.0k|            return {};
  119|  18.0k|        }
  120|       |
  121|  1.81M|        std::int32_t number{0};
  122|  1.81M|        phi::boolean is_negative{false};
  123|  1.81M|        phi::boolean starts_with_zero{false};
  124|  1.81M|        phi::boolean parsing_binary{false};
  125|  1.81M|        phi::boolean parsing_octal{false};
  126|  1.81M|        phi::boolean parsing_hexadecimal{false};
  127|  1.81M|        phi::boolean parsed_something{false};
  128|  1.81M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  1.98M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 1.96M, False: 25.1k]
  ------------------
  133|  1.96M|        {
  134|  1.96M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  1.96M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 1.81M, False: 144k]
  ------------------
  138|  1.81M|            {
  139|  1.81M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 1.55k, False: 1.81M]
  ------------------
  140|  1.55k|                {
  141|  1.55k|                    continue;
  142|  1.55k|                }
  143|       |
  144|  1.81M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 31.8k, False: 1.78M]
  ------------------
  145|  31.8k|                {
  146|  31.8k|                    is_negative = true;
  147|  31.8k|                    continue;
  148|  31.8k|                }
  149|       |
  150|  1.78M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 77.2k, False: 1.70M]
  ------------------
  151|  77.2k|                {
  152|  77.2k|                    starts_with_zero = true;
  153|  77.2k|                    continue;
  154|  77.2k|                }
  155|       |
  156|  1.70M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 243, False: 1.70M]
  ------------------
  157|    243|                {
  158|    243|                    return {};
  159|    243|                }
  160|  1.70M|            }
  161|       |
  162|       |            // Second character
  163|  1.85M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 113k, False: 1.73M]
  ------------------
  164|   113k|            {
  165|   113k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 77.2k, False: 36.0k]
  ------------------
  166|  77.2k|                {
  167|       |                    // Binary
  168|  77.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 1.68k, False: 75.5k]
  |  Branch (168:37): [True: 4.08k, False: 71.5k]
  ------------------
  169|  5.76k|                    {
  170|  5.76k|                        parsing_binary = true;
  171|  5.76k|                        continue;
  172|  5.76k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  71.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 13.9k, False: 57.5k]
  |  Branch (175:37): [True: 1.45k, False: 56.0k]
  ------------------
  176|  15.4k|                    {
  177|  15.4k|                        parsing_hexadecimal = true;
  178|  15.4k|                        continue;
  179|  15.4k|                    }
  180|       |
  181|       |                    // Octal
  182|  56.0k|                    parsing_octal = true;
  183|  56.0k|                }
  184|   113k|            }
  185|       |
  186|       |            // Handle seperators
  187|  1.83M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 142, False: 1.83M]
  ------------------
  188|    142|            {
  189|    142|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 69, False: 73]
  ------------------
  190|     69|                {
  191|     69|                    return {};
  192|     69|                }
  193|       |
  194|     73|                parsed_separator = true;
  195|     73|                continue;
  196|    142|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  1.83M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 31.8k, False: 1.80M]
  |  Branch (199:32): [True: 0, False: 31.8k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  1.83M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 1.80M, False: 31.8k]
  |  Branch (204:17): [True: 0, False: 1.83M]
  |  Branch (204:33): [True: 0, False: 1.80M]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  1.83M|            parsed_separator = false;
  211|  1.83M|            parsed_something = true;
  212|       |
  213|  1.83M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 4.22k, False: 1.82M]
  ------------------
  214|  4.22k|            {
  215|  4.22k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 4.09k, False: 135]
  ------------------
  216|  4.09k|                {
  217|  4.09k|                    return {};
  218|  4.09k|                }
  219|       |
  220|    135|                number <<= 1;
  221|    135|                number |= (c - '0');
  222|    135|            }
  223|  1.82M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 65.3k, False: 1.76M]
  ------------------
  224|  65.3k|            {
  225|  65.3k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 49.8k, False: 15.4k]
  ------------------
  226|  49.8k|                {
  227|  49.8k|                    return {};
  228|  49.8k|                }
  229|       |
  230|  15.4k|                number <<= 3;
  231|  15.4k|                number |= (c - '0');
  232|  15.4k|            }
  233|  1.76M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 15.7k, False: 1.74M]
  ------------------
  234|  15.7k|            {
  235|  15.7k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 1.55k, False: 14.1k]
  ------------------
  236|  1.55k|                {
  237|  1.55k|                    return {};
  238|  1.55k|                }
  239|       |
  240|  14.1k|                number <<= 4;
  241|  14.1k|                number |= phi::hex_digit_value(c).unsafe();
  242|  14.1k|            }
  243|  1.74M|            else
  244|  1.74M|            {
  245|  1.74M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 1.71M, False: 35.1k]
  ------------------
  246|  1.71M|                {
  247|  1.71M|                    return {};
  248|  1.71M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  35.1k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 32.7k, False: 2.37k]
  |  Branch (251:36): [True: 27.5k, False: 5.25k]
  ------------------
  252|  27.5k|                {
  253|  27.5k|                    return {};
  254|  27.5k|                }
  255|       |
  256|  7.63k|                number *= 10;
  257|  7.63k|                number += (c - '0');
  258|  7.63k|            }
  259|  1.83M|        }
  260|       |
  261|  25.1k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 23.4k, False: 1.66k]
  ------------------
  262|  23.4k|        {
  263|       |            // Check for over/underflow
  264|  23.4k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 2.59k, False: 20.8k]
  |  Branch (264:32): [True: 0, False: 2.59k]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  23.4k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 20.8k, False: 2.59k]
  |  Branch (269:17): [True: 0, False: 23.4k]
  |  Branch (269:33): [True: 0, False: 20.8k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  23.4k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.59k, False: 20.8k]
  ------------------
  276|  2.59k|            {
  277|  2.59k|                return static_cast<std::int16_t>(-number);
  278|  2.59k|            }
  279|       |
  280|  20.8k|            return static_cast<std::int16_t>(number);
  281|  23.4k|        }
  282|       |
  283|  1.66k|        return {};
  284|  25.1k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   95|   202k|    {
   96|   202k|        switch (value)
   97|   202k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  39.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  39.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 39.5k, False: 162k]
  |  |  |  |  ------------------
  |  |  |  |  100|  39.5k|        return #name;
  |  |  ------------------
  |  |   14|  66.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  66.8k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 66.8k, False: 135k]
  |  |  |  |  ------------------
  |  |  |  |  100|  66.8k|        return #name;
  |  |  ------------------
  |  |   15|  66.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    310|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 310, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    310|        return #name;
  |  |  ------------------
  |  |   16|  6.09k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.09k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.09k, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.09k|        return #name;
  |  |  ------------------
  |  |   17|  6.09k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    127|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 127, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    127|        return #name;
  |  |  ------------------
  |  |   18|    240|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    240|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 240, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    240|        return #name;
  |  |  ------------------
  |  |   19|    975|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    975|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 975, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    975|        return #name;
  |  |  ------------------
  |  |   20|    975|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    958|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 958, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    958|        return #name;
  |  |  ------------------
  |  |   21|  12.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  12.8k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12.8k, False: 189k]
  |  |  |  |  ------------------
  |  |  |  |  100|  12.8k|        return #name;
  |  |  ------------------
  |  |   22|  12.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.45k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.45k, False: 199k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.45k|        return #name;
  |  |  ------------------
  |  |   23|  3.45k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    663|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 663, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    663|        return #name;
  |  |  ------------------
  |  |   24|    663|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    265|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 265, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    265|        return #name;
  |  |  ------------------
  |  |   25|    265|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     71|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 71, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     71|        return #name;
  |  |  ------------------
  |  |   26|     71|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   27|    258|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    258|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 258, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    258|        return #name;
  |  |  ------------------
  |  |   28|    327|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    327|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 327, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    327|        return #name;
  |  |  ------------------
  |  |   29|    934|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    934|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 934, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    934|        return #name;
  |  |  ------------------
  |  |   30|  14.6k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  14.6k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 14.6k, False: 187k]
  |  |  |  |  ------------------
  |  |  |  |  100|  14.6k|        return #name;
  |  |  ------------------
  |  |   31|  14.6k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    331|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 331, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    331|        return #name;
  |  |  ------------------
  |  |   32|    694|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    694|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 694, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    694|        return #name;
  |  |  ------------------
  |  |   33|  1.74k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.74k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.74k, False: 200k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.74k|        return #name;
  |  |  ------------------
  |  |   34|  1.74k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.02k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.02k, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.02k|        return #name;
  |  |  ------------------
  |  |   35|  5.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.04k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.04k, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.04k|        return #name;
  |  |  ------------------
  |  |   36|  5.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    733|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 733, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    733|        return #name;
  |  |  ------------------
  |  |   37|  10.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  10.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10.7k, False: 191k]
  |  |  |  |  ------------------
  |  |  |  |  100|  10.7k|        return #name;
  |  |  ------------------
  |  |   38|  10.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    650|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 650, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    650|        return #name;
  |  |  ------------------
  |  |   39|    650|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     70|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 70, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     70|        return #name;
  |  |  ------------------
  |  |   40|  14.2k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  14.2k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 14.2k, False: 188k]
  |  |  |  |  ------------------
  |  |  |  |  100|  14.2k|        return #name;
  |  |  ------------------
  |  |   41|  14.2k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|    612|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 612, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    612|        return #name;
  |  |  ------------------
  |  |   42|    897|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    897|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 897, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    897|        return #name;
  |  |  ------------------
  |  |   43|    897|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    226|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 226, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    226|        return #name;
  |  |  ------------------
  |  |   44|  16.9k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  16.9k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 16.9k, False: 185k]
  |  |  |  |  ------------------
  |  |  |  |  100|  16.9k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 202k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   202k|        }
  109|   202k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  130|  71.2k|    {
  131|  71.2k|        switch (value)
  132|  71.2k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.20k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.20k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.20k, False: 68.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.20k|        return #name;
  |  |  ------------------
  |  |   48|  6.93k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  6.93k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.93k, False: 64.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.93k|        return #name;
  |  |  ------------------
  |  |   49|  17.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  17.5k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 17.5k, False: 53.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  17.5k|        return #name;
  |  |  ------------------
  |  |   50|  17.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|    813|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 813, False: 70.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    813|        return #name;
  |  |  ------------------
  |  |   51|    813|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     51|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 51, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     51|        return #name;
  |  |  ------------------
  |  |   52|    347|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|    347|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 347, False: 70.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    347|        return #name;
  |  |  ------------------
  |  |   53|    347|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   54|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   55|  1.96k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.96k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.96k, False: 69.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.96k|        return #name;
  |  |  ------------------
  |  |   56|  1.96k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   57|  18.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  18.4k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18.4k, False: 52.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  18.4k|        return #name;
  |  |  ------------------
  |  |   58|  18.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|  1.60k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.60k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.60k, False: 69.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.60k|        return #name;
  |  |  ------------------
  |  |   60|  1.60k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|    418|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 418, False: 70.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    418|        return #name;
  |  |  ------------------
  |  |   61|    418|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    264|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 264, False: 71.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|    264|        return #name;
  |  |  ------------------
  |  |   62|    264|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   63|    480|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    480|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 480, False: 70.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    480|        return #name;
  |  |  ------------------
  |  |   64|    480|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|    153|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|    153|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 153, False: 71.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    153|        return #name;
  |  |  ------------------
  |  |   67|    153|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   68|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|    166|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 166, False: 71.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    166|        return #name;
  |  |  ------------------
  |  |   71|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     65|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 65, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     65|        return #name;
  |  |  ------------------
  |  |   73|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     57|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     57|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 57, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     57|        return #name;
  |  |  ------------------
  |  |   75|     57|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   76|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   77|  18.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  18.5k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18.5k, False: 52.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  18.5k|        return #name;
  |  |  ------------------
  |  |   78|  18.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    123|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 123, False: 71.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    123|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 71.2k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  71.2k|        }
  144|  71.2k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   127k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   127k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.19M, False: 0]
  ------------------
   64|  2.19M|            {
   65|  2.19M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 127k, False: 2.07M]
  ------------------
   66|   127k|                {
   67|   127k|                    return &token;
   68|   127k|                }
   69|  2.19M|            }
   70|       |
   71|      0|            return nullptr;
   72|   127k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.79M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.79M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.79M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.80M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.80M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.80M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   405k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   405k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   405k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   348k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  92.9k|    {
   25|  92.9k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  92.9k|        switch (argument_number.unsafe())
   28|  92.9k|        {
   29|  74.5k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 74.5k, False: 18.4k]
  ------------------
   30|  74.5k|                m_Arg1 = argument;
   31|  74.5k|                break;
   32|  17.9k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 17.9k, False: 75.0k]
  ------------------
   33|  17.9k|                m_Arg2 = argument;
   34|  17.9k|                break;
   35|    513|            case 2u:
  ------------------
  |  Branch (35:13): [True: 513, False: 92.4k]
  ------------------
   36|    513|                m_Arg3 = argument;
   37|    513|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 92.9k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  92.9k|#endif
   42|  92.9k|        }
   43|  92.9k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.13M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  45.9k|    {
  171|  45.9k|        InstructionArgument arg;
  172|  45.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  45.9k|        arg.register_int.register_id = id;
  174|  45.9k|        return arg;
  175|  45.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    178|    {
  179|    178|        InstructionArgument arg;
  180|    178|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    178|        arg.register_float.register_id = id;
  182|    178|        return arg;
  183|    178|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  19.4k|    {
  187|  19.4k|        InstructionArgument arg;
  188|  19.4k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  19.4k|        arg.immediate_value.signed_value = value;
  190|  19.4k|        return arg;
  191|  19.4k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  27.3k|    {
  205|  27.3k|        InstructionArgument arg;
  206|  27.3k|        arg.m_Type           = ArgumentType::Label;
  207|  27.3k|        arg.label.label_name = label_name;
  208|  27.3k|        return arg;
  209|  27.3k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   348k|    {
  453|   348k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   348k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  1.78M|    {
   24|  1.78M|        switch (token.length().unsafe())
   25|  1.78M|        {
   26|       |            // 1 character OpCodes
   27|   194k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 194k, False: 1.59M]
  ------------------
   28|   194k|                const char c1 = token[0u];
   29|       |
   30|   194k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 41.2k, False: 152k]
  ------------------
   31|  41.2k|                {
   32|  41.2k|                    return OpCode::J;
   33|  41.2k|                }
   34|   152k|                break;
   35|   194k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   334k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 334k, False: 1.45M]
  ------------------
   39|   334k|                const char c1 = token[0u];
   40|   334k|                const char c2 = token[1u];
   41|       |
   42|   334k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 127k, False: 207k]
  ------------------
   43|   334k|                {
   44|    131|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 131, False: 334k]
  ------------------
   45|    881|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 750, False: 333k]
  ------------------
   46|    881|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 133, False: 748]
  ------------------
   47|    133|                        {
   48|    133|                            return OpCode::JR;
   49|    133|                        }
   50|    748|                        break;
   51|       |
   52|  32.1k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 32.1k, False: 302k]
  ------------------
   53|  42.0k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 9.85k, False: 324k]
  ------------------
   54|  42.0k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 1.38k, False: 40.6k]
  ------------------
   55|  42.0k|                        {
   56|  7.18k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 7.18k, False: 34.8k]
  ------------------
   57|  10.1k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 3.01k, False: 39.0k]
  ------------------
   58|  10.1k|                                return OpCode::LB;
   59|  11.9k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 11.9k, False: 30.0k]
  ------------------
   60|  12.1k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 130, False: 41.8k]
  ------------------
   61|  12.1k|                                return OpCode::LD;
   62|     66|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 66, False: 41.9k]
  ------------------
   63|    132|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 66, False: 41.9k]
  ------------------
   64|    132|                                return OpCode::LF;
   65|  12.4k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 12.4k, False: 29.6k]
  ------------------
   66|  12.4k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 66, False: 41.9k]
  ------------------
   67|  12.4k|                                return OpCode::LH;
   68|    217|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 217, False: 41.8k]
  ------------------
   69|  5.72k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 5.51k, False: 36.5k]
  ------------------
   70|  5.72k|                                return OpCode::LW;
   71|  42.0k|                        }
   72|  1.38k|                        break;
   73|  48.8k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 48.8k, False: 285k]
  ------------------
   74|  49.0k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 201, False: 334k]
  ------------------
   75|  49.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 5.61k, False: 43.4k]
  ------------------
   76|  5.61k|                        {
   77|  5.61k|                            return OpCode::OR;
   78|  5.61k|                        }
   79|  43.4k|                        break;
   80|  60.6k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 60.6k, False: 273k]
  ------------------
   81|   115k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 54.4k, False: 280k]
  ------------------
   82|   115k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 77.3k, False: 37.7k]
  ------------------
   83|   115k|                        {
   84|    173|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 173, False: 114k]
  ------------------
   85|    239|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 66, False: 115k]
  ------------------
   86|    239|                                return OpCode::SB;
   87|    996|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 996, False: 114k]
  ------------------
   88|  5.69k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 4.69k, False: 110k]
  ------------------
   89|  5.69k|                                return OpCode::SD;
   90|    230|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 230, False: 114k]
  ------------------
   91|  8.87k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 8.64k, False: 106k]
  ------------------
   92|  8.87k|                                return OpCode::SF;
   93|  22.5k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 22.5k, False: 92.5k]
  ------------------
   94|  22.5k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 66, False: 115k]
  ------------------
   95|  22.5k|                                return OpCode::SH;
   96|    286|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 286, False: 114k]
  ------------------
   97|    356|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 70, False: 115k]
  ------------------
   98|    356|                                return OpCode::SW;
   99|   115k|                        }
  100|  77.3k|                        break;
  101|   334k|                }
  102|   250k|                break;
  103|   334k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   530k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 530k, False: 1.25M]
  ------------------
  107|   530k|                const char c1 = token[0u];
  108|   530k|                const char c2 = token[1u];
  109|   530k|                const char c3 = token[2u];
  110|       |
  111|   530k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 51.3k, False: 479k]
  ------------------
  112|   530k|                {
  113|   158k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 158k, False: 372k]
  ------------------
  114|   180k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 22.1k, False: 508k]
  ------------------
  115|   180k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 152k, False: 28.1k]
  |  Branch (115:29): [True: 152k, False: 28.2k]
  |  Branch (115:45): [True: 152k, False: 83]
  ------------------
  116|   152k|                        {
  117|   152k|                            return OpCode::ADD;
  118|   152k|                        }
  119|  28.2k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 27.8k, False: 375]
  |  Branch (119:34): [True: 15.9k, False: 12.3k]
  |  Branch (119:50): [True: 15.9k, False: 11.9k]
  ------------------
  120|  15.9k|                        {
  121|  15.9k|                            return OpCode::AND;
  122|  15.9k|                        }
  123|  12.3k|                        break;
  124|       |
  125|  13.0k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 13.0k, False: 517k]
  ------------------
  126|  13.0k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 75, False: 530k]
  ------------------
  127|  13.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 12.9k, False: 133]
  |  Branch (127:29): [True: 12.8k, False: 199]
  |  Branch (127:45): [True: 12.8k, False: 66]
  ------------------
  128|  12.8k|                        {
  129|  12.8k|                            return OpCode::DIV;
  130|  12.8k|                        }
  131|    199|                        break;
  132|       |
  133|  1.06k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 1.06k, False: 529k]
  ------------------
  134|  1.43k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 372, False: 530k]
  ------------------
  135|  1.43k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.10k, False: 323]
  ------------------
  136|  1.10k|                        {
  137|  1.10k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 133, False: 976]
  ------------------
  138|    133|                            {
  139|    133|                                return OpCode::EQD;
  140|    133|                            }
  141|    976|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 641, False: 335]
  ------------------
  142|    641|                            {
  143|    641|                                return OpCode::EQF;
  144|    641|                            }
  145|  1.10k|                        }
  146|    658|                        break;
  147|       |
  148|  57.4k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 57.4k, False: 473k]
  ------------------
  149|  68.9k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 11.5k, False: 519k]
  ------------------
  150|  68.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 37.4k, False: 31.5k]
  ------------------
  151|  37.4k|                        {
  152|  37.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 25.9k, False: 11.4k]
  ------------------
  153|  25.9k|                            {
  154|  25.9k|                                return OpCode::GED;
  155|  25.9k|                            }
  156|  11.4k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 11.4k, False: 73]
  ------------------
  157|  11.4k|                            {
  158|  11.4k|                                return OpCode::GEF;
  159|  11.4k|                            }
  160|  37.4k|                        }
  161|  31.5k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 31.3k, False: 186]
  ------------------
  162|  31.3k|                        {
  163|  31.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 10.3k, False: 20.9k]
  ------------------
  164|  10.3k|                            {
  165|  10.3k|                                return OpCode::GTD;
  166|  10.3k|                            }
  167|  20.9k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 13.2k, False: 7.66k]
  ------------------
  168|  13.2k|                            {
  169|  13.2k|                                return OpCode::GTF;
  170|  13.2k|                            }
  171|  20.9k|                        }
  172|  7.92k|                        break;
  173|       |
  174|  7.92k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 93, False: 530k]
  ------------------
  175|    595|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 502, False: 530k]
  ------------------
  176|    595|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 484, False: 111]
  |  Branch (176:29): [True: 149, False: 446]
  |  Branch (176:45): [True: 149, False: 335]
  ------------------
  177|    149|                        {
  178|    149|                            return OpCode::JAL;
  179|    149|                        }
  180|    446|                        break;
  181|       |
  182|  6.71k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 6.71k, False: 523k]
  ------------------
  183|  18.8k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 12.1k, False: 518k]
  ------------------
  184|  18.8k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 90, False: 18.7k]
  ------------------
  185|  18.8k|                        {
  186|    119|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 119, False: 18.7k]
  ------------------
  187|  10.2k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 10.0k, False: 8.75k]
  ------------------
  188|  10.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 486, False: 9.72k]
  ------------------
  189|    486|                                {
  190|    486|                                    return OpCode::LBU;
  191|    486|                                }
  192|  9.72k|                                break;
  193|       |
  194|  9.72k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 5.61k, False: 13.2k]
  ------------------
  195|  5.80k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 184, False: 18.6k]
  ------------------
  196|  5.80k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 1.16k, False: 4.64k]
  ------------------
  197|  1.16k|                                {
  198|  1.16k|                                    return OpCode::LED;
  199|  1.16k|                                }
  200|  4.64k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 4.57k, False: 66]
  ------------------
  201|  4.57k|                                {
  202|  4.57k|                                    return OpCode::LEF;
  203|  4.57k|                                }
  204|     66|                                break;
  205|       |
  206|    253|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 253, False: 18.5k]
  ------------------
  207|  1.07k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 820, False: 18.0k]
  ------------------
  208|  1.07k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 151, False: 922]
  ------------------
  209|    151|                                {
  210|    151|                                    return OpCode::LHI;
  211|    151|                                }
  212|    922|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 856, False: 66]
  ------------------
  213|    856|                                {
  214|    856|                                    return OpCode::LHU;
  215|    856|                                }
  216|     66|                                break;
  217|       |
  218|    614|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 614, False: 18.2k]
  ------------------
  219|    809|                            case 't':
  ------------------
  |  Branch (219:29): [True: 195, False: 18.6k]
  ------------------
  220|    809|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 419, False: 390]
  ------------------
  221|    419|                                {
  222|    419|                                    return OpCode::LTD;
  223|    419|                                }
  224|    390|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 314, False: 76]
  ------------------
  225|    314|                                {
  226|    314|                                    return OpCode::LTF;
  227|    314|                                }
  228|     76|                                break;
  229|       |
  230|     78|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 78, False: 18.7k]
  ------------------
  231|    861|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 783, False: 18.0k]
  ------------------
  232|    861|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 132, False: 729]
  ------------------
  233|    132|                                {
  234|    132|                                    return OpCode::LWU;
  235|    132|                                }
  236|    729|                                break;
  237|  18.8k|                        }
  238|  10.7k|                        break;
  239|       |
  240|  10.7k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 7.61k, False: 523k]
  ------------------
  241|  29.7k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 22.1k, False: 508k]
  ------------------
  242|  29.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 5.92k, False: 23.7k]
  ------------------
  243|  5.92k|                        {
  244|  5.92k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 145, False: 5.78k]
  ------------------
  245|    145|                            {
  246|    145|                                return OpCode::NED;
  247|    145|                            }
  248|  5.78k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 144, False: 5.64k]
  ------------------
  249|    144|                            {
  250|    144|                                return OpCode::NEF;
  251|    144|                            }
  252|  5.92k|                        }
  253|  23.7k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 17.1k, False: 6.65k]
  |  Branch (253:34): [True: 1.82k, False: 21.9k]
  |  Branch (253:50): [True: 1.82k, False: 15.3k]
  ------------------
  254|  1.82k|                        {
  255|  1.82k|                            return OpCode::NOP;
  256|  1.82k|                        }
  257|       |
  258|  27.6k|                        break;
  259|       |
  260|  27.6k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 1.83k, False: 528k]
  ------------------
  261|  1.91k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 80, False: 530k]
  ------------------
  262|  1.91k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 799, False: 1.11k]
  |  Branch (262:29): [True: 154, False: 1.76k]
  |  Branch (262:45): [True: 154, False: 645]
  ------------------
  263|    154|                        {
  264|    154|                            return OpCode::ORI;
  265|    154|                        }
  266|  1.76k|                        break;
  267|       |
  268|   145k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 145k, False: 385k]
  ------------------
  269|   147k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 2.30k, False: 528k]
  ------------------
  270|   147k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 619, False: 146k]
  ------------------
  271|   147k|                        {
  272|  7.42k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 7.42k, False: 139k]
  ------------------
  273|  7.99k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 571, False: 146k]
  ------------------
  274|  7.99k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 7.49k, False: 505]
  ------------------
  275|  7.49k|                                {
  276|  7.49k|                                    return OpCode::SBU;
  277|  7.49k|                                }
  278|    505|                                break;
  279|       |
  280|    505|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 187, False: 147k]
  ------------------
  281|  28.1k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 27.9k, False: 119k]
  ------------------
  282|  28.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 23.0k, False: 5.08k]
  ------------------
  283|  23.0k|                                {
  284|  23.0k|                                    return OpCode::SEQ;
  285|  23.0k|                                }
  286|  5.08k|                                break;
  287|       |
  288|  5.08k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 675, False: 146k]
  ------------------
  289|  1.18k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 506, False: 146k]
  ------------------
  290|  1.18k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 357, False: 824]
  ------------------
  291|    357|                                {
  292|    357|                                    return OpCode::SGE;
  293|    357|                                }
  294|    824|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 614, False: 210]
  ------------------
  295|    614|                                {
  296|    614|                                    return OpCode::SGT;
  297|    614|                                }
  298|    210|                                break;
  299|       |
  300|  13.5k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 13.5k, False: 133k]
  ------------------
  301|  13.8k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 390, False: 147k]
  ------------------
  302|  13.8k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 13.5k, False: 327]
  ------------------
  303|  13.5k|                                {
  304|  13.5k|                                    return OpCode::SHU;
  305|  13.5k|                                }
  306|    327|                                break;
  307|       |
  308|  40.3k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 40.3k, False: 107k]
  ------------------
  309|  40.6k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 310, False: 147k]
  ------------------
  310|  40.6k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 67, False: 40.5k]
  ------------------
  311|  40.6k|                                {
  312|  22.2k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 22.2k, False: 18.3k]
  ------------------
  313|  22.3k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 69, False: 40.5k]
  ------------------
  314|  22.3k|                                        return OpCode::SLA;
  315|       |
  316|  13.6k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 13.6k, False: 26.9k]
  ------------------
  317|  13.7k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 70, False: 40.5k]
  ------------------
  318|  13.7k|                                        return OpCode::SLE;
  319|       |
  320|  4.16k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 4.16k, False: 36.4k]
  ------------------
  321|  4.23k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 70, False: 40.5k]
  ------------------
  322|  4.23k|                                        return OpCode::SLL;
  323|       |
  324|    149|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 149, False: 40.4k]
  ------------------
  325|    232|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 83, False: 40.5k]
  ------------------
  326|    232|                                        return OpCode::SLT;
  327|  40.6k|                                }
  328|     67|                                break;
  329|       |
  330|    212|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 212, False: 147k]
  ------------------
  331|    376|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 164, False: 147k]
  ------------------
  332|    376|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 308, False: 68]
  ------------------
  333|    308|                                {
  334|    308|                                    return OpCode::SNE;
  335|    308|                                }
  336|     68|                                break;
  337|       |
  338|  17.1k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 17.1k, False: 130k]
  ------------------
  339|  45.5k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 28.4k, False: 118k]
  ------------------
  340|  45.5k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 14.5k, False: 31.0k]
  ------------------
  341|  14.5k|                                {
  342|  14.5k|                                    return OpCode::SRA;
  343|  14.5k|                                }
  344|  31.0k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 2.76k, False: 28.2k]
  ------------------
  345|  2.76k|                                {
  346|  2.76k|                                    return OpCode::SRL;
  347|  2.76k|                                }
  348|  28.2k|                                break;
  349|       |
  350|  28.2k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 7.32k, False: 140k]
  ------------------
  351|  8.03k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 717, False: 146k]
  ------------------
  352|  8.03k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 7.52k, False: 515]
  ------------------
  353|  7.52k|                                {
  354|  7.52k|                                    return OpCode::SUB;
  355|  7.52k|                                }
  356|    515|                                break;
  357|       |
  358|    701|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 701, False: 146k]
  ------------------
  359|    974|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 273, False: 147k]
  ------------------
  360|    974|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 708, False: 266]
  ------------------
  361|    708|                                {
  362|    708|                                    return OpCode::SWU;
  363|    708|                                }
  364|    266|                                break;
  365|   147k|                        }
  366|       |
  367|  37.7k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 1.88k, False: 528k]
  ------------------
  368|  52.7k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 14.9k, False: 515k]
  ------------------
  369|  52.7k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.91k, False: 50.8k]
  |  Branch (369:29): [True: 1.84k, False: 50.8k]
  |  Branch (369:45): [True: 1.84k, False: 74]
  ------------------
  370|  1.84k|                        {
  371|  1.84k|                            return OpCode::XOR;
  372|  1.84k|                        }
  373|  50.8k|                        break;
  374|   530k|                }
  375|   163k|                break;
  376|   530k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|   455k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 455k, False: 1.33M]
  ------------------
  380|   455k|                const char c1 = token[0u];
  381|   455k|                const char c2 = token[1u];
  382|   455k|                const char c3 = token[2u];
  383|   455k|                const char c4 = token[3u];
  384|       |
  385|   455k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 32.6k, False: 422k]
  ------------------
  386|   455k|                {
  387|  80.3k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 80.3k, False: 375k]
  ------------------
  388|  84.6k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 4.26k, False: 451k]
  ------------------
  389|  84.6k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 76, False: 84.5k]
  ------------------
  390|  84.6k|                        {
  391|  83.1k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 83.1k, False: 1.43k]
  ------------------
  392|  83.3k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 157, False: 84.4k]
  ------------------
  393|  83.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 79.2k, False: 4.03k]
  ------------------
  394|  79.2k|                                {
  395|  79.2k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 66, False: 79.2k]
  ------------------
  396|  79.2k|                                    {
  397|  14.4k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 14.4k, False: 64.8k]
  ------------------
  398|  14.5k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 79.2k]
  ------------------
  399|  14.5k|                                            return OpCode::ADDD;
  400|       |
  401|  14.3k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 14.3k, False: 64.9k]
  ------------------
  402|  14.4k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 66, False: 79.2k]
  ------------------
  403|  14.4k|                                            return OpCode::ADDF;
  404|       |
  405|  16.4k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 16.4k, False: 62.8k]
  ------------------
  406|  16.5k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 79.2k]
  ------------------
  407|  16.5k|                                            return OpCode::ADDI;
  408|       |
  409|  33.6k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 33.6k, False: 45.6k]
  ------------------
  410|  33.7k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 79.2k]
  ------------------
  411|  33.7k|                                            return OpCode::ADDU;
  412|  79.2k|                                    }
  413|  79.2k|                                }
  414|  4.10k|                                break;
  415|       |
  416|  4.10k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 894, False: 83.7k]
  ------------------
  417|  1.20k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 307, False: 84.2k]
  ------------------
  418|  1.20k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 998, False: 203]
  |  Branch (418:37): [True: 926, False: 275]
  |  Branch (418:53): [True: 926, False: 72]
  ------------------
  419|    926|                                {
  420|    926|                                    return OpCode::ANDI;
  421|    926|                                }
  422|       |
  423|    275|                                break;
  424|  84.6k|                        }
  425|  4.45k|                        break;
  426|       |
  427|  87.4k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 87.4k, False: 367k]
  ------------------
  428|  97.7k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 10.2k, False: 445k]
  ------------------
  429|  97.7k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 318, False: 97.4k]
  ------------------
  430|  97.7k|                        {
  431|    268|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 268, False: 97.5k]
  ------------------
  432|  9.81k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 9.55k, False: 88.2k]
  ------------------
  433|  9.81k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 4.39k, False: 5.42k]
  |  Branch (433:37): [True: 4.24k, False: 5.57k]
  |  Branch (433:53): [True: 4.24k, False: 150]
  ------------------
  434|  4.24k|                                {
  435|  4.24k|                                    return OpCode::BEQZ;
  436|  4.24k|                                }
  437|  5.57k|                                break;
  438|       |
  439|  77.3k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 77.3k, False: 20.4k]
  ------------------
  440|  77.6k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 265, False: 97.5k]
  ------------------
  441|  77.6k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 77.5k, False: 66]
  ------------------
  442|  77.5k|                                {
  443|  77.5k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 25.2k, False: 52.3k]
  ------------------
  444|  25.2k|                                    {
  445|  25.2k|                                        return OpCode::BFPF;
  446|  25.2k|                                    }
  447|  52.3k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 52.2k, False: 66]
  ------------------
  448|  52.2k|                                    {
  449|  52.2k|                                        return OpCode::BFPT;
  450|  52.2k|                                    }
  451|  77.5k|                                }
  452|    132|                                break;
  453|       |
  454|  9.85k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 9.85k, False: 87.9k]
  ------------------
  455|  10.0k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 198, False: 97.5k]
  ------------------
  456|  10.0k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 9.98k, False: 66]
  |  Branch (456:37): [True: 9.91k, False: 132]
  |  Branch (456:53): [True: 9.91k, False: 66]
  ------------------
  457|  9.91k|                                {
  458|  9.91k|                                    return OpCode::BNEZ;
  459|  9.91k|                                }
  460|  97.7k|                        }
  461|  6.16k|                        break;
  462|       |
  463|  17.8k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 17.8k, False: 437k]
  ------------------
  464|  18.0k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 114, False: 455k]
  ------------------
  465|  18.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 17.8k, False: 118]
  |  Branch (465:29): [True: 17.8k, False: 184]
  |  Branch (465:45): [True: 17.8k, False: 66]
  ------------------
  466|  17.8k|                        {
  467|  17.8k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 105, False: 17.7k]
  ------------------
  468|  17.8k|                            {
  469|  9.00k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 9.00k, False: 8.81k]
  ------------------
  470|  9.07k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 17.7k]
  ------------------
  471|  9.07k|                                    return OpCode::DIVD;
  472|       |
  473|     70|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 70, False: 17.7k]
  ------------------
  474|    136|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 17.7k]
  ------------------
  475|    136|                                    return OpCode::DIVF;
  476|       |
  477|  2.04k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 2.04k, False: 15.7k]
  ------------------
  478|  2.11k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 66, False: 17.7k]
  ------------------
  479|  2.11k|                                    return OpCode::DIVI;
  480|       |
  481|  6.30k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 6.30k, False: 11.5k]
  ------------------
  482|  6.39k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 98, False: 17.7k]
  ------------------
  483|  6.39k|                                    return OpCode::DIVU;
  484|  17.8k|                            }
  485|  17.8k|                        }
  486|    289|                        break;
  487|       |
  488|    289|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 103, False: 455k]
  ------------------
  489|  11.5k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 11.4k, False: 444k]
  ------------------
  490|  11.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 11.3k, False: 228]
  |  Branch (490:29): [True: 149, False: 11.4k]
  |  Branch (490:45): [True: 11.2k, False: 66]
  |  Branch (490:61): [True: 149, False: 11.1k]
  ------------------
  491|    149|                        {
  492|    149|                            return OpCode::HALT;
  493|    149|                        }
  494|  11.4k|                        break;
  495|       |
  496|  11.4k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 321, False: 455k]
  ------------------
  497|  2.94k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 2.62k, False: 452k]
  ------------------
  498|  2.94k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 2.61k, False: 336]
  |  Branch (498:29): [True: 165, False: 2.78k]
  |  Branch (498:45): [True: 231, False: 2.38k]
  |  Branch (498:61): [True: 165, False: 66]
  ------------------
  499|    165|                        {
  500|    165|                            return OpCode::JALR;
  501|    165|                        }
  502|  2.78k|                        break;
  503|       |
  504|  21.0k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 21.0k, False: 434k]
  ------------------
  505|  33.8k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 12.8k, False: 442k]
  ------------------
  506|  33.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 18.8k, False: 14.9k]
  |  Branch (506:29): [True: 18.8k, False: 15.0k]
  |  Branch (506:45): [True: 18.8k, False: 66]
  ------------------
  507|  18.8k|                        {
  508|  18.8k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 18.4k, False: 410]
  ------------------
  509|  18.4k|                            {
  510|  18.4k|                                return OpCode::MOVD;
  511|  18.4k|                            }
  512|    410|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 344, False: 66]
  ------------------
  513|    344|                            {
  514|    344|                                return OpCode::MOVF;
  515|    344|                            }
  516|  18.8k|                        }
  517|  15.0k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 14.3k, False: 692]
  |  Branch (517:34): [True: 177, False: 14.8k]
  |  Branch (517:50): [True: 13.9k, False: 413]
  |  Branch (517:66): [True: 177, False: 13.7k]
  ------------------
  518|    177|                        {
  519|    177|                            return OpCode::MULT;
  520|    177|                        }
  521|  14.9k|                        break;
  522|       |
  523|   144k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 144k, False: 311k]
  ------------------
  524|   162k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 17.9k, False: 437k]
  ------------------
  525|   162k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 1.21k, False: 161k]
  ------------------
  526|   162k|                        {
  527|  4.44k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 4.44k, False: 158k]
  ------------------
  528|  14.1k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 9.68k, False: 152k]
  ------------------
  529|  14.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 9.83k, False: 4.29k]
  ------------------
  530|  9.83k|                                {
  531|  9.83k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 8.70k, False: 1.13k]
  ------------------
  532|  8.70k|                                    {
  533|  8.70k|                                        return OpCode::SEQI;
  534|  8.70k|                                    }
  535|  1.13k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 1.05k, False: 81]
  ------------------
  536|  1.05k|                                    {
  537|  1.05k|                                        return OpCode::SEQU;
  538|  1.05k|                                    }
  539|  9.83k|                                }
  540|  4.37k|                                break;
  541|       |
  542|  20.0k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 20.0k, False: 142k]
  ------------------
  543|  35.1k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 15.1k, False: 147k]
  ------------------
  544|  35.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 16.6k, False: 18.5k]
  ------------------
  545|  16.6k|                                {
  546|  16.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 385, False: 16.2k]
  ------------------
  547|    385|                                    {
  548|    385|                                        return OpCode::SGEI;
  549|    385|                                    }
  550|  16.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 16.2k, False: 66]
  ------------------
  551|  16.2k|                                    {
  552|  16.2k|                                        return OpCode::SGEU;
  553|  16.2k|                                    }
  554|  16.6k|                                }
  555|  18.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 18.4k, False: 83]
  ------------------
  556|  18.4k|                                {
  557|  18.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 3.63k, False: 14.8k]
  ------------------
  558|  3.63k|                                    {
  559|  3.63k|                                        return OpCode::SGTI;
  560|  3.63k|                                    }
  561|  14.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 132, False: 14.6k]
  ------------------
  562|    132|                                    {
  563|    132|                                        return OpCode::SGTU;
  564|    132|                                    }
  565|  18.4k|                                }
  566|  14.8k|                                break;
  567|       |
  568|  34.3k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 34.3k, False: 128k]
  ------------------
  569|  35.1k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 766, False: 161k]
  ------------------
  570|  35.1k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 66, False: 35.0k]
  ------------------
  571|  35.1k|                                {
  572|  2.02k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 2.02k, False: 33.1k]
  ------------------
  573|  2.13k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 113, False: 35.0k]
  ------------------
  574|  2.13k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 2.07k, False: 66]
  ------------------
  575|  2.07k|                                        {
  576|  2.07k|                                            return OpCode::SLAI;
  577|  2.07k|                                        }
  578|     66|                                        break;
  579|       |
  580|  23.9k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 23.9k, False: 11.2k]
  ------------------
  581|  24.0k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 164, False: 34.9k]
  ------------------
  582|  24.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 22.4k, False: 1.59k]
  ------------------
  583|  22.4k|                                        {
  584|  22.4k|                                            return OpCode::SLEI;
  585|  22.4k|                                        }
  586|  1.59k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 1.52k, False: 66]
  ------------------
  587|  1.52k|                                        {
  588|  1.52k|                                            return OpCode::SLEU;
  589|  1.52k|                                        }
  590|     66|                                        break;
  591|       |
  592|  5.01k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 5.01k, False: 30.1k]
  ------------------
  593|  5.18k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 165, False: 34.9k]
  ------------------
  594|  5.18k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 5.11k, False: 69]
  ------------------
  595|  5.11k|                                        {
  596|  5.11k|                                            return OpCode::SLLI;
  597|  5.11k|                                        }
  598|     69|                                        break;
  599|       |
  600|  3.53k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 3.53k, False: 31.6k]
  ------------------
  601|  3.67k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 141, False: 35.0k]
  ------------------
  602|  3.67k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 3.46k, False: 206]
  ------------------
  603|  3.46k|                                        {
  604|  3.46k|                                            return OpCode::SLTI;
  605|  3.46k|                                        }
  606|    206|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 140, False: 66]
  ------------------
  607|    140|                                        {
  608|    140|                                            return OpCode::SLTU;
  609|    140|                                        }
  610|     66|                                        break;
  611|  35.1k|                                }
  612|       |
  613|  13.2k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 12.9k, False: 149k]
  ------------------
  614|  21.0k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 7.82k, False: 154k]
  ------------------
  615|  21.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 20.8k, False: 268]
  ------------------
  616|  20.8k|                                {
  617|  20.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 1.21k, False: 19.6k]
  ------------------
  618|  1.21k|                                    {
  619|  1.21k|                                        return OpCode::SNEI;
  620|  1.21k|                                    }
  621|  19.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 19.5k, False: 66]
  ------------------
  622|  19.5k|                                    {
  623|  19.5k|                                        return OpCode::SNEU;
  624|  19.5k|                                    }
  625|  20.8k|                                }
  626|    334|                                break;
  627|       |
  628|    801|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 801, False: 161k]
  ------------------
  629|  1.02k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 228, False: 162k]
  ------------------
  630|  1.02k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 471, False: 558]
  |  Branch (630:37): [True: 404, False: 625]
  |  Branch (630:53): [True: 404, False: 67]
  ------------------
  631|    404|                                {
  632|    404|                                    return OpCode::SRAI;
  633|    404|                                }
  634|    625|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 527, False: 98]
  |  Branch (634:42): [True: 329, False: 296]
  |  Branch (634:58): [True: 329, False: 198]
  ------------------
  635|    329|                                {
  636|    329|                                    return OpCode::SRLI;
  637|    329|                                }
  638|    296|                                break;
  639|       |
  640|  33.1k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 33.1k, False: 129k]
  ------------------
  641|  54.9k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 21.8k, False: 140k]
  ------------------
  642|  54.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 48.1k, False: 6.83k]
  ------------------
  643|  48.1k|                                {
  644|  48.1k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 14.8k, False: 33.3k]
  ------------------
  645|  48.1k|                                    {
  646|    129|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 129, False: 48.0k]
  ------------------
  647|    195|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 48.0k]
  ------------------
  648|    195|                                            return OpCode::SUBD;
  649|       |
  650|  6.47k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 6.47k, False: 41.6k]
  ------------------
  651|  6.53k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 66, False: 48.0k]
  ------------------
  652|  6.53k|                                            return OpCode::SUBF;
  653|       |
  654|  22.7k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 22.7k, False: 25.4k]
  ------------------
  655|  22.8k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 98, False: 48.0k]
  ------------------
  656|  22.8k|                                            return OpCode::SUBI;
  657|       |
  658|  3.67k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 3.67k, False: 44.4k]
  ------------------
  659|  3.74k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 48.0k]
  ------------------
  660|  3.74k|                                            return OpCode::SUBU;
  661|  48.1k|                                    }
  662|  48.1k|                                }
  663|  21.6k|                                break;
  664|   162k|                        }
  665|  42.7k|                        break;
  666|       |
  667|  42.7k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 11.0k, False: 444k]
  ------------------
  668|  11.2k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 122, False: 455k]
  ------------------
  669|  11.2k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 11.1k, False: 66]
  |  Branch (669:29): [True: 10.9k, False: 289]
  |  Branch (669:45): [True: 11.0k, False: 84]
  |  Branch (669:61): [True: 10.9k, False: 139]
  ------------------
  670|  10.9k|                        {
  671|  10.9k|                            return OpCode::TRAP;
  672|  10.9k|                        }
  673|    289|                        break;
  674|    289|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 170, False: 455k]
  ------------------
  675|    419|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 249, False: 455k]
  ------------------
  676|    419|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 265, False: 154]
  |  Branch (676:29): [True: 133, False: 286]
  |  Branch (676:45): [True: 199, False: 66]
  |  Branch (676:61): [True: 133, False: 66]
  ------------------
  677|    133|                        {
  678|    133|                            return OpCode::XORI;
  679|    133|                        }
  680|    286|                        break;
  681|   455k|                }
  682|   115k|                break;
  683|   455k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   174k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 174k, False: 1.61M]
  ------------------
  687|   174k|                const char c1 = token[0u];
  688|   174k|                const char c2 = token[1u];
  689|   174k|                const char c3 = token[2u];
  690|   174k|                const char c4 = token[3u];
  691|   174k|                const char c5 = token[4u];
  692|       |
  693|   174k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 12.3k, False: 161k]
  ------------------
  694|   174k|                {
  695|  38.7k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 38.7k, False: 135k]
  ------------------
  696|  38.7k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 174k]
  ------------------
  697|  38.7k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 38.7k, False: 0]
  |  Branch (697:29): [True: 38.7k, False: 0]
  |  Branch (697:45): [True: 38.7k, False: 0]
  |  Branch (697:61): [True: 38.7k, False: 0]
  |  Branch (697:77): [True: 38.7k, False: 0]
  ------------------
  698|  38.7k|                        {
  699|  38.7k|                            return OpCode::ADDUI;
  700|  38.7k|                        }
  701|      0|                        break;
  702|       |
  703|  20.4k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 20.4k, False: 153k]
  ------------------
  704|  20.4k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 174k]
  ------------------
  705|  20.4k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 20.4k, False: 0]
  |  Branch (705:29): [True: 20.4k, False: 0]
  |  Branch (705:45): [True: 20.4k, False: 0]
  |  Branch (705:61): [True: 20.4k, False: 0]
  |  Branch (705:77): [True: 20.4k, False: 0]
  ------------------
  706|  20.4k|                        {
  707|  20.4k|                            return OpCode::DIVUI;
  708|  20.4k|                        }
  709|      0|                        break;
  710|       |
  711|  20.0k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 20.0k, False: 154k]
  ------------------
  712|  20.0k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 174k]
  ------------------
  713|  20.0k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 20.0k, False: 0]
  |  Branch (713:29): [True: 20.0k, False: 0]
  |  Branch (713:45): [True: 20.0k, False: 0]
  |  Branch (713:61): [True: 20.0k, False: 0]
  ------------------
  714|  20.0k|                        {
  715|  20.0k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 20.0k]
  ------------------
  716|  20.0k|                            {
  717|    215|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 215, False: 19.8k]
  ------------------
  718|    215|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 20.0k]
  ------------------
  719|    215|                                    return OpCode::MULTD;
  720|       |
  721|  19.4k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 19.4k, False: 544]
  ------------------
  722|  19.4k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 20.0k]
  ------------------
  723|  19.4k|                                    return OpCode::MULTF;
  724|       |
  725|    137|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 137, False: 19.8k]
  ------------------
  726|    137|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 20.0k]
  ------------------
  727|    137|                                    return OpCode::MULTI;
  728|       |
  729|    192|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 192, False: 19.8k]
  ------------------
  730|    192|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 20.0k]
  ------------------
  731|    192|                                    return OpCode::MULTU;
  732|  20.0k|                            }
  733|  20.0k|                        }
  734|      0|                        break;
  735|       |
  736|  82.6k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 82.6k, False: 91.5k]
  ------------------
  737|  82.6k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 174k]
  ------------------
  738|  82.6k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 82.6k]
  ------------------
  739|  82.6k|                        {
  740|  25.1k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 25.1k, False: 57.5k]
  ------------------
  741|  25.1k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 82.6k]
  ------------------
  742|  25.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 25.1k, False: 0]
  |  Branch (742:37): [True: 25.1k, False: 0]
  |  Branch (742:53): [True: 25.1k, False: 0]
  |  Branch (742:69): [True: 25.1k, False: 0]
  ------------------
  743|  25.1k|                                {
  744|  25.1k|                                    return OpCode::SEQUI;
  745|  25.1k|                                }
  746|      0|                                break;
  747|       |
  748|  26.0k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 26.0k, False: 56.5k]
  ------------------
  749|  26.0k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 82.6k]
  ------------------
  750|  26.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 15.3k, False: 10.6k]
  |  Branch (750:37): [True: 15.3k, False: 10.6k]
  |  Branch (750:53): [True: 15.3k, False: 0]
  |  Branch (750:69): [True: 15.3k, False: 0]
  ------------------
  751|  15.3k|                                {
  752|  15.3k|                                    return OpCode::SGEUI;
  753|  15.3k|                                }
  754|  10.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 10.6k, False: 0]
  |  Branch (754:42): [True: 10.6k, False: 0]
  |  Branch (754:58): [True: 10.6k, False: 0]
  |  Branch (754:74): [True: 10.6k, False: 0]
  ------------------
  755|  10.6k|                                {
  756|  10.6k|                                    return OpCode::SGTUI;
  757|  10.6k|                                }
  758|      0|                                break;
  759|       |
  760|  20.8k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 20.8k, False: 61.7k]
  ------------------
  761|  20.8k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 82.6k]
  ------------------
  762|  20.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 808, False: 20.0k]
  |  Branch (762:37): [True: 808, False: 20.0k]
  |  Branch (762:53): [True: 808, False: 0]
  |  Branch (762:69): [True: 808, False: 0]
  ------------------
  763|    808|                                {
  764|    808|                                    return OpCode::SLEUI;
  765|    808|                                }
  766|  20.0k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 20.0k, False: 0]
  |  Branch (766:42): [True: 20.0k, False: 0]
  |  Branch (766:58): [True: 20.0k, False: 0]
  |  Branch (766:74): [True: 20.0k, False: 0]
  ------------------
  767|  20.0k|                                {
  768|  20.0k|                                    return OpCode::SLTUI;
  769|  20.0k|                                }
  770|      0|                                break;
  771|       |
  772|     66|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 66, False: 82.5k]
  ------------------
  773|     66|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 82.6k]
  ------------------
  774|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:53): [True: 66, False: 0]
  |  Branch (774:69): [True: 66, False: 0]
  ------------------
  775|     66|                                {
  776|     66|                                    return OpCode::SNEUI;
  777|     66|                                }
  778|      0|                                break;
  779|       |
  780|  10.5k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 10.5k, False: 72.0k]
  ------------------
  781|  10.5k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 82.6k]
  ------------------
  782|  10.5k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 10.5k, False: 0]
  |  Branch (782:37): [True: 10.5k, False: 0]
  |  Branch (782:53): [True: 10.5k, False: 0]
  |  Branch (782:69): [True: 10.5k, False: 0]
  ------------------
  783|  10.5k|                                {
  784|  10.5k|                                    return OpCode::SUBUI;
  785|  10.5k|                                }
  786|      0|                                break;
  787|  82.6k|                        }
  788|       |
  789|      0|                        break;
  790|   174k|                }
  791|       |
  792|  12.3k|                break;
  793|   174k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  42.2k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 42.2k, False: 1.74M]
  ------------------
  797|  42.2k|                const char c1 = token[0u];
  798|  42.2k|                const char c2 = token[1u];
  799|  42.2k|                const char c3 = token[2u];
  800|  42.2k|                const char c4 = token[3u];
  801|  42.2k|                const char c5 = token[4u];
  802|  42.2k|                const char c6 = token[5u];
  803|       |
  804|  42.2k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 17.1k, False: 25.0k]
  |  Branch (804:21): [True: 17.1k, False: 25.0k]
  |  Branch (804:37): [True: 17.1k, False: 0]
  |  Branch (804:53): [True: 17.1k, False: 0]
  ------------------
  805|  17.1k|                {
  806|  17.1k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 17.1k]
  ------------------
  807|  17.1k|                    {
  808|  2.11k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 2.11k, False: 15.0k]
  ------------------
  809|  2.11k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 17.1k]
  ------------------
  810|  2.11k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 2.11k, False: 0]
  ------------------
  811|  2.11k|                            {
  812|  2.11k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 1.22k, False: 889]
  ------------------
  813|  1.22k|                                {
  814|  1.22k|                                    return OpCode::CVTD2F;
  815|  1.22k|                                }
  816|    889|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 889, False: 0]
  ------------------
  817|    889|                                {
  818|    889|                                    return OpCode::CVTD2I;
  819|    889|                                }
  820|  2.11k|                            }
  821|      0|                            break;
  822|       |
  823|  2.55k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 2.55k, False: 14.5k]
  ------------------
  824|  2.55k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 17.1k]
  ------------------
  825|  2.55k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 2.55k, False: 0]
  ------------------
  826|  2.55k|                            {
  827|  2.55k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 781, False: 1.77k]
  ------------------
  828|    781|                                {
  829|    781|                                    return OpCode::CVTF2D;
  830|    781|                                }
  831|  1.77k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 1.77k, False: 0]
  ------------------
  832|  1.77k|                                {
  833|  1.77k|                                    return OpCode::CVTF2I;
  834|  1.77k|                                }
  835|  2.55k|                            }
  836|      0|                            break;
  837|       |
  838|  12.4k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 12.4k, False: 4.66k]
  ------------------
  839|  12.4k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 17.1k]
  ------------------
  840|  12.4k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 12.4k, False: 0]
  ------------------
  841|  12.4k|                            {
  842|  12.4k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 12.3k, False: 136]
  ------------------
  843|  12.3k|                                {
  844|  12.3k|                                    return OpCode::CVTI2D;
  845|  12.3k|                                }
  846|    136|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 136, False: 0]
  ------------------
  847|    136|                                {
  848|    136|                                    return OpCode::CVTI2F;
  849|    136|                                }
  850|  12.4k|                            }
  851|  17.1k|                    }
  852|  17.1k|                }
  853|  25.0k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 16.9k, False: 8.15k]
  |  Branch (853:26): [True: 16.9k, False: 8.15k]
  |  Branch (853:42): [True: 16.9k, False: 0]
  |  Branch (853:58): [True: 16.9k, False: 0]
  |  Branch (853:74): [True: 16.9k, False: 0]
  ------------------
  854|  25.0k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 16.9k, False: 0]
  |  Branch (854:42): [True: 16.9k, False: 0]
  ------------------
  855|  16.9k|                {
  856|  16.9k|                    return OpCode::MULTUI;
  857|  16.9k|                }
  858|  8.15k|                break;
  859|  42.2k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  8.15k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 665, False: 1.78M]
  ------------------
  863|    665|                const char c1 = token[0u];
  864|    665|                const char c2 = token[1u];
  865|    665|                const char c3 = token[2u];
  866|    665|                const char c4 = token[3u];
  867|    665|                const char c5 = token[4u];
  868|    665|                const char c6 = token[5u];
  869|    665|                const char c7 = token[6u];
  870|       |
  871|    665|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 204, False: 461]
  |  Branch (871:21): [True: 204, False: 461]
  |  Branch (871:37): [True: 204, False: 0]
  |  Branch (871:53): [True: 204, False: 0]
  ------------------
  872|    204|                {
  873|    204|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 83, False: 121]
  |  Branch (873:25): [True: 83, False: 121]
  |  Branch (873:41): [True: 83, False: 0]
  |  Branch (873:54): [True: 83, False: 0]
  |  Branch (873:70): [True: 83, False: 0]
  ------------------
  874|     83|                    {
  875|     83|                        return OpCode::MOVI2FP;
  876|     83|                    }
  877|    121|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 121, False: 0]
  |  Branch (877:25): [True: 121, False: 0]
  |  Branch (877:41): [True: 121, False: 0]
  |  Branch (877:57): [True: 121, False: 0]
  |  Branch (877:70): [True: 121, False: 0]
  ------------------
  878|    121|                    {
  879|    121|                        return OpCode::MOVFP2I;
  880|    121|                    }
  881|    121|                }
  882|    461|                break;
  883|    665|            }
  884|       |
  885|  55.8k|            default: {
  ------------------
  |  Branch (885:13): [True: 55.8k, False: 1.73M]
  ------------------
  886|  55.8k|                break;
  887|    665|            }
  888|  1.78M|        }
  889|       |
  890|       |        // None found
  891|   759k|        return OpCode::NONE;
  892|  1.78M|    }
_ZN3dlx3iceEcc:
   17|  2.80M|    {
   18|  2.80M|        constexpr const char diff = 'a' - 'A';
   19|  2.80M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.75M, False: 1.05M]
  |  Branch (19:28): [True: 270k, False: 780k]
  ------------------
   20|  2.80M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  2.07M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  31.8k|    {
  195|  31.8k|        ParseError err;
  196|       |
  197|  31.8k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  31.8k|        err.m_LineNumber                           = line_number;
  199|  31.8k|        err.m_Column                               = column;
  200|  31.8k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  31.8k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  31.8k|        return err;
  204|  31.8k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  31.8k|    {
  209|  31.8k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  31.8k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  31.8k|                                                         actual_type);
  212|  31.8k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    978|    {
  218|    978|        ParseError err;
  219|       |
  220|    978|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    978|        err.m_LineNumber        = line_number;
  222|    978|        err.m_Column            = column;
  223|    978|        err.invalid_number.text = text;
  224|       |
  225|    978|        return err;
  226|    978|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    978|    {
  230|    978|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    978|                                                token.GetColumn().unsafe(), token.GetText());
  232|    978|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     27|    {
  237|     27|        ParseError err;
  238|       |
  239|     27|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     27|        err.m_LineNumber = line_number;
  241|     27|        err.m_Column     = column;
  242|       |
  243|     27|        return err;
  244|     27|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     27|    {
  249|     27|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     27|                                                                     token.GetColumn().unsafe());
  251|     27|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|   796k|    {
  257|   796k|        ParseError err;
  258|       |
  259|   796k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|   796k|        err.m_LineNumber                   = line_number;
  261|   796k|        err.m_Column                       = column;
  262|   796k|        err.unexpected_token.expected_type = expected_type;
  263|   796k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|   796k|        return err;
  266|   796k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|   796k|    {
  271|   796k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|   796k|                                                  token.GetColumn().unsafe(), expected_type,
  273|   796k|                                                  token.GetType());
  274|   796k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  44.5k|    {
  279|  44.5k|        ParseError err;
  280|       |
  281|  44.5k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  44.5k|        err.m_LineNumber                   = line_number;
  283|  44.5k|        err.m_Column                       = column;
  284|  44.5k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  44.5k|        return err;
  287|  44.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  17.4k|    {
  291|  17.4k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  17.4k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  17.4k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   320k|    {
  298|   320k|        ParseError err;
  299|       |
  300|   320k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   320k|        err.m_LineNumber                       = line_number;
  302|   320k|        err.m_Column                           = column;
  303|   320k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   320k|        return err;
  306|   320k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   320k|    {
  311|   320k|        return ConstructInvalidLabelIdentifierParseError(
  312|   320k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   320k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   127k|    {
  319|   127k|        ParseError err;
  320|       |
  321|   127k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   127k|        err.m_LineNumber                     = line_number;
  323|   127k|        err.m_Column                         = column;
  324|   127k|        err.label_already_defined.label_name = label_name;
  325|   127k|        err.label_already_defined.at_line    = at_line;
  326|   127k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   127k|        return err;
  329|   127k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   127k|    {
  334|   127k|        return ConstructLabelAlreadyDefinedParseError(
  335|   127k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   127k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   127k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   629k|    {
  342|   629k|        ParseError err;
  343|       |
  344|   629k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   629k|        err.m_LineNumber = line_number;
  346|   629k|        err.m_Column     = column;
  347|       |
  348|   629k|        return err;
  349|   629k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   629k|    {
  354|   629k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   629k|                                                        token.GetColumn().unsafe());
  356|   629k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   115k|    {
  362|   115k|        ParseError err;
  363|       |
  364|   115k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   115k|        err.m_LineNumber               = line_number;
  366|   115k|        err.m_Column                   = column;
  367|   115k|        err.too_few_arguments.required = required;
  368|   115k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   115k|        return err;
  371|   115k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   115k|    {
  376|   115k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   115k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   115k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  5.26k|    {
  383|  5.26k|        ParseError err;
  384|       |
  385|  5.26k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  5.26k|        err.m_LineNumber           = line_number;
  387|  5.26k|        err.m_Column               = column;
  388|  5.26k|        err.empty_label.label_name = label_name;
  389|       |
  390|  5.26k|        return err;
  391|  5.26k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  5.26k|    {
  395|  5.26k|        return ConstructEmptyLabelParseError(
  396|  5.26k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  5.26k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 4.28k, False: 981]
  ------------------
  398|  4.28k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  5.26k|                        token.GetText());
  400|  5.26k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|  3.28k|    {
  405|  3.28k|        ParseError err;
  406|       |
  407|  3.28k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|  3.28k|        err.m_LineNumber = line_number;
  409|  3.28k|        err.m_Column     = column;
  410|       |
  411|  3.28k|        return err;
  412|  3.28k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|  3.28k|    {
  416|  3.28k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|  3.28k|                                               token.GetColumn().unsafe());
  418|  3.28k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  2.07M|    {
   19|  2.07M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  2.07M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  13.4k|    {
  181|  13.4k|        ParsedProgram program;
  182|       |
  183|  13.4k|        program.m_Tokens = tokens;
  184|       |
  185|  13.4k|        phi::boolean line_has_instruction{false};
  186|  13.4k|        phi::usize   label_count{0u};
  187|       |
  188|  4.44M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 4.42M, False: 13.4k]
  ------------------
  189|  4.42M|        {
  190|  4.42M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  4.42M|            switch (current_token.GetType())
  195|  4.42M|            {
  196|       |                // Ignore comments
  197|   688k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 688k, False: 3.73M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   688k|                    break;
  200|       |
  201|  1.63M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.63M, False: 2.79M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.63M|                    line_has_instruction = false;
  204|  1.63M|                    break;
  205|       |
  206|   484k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 484k, False: 3.94M]
  ------------------
  207|   484k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 21.3k, False: 463k]
  ------------------
  208|  21.3k|                    {
  209|  21.3k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  21.3k|                                current_token, Token::Type::NewLine));
  211|  21.3k|                        break;
  212|  21.3k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   463k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 278k, False: 184k]
  ------------------
  217|   278k|                    {
  218|   278k|                        program.AddParseError(
  219|   278k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   278k|                        break;
  221|   278k|                    }
  222|       |
  223|   184k|                    phi::string_view label_name = current_token.GetText();
  224|   184k|                    label_name.remove_suffix(1u);
  225|       |
  226|   184k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 27.0k, False: 157k]
  ------------------
  227|  27.0k|                    {
  228|  27.0k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  27.0k|                                current_token.GetLineNumber().unsafe(),
  230|  27.0k|                                current_token.GetColumn().unsafe(), label_name));
  231|  27.0k|                        break;
  232|  27.0k|                    }
  233|       |
  234|   157k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 19.1k, False: 138k]
  ------------------
  235|  19.1k|                    {
  236|  19.1k|                        program.AddParseError(
  237|  19.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  19.1k|                        break;
  239|  19.1k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   138k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 127k, False: 11.3k]
  ------------------
  243|   127k|                    {
  244|       |                        // Find first defintions of label
  245|   127k|                        const Token* first_label_definition =
  246|   127k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   127k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   127k|                                    {
  249|   127k|                                        phi::string_view token_label_name = t.GetText();
  250|   127k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   127k|                                        if (token_label_name == label_name)
  253|   127k|                                        {
  254|   127k|                                            return true;
  255|   127k|                                        }
  256|   127k|                                    }
  257|       |
  258|   127k|                                    return false;
  259|   127k|                                });
  260|       |
  261|   127k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   127k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   127k|                                current_token, *first_label_definition));
  265|   127k|                        break;
  266|   127k|                    }
  267|       |
  268|  11.3k|                    program.m_JumpData[label_name] =
  269|  11.3k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  11.3k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  11.3k|                    break;
  276|   138k|                }
  277|       |
  278|   978k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 978k, False: 3.44M]
  ------------------
  279|   978k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 629k, False: 348k]
  ------------------
  280|   629k|                    {
  281|   629k|                        program.AddParseError(
  282|   629k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   629k|                        break;
  284|   629k|                    }
  285|       |
  286|   348k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   348k|                    PHI_ASSERT(current_token.HasHint());
  290|   348k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   348k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   348k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   348k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   348k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   348k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   348k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   348k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   348k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   561k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 533k, False: 28.0k]
  ------------------
  312|   533k|                    {
  313|       |                        // Get next token
  314|   533k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 650, False: 532k]
  ------------------
  315|    650|                        {
  316|    650|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    650|                                    current_token, number_of_argument_required.unsafe(),
  318|    650|                                    argument_num.unsafe()));
  319|    650|                            break;
  320|    650|                        }
  321|       |
  322|   532k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   532k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 119k, False: 412k]
  ------------------
  326|   119k|                        {
  327|   119k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 3.28k, False: 116k]
  ------------------
  328|  3.28k|                            {
  329|  3.28k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  3.28k|                            }
  331|       |
  332|   119k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   119k|                            continue;
  335|   119k|                        }
  336|       |
  337|   412k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 114k, False: 298k]
  ------------------
  338|   114k|                        {
  339|   114k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   114k|                                    token, number_of_argument_required.unsafe(),
  341|   114k|                                    argument_num.unsafe()));
  342|   114k|                            break;
  343|   114k|                        }
  344|       |
  345|   298k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   298k|                                parse_instruction_argument(
  347|   298k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   298k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 205k, False: 92.9k]
  ------------------
  349|   205k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   205k|                            break;
  352|   205k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  92.9k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  92.9k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  92.9k|                        argument_num++;
  359|  92.9k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  92.9k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   348k|                    program.m_Instructions.emplace_back(instruction);
  367|   348k|                    line_has_instruction = true;
  368|   348k|                    break;
  369|   978k|                }
  370|       |
  371|   643k|                default:
  ------------------
  |  Branch (371:17): [True: 643k, False: 3.78M]
  ------------------
  372|   643k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   643k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 321k, False: 322k]
  ------------------
  374|   321k|                    {
  375|   321k|                        expected_token_type = Token::Type::NewLine;
  376|   321k|                    }
  377|       |
  378|   643k|                    program.AddParseError(
  379|   643k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   643k|                    break;
  381|  4.42M|            }
  382|  4.42M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  13.4k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 966, False: 12.5k]
  ------------------
  386|    966|        {
  387|  10.5k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 9.55k, False: 966]
  ------------------
  388|  9.55k|            {
  389|  9.55k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  9.55k|                const Token& token = *it;
  392|  9.55k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 5.26k, False: 4.28k]
  ------------------
  393|  5.26k|                {
  394|  5.26k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  5.26k|                    --label_count;
  396|  5.26k|                }
  397|  9.55k|            }
  398|    966|        }
  399|       |
  400|  13.4k|        return program;
  401|  13.4k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  13.4k|    {
  405|  13.4k|        TokenStream tokens = Tokenize(source);
  406|  13.4k|        return Parse(tokens);
  407|  13.4k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   298k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   298k|        switch (token.GetType())
   37|   298k|        {
   38|  13.8k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 13.8k, False: 284k]
  ------------------
   39|  13.8k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 798, False: 13.0k]
  ------------------
   40|  13.8k|                                          ArgumentType::AddressDisplacement))
   41|    798|                {
   42|    798|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    798|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    798|                    return {};
   46|    798|                }
   47|       |
   48|       |                // Get address displacement
   49|  13.0k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  13.0k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  13.0k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 27, False: 13.0k]
  ------------------
   54|     27|                {
   55|     27|                    program.AddParseError(
   56|     27|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     27|                    return {};
   58|     27|                }
   59|       |
   60|  13.0k|                auto         it           = tokens.current_position();
   61|  13.0k|                const Token& first_token  = tokens.consume();
   62|  13.0k|                const Token& second_token = tokens.consume();
   63|  13.0k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  13.0k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 13.0k, False: 0]
  ------------------
   66|  13.0k|                {
   67|  13.0k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  13.0k|                            first_token, Token::Type::OpenBracket));
   69|  13.0k|                    return {};
   70|  13.0k|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  55.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 55.5k, False: 242k]
  ------------------
   97|  55.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 9.50k, False: 45.9k]
  ------------------
   98|  9.50k|                {
   99|  9.50k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  9.50k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  9.50k|                    return {};
  102|  9.50k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  45.9k|                return ConstructInstructionArgumentRegisterInt(
  108|  45.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  55.5k|            }
  110|  4.11k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 4.11k, False: 294k]
  ------------------
  111|  4.11k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 3.93k, False: 178]
  ------------------
  112|  3.93k|                {
  113|  3.93k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  3.93k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  3.93k|                    return {};
  116|  3.93k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    178|                return ConstructInstructionArgumentRegisterFloat(
  122|    178|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  4.11k|            }
  124|  17.4k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 17.4k, False: 280k]
  ------------------
  125|  17.4k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  17.4k|                return {};
  128|  4.11k|            }
  129|  62.4k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 62.4k, False: 235k]
  ------------------
  130|       |                // Parse as Label
  131|  62.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 11.5k, False: 50.8k]
  ------------------
  132|  11.5k|                {
  133|  11.5k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  11.5k|                            token, expected_argument_type, ArgumentType::Label));
  135|  11.5k|                    return {};
  136|  11.5k|                }
  137|       |
  138|  50.8k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 50.8k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  50.8k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 23.4k, False: 27.3k]
  ------------------
  145|  23.4k|                {
  146|  23.4k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  23.4k|                    return {};
  148|  23.4k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  27.3k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  50.8k|            }
  154|  26.3k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 26.3k, False: 272k]
  ------------------
  155|  26.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 5.96k, False: 20.4k]
  ------------------
  156|  5.96k|                {
  157|  5.96k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  5.96k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  5.96k|                    return {};
  160|  5.96k|                }
  161|       |
  162|  20.4k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 19.4k, False: 978]
  ------------------
  163|  19.4k|                {
  164|  19.4k|                    return ConstructInstructionArgumentImmediateValue(
  165|  19.4k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  19.4k|                }
  167|       |
  168|    978|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    978|                return {};
  170|  20.4k|            }
  171|       |
  172|   118k|            default:
  ------------------
  |  Branch (172:13): [True: 118k, False: 179k]
  ------------------
  173|   118k|                program.AddParseError(
  174|   118k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|   118k|                return {};
  176|   298k|        }
  177|   298k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  2.19M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.19M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 627k, False: 1.57M]
  ------------------
  248|   627k|                                    {
  249|   627k|                                        phi::string_view token_label_name = t.GetText();
  250|   627k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   627k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 127k, False: 500k]
  ------------------
  253|   127k|                                        {
  254|   127k|                                            return true;
  255|   127k|                                        }
  256|   627k|                                    }
  257|       |
  258|  2.07M|                                    return false;
  259|  2.19M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    423|    {
  354|    423|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 423]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    423|        m_CurrentProgram = &program;
  361|       |
  362|    423|        m_ProgramCounter               = 0u;
  363|    423|        m_Halted                       = false;
  364|    423|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    423|        m_LastRaisedException          = Exception::None;
  366|    423|        m_CurrentStepCount             = 0u;
  367|       |
  368|    423|        return true;
  369|    423|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  2.06M|    {
   13|  2.06M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 514k, False: 1.55M]
  ------------------
   14|   514k|        {
   15|   514k|            const char first_char = token[0u];
   16|   514k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 133k, False: 380k]
  |  Branch (16:38): [True: 59.5k, False: 320k]
  ------------------
   17|   193k|            {
   18|   193k|                const char second_char = token[1u];
   19|   193k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 192k, False: 720]
  |  Branch (19:43): [True: 152k, False: 39.8k]
  ------------------
   20|   152k|                {
   21|   152k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|   152k|                }
   23|   193k|            }
   24|   514k|        }
   25|  1.55M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 631k, False: 922k]
  ------------------
   26|   631k|        {
   27|   631k|            const char first_char = token[0u];
   28|   631k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 62.6k, False: 568k]
  |  Branch (28:38): [True: 26.4k, False: 542k]
  ------------------
   29|  89.1k|            {
   30|  89.1k|                const char second_char = token[1u];
   31|  89.1k|                const char third_char  = token[2u];
   32|       |
   33|  89.1k|                switch (second_char)
   34|  89.1k|                {
   35|  30.2k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 30.2k, False: 58.8k]
  ------------------
   36|  30.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 30.0k, False: 178]
  |  Branch (36:50): [True: 18.0k, False: 12.0k]
  ------------------
   37|  18.0k|                        {
   38|  18.0k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  18.0k|                        }
   40|  12.2k|                        break;
   41|  30.2k|                    }
   42|  48.4k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 48.4k, False: 40.6k]
  ------------------
   43|  48.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 48.3k, False: 119]
  |  Branch (43:50): [True: 35.2k, False: 13.1k]
  ------------------
   44|  35.2k|                        {
   45|  35.2k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  35.2k|                        }
   47|  13.2k|                        break;
   48|  48.4k|                    }
   49|  13.2k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 9.42k, False: 79.7k]
  ------------------
   50|  9.42k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 226, False: 9.19k]
  |  Branch (50:50): [True: 9.12k, False: 71]
  ------------------
   51|  9.35k|                        {
   52|  9.35k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  9.35k|                        }
   54|     71|                        break;
   55|  9.42k|                    }
   56|    949|                    default: {
  ------------------
  |  Branch (56:21): [True: 949, False: 88.1k]
  ------------------
   57|    949|                        break;
   58|  9.42k|                    }
   59|  89.1k|                }
   60|  89.1k|            }
   61|   631k|        }
   62|       |
   63|  1.85M|        return IntRegisterID::None;
   64|  2.06M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  1.85M|    {
   68|  1.85M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 361k, False: 1.49M]
  ------------------
   69|   361k|        {
   70|   361k|            const char first_char = token[0u];
   71|   361k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 27.1k, False: 334k]
  |  Branch (71:38): [True: 9.09k, False: 325k]
  ------------------
   72|  36.1k|            {
   73|  36.1k|                const char second_char = token[1u];
   74|  36.1k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 36.0k, False: 148]
  |  Branch (74:43): [True: 26.9k, False: 9.07k]
  ------------------
   75|  26.9k|                {
   76|  26.9k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  26.9k|                }
   78|  36.1k|            }
   79|   361k|        }
   80|  1.49M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 568k, False: 922k]
  ------------------
   81|   568k|        {
   82|   568k|            const char first_char = token[0u];
   83|   568k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 38.1k, False: 530k]
  |  Branch (83:38): [True: 12.9k, False: 517k]
  ------------------
   84|  51.1k|            {
   85|  51.1k|                const char second_char = token[1u];
   86|  51.1k|                const char third_char  = token[2u];
   87|       |
   88|  51.1k|                switch (second_char)
   89|  51.1k|                {
   90|  19.3k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 19.3k, False: 31.7k]
  ------------------
   91|  19.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 19.2k, False: 107]
  |  Branch (91:50): [True: 19.1k, False: 84]
  ------------------
   92|  19.1k|                        {
   93|  19.1k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  19.1k|                        }
   95|    191|                        break;
   96|  19.3k|                    }
   97|  12.8k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 12.8k, False: 38.2k]
  ------------------
   98|  12.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 376, False: 12.4k]
  |  Branch (98:50): [True: 303, False: 73]
  ------------------
   99|    303|                        {
  100|    303|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    303|                        }
  102|  12.5k|                        break;
  103|  12.8k|                    }
  104|  18.7k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 18.7k, False: 32.3k]
  ------------------
  105|  18.7k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 18.5k, False: 223]
  |  Branch (105:50): [True: 123, False: 100]
  ------------------
  106|  18.6k|                        {
  107|  18.6k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  18.6k|                        }
  109|    100|                        break;
  110|  18.7k|                    }
  111|    124|                    default: {
  ------------------
  |  Branch (111:21): [True: 124, False: 51.0k]
  ------------------
  112|    124|                        break;
  113|  18.7k|                    }
  114|  51.1k|                }
  115|  51.1k|            }
  116|   568k|        }
  117|       |
  118|  1.78M|        return FloatRegisterID::None;
  119|  1.85M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  2.11M|    {
  123|  2.11M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 527k, False: 1.58M]
  ------------------
  124|   527k|        {
  125|   527k|            const char c1 = token[0u];
  126|   527k|            const char c2 = token[1u];
  127|   527k|            const char c3 = token[2u];
  128|   527k|            const char c4 = token[3u];
  129|       |
  130|   527k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 71.8k, False: 455k]
  |  Branch (130:34): [True: 165, False: 455k]
  |  Branch (130:49): [True: 71.8k, False: 193]
  |  Branch (130:62): [True: 127, False: 66]
  ------------------
  131|   527k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 71.8k, False: 132]
  |  Branch (131:34): [True: 66, False: 66]
  |  Branch (131:49): [True: 71.8k, False: 66]
  |  Branch (131:62): [True: 0, False: 66]
  ------------------
  132|   527k|        }
  133|       |
  134|  1.58M|        return false;
  135|  2.11M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  3.59M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.40M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  13.6M|    {
   41|  13.6M|        return m_Type;
   42|  13.6M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  9.00M|    {
   51|  9.00M|        return m_LineNumber;
   52|  9.00M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  17.3M|    {
   56|  17.3M|        return m_Column;
   57|  17.3M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  11.9M|    {
   61|  11.9M|        return m_Text.length();
   62|  11.9M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.88M|    {
   66|  1.88M|        return m_Text;
   67|  1.88M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   382k|    {
   80|   382k|        return m_HasHint;
   81|   382k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   427k|    {
   85|   427k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   427k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   427k|                   m_Type == Type::ImmediateInteger);
   88|   427k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   427k|        return m_Hint;
   91|   427k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  13.4k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  13.4k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  13.4k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  13.0k|    {
   51|  13.0k|        auto it = m_Iterator;
   52|  52.1k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 39.1k, False: 13.0k]
  ------------------
   53|  39.1k|        {
   54|  39.1k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 27, False: 39.1k]
  ------------------
   55|     27|            {
   56|     27|                return false;
   57|     27|            }
   58|  39.1k|        }
   59|       |
   60|  13.0k|        return true;
   61|  13.0k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.97M|    {
   65|  4.97M|        return m_Iterator != m_Tokens.end();
   66|  4.97M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.99M|    {
   70|  4.99M|        return m_Iterator == m_Tokens.end();
   71|  4.99M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.99M|    {
   85|  4.99M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.99M|        return *m_Iterator++;
   91|  4.99M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  13.0k|    {
  164|  13.0k|        return m_Iterator;
  165|  13.0k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  13.4k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  13.4k|        return m_Tokens.begin();
  188|  13.4k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  13.4k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  13.4k|        return m_Tokens.end();
  206|  13.4k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    966|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    966|        return m_Tokens.rbegin();
  224|    966|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  9.55k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  9.55k|        return m_Tokens.rend();
  233|  9.55k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  13.4k|    {
   66|  13.4k|        TokenStream tokens;
   67|       |
   68|  13.4k|        phi::string_view current_token;
   69|       |
   70|  13.4k|        phi::u64 current_line_number{1u};
   71|  13.4k|        phi::u64 current_column{1u};
   72|  13.4k|        phi::u64 token_begin{0u};
   73|       |
   74|  13.4k|        phi::boolean parsing_comment{false};
   75|       |
   76|  11.4M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 11.4M, False: 13.4k]
  ------------------
   77|  11.4M|        {
   78|  11.4M|            const char c{source.at(i)};
   79|       |
   80|  11.4M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.77M, False: 9.67M]
  ------------------
   81|  1.77M|            {
   82|  1.77M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 530k, False: 1.24M]
  ------------------
   83|   530k|                {
   84|       |                    // Skip empty lines
   85|   530k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   530k|                                        current_line_number, current_column);
   87|       |
   88|   530k|                    parsing_comment = false;
   89|   530k|                    current_line_number += 1u;
   90|   530k|                    current_column = 1u;
   91|   530k|                    continue;
   92|   530k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.24M|                tokens.emplace_back(ParseToken(
   96|  1.24M|                        source.substring_view(
   97|  1.24M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.24M|                                current_token.length()),
   99|  1.24M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.24M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.24M|                                    current_line_number, current_column);
  103|       |
  104|  1.24M|                current_token   = phi::string_view{};
  105|  1.24M|                parsing_comment = false;
  106|  1.24M|                current_line_number += 1u;
  107|  1.24M|                current_column = 0u;
  108|  1.24M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  9.67M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 85.8k, False: 9.58M]
  |  Branch (110:34): [True: 727k, False: 8.86M]
  ------------------
  111|   813k|            {
  112|   813k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 688k, False: 125k]
  ------------------
  113|   688k|                {
  114|   688k|                    token_begin = i;
  115|   688k|                }
  116|   125k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 72.8k, False: 52.3k]
  ------------------
  117|  72.8k|                {
  118|  72.8k|                    tokens.emplace_back(ParseToken(
  119|  72.8k|                            source.substring_view(
  120|  72.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  72.8k|                                    current_token.length()),
  122|  72.8k|                            current_line_number, current_column - current_token.length()));
  123|  72.8k|                    token_begin   = i;
  124|  72.8k|                    current_token = phi::string_view{};
  125|  72.8k|                }
  126|       |
  127|   813k|                parsing_comment = true;
  128|   813k|                current_token   = source.substring_view(
  129|   813k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   813k|                        current_token.length() + 1u);
  131|   813k|            }
  132|  8.86M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 896k, False: 7.96M]
  ------------------
  133|   896k|            {
  134|       |                // simply append the character
  135|   896k|                current_token = source.substring_view(
  136|   896k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   896k|                        current_token.length() + 1u);
  138|   896k|            }
  139|  7.96M|            else
  140|  7.96M|            {
  141|       |                // Not parsing a comment
  142|  7.96M|                switch (c)
  143|  7.96M|                {
  144|   949k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 949k, False: 7.01M]
  ------------------
  145|   949k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 501, False: 7.96M]
  ------------------
  146|   949k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 7.96M]
  ------------------
  147|   949k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 3.77k, False: 946k]
  ------------------
  148|  3.77k|                        {
  149|  3.77k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  3.77k|                            continue;
  152|  3.77k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   946k|                        tokens.emplace_back(ParseToken(
  156|   946k|                                source.substring_view(
  157|   946k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   946k|                                        current_token.length()),
  159|   946k|                                current_line_number, current_column - current_token.length()));
  160|   946k|                        current_token = phi::string_view{};
  161|   946k|                        break;
  162|   208k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 208k, False: 7.75M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|   208k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 188k, False: 19.3k]
  ------------------
  165|   188k|                        {
  166|   188k|                            current_token = source.substring_view(
  167|   188k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|   188k|                                    current_token.length() + 1u);
  169|   188k|                            tokens.emplace_back(ParseToken(
  170|   188k|                                    source.substring_view(
  171|   188k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|   188k|                                                    token_begin),
  173|   188k|                                            current_token.length()),
  174|   188k|                                    current_line_number,
  175|   188k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|   188k|                            current_token = phi::string_view{};
  178|   188k|                        }
  179|  19.3k|                        else
  180|  19.3k|                        {
  181|       |                            // Orphan colon
  182|  19.3k|                            token_begin = i;
  183|       |
  184|  19.3k|                            tokens.emplace_back(
  185|  19.3k|                                    Token::Type::Colon,
  186|  19.3k|                                    source.substring_view(
  187|  19.3k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  19.3k|                                                    token_begin),
  189|  19.3k|                                            1u),
  190|  19.3k|                                    current_line_number, current_column);
  191|  19.3k|                        }
  192|   208k|                        break;
  193|   343k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 343k, False: 7.62M]
  ------------------
  194|   404k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 61.5k, False: 7.90M]
  ------------------
  195|   405k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 979, False: 7.96M]
  ------------------
  196|   405k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 348k, False: 57.4k]
  ------------------
  197|   348k|                        {
  198|   348k|                            tokens.emplace_back(ParseToken(
  199|   348k|                                    source.substring_view(
  200|   348k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   348k|                                                    token_begin),
  202|   348k|                                            current_token.length()),
  203|   348k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   348k|                            current_token = phi::string_view{};
  206|   348k|                        }
  207|       |
  208|   405k|                        Token::Type type;
  209|   405k|                        switch (c)
  210|   405k|                        {
  211|   343k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 343k, False: 62.5k]
  ------------------
  212|   343k|                                type = Token::Type::Comma;
  213|   343k|                                break;
  214|  61.5k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 61.5k, False: 344k]
  ------------------
  215|  61.5k|                                type = Token::Type::OpenBracket;
  216|  61.5k|                                break;
  217|    979|                            case ')':
  ------------------
  |  Branch (217:29): [True: 979, False: 404k]
  ------------------
  218|    979|                                type = Token::Type::ClosingBracket;
  219|    979|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 405k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   405k|#endif
  225|   405k|                        }
  226|       |
  227|   405k|                        token_begin = i;
  228|       |
  229|   405k|                        tokens.emplace_back(
  230|   405k|                                type,
  231|   405k|                                source.substring_view(
  232|   405k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   405k|                                        1u),
  234|   405k|                                current_line_number, current_column);
  235|   405k|                        break;
  236|       |
  237|  6.39M|                    default:
  ------------------
  |  Branch (237:21): [True: 6.39M, False: 1.56M]
  ------------------
  238|  6.39M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 2.04M, False: 4.35M]
  ------------------
  239|  2.04M|                        {
  240|  2.04M|                            token_begin = i;
  241|  2.04M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  6.39M|                        current_token = source.substring_view(
  245|  6.39M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  6.39M|                                current_token.length() + 1u);
  247|  7.96M|                }
  248|  7.96M|            }
  249|       |
  250|  10.9M|            current_column += 1u;
  251|  10.9M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  13.4k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 4.21k, False: 9.25k]
  ------------------
  255|  4.21k|        {
  256|  4.21k|            tokens.emplace_back(
  257|  4.21k|                    ParseToken(source.substring_view(
  258|  4.21k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  4.21k|                                       current_token.length()),
  260|  4.21k|                               current_line_number, current_column - current_token.length()));
  261|  4.21k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  13.4k|        tokens.finalize();
  265|       |
  266|  13.4k|        return tokens;
  267|  13.4k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  2.80M|    {
   14|  2.80M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 79.0k, False: 2.72M]
  |  Branch (14:13): [True: 72.6k, False: 2.72M]
  |  Branch (14:36): [True: 72.6k, False: 6.37k]
  ------------------
   15|  72.6k|        {
   16|  72.6k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  72.6k|            if (number)
  ------------------
  |  Branch (18:17): [True: 55.4k, False: 17.2k]
  ------------------
   19|  55.4k|            {
   20|  55.4k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  55.4k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  55.4k|            }
   23|       |
   24|  17.2k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  72.6k|        }
   26|       |
   27|  2.72M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 33.7k, False: 2.69M]
  |  Branch (27:13): [True: 761k, False: 1.96M]
  |  Branch (27:36): [True: 727k, False: 1.96M]
  ------------------
   28|   761k|        {
   29|   761k|            return {Token::Type::Comment, token, line_number, column};
   30|   761k|        }
   31|       |
   32|  1.96M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 63.7k, False: 1.90M]
  ------------------
   33|  63.7k|        {
   34|  63.7k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  63.7k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  63.7k|        }
   37|       |
   38|  1.90M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 71.8k, False: 1.83M]
  ------------------
   39|  71.8k|        {
   40|  71.8k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  71.8k|        }
   42|       |
   43|  1.83M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 190k, False: 1.64M]
  ------------------
   44|   190k|        {
   45|   190k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   190k|                    static_cast<phi::uint32_t>(id)};
   47|   190k|        }
   48|       |
   49|  1.64M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 65.0k, False: 1.57M]
  ------------------
   50|  65.0k|        {
   51|  65.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  65.0k|                    static_cast<phi::uint32_t>(id)};
   53|  65.0k|        }
   54|       |
   55|  1.57M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.02M, False: 551k]
  ------------------
   56|  1.02M|        {
   57|  1.02M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.02M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.02M|        }
   60|       |
   61|   551k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  1.57M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  13.4k|    {
   53|       |        // Constants
   54|  13.4k|        constexpr std::uint8_t number_of_opcodes =
   55|  13.4k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  13.4k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  13.4k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  13.4k|        std::string ret;
   60|       |
   61|  2.58M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 2.57M, False: 13.2k]
  ------------------
   62|  2.57M|        {
   63|  2.57M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  2.57M|            switch (current_value)
   66|  2.57M|            {
   67|       |                // OpCode
   68|   906k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 906k, False: 1.66M]
  ------------------
   69|       |                    // Has one more value
   70|   906k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 906k, False: 845]
  ------------------
   71|   906k|                    {
   72|   906k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   906k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   906k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 35, False: 906k]
  ------------------
   77|     35|                        {
   78|     35|                            return detail::ErrorString;
   79|     35|                        }
   80|   906k|                    }
   81|   906k|                    break;
   82|   906k|                }
   83|       |
   84|       |                // Int Register
   85|   906k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 202k, False: 2.36M]
  ------------------
   86|       |                    // Has one more value
   87|   202k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 202k, False: 209]
  ------------------
   88|   202k|                    {
   89|   202k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   202k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   202k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 6, False: 202k]
  ------------------
   93|      6|                        {
   94|      6|                            return detail::ErrorString;
   95|      6|                        }
   96|   202k|                    }
   97|   202k|                    break;
   98|   202k|                }
   99|       |
  100|       |                // Float register
  101|   202k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 71.2k, False: 2.50M]
  ------------------
  102|       |                    // Has one more value
  103|  71.2k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 71.2k, False: 1]
  ------------------
  104|  71.2k|                    {
  105|  71.2k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  71.2k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  71.2k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 27, False: 71.2k]
  ------------------
  109|     27|                        {
  110|     27|                            return detail::ErrorString;
  111|     27|                        }
  112|  71.2k|                    }
  113|  71.2k|                    break;
  114|  71.2k|                }
  115|       |
  116|       |                // Floating point status register
  117|  73.0k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 73.0k, False: 2.49M]
  ------------------
  118|  73.0k|                    ret += "FPSR";
  119|  73.0k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 9, False: 73.0k]
  ------------------
  120|      9|                    {
  121|      9|                        return detail::ErrorString;
  122|      9|                    }
  123|       |
  124|  73.0k|                    break;
  125|  73.0k|                }
  126|       |
  127|       |                // Immediate integer
  128|  91.2k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 91.2k, False: 2.48M]
  ------------------
  129|  91.2k|                    ret += "#";
  130|  91.2k|                    [[fallthrough]];
  131|  91.2k|                }
  132|       |
  133|       |                // Integer literal
  134|   175k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 83.9k, False: 2.48M]
  ------------------
  135|   175k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   175k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 174k, False: 274]
  ------------------
  138|   174k|                    {
  139|   174k|                        std::int16_t value = 0;
  140|       |
  141|   524k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 349k, False: 174k]
  ------------------
  142|   349k|                        {
  143|   349k|                            value <<= 8;
  144|   349k|                            value &= data[index++];
  145|   349k|                        }
  146|       |
  147|   174k|                        ret += std::to_string(value);
  148|   174k|                    }
  149|   175k|                    break;
  150|  91.2k|                }
  151|       |
  152|       |                // Label
  153|  32.7k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 32.7k, False: 2.53M]
  ------------------
  154|  32.7k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  32.7k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 32.6k, False: 33]
  ------------------
  157|  32.6k|                    {
  158|  32.6k|                        std::string label_name = "lbl_";
  159|       |
  160|   195k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 162k, False: 32.6k]
  ------------------
  161|   162k|                        {
  162|   162k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   162k|                            label_name += c;
  165|   162k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  32.6k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 32.5k, False: 175]
  |  Branch (168:45): [True: 21.8k, False: 10.6k]
  ------------------
  169|  21.8k|                        {
  170|  21.8k|                            label_name += ':';
  171|  21.8k|                            ret += label_name;
  172|  21.8k|                        }
  173|  10.8k|                        else
  174|  10.8k|                        {
  175|  10.8k|                            ret += label_name;
  176|  10.8k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 2, False: 10.8k]
  ------------------
  177|      2|                            {
  178|      2|                                return detail::ErrorString;
  179|      2|                            }
  180|  10.8k|                        }
  181|  32.6k|                    }
  182|  32.7k|                    break;
  183|  32.7k|                }
  184|       |
  185|       |                // Newline
  186|   383k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 383k, False: 2.18M]
  ------------------
  187|   383k|                    ret += '\n';
  188|   383k|                    break;
  189|  32.7k|                }
  190|       |
  191|       |                // Comment
  192|   725k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 725k, False: 1.84M]
  ------------------
  193|   725k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   725k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 725k, False: 510]
  ------------------
  196|   725k|                    {
  197|   725k|                        std::string comment = "; ";
  198|       |
  199|  4.34M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 3.61M, False: 725k]
  ------------------
  200|  3.61M|                        {
  201|  3.61M|                            comment += static_cast<char>(data[index++]);
  202|  3.61M|                        }
  203|       |
  204|   725k|                        ret += comment + '\n';
  205|   725k|                    }
  206|   725k|                    break;
  207|  32.7k|                }
  208|       |
  209|       |                // Ignore
  210|    153|                default:
  ------------------
  |  Branch (210:17): [True: 153, False: 2.57M]
  ------------------
  211|    153|                    return detail::ErrorString;
  212|  2.57M|            }
  213|  2.57M|        }
  214|       |
  215|  13.2k|        return ret;
  216|  13.4k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|  1.26M|        {
   20|  1.26M|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 1.26M, False: 3.52k]
  ------------------
   21|  1.26M|            {
   22|  1.26M|                std::uint8_t val = data[index++];
   23|  1.26M|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 948k, False: 311k]
  ------------------
   24|   948k|                {
   25|   948k|                    text += ' ';
   26|   948k|                }
   27|   311k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 311k, False: 79]
  ------------------
   28|   311k|                {
   29|   311k|                    text += ',';
   30|   311k|                }
   31|     79|                else
   32|     79|                {
   33|     79|                    return false;
   34|     79|                }
   35|  1.26M|            }
   36|       |
   37|  1.26M|            return true;
   38|  1.26M|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   162k|        {
   42|   162k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 125k, False: 37.7k]
  ------------------
   43|   125k|            {
   44|   125k|                return '_';
   45|   125k|            }
   46|       |
   47|  37.7k|            return c;
   48|   162k|        }

LLVMFuzzerTestOneInput:
   11|  13.4k|{
   12|  13.4k|    static dlxemu::Emulator emu;
   13|       |
   14|  13.4k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|  13.4k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  13.4k|    editor.SetText(source);
   20|  13.4k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  13.4k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  13.4k|    editor.ColorizeInternal();
   25|       |
   26|  13.4k|    return 0;
   27|  13.4k|}


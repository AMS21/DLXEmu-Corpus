_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|   152k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  232|  30.5k|    {
  233|  30.5k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (233:13): [True: 23.4k, False: 7.17k]
  ------------------
  234|  23.4k|        {
  235|  23.4k|            return m_Line < other.m_Line;
  236|  23.4k|        }
  237|       |
  238|  7.17k|        return m_Column <= other.m_Column;
  239|  30.5k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  242|      1|    {
  243|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (243:13): [True: 0, False: 1]
  ------------------
  244|      0|        {
  245|      0|            return m_Line > other.m_Line;
  246|      0|        }
  247|       |
  248|      1|        return m_Column >= other.m_Column;
  249|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  256|  11.6M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  284|      1|    {
  285|      1|        Colorize();
  286|      1|        m_Lines.emplace_back();
  287|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  290|      1|    {
  291|      1|        VerifyInternalState();
  292|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  340|  30.5k|    {
  341|  30.5k|        m_ErrorMarkers.clear();
  342|  30.5k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  405|  30.5k|    {
  406|  30.5k|        m_Breakpoints.clear();
  407|  30.5k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  485|  30.5k|    {
  486|  30.5k|        m_Lines.clear();
  487|  30.5k|        ResetState();
  488|  30.5k|        m_Lines.emplace_back();
  489|       |
  490|  30.5k|        for (const char character : text)
  ------------------
  |  Branch (490:35): [True: 19.6M, False: 30.5k]
  ------------------
  491|  19.6M|        {
  492|  19.6M|            if (character == '\r' ||
  ------------------
  |  Branch (492:17): [True: 2.47k, False: 19.6M]
  |  Branch (492:17): [True: 1.70M, False: 17.9M]
  ------------------
  493|  19.6M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (493:18): [True: 8.02M, False: 11.5M]
  |  Branch (493:48): [True: 1.73M, False: 6.28M]
  |  Branch (493:69): [True: 1.70M, False: 33.9k]
  ------------------
  494|  1.70M|            {
  495|       |                // ignore the carriage return character and control characters
  496|  1.70M|            }
  497|  17.9M|            else if (character == '\n')
  ------------------
  |  Branch (497:22): [True: 6.28M, False: 11.6M]
  ------------------
  498|  6.28M|            {
  499|  6.28M|                m_Lines.emplace_back();
  500|  6.28M|            }
  501|  11.6M|            else
  502|  11.6M|            {
  503|  11.6M|                m_Lines.back().emplace_back(static_cast<Char>(character), PaletteIndex::Default);
  504|  11.6M|            }
  505|  19.6M|        }
  506|       |
  507|  30.5k|        m_TextChanged = true;
  508|  30.5k|        m_ScrollToTop = true;
  509|       |
  510|  30.5k|        m_UndoBuffer.clear();
  511|  30.5k|        m_UndoIndex = 0u;
  512|       |
  513|  30.5k|        Colorize();
  514|  30.5k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  517|  30.5k|    {
  518|  30.5k|        const phi::u32 max_line = GetMaxLineNumber();
  519|       |
  520|  30.5k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  521|  30.5k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1484|      1|    {
 1485|       |        // Lines should never be empty
 1486|      1|        PHI_ASSERT(!m_Lines.empty());
 1487|       |
 1488|       |        // Verify Selection is still in a valid state
 1489|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1490|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1491|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1492|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1493|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1494|       |
 1495|       |        // Verify cursor position
 1496|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1497|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1498|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1499|       |
 1500|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1501|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1502|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1503|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1504|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1505|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1506|       |#endif
 1507|       |
 1508|       |        // Verify that all breakpoints are on existing lines
 1509|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1509:35): [True: 0, False: 1]
  ------------------
 1510|      0|        {
 1511|      0|            PHI_ASSERT(break_point != 0u);
 1512|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1513|      0|        }
 1514|       |
 1515|       |        // Verify that all error markers are on existing lines
 1516|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1516:34): [True: 0, False: 1]
  ------------------
 1517|      0|        {
 1518|      0|            const phi::u32 line_number = error_marker.first;
 1519|       |
 1520|      0|            PHI_ASSERT(line_number != 0u);
 1521|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1522|      0|        }
 1523|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1526|      1|    {
 1527|      1|        constexpr const static Palette palette = {{
 1528|      1|                0xff7f7f7f, // Default
 1529|      1|                0xffd69c56, // OpCode
 1530|      1|                0xff00ff00, // Register
 1531|      1|                0xff7070e0, // IntegerLiteral
 1532|      1|                0xff206020, // Comment
 1533|      1|                0xff101010, // Background
 1534|      1|                0xffe0e0e0, // Cursor
 1535|      1|                0x80a06020, // Selection
 1536|      1|                0x800020ff, // ErrorMarker
 1537|      1|                0x40f08000, // Breakpoint
 1538|      1|                0xff707000, // Line number
 1539|      1|                0x40000000, // Current line fill
 1540|      1|                0x40808080, // Current line fill (inactive)
 1541|      1|                0x40a0a0a0, // Current line edge
 1542|      1|        }};
 1543|       |
 1544|      1|        return palette;
 1545|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1710|  30.5k|    {
 1711|       |        // TODO: This is quite unreadable
 1712|  30.5k|        const phi::u32 to_line =
 1713|  30.5k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1713:17): [True: 30.5k, False: 0]
  ------------------
 1714|  30.5k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1715|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1716|       |
 1717|  30.5k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1718|  30.5k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1719|  30.5k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1720|  30.5k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1721|  30.5k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1826|  30.5k|    {
 1827|  30.5k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1828|  30.5k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1829|  30.5k|        PHI_ASSERT(start <= end);
 1830|       |
 1831|  30.5k|        std::string result;
 1832|       |
 1833|  30.5k|        phi::u32   lstart = start.m_Line;
 1834|  30.5k|        phi::u32   lend   = end.m_Line;
 1835|  30.5k|        phi::u32   istart = GetCharacterIndex(start);
 1836|  30.5k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1837|  30.5k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1838|  30.5k|        phi::usize size   = 0u;
 1839|       |
 1840|  6.34M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1840:35): [True: 6.31M, False: 30.5k]
  ------------------
 1841|  6.31M|        {
 1842|  6.31M|            PHI_ASSERT(i < m_Lines.size());
 1843|  6.31M|            size += m_Lines[i.unsafe()].size();
 1844|  6.31M|        }
 1845|       |
 1846|  30.5k|        result.reserve((size + size / 8u).unsafe());
 1847|       |
 1848|  17.9M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1848:16): [True: 6.31M, False: 11.6M]
  |  Branch (1848:16): [True: 17.9M, False: 30.5k]
  |  Branch (1848:33): [True: 11.5M, False: 30.5k]
  ------------------
 1849|  17.9M|        {
 1850|  17.9M|            PHI_ASSERT(lstart < m_Lines.size());
 1851|       |
 1852|  17.9M|            const Line& line = m_Lines[lstart.unsafe()];
 1853|  17.9M|            if (istart < line.size())
  ------------------
  |  Branch (1853:17): [True: 11.6M, False: 6.28M]
  ------------------
 1854|  11.6M|            {
 1855|  11.6M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1856|  11.6M|                istart++;
 1857|  11.6M|            }
 1858|  6.28M|            else
 1859|  6.28M|            {
 1860|  6.28M|                istart = 0u;
 1861|  6.28M|                ++lstart;
 1862|       |
 1863|  6.28M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1863:21): [True: 6.28M, False: 0]
  ------------------
 1864|  6.28M|                {
 1865|  6.28M|                    result += '\n';
 1866|  6.28M|                }
 1867|  6.28M|            }
 1868|  17.9M|        }
 1869|       |
 1870|  30.5k|        return result;
 1871|  30.5k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2403|  61.1k|    {
 2404|  61.1k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2405|       |
 2406|  61.1k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2407|  61.1k|        phi::u32    index = 0u;
 2408|  2.89M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2408:35): [True: 2.85M, False: 38.1k]
  |  Branch (2408:35): [True: 2.83M, False: 61.1k]
  |  Branch (2408:58): [True: 2.83M, False: 23.0k]
  ------------------
 2409|  2.83M|        {
 2410|  2.83M|            PHI_ASSERT(index < line.size());
 2411|  2.83M|            const Char character = line[index.unsafe()].m_Char;
 2412|       |
 2413|  2.83M|            if (character == '\t')
  ------------------
  |  Branch (2413:17): [True: 0, False: 2.83M]
  ------------------
 2414|      0|            {
 2415|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2416|      0|            }
 2417|  2.83M|            else
 2418|  2.83M|            {
 2419|  2.83M|                ++column;
 2420|  2.83M|            }
 2421|       |
 2422|  2.83M|            index += UTF8CharLength(character);
 2423|  2.83M|        }
 2424|       |
 2425|  61.1k|        return index;
 2426|  61.1k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2473|  30.5k|    {
 2474|  30.5k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2474:13): [True: 0, False: 30.5k]
  ------------------
 2475|      0|        {
 2476|      0|            return 0u;
 2477|      0|        }
 2478|       |
 2479|  30.5k|        const Line& line = m_Lines[line_number.unsafe()];
 2480|  30.5k|        phi::u32    col  = 0u;
 2481|       |
 2482|  2.86M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2482:32): [True: 2.83M, False: 30.5k]
  ------------------
 2483|  2.83M|        {
 2484|  2.83M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2485|  2.83M|            if (character == '\t')
  ------------------
  |  Branch (2485:17): [True: 0, False: 2.83M]
  ------------------
 2486|      0|            {
 2487|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2488|      0|            }
 2489|  2.83M|            else
 2490|  2.83M|            {
 2491|  2.83M|                col++;
 2492|  2.83M|            }
 2493|       |
 2494|  2.83M|            i += UTF8CharLength(character);
 2495|  2.83M|        }
 2496|       |
 2497|  30.5k|        return col;
 2498|  30.5k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2501|  30.5k|    {
 2502|  30.5k|        PHI_ASSERT(!m_Lines.empty());
 2503|       |
 2504|  30.5k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2505|  30.5k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3639|  9.99M|    {
 3640|  9.99M|        PaletteIndex palette_index{PaletteIndex::Default};
 3641|       |
 3642|       |        // Determine palette color
 3643|  9.99M|        switch (token.GetType())
 3644|  9.99M|        {
 3645|   908k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3645:13): [True: 908k, False: 9.08M]
  ------------------
 3646|   908k|                palette_index = PaletteIndex::Comment;
 3647|   908k|                break;
 3648|  20.7k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3648:13): [True: 20.7k, False: 9.97M]
  ------------------
 3649|   166k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3649:13): [True: 145k, False: 9.84M]
  ------------------
 3650|   166k|                palette_index = PaletteIndex::IntegerLiteral;
 3651|   166k|                break;
 3652|  1.42M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3652:13): [True: 1.42M, False: 8.57M]
  ------------------
 3653|  1.42M|                palette_index = PaletteIndex::OpCode;
 3654|  1.42M|                break;
 3655|  38.1k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3655:13): [True: 38.1k, False: 9.95M]
  ------------------
 3656|   294k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3656:13): [True: 256k, False: 9.73M]
  ------------------
 3657|   351k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3657:13): [True: 56.9k, False: 9.93M]
  ------------------
 3658|   351k|                palette_index = PaletteIndex::Register;
 3659|   351k|                break;
 3660|  6.28M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3660:13): [True: 6.28M, False: 3.70M]
  ------------------
 3661|  6.28M|                return;
 3662|   858k|            default:
  ------------------
  |  Branch (3662:13): [True: 858k, False: 9.13M]
  ------------------
 3663|   858k|                break;
 3664|  9.99M|        }
 3665|       |
 3666|  3.70M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3667|  3.70M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3668|       |
 3669|  3.70M|        for (phi::u64 index{token.GetColumn() - 1u};
 3670|  13.9M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3670:14): [True: 10.2M, False: 3.70M]
  ------------------
 3671|  10.2M|        {
 3672|  10.2M|            PHI_ASSERT(index < line.size());
 3673|  10.2M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3674|  10.2M|        }
 3675|  3.70M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3678|  30.5k|    {
 3679|  30.5k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3680|       |
 3681|  30.5k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3681:38): [True: 9.99M, False: 30.5k]
  ------------------
 3682|  9.99M|        {
 3683|  9.99M|            ColorizeToken(token);
 3684|  9.99M|        }
 3685|  30.5k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3688|  30.5k|    {
 3689|  30.5k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3690|  30.5k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3691|  30.5k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3692|       |
 3693|       |        // Clear breakpoints and markers
 3694|  30.5k|        ClearBreakPoints();
 3695|  30.5k|        ClearErrorMarkers();
 3696|  30.5k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|  2.83M|{
  133|  2.83M|    return UTF8CharLength(static_cast<char>(character));
  134|  2.83M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  5.66M|{
  103|  5.66M|    if ((character & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 5.66M]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|  5.66M|    if ((character & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 5.66M]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|  5.66M|    if ((character & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 5.66M]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|  5.66M|    if ((character & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 5.66M]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|  5.66M|    if ((character & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 5.66M]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|  5.66M|    return 1_u8;
  129|  5.66M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  30.5k|    {
  184|  30.5k|        return m_DLXProgram;
  185|  30.5k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  30.5k|    {
  189|  30.5k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  30.5k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 655, False: 29.9k]
  ------------------
  192|    655|        {
  193|    655|            m_Processor.LoadProgram(m_DLXProgram);
  194|    655|        }
  195|  30.5k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  30.5k|    {
  209|  30.5k|        return m_CodeEditor;
  210|  30.5k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  1.11M|        {
  173|  1.11M|            PHI_ASSERT(index < 3u);
  174|       |
  175|  1.11M|            switch (index.unsafe())
  176|  1.11M|            {
  177|   459k|                case 0:
  ------------------
  |  Branch (177:17): [True: 459k, False: 654k]
  ------------------
  178|   459k|                    return m_Arg1Type;
  179|       |
  180|   328k|                case 1:
  ------------------
  |  Branch (180:17): [True: 328k, False: 785k]
  ------------------
  181|   328k|                    return m_Arg2Type;
  182|       |
  183|   325k|                case 2:
  ------------------
  |  Branch (183:17): [True: 325k, False: 788k]
  ------------------
  184|   325k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 1.11M]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  1.11M|#endif
  191|  1.11M|            }
  192|  1.11M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|   316k|        {
  199|   316k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|   316k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 314k, False: 2.91k]
  ------------------
  203|   314k|            {
  204|   314k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|   314k|            }
  206|   316k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 247k, False: 69.0k]
  ------------------
  207|   247k|            {
  208|   247k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|   247k|            }
  210|   316k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 186k, False: 130k]
  ------------------
  211|   186k|            {
  212|   186k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|   186k|            }
  214|       |
  215|   316k|            return number_of_argument_required;
  216|   316k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|   316k|        {
  225|   316k|            return m_Executor;
  226|   316k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  75.3k|    {
   38|  75.3k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  75.3k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  75.3k|                                         static_cast<underlying_t>(rhs));
   42|  75.3k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  75.3k|    {
   55|  75.3k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  75.3k|        return static_cast<underlying_t>(type & test) != 0;
   58|  75.3k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  1.27M|    {
  206|  1.27M|        switch (value)
  207|  1.27M|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   783k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|   783k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 783k, False: 486k]
  |  |  |  |  ------------------
  |  |  |  |  210|   783k|        return #name;
  |  |  ------------------
  |  |   16|   783k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  29.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 29.0k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  |  |  210|  29.0k|        return #name;
  |  |  ------------------
  |  |   17|  29.0k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  5.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.53k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.53k|        return #name;
  |  |  ------------------
  |  |   18|  53.6k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  53.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 53.6k, False: 1.21M]
  |  |  |  |  ------------------
  |  |  |  |  210|  53.6k|        return #name;
  |  |  ------------------
  |  |   19|  53.6k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  14.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 14.2k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  14.2k|        return #name;
  |  |  ------------------
  |  |   20|  14.2k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.74k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.74k|        return #name;
  |  |  ------------------
  |  |   21|  1.74k|                                                                                                   \
  |  |   22|  1.74k|    /* Sub */                                                                                      \
  |  |   23|  1.74k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    630|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 630, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    630|        return #name;
  |  |  ------------------
  |  |   24|  3.38k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  3.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 3.38k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  3.38k|        return #name;
  |  |  ------------------
  |  |   25|  13.1k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  13.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 13.1k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  13.1k|        return #name;
  |  |  ------------------
  |  |   26|  13.1k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.14k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.14k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.14k|        return #name;
  |  |  ------------------
  |  |   27|  4.77k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  4.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.77k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.77k|        return #name;
  |  |  ------------------
  |  |   28|  4.77k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.51k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.51k|        return #name;
  |  |  ------------------
  |  |   29|  1.51k|                                                                                                   \
  |  |   30|  1.51k|    /* Multiplication */                                                                           \
  |  |   31|  1.51k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    983|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 983, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    983|        return #name;
  |  |  ------------------
  |  |   32|  1.77k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.77k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.77k|        return #name;
  |  |  ------------------
  |  |   33|  1.97k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.97k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.97k|        return #name;
  |  |  ------------------
  |  |   34|  12.4k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|  12.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12.4k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  12.4k|        return #name;
  |  |  ------------------
  |  |   35|  12.4k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.85k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.85k|        return #name;
  |  |  ------------------
  |  |   36|  1.85k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    405|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 405, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    405|        return #name;
  |  |  ------------------
  |  |   37|    405|                                                                                                   \
  |  |   38|    405|    /* Division */                                                                                 \
  |  |   39|    967|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    967|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 967, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    967|        return #name;
  |  |  ------------------
  |  |   40|  12.1k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  12.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12.1k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  12.1k|        return #name;
  |  |  ------------------
  |  |   41|  12.1k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    911|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 911, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    911|        return #name;
  |  |  ------------------
  |  |   42|    920|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    920|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 920, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    920|        return #name;
  |  |  ------------------
  |  |   43|    920|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    566|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 566, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    566|        return #name;
  |  |  ------------------
  |  |   44|  14.4k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  14.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 14.4k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  14.4k|        return #name;
  |  |  ------------------
  |  |   45|  14.4k|                                                                                                   \
  |  |   46|  14.4k|    /* Shift left (logical) */                                                                     \
  |  |   47|  14.4k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.91k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.91k|        return #name;
  |  |  ------------------
  |  |   48|  1.91k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.31k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.31k|        return #name;
  |  |  ------------------
  |  |   49|  1.31k|                                                                                                   \
  |  |   50|  1.31k|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.31k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    314|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 314, False: 1.27M]
  |  |  |  |  ------------------
  |  |  |  |  210|    314|        return #name;
  |  |  ------------------
  |  |   52|  6.47k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  6.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 6.47k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  6.47k|        return #name;
  |  |  ------------------
  |  |   53|  6.47k|                                                                                                   \
  |  |   54|  6.47k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  16.0k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  16.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 16.0k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  16.0k|        return #name;
  |  |  ------------------
  |  |   56|  16.0k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    781|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 781, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    781|        return #name;
  |  |  ------------------
  |  |   57|    781|                                                                                                   \
  |  |   58|    781|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    781|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    337|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 337, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    337|        return #name;
  |  |  ------------------
  |  |   60|  2.23k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.23k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.23k|        return #name;
  |  |  ------------------
  |  |   61|  2.23k|                                                                                                   \
  |  |   62|  2.23k|    /* Logic */                                                                                    \
  |  |   63|  2.23k|                                                                                                   \
  |  |   64|  2.23k|    /* And */                                                                                      \
  |  |   65|  11.4k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  11.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 11.4k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  11.4k|        return #name;
  |  |  ------------------
  |  |   66|  11.4k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.17k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.17k|        return #name;
  |  |  ------------------
  |  |   67|  1.17k|                                                                                                   \
  |  |   68|  1.17k|    /* Or */                                                                                       \
  |  |   69|  5.85k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  5.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.85k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.85k|        return #name;
  |  |  ------------------
  |  |   70|  13.1k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  13.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 13.1k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  13.1k|        return #name;
  |  |  ------------------
  |  |   71|  13.1k|                                                                                                   \
  |  |   72|  13.1k|    /* XOR */                                                                                      \
  |  |   73|  13.1k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    952|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 952, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    952|        return #name;
  |  |  ------------------
  |  |   74|  1.32k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.32k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.32k|        return #name;
  |  |  ------------------
  |  |   75|  1.32k|                                                                                                   \
  |  |   76|  1.32k|    /* Set conditionals */                                                                         \
  |  |   77|  1.32k|                                                                                                   \
  |  |   78|  1.32k|    /* Less than */                                                                                \
  |  |   79|  1.60k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.60k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.60k|        return #name;
  |  |  ------------------
  |  |   80|  2.32k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.32k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.32k|        return #name;
  |  |  ------------------
  |  |   81|  4.20k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  4.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.20k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.20k|        return #name;
  |  |  ------------------
  |  |   82|  4.20k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.46k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.46k|        return #name;
  |  |  ------------------
  |  |   83|  4.64k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  4.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.64k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.64k|        return #name;
  |  |  ------------------
  |  |   84|  4.64k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.07k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.07k|        return #name;
  |  |  ------------------
  |  |   85|  1.07k|                                                                                                   \
  |  |   86|  1.07k|    /* Greater than */                                                                             \
  |  |   87|  1.07k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    889|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 889, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    889|        return #name;
  |  |  ------------------
  |  |   88|    889|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    745|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 745, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    745|        return #name;
  |  |  ------------------
  |  |   89|  12.7k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  12.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12.7k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  12.7k|        return #name;
  |  |  ------------------
  |  |   90|  12.7k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  12.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12.3k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  12.3k|        return #name;
  |  |  ------------------
  |  |   91|  12.3k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.35k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.35k|        return #name;
  |  |  ------------------
  |  |   92|  5.59k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  5.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.59k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.59k|        return #name;
  |  |  ------------------
  |  |   93|  5.59k|                                                                                                   \
  |  |   94|  5.59k|    /* Less than or equal */                                                                       \
  |  |   95|  5.59k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.58k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.58k|        return #name;
  |  |  ------------------
  |  |   96|  1.58k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.00k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.00k|        return #name;
  |  |  ------------------
  |  |   97|  1.00k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    764|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 764, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    764|        return #name;
  |  |  ------------------
  |  |   98|  2.37k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  2.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.37k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.37k|        return #name;
  |  |  ------------------
  |  |   99|  2.37k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.16k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.16k|        return #name;
  |  |  ------------------
  |  |  100|  1.89k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.89k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.89k|        return #name;
  |  |  ------------------
  |  |  101|  1.89k|                                                                                                   \
  |  |  102|  1.89k|    /* Greater than or equal */                                                                    \
  |  |  103|  14.6k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  14.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 14.6k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  14.6k|        return #name;
  |  |  ------------------
  |  |  104|  14.6k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.17k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.17k|        return #name;
  |  |  ------------------
  |  |  105|  4.60k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  4.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.60k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.60k|        return #name;
  |  |  ------------------
  |  |  106|  4.60k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.43k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.43k|        return #name;
  |  |  ------------------
  |  |  107|  1.43k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    926|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 926, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    926|        return #name;
  |  |  ------------------
  |  |  108|  25.0k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  25.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 25.0k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  |  |  210|  25.0k|        return #name;
  |  |  ------------------
  |  |  109|  25.0k|                                                                                                   \
  |  |  110|  25.0k|    /* Equal */                                                                                    \
  |  |  111|  25.0k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.83k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.83k|        return #name;
  |  |  ------------------
  |  |  112|  1.83k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.35k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.35k|        return #name;
  |  |  ------------------
  |  |  113|  8.79k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  8.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.79k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.79k|        return #name;
  |  |  ------------------
  |  |  114|  11.5k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  11.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 11.5k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  11.5k|        return #name;
  |  |  ------------------
  |  |  115|  11.5k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.06k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.06k|        return #name;
  |  |  ------------------
  |  |  116|  1.06k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    771|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 771, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    771|        return #name;
  |  |  ------------------
  |  |  117|    771|                                                                                                   \
  |  |  118|    771|    /* Not equal */                                                                                \
  |  |  119|  1.22k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.22k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.22k|        return #name;
  |  |  ------------------
  |  |  120|  1.92k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.92k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.92k|        return #name;
  |  |  ------------------
  |  |  121|  1.92k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    291|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 291, False: 1.27M]
  |  |  |  |  ------------------
  |  |  |  |  210|    291|        return #name;
  |  |  ------------------
  |  |  122|  1.69k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.69k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.69k|        return #name;
  |  |  ------------------
  |  |  123|  1.69k|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    367|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 367, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    367|        return #name;
  |  |  ------------------
  |  |  124|    519|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    519|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 519, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    519|        return #name;
  |  |  ------------------
  |  |  125|    519|                                                                                                   \
  |  |  126|    519|    /* Conditional branching */                                                                    \
  |  |  127|  1.24k|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.24k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.24k|        return #name;
  |  |  ------------------
  |  |  128|  1.46k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.46k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.46k|        return #name;
  |  |  ------------------
  |  |  129|  1.46k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    742|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 742, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    742|        return #name;
  |  |  ------------------
  |  |  130|  8.55k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  8.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.55k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.55k|        return #name;
  |  |  ------------------
  |  |  131|  8.55k|                                                                                                   \
  |  |  132|  8.55k|    /* Unconditional branching */                                                                  \
  |  |  133|  8.55k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|  7.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 7.06k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  7.06k|        return #name;
  |  |  ------------------
  |  |  134|  7.06k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  1.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.36k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.36k|        return #name;
  |  |  ------------------
  |  |  135|  1.36k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    957|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 957, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    957|        return #name;
  |  |  ------------------
  |  |  136|    957|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    437|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 437, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    437|        return #name;
  |  |  ------------------
  |  |  137|    437|                                                                                                   \
  |  |  138|    437|    /* Loading data */                                                                             \
  |  |  139|  2.79k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  2.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.79k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.79k|        return #name;
  |  |  ------------------
  |  |  140|  2.79k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    575|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 575, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    575|        return #name;
  |  |  ------------------
  |  |  141|    958|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    958|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 958, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    958|        return #name;
  |  |  ------------------
  |  |  142|  1.18k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.18k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.18k|        return #name;
  |  |  ------------------
  |  |  143|  1.18k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.18k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.18k|        return #name;
  |  |  ------------------
  |  |  144|  12.4k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  12.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12.4k, False: 1.25M]
  |  |  |  |  ------------------
  |  |  |  |  210|  12.4k|        return #name;
  |  |  ------------------
  |  |  145|  12.4k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    402|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 402, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    402|        return #name;
  |  |  ------------------
  |  |  146|    689|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    689|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 689, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    689|        return #name;
  |  |  ------------------
  |  |  147|    973|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    973|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 973, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    973|        return #name;
  |  |  ------------------
  |  |  148|    973|                                                                                                   \
  |  |  149|    973|    /* Storing data */                                                                             \
  |  |  150|  2.24k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  2.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.24k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.24k|        return #name;
  |  |  ------------------
  |  |  151|  5.22k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  5.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.22k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.22k|        return #name;
  |  |  ------------------
  |  |  152|  5.22k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  1.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.74k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.74k|        return #name;
  |  |  ------------------
  |  |  153|  1.74k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.24k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.24k|        return #name;
  |  |  ------------------
  |  |  154|  1.24k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    537|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 537, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    537|        return #name;
  |  |  ------------------
  |  |  155|  7.67k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  7.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 7.67k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  7.67k|        return #name;
  |  |  ------------------
  |  |  156|  7.67k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    261|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 261, False: 1.27M]
  |  |  |  |  ------------------
  |  |  |  |  210|    261|        return #name;
  |  |  ------------------
  |  |  157|    790|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    790|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 790, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    790|        return #name;
  |  |  ------------------
  |  |  158|    790|                                                                                                   \
  |  |  159|    790|    /* Moving data */                                                                              \
  |  |  160|  5.59k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  5.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.59k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.59k|        return #name;
  |  |  ------------------
  |  |  161|  5.59k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.85k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.85k|        return #name;
  |  |  ------------------
  |  |  162|  1.85k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|    976|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 976, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    976|        return #name;
  |  |  ------------------
  |  |  163|  1.56k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|  1.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.56k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.56k|        return #name;
  |  |  ------------------
  |  |  164|  1.56k|                                                                                                   \
  |  |  165|  1.56k|    /* Converting data */                                                                          \
  |  |  166|  1.56k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    628|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 628, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    628|        return #name;
  |  |  ------------------
  |  |  167|    628|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    249|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 249, False: 1.27M]
  |  |  |  |  ------------------
  |  |  |  |  210|    249|        return #name;
  |  |  ------------------
  |  |  168|  1.20k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|  1.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.20k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.20k|        return #name;
  |  |  ------------------
  |  |  169|  1.20k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    532|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 532, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    532|        return #name;
  |  |  ------------------
  |  |  170|    735|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    735|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 735, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|    735|        return #name;
  |  |  ------------------
  |  |  171|    735|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 224, False: 1.27M]
  |  |  |  |  ------------------
  |  |  |  |  210|    224|        return #name;
  |  |  ------------------
  |  |  172|    224|                                                                                                   \
  |  |  173|    224|    /* Other */                                                                                    \
  |  |  174|  23.5k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  23.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 23.5k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  |  |  210|  23.5k|        return #name;
  |  |  ------------------
  |  |  175|  23.5k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.49k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.49k|        return #name;
  |  |  ------------------
  |  |  176|  5.65k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|  5.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.65k, False: 1.26M]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.65k|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 1.27M]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  1.27M|        }
  219|  1.27M|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|   169k|    {
   31|   169k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 1.09k, False: 168k]
  ------------------
   32|  1.09k|        {
   33|  1.09k|            return true;
   34|  1.09k|        }
   35|       |
   36|   168k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 431, False: 168k]
  ------------------
   37|    431|        {
   38|    431|            return true;
   39|    431|        }
   40|       |
   41|   168k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 28.9k, False: 139k]
  ------------------
   42|  28.9k|        {
   43|  28.9k|            return true;
   44|  28.9k|        }
   45|       |
   46|   139k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 139k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|   139k|        return false;
   52|   139k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   139k|    {
   56|   139k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 139k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   139k|        const char first_char = token.at(0u);
   62|       |
   63|   139k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 33.8k, False: 105k]
  ------------------
   64|  33.8k|        {
   65|  33.8k|            return phi::is_alpha(first_char);
   66|  33.8k|        }
   67|       |
   68|   105k|        phi::boolean just_under_scores = (first_char == '_');
   69|   105k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 17.6k, False: 87.6k]
  |  Branch (69:13): [True: 17.0k, False: 88.2k]
  |  Branch (69:43): [True: 17.0k, False: 617]
  ------------------
   70|  17.0k|        {
   71|  17.0k|            return false;
   72|  17.0k|        }
   73|       |
   74|   616k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 549k, False: 66.6k]
  ------------------
   75|   549k|        {
   76|   549k|            const char c{token.at(index)};
   77|       |
   78|   549k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 207k, False: 342k]
  ------------------
   79|   207k|            {
   80|   207k|                just_under_scores = false;
   81|   207k|            }
   82|   342k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 320k, False: 21.5k]
  ------------------
   83|   320k|            {
   84|   320k|                continue;
   85|   320k|            }
   86|  21.5k|            else
   87|  21.5k|            {
   88|  21.5k|                return false;
   89|  21.5k|            }
   90|   549k|        }
   91|       |
   92|  66.6k|        return !just_under_scores;
   93|  88.2k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|  2.47M|    {
   99|  2.47M|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 2.47M]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|  2.47M|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 177k, False: 2.29M]
  ------------------
  105|   177k|        {
  106|   177k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 103k, False: 73.5k]
  ------------------
  107|   103k|            {
  108|   103k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|   103k|            }
  110|       |
  111|  73.5k|            return {};
  112|   177k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  2.29M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 15.4k, False: 2.28M]
  ------------------
  116|  15.4k|        {
  117|  15.4k|            return {};
  118|  15.4k|        }
  119|       |
  120|  2.28M|        phi::int32_t number{0};
  121|  2.28M|        phi::boolean is_negative{false};
  122|  2.28M|        phi::boolean starts_with_zero{false};
  123|  2.28M|        phi::boolean parsing_binary{false};
  124|  2.28M|        phi::boolean parsing_octal{false};
  125|  2.28M|        phi::boolean parsing_hexadecimal{false};
  126|  2.28M|        phi::boolean parsed_something{false};
  127|  2.28M|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|  2.56M|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 2.50M, False: 58.2k]
  ------------------
  132|  2.50M|        {
  133|  2.50M|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|  2.50M|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 2.28M, False: 224k]
  ------------------
  137|  2.28M|            {
  138|  2.28M|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 12.5k, False: 2.27M]
  ------------------
  139|  12.5k|                {
  140|  12.5k|                    continue;
  141|  12.5k|                }
  142|       |
  143|  2.27M|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 15.7k, False: 2.25M]
  ------------------
  144|  15.7k|                {
  145|  15.7k|                    is_negative = true;
  146|  15.7k|                    continue;
  147|  15.7k|                }
  148|       |
  149|  2.25M|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 82.5k, False: 2.17M]
  ------------------
  150|  82.5k|                {
  151|  82.5k|                    starts_with_zero = true;
  152|  82.5k|                    continue;
  153|  82.5k|                }
  154|       |
  155|  2.17M|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 18.0k, False: 2.15M]
  ------------------
  156|  18.0k|                {
  157|  18.0k|                    return {};
  158|  18.0k|                }
  159|  2.17M|            }
  160|       |
  161|       |            // Second character
  162|  2.37M|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 114k, False: 2.26M]
  ------------------
  163|   114k|            {
  164|   114k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 82.5k, False: 32.1k]
  ------------------
  165|  82.5k|                {
  166|       |                    // Binary
  167|  82.5k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 14.1k, False: 68.4k]
  |  Branch (167:37): [True: 372, False: 68.0k]
  ------------------
  168|  14.5k|                    {
  169|  14.5k|                        parsing_binary = true;
  170|  14.5k|                        continue;
  171|  14.5k|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  68.0k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 20.3k, False: 47.6k]
  |  Branch (174:37): [True: 495, False: 47.1k]
  ------------------
  175|  20.8k|                    {
  176|  20.8k|                        parsing_hexadecimal = true;
  177|  20.8k|                        continue;
  178|  20.8k|                    }
  179|       |
  180|       |                    // Octal
  181|  47.1k|                    parsing_octal = true;
  182|  47.1k|                }
  183|   114k|            }
  184|       |
  185|       |            // Handle separators
  186|  2.34M|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 9.66k, False: 2.33M]
  ------------------
  187|  9.66k|            {
  188|  9.66k|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 143, False: 9.51k]
  ------------------
  189|    143|                {
  190|    143|                    return {};
  191|    143|                }
  192|       |
  193|  9.51k|                parsed_separator = true;
  194|  9.51k|                continue;
  195|  9.66k|            }
  196|       |
  197|       |            // Check for over/underflow
  198|  2.33M|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 15.9k, False: 2.31M]
  |  Branch (198:32): [True: 0, False: 15.9k]
  ------------------
  199|      0|            {
  200|       |                // Would underflow
  201|      0|                return {};
  202|      0|            }
  203|  2.33M|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 2.31M, False: 15.9k]
  |  Branch (203:17): [True: 0, False: 2.33M]
  |  Branch (203:33): [True: 0, False: 2.31M]
  ------------------
  204|      0|            {
  205|       |                // Would overflow
  206|      0|                return {};
  207|      0|            }
  208|       |
  209|  2.33M|            parsed_separator = false;
  210|  2.33M|            parsed_something = true;
  211|       |
  212|  2.33M|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 23.6k, False: 2.31M]
  ------------------
  213|  23.6k|            {
  214|  23.6k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 450, False: 23.1k]
  ------------------
  215|    450|                {
  216|    450|                    return {};
  217|    450|                }
  218|       |
  219|  23.1k|                number <<= 1;
  220|  23.1k|                number |= (c - '0');
  221|  23.1k|            }
  222|  2.31M|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 106k, False: 2.20M]
  ------------------
  223|   106k|            {
  224|   106k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 37.6k, False: 68.3k]
  ------------------
  225|  37.6k|                {
  226|  37.6k|                    return {};
  227|  37.6k|                }
  228|       |
  229|  68.3k|                number <<= 3;
  230|  68.3k|                number |= (c - '0');
  231|  68.3k|            }
  232|  2.20M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 17.4k, False: 2.18M]
  ------------------
  233|  17.4k|            {
  234|  17.4k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 1.59k, False: 15.8k]
  ------------------
  235|  1.59k|                {
  236|  1.59k|                    return {};
  237|  1.59k|                }
  238|       |
  239|  15.8k|                number <<= 4;
  240|  15.8k|                number |= phi::hex_digit_value(c).unsafe();
  241|  15.8k|            }
  242|  2.18M|            else
  243|  2.18M|            {
  244|  2.18M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 2.16M, False: 25.5k]
  ------------------
  245|  2.16M|                {
  246|  2.16M|                    return {};
  247|  2.16M|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  25.5k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 24.4k, False: 1.14k]
  |  Branch (250:36): [True: 5.75k, False: 18.6k]
  ------------------
  251|  5.75k|                {
  252|  5.75k|                    return {};
  253|  5.75k|                }
  254|       |
  255|  19.7k|                number *= 10;
  256|  19.7k|                number += (c - '0');
  257|  19.7k|            }
  258|  2.33M|        }
  259|       |
  260|  58.2k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 46.7k, False: 11.4k]
  ------------------
  261|  46.7k|        {
  262|       |            // Check for over/underflow
  263|  46.7k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 14.4k, False: 32.3k]
  |  Branch (263:32): [True: 0, False: 14.4k]
  ------------------
  264|      0|            {
  265|       |                // Would underflow
  266|      0|                return {};
  267|      0|            }
  268|  46.7k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 32.3k, False: 14.4k]
  |  Branch (268:17): [True: 0, False: 46.7k]
  |  Branch (268:33): [True: 0, False: 32.3k]
  ------------------
  269|      0|            {
  270|       |                // Would overflow
  271|      0|                return {};
  272|      0|            }
  273|       |
  274|  46.7k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 14.4k, False: 32.3k]
  ------------------
  275|  14.4k|            {
  276|  14.4k|                return static_cast<phi::int16_t>(-number);
  277|  14.4k|            }
  278|       |
  279|  32.3k|            return static_cast<phi::int16_t>(number);
  280|  46.7k|        }
  281|       |
  282|  11.4k|        return {};
  283|  58.2k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|   258k|    {
   97|   258k|        switch (value)
   98|   258k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  42.9k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  42.9k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 42.9k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  101|  42.9k|        return #name;
  |  |  ------------------
  |  |   14|   190k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|   190k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 190k, False: 67.3k]
  |  |  |  |  ------------------
  |  |  |  |  101|   190k|        return #name;
  |  |  ------------------
  |  |   15|   190k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|    132|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 132, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    132|        return #name;
  |  |  ------------------
  |  |   16|  2.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|  2.17k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.17k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.17k|        return #name;
  |  |  ------------------
  |  |   17|  2.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|    182|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 182, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    182|        return #name;
  |  |  ------------------
  |  |   18|    227|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|    227|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 227, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    227|        return #name;
  |  |  ------------------
  |  |   19|    227|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|     38|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 38, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     38|        return #name;
  |  |  ------------------
  |  |   20|  2.89k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|  2.89k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.89k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.89k|        return #name;
  |  |  ------------------
  |  |   21|  2.89k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|    918|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 918, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    918|        return #name;
  |  |  ------------------
  |  |   22|    918|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|    139|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 139, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    139|        return #name;
  |  |  ------------------
  |  |   23|    139|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     23|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 23, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     23|        return #name;
  |  |  ------------------
  |  |   24|     23|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|     10|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 10, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     10|        return #name;
  |  |  ------------------
  |  |   25|     39|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|     39|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 39, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     39|        return #name;
  |  |  ------------------
  |  |   26|     39|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|     10|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 10, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     10|        return #name;
  |  |  ------------------
  |  |   27|  7.13k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|  7.13k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7.13k, False: 250k]
  |  |  |  |  ------------------
  |  |  |  |  101|  7.13k|        return #name;
  |  |  ------------------
  |  |   28|  7.13k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|     95|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 95, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     95|        return #name;
  |  |  ------------------
  |  |   29|     95|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|     90|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 90, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     90|        return #name;
  |  |  ------------------
  |  |   30|  1.02k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|  1.02k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.02k, False: 256k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.02k|        return #name;
  |  |  ------------------
  |  |   31|  1.02k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     74|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 74, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     74|        return #name;
  |  |  ------------------
  |  |   32|    391|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|    391|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 391, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    391|        return #name;
  |  |  ------------------
  |  |   33|    391|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    340|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 340, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    340|        return #name;
  |  |  ------------------
  |  |   34|    340|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|     49|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 49, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     49|        return #name;
  |  |  ------------------
  |  |   35|    112|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|    112|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 112, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    112|        return #name;
  |  |  ------------------
  |  |   36|    112|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     96|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 96, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     96|        return #name;
  |  |  ------------------
  |  |   37|    257|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|    257|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 257, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    257|        return #name;
  |  |  ------------------
  |  |   38|    257|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|    240|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 240, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    240|        return #name;
  |  |  ------------------
  |  |   39|  2.03k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|  2.03k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.03k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.03k|        return #name;
  |  |  ------------------
  |  |   40|  2.03k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    203|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 203, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    203|        return #name;
  |  |  ------------------
  |  |   41|    203|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     31|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 31, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|     31|        return #name;
  |  |  ------------------
  |  |   42|    117|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|    117|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 117, False: 257k]
  |  |  |  |  ------------------
  |  |  |  |  101|    117|        return #name;
  |  |  ------------------
  |  |   43|  3.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|  3.71k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3.71k, False: 254k]
  |  |  |  |  ------------------
  |  |  |  |  101|  3.71k|        return #name;
  |  |  ------------------
  |  |   44|  3.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|  1.59k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.59k, False: 256k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.59k|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 258k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|   258k|        }
  110|   258k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  42.5k|    {
  134|  42.5k|        switch (value)
  135|  42.5k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  19.7k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|  19.7k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 19.7k, False: 22.7k]
  |  |  |  |  ------------------
  |  |  |  |  138|  19.7k|        return #name;
  |  |  ------------------
  |  |   48|  19.7k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    504|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 504, False: 42.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|    504|        return #name;
  |  |  ------------------
  |  |   49|    504|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|    321|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 321, False: 42.2k]
  |  |  |  |  ------------------
  |  |  |  |  138|    321|        return #name;
  |  |  ------------------
  |  |   50|  14.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|  14.4k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14.4k, False: 28.1k]
  |  |  |  |  ------------------
  |  |  |  |  138|  14.4k|        return #name;
  |  |  ------------------
  |  |   51|  14.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 26, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     26|        return #name;
  |  |  ------------------
  |  |   52|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 17, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     17|        return #name;
  |  |  ------------------
  |  |   53|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 17, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     17|        return #name;
  |  |  ------------------
  |  |   54|     35|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|     35|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 35, False: 42.4k]
  |  |  |  |  ------------------
  |  |  |  |  138|     35|        return #name;
  |  |  ------------------
  |  |   55|     58|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|     58|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 58, False: 42.4k]
  |  |  |  |  ------------------
  |  |  |  |  138|     58|        return #name;
  |  |  ------------------
  |  |   56|     58|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|     57|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 57, False: 42.4k]
  |  |  |  |  ------------------
  |  |  |  |  138|     57|        return #name;
  |  |  ------------------
  |  |   57|    225|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|    225|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 225, False: 42.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|    225|        return #name;
  |  |  ------------------
  |  |   58|    225|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 20, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     20|        return #name;
  |  |  ------------------
  |  |   59|  3.43k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|  3.43k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3.43k, False: 39.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|  3.43k|        return #name;
  |  |  ------------------
  |  |   60|  3.43k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.26k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.26k, False: 41.2k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.26k|        return #name;
  |  |  ------------------
  |  |   61|  1.26k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|    825|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 825, False: 41.7k]
  |  |  |  |  ------------------
  |  |  |  |  138|    825|        return #name;
  |  |  ------------------
  |  |   62|    825|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 26, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     26|        return #name;
  |  |  ------------------
  |  |   63|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   64|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 18, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     18|        return #name;
  |  |  ------------------
  |  |   65|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 9, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      9|        return #name;
  |  |  ------------------
  |  |   66|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   67|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   68|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   69|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 11, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     11|        return #name;
  |  |  ------------------
  |  |   70|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|    176|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 176, False: 42.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|    176|        return #name;
  |  |  ------------------
  |  |   71|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|     14|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     14|        return #name;
  |  |  ------------------
  |  |   74|    402|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|    402|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 402, False: 42.1k]
  |  |  |  |  ------------------
  |  |  |  |  138|    402|        return #name;
  |  |  ------------------
  |  |   75|    402|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 10, False: 42.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|     10|        return #name;
  |  |  ------------------
  |  |   76|     52|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|     52|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 52, False: 42.4k]
  |  |  |  |  ------------------
  |  |  |  |  138|     52|        return #name;
  |  |  ------------------
  |  |   77|    243|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|    243|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 243, False: 42.2k]
  |  |  |  |  ------------------
  |  |  |  |  138|    243|        return #name;
  |  |  ------------------
  |  |   78|    552|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|    552|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 552, False: 41.9k]
  |  |  |  |  ------------------
  |  |  |  |  138|    552|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 42.5k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  42.5k|        }
  147|  42.5k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  55.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  55.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.65M, False: 0]
  ------------------
   64|  2.65M|            {
   65|  2.65M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 55.0k, False: 2.59M]
  ------------------
   66|  55.0k|                {
   67|  55.0k|                    return &token;
   68|  55.0k|                }
   69|  2.65M|            }
   70|       |
   71|      0|            return nullptr;
   72|  55.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  6.29M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  6.29M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  6.29M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  3.38M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  3.38M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.38M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   314k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   314k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   314k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|   316k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  33.8k|    {
   22|  33.8k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  33.8k|        switch (argument_number.unsafe())
   25|  33.8k|        {
   26|  19.4k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 19.4k, False: 14.4k]
  ------------------
   27|  19.4k|                m_Arg1 = argument;
   28|  19.4k|                break;
   29|  8.82k|            case 1u:
  ------------------
  |  Branch (29:13): [True: 8.82k, False: 25.0k]
  ------------------
   30|  8.82k|                m_Arg2 = argument;
   31|  8.82k|                break;
   32|  5.59k|            case 2u:
  ------------------
  |  Branch (32:13): [True: 5.59k, False: 28.2k]
  ------------------
   33|  5.59k|                m_Arg3 = argument;
   34|  5.59k|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 33.8k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  33.8k|#endif
   39|  33.8k|        }
   40|  33.8k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|   984k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  24.4k|    {
  167|  24.4k|        InstructionArgument arg;
  168|  24.4k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  24.4k|        arg.register_int.register_id = id;
  170|  24.4k|        return arg;
  171|  24.4k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|  5.22k|    {
  175|  5.22k|        InstructionArgument arg;
  176|  5.22k|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|  5.22k|        arg.register_float.register_id = id;
  178|  5.22k|        return arg;
  179|  5.22k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|  2.06k|    {
  183|  2.06k|        InstructionArgument arg;
  184|  2.06k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|  2.06k|        arg.immediate_value.signed_value = value;
  186|  2.06k|        return arg;
  187|  2.06k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  2.06k|    {
  201|  2.06k|        InstructionArgument arg;
  202|  2.06k|        arg.m_Type           = ArgumentType::Label;
  203|  2.06k|        arg.label.label_name = label_name;
  204|  2.06k|        return arg;
  205|  2.06k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|   316k|    {
  450|   316k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|   316k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|  2.12M|    {
   22|  2.12M|        switch (token.length().unsafe())
   23|  2.12M|        {
   24|       |            // 1 character OpCodes
   25|   125k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 125k, False: 2.00M]
  ------------------
   26|   125k|                const char c1 = token[0u];
   27|       |
   28|   125k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 50.5k, False: 75.0k]
  ------------------
   29|  50.5k|                {
   30|  50.5k|                    return OpCode::J;
   31|  50.5k|                }
   32|  75.0k|                break;
   33|   125k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|   196k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 196k, False: 1.92M]
  ------------------
   37|   196k|                const char c1 = token[0u];
   38|   196k|                const char c2 = token[1u];
   39|       |
   40|   196k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 108k, False: 87.5k]
  ------------------
   41|   196k|                {
   42|  1.45k|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 1.45k, False: 194k]
  ------------------
   43|  24.9k|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 23.5k, False: 172k]
  ------------------
   44|  24.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 1.58k, False: 23.4k]
  ------------------
   45|  1.58k|                        {
   46|  1.58k|                            return OpCode::JR;
   47|  1.58k|                        }
   48|  23.4k|                        break;
   49|       |
   50|  23.4k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 17.9k, False: 178k]
  ------------------
   51|  22.2k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 4.25k, False: 191k]
  ------------------
   52|  22.2k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 895, False: 21.3k]
  ------------------
   53|  22.2k|                        {
   54|    575|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 575, False: 21.6k]
  ------------------
   55|  2.85k|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 2.27k, False: 19.9k]
  ------------------
   56|  2.85k|                                return OpCode::LB;
   57|    978|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 978, False: 21.2k]
  ------------------
   58|  1.72k|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 747, False: 21.4k]
  ------------------
   59|  1.72k|                                return OpCode::LD;
   60|    689|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 689, False: 21.5k]
  ------------------
   61|    979|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 290, False: 21.9k]
  ------------------
   62|    979|                                return OpCode::LF;
   63|  1.17k|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 1.17k, False: 21.0k]
  ------------------
   64|  1.33k|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 155, False: 22.0k]
  ------------------
   65|  1.33k|                                return OpCode::LH;
   66|  12.4k|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 12.4k, False: 9.75k]
  ------------------
   67|  14.4k|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 1.96k, False: 20.2k]
  ------------------
   68|  14.4k|                                return OpCode::LW;
   69|  22.2k|                        }
   70|    895|                        break;
   71|  6.43k|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 6.43k, False: 189k]
  ------------------
   72|  9.87k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 3.44k, False: 192k]
  ------------------
   73|  9.87k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 9.05k, False: 824]
  ------------------
   74|  9.05k|                        {
   75|  9.05k|                            return OpCode::OR;
   76|  9.05k|                        }
   77|    824|                        break;
   78|  28.6k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 28.6k, False: 167k]
  ------------------
   79|  30.4k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 1.83k, False: 194k]
  ------------------
   80|  30.4k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 8.31k, False: 22.1k]
  ------------------
   81|  30.4k|                        {
   82|  2.24k|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 2.24k, False: 28.2k]
  ------------------
   83|  2.83k|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 593, False: 29.8k]
  ------------------
   84|  2.83k|                                return OpCode::SB;
   85|    792|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 792, False: 29.6k]
  ------------------
   86|  1.15k|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 364, False: 30.0k]
  ------------------
   87|  1.15k|                                return OpCode::SD;
   88|    261|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 261, False: 30.1k]
  ------------------
   89|    751|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 490, False: 29.9k]
  ------------------
   90|    751|                                return OpCode::SF;
   91|  1.66k|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 1.66k, False: 28.7k]
  ------------------
   92|  6.93k|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 5.27k, False: 25.1k]
  ------------------
   93|  6.93k|                                return OpCode::SH;
   94|  9.92k|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 9.92k, False: 20.5k]
  ------------------
   95|  10.4k|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 541, False: 29.9k]
  ------------------
   96|  10.4k|                                return OpCode::SW;
   97|  30.4k|                        }
   98|  8.31k|                        break;
   99|   196k|                }
  100|   142k|                break;
  101|   196k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  1.09M|            case 3: {
  ------------------
  |  Branch (104:13): [True: 1.09M, False: 1.02M]
  ------------------
  105|  1.09M|                const char c1 = token[0u];
  106|  1.09M|                const char c2 = token[1u];
  107|  1.09M|                const char c3 = token[2u];
  108|       |
  109|  1.09M|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 46.2k, False: 1.05M]
  ------------------
  110|  1.09M|                {
  111|   771k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 771k, False: 325k]
  ------------------
  112|   772k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 1.06k, False: 1.09M]
  ------------------
  113|   772k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 758k, False: 14.1k]
  |  Branch (113:29): [True: 754k, False: 18.2k]
  |  Branch (113:45): [True: 754k, False: 4.09k]
  ------------------
  114|   754k|                        {
  115|   754k|                            return OpCode::ADD;
  116|   754k|                        }
  117|  18.2k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 12.9k, False: 5.33k]
  |  Branch (117:34): [True: 11.8k, False: 6.41k]
  |  Branch (117:50): [True: 11.8k, False: 1.08k]
  ------------------
  118|  11.8k|                        {
  119|  11.8k|                            return OpCode::AND;
  120|  11.8k|                        }
  121|  6.41k|                        break;
  122|       |
  123|  6.41k|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 1.26k, False: 1.09M]
  ------------------
  124|  1.92k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 659, False: 1.09M]
  ------------------
  125|  1.92k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 1.48k, False: 436]
  |  Branch (125:29): [True: 1.31k, False: 610]
  |  Branch (125:45): [True: 1.31k, False: 174]
  ------------------
  126|  1.31k|                        {
  127|  1.31k|                            return OpCode::DIV;
  128|  1.31k|                        }
  129|    610|                        break;
  130|       |
  131|  2.83k|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 2.83k, False: 1.09M]
  ------------------
  132|  3.02k|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 188, False: 1.09M]
  ------------------
  133|  3.02k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 2.89k, False: 136]
  ------------------
  134|  2.89k|                        {
  135|  2.89k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 937, False: 1.95k]
  ------------------
  136|    937|                            {
  137|    937|                                return OpCode::EQD;
  138|    937|                            }
  139|  1.95k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 1.80k, False: 151]
  ------------------
  140|  1.80k|                            {
  141|  1.80k|                                return OpCode::EQF;
  142|  1.80k|                            }
  143|  2.89k|                        }
  144|    287|                        break;
  145|       |
  146|  34.4k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 34.4k, False: 1.06M]
  ------------------
  147|  53.9k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 19.4k, False: 1.07M]
  ------------------
  148|  53.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 39.1k, False: 14.8k]
  ------------------
  149|  39.1k|                        {
  150|  39.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 26.0k, False: 13.1k]
  ------------------
  151|  26.0k|                            {
  152|  26.0k|                                return OpCode::GED;
  153|  26.0k|                            }
  154|  13.1k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 4.81k, False: 8.31k]
  ------------------
  155|  4.81k|                            {
  156|  4.81k|                                return OpCode::GEF;
  157|  4.81k|                            }
  158|  39.1k|                        }
  159|  14.8k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 10.3k, False: 4.46k]
  ------------------
  160|  10.3k|                        {
  161|  10.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 6.56k, False: 3.81k]
  ------------------
  162|  6.56k|                            {
  163|  6.56k|                                return OpCode::GTD;
  164|  6.56k|                            }
  165|  3.81k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 1.74k, False: 2.06k]
  ------------------
  166|  1.74k|                            {
  167|  1.74k|                                return OpCode::GTF;
  168|  1.74k|                            }
  169|  3.81k|                        }
  170|  14.8k|                        break;
  171|       |
  172|  14.8k|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 968, False: 1.09M]
  ------------------
  173|  8.93k|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 7.96k, False: 1.08M]
  ------------------
  174|  8.93k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 7.23k, False: 1.70k]
  |  Branch (174:29): [True: 6.84k, False: 2.09k]
  |  Branch (174:45): [True: 6.84k, False: 389]
  ------------------
  175|  6.84k|                        {
  176|  6.84k|                            return OpCode::JAL;
  177|  6.84k|                        }
  178|  2.09k|                        break;
  179|       |
  180|  21.3k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 21.3k, False: 1.07M]
  ------------------
  181|  31.4k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 10.1k, False: 1.08M]
  ------------------
  182|  31.4k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 197, False: 31.2k]
  ------------------
  183|  31.4k|                        {
  184|    958|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 958, False: 30.5k]
  ------------------
  185|  1.55k|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 597, False: 30.8k]
  ------------------
  186|  1.55k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 1.09k, False: 458]
  ------------------
  187|  1.09k|                                {
  188|  1.09k|                                    return OpCode::LBU;
  189|  1.09k|                                }
  190|    458|                                break;
  191|       |
  192|  3.06k|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 3.06k, False: 28.4k]
  ------------------
  193|  3.49k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 427, False: 31.0k]
  ------------------
  194|  3.49k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 2.09k, False: 1.40k]
  ------------------
  195|  2.09k|                                {
  196|  2.09k|                                    return OpCode::LED;
  197|  2.09k|                                }
  198|  1.40k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 1.30k, False: 94]
  ------------------
  199|  1.30k|                                {
  200|  1.30k|                                    return OpCode::LEF;
  201|  1.30k|                                }
  202|     94|                                break;
  203|       |
  204|  4.04k|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 4.04k, False: 27.4k]
  ------------------
  205|  8.83k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 4.78k, False: 26.6k]
  ------------------
  206|  8.83k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 2.99k, False: 5.83k]
  ------------------
  207|  2.99k|                                {
  208|  2.99k|                                    return OpCode::LHI;
  209|  2.99k|                                }
  210|  5.83k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 3.98k, False: 1.84k]
  ------------------
  211|  3.98k|                                {
  212|  3.98k|                                    return OpCode::LHU;
  213|  3.98k|                                }
  214|  1.84k|                                break;
  215|       |
  216|  5.70k|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 5.70k, False: 25.7k]
  ------------------
  217|  12.7k|                            case 't':
  ------------------
  |  Branch (217:29): [True: 7.07k, False: 24.4k]
  ------------------
  218|  12.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 5.61k, False: 7.16k]
  ------------------
  219|  5.61k|                                {
  220|  5.61k|                                    return OpCode::LTD;
  221|  5.61k|                                }
  222|  7.16k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 5.87k, False: 1.29k]
  ------------------
  223|  5.87k|                                {
  224|  5.87k|                                    return OpCode::LTF;
  225|  5.87k|                                }
  226|  1.29k|                                break;
  227|       |
  228|  1.29k|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 635, False: 30.8k]
  ------------------
  229|  4.62k|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 3.98k, False: 27.4k]
  ------------------
  230|  4.62k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 4.14k, False: 480]
  ------------------
  231|  4.14k|                                {
  232|  4.14k|                                    return OpCode::LWU;
  233|  4.14k|                                }
  234|    480|                                break;
  235|  31.4k|                        }
  236|  4.37k|                        break;
  237|       |
  238|  6.78k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 6.78k, False: 1.09M]
  ------------------
  239|  11.1k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 4.32k, False: 1.09M]
  ------------------
  240|  11.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 2.45k, False: 8.65k]
  ------------------
  241|  2.45k|                        {
  242|  2.45k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 755, False: 1.69k]
  ------------------
  243|    755|                            {
  244|    755|                                return OpCode::NED;
  245|    755|                            }
  246|  1.69k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 833, False: 864]
  ------------------
  247|    833|                            {
  248|    833|                                return OpCode::NEF;
  249|    833|                            }
  250|  2.45k|                        }
  251|  8.65k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 8.32k, False: 334]
  |  Branch (251:34): [True: 7.09k, False: 1.56k]
  |  Branch (251:50): [True: 7.09k, False: 1.22k]
  ------------------
  252|  7.09k|                        {
  253|  7.09k|                            return OpCode::NOP;
  254|  7.09k|                        }
  255|       |
  256|  2.42k|                        break;
  257|       |
  258|  13.2k|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 13.2k, False: 1.08M]
  ------------------
  259|  17.0k|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 3.72k, False: 1.09M]
  ------------------
  260|  17.0k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 16.6k, False: 370]
  |  Branch (260:29): [True: 13.7k, False: 3.30k]
  |  Branch (260:45): [True: 13.7k, False: 2.93k]
  ------------------
  261|  13.7k|                        {
  262|  13.7k|                            return OpCode::ORI;
  263|  13.7k|                        }
  264|  3.30k|                        break;
  265|       |
  266|   120k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 120k, False: 976k]
  ------------------
  267|   140k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 19.4k, False: 1.07M]
  ------------------
  268|   140k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 7.14k, False: 133k]
  ------------------
  269|   140k|                        {
  270|  5.19k|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 5.19k, False: 134k]
  ------------------
  271|  10.2k|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 5.06k, False: 135k]
  ------------------
  272|  10.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 6.67k, False: 3.58k]
  ------------------
  273|  6.67k|                                {
  274|  6.67k|                                    return OpCode::SBU;
  275|  6.67k|                                }
  276|  3.58k|                                break;
  277|       |
  278|  3.58k|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 2.97k, False: 137k]
  ------------------
  279|  4.27k|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 1.30k, False: 138k]
  ------------------
  280|  4.27k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 3.22k, False: 1.05k]
  ------------------
  281|  3.22k|                                {
  282|  3.22k|                                    return OpCode::SEQ;
  283|  3.22k|                                }
  284|  1.05k|                                break;
  285|       |
  286|  12.3k|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 12.3k, False: 127k]
  ------------------
  287|  16.3k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 3.98k, False: 136k]
  ------------------
  288|  16.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 11.9k, False: 4.43k]
  ------------------
  289|  11.9k|                                {
  290|  11.9k|                                    return OpCode::SGE;
  291|  11.9k|                                }
  292|  4.43k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 1.99k, False: 2.43k]
  ------------------
  293|  1.99k|                                {
  294|  1.99k|                                    return OpCode::SGT;
  295|  1.99k|                                }
  296|  2.43k|                                break;
  297|       |
  298|  2.43k|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 1.25k, False: 138k]
  ------------------
  299|  2.31k|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 1.06k, False: 139k]
  ------------------
  300|  2.31k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 1.36k, False: 952]
  ------------------
  301|  1.36k|                                {
  302|  1.36k|                                    return OpCode::SHU;
  303|  1.36k|                                }
  304|    952|                                break;
  305|       |
  306|  21.1k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 21.1k, False: 118k]
  ------------------
  307|  38.6k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 17.4k, False: 122k]
  ------------------
  308|  38.6k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 15.4k, False: 23.2k]
  ------------------
  309|  38.6k|                                {
  310|  16.0k|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 16.0k, False: 22.6k]
  ------------------
  311|  16.2k|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 185, False: 38.4k]
  ------------------
  312|  16.2k|                                        return OpCode::SLA;
  313|       |
  314|  1.58k|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 1.58k, False: 37.0k]
  ------------------
  315|  1.74k|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 163, False: 38.5k]
  ------------------
  316|  1.74k|                                        return OpCode::SLE;
  317|       |
  318|  1.91k|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 1.91k, False: 36.7k]
  ------------------
  319|  2.03k|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 120, False: 38.5k]
  ------------------
  320|  2.03k|                                        return OpCode::SLL;
  321|       |
  322|  1.59k|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 1.59k, False: 37.0k]
  ------------------
  323|  3.22k|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 1.63k, False: 37.0k]
  ------------------
  324|  3.22k|                                        return OpCode::SLT;
  325|  38.6k|                                }
  326|  15.4k|                                break;
  327|       |
  328|  15.4k|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 1.23k, False: 138k]
  ------------------
  329|  13.5k|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 12.3k, False: 127k]
  ------------------
  330|  13.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 1.56k, False: 12.0k]
  ------------------
  331|  1.56k|                                {
  332|  1.56k|                                    return OpCode::SNE;
  333|  1.56k|                                }
  334|  12.0k|                                break;
  335|       |
  336|  12.0k|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 721, False: 139k]
  ------------------
  337|  19.9k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 19.1k, False: 120k]
  ------------------
  338|  19.9k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 5.18k, False: 14.7k]
  ------------------
  339|  5.18k|                                {
  340|  5.18k|                                    return OpCode::SRA;
  341|  5.18k|                                }
  342|  14.7k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 6.47k, False: 8.26k]
  ------------------
  343|  6.47k|                                {
  344|  6.47k|                                    return OpCode::SRL;
  345|  6.47k|                                }
  346|  8.26k|                                break;
  347|       |
  348|  8.26k|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 662, False: 139k]
  ------------------
  349|  14.8k|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 14.2k, False: 125k]
  ------------------
  350|  14.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 13.0k, False: 1.87k]
  ------------------
  351|  13.0k|                                {
  352|  13.0k|                                    return OpCode::SUB;
  353|  13.0k|                                }
  354|  1.87k|                                break;
  355|       |
  356|  7.67k|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 7.67k, False: 132k]
  ------------------
  357|  12.7k|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 5.05k, False: 135k]
  ------------------
  358|  12.7k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 7.79k, False: 4.94k]
  ------------------
  359|  7.79k|                                {
  360|  7.79k|                                    return OpCode::SWU;
  361|  7.79k|                                }
  362|  4.94k|                                break;
  363|   140k|                        }
  364|       |
  365|  58.1k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 465, False: 1.09M]
  ------------------
  366|  68.2k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 10.0k, False: 1.08M]
  ------------------
  367|  68.2k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 5.44k, False: 62.7k]
  |  Branch (367:29): [True: 5.19k, False: 63.0k]
  |  Branch (367:45): [True: 5.19k, False: 252]
  ------------------
  368|  5.19k|                        {
  369|  5.19k|                            return OpCode::XOR;
  370|  5.19k|                        }
  371|  63.0k|                        break;
  372|  1.09M|                }
  373|   143k|                break;
  374|  1.09M|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|   446k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 446k, False: 1.67M]
  ------------------
  378|   446k|                const char c1 = token[0u];
  379|   446k|                const char c2 = token[1u];
  380|   446k|                const char c3 = token[2u];
  381|   446k|                const char c4 = token[3u];
  382|       |
  383|   446k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 36.3k, False: 410k]
  ------------------
  384|   446k|                {
  385|  70.5k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 70.5k, False: 375k]
  ------------------
  386|  72.7k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 2.12k, False: 444k]
  ------------------
  387|  72.7k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 2.05k, False: 70.6k]
  ------------------
  388|  72.7k|                        {
  389|  50.0k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 50.0k, False: 22.7k]
  ------------------
  390|  55.9k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 5.92k, False: 66.7k]
  ------------------
  391|  55.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 53.8k, False: 2.06k]
  ------------------
  392|  53.8k|                                {
  393|  53.8k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 108, False: 53.7k]
  ------------------
  394|  53.8k|                                    {
  395|  1.72k|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 1.72k, False: 52.1k]
  ------------------
  396|  1.82k|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 102, False: 53.7k]
  ------------------
  397|  1.82k|                                            return OpCode::ADDD;
  398|       |
  399|  13.8k|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 13.8k, False: 40.0k]
  ------------------
  400|  15.1k|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 1.33k, False: 52.5k]
  ------------------
  401|  15.1k|                                            return OpCode::ADDF;
  402|       |
  403|  28.7k|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 28.7k, False: 25.0k]
  ------------------
  404|  29.4k|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 692, False: 53.1k]
  ------------------
  405|  29.4k|                                            return OpCode::ADDI;
  406|       |
  407|  5.30k|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 5.30k, False: 48.5k]
  ------------------
  408|  7.30k|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 2.00k, False: 51.8k]
  ------------------
  409|  7.30k|                                            return OpCode::ADDU;
  410|  53.8k|                                    }
  411|  53.8k|                                }
  412|  2.17k|                                break;
  413|       |
  414|  2.17k|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 1.20k, False: 71.5k]
  ------------------
  415|  14.7k|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 13.5k, False: 59.1k]
  ------------------
  416|  14.7k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 14.6k, False: 111]
  |  Branch (416:37): [True: 14.4k, False: 238]
  |  Branch (416:53): [True: 14.4k, False: 127]
  ------------------
  417|  14.4k|                                {
  418|  14.4k|                                    return OpCode::ANDI;
  419|  14.4k|                                }
  420|       |
  421|    238|                                break;
  422|  72.7k|                        }
  423|  4.46k|                        break;
  424|       |
  425|  16.2k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 16.2k, False: 430k]
  ------------------
  426|  18.8k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 2.63k, False: 443k]
  ------------------
  427|  18.8k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 2.10k, False: 16.7k]
  ------------------
  428|  18.8k|                        {
  429|  1.52k|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 1.52k, False: 17.3k]
  ------------------
  430|  2.10k|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 576, False: 18.2k]
  ------------------
  431|  2.10k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 1.81k, False: 293]
  |  Branch (431:37): [True: 1.58k, False: 523]
  |  Branch (431:53): [True: 1.58k, False: 230]
  ------------------
  432|  1.58k|                                {
  433|  1.58k|                                    return OpCode::BEQZ;
  434|  1.58k|                                }
  435|    523|                                break;
  436|       |
  437|  9.04k|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 9.04k, False: 9.80k]
  ------------------
  438|  11.2k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 2.21k, False: 16.6k]
  ------------------
  439|  11.2k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 11.0k, False: 198]
  ------------------
  440|  11.0k|                                {
  441|  11.0k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 8.34k, False: 2.72k]
  ------------------
  442|  8.34k|                                    {
  443|  8.34k|                                        return OpCode::BFPF;
  444|  8.34k|                                    }
  445|  2.72k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 1.09k, False: 1.62k]
  ------------------
  446|  1.09k|                                    {
  447|  1.09k|                                        return OpCode::BFPT;
  448|  1.09k|                                    }
  449|  11.0k|                                }
  450|  1.82k|                                break;
  451|       |
  452|  1.82k|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 1.50k, False: 17.3k]
  ------------------
  453|  3.38k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 1.88k, False: 16.9k]
  ------------------
  454|  3.38k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 2.77k, False: 605]
  |  Branch (454:37): [True: 2.08k, False: 1.29k]
  |  Branch (454:53): [True: 2.08k, False: 691]
  ------------------
  455|  2.08k|                                {
  456|  2.08k|                                    return OpCode::BNEZ;
  457|  2.08k|                                }
  458|  18.8k|                        }
  459|  5.75k|                        break;
  460|       |
  461|  28.5k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 28.5k, False: 417k]
  ------------------
  462|  34.6k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 6.10k, False: 440k]
  ------------------
  463|  34.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 34.1k, False: 446]
  |  Branch (463:29): [True: 33.4k, False: 1.23k]
  |  Branch (463:45): [True: 33.4k, False: 789]
  ------------------
  464|  33.4k|                        {
  465|  33.4k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 276, False: 33.1k]
  ------------------
  466|  33.4k|                            {
  467|  14.4k|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 14.4k, False: 18.9k]
  ------------------
  468|  16.5k|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 2.12k, False: 31.2k]
  ------------------
  469|  16.5k|                                    return OpCode::DIVD;
  470|       |
  471|    551|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 551, False: 32.8k]
  ------------------
  472|  1.51k|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 964, False: 32.4k]
  ------------------
  473|  1.51k|                                    return OpCode::DIVF;
  474|       |
  475|  12.1k|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 12.1k, False: 21.2k]
  ------------------
  476|  12.2k|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 100, False: 33.3k]
  ------------------
  477|  12.2k|                                    return OpCode::DIVI;
  478|       |
  479|    911|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 911, False: 32.4k]
  ------------------
  480|  2.83k|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 1.92k, False: 31.4k]
  ------------------
  481|  2.83k|                                    return OpCode::DIVU;
  482|  33.4k|                            }
  483|  33.4k|                        }
  484|  1.51k|                        break;
  485|       |
  486|  2.51k|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 2.51k, False: 443k]
  ------------------
  487|  11.1k|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 8.68k, False: 437k]
  ------------------
  488|  11.1k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 11.0k, False: 172]
  |  Branch (488:29): [True: 3.44k, False: 7.75k]
  |  Branch (488:45): [True: 7.22k, False: 3.80k]
  |  Branch (488:61): [True: 3.44k, False: 3.78k]
  ------------------
  489|  3.44k|                        {
  490|  3.44k|                            return OpCode::HALT;
  491|  3.44k|                        }
  492|  7.75k|                        break;
  493|       |
  494|  7.75k|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 4.00k, False: 442k]
  ------------------
  495|  24.4k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 20.4k, False: 426k]
  ------------------
  496|  24.4k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 15.8k, False: 8.60k]
  |  Branch (496:29): [True: 1.91k, False: 22.5k]
  |  Branch (496:45): [True: 15.3k, False: 494]
  |  Branch (496:61): [True: 1.91k, False: 13.4k]
  ------------------
  497|  1.91k|                        {
  498|  1.91k|                            return OpCode::JALR;
  499|  1.91k|                        }
  500|  22.5k|                        break;
  501|       |
  502|  22.5k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 22.1k, False: 424k]
  ------------------
  503|  22.9k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 839, False: 445k]
  ------------------
  504|  22.9k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 20.3k, False: 2.56k]
  |  Branch (504:29): [True: 17.8k, False: 5.14k]
  |  Branch (504:45): [True: 17.8k, False: 2.57k]
  ------------------
  505|  17.8k|                        {
  506|  17.8k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 5.75k, False: 12.0k]
  ------------------
  507|  5.75k|                            {
  508|  5.75k|                                return OpCode::MOVD;
  509|  5.75k|                            }
  510|  12.0k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 11.4k, False: 595]
  ------------------
  511|  11.4k|                            {
  512|  11.4k|                                return OpCode::MOVF;
  513|  11.4k|                            }
  514|  17.8k|                        }
  515|  5.14k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 2.16k, False: 2.97k]
  |  Branch (515:34): [True: 1.07k, False: 4.06k]
  |  Branch (515:50): [True: 1.93k, False: 235]
  |  Branch (515:66): [True: 1.07k, False: 855]
  ------------------
  516|  1.07k|                        {
  517|  1.07k|                            return OpCode::MULT;
  518|  1.07k|                        }
  519|  4.66k|                        break;
  520|       |
  521|   178k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 178k, False: 268k]
  ------------------
  522|   185k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 7.19k, False: 439k]
  ------------------
  523|   185k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 13.4k, False: 172k]
  ------------------
  524|   185k|                        {
  525|  10.1k|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 10.1k, False: 175k]
  ------------------
  526|  11.4k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 1.32k, False: 184k]
  ------------------
  527|  11.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 10.5k, False: 862]
  ------------------
  528|  10.5k|                                {
  529|  10.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 1.58k, False: 8.97k]
  ------------------
  530|  1.58k|                                    {
  531|  1.58k|                                        return OpCode::SEQI;
  532|  1.58k|                                    }
  533|  8.97k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 8.60k, False: 370]
  ------------------
  534|  8.60k|                                    {
  535|  8.60k|                                        return OpCode::SEQU;
  536|  8.60k|                                    }
  537|  10.5k|                                }
  538|  1.23k|                                break;
  539|       |
  540|  19.1k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 19.1k, False: 166k]
  ------------------
  541|  70.8k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 51.7k, False: 133k]
  ------------------
  542|  70.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 28.7k, False: 42.0k]
  ------------------
  543|  28.7k|                                {
  544|  28.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 1.50k, False: 27.2k]
  ------------------
  545|  1.50k|                                    {
  546|  1.50k|                                        return OpCode::SGEI;
  547|  1.50k|                                    }
  548|  27.2k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 21.6k, False: 5.61k]
  ------------------
  549|  21.6k|                                    {
  550|  21.6k|                                        return OpCode::SGEU;
  551|  21.6k|                                    }
  552|  28.7k|                                }
  553|  42.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 39.8k, False: 2.17k]
  ------------------
  554|  39.8k|                                {
  555|  39.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 1.22k, False: 38.6k]
  ------------------
  556|  1.22k|                                    {
  557|  1.22k|                                        return OpCode::SGTI;
  558|  1.22k|                                    }
  559|  38.6k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 20.2k, False: 18.4k]
  ------------------
  560|  20.2k|                                    {
  561|  20.2k|                                        return OpCode::SGTU;
  562|  20.2k|                                    }
  563|  39.8k|                                }
  564|  26.2k|                                break;
  565|       |
  566|  26.2k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 10.3k, False: 175k]
  ------------------
  567|  24.0k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 13.6k, False: 171k]
  ------------------
  568|  24.0k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 2.00k, False: 22.0k]
  ------------------
  569|  24.0k|                                {
  570|    820|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 820, False: 23.2k]
  ------------------
  571|  3.11k|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 2.29k, False: 21.7k]
  ------------------
  572|  3.11k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 2.98k, False: 137]
  ------------------
  573|  2.98k|                                        {
  574|  2.98k|                                            return OpCode::SLAI;
  575|  2.98k|                                        }
  576|    137|                                        break;
  577|       |
  578|  1.95k|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 1.95k, False: 22.0k]
  ------------------
  579|  7.15k|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 5.19k, False: 18.8k]
  ------------------
  580|  7.15k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 1.25k, False: 5.89k]
  ------------------
  581|  1.25k|                                        {
  582|  1.25k|                                            return OpCode::SLEI;
  583|  1.25k|                                        }
  584|  5.89k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 2.07k, False: 3.81k]
  ------------------
  585|  2.07k|                                        {
  586|  2.07k|                                            return OpCode::SLEU;
  587|  2.07k|                                        }
  588|  3.81k|                                        break;
  589|       |
  590|  3.81k|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 1.31k, False: 22.7k]
  ------------------
  591|  2.98k|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 1.67k, False: 22.3k]
  ------------------
  592|  2.98k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 2.87k, False: 110]
  ------------------
  593|  2.87k|                                        {
  594|  2.87k|                                            return OpCode::SLLI;
  595|  2.87k|                                        }
  596|    110|                                        break;
  597|       |
  598|  8.59k|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 8.59k, False: 15.4k]
  ------------------
  599|  8.78k|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 189, False: 23.8k]
  ------------------
  600|  8.78k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 4.48k, False: 4.29k]
  ------------------
  601|  4.48k|                                        {
  602|  4.48k|                                            return OpCode::SLTI;
  603|  4.48k|                                        }
  604|  4.29k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 4.19k, False: 108]
  ------------------
  605|  4.19k|                                        {
  606|  4.19k|                                            return OpCode::SLTU;
  607|  4.19k|                                        }
  608|    108|                                        break;
  609|  24.0k|                                }
  610|       |
  611|  8.39k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 2.21k, False: 183k]
  ------------------
  612|  16.0k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 7.62k, False: 177k]
  ------------------
  613|  16.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 13.4k, False: 2.54k]
  ------------------
  614|  13.4k|                                {
  615|  13.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 7.51k, False: 5.94k]
  ------------------
  616|  7.51k|                                    {
  617|  7.51k|                                        return OpCode::SNEI;
  618|  7.51k|                                    }
  619|  5.94k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 2.13k, False: 3.81k]
  ------------------
  620|  2.13k|                                    {
  621|  2.13k|                                        return OpCode::SNEU;
  622|  2.13k|                                    }
  623|  13.4k|                                }
  624|  6.36k|                                break;
  625|       |
  626|  8.79k|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 8.79k, False: 176k]
  ------------------
  627|  22.5k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 13.7k, False: 171k]
  ------------------
  628|  22.5k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 15.1k, False: 7.40k]
  |  Branch (628:37): [True: 2.74k, False: 19.7k]
  |  Branch (628:53): [True: 2.74k, False: 12.3k]
  ------------------
  629|  2.74k|                                {
  630|  2.74k|                                    return OpCode::SRAI;
  631|  2.74k|                                }
  632|  19.7k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 6.72k, False: 13.0k]
  |  Branch (632:42): [True: 6.58k, False: 13.1k]
  |  Branch (632:58): [True: 6.58k, False: 138]
  ------------------
  633|  6.58k|                                {
  634|  6.58k|                                    return OpCode::SRLI;
  635|  6.58k|                                }
  636|  13.1k|                                break;
  637|       |
  638|  22.6k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 22.6k, False: 162k]
  ------------------
  639|  33.3k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 10.7k, False: 174k]
  ------------------
  640|  33.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 26.4k, False: 6.94k]
  ------------------
  641|  26.4k|                                {
  642|  26.4k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 2.43k, False: 24.0k]
  ------------------
  643|  26.4k|                                    {
  644|  1.51k|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 1.51k, False: 24.9k]
  ------------------
  645|  1.95k|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 431, False: 26.0k]
  ------------------
  646|  1.95k|                                            return OpCode::SUBD;
  647|       |
  648|  4.70k|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 4.70k, False: 21.7k]
  ------------------
  649|  4.78k|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 87, False: 26.3k]
  ------------------
  650|  4.78k|                                            return OpCode::SUBF;
  651|       |
  652|  3.36k|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 3.36k, False: 23.0k]
  ------------------
  653|  4.03k|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 663, False: 25.7k]
  ------------------
  654|  4.03k|                                            return OpCode::SUBI;
  655|       |
  656|  13.0k|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 13.0k, False: 13.3k]
  ------------------
  657|  13.2k|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 163, False: 26.2k]
  ------------------
  658|  13.2k|                                            return OpCode::SUBU;
  659|  26.4k|                                    }
  660|  26.4k|                                }
  661|  9.37k|                                break;
  662|   185k|                        }
  663|  69.8k|                        break;
  664|       |
  665|  69.8k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 32.4k, False: 414k]
  ------------------
  666|  32.7k|                    case 't':
  ------------------
  |  Branch (666:21): [True: 317, False: 446k]
  ------------------
  667|  32.7k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 32.6k, False: 168]
  |  Branch (667:29): [True: 25.5k, False: 7.23k]
  |  Branch (667:45): [True: 32.5k, False: 102]
  |  Branch (667:61): [True: 25.5k, False: 6.96k]
  ------------------
  668|  25.5k|                        {
  669|  25.5k|                            return OpCode::TRAP;
  670|  25.5k|                        }
  671|  7.23k|                        break;
  672|  7.23k|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 1.42k, False: 445k]
  ------------------
  673|  7.09k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 5.67k, False: 440k]
  ------------------
  674|  7.09k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 6.62k, False: 467]
  |  Branch (674:29): [True: 4.35k, False: 2.73k]
  |  Branch (674:45): [True: 5.76k, False: 861]
  |  Branch (674:61): [True: 4.35k, False: 1.41k]
  ------------------
  675|  4.35k|                        {
  676|  4.35k|                            return OpCode::XORI;
  677|  4.35k|                        }
  678|  2.73k|                        break;
  679|   446k|                }
  680|   162k|                break;
  681|   446k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|   162k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 93.9k, False: 2.03M]
  ------------------
  685|  93.9k|                const char c1 = token[0u];
  686|  93.9k|                const char c2 = token[1u];
  687|  93.9k|                const char c3 = token[2u];
  688|  93.9k|                const char c4 = token[3u];
  689|  93.9k|                const char c5 = token[4u];
  690|       |
  691|  93.9k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 2.04k, False: 91.9k]
  ------------------
  692|  93.9k|                {
  693|  53.4k|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 53.4k, False: 40.5k]
  ------------------
  694|  53.4k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 0, False: 93.9k]
  ------------------
  695|  53.4k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 53.4k, False: 0]
  |  Branch (695:29): [True: 53.4k, False: 0]
  |  Branch (695:45): [True: 53.4k, False: 0]
  |  Branch (695:61): [True: 53.4k, False: 0]
  |  Branch (695:77): [True: 53.4k, False: 0]
  ------------------
  696|  53.4k|                        {
  697|  53.4k|                            return OpCode::ADDUI;
  698|  53.4k|                        }
  699|      0|                        break;
  700|       |
  701|    917|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 917, False: 93.0k]
  ------------------
  702|    917|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 0, False: 93.9k]
  ------------------
  703|    917|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 917, False: 0]
  |  Branch (703:29): [True: 917, False: 0]
  |  Branch (703:45): [True: 917, False: 0]
  |  Branch (703:61): [True: 917, False: 0]
  |  Branch (703:77): [True: 917, False: 0]
  ------------------
  704|    917|                        {
  705|    917|                            return OpCode::DIVUI;
  706|    917|                        }
  707|      0|                        break;
  708|       |
  709|  5.96k|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 5.96k, False: 88.0k]
  ------------------
  710|  5.96k|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 0, False: 93.9k]
  ------------------
  711|  5.96k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 5.96k, False: 0]
  |  Branch (711:29): [True: 5.96k, False: 0]
  |  Branch (711:45): [True: 5.96k, False: 0]
  |  Branch (711:61): [True: 5.96k, False: 0]
  ------------------
  712|  5.96k|                        {
  713|  5.96k|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 0, False: 5.96k]
  ------------------
  714|  5.96k|                            {
  715|    405|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 405, False: 5.56k]
  ------------------
  716|    405|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 0, False: 5.96k]
  ------------------
  717|    405|                                    return OpCode::MULTD;
  718|       |
  719|  1.82k|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 1.82k, False: 4.14k]
  ------------------
  720|  1.82k|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 0, False: 5.96k]
  ------------------
  721|  1.82k|                                    return OpCode::MULTF;
  722|       |
  723|  1.77k|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 1.77k, False: 4.19k]
  ------------------
  724|  1.77k|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 0, False: 5.96k]
  ------------------
  725|  1.77k|                                    return OpCode::MULTI;
  726|       |
  727|  1.96k|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 1.96k, False: 4.00k]
  ------------------
  728|  1.96k|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 0, False: 5.96k]
  ------------------
  729|  1.96k|                                    return OpCode::MULTU;
  730|  5.96k|                            }
  731|  5.96k|                        }
  732|      0|                        break;
  733|       |
  734|  31.6k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 31.6k, False: 62.3k]
  ------------------
  735|  31.6k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 0, False: 93.9k]
  ------------------
  736|  31.6k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 0, False: 31.6k]
  ------------------
  737|  31.6k|                        {
  738|  11.2k|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 11.2k, False: 20.3k]
  ------------------
  739|  11.2k|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 0, False: 31.6k]
  ------------------
  740|  11.2k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 11.2k, False: 0]
  |  Branch (740:37): [True: 11.2k, False: 0]
  |  Branch (740:53): [True: 11.2k, False: 0]
  |  Branch (740:69): [True: 11.2k, False: 0]
  ------------------
  741|  11.2k|                                {
  742|  11.2k|                                    return OpCode::SEQUI;
  743|  11.2k|                                }
  744|      0|                                break;
  745|       |
  746|  13.7k|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 13.7k, False: 17.8k]
  ------------------
  747|  13.7k|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 0, False: 31.6k]
  ------------------
  748|  13.7k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 1.43k, False: 12.3k]
  |  Branch (748:37): [True: 1.43k, False: 12.3k]
  |  Branch (748:53): [True: 1.43k, False: 0]
  |  Branch (748:69): [True: 1.43k, False: 0]
  ------------------
  749|  1.43k|                                {
  750|  1.43k|                                    return OpCode::SGEUI;
  751|  1.43k|                                }
  752|  12.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 12.3k, False: 0]
  |  Branch (752:42): [True: 12.3k, False: 0]
  |  Branch (752:58): [True: 12.3k, False: 0]
  |  Branch (752:74): [True: 12.3k, False: 0]
  ------------------
  753|  12.3k|                                {
  754|  12.3k|                                    return OpCode::SGTUI;
  755|  12.3k|                                }
  756|      0|                                break;
  757|       |
  758|  3.83k|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 3.83k, False: 27.8k]
  ------------------
  759|  3.83k|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 0, False: 31.6k]
  ------------------
  760|  3.83k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 2.37k, False: 1.45k]
  |  Branch (760:37): [True: 2.37k, False: 1.45k]
  |  Branch (760:53): [True: 2.37k, False: 0]
  |  Branch (760:69): [True: 2.37k, False: 0]
  ------------------
  761|  2.37k|                                {
  762|  2.37k|                                    return OpCode::SLEUI;
  763|  2.37k|                                }
  764|  1.45k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 1.45k, False: 0]
  |  Branch (764:42): [True: 1.45k, False: 0]
  |  Branch (764:58): [True: 1.45k, False: 0]
  |  Branch (764:74): [True: 1.45k, False: 0]
  ------------------
  765|  1.45k|                                {
  766|  1.45k|                                    return OpCode::SLTUI;
  767|  1.45k|                                }
  768|      0|                                break;
  769|       |
  770|  1.69k|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 1.69k, False: 29.9k]
  ------------------
  771|  1.69k|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 0, False: 31.6k]
  ------------------
  772|  1.69k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 1.69k, False: 0]
  |  Branch (772:37): [True: 1.69k, False: 0]
  |  Branch (772:53): [True: 1.69k, False: 0]
  |  Branch (772:69): [True: 1.69k, False: 0]
  ------------------
  773|  1.69k|                                {
  774|  1.69k|                                    return OpCode::SNEUI;
  775|  1.69k|                                }
  776|      0|                                break;
  777|       |
  778|  1.07k|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 1.07k, False: 30.5k]
  ------------------
  779|  1.07k|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 0, False: 31.6k]
  ------------------
  780|  1.07k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 1.07k, False: 0]
  |  Branch (780:37): [True: 1.07k, False: 0]
  |  Branch (780:53): [True: 1.07k, False: 0]
  |  Branch (780:69): [True: 1.07k, False: 0]
  ------------------
  781|  1.07k|                                {
  782|  1.07k|                                    return OpCode::SUBUI;
  783|  1.07k|                                }
  784|      0|                                break;
  785|  31.6k|                        }
  786|       |
  787|      0|                        break;
  788|  93.9k|                }
  789|       |
  790|  2.04k|                break;
  791|  93.9k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  19.5k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 19.5k, False: 2.10M]
  ------------------
  795|  19.5k|                const char c1 = token[0u];
  796|  19.5k|                const char c2 = token[1u];
  797|  19.5k|                const char c3 = token[2u];
  798|  19.5k|                const char c4 = token[3u];
  799|  19.5k|                const char c5 = token[4u];
  800|  19.5k|                const char c6 = token[5u];
  801|       |
  802|  19.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 3.56k, False: 15.9k]
  |  Branch (802:21): [True: 3.56k, False: 15.9k]
  |  Branch (802:37): [True: 3.56k, False: 0]
  |  Branch (802:53): [True: 3.56k, False: 0]
  ------------------
  803|  3.56k|                {
  804|  3.56k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 0, False: 3.56k]
  ------------------
  805|  3.56k|                    {
  806|  1.72k|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 1.72k, False: 1.83k]
  ------------------
  807|  1.72k|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 0, False: 3.56k]
  ------------------
  808|  1.72k|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 1.72k, False: 0]
  ------------------
  809|  1.72k|                            {
  810|  1.72k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 1.19k, False: 531]
  ------------------
  811|  1.19k|                                {
  812|  1.19k|                                    return OpCode::CVTD2F;
  813|  1.19k|                                }
  814|    531|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 531, False: 0]
  ------------------
  815|    531|                                {
  816|    531|                                    return OpCode::CVTD2I;
  817|    531|                                }
  818|  1.72k|                            }
  819|      0|                            break;
  820|       |
  821|    875|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 875, False: 2.68k]
  ------------------
  822|    875|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 0, False: 3.56k]
  ------------------
  823|    875|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 875, False: 0]
  ------------------
  824|    875|                            {
  825|    875|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 628, False: 247]
  ------------------
  826|    628|                                {
  827|    628|                                    return OpCode::CVTF2D;
  828|    628|                                }
  829|    247|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 247, False: 0]
  ------------------
  830|    247|                                {
  831|    247|                                    return OpCode::CVTF2I;
  832|    247|                                }
  833|    875|                            }
  834|      0|                            break;
  835|       |
  836|    959|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 959, False: 2.60k]
  ------------------
  837|    959|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 0, False: 3.56k]
  ------------------
  838|    959|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 959, False: 0]
  ------------------
  839|    959|                            {
  840|    959|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 224, False: 735]
  ------------------
  841|    224|                                {
  842|    224|                                    return OpCode::CVTI2D;
  843|    224|                                }
  844|    735|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 735, False: 0]
  ------------------
  845|    735|                                {
  846|    735|                                    return OpCode::CVTI2F;
  847|    735|                                }
  848|    959|                            }
  849|  3.56k|                    }
  850|  3.56k|                }
  851|  15.9k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 12.4k, False: 3.59k]
  |  Branch (851:26): [True: 12.4k, False: 3.59k]
  |  Branch (851:42): [True: 12.4k, False: 0]
  |  Branch (851:58): [True: 12.4k, False: 0]
  |  Branch (851:74): [True: 12.4k, False: 0]
  ------------------
  852|  15.9k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 12.4k, False: 0]
  |  Branch (852:42): [True: 12.4k, False: 0]
  ------------------
  853|  12.4k|                {
  854|  12.4k|                    return OpCode::MULTUI;
  855|  12.4k|                }
  856|  3.59k|                break;
  857|  19.5k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|  3.78k|            case 7: {
  ------------------
  |  Branch (860:13): [True: 3.78k, False: 2.12M]
  ------------------
  861|  3.78k|                const char c1 = token[0u];
  862|  3.78k|                const char c2 = token[1u];
  863|  3.78k|                const char c3 = token[2u];
  864|  3.78k|                const char c4 = token[3u];
  865|  3.78k|                const char c5 = token[4u];
  866|  3.78k|                const char c6 = token[5u];
  867|  3.78k|                const char c7 = token[6u];
  868|       |
  869|  3.78k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 2.53k, False: 1.25k]
  |  Branch (869:21): [True: 2.53k, False: 1.25k]
  |  Branch (869:37): [True: 2.53k, False: 0]
  |  Branch (869:53): [True: 2.53k, False: 0]
  ------------------
  870|  2.53k|                {
  871|  2.53k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 1.56k, False: 974]
  |  Branch (871:25): [True: 1.56k, False: 974]
  |  Branch (871:41): [True: 1.56k, False: 0]
  |  Branch (871:54): [True: 1.56k, False: 0]
  |  Branch (871:70): [True: 1.56k, False: 0]
  ------------------
  872|  1.56k|                    {
  873|  1.56k|                        return OpCode::MOVI2FP;
  874|  1.56k|                    }
  875|    974|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 974, False: 0]
  |  Branch (875:25): [True: 974, False: 0]
  |  Branch (875:41): [True: 974, False: 0]
  |  Branch (875:57): [True: 974, False: 0]
  |  Branch (875:70): [True: 974, False: 0]
  ------------------
  876|    974|                    {
  877|    974|                        return OpCode::MOVFP2I;
  878|    974|                    }
  879|    974|                }
  880|  1.25k|                break;
  881|  3.78k|            }
  882|       |
  883|   143k|            default: {
  ------------------
  |  Branch (883:13): [True: 143k, False: 1.98M]
  ------------------
  884|   143k|                break;
  885|  3.78k|            }
  886|  2.12M|        }
  887|       |
  888|       |        // None found
  889|   674k|        return OpCode::NONE;
  890|  2.12M|    }
_ZN3dlx3iceEcc:
   15|  3.57M|    {
   16|  3.57M|        constexpr const char diff = 'a' - 'A';
   17|  3.57M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 2.55M, False: 1.01M]
  |  Branch (17:28): [True: 367k, False: 647k]
  ------------------
   18|  3.57M|    }

_ZN3dlx10ParseErrorC2Ev:
   18|  2.57M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  9.57k|    {
  187|  9.57k|        ParseError err;
  188|       |
  189|  9.57k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  9.57k|        err.m_LineNumber                           = line_number;
  191|  9.57k|        err.m_Column                               = column;
  192|  9.57k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  9.57k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  9.57k|        return err;
  196|  9.57k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  9.57k|    {
  202|  9.57k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  9.57k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  9.57k|                                                         actual_type);
  205|  9.57k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|  1.37k|    {
  210|  1.37k|        ParseError err;
  211|       |
  212|  1.37k|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|  1.37k|        err.m_LineNumber        = line_number;
  214|  1.37k|        err.m_Column            = column;
  215|  1.37k|        err.invalid_number.text = text;
  216|       |
  217|  1.37k|        return err;
  218|  1.37k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|  1.37k|    {
  222|  1.37k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|  1.37k|                                                token.GetColumn().unsafe(), token.GetText());
  224|  1.37k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      5|    {
  229|      5|        ParseError err;
  230|       |
  231|      5|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      5|        err.m_LineNumber = line_number;
  233|      5|        err.m_Column     = column;
  234|       |
  235|      5|        return err;
  236|      5|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      5|    {
  240|      5|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      5|                                                                     token.GetColumn().unsafe());
  242|      5|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|   841k|    {
  248|   841k|        ParseError err;
  249|       |
  250|   841k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|   841k|        err.m_LineNumber                   = line_number;
  252|   841k|        err.m_Column                       = column;
  253|   841k|        err.unexpected_token.expected_type = expected_type;
  254|   841k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|   841k|        return err;
  257|   841k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|   841k|    {
  262|   841k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|   841k|                                                  token.GetColumn().unsafe(), expected_type,
  264|   841k|                                                  token.GetType());
  265|   841k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  34.2k|    {
  271|  34.2k|        ParseError err;
  272|       |
  273|  34.2k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  34.2k|        err.m_LineNumber                   = line_number;
  275|  34.2k|        err.m_Column                       = column;
  276|  34.2k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  34.2k|        return err;
  279|  34.2k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|  3.77k|    {
  283|  3.77k|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|  3.77k|                                                     token.GetColumn().unsafe(), token.GetText());
  285|  3.77k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|   403k|    {
  291|   403k|        ParseError err;
  292|       |
  293|   403k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|   403k|        err.m_LineNumber                        = line_number;
  295|   403k|        err.m_Column                            = column;
  296|   403k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|   403k|        return err;
  299|   403k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|   403k|    {
  303|   403k|        return ConstructInvalidLabelIdentifierParseError(
  304|   403k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|   403k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  55.0k|    {
  313|  55.0k|        ParseError err;
  314|       |
  315|  55.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  55.0k|        err.m_LineNumber                     = line_number;
  317|  55.0k|        err.m_Column                         = column;
  318|  55.0k|        err.label_already_defined.label_name = label_name;
  319|  55.0k|        err.label_already_defined.at_line    = at_line;
  320|  55.0k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  55.0k|        return err;
  323|  55.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  55.0k|    {
  328|  55.0k|        return ConstructLabelAlreadyDefinedParseError(
  329|  55.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  55.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  55.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  1.04M|    {
  336|  1.04M|        ParseError err;
  337|       |
  338|  1.04M|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  1.04M|        err.m_LineNumber = line_number;
  340|  1.04M|        err.m_Column     = column;
  341|       |
  342|  1.04M|        return err;
  343|  1.04M|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  1.04M|    {
  347|  1.04M|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  1.04M|                                                        token.GetColumn().unsafe());
  349|  1.04M|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|   177k|    {
  355|   177k|        ParseError err;
  356|       |
  357|   177k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|   177k|        err.m_LineNumber               = line_number;
  359|   177k|        err.m_Column                   = column;
  360|   177k|        err.too_few_arguments.required = required;
  361|   177k|        err.too_few_arguments.provided = provided;
  362|       |
  363|   177k|        return err;
  364|   177k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|   177k|    {
  369|   177k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|   177k|                                                  token.GetColumn().unsafe(), required, provided);
  371|   177k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  6.21k|    {
  376|  6.21k|        ParseError err;
  377|       |
  378|  6.21k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  6.21k|        err.m_LineNumber           = line_number;
  380|  6.21k|        err.m_Column               = column;
  381|  6.21k|        err.empty_label.label_name = label_name;
  382|       |
  383|  6.21k|        return err;
  384|  6.21k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  6.21k|    {
  388|  6.21k|        return ConstructEmptyLabelParseError(
  389|  6.21k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  6.21k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 5.28k, False: 932]
  ------------------
  391|  5.28k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  6.21k|                        token.GetText());
  393|  6.21k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    899|    {
  398|    899|        ParseError err;
  399|       |
  400|    899|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    899|        err.m_LineNumber = line_number;
  402|    899|        err.m_Column     = column;
  403|       |
  404|    899|        return err;
  405|    899|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    899|    {
  409|    899|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    899|                                               token.GetColumn().unsafe());
  411|    899|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|  2.57M|    {
   17|  2.57M|        m_ParseErrors.emplace_back(phi::move(error));
   18|  2.57M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  30.5k|    {
  181|  30.5k|        ParsedProgram program;
  182|       |
  183|  30.5k|        program.m_Tokens = tokens;
  184|       |
  185|  30.5k|        phi::boolean line_has_instruction{false};
  186|  30.5k|        phi::usize   label_count{0u};
  187|       |
  188|  9.61M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 9.58M, False: 30.5k]
  ------------------
  189|  9.58M|        {
  190|  9.58M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  9.58M|            switch (current_token.GetType())
  195|  9.58M|            {
  196|       |                // Ignore comments
  197|   895k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 895k, False: 8.69M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   895k|                    break;
  200|       |
  201|  6.09M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 6.09M, False: 3.49M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  6.09M|                    line_has_instruction = false;
  204|  6.09M|                    break;
  205|       |
  206|   501k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 501k, False: 9.08M]
  ------------------
  207|   501k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 19.2k, False: 482k]
  ------------------
  208|  19.2k|                    {
  209|  19.2k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  19.2k|                                current_token, Token::Type::NewLine));
  211|  19.2k|                        break;
  212|  19.2k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   482k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 341k, False: 140k]
  ------------------
  217|   341k|                    {
  218|   341k|                        program.AddParseError(
  219|   341k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   341k|                        break;
  221|   341k|                    }
  222|       |
  223|   140k|                    phi::string_view label_name = current_token.GetText();
  224|   140k|                    label_name.remove_suffix(1u);
  225|       |
  226|   140k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 30.4k, False: 110k]
  ------------------
  227|  30.4k|                    {
  228|  30.4k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  30.4k|                                current_token.GetLineNumber().unsafe(),
  230|  30.4k|                                current_token.GetColumn().unsafe(), label_name));
  231|  30.4k|                        break;
  232|  30.4k|                    }
  233|       |
  234|   110k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 35.1k, False: 75.3k]
  ------------------
  235|  35.1k|                    {
  236|  35.1k|                        program.AddParseError(
  237|  35.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  35.1k|                        break;
  239|  35.1k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  75.3k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 55.0k, False: 20.3k]
  ------------------
  243|  55.0k|                    {
  244|       |                        // Find first defintions of label
  245|  55.0k|                        const Token* first_label_definition =
  246|  55.0k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  55.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  55.0k|                                    {
  249|  55.0k|                                        phi::string_view token_label_name = t.GetText();
  250|  55.0k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  55.0k|                                        if (token_label_name == label_name)
  253|  55.0k|                                        {
  254|  55.0k|                                            return true;
  255|  55.0k|                                        }
  256|  55.0k|                                    }
  257|       |
  258|  55.0k|                                    return false;
  259|  55.0k|                                });
  260|       |
  261|  55.0k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  55.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  55.0k|                                current_token, *first_label_definition));
  265|  55.0k|                        break;
  266|  55.0k|                    }
  267|       |
  268|  20.3k|                    program.m_JumpData[label_name] =
  269|  20.3k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  20.3k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  20.3k|                    break;
  276|  75.3k|                }
  277|       |
  278|  1.35M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.35M, False: 8.23M]
  ------------------
  279|  1.35M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 1.04M, False: 316k]
  ------------------
  280|  1.04M|                    {
  281|  1.04M|                        program.AddParseError(
  282|  1.04M|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  1.04M|                        break;
  284|  1.04M|                    }
  285|       |
  286|   316k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   316k|                    PHI_ASSERT(current_token.HasHint());
  290|   316k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   316k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   316k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   316k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   316k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   316k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   316k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   316k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   316k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   404k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 393k, False: 10.6k]
  ------------------
  312|   393k|                    {
  313|       |                        // Get next token
  314|   393k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 1.39k, False: 392k]
  ------------------
  315|  1.39k|                        {
  316|  1.39k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|  1.39k|                                    current_token, number_of_argument_required.unsafe(),
  318|  1.39k|                                    argument_num.unsafe()));
  319|  1.39k|                            break;
  320|  1.39k|                        }
  321|       |
  322|   392k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   392k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 53.8k, False: 338k]
  ------------------
  326|  53.8k|                        {
  327|  53.8k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 899, False: 52.9k]
  ------------------
  328|    899|                            {
  329|    899|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    899|                            }
  331|       |
  332|  53.8k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  53.8k|                            continue;
  335|  53.8k|                        }
  336|       |
  337|   338k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 175k, False: 162k]
  ------------------
  338|   175k|                        {
  339|   175k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   175k|                                    token, number_of_argument_required.unsafe(),
  341|   175k|                                    argument_num.unsafe()));
  342|   175k|                            break;
  343|   175k|                        }
  344|       |
  345|   162k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   162k|                                parse_instruction_argument(
  347|   162k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   162k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 129k, False: 33.8k]
  ------------------
  349|   129k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   129k|                            break;
  352|   129k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  33.8k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  33.8k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  33.8k|                        argument_num++;
  359|  33.8k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  33.8k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   316k|                    program.m_Instructions.emplace_back(instruction);
  367|   316k|                    line_has_instruction = true;
  368|   316k|                    break;
  369|  1.35M|                }
  370|       |
  371|   734k|                default:
  ------------------
  |  Branch (371:17): [True: 734k, False: 8.85M]
  ------------------
  372|   734k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   734k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 521k, False: 213k]
  ------------------
  374|   521k|                    {
  375|   521k|                        expected_token_type = Token::Type::NewLine;
  376|   521k|                    }
  377|       |
  378|   734k|                    program.AddParseError(
  379|   734k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   734k|                    break;
  381|  9.58M|            }
  382|  9.58M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  30.5k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 2.24k, False: 28.3k]
  ------------------
  386|  2.24k|        {
  387|  73.8k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 71.6k, False: 2.24k]
  ------------------
  388|  71.6k|            {
  389|  71.6k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  71.6k|                const Token& token = *it;
  392|  71.6k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 6.21k, False: 65.4k]
  ------------------
  393|  6.21k|                {
  394|  6.21k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  6.21k|                    --label_count;
  396|  6.21k|                }
  397|  71.6k|            }
  398|  2.24k|        }
  399|       |
  400|  30.5k|        return program;
  401|  30.5k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  30.5k|    {
  405|  30.5k|        TokenStream tokens = Tokenize(source);
  406|  30.5k|        return Parse(tokens);
  407|  30.5k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   162k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   162k|        switch (token.GetType())
   37|   162k|        {
   38|  6.08k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 6.08k, False: 156k]
  ------------------
   39|  6.08k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 2.12k, False: 3.96k]
  ------------------
   40|  6.08k|                                          ArgumentType::AddressDisplacement))
   41|  2.12k|                {
   42|  2.12k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|  2.12k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|  2.12k|                    return {};
   46|  2.12k|                }
   47|       |
   48|       |                // Get address displacement
   49|  3.96k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  3.96k|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|  3.96k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 5, False: 3.95k]
  ------------------
   54|      5|                {
   55|      5|                    program.AddParseError(
   56|      5|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      5|                    return {};
   58|      5|                }
   59|       |
   60|  3.95k|                auto         it           = tokens.current_position();
   61|  3.95k|                const Token& first_token  = tokens.consume();
   62|  3.95k|                const Token& second_token = tokens.consume();
   63|  3.95k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  3.95k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 3.95k, False: 0]
  ------------------
   66|  3.95k|                {
   67|  3.95k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  3.95k|                            first_token, Token::Type::OpenBracket));
   69|  3.95k|                    return {};
   70|  3.95k|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  25.8k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 25.8k, False: 136k]
  ------------------
   97|  25.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 1.40k, False: 24.4k]
  ------------------
   98|  1.40k|                {
   99|  1.40k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  1.40k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  1.40k|                    return {};
  102|  1.40k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  24.4k|                return ConstructInstructionArgumentRegisterInt(
  108|  24.4k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  25.8k|            }
  110|  6.20k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 6.20k, False: 156k]
  ------------------
  111|  6.20k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 976, False: 5.22k]
  ------------------
  112|    976|                {
  113|    976|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    976|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    976|                    return {};
  116|    976|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  5.22k|                return ConstructInstructionArgumentRegisterFloat(
  122|  5.22k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  6.20k|            }
  124|  3.77k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 3.77k, False: 159k]
  ------------------
  125|  3.77k|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|  3.77k|                return {};
  128|  6.20k|            }
  129|  33.1k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 33.1k, False: 129k]
  ------------------
  130|       |                // Parse as Label
  131|  33.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 4.47k, False: 28.6k]
  ------------------
  132|  4.47k|                {
  133|  4.47k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  4.47k|                            token, expected_argument_type, ArgumentType::Label));
  135|  4.47k|                    return {};
  136|  4.47k|                }
  137|       |
  138|  28.6k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 28.6k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  28.6k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 26.5k, False: 2.06k]
  ------------------
  145|  26.5k|                {
  146|  26.5k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  26.5k|                    return {};
  148|  26.5k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.06k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  28.6k|            }
  154|  4.04k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 4.04k, False: 158k]
  ------------------
  155|  4.04k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 607, False: 3.43k]
  ------------------
  156|    607|                {
  157|    607|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    607|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    607|                    return {};
  160|    607|                }
  161|       |
  162|  3.43k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 2.06k, False: 1.37k]
  ------------------
  163|  2.06k|                {
  164|  2.06k|                    return ConstructInstructionArgumentImmediateValue(
  165|  2.06k|                            static_cast<phi::int16_t>(token.GetHint()));
  166|  2.06k|                }
  167|       |
  168|  1.37k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|  1.37k|                return {};
  170|  3.43k|            }
  171|       |
  172|  83.7k|            default:
  ------------------
  |  Branch (172:13): [True: 83.7k, False: 79.0k]
  ------------------
  173|  83.7k|                program.AddParseError(
  174|  83.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  83.7k|                return {};
  176|   162k|        }
  177|   162k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  2.65M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.65M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 281k, False: 2.36M]
  ------------------
  248|   281k|                                    {
  249|   281k|                                        phi::string_view token_label_name = t.GetText();
  250|   281k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   281k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 55.0k, False: 226k]
  ------------------
  253|  55.0k|                                        {
  254|  55.0k|                                            return true;
  255|  55.0k|                                        }
  256|   281k|                                    }
  257|       |
  258|  2.59M|                                    return false;
  259|  2.65M|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|    655|    {
  350|    655|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 0, False: 655]
  ------------------
  351|      0|        {
  352|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|      0|            return false;
  354|      0|        }
  355|       |
  356|    655|        m_CurrentProgram = &program;
  357|       |
  358|    655|        m_ProgramCounter               = 0u;
  359|    655|        m_Halted                       = false;
  360|    655|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    655|        m_LastRaisedException          = Exception::None;
  362|    655|        m_CurrentStepCount             = 0u;
  363|       |
  364|    655|        return true;
  365|    655|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|  2.42M|    {
   11|  2.42M|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 470k, False: 1.95M]
  ------------------
   12|   470k|        {
   13|   470k|            const char first_char = token[0u];
   14|   470k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 246k, False: 223k]
  |  Branch (14:38): [True: 2.74k, False: 220k]
  ------------------
   15|   249k|            {
   16|   249k|                const char second_char = token[1u];
   17|   249k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 248k, False: 780]
  |  Branch (17:43): [True: 241k, False: 7.25k]
  ------------------
   18|   241k|                {
   19|   241k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|   241k|                }
   21|   249k|            }
   22|   470k|        }
   23|  1.95M|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 1.11M, False: 832k]
  ------------------
   24|  1.11M|        {
   25|  1.11M|            const char first_char = token[0u];
   26|  1.11M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 17.9k, False: 1.10M]
  |  Branch (26:38): [True: 21.9k, False: 1.07M]
  ------------------
   27|  39.9k|            {
   28|  39.9k|                const char second_char = token[1u];
   29|  39.9k|                const char third_char  = token[2u];
   30|       |
   31|  39.9k|                switch (second_char)
   32|  39.9k|                {
   33|  24.4k|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 24.4k, False: 15.4k]
  ------------------
   34|  24.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 9.59k, False: 14.8k]
  |  Branch (34:50): [True: 7.94k, False: 1.65k]
  ------------------
   35|  7.94k|                        {
   36|  7.94k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|  7.94k|                        }
   38|  16.5k|                        break;
   39|  24.4k|                    }
   40|  16.5k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 7.10k, False: 32.8k]
  ------------------
   41|  7.10k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 4.27k, False: 2.82k]
  |  Branch (41:50): [True: 3.47k, False: 800]
  ------------------
   42|  3.47k|                        {
   43|  3.47k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|  3.47k|                        }
   45|  3.62k|                        break;
   46|  7.10k|                    }
   47|  5.66k|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 5.66k, False: 34.2k]
  ------------------
   48|  5.66k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 3.71k, False: 1.95k]
  |  Branch (48:50): [True: 1.28k, False: 673]
  ------------------
   49|  4.99k|                        {
   50|  4.99k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|  4.99k|                        }
   52|    673|                        break;
   53|  5.66k|                    }
   54|  2.69k|                    default: {
  ------------------
  |  Branch (54:21): [True: 2.69k, False: 37.2k]
  ------------------
   55|  2.69k|                        break;
   56|  5.66k|                    }
   57|  39.9k|                }
   58|  39.9k|            }
   59|  1.11M|        }
   60|       |
   61|  2.16M|        return IntRegisterID::None;
   62|  2.42M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  2.16M|    {
   66|  2.16M|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 228k, False: 1.93M]
  ------------------
   67|   228k|        {
   68|   228k|            const char first_char = token[0u];
   69|   228k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 34.6k, False: 193k]
  |  Branch (69:38): [True: 977, False: 192k]
  ------------------
   70|  35.6k|            {
   71|  35.6k|                const char second_char = token[1u];
   72|  35.6k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 34.6k, False: 984]
  |  Branch (72:43): [True: 32.2k, False: 2.39k]
  ------------------
   73|  32.2k|                {
   74|  32.2k|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|  32.2k|                }
   76|  35.6k|            }
   77|   228k|        }
   78|  1.93M|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 1.10M, False: 832k]
  ------------------
   79|  1.10M|        {
   80|  1.10M|            const char first_char = token[0u];
   81|  1.10M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 6.37k, False: 1.09M]
  |  Branch (81:38): [True: 5.78k, False: 1.09M]
  ------------------
   82|  12.1k|            {
   83|  12.1k|                const char second_char = token[1u];
   84|  12.1k|                const char third_char  = token[2u];
   85|       |
   86|  12.1k|                switch (second_char)
   87|  12.1k|                {
   88|  6.07k|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 6.07k, False: 6.08k]
  ------------------
   89|  6.07k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 4.99k, False: 1.08k]
  |  Branch (89:50): [True: 4.87k, False: 124]
  ------------------
   90|  4.87k|                        {
   91|  4.87k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|  4.87k|                        }
   93|  1.20k|                        break;
   94|  6.07k|                    }
   95|  3.17k|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 3.17k, False: 8.98k]
  ------------------
   96|  3.17k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 1.16k, False: 2.00k]
  |  Branch (96:50): [True: 641, False: 528]
  ------------------
   97|    641|                        {
   98|    641|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    641|                        }
  100|  2.53k|                        break;
  101|  3.17k|                    }
  102|  2.53k|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 972, False: 11.1k]
  ------------------
  103|    972|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 243, False: 729]
  |  Branch (103:50): [True: 550, False: 179]
  ------------------
  104|    793|                        {
  105|    793|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    793|                        }
  107|    179|                        break;
  108|    972|                    }
  109|  1.93k|                    default: {
  ------------------
  |  Branch (109:21): [True: 1.93k, False: 10.2k]
  ------------------
  110|  1.93k|                        break;
  111|    972|                    }
  112|  12.1k|                }
  113|  12.1k|            }
  114|  1.10M|        }
  115|       |
  116|  2.12M|        return FloatRegisterID::None;
  117|  2.16M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|  2.44M|    {
  121|  2.44M|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 503k, False: 1.94M]
  ------------------
  122|   503k|        {
  123|   503k|            const char c1 = token[0u];
  124|   503k|            const char c2 = token[1u];
  125|   503k|            const char c3 = token[2u];
  126|   503k|            const char c4 = token[3u];
  127|       |
  128|   503k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 56.9k, False: 446k]
  |  Branch (128:34): [True: 2.77k, False: 443k]
  |  Branch (128:49): [True: 56.9k, False: 2.80k]
  |  Branch (128:62): [True: 2.61k, False: 188]
  ------------------
  129|   503k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 56.9k, False: 2.61k]
  |  Branch (129:34): [True: 2.38k, False: 234]
  |  Branch (129:49): [True: 56.9k, False: 2.38k]
  |  Branch (129:62): [True: 0, False: 2.38k]
  ------------------
  130|   503k|        }
  131|       |
  132|  1.94M|        return false;
  133|  2.44M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|  8.12M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  1.86M|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|  24.0M|    {
   40|  24.0M|        return m_Type;
   41|  24.0M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|  10.3M|    {
   50|  10.3M|        return m_LineNumber;
   51|  10.3M|    }
_ZNK3dlx5Token9GetColumnEv:
   54|  20.2M|    {
   55|  20.2M|        return m_Column;
   56|  20.2M|    }
_ZNK3dlx5Token9GetLengthEv:
   59|  13.9M|    {
   60|  13.9M|        return m_Text.length();
   61|  13.9M|    }
_ZNK3dlx5Token7GetTextEv:
   64|  1.44M|    {
   65|  1.44M|        return m_Text;
   66|  1.44M|    }
_ZNK3dlx5Token7HasHintEv:
   78|   324k|    {
   79|   324k|        return m_HasHint;
   80|   324k|    }
_ZNK3dlx5Token7GetHintEv:
   83|   352k|    {
   84|   352k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|   352k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|   352k|                   m_Type == Type::ImmediateInteger);
   87|   352k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|   352k|        return m_Hint;
   90|   352k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  30.5k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  30.5k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  30.5k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|  3.96k|    {
   50|  3.96k|        return x + m_Iterator <= m_Tokens.size();
   51|  3.96k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|  10.0M|    {
   55|  10.0M|        return m_Iterator < m_Tokens.size();
   56|  10.0M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|  9.99M|    {
   60|  9.99M|        return m_Iterator >= m_Tokens.size();
   61|  9.99M|    }
_ZN3dlx11TokenStream7consumeEv:
   74|  9.99M|    {
   75|  9.99M|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|  9.99M|        return m_Tokens.at(m_Iterator++.unsafe());
   81|  9.99M|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|  3.95k|    {
  155|  3.95k|        return m_Iterator;
  156|  3.95k|    }
_ZNK3dlx11TokenStream5beginEv:
  168|  30.5k|    {
  169|       |#if defined(PHI_DEBUG)
  170|       |        //PHI_ASSERT(m_Finalized);
  171|       |#endif
  172|       |
  173|  30.5k|        return m_Tokens.begin();
  174|  30.5k|    }
_ZNK3dlx11TokenStream3endEv:
  186|  30.5k|    {
  187|       |#if defined(PHI_DEBUG)
  188|       |        //PHI_ASSERT(m_Finalized);
  189|       |#endif
  190|       |
  191|  30.5k|        return m_Tokens.end();
  192|  30.5k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|  2.24k|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|  2.24k|        return m_Tokens.rbegin();
  210|  2.24k|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  71.6k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  71.6k|        return m_Tokens.rend();
  219|  71.6k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  30.5k|    {
   66|  30.5k|        TokenStream tokens;
   67|       |
   68|  30.5k|        phi::string_view current_token;
   69|       |
   70|  30.5k|        phi::u64 current_line_number{1u};
   71|  30.5k|        phi::u64 current_column{1u};
   72|  30.5k|        phi::u64 token_begin{0u};
   73|       |
   74|  30.5k|        phi::boolean parsing_comment{false};
   75|       |
   76|  17.9M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 17.9M, False: 30.5k]
  ------------------
   77|  17.9M|        {
   78|  17.9M|            const char c{source.at(i)};
   79|       |
   80|  17.9M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 6.28M, False: 11.6M]
  ------------------
   81|  6.28M|            {
   82|  6.28M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 4.74M, False: 1.54M]
  ------------------
   83|  4.74M|                {
   84|       |                    // Skip empty lines
   85|  4.74M|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  4.74M|                                        current_line_number, current_column);
   87|       |
   88|  4.74M|                    parsing_comment = false;
   89|  4.74M|                    current_line_number += 1u;
   90|  4.74M|                    current_column = 1u;
   91|  4.74M|                    continue;
   92|  4.74M|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.54M|                tokens.emplace_back(ParseToken(
   96|  1.54M|                        source.substring_view(
   97|  1.54M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.54M|                                current_token.length()),
   99|  1.54M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.54M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.54M|                                    current_line_number, current_column);
  103|       |
  104|  1.54M|                current_token   = phi::string_view{};
  105|  1.54M|                parsing_comment = false;
  106|  1.54M|                current_line_number += 1u;
  107|  1.54M|                current_column = 0u;
  108|  1.54M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  11.6M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 8.73k, False: 11.6M]
  |  Branch (110:34): [True: 903k, False: 10.7M]
  ------------------
  111|   912k|            {
  112|   912k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 893k, False: 18.5k]
  ------------------
  113|   893k|                {
  114|   893k|                    token_begin = i;
  115|   893k|                }
  116|  18.5k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 14.1k, False: 4.38k]
  ------------------
  117|  14.1k|                {
  118|  14.1k|                    tokens.emplace_back(ParseToken(
  119|  14.1k|                            source.substring_view(
  120|  14.1k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  14.1k|                                    current_token.length()),
  122|  14.1k|                            current_line_number, current_column - current_token.length()));
  123|  14.1k|                    token_begin   = i;
  124|  14.1k|                    current_token = phi::string_view{};
  125|  14.1k|                }
  126|       |
  127|   912k|                parsing_comment = true;
  128|   912k|                current_token   = source.substring_view(
  129|   912k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   912k|                        current_token.length() + 1u);
  131|   912k|            }
  132|  10.7M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 978k, False: 9.72M]
  ------------------
  133|   978k|            {
  134|       |                // simply append the character
  135|   978k|                current_token = source.substring_view(
  136|   978k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   978k|                        current_token.length() + 1u);
  138|   978k|            }
  139|  9.72M|            else
  140|  9.72M|            {
  141|       |                // Not parsing a comment
  142|  9.72M|                switch (c)
  143|  9.72M|                {
  144|  1.34M|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 1.34M, False: 8.38M]
  ------------------
  145|  1.37M|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 29.4k, False: 9.70M]
  ------------------
  146|  1.37M|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 9.72M]
  ------------------
  147|  1.37M|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 20.1k, False: 1.35M]
  ------------------
  148|  20.1k|                        {
  149|  20.1k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  20.1k|                            continue;
  152|  20.1k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  1.35M|                        tokens.emplace_back(ParseToken(
  156|  1.35M|                                source.substring_view(
  157|  1.35M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  1.35M|                                        current_token.length()),
  159|  1.35M|                                current_line_number, current_column - current_token.length()));
  160|  1.35M|                        current_token = phi::string_view{};
  161|  1.35M|                        break;
  162|   163k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 163k, False: 9.56M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|   163k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 154k, False: 8.77k]
  ------------------
  165|   154k|                        {
  166|   154k|                            current_token = source.substring_view(
  167|   154k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|   154k|                                    current_token.length() + 1u);
  169|   154k|                            tokens.emplace_back(ParseToken(
  170|   154k|                                    source.substring_view(
  171|   154k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|   154k|                                                    token_begin),
  173|   154k|                                            current_token.length()),
  174|   154k|                                    current_line_number,
  175|   154k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|   154k|                            current_token = phi::string_view{};
  178|   154k|                        }
  179|  8.77k|                        else
  180|  8.77k|                        {
  181|       |                            // Orphan colon
  182|  8.77k|                            token_begin = i;
  183|       |
  184|  8.77k|                            tokens.emplace_back(
  185|  8.77k|                                    Token::Type::Colon,
  186|  8.77k|                                    source.substring_view(
  187|  8.77k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  8.77k|                                                    token_begin),
  189|  8.77k|                                            1u),
  190|  8.77k|                                    current_line_number, current_column);
  191|  8.77k|                        }
  192|   163k|                        break;
  193|   306k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 306k, False: 9.42M]
  ------------------
  194|   307k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 1.12k, False: 9.72M]
  ------------------
  195|   314k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 7.01k, False: 9.72M]
  ------------------
  196|   314k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 311k, False: 3.19k]
  ------------------
  197|   311k|                        {
  198|   311k|                            tokens.emplace_back(ParseToken(
  199|   311k|                                    source.substring_view(
  200|   311k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   311k|                                                    token_begin),
  202|   311k|                                            current_token.length()),
  203|   311k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   311k|                            current_token = phi::string_view{};
  206|   311k|                        }
  207|       |
  208|   314k|                        Token::Type type;
  209|   314k|                        switch (c)
  210|   314k|                        {
  211|   306k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 306k, False: 8.14k]
  ------------------
  212|   306k|                                type = Token::Type::Comma;
  213|   306k|                                break;
  214|  1.12k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 1.12k, False: 313k]
  ------------------
  215|  1.12k|                                type = Token::Type::OpenBracket;
  216|  1.12k|                                break;
  217|  7.01k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 7.01k, False: 307k]
  ------------------
  218|  7.01k|                                type = Token::Type::ClosingBracket;
  219|  7.01k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 314k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   314k|#endif
  225|   314k|                        }
  226|       |
  227|   314k|                        token_begin = i;
  228|       |
  229|   314k|                        tokens.emplace_back(
  230|   314k|                                type,
  231|   314k|                                source.substring_view(
  232|   314k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   314k|                                        1u),
  234|   314k|                                current_line_number, current_column);
  235|   314k|                        break;
  236|       |
  237|  7.87M|                    default:
  ------------------
  |  Branch (237:21): [True: 7.87M, False: 1.85M]
  ------------------
  238|  7.87M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 2.47M, False: 5.40M]
  ------------------
  239|  2.47M|                        {
  240|  2.47M|                            token_begin = i;
  241|  2.47M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  7.87M|                        current_token = source.substring_view(
  245|  7.87M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  7.87M|                                current_token.length() + 1u);
  247|  9.72M|                }
  248|  9.72M|            }
  249|       |
  250|  13.1M|            current_column += 1u;
  251|  13.1M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  30.5k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 8.10k, False: 22.4k]
  ------------------
  255|  8.10k|        {
  256|  8.10k|            tokens.emplace_back(
  257|  8.10k|                    ParseToken(source.substring_view(
  258|  8.10k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  8.10k|                                       current_token.length()),
  260|  8.10k|                               current_line_number, current_column - current_token.length()));
  261|  8.10k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  30.5k|        tokens.finalize();
  265|       |
  266|  30.5k|        return tokens;
  267|  30.5k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  3.38M|    {
   14|  3.38M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 21.9k, False: 3.36M]
  |  Branch (14:13): [True: 20.7k, False: 3.36M]
  |  Branch (14:36): [True: 20.7k, False: 1.14k]
  ------------------
   15|  20.7k|        {
   16|  20.7k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  20.7k|            if (number)
  ------------------
  |  Branch (18:17): [True: 5.47k, False: 15.2k]
  ------------------
   19|  5.47k|            {
   20|  5.47k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  5.47k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  5.47k|            }
   23|       |
   24|  15.2k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  20.7k|        }
   26|       |
   27|  3.36M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 4.56k, False: 3.35M]
  |  Branch (27:13): [True: 908k, False: 2.45M]
  |  Branch (27:36): [True: 903k, False: 2.45M]
  ------------------
   28|   908k|        {
   29|   908k|            return {Token::Type::Comment, token, line_number, column};
   30|   908k|        }
   31|       |
   32|  2.45M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 145k, False: 2.30M]
  ------------------
   33|   145k|        {
   34|   145k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|   145k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|   145k|        }
   37|       |
   38|  2.30M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 56.9k, False: 2.25M]
  ------------------
   39|  56.9k|        {
   40|  56.9k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  56.9k|        }
   42|       |
   43|  2.25M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 256k, False: 1.99M]
  ------------------
   44|   256k|        {
   45|   256k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   256k|                    static_cast<phi::uint32_t>(id)};
   47|   256k|        }
   48|       |
   49|  1.99M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 38.1k, False: 1.95M]
  ------------------
   50|  38.1k|        {
   51|  38.1k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  38.1k|                    static_cast<phi::uint32_t>(id)};
   53|  38.1k|        }
   54|       |
   55|  1.95M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.42M, False: 534k]
  ------------------
   56|  1.42M|        {
   57|  1.42M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.42M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.42M|        }
   60|       |
   61|   534k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  1.95M|    }

_ZN6ImVec2C2Ev:
  267|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   58|  30.5k|    {
   59|       |        // Constants
   60|  30.5k|        constexpr phi::uint8_t number_of_opcodes =
   61|  30.5k|                static_cast<phi::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   62|  30.5k|        constexpr phi::uint8_t number_of_int_registers   = 32;
   63|  30.5k|        constexpr phi::uint8_t number_of_float_registers = 32;
   64|       |
   65|  30.5k|        std::string ret;
   66|       |
   67|  7.62M|        for (phi::size_t index{0}; index < size;)
  ------------------
  |  Branch (67:36): [True: 7.59M, False: 30.2k]
  ------------------
   68|  7.59M|        {
   69|  7.59M|            phi::uint8_t current_value = data[index++];
   70|       |
   71|  7.59M|            switch (current_value)
   72|  7.59M|            {
   73|       |                // OpCode
   74|  1.27M|                case 0: {
  ------------------
  |  Branch (74:17): [True: 1.27M, False: 6.32M]
  ------------------
   75|       |                    // Has one more value
   76|  1.27M|                    if (index < size)
  ------------------
  |  Branch (76:25): [True: 1.27M, False: 2.69k]
  ------------------
   77|  1.27M|                    {
   78|  1.27M|                        phi::uint8_t opcode_value = data[index++] % number_of_opcodes;
   79|       |
   80|  1.27M|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   81|       |
   82|  1.27M|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (82:29): [True: 116, False: 1.27M]
  ------------------
   83|    116|                        {
   84|    116|                            return detail::ErrorString;
   85|    116|                        }
   86|  1.27M|                    }
   87|  1.27M|                    break;
   88|  1.27M|                }
   89|       |
   90|       |                // Int Register
   91|  1.27M|                case 1: {
  ------------------
  |  Branch (91:17): [True: 258k, False: 7.33M]
  ------------------
   92|       |                    // Has one more value
   93|   258k|                    if (index < size)
  ------------------
  |  Branch (93:25): [True: 258k, False: 482]
  ------------------
   94|   258k|                    {
   95|   258k|                        phi::uint8_t opcode_value = data[index++] % number_of_int_registers;
   96|       |
   97|   258k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   98|   258k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (98:29): [True: 8, False: 258k]
  ------------------
   99|      8|                        {
  100|      8|                            return detail::ErrorString;
  101|      8|                        }
  102|   258k|                    }
  103|   258k|                    break;
  104|   258k|                }
  105|       |
  106|       |                // Float register
  107|   258k|                case 2: {
  ------------------
  |  Branch (107:17): [True: 42.5k, False: 7.55M]
  ------------------
  108|       |                    // Has one more value
  109|  42.5k|                    if (index < size)
  ------------------
  |  Branch (109:25): [True: 42.5k, False: 33]
  ------------------
  110|  42.5k|                    {
  111|  42.5k|                        phi::uint8_t opcode_value = data[index++] % number_of_float_registers;
  112|       |
  113|  42.5k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  114|  42.5k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (114:29): [True: 37, False: 42.4k]
  ------------------
  115|     37|                        {
  116|     37|                            return detail::ErrorString;
  117|     37|                        }
  118|  42.5k|                    }
  119|  42.5k|                    break;
  120|  42.5k|                }
  121|       |
  122|       |                // Floating point status register
  123|  59.1k|                case 3: {
  ------------------
  |  Branch (123:17): [True: 59.1k, False: 7.53M]
  ------------------
  124|  59.1k|                    ret += "FPSR";
  125|  59.1k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (125:25): [True: 5, False: 59.1k]
  ------------------
  126|      5|                    {
  127|      5|                        return detail::ErrorString;
  128|      5|                    }
  129|       |
  130|  59.1k|                    break;
  131|  59.1k|                }
  132|       |
  133|       |                // Immediate integer
  134|  59.1k|                case 4: {
  ------------------
  |  Branch (134:17): [True: 35.4k, False: 7.56M]
  ------------------
  135|  35.4k|                    ret += "#";
  136|  35.4k|                    [[fallthrough]];
  137|  35.4k|                }
  138|       |
  139|       |                // Integer literal
  140|   235k|                case 5: {
  ------------------
  |  Branch (140:17): [True: 200k, False: 7.39M]
  ------------------
  141|   235k|                    phi::size_t size_of_int = std::min(2ul, size - index);
  142|       |
  143|   235k|                    if (size_of_int > 0)
  ------------------
  |  Branch (143:25): [True: 235k, False: 322]
  ------------------
  144|   235k|                    {
  145|   235k|                        phi::int16_t value = 0;
  146|       |
  147|   705k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (147:32): [True: 469k, False: 235k]
  ------------------
  148|   469k|                        {
  149|   469k|                            value <<= 8;
  150|   469k|                            value &= data[index++];
  151|   469k|                        }
  152|       |
  153|   235k|                        ret += std::to_string(value);
  154|   235k|                    }
  155|   235k|                    break;
  156|  35.4k|                }
  157|       |
  158|       |                // Label
  159|  86.2k|                case 6: {
  ------------------
  |  Branch (159:17): [True: 86.2k, False: 7.51M]
  ------------------
  160|  86.2k|                    phi::size_t label_length = std::min(5ul, size - index);
  161|       |
  162|  86.2k|                    if (label_length > 0)
  ------------------
  |  Branch (162:25): [True: 86.1k, False: 40]
  ------------------
  163|  86.1k|                    {
  164|  86.1k|                        std::string label_name = "lbl_";
  165|       |
  166|   516k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (166:32): [True: 429k, False: 86.1k]
  ------------------
  167|   429k|                        {
  168|   429k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  169|       |
  170|   429k|                            label_name += c;
  171|   429k|                        }
  172|       |
  173|       |                        // Add 1 in 10 chance to add a colon
  174|  86.1k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (174:29): [True: 85.6k, False: 476]
  |  Branch (174:45): [True: 75.9k, False: 9.69k]
  ------------------
  175|  75.9k|                        {
  176|  75.9k|                            label_name += ':';
  177|  75.9k|                            ret += label_name;
  178|  75.9k|                        }
  179|  10.1k|                        else
  180|  10.1k|                        {
  181|  10.1k|                            ret += label_name;
  182|  10.1k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (182:33): [True: 33, False: 10.1k]
  ------------------
  183|     33|                            {
  184|     33|                                return detail::ErrorString;
  185|     33|                            }
  186|  10.1k|                        }
  187|  86.1k|                    }
  188|  86.1k|                    break;
  189|  86.2k|                }
  190|       |
  191|       |                // Newline
  192|  4.72M|                case 7: {
  ------------------
  |  Branch (192:17): [True: 4.72M, False: 2.86M]
  ------------------
  193|  4.72M|                    ret += '\n';
  194|  4.72M|                    break;
  195|  86.2k|                }
  196|       |
  197|       |                // Comment
  198|   911k|                case 8: {
  ------------------
  |  Branch (198:17): [True: 911k, False: 6.68M]
  ------------------
  199|   911k|                    phi::size_t comment_length = std::min(5ul, size - index);
  200|       |
  201|   911k|                    if (comment_length > 0)
  ------------------
  |  Branch (201:25): [True: 910k, False: 1.24k]
  ------------------
  202|   910k|                    {
  203|   910k|                        std::string comment = "; ";
  204|       |
  205|  5.44M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (205:32): [True: 4.53M, False: 910k]
  ------------------
  206|  4.53M|                        {
  207|  4.53M|                            comment += static_cast<char>(data[index++]);
  208|  4.53M|                        }
  209|       |
  210|   910k|                        ret += comment + '\n';
  211|   910k|                    }
  212|   911k|                    break;
  213|  86.2k|                }
  214|       |
  215|       |                // Ignore
  216|    100|                default:
  ------------------
  |  Branch (216:17): [True: 100, False: 7.59M]
  ------------------
  217|    100|                    return detail::ErrorString;
  218|  7.59M|            }
  219|  7.59M|        }
  220|       |
  221|  30.2k|        return ret;
  222|  30.5k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   23|  1.64M|        {
   24|  1.64M|            if (index < size)
  ------------------
  |  Branch (24:17): [True: 1.63M, False: 5.99k]
  ------------------
   25|  1.63M|            {
   26|  1.63M|                phi::uint8_t val = data[index++];
   27|  1.63M|                if (val == 0)
  ------------------
  |  Branch (27:21): [True: 1.33M, False: 296k]
  ------------------
   28|  1.33M|                {
   29|  1.33M|                    text += ' ';
   30|  1.33M|                }
   31|   296k|                else if (val == 1)
  ------------------
  |  Branch (31:26): [True: 296k, False: 199]
  ------------------
   32|   296k|                {
   33|   296k|                    text += ',';
   34|   296k|                }
   35|    199|                else
   36|    199|                {
   37|    199|                    return false;
   38|    199|                }
   39|  1.63M|            }
   40|       |
   41|  1.64M|            return true;
   42|  1.64M|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   47|   429k|        {
   48|   429k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (48:17): [True: 339k, False: 90.3k]
  ------------------
   49|   339k|            {
   50|   339k|                return '_';
   51|   339k|            }
   52|       |
   53|  90.3k|            return c;
   54|   429k|        }

LLVMFuzzerTestOneInput:
   10|  30.5k|{
   11|  30.5k|    static dlxemu::Emulator emu;
   12|       |
   13|  30.5k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   14|       |
   15|  30.5k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  30.5k|    editor.SetText(source);
   19|  30.5k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  30.5k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  30.5k|    editor.ColorizeInternal();
   24|       |
   25|  30.5k|    return 0;
   26|  30.5k|}


_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  20.0k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  232|  4.01k|    {
  233|  4.01k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (233:13): [True: 2.73k, False: 1.27k]
  ------------------
  234|  2.73k|        {
  235|  2.73k|            return m_Line < other.m_Line;
  236|  2.73k|        }
  237|       |
  238|  1.27k|        return m_Column <= other.m_Column;
  239|  4.01k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  242|      1|    {
  243|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (243:13): [True: 0, False: 1]
  ------------------
  244|      0|        {
  245|      0|            return m_Line > other.m_Line;
  246|      0|        }
  247|       |
  248|      1|        return m_Column >= other.m_Column;
  249|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  256|  1.25M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  284|      1|    {
  285|      1|        Colorize();
  286|      1|        m_Lines.emplace_back();
  287|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  290|      1|    {
  291|      1|        VerifyInternalState();
  292|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  340|  4.01k|    {
  341|  4.01k|        m_ErrorMarkers.clear();
  342|  4.01k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  405|  4.01k|    {
  406|  4.01k|        m_Breakpoints.clear();
  407|  4.01k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  485|  4.01k|    {
  486|  4.01k|        m_Lines.clear();
  487|  4.01k|        ResetState();
  488|  4.01k|        m_Lines.emplace_back();
  489|       |
  490|  4.01k|        for (const char character : text)
  ------------------
  |  Branch (490:35): [True: 1.59M, False: 4.01k]
  ------------------
  491|  1.59M|        {
  492|  1.59M|            if (character == '\r' ||
  ------------------
  |  Branch (492:17): [True: 931, False: 1.59M]
  |  Branch (492:17): [True: 66.8k, False: 1.53M]
  ------------------
  493|  1.59M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (493:18): [True: 341k, False: 1.25M]
  |  Branch (493:48): [True: 68.1k, False: 273k]
  |  Branch (493:69): [True: 65.9k, False: 2.18k]
  ------------------
  494|  66.8k|            {
  495|       |                // ignore the carriage return character and control characters
  496|  66.8k|            }
  497|  1.53M|            else if (character == '\n')
  ------------------
  |  Branch (497:22): [True: 273k, False: 1.25M]
  ------------------
  498|   273k|            {
  499|   273k|                m_Lines.emplace_back();
  500|   273k|            }
  501|  1.25M|            else
  502|  1.25M|            {
  503|  1.25M|                m_Lines.back().emplace_back(static_cast<Char>(character), PaletteIndex::Default);
  504|  1.25M|            }
  505|  1.59M|        }
  506|       |
  507|  4.01k|        m_TextChanged = true;
  508|  4.01k|        m_ScrollToTop = true;
  509|       |
  510|  4.01k|        m_UndoBuffer.clear();
  511|  4.01k|        m_UndoIndex = 0u;
  512|       |
  513|  4.01k|        Colorize();
  514|  4.01k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  517|  4.01k|    {
  518|  4.01k|        const phi::u32 max_line = GetMaxLineNumber();
  519|       |
  520|  4.01k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  521|  4.01k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1484|      1|    {
 1485|       |        // Lines should never be empty
 1486|      1|        PHI_ASSERT(!m_Lines.empty());
 1487|       |
 1488|       |        // Verify Selection is still in a valid state
 1489|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1490|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1491|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1492|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1493|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1494|       |
 1495|       |        // Verify cursor position
 1496|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1497|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1498|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1499|       |
 1500|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1501|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1502|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1503|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1504|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1505|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1506|       |#endif
 1507|       |
 1508|       |        // Verify that all breakpoints are on existing lines
 1509|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1509:35): [True: 0, False: 1]
  ------------------
 1510|      0|        {
 1511|      0|            PHI_ASSERT(break_point != 0u);
 1512|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1513|      0|        }
 1514|       |
 1515|       |        // Verify that all error markers are on existing lines
 1516|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1516:34): [True: 0, False: 1]
  ------------------
 1517|      0|        {
 1518|      0|            const phi::u32 line_number = error_marker.first;
 1519|       |
 1520|      0|            PHI_ASSERT(line_number != 0u);
 1521|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1522|      0|        }
 1523|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1526|      1|    {
 1527|      1|        constexpr const static Palette palette = {{
 1528|      1|                0xff7f7f7f, // Default
 1529|      1|                0xffd69c56, // OpCode
 1530|      1|                0xff00ff00, // Register
 1531|      1|                0xff7070e0, // IntegerLiteral
 1532|      1|                0xff206020, // Comment
 1533|      1|                0xff101010, // Background
 1534|      1|                0xffe0e0e0, // Cursor
 1535|      1|                0x80a06020, // Selection
 1536|      1|                0x800020ff, // ErrorMarker
 1537|      1|                0x40f08000, // Breakpoint
 1538|      1|                0xff707000, // Line number
 1539|      1|                0x40000000, // Current line fill
 1540|      1|                0x40808080, // Current line fill (inactive)
 1541|      1|                0x40a0a0a0, // Current line edge
 1542|      1|        }};
 1543|       |
 1544|      1|        return palette;
 1545|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1710|  4.01k|    {
 1711|       |        // TODO: This is quite unreadable
 1712|  4.01k|        const phi::u32 to_line =
 1713|  4.01k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1713:17): [True: 4.01k, False: 0]
  ------------------
 1714|  4.01k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1715|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1716|       |
 1717|  4.01k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1718|  4.01k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1719|  4.01k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1720|  4.01k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1721|  4.01k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1826|  4.01k|    {
 1827|  4.01k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1828|  4.01k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1829|  4.01k|        PHI_ASSERT(start <= end);
 1830|       |
 1831|  4.01k|        std::string result;
 1832|       |
 1833|  4.01k|        phi::u32   lstart = start.m_Line;
 1834|  4.01k|        phi::u32   lend   = end.m_Line;
 1835|  4.01k|        phi::u32   istart = GetCharacterIndex(start);
 1836|  4.01k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1837|  4.01k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1838|  4.01k|        phi::usize size   = 0u;
 1839|       |
 1840|   281k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1840:35): [True: 277k, False: 4.01k]
  ------------------
 1841|   277k|        {
 1842|   277k|            PHI_ASSERT(i < m_Lines.size());
 1843|   277k|            size += m_Lines[i.unsafe()].size();
 1844|   277k|        }
 1845|       |
 1846|  4.01k|        result.reserve((size + size / 8u).unsafe());
 1847|       |
 1848|  1.53M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1848:16): [True: 537k, False: 998k]
  |  Branch (1848:16): [True: 1.53M, False: 4.01k]
  |  Branch (1848:33): [True: 994k, False: 4.01k]
  ------------------
 1849|  1.53M|        {
 1850|  1.53M|            PHI_ASSERT(lstart < m_Lines.size());
 1851|       |
 1852|  1.53M|            const Line& line = m_Lines[lstart.unsafe()];
 1853|  1.53M|            if (istart < line.size())
  ------------------
  |  Branch (1853:17): [True: 1.25M, False: 273k]
  ------------------
 1854|  1.25M|            {
 1855|  1.25M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1856|  1.25M|                istart++;
 1857|  1.25M|            }
 1858|   273k|            else
 1859|   273k|            {
 1860|   273k|                istart = 0u;
 1861|   273k|                ++lstart;
 1862|       |
 1863|   273k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1863:21): [True: 273k, False: 0]
  ------------------
 1864|   273k|                {
 1865|   273k|                    result += '\n';
 1866|   273k|                }
 1867|   273k|            }
 1868|  1.53M|        }
 1869|       |
 1870|  4.01k|        return result;
 1871|  4.01k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2403|  8.02k|    {
 2404|  8.02k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2405|       |
 2406|  8.02k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2407|  8.02k|        phi::u32    index = 0u;
 2408|   191k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2408:35): [True: 186k, False: 4.38k]
  |  Branch (2408:35): [True: 183k, False: 8.02k]
  |  Branch (2408:58): [True: 183k, False: 3.64k]
  ------------------
 2409|   183k|        {
 2410|   183k|            PHI_ASSERT(index < line.size());
 2411|   183k|            const Char character = line[index.unsafe()].m_Char;
 2412|       |
 2413|   183k|            if (character == '\t')
  ------------------
  |  Branch (2413:17): [True: 0, False: 183k]
  ------------------
 2414|      0|            {
 2415|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2416|      0|            }
 2417|   183k|            else
 2418|   183k|            {
 2419|   183k|                ++column;
 2420|   183k|            }
 2421|       |
 2422|   183k|            index += UTF8CharLength(character);
 2423|   183k|        }
 2424|       |
 2425|  8.02k|        return index;
 2426|  8.02k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2473|  4.01k|    {
 2474|  4.01k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2474:13): [True: 0, False: 4.01k]
  ------------------
 2475|      0|        {
 2476|      0|            return 0u;
 2477|      0|        }
 2478|       |
 2479|  4.01k|        const Line& line = m_Lines[line_number.unsafe()];
 2480|  4.01k|        phi::u32    col  = 0u;
 2481|       |
 2482|   187k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2482:32): [True: 183k, False: 4.01k]
  ------------------
 2483|   183k|        {
 2484|   183k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2485|   183k|            if (character == '\t')
  ------------------
  |  Branch (2485:17): [True: 0, False: 183k]
  ------------------
 2486|      0|            {
 2487|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2488|      0|            }
 2489|   183k|            else
 2490|   183k|            {
 2491|   183k|                col++;
 2492|   183k|            }
 2493|       |
 2494|   183k|            i += UTF8CharLength(character);
 2495|   183k|        }
 2496|       |
 2497|  4.01k|        return col;
 2498|  4.01k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2501|  4.01k|    {
 2502|  4.01k|        PHI_ASSERT(!m_Lines.empty());
 2503|       |
 2504|  4.01k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2505|  4.01k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3639|   658k|    {
 3640|   658k|        PaletteIndex palette_index{PaletteIndex::Default};
 3641|       |
 3642|       |        // Determine palette color
 3643|   658k|        switch (token.GetType())
 3644|   658k|        {
 3645|   113k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3645:13): [True: 113k, False: 545k]
  ------------------
 3646|   113k|                palette_index = PaletteIndex::Comment;
 3647|   113k|                break;
 3648|  1.32k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3648:13): [True: 1.32k, False: 657k]
  ------------------
 3649|  9.58k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3649:13): [True: 8.25k, False: 650k]
  ------------------
 3650|  9.58k|                palette_index = PaletteIndex::IntegerLiteral;
 3651|  9.58k|                break;
 3652|   151k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3652:13): [True: 151k, False: 507k]
  ------------------
 3653|   151k|                palette_index = PaletteIndex::OpCode;
 3654|   151k|                break;
 3655|  1.46k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3655:13): [True: 1.46k, False: 657k]
  ------------------
 3656|  5.99k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3656:13): [True: 4.52k, False: 654k]
  ------------------
 3657|  14.2k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3657:13): [True: 8.27k, False: 650k]
  ------------------
 3658|  14.2k|                palette_index = PaletteIndex::Register;
 3659|  14.2k|                break;
 3660|   273k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3660:13): [True: 273k, False: 385k]
  ------------------
 3661|   273k|                return;
 3662|  96.7k|            default:
  ------------------
  |  Branch (3662:13): [True: 96.7k, False: 561k]
  ------------------
 3663|  96.7k|                break;
 3664|   658k|        }
 3665|       |
 3666|   385k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3667|   385k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3668|       |
 3669|   385k|        for (phi::u64 index{token.GetColumn() - 1u};
 3670|  1.50M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3670:14): [True: 1.12M, False: 385k]
  ------------------
 3671|  1.12M|        {
 3672|  1.12M|            PHI_ASSERT(index < line.size());
 3673|  1.12M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3674|  1.12M|        }
 3675|   385k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3678|  4.01k|    {
 3679|  4.01k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3680|       |
 3681|  4.01k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3681:38): [True: 658k, False: 4.01k]
  ------------------
 3682|   658k|        {
 3683|   658k|            ColorizeToken(token);
 3684|   658k|        }
 3685|  4.01k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3688|  4.01k|    {
 3689|  4.01k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3690|  4.01k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3691|  4.01k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3692|       |
 3693|       |        // Clear breakpoints and markers
 3694|  4.01k|        ClearBreakPoints();
 3695|  4.01k|        ClearErrorMarkers();
 3696|  4.01k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|   183k|{
  133|   183k|    return UTF8CharLength(static_cast<char>(character));
  134|   183k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|   366k|{
  103|   366k|    if ((character & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 366k]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|   366k|    if ((character & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 366k]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|   366k|    if ((character & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 366k]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|   366k|    if ((character & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 366k]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|   366k|    if ((character & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 366k]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|   366k|    return 1_u8;
  129|   366k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  4.01k|    {
  184|  4.01k|        return m_DLXProgram;
  185|  4.01k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  4.01k|    {
  189|  4.01k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  4.01k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 172, False: 3.84k]
  ------------------
  192|    172|        {
  193|    172|            m_Processor.LoadProgram(m_DLXProgram);
  194|    172|        }
  195|  4.01k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  4.01k|    {
  209|  4.01k|        return m_CodeEditor;
  210|  4.01k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|   174k|        {
  173|   174k|            PHI_ASSERT(index < 3u);
  174|       |
  175|   174k|            switch (index.unsafe())
  176|   174k|            {
  177|  73.2k|                case 0:
  ------------------
  |  Branch (177:17): [True: 73.2k, False: 100k]
  ------------------
  178|  73.2k|                    return m_Arg1Type;
  179|       |
  180|  50.5k|                case 1:
  ------------------
  |  Branch (180:17): [True: 50.5k, False: 123k]
  ------------------
  181|  50.5k|                    return m_Arg2Type;
  182|       |
  183|  50.3k|                case 2:
  ------------------
  |  Branch (183:17): [True: 50.3k, False: 123k]
  ------------------
  184|  50.3k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 174k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|   174k|#endif
  191|   174k|            }
  192|   174k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  49.7k|        {
  199|  49.7k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  49.7k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 49.5k, False: 176]
  ------------------
  203|  49.5k|            {
  204|  49.5k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  49.5k|            }
  206|  49.7k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 34.7k, False: 15.0k]
  ------------------
  207|  34.7k|            {
  208|  34.7k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  34.7k|            }
  210|  49.7k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 26.4k, False: 23.3k]
  ------------------
  211|  26.4k|            {
  212|  26.4k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  26.4k|            }
  214|       |
  215|  49.7k|            return number_of_argument_required;
  216|  49.7k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  49.7k|        {
  225|  49.7k|            return m_Executor;
  226|  49.7k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  15.0k|    {
   38|  15.0k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  15.0k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  15.0k|                                         static_cast<underlying_t>(rhs));
   42|  15.0k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  15.0k|    {
   55|  15.0k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  15.0k|        return static_cast<underlying_t>(type & test) != 0;
   58|  15.0k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|   116k|    {
  206|   116k|        switch (value)
  207|   116k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  45.8k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  45.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 45.8k, False: 70.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|  45.8k|        return #name;
  |  |  ------------------
  |  |   16|  45.8k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  8.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.85k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.85k|        return #name;
  |  |  ------------------
  |  |   17|  8.85k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    268|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 268, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    268|        return #name;
  |  |  ------------------
  |  |   18|  1.50k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.50k, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.50k|        return #name;
  |  |  ------------------
  |  |   19|  1.50k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    365|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 365, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    365|        return #name;
  |  |  ------------------
  |  |   20|    365|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    216|        return #name;
  |  |  ------------------
  |  |   21|    216|                                                                                                   \
  |  |   22|    216|    /* Sub */                                                                                      \
  |  |   23|    216|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |   24|    230|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    230|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 230, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    230|        return #name;
  |  |  ------------------
  |  |   25|    253|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    253|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 253, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    253|        return #name;
  |  |  ------------------
  |  |   26|    253|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    221|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 221, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    221|        return #name;
  |  |  ------------------
  |  |   27|    221|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |   28|    273|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    273|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 273, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    273|        return #name;
  |  |  ------------------
  |  |   29|    273|                                                                                                   \
  |  |   30|    273|    /* Multiplication */                                                                           \
  |  |   31|    273|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   32|     67|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   33|    194|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   34|  8.04k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|  8.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.04k, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.04k|        return #name;
  |  |  ------------------
  |  |   35|  8.04k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   36|    196|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   37|    194|                                                                                                   \
  |  |   38|    194|    /* Division */                                                                                 \
  |  |   39|    194|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   40|    259|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    259|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 259, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    259|        return #name;
  |  |  ------------------
  |  |   41|    259|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |   42|    204|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |   43|    229|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 229, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    229|        return #name;
  |  |  ------------------
  |  |   44|    799|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    799|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 799, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  210|    799|        return #name;
  |  |  ------------------
  |  |   45|    799|                                                                                                   \
  |  |   46|    799|    /* Shift left (logical) */                                                                     \
  |  |   47|    799|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   48|    210|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |   49|    210|                                                                                                   \
  |  |   50|    210|    /* Shift right (logical) */                                                                    \
  |  |   51|    235|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    235|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 235, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    235|        return #name;
  |  |  ------------------
  |  |   52|    488|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    488|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 488, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    488|        return #name;
  |  |  ------------------
  |  |   53|    488|                                                                                                   \
  |  |   54|    488|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    488|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |   56|    218|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 218, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    218|        return #name;
  |  |  ------------------
  |  |   57|    218|                                                                                                   \
  |  |   58|    218|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    323|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    323|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 323, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    323|        return #name;
  |  |  ------------------
  |  |   60|    323|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    221|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 221, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    221|        return #name;
  |  |  ------------------
  |  |   61|    221|                                                                                                   \
  |  |   62|    221|    /* Logic */                                                                                    \
  |  |   63|    221|                                                                                                   \
  |  |   64|    221|    /* And */                                                                                      \
  |  |   65|    367|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    367|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 367, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    367|        return #name;
  |  |  ------------------
  |  |   66|    367|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |   67|    198|                                                                                                   \
  |  |   68|    198|    /* Or */                                                                                       \
  |  |   69|    198|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   70|    212|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    212|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 212, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    212|        return #name;
  |  |  ------------------
  |  |   71|    212|                                                                                                   \
  |  |   72|    212|    /* XOR */                                                                                      \
  |  |   73|    267|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    267|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 267, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    267|        return #name;
  |  |  ------------------
  |  |   74|    267|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   75|    196|                                                                                                   \
  |  |   76|    196|    /* Set conditionals */                                                                         \
  |  |   77|    196|                                                                                                   \
  |  |   78|    196|    /* Less than */                                                                                \
  |  |   79|    196|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |   80|    199|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |   81|    199|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   82|    207|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    207|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 207, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    207|        return #name;
  |  |  ------------------
  |  |   83|  2.64k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  2.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.64k, False: 113k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.64k|        return #name;
  |  |  ------------------
  |  |   84|  2.64k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   85|     66|                                                                                                   \
  |  |   86|     66|    /* Greater than */                                                                             \
  |  |   87|    338|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    338|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 338, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    338|        return #name;
  |  |  ------------------
  |  |   88|    338|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 197, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    197|        return #name;
  |  |  ------------------
  |  |   89|  7.66k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  7.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 7.66k, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  210|  7.66k|        return #name;
  |  |  ------------------
  |  |   90|  7.66k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    346|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 346, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    346|        return #name;
  |  |  ------------------
  |  |   91|    346|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   92|    200|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 200, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    200|        return #name;
  |  |  ------------------
  |  |   93|    200|                                                                                                   \
  |  |   94|    200|    /* Less than or equal */                                                                       \
  |  |   95|    204|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |   96|    218|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 218, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    218|        return #name;
  |  |  ------------------
  |  |   97|    218|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   98|    208|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 99, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     99|        return #name;
  |  |  ------------------
  |  |   99|    195|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  100|    199|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |  101|    199|                                                                                                   \
  |  |  102|    199|    /* Greater than or equal */                                                                    \
  |  |  103|    199|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  104|    194|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  105|    199|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |  106|    294|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    294|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 294, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    294|        return #name;
  |  |  ------------------
  |  |  107|    294|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  108|  1.66k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.66k, False: 114k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.66k|        return #name;
  |  |  ------------------
  |  |  109|  1.66k|                                                                                                   \
  |  |  110|  1.66k|    /* Equal */                                                                                    \
  |  |  111|  1.66k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  112|    202|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |  113|  7.40k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  7.40k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 7.40k, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  210|  7.40k|        return #name;
  |  |  ------------------
  |  |  114|  7.40k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    452|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 452, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    452|        return #name;
  |  |  ------------------
  |  |  115|    452|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  116|    194|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|    680|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    680|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 680, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  210|    680|        return #name;
  |  |  ------------------
  |  |  120|    680|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  121|    202|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |  122|    202|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |  123|     90|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 90, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     90|        return #name;
  |  |  ------------------
  |  |  124|     90|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  125|     70|                                                                                                   \
  |  |  126|     70|    /* Conditional branching */                                                                    \
  |  |  127|    194|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  128|    194|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  129|    332|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    332|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 332, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    332|        return #name;
  |  |  ------------------
  |  |  130|  1.29k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.29k, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.29k|        return #name;
  |  |  ------------------
  |  |  131|  1.29k|                                                                                                   \
  |  |  132|  1.29k|    /* Unconditional branching */                                                                  \
  |  |  133|  1.91k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|  1.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.91k, False: 114k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.91k|        return #name;
  |  |  ------------------
  |  |  134|  1.91k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  135|    198|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |  136|    198|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|    195|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  140|    195|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  141|    194|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  142|    194|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  143|    194|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  144|  8.46k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  8.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.46k, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.46k|        return #name;
  |  |  ------------------
  |  |  145|  8.46k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  147|    194|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  148|    194|                                                                                                   \
  |  |  149|    194|    /* Storing data */                                                                             \
  |  |  150|    194|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  151|    194|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  152|    874|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    874|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 874, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  210|    874|        return #name;
  |  |  ------------------
  |  |  153|    874|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    260|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 260, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    260|        return #name;
  |  |  ------------------
  |  |  154|    260|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  155|    199|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |  156|    199|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |  157|    199|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  158|    194|                                                                                                   \
  |  |  159|    194|    /* Moving data */                                                                              \
  |  |  160|    351|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    351|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 351, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    351|        return #name;
  |  |  ------------------
  |  |  161|    351|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    245|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 245, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    245|        return #name;
  |  |  ------------------
  |  |  162|    245|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 89, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     89|        return #name;
  |  |  ------------------
  |  |  163|     89|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 89, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     89|        return #name;
  |  |  ------------------
  |  |  164|     89|                                                                                                   \
  |  |  165|     89|    /* Converting data */                                                                          \
  |  |  166|     89|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  167|    213|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    213|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 213, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    213|        return #name;
  |  |  ------------------
  |  |  168|    213|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    203|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 203, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    203|        return #name;
  |  |  ------------------
  |  |  169|    203|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  170|    196|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  171|    195|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  172|    194|                                                                                                   \
  |  |  173|    194|    /* Other */                                                                                    \
  |  |  174|    194|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 87, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     87|        return #name;
  |  |  ------------------
  |  |  175|     87|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |  176|    205|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 205, False: 116k]
  |  |  |  |  ------------------
  |  |  |  |  210|    205|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 116k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|   116k|        }
  219|   116k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  29.9k|    {
   31|  29.9k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 494, False: 29.4k]
  ------------------
   32|    494|        {
   33|    494|            return true;
   34|    494|        }
   35|       |
   36|  29.4k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 74, False: 29.3k]
  ------------------
   37|     74|        {
   38|     74|            return true;
   39|     74|        }
   40|       |
   41|  29.3k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 3.46k, False: 25.8k]
  ------------------
   42|  3.46k|        {
   43|  3.46k|            return true;
   44|  3.46k|        }
   45|       |
   46|  25.8k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 25.8k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  25.8k|        return false;
   52|  25.8k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  25.8k|    {
   56|  25.8k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 25.8k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  25.8k|        const char first_char = token.at(0u);
   62|       |
   63|  25.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 3.86k, False: 22.0k]
  ------------------
   64|  3.86k|        {
   65|  3.86k|            return phi::is_alpha(first_char);
   66|  3.86k|        }
   67|       |
   68|  22.0k|        phi::boolean just_under_scores = (first_char == '_');
   69|  22.0k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 9.35k, False: 12.6k]
  |  Branch (69:13): [True: 9.20k, False: 12.8k]
  |  Branch (69:43): [True: 9.20k, False: 146]
  ------------------
   70|  9.20k|        {
   71|  9.20k|            return false;
   72|  9.20k|        }
   73|       |
   74|  49.9k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 45.5k, False: 4.33k]
  ------------------
   75|  45.5k|        {
   76|  45.5k|            const char c{token.at(index)};
   77|       |
   78|  45.5k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 15.4k, False: 30.0k]
  ------------------
   79|  15.4k|            {
   80|  15.4k|                just_under_scores = false;
   81|  15.4k|            }
   82|  30.0k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 21.6k, False: 8.46k]
  ------------------
   83|  21.6k|            {
   84|  21.6k|                continue;
   85|  21.6k|            }
   86|  8.46k|            else
   87|  8.46k|            {
   88|  8.46k|                return false;
   89|  8.46k|            }
   90|  45.5k|        }
   91|       |
   92|  4.33k|        return !just_under_scores;
   93|  12.8k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   258k|    {
   99|   258k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 258k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   258k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 17.8k, False: 240k]
  ------------------
  105|  17.8k|        {
  106|  17.8k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 2.62k, False: 15.1k]
  ------------------
  107|  2.62k|            {
  108|  2.62k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  2.62k|            }
  110|       |
  111|  15.1k|            return {};
  112|  17.8k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|   240k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 2.09k, False: 238k]
  ------------------
  116|  2.09k|        {
  117|  2.09k|            return {};
  118|  2.09k|        }
  119|       |
  120|   238k|        phi::int32_t number{0};
  121|   238k|        phi::boolean is_negative{false};
  122|   238k|        phi::boolean starts_with_zero{false};
  123|   238k|        phi::boolean parsing_binary{false};
  124|   238k|        phi::boolean parsing_octal{false};
  125|   238k|        phi::boolean parsing_hexadecimal{false};
  126|   238k|        phi::boolean parsed_something{false};
  127|   238k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|   271k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 264k, False: 6.36k]
  ------------------
  132|   264k|        {
  133|   264k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|   264k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 238k, False: 26.0k]
  ------------------
  137|   238k|            {
  138|   238k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 5.20k, False: 233k]
  ------------------
  139|  5.20k|                {
  140|  5.20k|                    continue;
  141|  5.20k|                }
  142|       |
  143|   233k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 3.64k, False: 229k]
  ------------------
  144|  3.64k|                {
  145|  3.64k|                    is_negative = true;
  146|  3.64k|                    continue;
  147|  3.64k|                }
  148|       |
  149|   229k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 6.86k, False: 222k]
  ------------------
  150|  6.86k|                {
  151|  6.86k|                    starts_with_zero = true;
  152|  6.86k|                    continue;
  153|  6.86k|                }
  154|       |
  155|   222k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 565, False: 222k]
  ------------------
  156|    565|                {
  157|    565|                    return {};
  158|    565|                }
  159|   222k|            }
  160|       |
  161|       |            // Second character
  162|   248k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 16.1k, False: 232k]
  ------------------
  163|  16.1k|            {
  164|  16.1k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 6.86k, False: 9.26k]
  ------------------
  165|  6.86k|                {
  166|       |                    // Binary
  167|  6.86k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 1.54k, False: 5.32k]
  |  Branch (167:37): [True: 294, False: 5.02k]
  ------------------
  168|  1.83k|                    {
  169|  1.83k|                        parsing_binary = true;
  170|  1.83k|                        continue;
  171|  1.83k|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  5.02k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 1.23k, False: 3.79k]
  |  Branch (174:37): [True: 68, False: 3.72k]
  ------------------
  175|  1.30k|                    {
  176|  1.30k|                        parsing_hexadecimal = true;
  177|  1.30k|                        continue;
  178|  1.30k|                    }
  179|       |
  180|       |                    // Octal
  181|  3.72k|                    parsing_octal = true;
  182|  3.72k|                }
  183|  16.1k|            }
  184|       |
  185|       |            // Handle separators
  186|   245k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 4.11k, False: 241k]
  ------------------
  187|  4.11k|            {
  188|  4.11k|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 66, False: 4.05k]
  ------------------
  189|     66|                {
  190|     66|                    return {};
  191|     66|                }
  192|       |
  193|  4.05k|                parsed_separator = true;
  194|  4.05k|                continue;
  195|  4.11k|            }
  196|       |
  197|       |            // Check for over/underflow
  198|   241k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 3.74k, False: 237k]
  |  Branch (198:32): [True: 0, False: 3.74k]
  ------------------
  199|      0|            {
  200|       |                // Would underflow
  201|      0|                return {};
  202|      0|            }
  203|   241k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 237k, False: 3.74k]
  |  Branch (203:17): [True: 0, False: 241k]
  |  Branch (203:33): [True: 0, False: 237k]
  ------------------
  204|      0|            {
  205|       |                // Would overflow
  206|      0|                return {};
  207|      0|            }
  208|       |
  209|   241k|            parsed_separator = false;
  210|   241k|            parsed_something = true;
  211|       |
  212|   241k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 2.78k, False: 238k]
  ------------------
  213|  2.78k|            {
  214|  2.78k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 297, False: 2.48k]
  ------------------
  215|    297|                {
  216|    297|                    return {};
  217|    297|                }
  218|       |
  219|  2.48k|                number <<= 1;
  220|  2.48k|                number |= (c - '0');
  221|  2.48k|            }
  222|   238k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 4.17k, False: 234k]
  ------------------
  223|  4.17k|            {
  224|  4.17k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 3.59k, False: 576]
  ------------------
  225|  3.59k|                {
  226|  3.59k|                    return {};
  227|  3.59k|                }
  228|       |
  229|    576|                number <<= 3;
  230|    576|                number |= (c - '0');
  231|    576|            }
  232|   234k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 2.20k, False: 231k]
  ------------------
  233|  2.20k|            {
  234|  2.20k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 161, False: 2.03k]
  ------------------
  235|    161|                {
  236|    161|                    return {};
  237|    161|                }
  238|       |
  239|  2.03k|                number <<= 4;
  240|  2.03k|                number |= phi::hex_digit_value(c).unsafe();
  241|  2.03k|            }
  242|   231k|            else
  243|   231k|            {
  244|   231k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 225k, False: 6.72k]
  ------------------
  245|   225k|                {
  246|   225k|                    return {};
  247|   225k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  6.72k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 6.08k, False: 642]
  |  Branch (250:36): [True: 2.31k, False: 3.77k]
  ------------------
  251|  2.31k|                {
  252|  2.31k|                    return {};
  253|  2.31k|                }
  254|       |
  255|  4.41k|                number *= 10;
  256|  4.41k|                number += (c - '0');
  257|  4.41k|            }
  258|   241k|        }
  259|       |
  260|  6.36k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 6.15k, False: 211]
  ------------------
  261|  6.15k|        {
  262|       |            // Check for over/underflow
  263|  6.15k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 3.01k, False: 3.14k]
  |  Branch (263:32): [True: 0, False: 3.01k]
  ------------------
  264|      0|            {
  265|       |                // Would underflow
  266|      0|                return {};
  267|      0|            }
  268|  6.15k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 3.14k, False: 3.01k]
  |  Branch (268:17): [True: 0, False: 6.15k]
  |  Branch (268:33): [True: 0, False: 3.14k]
  ------------------
  269|      0|            {
  270|       |                // Would overflow
  271|      0|                return {};
  272|      0|            }
  273|       |
  274|  6.15k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 3.01k, False: 3.14k]
  ------------------
  275|  3.01k|            {
  276|  3.01k|                return static_cast<phi::int16_t>(-number);
  277|  3.01k|            }
  278|       |
  279|  3.14k|            return static_cast<phi::int16_t>(number);
  280|  6.15k|        }
  281|       |
  282|    211|        return {};
  283|  6.36k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  4.84k|    {
   97|  4.84k|        switch (value)
   98|  4.84k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|    961|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|    961|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 961, False: 3.88k]
  |  |  |  |  ------------------
  |  |  |  |  101|    961|        return #name;
  |  |  ------------------
  |  |   14|    961|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|    507|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 507, False: 4.34k]
  |  |  |  |  ------------------
  |  |  |  |  101|    507|        return #name;
  |  |  ------------------
  |  |   15|    507|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   16|    911|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|    911|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 911, False: 3.93k]
  |  |  |  |  ------------------
  |  |  |  |  101|    911|        return #name;
  |  |  ------------------
  |  |   17|    911|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   18|      3|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   19|      3|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   20|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   21|    113|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|    113|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 113, False: 4.73k]
  |  |  |  |  ------------------
  |  |  |  |  101|    113|        return #name;
  |  |  ------------------
  |  |   22|    113|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 13, False: 4.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|     13|        return #name;
  |  |  ------------------
  |  |   23|     13|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   24|      2|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   25|     16|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|     16|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 16, False: 4.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|     16|        return #name;
  |  |  ------------------
  |  |   26|     16|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   27|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   28|      9|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 9, False: 4.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|      9|        return #name;
  |  |  ------------------
  |  |   29|     99|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|     99|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 99, False: 4.74k]
  |  |  |  |  ------------------
  |  |  |  |  101|     99|        return #name;
  |  |  ------------------
  |  |   30|    170|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|    170|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 170, False: 4.67k]
  |  |  |  |  ------------------
  |  |  |  |  101|    170|        return #name;
  |  |  ------------------
  |  |   31|    170|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 12, False: 4.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|     12|        return #name;
  |  |  ------------------
  |  |   32|    303|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|    303|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 303, False: 4.54k]
  |  |  |  |  ------------------
  |  |  |  |  101|    303|        return #name;
  |  |  ------------------
  |  |   33|    303|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    156|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 156, False: 4.69k]
  |  |  |  |  ------------------
  |  |  |  |  101|    156|        return #name;
  |  |  ------------------
  |  |   34|    156|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 20, False: 4.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|     20|        return #name;
  |  |  ------------------
  |  |   35|     21|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|     21|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 21, False: 4.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|     21|        return #name;
  |  |  ------------------
  |  |   36|     35|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     35|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 35, False: 4.81k]
  |  |  |  |  ------------------
  |  |  |  |  101|     35|        return #name;
  |  |  ------------------
  |  |   37|    154|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|    154|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 154, False: 4.69k]
  |  |  |  |  ------------------
  |  |  |  |  101|    154|        return #name;
  |  |  ------------------
  |  |   38|    332|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|    332|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 332, False: 4.51k]
  |  |  |  |  ------------------
  |  |  |  |  101|    332|        return #name;
  |  |  ------------------
  |  |   39|    332|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 4.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   40|    167|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    167|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 167, False: 4.68k]
  |  |  |  |  ------------------
  |  |  |  |  101|    167|        return #name;
  |  |  ------------------
  |  |   41|    167|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     23|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 23, False: 4.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|     23|        return #name;
  |  |  ------------------
  |  |   42|     24|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 24, False: 4.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|     24|        return #name;
  |  |  ------------------
  |  |   43|    194|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|    194|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 194, False: 4.65k]
  |  |  |  |  ------------------
  |  |  |  |  101|    194|        return #name;
  |  |  ------------------
  |  |   44|    568|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    568|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 568, False: 4.27k]
  |  |  |  |  ------------------
  |  |  |  |  101|    568|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 4.84k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  4.84k|        }
  110|  4.84k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  1.47k|    {
  134|  1.47k|        switch (value)
  135|  1.47k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    108|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|    108|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 108, False: 1.36k]
  |  |  |  |  ------------------
  |  |  |  |  138|    108|        return #name;
  |  |  ------------------
  |  |   48|    119|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    119|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 119, False: 1.35k]
  |  |  |  |  ------------------
  |  |  |  |  138|    119|        return #name;
  |  |  ------------------
  |  |   49|    149|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|    149|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 149, False: 1.32k]
  |  |  |  |  ------------------
  |  |  |  |  138|    149|        return #name;
  |  |  ------------------
  |  |   50|    149|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|     53|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 53, False: 1.41k]
  |  |  |  |  ------------------
  |  |  |  |  138|     53|        return #name;
  |  |  ------------------
  |  |   51|     53|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   52|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   53|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   54|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   55|     28|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|     28|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 28, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|     28|        return #name;
  |  |  ------------------
  |  |   56|     28|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 7, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      7|        return #name;
  |  |  ------------------
  |  |   57|    342|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|    342|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 342, False: 1.12k]
  |  |  |  |  ------------------
  |  |  |  |  138|    342|        return #name;
  |  |  ------------------
  |  |   58|    342|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   59|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 8, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      8|        return #name;
  |  |  ------------------
  |  |   60|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   61|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 18, False: 1.45k]
  |  |  |  |  ------------------
  |  |  |  |  138|     18|        return #name;
  |  |  ------------------
  |  |   62|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   63|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   64|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   65|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   66|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   67|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   68|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   70|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|    176|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 176, False: 1.29k]
  |  |  |  |  ------------------
  |  |  |  |  138|    176|        return #name;
  |  |  ------------------
  |  |   71|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   73|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   74|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   75|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   76|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 9, False: 1.46k]
  |  |  |  |  ------------------
  |  |  |  |  138|      9|        return #name;
  |  |  ------------------
  |  |   77|    215|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|    215|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 215, False: 1.25k]
  |  |  |  |  ------------------
  |  |  |  |  138|    215|        return #name;
  |  |  ------------------
  |  |   78|    215|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|    203|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 203, False: 1.26k]
  |  |  |  |  ------------------
  |  |  |  |  138|    203|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 1.47k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  1.47k|        }
  147|  1.47k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  2.50k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  2.50k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 31.1k, False: 0]
  ------------------
   64|  31.1k|            {
   65|  31.1k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 2.50k, False: 28.6k]
  ------------------
   66|  2.50k|                {
   67|  2.50k|                    return &token;
   68|  2.50k|                }
   69|  31.1k|            }
   70|       |
   71|      0|            return nullptr;
   72|  2.50k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|   274k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   274k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   274k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   372k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   372k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   372k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  12.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  12.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  12.3k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  49.7k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  2.85k|    {
   22|  2.85k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  2.85k|        switch (argument_number.unsafe())
   25|  2.85k|        {
   26|  1.91k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 1.91k, False: 945]
  ------------------
   27|  1.91k|                m_Arg1 = argument;
   28|  1.91k|                break;
   29|    617|            case 1u:
  ------------------
  |  Branch (29:13): [True: 617, False: 2.23k]
  ------------------
   30|    617|                m_Arg2 = argument;
   31|    617|                break;
   32|    328|            case 2u:
  ------------------
  |  Branch (32:13): [True: 328, False: 2.52k]
  ------------------
   33|    328|                m_Arg3 = argument;
   34|    328|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 2.85k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  2.85k|#endif
   39|  2.85k|        }
   40|  2.85k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|   152k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  1.51k|    {
  167|  1.51k|        InstructionArgument arg;
  168|  1.51k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  1.51k|        arg.register_int.register_id = id;
  170|  1.51k|        return arg;
  171|  1.51k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|     70|    {
  175|     70|        InstructionArgument arg;
  176|     70|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|     70|        arg.register_float.register_id = id;
  178|     70|        return arg;
  179|     70|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    194|    {
  183|    194|        InstructionArgument arg;
  184|    194|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    194|        arg.immediate_value.signed_value = value;
  186|    194|        return arg;
  187|    194|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|  1.07k|    {
  201|  1.07k|        InstructionArgument arg;
  202|  1.07k|        arg.m_Type           = ArgumentType::Label;
  203|  1.07k|        arg.label.label_name = label_name;
  204|  1.07k|        return arg;
  205|  1.07k|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  49.7k|    {
  450|  49.7k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  49.7k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|   264k|    {
   22|   264k|        switch (token.length().unsafe())
   23|   264k|        {
   24|       |            // 1 character OpCodes
   25|  20.5k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 20.5k, False: 243k]
  ------------------
   26|  20.5k|                const char c1 = token[0u];
   27|       |
   28|  20.5k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 13.9k, False: 6.57k]
  ------------------
   29|  13.9k|                {
   30|  13.9k|                    return OpCode::J;
   31|  13.9k|                }
   32|  6.57k|                break;
   33|  20.5k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  43.9k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 43.9k, False: 220k]
  ------------------
   37|  43.9k|                const char c1 = token[0u];
   38|  43.9k|                const char c2 = token[1u];
   39|       |
   40|  43.9k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 26.2k, False: 17.6k]
  ------------------
   41|  43.9k|                {
   42|    101|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 101, False: 43.8k]
  ------------------
   43|  2.21k|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 2.11k, False: 41.8k]
  ------------------
   44|  2.21k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 132, False: 2.08k]
  ------------------
   45|    132|                        {
   46|    132|                            return OpCode::JR;
   47|    132|                        }
   48|  2.08k|                        break;
   49|       |
   50|  9.34k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 9.34k, False: 34.5k]
  ------------------
   51|  10.3k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 981, False: 42.9k]
  ------------------
   52|  10.3k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 205, False: 10.1k]
  ------------------
   53|  10.3k|                        {
   54|    194|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 194, False: 10.1k]
  ------------------
   55|    646|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 452, False: 9.87k]
  ------------------
   56|    646|                                return OpCode::LB;
   57|    194|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 194, False: 10.1k]
  ------------------
   58|    260|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 66, False: 10.2k]
  ------------------
   59|    260|                                return OpCode::LD;
   60|     66|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 66, False: 10.2k]
  ------------------
   61|    132|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 66, False: 10.2k]
  ------------------
   62|    132|                                return OpCode::LF;
   63|    194|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 194, False: 10.1k]
  ------------------
   64|    260|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 66, False: 10.2k]
  ------------------
   65|    260|                                return OpCode::LH;
   66|  8.46k|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 8.46k, False: 1.86k]
  ------------------
   67|  8.82k|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 361, False: 9.96k]
  ------------------
   68|  8.82k|                                return OpCode::LW;
   69|  10.3k|                        }
   70|    205|                        break;
   71|    791|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 791, False: 43.1k]
  ------------------
   72|    960|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 169, False: 43.7k]
  ------------------
   73|    960|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 415, False: 545]
  ------------------
   74|    415|                        {
   75|    415|                            return OpCode::OR;
   76|    415|                        }
   77|    545|                        break;
   78|  2.83k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 2.83k, False: 41.1k]
  ------------------
   79|  4.13k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 1.30k, False: 42.6k]
  ------------------
   80|  4.13k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 1.80k, False: 2.32k]
  ------------------
   81|  4.13k|                        {
   82|    194|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 194, False: 3.93k]
  ------------------
   83|    268|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 74, False: 4.05k]
  ------------------
   84|    268|                                return OpCode::SB;
   85|    196|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 196, False: 3.93k]
  ------------------
   86|    533|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 337, False: 3.79k]
  ------------------
   87|    533|                                return OpCode::SD;
   88|    199|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 199, False: 3.93k]
  ------------------
   89|    401|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 202, False: 3.93k]
  ------------------
   90|    401|                                return OpCode::SF;
   91|    800|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 800, False: 3.33k]
  ------------------
   92|    866|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 66, False: 4.06k]
  ------------------
   93|    866|                                return OpCode::SH;
   94|    194|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 194, False: 3.93k]
  ------------------
   95|    261|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 67, False: 4.06k]
  ------------------
   96|    261|                                return OpCode::SW;
   97|  4.13k|                        }
   98|  1.80k|                        break;
   99|  43.9k|                }
  100|  30.9k|                break;
  101|  43.9k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|   100k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 100k, False: 163k]
  ------------------
  105|   100k|                const char c1 = token[0u];
  106|   100k|                const char c2 = token[1u];
  107|   100k|                const char c3 = token[2u];
  108|       |
  109|   100k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 10.1k, False: 90.2k]
  ------------------
  110|   100k|                {
  111|  49.3k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 49.3k, False: 50.9k]
  ------------------
  112|  49.8k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 447, False: 99.8k]
  ------------------
  113|  49.8k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 48.9k, False: 852]
  |  Branch (113:29): [True: 44.3k, False: 5.41k]
  |  Branch (113:45): [True: 44.3k, False: 4.56k]
  ------------------
  114|  44.3k|                        {
  115|  44.3k|                            return OpCode::ADD;
  116|  44.3k|                        }
  117|  5.41k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 765, False: 4.64k]
  |  Branch (117:34): [True: 571, False: 4.84k]
  |  Branch (117:50): [True: 571, False: 194]
  ------------------
  118|    571|                        {
  119|    571|                            return OpCode::AND;
  120|    571|                        }
  121|  4.84k|                        break;
  122|       |
  123|  4.84k|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 483, False: 99.8k]
  ------------------
  124|    571|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 88, False: 100k]
  ------------------
  125|    571|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 475, False: 96]
  |  Branch (125:29): [True: 409, False: 162]
  |  Branch (125:45): [True: 409, False: 66]
  ------------------
  126|    409|                        {
  127|    409|                            return OpCode::DIV;
  128|    409|                        }
  129|    162|                        break;
  130|       |
  131|    444|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 444, False: 99.8k]
  ------------------
  132|    580|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 136, False: 100k]
  ------------------
  133|    580|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 497, False: 83]
  ------------------
  134|    497|                        {
  135|    497|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 132, False: 365]
  ------------------
  136|    132|                            {
  137|    132|                                return OpCode::EQD;
  138|    132|                            }
  139|    365|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 260, False: 105]
  ------------------
  140|    260|                            {
  141|    260|                                return OpCode::EQF;
  142|    260|                            }
  143|    497|                        }
  144|    188|                        break;
  145|       |
  146|  2.84k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 2.84k, False: 97.4k]
  ------------------
  147|  12.3k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 9.52k, False: 90.8k]
  ------------------
  148|  12.3k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 7.24k, False: 5.12k]
  ------------------
  149|  7.24k|                        {
  150|  7.24k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 1.73k, False: 5.50k]
  ------------------
  151|  1.73k|                            {
  152|  1.73k|                                return OpCode::GED;
  153|  1.73k|                            }
  154|  5.50k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 260, False: 5.24k]
  ------------------
  155|    260|                            {
  156|    260|                                return OpCode::GEF;
  157|    260|                            }
  158|  7.24k|                        }
  159|  5.12k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 854, False: 4.26k]
  ------------------
  160|    854|                        {
  161|    854|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 394, False: 460]
  ------------------
  162|    394|                            {
  163|    394|                                return OpCode::GTD;
  164|    394|                            }
  165|    460|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 260, False: 200]
  ------------------
  166|    260|                            {
  167|    260|                                return OpCode::GTF;
  168|    260|                            }
  169|    460|                        }
  170|  9.71k|                        break;
  171|       |
  172|  9.71k|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 202, False: 100k]
  ------------------
  173|  1.04k|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 844, False: 99.4k]
  ------------------
  174|  1.04k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 907, False: 139]
  |  Branch (174:29): [True: 684, False: 362]
  |  Branch (174:45): [True: 684, False: 223]
  ------------------
  175|    684|                        {
  176|    684|                            return OpCode::JAL;
  177|    684|                        }
  178|    362|                        break;
  179|       |
  180|  4.08k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 4.08k, False: 96.2k]
  ------------------
  181|  5.34k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 1.26k, False: 99.0k]
  ------------------
  182|  5.34k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 68, False: 5.27k]
  ------------------
  183|  5.34k|                        {
  184|    194|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 194, False: 5.15k]
  ------------------
  185|    482|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 288, False: 5.05k]
  ------------------
  186|    482|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 270, False: 212]
  ------------------
  187|    270|                                {
  188|    270|                                    return OpCode::LBU;
  189|    270|                                }
  190|    212|                                break;
  191|       |
  192|    404|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 404, False: 4.94k]
  ------------------
  193|    720|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 316, False: 5.02k]
  ------------------
  194|    720|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 393, False: 327]
  ------------------
  195|    393|                                {
  196|    393|                                    return OpCode::LED;
  197|    393|                                }
  198|    327|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 261, False: 66]
  ------------------
  199|    261|                                {
  200|    261|                                    return OpCode::LEF;
  201|    261|                                }
  202|     66|                                break;
  203|       |
  204|    452|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 452, False: 4.89k]
  ------------------
  205|    650|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 198, False: 5.14k]
  ------------------
  206|    650|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 261, False: 389]
  ------------------
  207|    261|                                {
  208|    261|                                    return OpCode::LHI;
  209|    261|                                }
  210|    389|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 323, False: 66]
  ------------------
  211|    323|                                {
  212|    323|                                    return OpCode::LHU;
  213|    323|                                }
  214|     66|                                break;
  215|       |
  216|  2.72k|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 2.72k, False: 2.62k]
  ------------------
  217|  3.08k|                            case 't':
  ------------------
  |  Branch (217:29): [True: 366, False: 4.97k]
  ------------------
  218|  3.08k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 310, False: 2.77k]
  ------------------
  219|    310|                                {
  220|    310|                                    return OpCode::LTD;
  221|    310|                                }
  222|  2.77k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 2.71k, False: 67]
  ------------------
  223|  2.71k|                                {
  224|  2.71k|                                    return OpCode::LTF;
  225|  2.71k|                                }
  226|     67|                                break;
  227|       |
  228|     74|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 74, False: 5.27k]
  ------------------
  229|    335|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 261, False: 5.08k]
  ------------------
  230|    335|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 132, False: 203]
  ------------------
  231|    132|                                {
  232|    132|                                    return OpCode::LWU;
  233|    132|                                }
  234|    203|                                break;
  235|  5.34k|                        }
  236|    682|                        break;
  237|       |
  238|    682|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 602, False: 99.7k]
  ------------------
  239|  1.16k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 558, False: 99.7k]
  ------------------
  240|  1.16k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 486, False: 674]
  ------------------
  241|    486|                        {
  242|    486|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 136, False: 350]
  ------------------
  243|    136|                            {
  244|    136|                                return OpCode::NED;
  245|    136|                            }
  246|    350|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 156, False: 194]
  ------------------
  247|    156|                            {
  248|    156|                                return OpCode::NEF;
  249|    156|                            }
  250|    486|                        }
  251|    674|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 479, False: 195]
  |  Branch (251:34): [True: 285, False: 389]
  |  Branch (251:50): [True: 285, False: 194]
  ------------------
  252|    285|                        {
  253|    285|                            return OpCode::NOP;
  254|    285|                        }
  255|       |
  256|    583|                        break;
  257|       |
  258|    583|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 337, False: 99.9k]
  ------------------
  259|    533|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 196, False: 100k]
  ------------------
  260|    533|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 448, False: 85]
  |  Branch (260:29): [True: 382, False: 151]
  |  Branch (260:45): [True: 382, False: 66]
  ------------------
  261|    382|                        {
  262|    382|                            return OpCode::ORI;
  263|    382|                        }
  264|    151|                        break;
  265|       |
  266|  15.4k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 15.4k, False: 84.8k]
  ------------------
  267|  18.3k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 2.93k, False: 97.3k]
  ------------------
  268|  18.3k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 563, False: 17.8k]
  ------------------
  269|  18.3k|                        {
  270|    194|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 194, False: 18.2k]
  ------------------
  271|    332|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 138, False: 18.2k]
  ------------------
  272|    332|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 260, False: 72]
  ------------------
  273|    260|                                {
  274|    260|                                    return OpCode::SBU;
  275|    260|                                }
  276|     72|                                break;
  277|       |
  278|     82|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 82, False: 18.3k]
  ------------------
  279|    494|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 412, False: 17.9k]
  ------------------
  280|    494|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 296, False: 198]
  ------------------
  281|    296|                                {
  282|    296|                                    return OpCode::SEQ;
  283|    296|                                }
  284|    198|                                break;
  285|       |
  286|    533|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 533, False: 17.8k]
  ------------------
  287|    872|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 339, False: 18.0k]
  ------------------
  288|    872|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 260, False: 612]
  ------------------
  289|    260|                                {
  290|    260|                                    return OpCode::SGE;
  291|    260|                                }
  292|    612|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 412, False: 200]
  ------------------
  293|    412|                                {
  294|    412|                                    return OpCode::SGT;
  295|    412|                                }
  296|    200|                                break;
  297|       |
  298|    261|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 261, False: 18.1k]
  ------------------
  299|    392|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 131, False: 18.2k]
  ------------------
  300|    392|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 326, False: 66]
  ------------------
  301|    326|                                {
  302|    326|                                    return OpCode::SHU;
  303|    326|                                }
  304|     66|                                break;
  305|       |
  306|    709|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 709, False: 17.6k]
  ------------------
  307|  2.41k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 1.70k, False: 16.6k]
  ------------------
  308|  2.41k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 1.47k, False: 940]
  ------------------
  309|  2.41k|                                {
  310|    195|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 195, False: 2.21k]
  ------------------
  311|    261|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 66, False: 2.34k]
  ------------------
  312|    261|                                        return OpCode::SLA;
  313|       |
  314|    204|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 204, False: 2.21k]
  ------------------
  315|    280|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 76, False: 2.33k]
  ------------------
  316|    280|                                        return OpCode::SLE;
  317|       |
  318|    196|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 196, False: 2.21k]
  ------------------
  319|    266|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 70, False: 2.34k]
  ------------------
  320|    266|                                        return OpCode::SLL;
  321|       |
  322|     66|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 66, False: 2.34k]
  ------------------
  323|    133|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 67, False: 2.34k]
  ------------------
  324|    133|                                        return OpCode::SLT;
  325|  2.41k|                                }
  326|  1.47k|                                break;
  327|       |
  328|  1.47k|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 680, False: 17.7k]
  ------------------
  329|  3.12k|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 2.44k, False: 15.9k]
  ------------------
  330|  3.12k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 748, False: 2.37k]
  ------------------
  331|    748|                                {
  332|    748|                                    return OpCode::SNE;
  333|    748|                                }
  334|  2.37k|                                break;
  335|       |
  336|  2.37k|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 622, False: 17.7k]
  ------------------
  337|  5.10k|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 4.47k, False: 13.9k]
  ------------------
  338|  5.10k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 966, False: 4.13k]
  ------------------
  339|    966|                                {
  340|    966|                                    return OpCode::SRA;
  341|    966|                                }
  342|  4.13k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 2.39k, False: 1.73k]
  ------------------
  343|  2.39k|                                {
  344|  2.39k|                                    return OpCode::SRL;
  345|  2.39k|                                }
  346|  1.73k|                                break;
  347|       |
  348|  1.73k|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 205, False: 18.1k]
  ------------------
  349|  4.63k|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 4.43k, False: 13.9k]
  ------------------
  350|  4.63k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 4.42k, False: 212]
  ------------------
  351|  4.42k|                                {
  352|  4.42k|                                    return OpCode::SUB;
  353|  4.42k|                                }
  354|    212|                                break;
  355|       |
  356|    385|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 385, False: 18.0k]
  ------------------
  357|    469|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 84, False: 18.3k]
  ------------------
  358|    469|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 402, False: 67]
  ------------------
  359|    402|                                {
  360|    402|                                    return OpCode::SWU;
  361|    402|                                }
  362|     67|                                break;
  363|  18.3k|                        }
  364|       |
  365|  7.16k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 203, False: 100k]
  ------------------
  366|  7.36k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 203, False: 100k]
  ------------------
  367|  7.36k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 485, False: 6.88k]
  |  Branch (367:29): [True: 291, False: 7.07k]
  |  Branch (367:45): [True: 291, False: 194]
  ------------------
  368|    291|                        {
  369|    291|                            return OpCode::XOR;
  370|    291|                        }
  371|  7.07k|                        break;
  372|   100k|                }
  373|  33.8k|                break;
  374|   100k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  74.2k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 74.2k, False: 189k]
  ------------------
  378|  74.2k|                const char c1 = token[0u];
  379|  74.2k|                const char c2 = token[1u];
  380|  74.2k|                const char c3 = token[2u];
  381|  74.2k|                const char c4 = token[3u];
  382|       |
  383|  74.2k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 7.62k, False: 66.6k]
  ------------------
  384|  74.2k|                {
  385|  13.3k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 13.3k, False: 60.9k]
  ------------------
  386|  13.6k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 276, False: 73.9k]
  ------------------
  387|  13.6k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 83, False: 13.5k]
  ------------------
  388|  13.6k|                        {
  389|  10.0k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 10.0k, False: 3.62k]
  ------------------
  390|  10.1k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 164, False: 13.4k]
  ------------------
  391|  10.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 9.96k, False: 201]
  ------------------
  392|  9.96k|                                {
  393|  9.96k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 66, False: 9.90k]
  ------------------
  394|  9.96k|                                    {
  395|    215|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 215, False: 9.75k]
  ------------------
  396|    281|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 66, False: 9.90k]
  ------------------
  397|    281|                                            return OpCode::ADDD;
  398|       |
  399|    365|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 365, False: 9.60k]
  ------------------
  400|    431|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 66, False: 9.90k]
  ------------------
  401|    431|                                            return OpCode::ADDF;
  402|       |
  403|  8.85k|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 8.85k, False: 1.11k]
  ------------------
  404|  8.91k|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 66, False: 9.90k]
  ------------------
  405|  8.91k|                                            return OpCode::ADDI;
  406|       |
  407|    204|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 204, False: 9.76k]
  ------------------
  408|    270|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 66, False: 9.90k]
  ------------------
  409|    270|                                            return OpCode::ADDU;
  410|  9.96k|                                    }
  411|  9.96k|                                }
  412|    267|                                break;
  413|       |
  414|    267|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 222, False: 13.4k]
  ------------------
  415|  3.37k|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 3.15k, False: 10.4k]
  ------------------
  416|  3.37k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 3.28k, False: 90]
  |  Branch (416:37): [True: 3.21k, False: 162]
  |  Branch (416:53): [True: 3.21k, False: 72]
  ------------------
  417|  3.21k|                                {
  418|  3.21k|                                    return OpCode::ANDI;
  419|  3.21k|                                }
  420|       |
  421|    162|                                break;
  422|  13.6k|                        }
  423|    512|                        break;
  424|       |
  425|  4.11k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 4.11k, False: 70.1k]
  ------------------
  426|  5.33k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 1.21k, False: 73.0k]
  ------------------
  427|  5.33k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 2.15k, False: 3.17k]
  ------------------
  428|  5.33k|                        {
  429|    238|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 238, False: 5.09k]
  ------------------
  430|    779|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 541, False: 4.79k]
  ------------------
  431|    779|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 531, False: 248]
  |  Branch (431:37): [True: 465, False: 314]
  |  Branch (431:53): [True: 465, False: 66]
  ------------------
  432|    465|                                {
  433|    465|                                    return OpCode::BEQZ;
  434|    465|                                }
  435|    314|                                break;
  436|       |
  437|  1.39k|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 1.39k, False: 3.94k]
  ------------------
  438|  2.00k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 618, False: 4.71k]
  ------------------
  439|  2.00k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.94k, False: 66]
  ------------------
  440|  1.94k|                                {
  441|  1.94k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 1.12k, False: 815]
  ------------------
  442|  1.12k|                                    {
  443|  1.12k|                                        return OpCode::BFPF;
  444|  1.12k|                                    }
  445|    815|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 749, False: 66]
  ------------------
  446|    749|                                    {
  447|    749|                                        return OpCode::BFPT;
  448|    749|                                    }
  449|  1.94k|                                }
  450|    132|                                break;
  451|       |
  452|    231|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 231, False: 5.10k]
  ------------------
  453|    392|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 161, False: 5.17k]
  ------------------
  454|    392|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 326, False: 66]
  |  Branch (454:37): [True: 260, False: 132]
  |  Branch (454:53): [True: 260, False: 66]
  ------------------
  455|    260|                                {
  456|    260|                                    return OpCode::BNEZ;
  457|    260|                                }
  458|  5.33k|                        }
  459|  2.73k|                        break;
  460|       |
  461|  2.73k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 1.96k, False: 72.2k]
  ------------------
  462|  2.12k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 167, False: 74.0k]
  ------------------
  463|  2.12k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 2.03k, False: 88]
  |  Branch (463:29): [True: 1.97k, False: 154]
  |  Branch (463:45): [True: 1.97k, False: 66]
  ------------------
  464|  1.97k|                        {
  465|  1.97k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 224, False: 1.74k]
  ------------------
  466|  1.97k|                            {
  467|    799|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 799, False: 1.17k]
  ------------------
  468|    865|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 66, False: 1.90k]
  ------------------
  469|    865|                                    return OpCode::DIVD;
  470|       |
  471|    229|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 229, False: 1.74k]
  ------------------
  472|    295|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 66, False: 1.90k]
  ------------------
  473|    295|                                    return OpCode::DIVF;
  474|       |
  475|    259|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 259, False: 1.71k]
  ------------------
  476|    325|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 66, False: 1.90k]
  ------------------
  477|    325|                                    return OpCode::DIVI;
  478|       |
  479|    198|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 198, False: 1.77k]
  ------------------
  480|    264|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 66, False: 1.90k]
  ------------------
  481|    264|                                    return OpCode::DIVU;
  482|  1.97k|                            }
  483|  1.97k|                        }
  484|    378|                        break;
  485|       |
  486|    378|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 85, False: 74.1k]
  ------------------
  487|    496|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 411, False: 73.8k]
  ------------------
  488|    496|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 400, False: 96]
  |  Branch (488:29): [True: 140, False: 356]
  |  Branch (488:45): [True: 334, False: 66]
  |  Branch (488:61): [True: 140, False: 194]
  ------------------
  489|    140|                        {
  490|    140|                            return OpCode::HALT;
  491|    140|                        }
  492|    356|                        break;
  493|       |
  494|  1.09k|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 1.09k, False: 73.1k]
  ------------------
  495|  4.67k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 3.58k, False: 70.6k]
  ------------------
  496|  4.67k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 3.65k, False: 1.02k]
  |  Branch (496:29): [True: 132, False: 4.54k]
  |  Branch (496:45): [True: 3.27k, False: 384]
  |  Branch (496:61): [True: 132, False: 3.13k]
  ------------------
  497|    132|                        {
  498|    132|                            return OpCode::JALR;
  499|    132|                        }
  500|  4.54k|                        break;
  501|       |
  502|  4.54k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 4.17k, False: 70.0k]
  ------------------
  503|  4.50k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 328, False: 73.9k]
  ------------------
  504|  4.50k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 3.98k, False: 521]
  |  Branch (504:29): [True: 3.89k, False: 611]
  |  Branch (504:45): [True: 3.89k, False: 90]
  ------------------
  505|  3.89k|                        {
  506|  3.89k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 418, False: 3.47k]
  ------------------
  507|    418|                            {
  508|    418|                                return OpCode::MOVD;
  509|    418|                            }
  510|  3.47k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 3.38k, False: 90]
  ------------------
  511|  3.38k|                            {
  512|  3.38k|                                return OpCode::MOVF;
  513|  3.38k|                            }
  514|  3.89k|                        }
  515|    611|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 505, False: 106]
  |  Branch (515:34): [True: 133, False: 478]
  |  Branch (515:50): [True: 439, False: 66]
  |  Branch (515:66): [True: 133, False: 306]
  ------------------
  516|    133|                        {
  517|    133|                            return OpCode::MULT;
  518|    133|                        }
  519|    568|                        break;
  520|       |
  521|  31.5k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 31.5k, False: 42.7k]
  ------------------
  522|  32.7k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 1.19k, False: 73.0k]
  ------------------
  523|  32.7k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 1.37k, False: 31.3k]
  ------------------
  524|  32.7k|                        {
  525|  7.21k|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 7.21k, False: 25.5k]
  ------------------
  526|  7.74k|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 530, False: 32.2k]
  ------------------
  527|  7.74k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 7.53k, False: 210]
  ------------------
  528|  7.53k|                                {
  529|  7.53k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 395, False: 7.13k]
  ------------------
  530|    395|                                    {
  531|    395|                                        return OpCode::SEQI;
  532|    395|                                    }
  533|  7.13k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 7.05k, False: 81]
  ------------------
  534|  7.05k|                                    {
  535|  7.05k|                                        return OpCode::SEQU;
  536|  7.05k|                                    }
  537|  7.53k|                                }
  538|    291|                                break;
  539|       |
  540|  8.12k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 8.12k, False: 24.6k]
  ------------------
  541|  12.5k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 4.42k, False: 28.3k]
  ------------------
  542|  12.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 4.30k, False: 8.25k]
  ------------------
  543|  4.30k|                                {
  544|  4.30k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 132, False: 4.16k]
  ------------------
  545|    132|                                    {
  546|    132|                                        return OpCode::SGEI;
  547|    132|                                    }
  548|  4.16k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 3.51k, False: 650]
  ------------------
  549|  3.51k|                                    {
  550|  3.51k|                                        return OpCode::SGEU;
  551|  3.51k|                                    }
  552|  4.30k|                                }
  553|  8.25k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 8.18k, False: 68]
  ------------------
  554|  8.18k|                                {
  555|  8.18k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 263, False: 7.92k]
  ------------------
  556|    263|                                    {
  557|    263|                                        return OpCode::SGTI;
  558|    263|                                    }
  559|  7.92k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 7.72k, False: 194]
  ------------------
  560|  7.72k|                                    {
  561|  7.72k|                                        return OpCode::SGTU;
  562|  7.72k|                                    }
  563|  8.18k|                                }
  564|    912|                                break;
  565|       |
  566|  1.17k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 1.17k, False: 31.5k]
  ------------------
  567|  1.97k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 798, False: 31.9k]
  ------------------
  568|  1.97k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 66, False: 1.91k]
  ------------------
  569|  1.97k|                                {
  570|    234|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 234, False: 1.74k]
  ------------------
  571|    350|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 116, False: 1.86k]
  ------------------
  572|    350|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 284, False: 66]
  ------------------
  573|    284|                                        {
  574|    284|                                            return OpCode::SLAI;
  575|    284|                                        }
  576|     66|                                        break;
  577|       |
  578|    598|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 598, False: 1.37k]
  ------------------
  579|    752|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 154, False: 1.82k]
  ------------------
  580|    752|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 412, False: 340]
  ------------------
  581|    412|                                        {
  582|    412|                                            return OpCode::SLEI;
  583|    412|                                        }
  584|    340|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 274, False: 66]
  ------------------
  585|    274|                                        {
  586|    274|                                            return OpCode::SLEU;
  587|    274|                                        }
  588|     66|                                        break;
  589|       |
  590|    211|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 211, False: 1.76k]
  ------------------
  591|    345|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 134, False: 1.84k]
  ------------------
  592|    345|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 276, False: 69]
  ------------------
  593|    276|                                        {
  594|    276|                                            return OpCode::SLLI;
  595|    276|                                        }
  596|     69|                                        break;
  597|       |
  598|    323|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 323, False: 1.65k]
  ------------------
  599|    464|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 141, False: 1.83k]
  ------------------
  600|    464|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 265, False: 199]
  ------------------
  601|    265|                                        {
  602|    265|                                            return OpCode::SLTI;
  603|    265|                                        }
  604|    199|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 133, False: 66]
  ------------------
  605|    133|                                        {
  606|    133|                                            return OpCode::SLTU;
  607|    133|                                        }
  608|     66|                                        break;
  609|  1.97k|                                }
  610|       |
  611|    731|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 398, False: 32.3k]
  ------------------
  612|  1.25k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 525, False: 32.2k]
  ------------------
  613|  1.25k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 980, False: 276]
  ------------------
  614|    980|                                {
  615|    980|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 262, False: 718]
  ------------------
  616|    262|                                    {
  617|    262|                                        return OpCode::SNEI;
  618|    262|                                    }
  619|    718|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 652, False: 66]
  ------------------
  620|    652|                                    {
  621|    652|                                        return OpCode::SNEU;
  622|    652|                                    }
  623|    980|                                }
  624|    342|                                break;
  625|       |
  626|    805|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 805, False: 31.9k]
  ------------------
  627|  4.28k|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 3.47k, False: 29.2k]
  ------------------
  628|  4.28k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 3.52k, False: 759]
  |  Branch (628:37): [True: 285, False: 3.99k]
  |  Branch (628:53): [True: 285, False: 3.23k]
  ------------------
  629|    285|                                {
  630|    285|                                    return OpCode::SRAI;
  631|    285|                                }
  632|  3.99k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 647, False: 3.35k]
  |  Branch (632:42): [True: 554, False: 3.44k]
  |  Branch (632:58): [True: 554, False: 93]
  ------------------
  633|    554|                                {
  634|    554|                                    return OpCode::SRLI;
  635|    554|                                }
  636|  3.44k|                                break;
  637|       |
  638|  3.44k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 949, False: 31.7k]
  ------------------
  639|  3.88k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 2.93k, False: 29.7k]
  ------------------
  640|  3.88k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 2.57k, False: 1.30k]
  ------------------
  641|  2.57k|                                {
  642|  2.57k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 1.36k, False: 1.21k]
  ------------------
  643|  2.57k|                                    {
  644|    273|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 273, False: 2.30k]
  ------------------
  645|    339|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 66, False: 2.51k]
  ------------------
  646|    339|                                            return OpCode::SUBD;
  647|       |
  648|    195|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 195, False: 2.38k]
  ------------------
  649|    261|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 66, False: 2.51k]
  ------------------
  650|    261|                                            return OpCode::SUBF;
  651|       |
  652|    229|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 229, False: 2.34k]
  ------------------
  653|    295|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 66, False: 2.51k]
  ------------------
  654|    295|                                            return OpCode::SUBI;
  655|       |
  656|    252|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 252, False: 2.32k]
  ------------------
  657|    318|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 66, False: 2.51k]
  ------------------
  658|    318|                                            return OpCode::SUBU;
  659|  2.57k|                                    }
  660|  2.57k|                                }
  661|  2.66k|                                break;
  662|  32.7k|                        }
  663|  9.03k|                        break;
  664|       |
  665|  9.03k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 563, False: 73.6k]
  ------------------
  666|    806|                    case 't':
  ------------------
  |  Branch (666:21): [True: 243, False: 74.0k]
  ------------------
  667|    806|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 726, False: 80]
  |  Branch (667:29): [True: 449, False: 357]
  |  Branch (667:45): [True: 652, False: 74]
  |  Branch (667:61): [True: 449, False: 203]
  ------------------
  668|    449|                        {
  669|    449|                            return OpCode::TRAP;
  670|    449|                        }
  671|    357|                        break;
  672|    357|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 271, False: 73.9k]
  ------------------
  673|  2.32k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 2.05k, False: 72.1k]
  ------------------
  674|  2.32k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 2.26k, False: 67]
  |  Branch (674:29): [True: 2.05k, False: 273]
  |  Branch (674:45): [True: 2.12k, False: 140]
  |  Branch (674:61): [True: 2.05k, False: 66]
  ------------------
  675|  2.05k|                        {
  676|  2.05k|                            return OpCode::XORI;
  677|  2.05k|                        }
  678|    273|                        break;
  679|  74.2k|                }
  680|  26.3k|                break;
  681|  74.2k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  26.3k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 5.19k, False: 258k]
  ------------------
  685|  5.19k|                const char c1 = token[0u];
  686|  5.19k|                const char c2 = token[1u];
  687|  5.19k|                const char c3 = token[2u];
  688|  5.19k|                const char c4 = token[3u];
  689|  5.19k|                const char c5 = token[4u];
  690|       |
  691|  5.19k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 1.25k, False: 3.93k]
  ------------------
  692|  5.19k|                {
  693|  1.42k|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 1.42k, False: 3.76k]
  ------------------
  694|  1.42k|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 0, False: 5.19k]
  ------------------
  695|  1.42k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 1.42k, False: 0]
  |  Branch (695:29): [True: 1.42k, False: 0]
  |  Branch (695:45): [True: 1.42k, False: 0]
  |  Branch (695:61): [True: 1.42k, False: 0]
  |  Branch (695:77): [True: 1.42k, False: 0]
  ------------------
  696|  1.42k|                        {
  697|  1.42k|                            return OpCode::ADDUI;
  698|  1.42k|                        }
  699|      0|                        break;
  700|       |
  701|    201|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 201, False: 4.99k]
  ------------------
  702|    201|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 0, False: 5.19k]
  ------------------
  703|    201|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 201, False: 0]
  |  Branch (703:29): [True: 201, False: 0]
  |  Branch (703:45): [True: 201, False: 0]
  |  Branch (703:61): [True: 201, False: 0]
  |  Branch (703:77): [True: 201, False: 0]
  ------------------
  704|    201|                        {
  705|    201|                            return OpCode::DIVUI;
  706|    201|                        }
  707|      0|                        break;
  708|       |
  709|    651|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 651, False: 4.54k]
  ------------------
  710|    651|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 0, False: 5.19k]
  ------------------
  711|    651|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 651, False: 0]
  |  Branch (711:29): [True: 651, False: 0]
  |  Branch (711:45): [True: 651, False: 0]
  |  Branch (711:61): [True: 651, False: 0]
  ------------------
  712|    651|                        {
  713|    651|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 0, False: 651]
  ------------------
  714|    651|                            {
  715|    194|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 194, False: 457]
  ------------------
  716|    194|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 0, False: 651]
  ------------------
  717|    194|                                    return OpCode::MULTD;
  718|       |
  719|    196|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 196, False: 455]
  ------------------
  720|    196|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 0, False: 651]
  ------------------
  721|    196|                                    return OpCode::MULTF;
  722|       |
  723|     67|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 67, False: 584]
  ------------------
  724|     67|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 0, False: 651]
  ------------------
  725|     67|                                    return OpCode::MULTI;
  726|       |
  727|    194|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 194, False: 457]
  ------------------
  728|    194|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 0, False: 651]
  ------------------
  729|    194|                                    return OpCode::MULTU;
  730|    651|                            }
  731|    651|                        }
  732|      0|                        break;
  733|       |
  734|  1.65k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 1.65k, False: 3.53k]
  ------------------
  735|  1.65k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 0, False: 5.19k]
  ------------------
  736|  1.65k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 0, False: 1.65k]
  ------------------
  737|  1.65k|                        {
  738|    423|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 423, False: 1.23k]
  ------------------
  739|    423|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 0, False: 1.65k]
  ------------------
  740|    423|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 423, False: 0]
  |  Branch (740:37): [True: 423, False: 0]
  |  Branch (740:53): [True: 423, False: 0]
  |  Branch (740:69): [True: 423, False: 0]
  ------------------
  741|    423|                                {
  742|    423|                                    return OpCode::SEQUI;
  743|    423|                                }
  744|      0|                                break;
  745|       |
  746|    640|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 640, False: 1.01k]
  ------------------
  747|    640|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 0, False: 1.65k]
  ------------------
  748|    640|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 294, False: 346]
  |  Branch (748:37): [True: 294, False: 346]
  |  Branch (748:53): [True: 294, False: 0]
  |  Branch (748:69): [True: 294, False: 0]
  ------------------
  749|    294|                                {
  750|    294|                                    return OpCode::SGEUI;
  751|    294|                                }
  752|    346|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 346, False: 0]
  |  Branch (752:42): [True: 346, False: 0]
  |  Branch (752:58): [True: 346, False: 0]
  |  Branch (752:74): [True: 346, False: 0]
  ------------------
  753|    346|                                {
  754|    346|                                    return OpCode::SGTUI;
  755|    346|                                }
  756|      0|                                break;
  757|       |
  758|    305|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 305, False: 1.35k]
  ------------------
  759|    305|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 0, False: 1.65k]
  ------------------
  760|    305|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 99, False: 206]
  |  Branch (760:37): [True: 99, False: 206]
  |  Branch (760:53): [True: 99, False: 0]
  |  Branch (760:69): [True: 99, False: 0]
  ------------------
  761|     99|                                {
  762|     99|                                    return OpCode::SLEUI;
  763|     99|                                }
  764|    206|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 206, False: 0]
  |  Branch (764:42): [True: 206, False: 0]
  |  Branch (764:58): [True: 206, False: 0]
  |  Branch (764:74): [True: 206, False: 0]
  ------------------
  765|    206|                                {
  766|    206|                                    return OpCode::SLTUI;
  767|    206|                                }
  768|      0|                                break;
  769|       |
  770|     69|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 69, False: 1.58k]
  ------------------
  771|     69|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 0, False: 1.65k]
  ------------------
  772|     69|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 69, False: 0]
  |  Branch (772:37): [True: 69, False: 0]
  |  Branch (772:53): [True: 69, False: 0]
  |  Branch (772:69): [True: 69, False: 0]
  ------------------
  773|     69|                                {
  774|     69|                                    return OpCode::SNEUI;
  775|     69|                                }
  776|      0|                                break;
  777|       |
  778|    218|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 218, False: 1.43k]
  ------------------
  779|    218|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 0, False: 1.65k]
  ------------------
  780|    218|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 218, False: 0]
  |  Branch (780:37): [True: 218, False: 0]
  |  Branch (780:53): [True: 218, False: 0]
  |  Branch (780:69): [True: 218, False: 0]
  ------------------
  781|    218|                                {
  782|    218|                                    return OpCode::SUBUI;
  783|    218|                                }
  784|      0|                                break;
  785|  1.65k|                        }
  786|       |
  787|      0|                        break;
  788|  5.19k|                }
  789|       |
  790|  1.25k|                break;
  791|  5.19k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  9.30k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 9.30k, False: 254k]
  ------------------
  795|  9.30k|                const char c1 = token[0u];
  796|  9.30k|                const char c2 = token[1u];
  797|  9.30k|                const char c3 = token[2u];
  798|  9.30k|                const char c4 = token[3u];
  799|  9.30k|                const char c5 = token[4u];
  800|  9.30k|                const char c6 = token[5u];
  801|       |
  802|  9.30k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 1.06k, False: 8.24k]
  |  Branch (802:21): [True: 1.06k, False: 8.24k]
  |  Branch (802:37): [True: 1.06k, False: 0]
  |  Branch (802:53): [True: 1.06k, False: 0]
  ------------------
  803|  1.06k|                {
  804|  1.06k|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 0, False: 1.06k]
  ------------------
  805|  1.06k|                    {
  806|    390|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 390, False: 670]
  ------------------
  807|    390|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 0, False: 1.06k]
  ------------------
  808|    390|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 390, False: 0]
  ------------------
  809|    390|                            {
  810|    390|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 194, False: 196]
  ------------------
  811|    194|                                {
  812|    194|                                    return OpCode::CVTD2F;
  813|    194|                                }
  814|    196|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 196, False: 0]
  ------------------
  815|    196|                                {
  816|    196|                                    return OpCode::CVTD2I;
  817|    196|                                }
  818|    390|                            }
  819|      0|                            break;
  820|       |
  821|    281|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 281, False: 779]
  ------------------
  822|    281|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 0, False: 1.06k]
  ------------------
  823|    281|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 281, False: 0]
  ------------------
  824|    281|                            {
  825|    281|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 70, False: 211]
  ------------------
  826|     70|                                {
  827|     70|                                    return OpCode::CVTF2D;
  828|     70|                                }
  829|    211|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 211, False: 0]
  ------------------
  830|    211|                                {
  831|    211|                                    return OpCode::CVTF2I;
  832|    211|                                }
  833|    281|                            }
  834|      0|                            break;
  835|       |
  836|    389|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 389, False: 671]
  ------------------
  837|    389|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 0, False: 1.06k]
  ------------------
  838|    389|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 389, False: 0]
  ------------------
  839|    389|                            {
  840|    389|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 194, False: 195]
  ------------------
  841|    194|                                {
  842|    194|                                    return OpCode::CVTI2D;
  843|    194|                                }
  844|    195|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 195, False: 0]
  ------------------
  845|    195|                                {
  846|    195|                                    return OpCode::CVTI2F;
  847|    195|                                }
  848|    389|                            }
  849|  1.06k|                    }
  850|  1.06k|                }
  851|  8.24k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 8.03k, False: 210]
  |  Branch (851:26): [True: 8.03k, False: 210]
  |  Branch (851:42): [True: 8.03k, False: 0]
  |  Branch (851:58): [True: 8.03k, False: 0]
  |  Branch (851:74): [True: 8.03k, False: 0]
  ------------------
  852|  8.24k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 8.03k, False: 0]
  |  Branch (852:42): [True: 8.03k, False: 0]
  ------------------
  853|  8.03k|                {
  854|  8.03k|                    return OpCode::MULTUI;
  855|  8.03k|                }
  856|    210|                break;
  857|  9.30k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|    387|            case 7: {
  ------------------
  |  Branch (860:13): [True: 387, False: 263k]
  ------------------
  861|    387|                const char c1 = token[0u];
  862|    387|                const char c2 = token[1u];
  863|    387|                const char c3 = token[2u];
  864|    387|                const char c4 = token[3u];
  865|    387|                const char c5 = token[4u];
  866|    387|                const char c6 = token[5u];
  867|    387|                const char c7 = token[6u];
  868|       |
  869|    387|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 175, False: 212]
  |  Branch (869:21): [True: 175, False: 212]
  |  Branch (869:37): [True: 175, False: 0]
  |  Branch (869:53): [True: 175, False: 0]
  ------------------
  870|    175|                {
  871|    175|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 86, False: 89]
  |  Branch (871:25): [True: 86, False: 89]
  |  Branch (871:41): [True: 86, False: 0]
  |  Branch (871:54): [True: 86, False: 0]
  |  Branch (871:70): [True: 86, False: 0]
  ------------------
  872|     86|                    {
  873|     86|                        return OpCode::MOVI2FP;
  874|     86|                    }
  875|     89|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 89, False: 0]
  |  Branch (875:25): [True: 89, False: 0]
  |  Branch (875:41): [True: 89, False: 0]
  |  Branch (875:57): [True: 89, False: 0]
  |  Branch (875:70): [True: 89, False: 0]
  ------------------
  876|     89|                    {
  877|     89|                        return OpCode::MOVFP2I;
  878|     89|                    }
  879|     89|                }
  880|    212|                break;
  881|    387|            }
  882|       |
  883|  10.0k|            default: {
  ------------------
  |  Branch (883:13): [True: 10.0k, False: 253k]
  ------------------
  884|  10.0k|                break;
  885|    387|            }
  886|   264k|        }
  887|       |
  888|       |        // None found
  889|   109k|        return OpCode::NONE;
  890|   264k|    }
_ZN3dlx3iceEcc:
   15|   438k|    {
   16|   438k|        constexpr const char diff = 'a' - 'A';
   17|   438k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 240k, False: 198k]
  |  Branch (17:28): [True: 72.9k, False: 125k]
  ------------------
   18|   438k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|   242k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|    883|    {
  187|    883|        ParseError err;
  188|       |
  189|    883|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|    883|        err.m_LineNumber                           = line_number;
  191|    883|        err.m_Column                               = column;
  192|    883|        err.unexpected_argument_type.expected_type = expected_type;
  193|    883|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|    883|        return err;
  196|    883|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|    883|    {
  202|    883|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|    883|                                                         token.GetColumn().unsafe(), expected_type,
  204|    883|                                                         actual_type);
  205|    883|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    322|    {
  210|    322|        ParseError err;
  211|       |
  212|    322|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    322|        err.m_LineNumber        = line_number;
  214|    322|        err.m_Column            = column;
  215|    322|        err.invalid_number.text = text;
  216|       |
  217|    322|        return err;
  218|    322|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    322|    {
  222|    322|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    322|                                                token.GetColumn().unsafe(), token.GetText());
  224|    322|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  39.9k|    {
  248|  39.9k|        ParseError err;
  249|       |
  250|  39.9k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  39.9k|        err.m_LineNumber                   = line_number;
  252|  39.9k|        err.m_Column                       = column;
  253|  39.9k|        err.unexpected_token.expected_type = expected_type;
  254|  39.9k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  39.9k|        return err;
  257|  39.9k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  39.9k|    {
  262|  39.9k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  39.9k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  39.9k|                                                  token.GetType());
  265|  39.9k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  4.26k|    {
  271|  4.26k|        ParseError err;
  272|       |
  273|  4.26k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  4.26k|        err.m_LineNumber                   = line_number;
  275|  4.26k|        err.m_Column                       = column;
  276|  4.26k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  4.26k|        return err;
  279|  4.26k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    227|    {
  283|    227|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    227|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    227|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  70.8k|    {
  291|  70.8k|        ParseError err;
  292|       |
  293|  70.8k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  70.8k|        err.m_LineNumber                        = line_number;
  295|  70.8k|        err.m_Column                            = column;
  296|  70.8k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  70.8k|        return err;
  299|  70.8k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  70.8k|    {
  303|  70.8k|        return ConstructInvalidLabelIdentifierParseError(
  304|  70.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  70.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  2.50k|    {
  313|  2.50k|        ParseError err;
  314|       |
  315|  2.50k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  2.50k|        err.m_LineNumber                     = line_number;
  317|  2.50k|        err.m_Column                         = column;
  318|  2.50k|        err.label_already_defined.label_name = label_name;
  319|  2.50k|        err.label_already_defined.at_line    = at_line;
  320|  2.50k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  2.50k|        return err;
  323|  2.50k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  2.50k|    {
  328|  2.50k|        return ConstructLabelAlreadyDefinedParseError(
  329|  2.50k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  2.50k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  2.50k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  94.4k|    {
  336|  94.4k|        ParseError err;
  337|       |
  338|  94.4k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  94.4k|        err.m_LineNumber = line_number;
  340|  94.4k|        err.m_Column     = column;
  341|       |
  342|  94.4k|        return err;
  343|  94.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  94.4k|    {
  347|  94.4k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  94.4k|                                                        token.GetColumn().unsafe());
  349|  94.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  26.0k|    {
  355|  26.0k|        ParseError err;
  356|       |
  357|  26.0k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  26.0k|        err.m_LineNumber               = line_number;
  359|  26.0k|        err.m_Column                   = column;
  360|  26.0k|        err.too_few_arguments.required = required;
  361|  26.0k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  26.0k|        return err;
  364|  26.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  26.0k|    {
  369|  26.0k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  26.0k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  26.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  2.88k|    {
  376|  2.88k|        ParseError err;
  377|       |
  378|  2.88k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  2.88k|        err.m_LineNumber           = line_number;
  380|  2.88k|        err.m_Column               = column;
  381|  2.88k|        err.empty_label.label_name = label_name;
  382|       |
  383|  2.88k|        return err;
  384|  2.88k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  2.88k|    {
  388|  2.88k|        return ConstructEmptyLabelParseError(
  389|  2.88k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  2.88k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 2.45k, False: 438]
  ------------------
  391|  2.45k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  2.88k|                        token.GetText());
  393|  2.88k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    340|    {
  398|    340|        ParseError err;
  399|       |
  400|    340|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    340|        err.m_LineNumber = line_number;
  402|    340|        err.m_Column     = column;
  403|       |
  404|    340|        return err;
  405|    340|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    340|    {
  409|    340|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    340|                                               token.GetColumn().unsafe());
  411|    340|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|   242k|    {
   17|   242k|        m_ParseErrors.emplace_back(phi::move(error));
   18|   242k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.01k|    {
  181|  4.01k|        ParsedProgram program;
  182|       |
  183|  4.01k|        program.m_Tokens = tokens;
  184|       |
  185|  4.01k|        phi::boolean line_has_instruction{false};
  186|  4.01k|        phi::usize   label_count{0u};
  187|       |
  188|   607k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 603k, False: 4.01k]
  ------------------
  189|   603k|        {
  190|   603k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   603k|            switch (current_token.GetType())
  195|   603k|            {
  196|       |                // Ignore comments
  197|   112k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 112k, False: 491k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   112k|                    break;
  200|       |
  201|   247k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 247k, False: 356k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   247k|                    line_has_instruction = false;
  204|   247k|                    break;
  205|       |
  206|  71.3k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 71.3k, False: 531k]
  ------------------
  207|  71.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 1.75k, False: 69.5k]
  ------------------
  208|  1.75k|                    {
  209|  1.75k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  1.75k|                                current_token, Token::Type::NewLine));
  211|  1.75k|                        break;
  212|  1.75k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  69.5k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 51.5k, False: 17.9k]
  ------------------
  217|  51.5k|                    {
  218|  51.5k|                        program.AddParseError(
  219|  51.5k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  51.5k|                        break;
  221|  51.5k|                    }
  222|       |
  223|  17.9k|                    phi::string_view label_name = current_token.GetText();
  224|  17.9k|                    label_name.remove_suffix(1u);
  225|       |
  226|  17.9k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 4.03k, False: 13.9k]
  ------------------
  227|  4.03k|                    {
  228|  4.03k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  4.03k|                                current_token.GetLineNumber().unsafe(),
  230|  4.03k|                                current_token.GetColumn().unsafe(), label_name));
  231|  4.03k|                        break;
  232|  4.03k|                    }
  233|       |
  234|  13.9k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 8.37k, False: 5.58k]
  ------------------
  235|  8.37k|                    {
  236|  8.37k|                        program.AddParseError(
  237|  8.37k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  8.37k|                        break;
  239|  8.37k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  5.58k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 2.50k, False: 3.07k]
  ------------------
  243|  2.50k|                    {
  244|       |                        // Find first defintions of label
  245|  2.50k|                        const Token* first_label_definition =
  246|  2.50k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.50k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  2.50k|                                    {
  249|  2.50k|                                        phi::string_view token_label_name = t.GetText();
  250|  2.50k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.50k|                                        if (token_label_name == label_name)
  253|  2.50k|                                        {
  254|  2.50k|                                            return true;
  255|  2.50k|                                        }
  256|  2.50k|                                    }
  257|       |
  258|  2.50k|                                    return false;
  259|  2.50k|                                });
  260|       |
  261|  2.50k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  2.50k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  2.50k|                                current_token, *first_label_definition));
  265|  2.50k|                        break;
  266|  2.50k|                    }
  267|       |
  268|  3.07k|                    program.m_JumpData[label_name] =
  269|  3.07k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  3.07k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  3.07k|                    break;
  276|  5.58k|                }
  277|       |
  278|   144k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 144k, False: 458k]
  ------------------
  279|   144k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 94.4k, False: 49.7k]
  ------------------
  280|  94.4k|                    {
  281|  94.4k|                        program.AddParseError(
  282|  94.4k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  94.4k|                        break;
  284|  94.4k|                    }
  285|       |
  286|  49.7k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  49.7k|                    PHI_ASSERT(current_token.HasHint());
  290|  49.7k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  49.7k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  49.7k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  49.7k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  49.7k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  49.7k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  49.7k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  49.7k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  49.7k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  56.6k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 55.0k, False: 1.61k]
  ------------------
  312|  55.0k|                    {
  313|       |                        // Get next token
  314|  55.0k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 190, False: 54.8k]
  ------------------
  315|    190|                        {
  316|    190|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    190|                                    current_token, number_of_argument_required.unsafe(),
  318|    190|                                    argument_num.unsafe()));
  319|    190|                            break;
  320|    190|                        }
  321|       |
  322|  54.8k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  54.8k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 4.00k, False: 50.8k]
  ------------------
  326|  4.00k|                        {
  327|  4.00k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 340, False: 3.66k]
  ------------------
  328|    340|                            {
  329|    340|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    340|                            }
  331|       |
  332|  4.00k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  4.00k|                            continue;
  335|  4.00k|                        }
  336|       |
  337|  50.8k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 25.9k, False: 24.9k]
  ------------------
  338|  25.9k|                        {
  339|  25.9k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  25.9k|                                    token, number_of_argument_required.unsafe(),
  341|  25.9k|                                    argument_num.unsafe()));
  342|  25.9k|                            break;
  343|  25.9k|                        }
  344|       |
  345|  24.9k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  24.9k|                                parse_instruction_argument(
  347|  24.9k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  24.9k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 22.0k, False: 2.85k]
  ------------------
  349|  22.0k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  22.0k|                            break;
  352|  22.0k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  2.85k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  2.85k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  2.85k|                        argument_num++;
  359|  2.85k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  2.85k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  49.7k|                    program.m_Instructions.emplace_back(instruction);
  367|  49.7k|                    line_has_instruction = true;
  368|  49.7k|                    break;
  369|   144k|                }
  370|       |
  371|  28.4k|                default:
  ------------------
  |  Branch (371:17): [True: 28.4k, False: 574k]
  ------------------
  372|  28.4k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  28.4k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 11.1k, False: 17.2k]
  ------------------
  374|  11.1k|                    {
  375|  11.1k|                        expected_token_type = Token::Type::NewLine;
  376|  11.1k|                    }
  377|       |
  378|  28.4k|                    program.AddParseError(
  379|  28.4k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  28.4k|                    break;
  381|   603k|            }
  382|   603k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.01k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 324, False: 3.68k]
  ------------------
  386|    324|        {
  387|  6.05k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 5.73k, False: 324]
  ------------------
  388|  5.73k|            {
  389|  5.73k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  5.73k|                const Token& token = *it;
  392|  5.73k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 2.88k, False: 2.84k]
  ------------------
  393|  2.88k|                {
  394|  2.88k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  2.88k|                    --label_count;
  396|  2.88k|                }
  397|  5.73k|            }
  398|    324|        }
  399|       |
  400|  4.01k|        return program;
  401|  4.01k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.01k|    {
  405|  4.01k|        TokenStream tokens = Tokenize(source);
  406|  4.01k|        return Parse(tokens);
  407|  4.01k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  24.9k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  24.9k|        switch (token.GetType())
   37|  24.9k|        {
   38|    395|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 395, False: 24.5k]
  ------------------
   39|    395|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 197, False: 198]
  ------------------
   40|    395|                                          ArgumentType::AddressDisplacement))
   41|    197|                {
   42|    197|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    197|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    197|                    return {};
   46|    197|                }
   47|       |
   48|       |                // Get address displacement
   49|    198|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    198|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    198|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 196]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    196|                auto         it           = tokens.current_position();
   61|    196|                const Token& first_token  = tokens.consume();
   62|    196|                const Token& second_token = tokens.consume();
   63|    196|                const Token& third_token  = tokens.consume();
   64|       |
   65|    196|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 196, False: 0]
  ------------------
   66|    196|                {
   67|    196|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    196|                            first_token, Token::Type::OpenBracket));
   69|    196|                    return {};
   70|    196|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  1.59k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.59k, False: 23.3k]
  ------------------
   97|  1.59k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 72, False: 1.51k]
  ------------------
   98|     72|                {
   99|     72|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|     72|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|     72|                    return {};
  102|     72|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  1.51k|                return ConstructInstructionArgumentRegisterInt(
  108|  1.51k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.59k|            }
  110|    138|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 138, False: 24.7k]
  ------------------
  111|    138|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 68, False: 70]
  ------------------
  112|     68|                {
  113|     68|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|     68|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|     68|                    return {};
  116|     68|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|     70|                return ConstructInstructionArgumentRegisterFloat(
  122|     70|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    138|            }
  124|    227|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 227, False: 24.6k]
  ------------------
  125|    227|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    227|                return {};
  128|    138|            }
  129|  12.2k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 12.2k, False: 12.6k]
  ------------------
  130|       |                // Parse as Label
  131|  12.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 351, False: 11.9k]
  ------------------
  132|    351|                {
  133|    351|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    351|                            token, expected_argument_type, ArgumentType::Label));
  135|    351|                    return {};
  136|    351|                }
  137|       |
  138|  11.9k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 11.9k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  11.9k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 10.8k, False: 1.07k]
  ------------------
  145|  10.8k|                {
  146|  10.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  10.8k|                    return {};
  148|  10.8k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  1.07k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  11.9k|            }
  154|    711|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 711, False: 24.1k]
  ------------------
  155|    711|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 195, False: 516]
  ------------------
  156|    195|                {
  157|    195|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    195|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    195|                    return {};
  160|    195|                }
  161|       |
  162|    516|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 194, False: 322]
  ------------------
  163|    194|                {
  164|    194|                    return ConstructInstructionArgumentImmediateValue(
  165|    194|                            static_cast<phi::int16_t>(token.GetHint()));
  166|    194|                }
  167|       |
  168|    322|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    322|                return {};
  170|    516|            }
  171|       |
  172|  9.58k|            default:
  ------------------
  |  Branch (172:13): [True: 9.58k, False: 15.3k]
  ------------------
  173|  9.58k|                program.AddParseError(
  174|  9.58k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  9.58k|                return {};
  176|  24.9k|        }
  177|  24.9k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  31.1k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  31.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 10.2k, False: 20.8k]
  ------------------
  248|  10.2k|                                    {
  249|  10.2k|                                        phi::string_view token_label_name = t.GetText();
  250|  10.2k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  10.2k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 2.50k, False: 7.79k]
  ------------------
  253|  2.50k|                                        {
  254|  2.50k|                                            return true;
  255|  2.50k|                                        }
  256|  10.2k|                                    }
  257|       |
  258|  28.6k|                                    return false;
  259|  31.1k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|    172|    {
  350|    172|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 0, False: 172]
  ------------------
  351|      0|        {
  352|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|      0|            return false;
  354|      0|        }
  355|       |
  356|    172|        m_CurrentProgram = &program;
  357|       |
  358|    172|        m_ProgramCounter               = 0u;
  359|    172|        m_Halted                       = false;
  360|    172|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    172|        m_LastRaisedException          = Exception::None;
  362|    172|        m_CurrentStepCount             = 0u;
  363|       |
  364|    172|        return true;
  365|    172|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|   270k|    {
   11|   270k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 47.4k, False: 223k]
  ------------------
   12|  47.4k|        {
   13|  47.4k|            const char first_char = token[0u];
   14|  47.4k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 3.02k, False: 44.4k]
  |  Branch (14:38): [True: 1.14k, False: 43.3k]
  ------------------
   15|  4.17k|            {
   16|  4.17k|                const char second_char = token[1u];
   17|  4.17k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 4.08k, False: 89]
  |  Branch (17:43): [True: 3.01k, False: 1.07k]
  ------------------
   18|  3.01k|                {
   19|  3.01k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  3.01k|                }
   21|  4.17k|            }
   22|  47.4k|        }
   23|   223k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 103k, False: 119k]
  ------------------
   24|   103k|        {
   25|   103k|            const char first_char = token[0u];
   26|   103k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 2.05k, False: 101k]
  |  Branch (26:38): [True: 3.49k, False: 97.7k]
  ------------------
   27|  5.55k|            {
   28|  5.55k|                const char second_char = token[1u];
   29|  5.55k|                const char third_char  = token[2u];
   30|       |
   31|  5.55k|                switch (second_char)
   32|  5.55k|                {
   33|  3.57k|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 3.57k, False: 1.97k]
  ------------------
   34|  3.57k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 815, False: 2.75k]
  |  Branch (34:50): [True: 620, False: 195]
  ------------------
   35|    620|                        {
   36|    620|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    620|                        }
   38|  2.95k|                        break;
   39|  3.57k|                    }
   40|  2.95k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 1.31k, False: 4.23k]
  ------------------
   41|  1.31k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 1.25k, False: 67]
  |  Branch (41:50): [True: 929, False: 323]
  ------------------
   42|    929|                        {
   43|    929|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    929|                        }
   45|    390|                        break;
   46|  1.31k|                    }
   47|    524|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 524, False: 5.02k]
  ------------------
   48|    524|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 194, False: 330]
  |  Branch (48:50): [True: 263, False: 67]
  ------------------
   49|    457|                        {
   50|    457|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    457|                        }
   52|     67|                        break;
   53|    524|                    }
   54|    136|                    default: {
  ------------------
  |  Branch (54:21): [True: 136, False: 5.41k]
  ------------------
   55|    136|                        break;
   56|    524|                    }
   57|  5.55k|                }
   58|  5.55k|            }
   59|   103k|        }
   60|       |
   61|   265k|        return IntRegisterID::None;
   62|   270k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|   265k|    {
   66|   265k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 44.4k, False: 221k]
  ------------------
   67|  44.4k|        {
   68|  44.4k|            const char first_char = token[0u];
   69|  44.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 500, False: 43.9k]
  |  Branch (69:38): [True: 389, False: 43.5k]
  ------------------
   70|    889|            {
   71|    889|                const char second_char = token[1u];
   72|    889|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 806, False: 83]
  |  Branch (72:43): [True: 549, False: 257]
  ------------------
   73|    549|                {
   74|    549|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|    549|                }
   76|    889|            }
   77|  44.4k|        }
   78|   221k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 101k, False: 119k]
  ------------------
   79|   101k|        {
   80|   101k|            const char first_char = token[0u];
   81|   101k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.01k, False: 100k]
  |  Branch (81:38): [True: 681, False: 99.6k]
  ------------------
   82|  1.69k|            {
   83|  1.69k|                const char second_char = token[1u];
   84|  1.69k|                const char third_char  = token[2u];
   85|       |
   86|  1.69k|                switch (second_char)
   87|  1.69k|                {
   88|    523|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 523, False: 1.17k]
  ------------------
   89|    523|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 457, False: 66]
  |  Branch (89:50): [True: 379, False: 78]
  ------------------
   90|    379|                        {
   91|    379|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    379|                        }
   93|    144|                        break;
   94|    523|                    }
   95|    589|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 589, False: 1.10k]
  ------------------
   96|    589|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 395, False: 194]
  |  Branch (96:50): [True: 197, False: 198]
  ------------------
   97|    197|                        {
   98|    197|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    197|                        }
  100|    392|                        break;
  101|    589|                    }
  102|    517|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 517, False: 1.18k]
  ------------------
  103|    517|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 215, False: 302]
  |  Branch (103:50): [True: 203, False: 99]
  ------------------
  104|    418|                        {
  105|    418|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    418|                        }
  107|     99|                        break;
  108|    517|                    }
  109|     99|                    default: {
  ------------------
  |  Branch (109:21): [True: 69, False: 1.62k]
  ------------------
  110|     69|                        break;
  111|    517|                    }
  112|  1.69k|                }
  113|  1.69k|            }
  114|   101k|        }
  115|       |
  116|   264k|        return FloatRegisterID::None;
  117|   265k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|   274k|    {
  121|   274k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 82.5k, False: 192k]
  ------------------
  122|  82.5k|        {
  123|  82.5k|            const char c1 = token[0u];
  124|  82.5k|            const char c2 = token[1u];
  125|  82.5k|            const char c3 = token[2u];
  126|  82.5k|            const char c4 = token[3u];
  127|       |
  128|  82.5k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 8.30k, False: 74.2k]
  |  Branch (128:34): [True: 294, False: 73.9k]
  |  Branch (128:49): [True: 8.28k, False: 322]
  |  Branch (128:62): [True: 256, False: 66]
  ------------------
  129|  82.5k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 8.27k, False: 260]
  |  Branch (129:34): [True: 66, False: 194]
  |  Branch (129:49): [True: 8.27k, False: 66]
  |  Branch (129:62): [True: 0, False: 66]
  ------------------
  130|  82.5k|        }
  131|       |
  132|   192k|        return false;
  133|   274k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   492k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|   165k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|  1.46M|    {
   40|  1.46M|        return m_Type;
   41|  1.46M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|  1.06M|    {
   50|  1.06M|        return m_LineNumber;
   51|  1.06M|    }
_ZNK3dlx5Token9GetColumnEv:
   54|  2.13M|    {
   55|  2.13M|        return m_Column;
   56|  2.13M|    }
_ZNK3dlx5Token9GetLengthEv:
   59|  1.50M|    {
   60|  1.50M|        return m_Text.length();
   61|  1.50M|    }
_ZNK3dlx5Token7GetTextEv:
   64|   204k|    {
   65|   204k|        return m_Text;
   66|   204k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  50.4k|    {
   79|  50.4k|        return m_HasHint;
   80|  50.4k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  51.7k|    {
   84|  51.7k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  51.7k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  51.7k|                   m_Type == Type::ImmediateInteger);
   87|  51.7k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  51.7k|        return m_Hint;
   90|  51.7k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.01k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.01k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.01k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    198|    {
   50|    198|        return x + m_Iterator <= m_Tokens.size();
   51|    198|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   662k|    {
   55|   662k|        return m_Iterator < m_Tokens.size();
   56|   662k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   658k|    {
   60|   658k|        return m_Iterator >= m_Tokens.size();
   61|   658k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   658k|    {
   75|   658k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   658k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   658k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    196|    {
  155|    196|        return m_Iterator;
  156|    196|    }
_ZNK3dlx11TokenStream5beginEv:
  168|  4.01k|    {
  169|       |#if defined(PHI_DEBUG)
  170|       |        //PHI_ASSERT(m_Finalized);
  171|       |#endif
  172|       |
  173|  4.01k|        return m_Tokens.begin();
  174|  4.01k|    }
_ZNK3dlx11TokenStream3endEv:
  186|  4.01k|    {
  187|       |#if defined(PHI_DEBUG)
  188|       |        //PHI_ASSERT(m_Finalized);
  189|       |#endif
  190|       |
  191|  4.01k|        return m_Tokens.end();
  192|  4.01k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    324|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    324|        return m_Tokens.rbegin();
  210|    324|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  5.73k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  5.73k|        return m_Tokens.rend();
  219|  5.73k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.01k|    {
   66|  4.01k|        TokenStream tokens;
   67|       |
   68|  4.01k|        phi::string_view current_token;
   69|       |
   70|  4.01k|        phi::u64 current_line_number{1u};
   71|  4.01k|        phi::u64 current_column{1u};
   72|  4.01k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.01k|        phi::boolean parsing_comment{false};
   75|       |
   76|  1.53M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 1.53M, False: 4.01k]
  ------------------
   77|  1.53M|        {
   78|  1.53M|            const char c{source.at(i)};
   79|       |
   80|  1.53M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 273k, False: 1.25M]
  ------------------
   81|   273k|            {
   82|   273k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 67.9k, False: 205k]
  ------------------
   83|  67.9k|                {
   84|       |                    // Skip empty lines
   85|  67.9k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  67.9k|                                        current_line_number, current_column);
   87|       |
   88|  67.9k|                    parsing_comment = false;
   89|  67.9k|                    current_line_number += 1u;
   90|  67.9k|                    current_column = 1u;
   91|  67.9k|                    continue;
   92|  67.9k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   205k|                tokens.emplace_back(ParseToken(
   96|   205k|                        source.substring_view(
   97|   205k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   205k|                                current_token.length()),
   99|   205k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   205k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   205k|                                    current_line_number, current_column);
  103|       |
  104|   205k|                current_token   = phi::string_view{};
  105|   205k|                parsing_comment = false;
  106|   205k|                current_line_number += 1u;
  107|   205k|                current_column = 0u;
  108|   205k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  1.25M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 818, False: 1.25M]
  |  Branch (110:34): [True: 113k, False: 1.14M]
  ------------------
  111|   114k|            {
  112|   114k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 112k, False: 1.45k]
  ------------------
  113|   112k|                {
  114|   112k|                    token_begin = i;
  115|   112k|                }
  116|  1.45k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.01k, False: 444]
  ------------------
  117|  1.01k|                {
  118|  1.01k|                    tokens.emplace_back(ParseToken(
  119|  1.01k|                            source.substring_view(
  120|  1.01k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.01k|                                    current_token.length()),
  122|  1.01k|                            current_line_number, current_column - current_token.length()));
  123|  1.01k|                    token_begin   = i;
  124|  1.01k|                    current_token = phi::string_view{};
  125|  1.01k|                }
  126|       |
  127|   114k|                parsing_comment = true;
  128|   114k|                current_token   = source.substring_view(
  129|   114k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   114k|                        current_token.length() + 1u);
  131|   114k|            }
  132|  1.14M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 129k, False: 1.01M]
  ------------------
  133|   129k|            {
  134|       |                // simply append the character
  135|   129k|                current_token = source.substring_view(
  136|   129k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   129k|                        current_token.length() + 1u);
  138|   129k|            }
  139|  1.01M|            else
  140|  1.01M|            {
  141|       |                // Not parsing a comment
  142|  1.01M|                switch (c)
  143|  1.01M|                {
  144|   132k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 132k, False: 883k]
  ------------------
  145|   134k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 2.00k, False: 1.01M]
  ------------------
  146|   134k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 1.01M]
  ------------------
  147|   134k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 1.76k, False: 132k]
  ------------------
  148|  1.76k|                        {
  149|  1.76k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  1.76k|                            continue;
  152|  1.76k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   132k|                        tokens.emplace_back(ParseToken(
  156|   132k|                                source.substring_view(
  157|   132k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   132k|                                        current_token.length()),
  159|   132k|                                current_line_number, current_column - current_token.length()));
  160|   132k|                        current_token = phi::string_view{};
  161|   132k|                        break;
  162|  21.1k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 21.1k, False: 994k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  21.1k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 20.4k, False: 718]
  ------------------
  165|  20.4k|                        {
  166|  20.4k|                            current_token = source.substring_view(
  167|  20.4k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  20.4k|                                    current_token.length() + 1u);
  169|  20.4k|                            tokens.emplace_back(ParseToken(
  170|  20.4k|                                    source.substring_view(
  171|  20.4k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  20.4k|                                                    token_begin),
  173|  20.4k|                                            current_token.length()),
  174|  20.4k|                                    current_line_number,
  175|  20.4k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  20.4k|                            current_token = phi::string_view{};
  178|  20.4k|                        }
  179|    718|                        else
  180|    718|                        {
  181|       |                            // Orphan colon
  182|    718|                            token_begin = i;
  183|       |
  184|    718|                            tokens.emplace_back(
  185|    718|                                    Token::Type::Colon,
  186|    718|                                    source.substring_view(
  187|    718|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|    718|                                                    token_begin),
  189|    718|                                            1u),
  190|    718|                                    current_line_number, current_column);
  191|    718|                        }
  192|  21.1k|                        break;
  193|  10.1k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 10.1k, False: 1.00M]
  ------------------
  194|  10.7k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 611, False: 1.01M]
  ------------------
  195|  12.3k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 1.60k, False: 1.01M]
  ------------------
  196|  12.3k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 11.0k, False: 1.36k]
  ------------------
  197|  11.0k|                        {
  198|  11.0k|                            tokens.emplace_back(ParseToken(
  199|  11.0k|                                    source.substring_view(
  200|  11.0k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  11.0k|                                                    token_begin),
  202|  11.0k|                                            current_token.length()),
  203|  11.0k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  11.0k|                            current_token = phi::string_view{};
  206|  11.0k|                        }
  207|       |
  208|  12.3k|                        Token::Type type;
  209|  12.3k|                        switch (c)
  210|  12.3k|                        {
  211|  10.1k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 10.1k, False: 2.22k]
  ------------------
  212|  10.1k|                                type = Token::Type::Comma;
  213|  10.1k|                                break;
  214|    611|                            case '(':
  ------------------
  |  Branch (214:29): [True: 611, False: 11.7k]
  ------------------
  215|    611|                                type = Token::Type::OpenBracket;
  216|    611|                                break;
  217|  1.60k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 1.60k, False: 10.7k]
  ------------------
  218|  1.60k|                                type = Token::Type::ClosingBracket;
  219|  1.60k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 12.3k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  12.3k|#endif
  225|  12.3k|                        }
  226|       |
  227|  12.3k|                        token_begin = i;
  228|       |
  229|  12.3k|                        tokens.emplace_back(
  230|  12.3k|                                type,
  231|  12.3k|                                source.substring_view(
  232|  12.3k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  12.3k|                                        1u),
  234|  12.3k|                                current_line_number, current_column);
  235|  12.3k|                        break;
  236|       |
  237|   847k|                    default:
  ------------------
  |  Branch (237:21): [True: 847k, False: 168k]
  ------------------
  238|   847k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 258k, False: 588k]
  ------------------
  239|   258k|                        {
  240|   258k|                            token_begin = i;
  241|   258k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   847k|                        current_token = source.substring_view(
  245|   847k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   847k|                                current_token.length() + 1u);
  247|  1.01M|                }
  248|  1.01M|            }
  249|       |
  250|  1.46M|            current_column += 1u;
  251|  1.46M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.01k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 1.33k, False: 2.67k]
  ------------------
  255|  1.33k|        {
  256|  1.33k|            tokens.emplace_back(
  257|  1.33k|                    ParseToken(source.substring_view(
  258|  1.33k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  1.33k|                                       current_token.length()),
  260|  1.33k|                               current_line_number, current_column - current_token.length()));
  261|  1.33k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.01k|        tokens.finalize();
  265|       |
  266|  4.01k|        return tokens;
  267|  4.01k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   372k|    {
   14|   372k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.62k, False: 370k]
  |  Branch (14:13): [True: 1.32k, False: 370k]
  |  Branch (14:36): [True: 1.32k, False: 304]
  ------------------
   15|  1.32k|        {
   16|  1.32k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.32k|            if (number)
  ------------------
  |  Branch (18:17): [True: 519, False: 805]
  ------------------
   19|    519|            {
   20|    519|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    519|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    519|            }
   23|       |
   24|    805|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.32k|        }
   26|       |
   27|   370k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 417, False: 370k]
  |  Branch (27:13): [True: 113k, False: 257k]
  |  Branch (27:36): [True: 113k, False: 257k]
  ------------------
   28|   113k|        {
   29|   113k|            return {Token::Type::Comment, token, line_number, column};
   30|   113k|        }
   31|       |
   32|   257k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 8.25k, False: 248k]
  ------------------
   33|  8.25k|        {
   34|  8.25k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  8.25k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  8.25k|        }
   37|       |
   38|   248k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 8.27k, False: 240k]
  ------------------
   39|  8.27k|        {
   40|  8.27k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  8.27k|        }
   42|       |
   43|   240k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 4.52k, False: 236k]
  ------------------
   44|  4.52k|        {
   45|  4.52k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  4.52k|                    static_cast<phi::uint32_t>(id)};
   47|  4.52k|        }
   48|       |
   49|   236k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.46k, False: 234k]
  ------------------
   50|  1.46k|        {
   51|  1.46k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.46k|                    static_cast<phi::uint32_t>(id)};
   53|  1.46k|        }
   54|       |
   55|   234k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 151k, False: 83.6k]
  ------------------
   56|   151k|        {
   57|   151k|            return {Token::Type::OpCode, token, line_number, column,
   58|   151k|                    static_cast<phi::uint32_t>(opcode)};
   59|   151k|        }
   60|       |
   61|  83.6k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   234k|    }

_ZN6ImVec2C2Ev:
  267|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   58|  4.01k|    {
   59|       |        // Constants
   60|  4.01k|        constexpr phi::uint8_t number_of_opcodes =
   61|  4.01k|                static_cast<phi::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   62|  4.01k|        constexpr phi::uint8_t number_of_int_registers   = 32;
   63|  4.01k|        constexpr phi::uint8_t number_of_float_registers = 32;
   64|       |
   65|  4.01k|        std::string ret;
   66|       |
   67|   308k|        for (phi::size_t index{0}; index < size;)
  ------------------
  |  Branch (67:36): [True: 304k, False: 3.99k]
  ------------------
   68|   304k|        {
   69|   304k|            phi::uint8_t current_value = data[index++];
   70|       |
   71|   304k|            switch (current_value)
   72|   304k|            {
   73|       |                // OpCode
   74|   116k|                case 0: {
  ------------------
  |  Branch (74:17): [True: 116k, False: 187k]
  ------------------
   75|       |                    // Has one more value
   76|   116k|                    if (index < size)
  ------------------
  |  Branch (76:25): [True: 116k, False: 59]
  ------------------
   77|   116k|                    {
   78|   116k|                        phi::uint8_t opcode_value = data[index++] % number_of_opcodes;
   79|       |
   80|   116k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   81|       |
   82|   116k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (82:29): [True: 4, False: 116k]
  ------------------
   83|      4|                        {
   84|      4|                            return detail::ErrorString;
   85|      4|                        }
   86|   116k|                    }
   87|   116k|                    break;
   88|   116k|                }
   89|       |
   90|       |                // Int Register
   91|   116k|                case 1: {
  ------------------
  |  Branch (91:17): [True: 4.84k, False: 299k]
  ------------------
   92|       |                    // Has one more value
   93|  4.84k|                    if (index < size)
  ------------------
  |  Branch (93:25): [True: 4.84k, False: 2]
  ------------------
   94|  4.84k|                    {
   95|  4.84k|                        phi::uint8_t opcode_value = data[index++] % number_of_int_registers;
   96|       |
   97|  4.84k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   98|  4.84k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (98:29): [True: 1, False: 4.84k]
  ------------------
   99|      1|                        {
  100|      1|                            return detail::ErrorString;
  101|      1|                        }
  102|  4.84k|                    }
  103|  4.84k|                    break;
  104|  4.84k|                }
  105|       |
  106|       |                // Float register
  107|  4.84k|                case 2: {
  ------------------
  |  Branch (107:17): [True: 1.47k, False: 302k]
  ------------------
  108|       |                    // Has one more value
  109|  1.47k|                    if (index < size)
  ------------------
  |  Branch (109:25): [True: 1.47k, False: 1]
  ------------------
  110|  1.47k|                    {
  111|  1.47k|                        phi::uint8_t opcode_value = data[index++] % number_of_float_registers;
  112|       |
  113|  1.47k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  114|  1.47k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (114:29): [True: 1, False: 1.47k]
  ------------------
  115|      1|                        {
  116|      1|                            return detail::ErrorString;
  117|      1|                        }
  118|  1.47k|                    }
  119|  1.47k|                    break;
  120|  1.47k|                }
  121|       |
  122|       |                // Floating point status register
  123|  8.60k|                case 3: {
  ------------------
  |  Branch (123:17): [True: 8.60k, False: 295k]
  ------------------
  124|  8.60k|                    ret += "FPSR";
  125|  8.60k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (125:25): [True: 1, False: 8.60k]
  ------------------
  126|      1|                    {
  127|      1|                        return detail::ErrorString;
  128|      1|                    }
  129|       |
  130|  8.60k|                    break;
  131|  8.60k|                }
  132|       |
  133|       |                // Immediate integer
  134|  8.60k|                case 4: {
  ------------------
  |  Branch (134:17): [True: 2.31k, False: 301k]
  ------------------
  135|  2.31k|                    ret += "#";
  136|  2.31k|                    [[fallthrough]];
  137|  2.31k|                }
  138|       |
  139|       |                // Integer literal
  140|  7.51k|                case 5: {
  ------------------
  |  Branch (140:17): [True: 5.20k, False: 298k]
  ------------------
  141|  7.51k|                    phi::size_t size_of_int = std::min(2ul, size - index);
  142|       |
  143|  7.51k|                    if (size_of_int > 0)
  ------------------
  |  Branch (143:25): [True: 7.47k, False: 48]
  ------------------
  144|  7.47k|                    {
  145|  7.47k|                        phi::int16_t value = 0;
  146|       |
  147|  22.3k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (147:32): [True: 14.9k, False: 7.47k]
  ------------------
  148|  14.9k|                        {
  149|  14.9k|                            value <<= 8;
  150|  14.9k|                            value &= data[index++];
  151|  14.9k|                        }
  152|       |
  153|  7.47k|                        ret += std::to_string(value);
  154|  7.47k|                    }
  155|  7.51k|                    break;
  156|  2.31k|                }
  157|       |
  158|       |                // Label
  159|  5.88k|                case 6: {
  ------------------
  |  Branch (159:17): [True: 5.88k, False: 298k]
  ------------------
  160|  5.88k|                    phi::size_t label_length = std::min(5ul, size - index);
  161|       |
  162|  5.88k|                    if (label_length > 0)
  ------------------
  |  Branch (162:25): [True: 5.87k, False: 11]
  ------------------
  163|  5.87k|                    {
  164|  5.87k|                        std::string label_name = "lbl_";
  165|       |
  166|  34.9k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (166:32): [True: 29.0k, False: 5.87k]
  ------------------
  167|  29.0k|                        {
  168|  29.0k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  169|       |
  170|  29.0k|                            label_name += c;
  171|  29.0k|                        }
  172|       |
  173|       |                        // Add 1 in 10 chance to add a colon
  174|  5.87k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (174:29): [True: 5.77k, False: 104]
  |  Branch (174:45): [True: 4.86k, False: 906]
  ------------------
  175|  4.86k|                        {
  176|  4.86k|                            label_name += ':';
  177|  4.86k|                            ret += label_name;
  178|  4.86k|                        }
  179|  1.01k|                        else
  180|  1.01k|                        {
  181|  1.01k|                            ret += label_name;
  182|  1.01k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (182:33): [True: 3, False: 1.00k]
  ------------------
  183|      3|                            {
  184|      3|                                return detail::ErrorString;
  185|      3|                            }
  186|  1.01k|                        }
  187|  5.87k|                    }
  188|  5.88k|                    break;
  189|  5.88k|                }
  190|       |
  191|       |                // Newline
  192|  46.4k|                case 7: {
  ------------------
  |  Branch (192:17): [True: 46.4k, False: 257k]
  ------------------
  193|  46.4k|                    ret += '\n';
  194|  46.4k|                    break;
  195|  5.88k|                }
  196|       |
  197|       |                // Comment
  198|   112k|                case 8: {
  ------------------
  |  Branch (198:17): [True: 112k, False: 191k]
  ------------------
  199|   112k|                    phi::size_t comment_length = std::min(5ul, size - index);
  200|       |
  201|   112k|                    if (comment_length > 0)
  ------------------
  |  Branch (201:25): [True: 112k, False: 46]
  ------------------
  202|   112k|                    {
  203|   112k|                        std::string comment = "; ";
  204|       |
  205|   674k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (205:32): [True: 561k, False: 112k]
  ------------------
  206|   561k|                        {
  207|   561k|                            comment += static_cast<char>(data[index++]);
  208|   561k|                        }
  209|       |
  210|   112k|                        ret += comment + '\n';
  211|   112k|                    }
  212|   112k|                    break;
  213|  5.88k|                }
  214|       |
  215|       |                // Ignore
  216|      6|                default:
  ------------------
  |  Branch (216:17): [True: 6, False: 304k]
  ------------------
  217|      6|                    return detail::ErrorString;
  218|   304k|            }
  219|   304k|        }
  220|       |
  221|  3.99k|        return ret;
  222|  4.01k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   23|   132k|        {
   24|   132k|            if (index < size)
  ------------------
  |  Branch (24:17): [True: 131k, False: 1.23k]
  ------------------
   25|   131k|            {
   26|   131k|                phi::uint8_t val = data[index++];
   27|   131k|                if (val == 0)
  ------------------
  |  Branch (27:21): [True: 123k, False: 7.23k]
  ------------------
   28|   123k|                {
   29|   123k|                    text += ' ';
   30|   123k|                }
   31|  7.23k|                else if (val == 1)
  ------------------
  |  Branch (31:26): [True: 7.22k, False: 10]
  ------------------
   32|  7.22k|                {
   33|  7.22k|                    text += ',';
   34|  7.22k|                }
   35|     10|                else
   36|     10|                {
   37|     10|                    return false;
   38|     10|                }
   39|   131k|            }
   40|       |
   41|   132k|            return true;
   42|   132k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   47|  29.0k|        {
   48|  29.0k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (48:17): [True: 24.6k, False: 4.47k]
  ------------------
   49|  24.6k|            {
   50|  24.6k|                return '_';
   51|  24.6k|            }
   52|       |
   53|  4.47k|            return c;
   54|  29.0k|        }

LLVMFuzzerTestOneInput:
   10|  4.01k|{
   11|  4.01k|    static dlxemu::Emulator emu;
   12|       |
   13|  4.01k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   14|       |
   15|  4.01k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  4.01k|    editor.SetText(source);
   19|  4.01k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  4.01k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  4.01k|    editor.ColorizeInternal();
   24|       |
   25|  4.01k|    return 0;
   26|  4.01k|}


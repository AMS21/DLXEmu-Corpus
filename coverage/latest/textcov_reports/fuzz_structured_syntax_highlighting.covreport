_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  16.5k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  232|  3.31k|    {
  233|  3.31k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (233:13): [True: 2.08k, False: 1.22k]
  ------------------
  234|  2.08k|        {
  235|  2.08k|            return m_Line < other.m_Line;
  236|  2.08k|        }
  237|       |
  238|  1.22k|        return m_Column <= other.m_Column;
  239|  3.31k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  242|      1|    {
  243|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (243:13): [True: 0, False: 1]
  ------------------
  244|      0|        {
  245|      0|            return m_Line > other.m_Line;
  246|      0|        }
  247|       |
  248|      1|        return m_Column >= other.m_Column;
  249|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  256|   316k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  284|      1|    {
  285|      1|        Colorize();
  286|      1|        m_Lines.emplace_back();
  287|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  290|      1|    {
  291|      1|        VerifyInternalState();
  292|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  340|  3.31k|    {
  341|  3.31k|        m_ErrorMarkers.clear();
  342|  3.31k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  405|  3.31k|    {
  406|  3.31k|        m_Breakpoints.clear();
  407|  3.31k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  485|  3.31k|    {
  486|  3.31k|        m_Lines.clear();
  487|  3.31k|        ResetState();
  488|  3.31k|        m_Lines.emplace_back();
  489|       |
  490|  3.31k|        for (const char character : text)
  ------------------
  |  Branch (490:35): [True: 393k, False: 3.31k]
  ------------------
  491|   393k|        {
  492|   393k|            if (character == '\r' ||
  ------------------
  |  Branch (492:17): [True: 257, False: 393k]
  |  Branch (492:17): [True: 16.3k, False: 377k]
  ------------------
  493|   393k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (493:18): [True: 77.7k, False: 315k]
  |  Branch (493:48): [True: 16.6k, False: 61.0k]
  |  Branch (493:69): [True: 16.0k, False: 521]
  ------------------
  494|  16.3k|            {
  495|       |                // ignore the carriage return character and control characters
  496|  16.3k|            }
  497|   377k|            else if (character == '\n')
  ------------------
  |  Branch (497:22): [True: 61.0k, False: 316k]
  ------------------
  498|  61.0k|            {
  499|  61.0k|                m_Lines.emplace_back();
  500|  61.0k|            }
  501|   316k|            else
  502|   316k|            {
  503|   316k|                m_Lines.back().emplace_back(static_cast<Char>(character), PaletteIndex::Default);
  504|   316k|            }
  505|   393k|        }
  506|       |
  507|  3.31k|        m_TextChanged = true;
  508|  3.31k|        m_ScrollToTop = true;
  509|       |
  510|  3.31k|        m_UndoBuffer.clear();
  511|  3.31k|        m_UndoIndex = 0u;
  512|       |
  513|  3.31k|        Colorize();
  514|  3.31k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  517|  3.31k|    {
  518|  3.31k|        const phi::u32 max_line = GetMaxLineNumber();
  519|       |
  520|  3.31k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  521|  3.31k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1484|      1|    {
 1485|       |        // Lines should never be empty
 1486|      1|        PHI_ASSERT(!m_Lines.empty());
 1487|       |
 1488|       |        // Verify Selection is still in a valid state
 1489|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1490|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1491|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1492|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1493|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1494|       |
 1495|       |        // Verify cursor position
 1496|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1497|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1498|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1499|       |
 1500|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1501|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1502|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1503|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1504|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1505|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1506|       |#endif
 1507|       |
 1508|       |        // Verify that all breakpoints are on existing lines
 1509|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1509:35): [True: 0, False: 1]
  ------------------
 1510|      0|        {
 1511|      0|            PHI_ASSERT(break_point != 0u);
 1512|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1513|      0|        }
 1514|       |
 1515|       |        // Verify that all error markers are on existing lines
 1516|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1516:34): [True: 0, False: 1]
  ------------------
 1517|      0|        {
 1518|      0|            const phi::u32 line_number = error_marker.first;
 1519|       |
 1520|      0|            PHI_ASSERT(line_number != 0u);
 1521|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1522|      0|        }
 1523|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1526|      1|    {
 1527|      1|        constexpr const static Palette palette = {{
 1528|      1|                0xff7f7f7f, // Default
 1529|      1|                0xffd69c56, // OpCode
 1530|      1|                0xff00ff00, // Register
 1531|      1|                0xff7070e0, // IntegerLiteral
 1532|      1|                0xff206020, // Comment
 1533|      1|                0xff101010, // Background
 1534|      1|                0xffe0e0e0, // Cursor
 1535|      1|                0x80a06020, // Selection
 1536|      1|                0x800020ff, // ErrorMarker
 1537|      1|                0x40f08000, // Breakpoint
 1538|      1|                0xff707000, // Line number
 1539|      1|                0x40000000, // Current line fill
 1540|      1|                0x40808080, // Current line fill (inactive)
 1541|      1|                0x40a0a0a0, // Current line edge
 1542|      1|        }};
 1543|       |
 1544|      1|        return palette;
 1545|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1710|  3.31k|    {
 1711|       |        // TODO: This is quite unreadable
 1712|  3.31k|        const phi::u32 to_line =
 1713|  3.31k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1713:17): [True: 3.31k, False: 0]
  ------------------
 1714|  3.31k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1715|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1716|       |
 1717|  3.31k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1718|  3.31k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1719|  3.31k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1720|  3.31k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1721|  3.31k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1826|  3.31k|    {
 1827|  3.31k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1828|  3.31k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1829|  3.31k|        PHI_ASSERT(start <= end);
 1830|       |
 1831|  3.31k|        std::string result;
 1832|       |
 1833|  3.31k|        phi::u32   lstart = start.m_Line;
 1834|  3.31k|        phi::u32   lend   = end.m_Line;
 1835|  3.31k|        phi::u32   istart = GetCharacterIndex(start);
 1836|  3.31k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1837|  3.31k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1838|  3.31k|        phi::usize size   = 0u;
 1839|       |
 1840|  67.7k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1840:35): [True: 64.4k, False: 3.31k]
  ------------------
 1841|  64.4k|        {
 1842|  64.4k|            PHI_ASSERT(i < m_Lines.size());
 1843|  64.4k|            size += m_Lines[i.unsafe()].size();
 1844|  64.4k|        }
 1845|       |
 1846|  3.31k|        result.reserve((size + size / 8u).unsafe());
 1847|       |
 1848|   380k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1848:16): [True: 151k, False: 228k]
  |  Branch (1848:16): [True: 377k, False: 3.31k]
  |  Branch (1848:33): [True: 225k, False: 3.31k]
  ------------------
 1849|   377k|        {
 1850|   377k|            PHI_ASSERT(lstart < m_Lines.size());
 1851|       |
 1852|   377k|            const Line& line = m_Lines[lstart.unsafe()];
 1853|   377k|            if (istart < line.size())
  ------------------
  |  Branch (1853:17): [True: 316k, False: 61.0k]
  ------------------
 1854|   316k|            {
 1855|   316k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1856|   316k|                istart++;
 1857|   316k|            }
 1858|  61.0k|            else
 1859|  61.0k|            {
 1860|  61.0k|                istart = 0u;
 1861|  61.0k|                ++lstart;
 1862|       |
 1863|  61.0k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1863:21): [True: 61.0k, False: 0]
  ------------------
 1864|  61.0k|                {
 1865|  61.0k|                    result += '\n';
 1866|  61.0k|                }
 1867|  61.0k|            }
 1868|   377k|        }
 1869|       |
 1870|  3.31k|        return result;
 1871|  3.31k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2403|  6.62k|    {
 2404|  6.62k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2405|       |
 2406|  6.62k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2407|  6.62k|        phi::u32    index = 0u;
 2408|   129k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2408:35): [True: 126k, False: 3.39k]
  |  Branch (2408:35): [True: 123k, False: 6.62k]
  |  Branch (2408:58): [True: 123k, False: 3.22k]
  ------------------
 2409|   123k|        {
 2410|   123k|            PHI_ASSERT(index < line.size());
 2411|   123k|            const Char character = line[index.unsafe()].m_Char;
 2412|       |
 2413|   123k|            if (character == '\t')
  ------------------
  |  Branch (2413:17): [True: 0, False: 123k]
  ------------------
 2414|      0|            {
 2415|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2416|      0|            }
 2417|   123k|            else
 2418|   123k|            {
 2419|   123k|                ++column;
 2420|   123k|            }
 2421|       |
 2422|   123k|            index += UTF8CharLength(character);
 2423|   123k|        }
 2424|       |
 2425|  6.62k|        return index;
 2426|  6.62k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2473|  3.31k|    {
 2474|  3.31k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2474:13): [True: 0, False: 3.31k]
  ------------------
 2475|      0|        {
 2476|      0|            return 0u;
 2477|      0|        }
 2478|       |
 2479|  3.31k|        const Line& line = m_Lines[line_number.unsafe()];
 2480|  3.31k|        phi::u32    col  = 0u;
 2481|       |
 2482|   126k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2482:32): [True: 123k, False: 3.31k]
  ------------------
 2483|   123k|        {
 2484|   123k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2485|   123k|            if (character == '\t')
  ------------------
  |  Branch (2485:17): [True: 0, False: 123k]
  ------------------
 2486|      0|            {
 2487|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2488|      0|            }
 2489|   123k|            else
 2490|   123k|            {
 2491|   123k|                col++;
 2492|   123k|            }
 2493|       |
 2494|   123k|            i += UTF8CharLength(character);
 2495|   123k|        }
 2496|       |
 2497|  3.31k|        return col;
 2498|  3.31k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2501|  3.31k|    {
 2502|  3.31k|        PHI_ASSERT(!m_Lines.empty());
 2503|       |
 2504|  3.31k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2505|  3.31k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3639|   162k|    {
 3640|   162k|        PaletteIndex palette_index{PaletteIndex::Default};
 3641|       |
 3642|       |        // Determine palette color
 3643|   162k|        switch (token.GetType())
 3644|   162k|        {
 3645|  28.8k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3645:13): [True: 28.8k, False: 133k]
  ------------------
 3646|  28.8k|                palette_index = PaletteIndex::Comment;
 3647|  28.8k|                break;
 3648|  1.38k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3648:13): [True: 1.38k, False: 161k]
  ------------------
 3649|  3.82k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3649:13): [True: 2.43k, False: 160k]
  ------------------
 3650|  3.82k|                palette_index = PaletteIndex::IntegerLiteral;
 3651|  3.82k|                break;
 3652|  30.8k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3652:13): [True: 30.8k, False: 131k]
  ------------------
 3653|  30.8k|                palette_index = PaletteIndex::OpCode;
 3654|  30.8k|                break;
 3655|  1.43k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3655:13): [True: 1.43k, False: 161k]
  ------------------
 3656|  3.92k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3656:13): [True: 2.49k, False: 160k]
  ------------------
 3657|  5.61k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3657:13): [True: 1.68k, False: 161k]
  ------------------
 3658|  5.61k|                palette_index = PaletteIndex::Register;
 3659|  5.61k|                break;
 3660|  61.0k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3660:13): [True: 61.0k, False: 101k]
  ------------------
 3661|  61.0k|                return;
 3662|  32.5k|            default:
  ------------------
  |  Branch (3662:13): [True: 32.5k, False: 130k]
  ------------------
 3663|  32.5k|                break;
 3664|   162k|        }
 3665|       |
 3666|   101k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3667|   101k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3668|       |
 3669|   101k|        for (phi::u64 index{token.GetColumn() - 1u};
 3670|   397k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3670:14): [True: 295k, False: 101k]
  ------------------
 3671|   295k|        {
 3672|   295k|            PHI_ASSERT(index < line.size());
 3673|   295k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3674|   295k|        }
 3675|   101k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3678|  3.31k|    {
 3679|  3.31k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3680|       |
 3681|  3.31k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3681:38): [True: 162k, False: 3.31k]
  ------------------
 3682|   162k|        {
 3683|   162k|            ColorizeToken(token);
 3684|   162k|        }
 3685|  3.31k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3688|  3.31k|    {
 3689|  3.31k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3690|  3.31k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3691|  3.31k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3692|       |
 3693|       |        // Clear breakpoints and markers
 3694|  3.31k|        ClearBreakPoints();
 3695|  3.31k|        ClearErrorMarkers();
 3696|  3.31k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|   123k|{
  133|   123k|    return UTF8CharLength(static_cast<char>(character));
  134|   123k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|   246k|{
  103|   246k|    if ((character & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 246k]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|   246k|    if ((character & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 246k]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|   246k|    if ((character & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 246k]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|   246k|    if ((character & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 246k]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|   246k|    if ((character & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 246k]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|   246k|    return 1_u8;
  129|   246k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  3.31k|    {
  184|  3.31k|        return m_DLXProgram;
  185|  3.31k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  3.31k|    {
  189|  3.31k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  3.31k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 163, False: 3.14k]
  ------------------
  192|    163|        {
  193|    163|            m_Processor.LoadProgram(m_DLXProgram);
  194|    163|        }
  195|  3.31k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  3.31k|    {
  209|  3.31k|        return m_CodeEditor;
  210|  3.31k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  51.2k|        {
  173|  51.2k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  51.2k|            switch (index.unsafe())
  176|  51.2k|            {
  177|  20.5k|                case 0:
  ------------------
  |  Branch (177:17): [True: 20.5k, False: 30.6k]
  ------------------
  178|  20.5k|                    return m_Arg1Type;
  179|       |
  180|  15.4k|                case 1:
  ------------------
  |  Branch (180:17): [True: 15.4k, False: 35.7k]
  ------------------
  181|  15.4k|                    return m_Arg2Type;
  182|       |
  183|  15.2k|                case 2:
  ------------------
  |  Branch (183:17): [True: 15.2k, False: 36.0k]
  ------------------
  184|  15.2k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 51.2k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  51.2k|#endif
  191|  51.2k|            }
  192|  51.2k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  14.6k|        {
  199|  14.6k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  14.6k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 14.4k, False: 162]
  ------------------
  203|  14.4k|            {
  204|  14.4k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  14.4k|            }
  206|  14.6k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 10.6k, False: 4.04k]
  ------------------
  207|  10.6k|            {
  208|  10.6k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  10.6k|            }
  210|  14.6k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 5.95k, False: 8.69k]
  ------------------
  211|  5.95k|            {
  212|  5.95k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  5.95k|            }
  214|       |
  215|  14.6k|            return number_of_argument_required;
  216|  14.6k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  14.6k|        {
  225|  14.6k|            return m_Executor;
  226|  14.6k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  5.23k|    {
   38|  5.23k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  5.23k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  5.23k|                                         static_cast<underlying_t>(rhs));
   42|  5.23k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  5.23k|    {
   55|  5.23k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  5.23k|        return static_cast<underlying_t>(type & test) != 0;
   58|  5.23k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  21.4k|    {
  206|  21.4k|        switch (value)
  207|  21.4k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|    929|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    929|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 929, False: 20.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    929|        return #name;
  |  |  ------------------
  |  |   16|    929|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    227|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 227, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    227|        return #name;
  |  |  ------------------
  |  |   17|    263|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    263|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 263, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    263|        return #name;
  |  |  ------------------
  |  |   18|    287|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    287|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 287, False: 21.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    287|        return #name;
  |  |  ------------------
  |  |   19|    305|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    305|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 305, False: 21.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    305|        return #name;
  |  |  ------------------
  |  |   20|    305|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    213|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 213, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    213|        return #name;
  |  |  ------------------
  |  |   21|    213|                                                                                                   \
  |  |   22|    213|    /* Sub */                                                                                      \
  |  |   23|    213|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 200, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    200|        return #name;
  |  |  ------------------
  |  |   24|    224|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 224, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    224|        return #name;
  |  |  ------------------
  |  |   25|    269|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    269|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 269, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    269|        return #name;
  |  |  ------------------
  |  |   26|    269|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   27|    208|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   28|    196|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   29|     67|                                                                                                   \
  |  |   30|     67|    /* Multiplication */                                                                           \
  |  |   31|     67|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   32|     71|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |   33|     71|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   34|    221|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    221|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 221, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    221|        return #name;
  |  |  ------------------
  |  |   35|    221|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |   36|    202|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   37|     66|                                                                                                   \
  |  |   38|     66|    /* Division */                                                                                 \
  |  |   39|    194|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   40|    194|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   41|    194|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   42|    203|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    203|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 203, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    203|        return #name;
  |  |  ------------------
  |  |   43|    203|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   44|    194|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   45|    194|                                                                                                   \
  |  |   46|    194|    /* Shift left (logical) */                                                                     \
  |  |   47|    197|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 197, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    197|        return #name;
  |  |  ------------------
  |  |   48|    210|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |   49|    210|                                                                                                   \
  |  |   50|    210|    /* Shift right (logical) */                                                                    \
  |  |   51|    210|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   52|     67|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   53|     67|                                                                                                   \
  |  |   54|     67|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    194|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   56|    194|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   57|    194|                                                                                                   \
  |  |   58|    194|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    327|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    327|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 327, False: 21.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    327|        return #name;
  |  |  ------------------
  |  |   60|    327|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 76, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     76|        return #name;
  |  |  ------------------
  |  |   61|     76|                                                                                                   \
  |  |   62|     76|    /* Logic */                                                                                    \
  |  |   63|     76|                                                                                                   \
  |  |   64|     76|    /* And */                                                                                      \
  |  |   65|    254|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    254|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 254, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    254|        return #name;
  |  |  ------------------
  |  |   66|    254|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   67|     68|                                                                                                   \
  |  |   68|     68|    /* Or */                                                                                       \
  |  |   69|    194|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   70|    194|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   71|    194|                                                                                                   \
  |  |   72|    194|    /* XOR */                                                                                      \
  |  |   73|    270|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    270|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 270, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    270|        return #name;
  |  |  ------------------
  |  |   74|    270|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |   75|    195|                                                                                                   \
  |  |   76|    195|    /* Set conditionals */                                                                         \
  |  |   77|    195|                                                                                                   \
  |  |   78|    195|    /* Less than */                                                                                \
  |  |   79|    195|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   80|    199|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |   81|    199|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |   82|    196|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   83|    196|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 99, False: 21.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|     99|        return #name;
  |  |  ------------------
  |  |   84|     99|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   85|     67|                                                                                                   \
  |  |   86|     67|    /* Greater than */                                                                             \
  |  |   87|     68|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   88|    199|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |   89|    199|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   90|    479|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    479|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 479, False: 21.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    479|        return #name;
  |  |  ------------------
  |  |   91|    479|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |   92|    201|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 201, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    201|        return #name;
  |  |  ------------------
  |  |   93|    201|                                                                                                   \
  |  |   94|    201|    /* Less than or equal */                                                                       \
  |  |   95|    201|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   96|    194|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   97|    194|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   98|     69|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |   99|    202|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |  100|    202|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  101|    194|                                                                                                   \
  |  |  102|    194|    /* Greater than or equal */                                                                    \
  |  |  103|    194|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  104|    194|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  105|    583|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    583|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 583, False: 20.8k]
  |  |  |  |  ------------------
  |  |  |  |  210|    583|        return #name;
  |  |  ------------------
  |  |  106|    583|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    292|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 292, False: 21.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    292|        return #name;
  |  |  ------------------
  |  |  107|    292|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  108|    200|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 200, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    200|        return #name;
  |  |  ------------------
  |  |  109|    200|                                                                                                   \
  |  |  110|    200|    /* Equal */                                                                                    \
  |  |  111|    200|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  112|    204|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |  113|    204|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  114|    548|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    548|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 548, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    548|        return #name;
  |  |  ------------------
  |  |  115|    548|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  116|    194|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|     68|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  120|    228|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    228|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 228, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    228|        return #name;
  |  |  ------------------
  |  |  121|    228|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  122|    194|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  123|     66|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  124|     72|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |  125|     72|                                                                                                   \
  |  |  126|     72|    /* Conditional branching */                                                                    \
  |  |  127|     72|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  128|    204|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |  129|    338|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    338|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 338, False: 21.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    338|        return #name;
  |  |  ------------------
  |  |  130|  1.51k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.51k, False: 19.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.51k|        return #name;
  |  |  ------------------
  |  |  131|  1.51k|                                                                                                   \
  |  |  132|  1.51k|    /* Unconditional branching */                                                                  \
  |  |  133|  1.51k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|     13|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 13, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     13|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  135|    198|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |  136|    198|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|    195|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  140|    195|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  141|    194|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  142|    194|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  143|    194|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  144|    194|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  145|     66|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  147|    578|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    578|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 578, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    578|        return #name;
  |  |  ------------------
  |  |  148|    578|                                                                                                   \
  |  |  149|    578|    /* Storing data */                                                                             \
  |  |  150|    578|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  151|    210|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |  152|    745|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    745|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 745, False: 20.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    745|        return #name;
  |  |  ------------------
  |  |  153|    745|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    230|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 230, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    230|        return #name;
  |  |  ------------------
  |  |  154|    230|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  155|    198|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |  156|    198|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |  157|     71|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  158|     67|                                                                                                   \
  |  |  159|     67|    /* Moving data */                                                                              \
  |  |  160|    194|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  161|    207|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    207|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 207, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    207|        return #name;
  |  |  ------------------
  |  |  162|    207|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 21.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  163|     86|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 21.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|     83|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  167|    196|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  168|    208|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |  169|    208|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  170|     68|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  171|    194|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  172|    194|                                                                                                   \
  |  |  173|    194|    /* Other */                                                                                    \
  |  |  174|    194|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    113|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 113, False: 21.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    113|        return #name;
  |  |  ------------------
  |  |  175|    113|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 21.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |  176|    205|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 205, False: 21.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    205|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 21.4k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  21.4k|        }
  219|  21.4k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  10.6k|    {
   31|  10.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 496, False: 10.1k]
  ------------------
   32|    496|        {
   33|    496|            return true;
   34|    496|        }
   35|       |
   36|  10.1k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 10.0k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|  10.0k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.13k, False: 8.95k]
  ------------------
   42|  1.13k|        {
   43|  1.13k|            return true;
   44|  1.13k|        }
   45|       |
   46|  8.95k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 8.95k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  8.95k|        return false;
   52|  8.95k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  8.95k|    {
   56|  8.95k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 8.95k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  8.95k|        const char first_char = token.at(0u);
   62|       |
   63|  8.95k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 2.41k, False: 6.53k]
  ------------------
   64|  2.41k|        {
   65|  2.41k|            return phi::is_alpha(first_char);
   66|  2.41k|        }
   67|       |
   68|  6.53k|        phi::boolean just_under_scores = (first_char == '_');
   69|  6.53k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 1.32k, False: 5.21k]
  |  Branch (69:13): [True: 1.17k, False: 5.35k]
  |  Branch (69:43): [True: 1.17k, False: 146]
  ------------------
   70|  1.17k|        {
   71|  1.17k|            return false;
   72|  1.17k|        }
   73|       |
   74|  31.2k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 27.3k, False: 3.91k]
  ------------------
   75|  27.3k|        {
   76|  27.3k|            const char c{token.at(index)};
   77|       |
   78|  27.3k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 12.2k, False: 15.1k]
  ------------------
   79|  12.2k|            {
   80|  12.2k|                just_under_scores = false;
   81|  12.2k|            }
   82|  15.1k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 13.6k, False: 1.44k]
  ------------------
   83|  13.6k|            {
   84|  13.6k|                continue;
   85|  13.6k|            }
   86|  1.44k|            else
   87|  1.44k|            {
   88|  1.44k|                return false;
   89|  1.44k|            }
   90|  27.3k|        }
   91|       |
   92|  3.91k|        return !just_under_scores;
   93|  5.35k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|  62.4k|    {
   99|  62.4k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 62.4k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|  62.4k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 5.00k, False: 57.4k]
  ------------------
  105|  5.00k|        {
  106|  5.00k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 1.80k, False: 3.19k]
  ------------------
  107|  1.80k|            {
  108|  1.80k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  1.80k|            }
  110|       |
  111|  3.19k|            return {};
  112|  5.00k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  57.4k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 380, False: 57.1k]
  ------------------
  116|    380|        {
  117|    380|            return {};
  118|    380|        }
  119|       |
  120|  57.1k|        phi::int32_t number{0};
  121|  57.1k|        phi::boolean is_negative{false};
  122|  57.1k|        phi::boolean starts_with_zero{false};
  123|  57.1k|        phi::boolean parsing_binary{false};
  124|  57.1k|        phi::boolean parsing_octal{false};
  125|  57.1k|        phi::boolean parsing_hexadecimal{false};
  126|  57.1k|        phi::boolean parsed_something{false};
  127|  57.1k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|  65.1k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 63.7k, False: 1.39k]
  ------------------
  132|  63.7k|        {
  133|  63.7k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|  63.7k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 57.1k, False: 6.68k]
  ------------------
  137|  57.1k|            {
  138|  57.1k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 93, False: 57.0k]
  ------------------
  139|     93|                {
  140|     93|                    continue;
  141|     93|                }
  142|       |
  143|  57.0k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 334, False: 56.6k]
  ------------------
  144|    334|                {
  145|    334|                    is_negative = true;
  146|    334|                    continue;
  147|    334|                }
  148|       |
  149|  56.6k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 3.68k, False: 52.9k]
  ------------------
  150|  3.68k|                {
  151|  3.68k|                    starts_with_zero = true;
  152|  3.68k|                    continue;
  153|  3.68k|                }
  154|       |
  155|  52.9k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 66, False: 52.9k]
  ------------------
  156|     66|                {
  157|     66|                    return {};
  158|     66|                }
  159|  52.9k|            }
  160|       |
  161|       |            // Second character
  162|  59.6k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 4.37k, False: 55.2k]
  ------------------
  163|  4.37k|            {
  164|  4.37k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 3.68k, False: 691]
  ------------------
  165|  3.68k|                {
  166|       |                    // Binary
  167|  3.68k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 276, False: 3.40k]
  |  Branch (167:37): [True: 272, False: 3.13k]
  ------------------
  168|    548|                    {
  169|    548|                        parsing_binary = true;
  170|    548|                        continue;
  171|    548|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  3.13k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 805, False: 2.33k]
  |  Branch (174:37): [True: 68, False: 2.26k]
  ------------------
  175|    873|                    {
  176|    873|                        parsing_hexadecimal = true;
  177|    873|                        continue;
  178|    873|                    }
  179|       |
  180|       |                    // Octal
  181|  2.26k|                    parsing_octal = true;
  182|  2.26k|                }
  183|  4.37k|            }
  184|       |
  185|       |            // Handle separators
  186|  58.1k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 140, False: 58.0k]
  ------------------
  187|    140|            {
  188|    140|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 68, False: 72]
  ------------------
  189|     68|                {
  190|     68|                    return {};
  191|     68|                }
  192|       |
  193|     72|                parsed_separator = true;
  194|     72|                continue;
  195|    140|            }
  196|       |
  197|       |            // Check for over/underflow
  198|  58.0k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 384, False: 57.6k]
  |  Branch (198:32): [True: 0, False: 384]
  ------------------
  199|      0|            {
  200|       |                // Would underflow
  201|      0|                return {};
  202|      0|            }
  203|  58.0k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 57.6k, False: 384]
  |  Branch (203:17): [True: 0, False: 58.0k]
  |  Branch (203:33): [True: 0, False: 57.6k]
  ------------------
  204|      0|            {
  205|       |                // Would overflow
  206|      0|                return {};
  207|      0|            }
  208|       |
  209|  58.0k|            parsed_separator = false;
  210|  58.0k|            parsed_something = true;
  211|       |
  212|  58.0k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 416, False: 57.6k]
  ------------------
  213|    416|            {
  214|    416|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 284, False: 132]
  ------------------
  215|    284|                {
  216|    284|                    return {};
  217|    284|                }
  218|       |
  219|    132|                number <<= 1;
  220|    132|                number |= (c - '0');
  221|    132|            }
  222|  57.6k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 2.49k, False: 55.1k]
  ------------------
  223|  2.49k|            {
  224|  2.49k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 2.12k, False: 379]
  ------------------
  225|  2.12k|                {
  226|  2.12k|                    return {};
  227|  2.12k|                }
  228|       |
  229|    379|                number <<= 3;
  230|    379|                number |= (c - '0');
  231|    379|            }
  232|  55.1k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.00k, False: 54.1k]
  ------------------
  233|  1.00k|            {
  234|  1.00k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 151, False: 856]
  ------------------
  235|    151|                {
  236|    151|                    return {};
  237|    151|                }
  238|       |
  239|    856|                number <<= 4;
  240|    856|                number |= phi::hex_digit_value(c).unsafe();
  241|    856|            }
  242|  54.1k|            else
  243|  54.1k|            {
  244|  54.1k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 52.8k, False: 1.30k]
  ------------------
  245|  52.8k|                {
  246|  52.8k|                    return {};
  247|  52.8k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  1.30k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 549, False: 756]
  |  Branch (250:36): [True: 194, False: 355]
  ------------------
  251|    194|                {
  252|    194|                    return {};
  253|    194|                }
  254|       |
  255|  1.11k|                number *= 10;
  256|  1.11k|                number += (c - '0');
  257|  1.11k|            }
  258|  58.0k|        }
  259|       |
  260|  1.39k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 1.18k, False: 210]
  ------------------
  261|  1.18k|        {
  262|       |            // Check for over/underflow
  263|  1.18k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 85, False: 1.10k]
  |  Branch (263:32): [True: 0, False: 85]
  ------------------
  264|      0|            {
  265|       |                // Would underflow
  266|      0|                return {};
  267|      0|            }
  268|  1.18k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 1.10k, False: 85]
  |  Branch (268:17): [True: 0, False: 1.18k]
  |  Branch (268:33): [True: 0, False: 1.10k]
  ------------------
  269|      0|            {
  270|       |                // Would overflow
  271|      0|                return {};
  272|      0|            }
  273|       |
  274|  1.18k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 85, False: 1.10k]
  ------------------
  275|     85|            {
  276|     85|                return static_cast<phi::int16_t>(-number);
  277|     85|            }
  278|       |
  279|  1.10k|            return static_cast<phi::int16_t>(number);
  280|  1.18k|        }
  281|       |
  282|    210|        return {};
  283|  1.39k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  3.06k|    {
   97|  3.06k|        switch (value)
   98|  3.06k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|    225|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|    225|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 225, False: 2.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|    225|        return #name;
  |  |  ------------------
  |  |   14|    470|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|    470|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 470, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  101|    470|        return #name;
  |  |  ------------------
  |  |   15|    470|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   16|      8|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 8, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      8|        return #name;
  |  |  ------------------
  |  |   17|      8|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   18|      3|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   19|      4|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      4|        return #name;
  |  |  ------------------
  |  |   20|      4|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   21|    104|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|    104|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 104, False: 2.95k]
  |  |  |  |  ------------------
  |  |  |  |  101|    104|        return #name;
  |  |  ------------------
  |  |   22|    104|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 19, False: 3.04k]
  |  |  |  |  ------------------
  |  |  |  |  101|     19|        return #name;
  |  |  ------------------
  |  |   23|     19|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   24|      7|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   25|      1|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|      0|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 0, False: 3.06k]
  |  |  |  |  ------------------
  |  |  |  |  101|      0|        return #name;
  |  |  ------------------
  |  |   26|      2|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   27|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   28|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      4|        return #name;
  |  |  ------------------
  |  |   29|     71|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|     71|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 71, False: 2.98k]
  |  |  |  |  ------------------
  |  |  |  |  101|     71|        return #name;
  |  |  ------------------
  |  |   30|    171|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|    171|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 171, False: 2.88k]
  |  |  |  |  ------------------
  |  |  |  |  101|    171|        return #name;
  |  |  ------------------
  |  |   31|    171|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     16|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 16, False: 3.04k]
  |  |  |  |  ------------------
  |  |  |  |  101|     16|        return #name;
  |  |  ------------------
  |  |   32|    218|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|    218|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 218, False: 2.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|    218|        return #name;
  |  |  ------------------
  |  |   33|    218|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|     86|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 86, False: 2.97k]
  |  |  |  |  ------------------
  |  |  |  |  101|     86|        return #name;
  |  |  ------------------
  |  |   34|     86|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 20, False: 3.04k]
  |  |  |  |  ------------------
  |  |  |  |  101|     20|        return #name;
  |  |  ------------------
  |  |   35|     28|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|     28|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 28, False: 3.03k]
  |  |  |  |  ------------------
  |  |  |  |  101|     28|        return #name;
  |  |  ------------------
  |  |   36|     37|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     37|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 37, False: 3.02k]
  |  |  |  |  ------------------
  |  |  |  |  101|     37|        return #name;
  |  |  ------------------
  |  |   37|    213|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|    213|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 213, False: 2.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|    213|        return #name;
  |  |  ------------------
  |  |   38|    233|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|    233|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 233, False: 2.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|    233|        return #name;
  |  |  ------------------
  |  |   39|    233|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 3.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   40|    223|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    223|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 223, False: 2.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|    223|        return #name;
  |  |  ------------------
  |  |   41|    223|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     21|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 21, False: 3.03k]
  |  |  |  |  ------------------
  |  |  |  |  101|     21|        return #name;
  |  |  ------------------
  |  |   42|     34|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|     34|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 34, False: 3.02k]
  |  |  |  |  ------------------
  |  |  |  |  101|     34|        return #name;
  |  |  ------------------
  |  |   43|     66|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|     66|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 66, False: 2.99k]
  |  |  |  |  ------------------
  |  |  |  |  101|     66|        return #name;
  |  |  ------------------
  |  |   44|    758|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    758|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 758, False: 2.30k]
  |  |  |  |  ------------------
  |  |  |  |  101|    758|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 3.06k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  3.06k|        }
  110|  3.06k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  1.44k|    {
  134|  1.44k|        switch (value)
  135|  1.44k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|     81|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|     81|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 81, False: 1.36k]
  |  |  |  |  ------------------
  |  |  |  |  138|     81|        return #name;
  |  |  ------------------
  |  |   48|    150|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    150|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 150, False: 1.29k]
  |  |  |  |  ------------------
  |  |  |  |  138|    150|        return #name;
  |  |  ------------------
  |  |   49|    150|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|    131|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 131, False: 1.31k]
  |  |  |  |  ------------------
  |  |  |  |  138|    131|        return #name;
  |  |  ------------------
  |  |   50|    131|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 1.43k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   51|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   52|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 1.43k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   53|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   54|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   55|     32|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|     32|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 32, False: 1.41k]
  |  |  |  |  ------------------
  |  |  |  |  138|     32|        return #name;
  |  |  ------------------
  |  |   56|     32|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 1.43k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   57|    334|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|    334|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 334, False: 1.10k]
  |  |  |  |  ------------------
  |  |  |  |  138|    334|        return #name;
  |  |  ------------------
  |  |   58|    334|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   59|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   60|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   61|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|     27|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 27, False: 1.41k]
  |  |  |  |  ------------------
  |  |  |  |  138|     27|        return #name;
  |  |  ------------------
  |  |   62|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   63|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 11, False: 1.43k]
  |  |  |  |  ------------------
  |  |  |  |  138|     11|        return #name;
  |  |  ------------------
  |  |   64|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   65|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   67|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   68|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   70|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|    176|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 176, False: 1.26k]
  |  |  |  |  ------------------
  |  |  |  |  138|    176|        return #name;
  |  |  ------------------
  |  |   71|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   74|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   75|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 1.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   76|     14|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14, False: 1.42k]
  |  |  |  |  ------------------
  |  |  |  |  138|     14|        return #name;
  |  |  ------------------
  |  |   77|    241|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|    241|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 241, False: 1.20k]
  |  |  |  |  ------------------
  |  |  |  |  138|    241|        return #name;
  |  |  ------------------
  |  |   78|    241|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|    209|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 209, False: 1.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|    209|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 1.44k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  1.44k|        }
  147|  1.44k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  2.42k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  2.42k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 17.5k, False: 0]
  ------------------
   64|  17.5k|            {
   65|  17.5k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 2.42k, False: 15.1k]
  ------------------
   66|  2.42k|                {
   67|  2.42k|                    return &token;
   68|  2.42k|                }
   69|  17.5k|            }
   70|       |
   71|      0|            return nullptr;
   72|  2.42k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  61.7k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  61.7k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  61.7k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  91.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  91.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  91.3k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  9.61k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  9.61k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  9.61k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  14.6k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  2.47k|    {
   22|  2.47k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  2.47k|        switch (argument_number.unsafe())
   25|  2.47k|        {
   26|  1.67k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 1.67k, False: 799]
  ------------------
   27|  1.67k|                m_Arg1 = argument;
   28|  1.67k|                break;
   29|    598|            case 1u:
  ------------------
  |  Branch (29:13): [True: 598, False: 1.87k]
  ------------------
   30|    598|                m_Arg2 = argument;
   31|    598|                break;
   32|    201|            case 2u:
  ------------------
  |  Branch (32:13): [True: 201, False: 2.27k]
  ------------------
   33|    201|                m_Arg3 = argument;
   34|    201|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 2.47k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  2.47k|#endif
   39|  2.47k|        }
   40|  2.47k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  46.4k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  1.34k|    {
  167|  1.34k|        InstructionArgument arg;
  168|  1.34k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  1.34k|        arg.register_int.register_id = id;
  170|  1.34k|        return arg;
  171|  1.34k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|     67|    {
  175|     67|        InstructionArgument arg;
  176|     67|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|     67|        arg.register_float.register_id = id;
  178|     67|        return arg;
  179|     67|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|    212|    {
  183|    212|        InstructionArgument arg;
  184|    212|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|    212|        arg.immediate_value.signed_value = value;
  186|    212|        return arg;
  187|    212|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|    849|    {
  201|    849|        InstructionArgument arg;
  202|    849|        arg.m_Type           = ArgumentType::Label;
  203|    849|        arg.label.label_name = label_name;
  204|    849|        return arg;
  205|    849|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  14.6k|    {
  450|  14.6k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  14.6k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|  63.1k|    {
   22|  63.1k|        switch (token.length().unsafe())
   23|  63.1k|        {
   24|       |            // 1 character OpCodes
   25|  5.67k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 5.67k, False: 57.4k]
  ------------------
   26|  5.67k|                const char c1 = token[0u];
   27|       |
   28|  5.67k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 1.90k, False: 3.77k]
  ------------------
   29|  1.90k|                {
   30|  1.90k|                    return OpCode::J;
   31|  1.90k|                }
   32|  3.77k|                break;
   33|  5.67k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  9.85k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 9.85k, False: 53.2k]
  ------------------
   37|  9.85k|                const char c1 = token[0u];
   38|  9.85k|                const char c2 = token[1u];
   39|       |
   40|  9.85k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 3.76k, False: 6.09k]
  ------------------
   41|  9.85k|                {
   42|     99|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 99, False: 9.75k]
  ------------------
   43|    216|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 117, False: 9.73k]
  ------------------
   44|    216|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 133, False: 83]
  ------------------
   45|    133|                        {
   46|    133|                            return OpCode::JR;
   47|    133|                        }
   48|     83|                        break;
   49|       |
   50|  1.29k|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 1.29k, False: 8.56k]
  ------------------
   51|  1.89k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 599, False: 9.25k]
  ------------------
   52|  1.89k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 147, False: 1.74k]
  ------------------
   53|  1.89k|                        {
   54|    194|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 194, False: 1.70k]
  ------------------
   55|    390|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 196, False: 1.69k]
  ------------------
   56|    390|                                return OpCode::LB;
   57|    578|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 578, False: 1.31k]
  ------------------
   58|    644|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 66, False: 1.82k]
  ------------------
   59|    644|                                return OpCode::LD;
   60|     66|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 66, False: 1.82k]
  ------------------
   61|    132|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 66, False: 1.82k]
  ------------------
   62|    132|                                return OpCode::LF;
   63|    194|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 194, False: 1.70k]
  ------------------
   64|    261|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 67, False: 1.82k]
  ------------------
   65|    261|                                return OpCode::LH;
   66|     66|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 66, False: 1.82k]
  ------------------
   67|    320|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 254, False: 1.64k]
  ------------------
   68|    320|                                return OpCode::LW;
   69|  1.89k|                        }
   70|    147|                        break;
   71|    739|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 739, False: 9.11k]
  ------------------
   72|    858|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 119, False: 9.73k]
  ------------------
   73|    858|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 389, False: 469]
  ------------------
   74|    389|                        {
   75|    389|                            return OpCode::OR;
   76|    389|                        }
   77|    469|                        break;
   78|  1.85k|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 1.85k, False: 7.99k]
  ------------------
   79|  3.12k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 1.26k, False: 8.58k]
  ------------------
   80|  3.12k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 1.09k, False: 2.02k]
  ------------------
   81|  3.12k|                        {
   82|    196|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 196, False: 2.92k]
  ------------------
   83|    262|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 66, False: 3.05k]
  ------------------
   84|    262|                                return OpCode::SB;
   85|     71|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 71, False: 3.05k]
  ------------------
   86|    551|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 480, False: 2.64k]
  ------------------
   87|    551|                                return OpCode::SD;
   88|     71|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 71, False: 3.05k]
  ------------------
   89|    265|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 194, False: 2.93k]
  ------------------
   90|    265|                                return OpCode::SF;
   91|    623|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 623, False: 2.50k]
  ------------------
   92|    689|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 66, False: 3.05k]
  ------------------
   93|    689|                                return OpCode::SH;
   94|    194|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 194, False: 2.93k]
  ------------------
   95|    261|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 67, False: 3.05k]
  ------------------
   96|    261|                                return OpCode::SW;
   97|  3.12k|                        }
   98|  1.09k|                        break;
   99|  9.85k|                }
  100|  5.55k|                break;
  101|  9.85k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  16.6k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 16.6k, False: 46.4k]
  ------------------
  105|  16.6k|                const char c1 = token[0u];
  106|  16.6k|                const char c2 = token[1u];
  107|  16.6k|                const char c3 = token[2u];
  108|       |
  109|  16.6k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 2.33k, False: 14.3k]
  ------------------
  110|  16.6k|                {
  111|  1.24k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 1.24k, False: 15.4k]
  ------------------
  112|  1.68k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 442, False: 16.2k]
  ------------------
  113|  1.68k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 981, False: 708]
  |  Branch (113:29): [True: 914, False: 775]
  |  Branch (113:45): [True: 914, False: 67]
  ------------------
  114|    914|                        {
  115|    914|                            return OpCode::ADD;
  116|    914|                        }
  117|    775|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 638, False: 137]
  |  Branch (117:34): [True: 444, False: 331]
  |  Branch (117:50): [True: 444, False: 194]
  ------------------
  118|    444|                        {
  119|    444|                            return OpCode::AND;
  120|    444|                        }
  121|    331|                        break;
  122|       |
  123|    966|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 966, False: 15.7k]
  ------------------
  124|  1.04k|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 79, False: 16.6k]
  ------------------
  125|  1.04k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 948, False: 97]
  |  Branch (125:29): [True: 882, False: 163]
  |  Branch (125:45): [True: 882, False: 66]
  ------------------
  126|    882|                        {
  127|    882|                            return OpCode::DIV;
  128|    882|                        }
  129|    163|                        break;
  130|       |
  131|    445|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 445, False: 16.2k]
  ------------------
  132|    580|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 135, False: 16.5k]
  ------------------
  133|    580|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 497, False: 83]
  ------------------
  134|    497|                        {
  135|    497|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 132, False: 365]
  ------------------
  136|    132|                            {
  137|    132|                                return OpCode::EQD;
  138|    132|                            }
  139|    365|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 260, False: 105]
  ------------------
  140|    260|                            {
  141|    260|                                return OpCode::EQF;
  142|    260|                            }
  143|    497|                        }
  144|    188|                        break;
  145|       |
  146|  1.13k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.13k, False: 15.5k]
  ------------------
  147|  1.52k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 391, False: 16.2k]
  ------------------
  148|  1.52k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 592, False: 929]
  ------------------
  149|    592|                        {
  150|    592|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 266, False: 326]
  ------------------
  151|    266|                            {
  152|    266|                                return OpCode::GED;
  153|    266|                            }
  154|    326|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 260, False: 66]
  ------------------
  155|    260|                            {
  156|    260|                                return OpCode::GEF;
  157|    260|                            }
  158|    592|                        }
  159|    929|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 863, False: 66]
  ------------------
  160|    863|                        {
  161|    863|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 395, False: 468]
  ------------------
  162|    395|                            {
  163|    395|                                return OpCode::GTD;
  164|    395|                            }
  165|    468|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 268, False: 200]
  ------------------
  166|    268|                            {
  167|    268|                                return OpCode::GTF;
  168|    268|                            }
  169|    468|                        }
  170|    332|                        break;
  171|       |
  172|    332|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 202, False: 16.4k]
  ------------------
  173|    542|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 340, False: 16.3k]
  ------------------
  174|    542|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 473, False: 69]
  |  Branch (174:29): [True: 266, False: 276]
  |  Branch (174:45): [True: 266, False: 207]
  ------------------
  175|    266|                        {
  176|    266|                            return OpCode::JAL;
  177|    266|                        }
  178|    276|                        break;
  179|       |
  180|  1.23k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 1.23k, False: 15.4k]
  ------------------
  181|  2.30k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 1.06k, False: 15.6k]
  ------------------
  182|  2.30k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 69, False: 2.23k]
  ------------------
  183|  2.30k|                        {
  184|     66|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 66, False: 2.23k]
  ------------------
  185|    352|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 286, False: 2.01k]
  ------------------
  186|    352|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 152, False: 200]
  ------------------
  187|    152|                                {
  188|    152|                                    return OpCode::LBU;
  189|    152|                                }
  190|    200|                                break;
  191|       |
  192|    410|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 410, False: 1.89k]
  ------------------
  193|    722|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 312, False: 1.99k]
  ------------------
  194|    722|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 388, False: 334]
  ------------------
  195|    388|                                {
  196|    388|                                    return OpCode::LED;
  197|    388|                                }
  198|    334|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 268, False: 66]
  ------------------
  199|    268|                                {
  200|    268|                                    return OpCode::LEF;
  201|    268|                                }
  202|     66|                                break;
  203|       |
  204|    449|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 449, False: 1.85k]
  ------------------
  205|    587|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 138, False: 2.16k]
  ------------------
  206|    587|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 261, False: 326]
  ------------------
  207|    261|                                {
  208|    261|                                    return OpCode::LHI;
  209|    261|                                }
  210|    326|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 260, False: 66]
  ------------------
  211|    260|                                {
  212|    260|                                    return OpCode::LHU;
  213|    260|                                }
  214|     66|                                break;
  215|       |
  216|    179|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 179, False: 2.12k]
  ------------------
  217|    366|                            case 't':
  ------------------
  |  Branch (217:29): [True: 187, False: 2.11k]
  ------------------
  218|    366|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 133, False: 233]
  ------------------
  219|    133|                                {
  220|    133|                                    return OpCode::LTD;
  221|    133|                                }
  222|    233|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 165, False: 68]
  ------------------
  223|    165|                                {
  224|    165|                                    return OpCode::LTF;
  225|    165|                                }
  226|     68|                                break;
  227|       |
  228|     78|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 78, False: 2.22k]
  ------------------
  229|    207|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 129, False: 2.17k]
  ------------------
  230|    207|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 132, False: 75]
  ------------------
  231|    132|                                {
  232|    132|                                    return OpCode::LWU;
  233|    132|                                }
  234|     75|                                break;
  235|  2.30k|                        }
  236|    544|                        break;
  237|       |
  238|    592|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 592, False: 16.0k]
  ------------------
  239|  1.12k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 533, False: 16.1k]
  ------------------
  240|  1.12k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 464, False: 661]
  ------------------
  241|    464|                        {
  242|    464|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 138, False: 326]
  ------------------
  243|    138|                            {
  244|    138|                                return OpCode::NED;
  245|    138|                            }
  246|    326|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 132, False: 194]
  ------------------
  247|    132|                            {
  248|    132|                                return OpCode::NEF;
  249|    132|                            }
  250|    464|                        }
  251|    661|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 465, False: 196]
  |  Branch (251:34): [True: 271, False: 390]
  |  Branch (251:50): [True: 271, False: 194]
  ------------------
  252|    271|                        {
  253|    271|                            return OpCode::NOP;
  254|    271|                        }
  255|       |
  256|    584|                        break;
  257|       |
  258|    584|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 321, False: 16.3k]
  ------------------
  259|    400|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 79, False: 16.6k]
  ------------------
  260|    400|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 326, False: 74]
  |  Branch (260:29): [True: 260, False: 140]
  |  Branch (260:45): [True: 260, False: 66]
  ------------------
  261|    260|                        {
  262|    260|                            return OpCode::ORI;
  263|    260|                        }
  264|    140|                        break;
  265|       |
  266|  4.16k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 4.16k, False: 12.5k]
  ------------------
  267|  4.74k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 581, False: 16.1k]
  ------------------
  268|  4.74k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 292, False: 4.45k]
  ------------------
  269|  4.74k|                        {
  270|    210|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 210, False: 4.53k]
  ------------------
  271|    349|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 139, False: 4.60k]
  ------------------
  272|    349|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 276, False: 73]
  ------------------
  273|    276|                                {
  274|    276|                                    return OpCode::SBU;
  275|    276|                                }
  276|     73|                                break;
  277|       |
  278|     79|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 79, False: 4.66k]
  ------------------
  279|    491|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 412, False: 4.33k]
  ------------------
  280|    491|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 295, False: 196]
  ------------------
  281|    295|                                {
  282|    295|                                    return OpCode::SEQ;
  283|    295|                                }
  284|    196|                                break;
  285|       |
  286|    263|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 263, False: 4.48k]
  ------------------
  287|    477|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 214, False: 4.53k]
  ------------------
  288|    477|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 260, False: 217]
  ------------------
  289|    260|                                {
  290|    260|                                    return OpCode::SGE;
  291|    260|                                }
  292|    217|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 150, False: 67]
  ------------------
  293|    150|                                {
  294|    150|                                    return OpCode::SGT;
  295|    150|                                }
  296|     67|                                break;
  297|       |
  298|    233|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 233, False: 4.51k]
  ------------------
  299|    362|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 129, False: 4.61k]
  ------------------
  300|    362|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 296, False: 66]
  ------------------
  301|    296|                                {
  302|    296|                                    return OpCode::SHU;
  303|    296|                                }
  304|     66|                                break;
  305|       |
  306|    700|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 700, False: 4.04k]
  ------------------
  307|    988|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 288, False: 4.45k]
  ------------------
  308|    988|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 66, False: 922]
  ------------------
  309|    988|                                {
  310|    194|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 194, False: 794]
  ------------------
  311|    260|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 66, False: 922]
  ------------------
  312|    260|                                        return OpCode::SLA;
  313|       |
  314|    194|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 194, False: 794]
  ------------------
  315|    260|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 66, False: 922]
  ------------------
  316|    260|                                        return OpCode::SLE;
  317|       |
  318|    197|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 197, False: 791]
  ------------------
  319|    267|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 70, False: 918]
  ------------------
  320|    267|                                        return OpCode::SLL;
  321|       |
  322|     67|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 67, False: 921]
  ------------------
  323|    135|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 68, False: 920]
  ------------------
  324|    135|                                        return OpCode::SLT;
  325|    988|                                }
  326|     66|                                break;
  327|       |
  328|     70|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 70, False: 4.67k]
  ------------------
  329|    212|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 142, False: 4.60k]
  ------------------
  330|    212|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 145, False: 67]
  ------------------
  331|    145|                                {
  332|    145|                                    return OpCode::SNE;
  333|    145|                                }
  334|     67|                                break;
  335|       |
  336|    468|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 468, False: 4.27k]
  ------------------
  337|    845|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 377, False: 4.36k]
  ------------------
  338|    845|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 437, False: 408]
  ------------------
  339|    437|                                {
  340|    437|                                    return OpCode::SRA;
  341|    437|                                }
  342|    408|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 188, False: 220]
  ------------------
  343|    188|                                {
  344|    188|                                    return OpCode::SRL;
  345|    188|                                }
  346|    220|                                break;
  347|       |
  348|    220|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 206, False: 4.53k]
  ------------------
  349|    398|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 192, False: 4.55k]
  ------------------
  350|    398|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 323, False: 75]
  ------------------
  351|    323|                                {
  352|    323|                                    return OpCode::SUB;
  353|    323|                                }
  354|     75|                                break;
  355|       |
  356|    257|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 257, False: 4.48k]
  ------------------
  357|    330|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 73, False: 4.67k]
  ------------------
  358|    330|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 264, False: 66]
  ------------------
  359|    264|                                {
  360|    264|                                    return OpCode::SWU;
  361|    264|                                }
  362|     66|                                break;
  363|  4.74k|                        }
  364|       |
  365|  1.39k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 205, False: 16.4k]
  ------------------
  366|  1.58k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 196, False: 16.4k]
  ------------------
  367|  1.58k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 476, False: 1.11k]
  |  Branch (367:29): [True: 278, False: 1.31k]
  |  Branch (367:45): [True: 278, False: 198]
  ------------------
  368|    278|                        {
  369|    278|                            return OpCode::XOR;
  370|    278|                        }
  371|  1.31k|                        break;
  372|  16.6k|                }
  373|  6.20k|                break;
  374|  16.6k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  19.7k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 19.7k, False: 43.3k]
  ------------------
  378|  19.7k|                const char c1 = token[0u];
  379|  19.7k|                const char c2 = token[1u];
  380|  19.7k|                const char c3 = token[2u];
  381|  19.7k|                const char c4 = token[3u];
  382|       |
  383|  19.7k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 1.91k, False: 17.8k]
  ------------------
  384|  19.7k|                {
  385|  1.53k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 1.53k, False: 18.2k]
  ------------------
  386|  1.81k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 279, False: 19.4k]
  ------------------
  387|  1.81k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 66, False: 1.74k]
  ------------------
  388|  1.81k|                        {
  389|  1.31k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.31k, False: 496]
  ------------------
  390|  1.47k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 157, False: 1.65k]
  ------------------
  391|  1.47k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 1.27k, False: 201]
  ------------------
  392|  1.27k|                                {
  393|  1.27k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 66, False: 1.20k]
  ------------------
  394|  1.27k|                                    {
  395|    212|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 212, False: 1.06k]
  ------------------
  396|    278|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 66, False: 1.20k]
  ------------------
  397|    278|                                            return OpCode::ADDD;
  398|       |
  399|    305|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 305, False: 970]
  ------------------
  400|    371|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 66, False: 1.20k]
  ------------------
  401|    371|                                            return OpCode::ADDF;
  402|       |
  403|    218|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 218, False: 1.05k]
  ------------------
  404|    284|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 66, False: 1.20k]
  ------------------
  405|    284|                                            return OpCode::ADDI;
  406|       |
  407|    210|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 210, False: 1.06k]
  ------------------
  408|    276|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 66, False: 1.20k]
  ------------------
  409|    276|                                            return OpCode::ADDU;
  410|  1.27k|                                    }
  411|  1.27k|                                }
  412|    267|                                break;
  413|       |
  414|    267|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 102, False: 1.71k]
  ------------------
  415|    273|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 171, False: 1.64k]
  ------------------
  416|    273|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 206, False: 67]
  |  Branch (416:37): [True: 134, False: 139]
  |  Branch (416:53): [True: 134, False: 72]
  ------------------
  417|    134|                                {
  418|    134|                                    return OpCode::ANDI;
  419|    134|                                }
  420|       |
  421|    139|                                break;
  422|  1.81k|                        }
  423|    472|                        break;
  424|       |
  425|  2.07k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 2.07k, False: 17.6k]
  ------------------
  426|  2.97k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 899, False: 18.8k]
  ------------------
  427|  2.97k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 74, False: 2.89k]
  ------------------
  428|  2.97k|                        {
  429|    109|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 109, False: 2.86k]
  ------------------
  430|    648|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 539, False: 2.43k]
  ------------------
  431|    648|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 403, False: 245]
  |  Branch (431:37): [True: 337, False: 311]
  |  Branch (431:53): [True: 337, False: 66]
  ------------------
  432|    337|                                {
  433|    337|                                    return OpCode::BEQZ;
  434|    337|                                }
  435|    311|                                break;
  436|       |
  437|  1.59k|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 1.59k, False: 1.37k]
  ------------------
  438|  1.85k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 264, False: 2.70k]
  ------------------
  439|  1.85k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.79k, False: 66]
  ------------------
  440|  1.79k|                                {
  441|  1.79k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 1.34k, False: 444]
  ------------------
  442|  1.34k|                                    {
  443|  1.34k|                                        return OpCode::BFPF;
  444|  1.34k|                                    }
  445|    444|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 378, False: 66]
  ------------------
  446|    378|                                    {
  447|    378|                                        return OpCode::BFPT;
  448|    378|                                    }
  449|  1.79k|                                }
  450|    132|                                break;
  451|       |
  452|    226|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 226, False: 2.74k]
  ------------------
  453|    392|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 166, False: 2.80k]
  ------------------
  454|    392|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 326, False: 66]
  |  Branch (454:37): [True: 260, False: 132]
  |  Branch (454:53): [True: 260, False: 66]
  ------------------
  455|    260|                                {
  456|    260|                                    return OpCode::BNEZ;
  457|    260|                                }
  458|  2.97k|                        }
  459|    649|                        break;
  460|       |
  461|  1.85k|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 1.85k, False: 17.9k]
  ------------------
  462|  1.97k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 118, False: 19.6k]
  ------------------
  463|  1.97k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 1.88k, False: 86]
  |  Branch (463:29): [True: 1.82k, False: 152]
  |  Branch (463:45): [True: 1.82k, False: 66]
  ------------------
  464|  1.82k|                        {
  465|  1.82k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 782, False: 1.04k]
  ------------------
  466|  1.82k|                            {
  467|    194|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 194, False: 1.62k]
  ------------------
  468|    260|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 66, False: 1.75k]
  ------------------
  469|    260|                                    return OpCode::DIVD;
  470|       |
  471|    194|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 194, False: 1.62k]
  ------------------
  472|    260|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 66, False: 1.75k]
  ------------------
  473|    260|                                    return OpCode::DIVF;
  474|       |
  475|    194|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 194, False: 1.62k]
  ------------------
  476|    260|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 66, False: 1.75k]
  ------------------
  477|    260|                                    return OpCode::DIVI;
  478|       |
  479|    194|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 194, False: 1.62k]
  ------------------
  480|    260|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 66, False: 1.75k]
  ------------------
  481|    260|                                    return OpCode::DIVU;
  482|  1.82k|                            }
  483|  1.82k|                        }
  484|    934|                        break;
  485|       |
  486|    934|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 93, False: 19.6k]
  ------------------
  487|    752|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 659, False: 19.1k]
  ------------------
  488|    752|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 656, False: 96]
  |  Branch (488:29): [True: 140, False: 612]
  |  Branch (488:45): [True: 590, False: 66]
  |  Branch (488:61): [True: 140, False: 450]
  ------------------
  489|    140|                        {
  490|    140|                            return OpCode::HALT;
  491|    140|                        }
  492|    612|                        break;
  493|       |
  494|    612|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 288, False: 19.4k]
  ------------------
  495|    725|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 437, False: 19.3k]
  ------------------
  496|    725|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 524, False: 201]
  |  Branch (496:29): [True: 132, False: 593]
  |  Branch (496:45): [True: 198, False: 326]
  |  Branch (496:61): [True: 132, False: 66]
  ------------------
  497|    132|                        {
  498|    132|                            return OpCode::JALR;
  499|    132|                        }
  500|    593|                        break;
  501|       |
  502|    857|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 857, False: 18.9k]
  ------------------
  503|  1.44k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 586, False: 19.1k]
  ------------------
  504|  1.44k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 666, False: 777]
  |  Branch (504:29): [True: 600, False: 843]
  |  Branch (504:45): [True: 600, False: 66]
  ------------------
  505|    600|                        {
  506|    600|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 261, False: 339]
  ------------------
  507|    261|                            {
  508|    261|                                return OpCode::MOVD;
  509|    261|                            }
  510|    339|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 273, False: 66]
  ------------------
  511|    273|                            {
  512|    273|                                return OpCode::MOVF;
  513|    273|                            }
  514|    600|                        }
  515|    843|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 747, False: 96]
  |  Branch (515:34): [True: 133, False: 710]
  |  Branch (515:50): [True: 679, False: 68]
  |  Branch (515:66): [True: 133, False: 546]
  ------------------
  516|    133|                        {
  517|    133|                            return OpCode::MULT;
  518|    133|                        }
  519|    776|                        break;
  520|       |
  521|  5.51k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 5.51k, False: 14.2k]
  ------------------
  522|  6.71k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 1.19k, False: 18.5k]
  ------------------
  523|  6.71k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 104, False: 6.61k]
  ------------------
  524|  6.71k|                        {
  525|    267|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 267, False: 6.44k]
  ------------------
  526|    814|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 547, False: 6.16k]
  ------------------
  527|    814|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 607, False: 207]
  ------------------
  528|    607|                                {
  529|    607|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 393, False: 214]
  ------------------
  530|    393|                                    {
  531|    393|                                        return OpCode::SEQI;
  532|    393|                                    }
  533|    214|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 133, False: 81]
  ------------------
  534|    133|                                    {
  535|    133|                                        return OpCode::SEQU;
  536|    133|                                    }
  537|    607|                                }
  538|    288|                                break;
  539|       |
  540|    914|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 914, False: 5.80k]
  ------------------
  541|  1.50k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 590, False: 6.12k]
  ------------------
  542|  1.50k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 847, False: 657]
  ------------------
  543|    847|                                {
  544|    847|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 132, False: 715]
  ------------------
  545|    132|                                    {
  546|    132|                                        return OpCode::SGEI;
  547|    132|                                    }
  548|    715|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 649, False: 66]
  ------------------
  549|    649|                                    {
  550|    649|                                        return OpCode::SGEU;
  551|    649|                                    }
  552|    847|                                }
  553|    657|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 591, False: 66]
  ------------------
  554|    591|                                {
  555|    591|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 264, False: 327]
  ------------------
  556|    264|                                    {
  557|    264|                                        return OpCode::SGTI;
  558|    264|                                    }
  559|    327|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 133, False: 194]
  ------------------
  560|    133|                                    {
  561|    133|                                        return OpCode::SGTU;
  562|    133|                                    }
  563|    591|                                }
  564|    326|                                break;
  565|       |
  566|    991|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 991, False: 5.72k]
  ------------------
  567|  1.66k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 669, False: 6.04k]
  ------------------
  568|  1.66k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 66, False: 1.59k]
  ------------------
  569|  1.66k|                                {
  570|    213|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 213, False: 1.44k]
  ------------------
  571|    326|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 113, False: 1.54k]
  ------------------
  572|    326|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 260, False: 66]
  ------------------
  573|    260|                                        {
  574|    260|                                            return OpCode::SLAI;
  575|    260|                                        }
  576|     66|                                        break;
  577|       |
  578|    327|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 327, False: 1.33k]
  ------------------
  579|    458|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 131, False: 1.52k]
  ------------------
  580|    458|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 260, False: 198]
  ------------------
  581|    260|                                        {
  582|    260|                                            return OpCode::SLEI;
  583|    260|                                        }
  584|    198|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 132, False: 66]
  ------------------
  585|    132|                                        {
  586|    132|                                            return OpCode::SLEU;
  587|    132|                                        }
  588|     66|                                        break;
  589|       |
  590|    212|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 212, False: 1.44k]
  ------------------
  591|    345|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 133, False: 1.52k]
  ------------------
  592|    345|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 276, False: 69]
  ------------------
  593|    276|                                        {
  594|    276|                                            return OpCode::SLLI;
  595|    276|                                        }
  596|     69|                                        break;
  597|       |
  598|    324|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 324, False: 1.33k]
  ------------------
  599|    465|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 141, False: 1.51k]
  ------------------
  600|    465|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 265, False: 200]
  ------------------
  601|    265|                                        {
  602|    265|                                            return OpCode::SLTI;
  603|    265|                                        }
  604|    200|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 134, False: 66]
  ------------------
  605|    134|                                        {
  606|    134|                                            return OpCode::SLTU;
  607|    134|                                        }
  608|     66|                                        break;
  609|  1.66k|                                }
  610|       |
  611|    755|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 422, False: 6.29k]
  ------------------
  612|  1.01k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 261, False: 6.45k]
  ------------------
  613|  1.01k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 748, False: 268]
  ------------------
  614|    748|                                {
  615|    748|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 294, False: 454]
  ------------------
  616|    294|                                    {
  617|    294|                                        return OpCode::SNEI;
  618|    294|                                    }
  619|    454|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 388, False: 66]
  ------------------
  620|    388|                                    {
  621|    388|                                        return OpCode::SNEU;
  622|    388|                                    }
  623|    748|                                }
  624|    334|                                break;
  625|       |
  626|    334|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 235, False: 6.48k]
  ------------------
  627|    436|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 201, False: 6.51k]
  ------------------
  628|    436|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 201, False: 235]
  |  Branch (628:37): [True: 134, False: 302]
  |  Branch (628:53): [True: 134, False: 67]
  ------------------
  629|    134|                                {
  630|    134|                                    return OpCode::SRAI;
  631|    134|                                }
  632|    302|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 228, False: 74]
  |  Branch (632:42): [True: 133, False: 169]
  |  Branch (632:58): [True: 133, False: 95]
  ------------------
  633|    133|                                {
  634|    133|                                    return OpCode::SRLI;
  635|    133|                                }
  636|    169|                                break;
  637|       |
  638|    757|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 757, False: 5.95k]
  ------------------
  639|  1.51k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 758, False: 5.95k]
  ------------------
  640|  1.51k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 1.30k, False: 207]
  ------------------
  641|  1.30k|                                {
  642|  1.30k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 288, False: 1.02k]
  ------------------
  643|  1.30k|                                    {
  644|     67|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 67, False: 1.24k]
  ------------------
  645|    133|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 66, False: 1.24k]
  ------------------
  646|    133|                                            return OpCode::SUBD;
  647|       |
  648|    196|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 196, False: 1.11k]
  ------------------
  649|    262|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 66, False: 1.24k]
  ------------------
  650|    262|                                            return OpCode::SUBF;
  651|       |
  652|    224|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 224, False: 1.08k]
  ------------------
  653|    290|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 66, False: 1.24k]
  ------------------
  654|    290|                                            return OpCode::SUBI;
  655|       |
  656|    269|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 269, False: 1.03k]
  ------------------
  657|    335|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 66, False: 1.24k]
  ------------------
  658|    335|                                            return OpCode::SUBU;
  659|  1.30k|                                    }
  660|  1.30k|                                }
  661|    495|                                break;
  662|  6.71k|                        }
  663|  1.71k|                        break;
  664|       |
  665|  1.71k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 745, False: 19.0k]
  ------------------
  666|    986|                    case 't':
  ------------------
  |  Branch (666:21): [True: 241, False: 19.5k]
  ------------------
  667|    986|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 919, False: 67]
  |  Branch (667:29): [True: 608, False: 378]
  |  Branch (667:45): [True: 845, False: 74]
  |  Branch (667:61): [True: 608, False: 237]
  ------------------
  668|    608|                        {
  669|    608|                            return OpCode::TRAP;
  670|    608|                        }
  671|    378|                        break;
  672|    378|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 298, False: 19.4k]
  ------------------
  673|    461|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 163, False: 19.5k]
  ------------------
  674|    461|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 393, False: 68]
  |  Branch (674:29): [True: 261, False: 200]
  |  Branch (674:45): [True: 327, False: 66]
  |  Branch (674:61): [True: 261, False: 66]
  ------------------
  675|    261|                        {
  676|    261|                            return OpCode::XORI;
  677|    261|                        }
  678|    200|                        break;
  679|  19.7k|                }
  680|  8.24k|                break;
  681|  19.7k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  8.24k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 3.48k, False: 59.6k]
  ------------------
  685|  3.48k|                const char c1 = token[0u];
  686|  3.48k|                const char c2 = token[1u];
  687|  3.48k|                const char c3 = token[2u];
  688|  3.48k|                const char c4 = token[3u];
  689|  3.48k|                const char c5 = token[4u];
  690|       |
  691|  3.48k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 857, False: 2.62k]
  ------------------
  692|  3.48k|                {
  693|    208|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 208, False: 3.27k]
  ------------------
  694|    208|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 0, False: 3.48k]
  ------------------
  695|    208|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 208, False: 0]
  |  Branch (695:29): [True: 208, False: 0]
  |  Branch (695:45): [True: 208, False: 0]
  |  Branch (695:61): [True: 208, False: 0]
  |  Branch (695:77): [True: 208, False: 0]
  ------------------
  696|    208|                        {
  697|    208|                            return OpCode::ADDUI;
  698|    208|                        }
  699|      0|                        break;
  700|       |
  701|    200|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 200, False: 3.28k]
  ------------------
  702|    200|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 0, False: 3.48k]
  ------------------
  703|    200|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 200, False: 0]
  |  Branch (703:29): [True: 200, False: 0]
  |  Branch (703:45): [True: 200, False: 0]
  |  Branch (703:61): [True: 200, False: 0]
  |  Branch (703:77): [True: 200, False: 0]
  ------------------
  704|    200|                        {
  705|    200|                            return OpCode::DIVUI;
  706|    200|                        }
  707|      0|                        break;
  708|       |
  709|    399|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 399, False: 3.08k]
  ------------------
  710|    399|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 0, False: 3.48k]
  ------------------
  711|    399|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 399, False: 0]
  |  Branch (711:29): [True: 399, False: 0]
  |  Branch (711:45): [True: 399, False: 0]
  |  Branch (711:61): [True: 399, False: 0]
  ------------------
  712|    399|                        {
  713|    399|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 0, False: 399]
  ------------------
  714|    399|                            {
  715|     66|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 66, False: 333]
  ------------------
  716|     66|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 0, False: 399]
  ------------------
  717|     66|                                    return OpCode::MULTD;
  718|       |
  719|    196|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 196, False: 203]
  ------------------
  720|    196|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 0, False: 399]
  ------------------
  721|    196|                                    return OpCode::MULTF;
  722|       |
  723|     71|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 71, False: 328]
  ------------------
  724|     71|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 0, False: 399]
  ------------------
  725|     71|                                    return OpCode::MULTI;
  726|       |
  727|     66|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 66, False: 333]
  ------------------
  728|     66|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 0, False: 399]
  ------------------
  729|     66|                                    return OpCode::MULTU;
  730|    399|                            }
  731|    399|                        }
  732|      0|                        break;
  733|       |
  734|  1.81k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 1.81k, False: 1.66k]
  ------------------
  735|  1.81k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 0, False: 3.48k]
  ------------------
  736|  1.81k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 0, False: 1.81k]
  ------------------
  737|  1.81k|                        {
  738|    516|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 516, False: 1.30k]
  ------------------
  739|    516|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 0, False: 1.81k]
  ------------------
  740|    516|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 516, False: 0]
  |  Branch (740:37): [True: 516, False: 0]
  |  Branch (740:53): [True: 516, False: 0]
  |  Branch (740:69): [True: 516, False: 0]
  ------------------
  741|    516|                                {
  742|    516|                                    return OpCode::SEQUI;
  743|    516|                                }
  744|      0|                                break;
  745|       |
  746|    767|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 767, False: 1.05k]
  ------------------
  747|    767|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 0, False: 1.81k]
  ------------------
  748|    767|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 292, False: 475]
  |  Branch (748:37): [True: 292, False: 475]
  |  Branch (748:53): [True: 292, False: 0]
  |  Branch (748:69): [True: 292, False: 0]
  ------------------
  749|    292|                                {
  750|    292|                                    return OpCode::SGEUI;
  751|    292|                                }
  752|    475|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 475, False: 0]
  |  Branch (752:42): [True: 475, False: 0]
  |  Branch (752:58): [True: 475, False: 0]
  |  Branch (752:74): [True: 475, False: 0]
  ------------------
  753|    475|                                {
  754|    475|                                    return OpCode::SGTUI;
  755|    475|                                }
  756|      0|                                break;
  757|       |
  758|    264|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 264, False: 1.55k]
  ------------------
  759|    264|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 0, False: 1.81k]
  ------------------
  760|    264|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 69, False: 195]
  |  Branch (760:37): [True: 69, False: 195]
  |  Branch (760:53): [True: 69, False: 0]
  |  Branch (760:69): [True: 69, False: 0]
  ------------------
  761|     69|                                {
  762|     69|                                    return OpCode::SLEUI;
  763|     69|                                }
  764|    195|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 195, False: 0]
  |  Branch (764:42): [True: 195, False: 0]
  |  Branch (764:58): [True: 195, False: 0]
  |  Branch (764:74): [True: 195, False: 0]
  ------------------
  765|    195|                                {
  766|    195|                                    return OpCode::SLTUI;
  767|    195|                                }
  768|      0|                                break;
  769|       |
  770|     66|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 66, False: 1.75k]
  ------------------
  771|     66|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 0, False: 1.81k]
  ------------------
  772|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 66, False: 0]
  |  Branch (772:37): [True: 66, False: 0]
  |  Branch (772:53): [True: 66, False: 0]
  |  Branch (772:69): [True: 66, False: 0]
  ------------------
  773|     66|                                {
  774|     66|                                    return OpCode::SNEUI;
  775|     66|                                }
  776|      0|                                break;
  777|       |
  778|    205|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 205, False: 1.61k]
  ------------------
  779|    205|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 0, False: 1.81k]
  ------------------
  780|    205|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 205, False: 0]
  |  Branch (780:37): [True: 205, False: 0]
  |  Branch (780:53): [True: 205, False: 0]
  |  Branch (780:69): [True: 205, False: 0]
  ------------------
  781|    205|                                {
  782|    205|                                    return OpCode::SUBUI;
  783|    205|                                }
  784|      0|                                break;
  785|  1.81k|                        }
  786|       |
  787|      0|                        break;
  788|  3.48k|                }
  789|       |
  790|    857|                break;
  791|  3.48k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|  1.18k|            case 6: {
  ------------------
  |  Branch (794:13): [True: 1.18k, False: 61.9k]
  ------------------
  795|  1.18k|                const char c1 = token[0u];
  796|  1.18k|                const char c2 = token[1u];
  797|  1.18k|                const char c3 = token[2u];
  798|  1.18k|                const char c4 = token[3u];
  799|  1.18k|                const char c5 = token[4u];
  800|  1.18k|                const char c6 = token[5u];
  801|       |
  802|  1.18k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 784, False: 404]
  |  Branch (802:21): [True: 784, False: 404]
  |  Branch (802:37): [True: 784, False: 0]
  |  Branch (802:53): [True: 784, False: 0]
  ------------------
  803|    784|                {
  804|    784|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 0, False: 784]
  ------------------
  805|    784|                    {
  806|    263|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 263, False: 521]
  ------------------
  807|    263|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 0, False: 784]
  ------------------
  808|    263|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 263, False: 0]
  ------------------
  809|    263|                            {
  810|    263|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 195, False: 68]
  ------------------
  811|    195|                                {
  812|    195|                                    return OpCode::CVTD2F;
  813|    195|                                }
  814|     68|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 68, False: 0]
  ------------------
  815|     68|                                {
  816|     68|                                    return OpCode::CVTD2I;
  817|     68|                                }
  818|    263|                            }
  819|      0|                            break;
  820|       |
  821|    260|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 260, False: 524]
  ------------------
  822|    260|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 0, False: 784]
  ------------------
  823|    260|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 260, False: 0]
  ------------------
  824|    260|                            {
  825|    260|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 66, False: 194]
  ------------------
  826|     66|                                {
  827|     66|                                    return OpCode::CVTF2D;
  828|     66|                                }
  829|    194|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 194, False: 0]
  ------------------
  830|    194|                                {
  831|    194|                                    return OpCode::CVTF2I;
  832|    194|                                }
  833|    260|                            }
  834|      0|                            break;
  835|       |
  836|    261|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 261, False: 523]
  ------------------
  837|    261|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 0, False: 784]
  ------------------
  838|    261|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 261, False: 0]
  ------------------
  839|    261|                            {
  840|    261|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 194, False: 67]
  ------------------
  841|    194|                                {
  842|    194|                                    return OpCode::CVTI2D;
  843|    194|                                }
  844|     67|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 67, False: 0]
  ------------------
  845|     67|                                {
  846|     67|                                    return OpCode::CVTI2F;
  847|     67|                                }
  848|    261|                            }
  849|    784|                    }
  850|    784|                }
  851|    404|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 194, False: 210]
  |  Branch (851:26): [True: 194, False: 210]
  |  Branch (851:42): [True: 194, False: 0]
  |  Branch (851:58): [True: 194, False: 0]
  |  Branch (851:74): [True: 194, False: 0]
  ------------------
  852|    404|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 194, False: 0]
  |  Branch (852:42): [True: 194, False: 0]
  ------------------
  853|    194|                {
  854|    194|                    return OpCode::MULTUI;
  855|    194|                }
  856|    210|                break;
  857|  1.18k|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|    281|            case 7: {
  ------------------
  |  Branch (860:13): [True: 281, False: 62.8k]
  ------------------
  861|    281|                const char c1 = token[0u];
  862|    281|                const char c2 = token[1u];
  863|    281|                const char c3 = token[2u];
  864|    281|                const char c4 = token[3u];
  865|    281|                const char c5 = token[4u];
  866|    281|                const char c6 = token[5u];
  867|    281|                const char c7 = token[6u];
  868|       |
  869|    281|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 169, False: 112]
  |  Branch (869:21): [True: 169, False: 112]
  |  Branch (869:37): [True: 169, False: 0]
  |  Branch (869:53): [True: 169, False: 0]
  ------------------
  870|    169|                {
  871|    169|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 83, False: 86]
  |  Branch (871:25): [True: 83, False: 86]
  |  Branch (871:41): [True: 83, False: 0]
  |  Branch (871:54): [True: 83, False: 0]
  |  Branch (871:70): [True: 83, False: 0]
  ------------------
  872|     83|                    {
  873|     83|                        return OpCode::MOVI2FP;
  874|     83|                    }
  875|     86|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 86, False: 0]
  |  Branch (875:25): [True: 86, False: 0]
  |  Branch (875:41): [True: 86, False: 0]
  |  Branch (875:57): [True: 86, False: 0]
  |  Branch (875:70): [True: 86, False: 0]
  ------------------
  876|     86|                    {
  877|     86|                        return OpCode::MOVFP2I;
  878|     86|                    }
  879|     86|                }
  880|    112|                break;
  881|    281|            }
  882|       |
  883|  6.21k|            default: {
  ------------------
  |  Branch (883:13): [True: 6.21k, False: 56.9k]
  ------------------
  884|  6.21k|                break;
  885|    281|            }
  886|  63.1k|        }
  887|       |
  888|       |        // None found
  889|  31.1k|        return OpCode::NONE;
  890|  63.1k|    }
_ZN3dlx3iceEcc:
   15|  85.9k|    {
   16|  85.9k|        constexpr const char diff = 'a' - 'A';
   17|  85.9k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 42.1k, False: 43.8k]
  |  Branch (17:28): [True: 17.8k, False: 26.0k]
  ------------------
   18|  85.9k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|  61.7k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|    868|    {
  187|    868|        ParseError err;
  188|       |
  189|    868|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|    868|        err.m_LineNumber                           = line_number;
  191|    868|        err.m_Column                               = column;
  192|    868|        err.unexpected_argument_type.expected_type = expected_type;
  193|    868|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|    868|        return err;
  196|    868|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|    868|    {
  202|    868|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|    868|                                                         token.GetColumn().unsafe(), expected_type,
  204|    868|                                                         actual_type);
  205|    868|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|    194|    {
  210|    194|        ParseError err;
  211|       |
  212|    194|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|    194|        err.m_LineNumber        = line_number;
  214|    194|        err.m_Column            = column;
  215|    194|        err.invalid_number.text = text;
  216|       |
  217|    194|        return err;
  218|    194|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|    194|    {
  222|    194|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|    194|                                                token.GetColumn().unsafe(), token.GetText());
  224|    194|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  15.5k|    {
  248|  15.5k|        ParseError err;
  249|       |
  250|  15.5k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  15.5k|        err.m_LineNumber                   = line_number;
  252|  15.5k|        err.m_Column                       = column;
  253|  15.5k|        err.unexpected_token.expected_type = expected_type;
  254|  15.5k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  15.5k|        return err;
  257|  15.5k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  15.5k|    {
  262|  15.5k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  15.5k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  15.5k|                                                  token.GetType());
  265|  15.5k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  1.90k|    {
  271|  1.90k|        ParseError err;
  272|       |
  273|  1.90k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  1.90k|        err.m_LineNumber                   = line_number;
  275|  1.90k|        err.m_Column                       = column;
  276|  1.90k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  1.90k|        return err;
  279|  1.90k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    211|    {
  283|    211|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    211|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    211|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  14.1k|    {
  291|  14.1k|        ParseError err;
  292|       |
  293|  14.1k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  14.1k|        err.m_LineNumber                        = line_number;
  295|  14.1k|        err.m_Column                            = column;
  296|  14.1k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  14.1k|        return err;
  299|  14.1k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  14.1k|    {
  303|  14.1k|        return ConstructInvalidLabelIdentifierParseError(
  304|  14.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  14.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  2.42k|    {
  313|  2.42k|        ParseError err;
  314|       |
  315|  2.42k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  2.42k|        err.m_LineNumber                     = line_number;
  317|  2.42k|        err.m_Column                         = column;
  318|  2.42k|        err.label_already_defined.label_name = label_name;
  319|  2.42k|        err.label_already_defined.at_line    = at_line;
  320|  2.42k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  2.42k|        return err;
  323|  2.42k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  2.42k|    {
  328|  2.42k|        return ConstructLabelAlreadyDefinedParseError(
  329|  2.42k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  2.42k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  2.42k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  15.3k|    {
  336|  15.3k|        ParseError err;
  337|       |
  338|  15.3k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  15.3k|        err.m_LineNumber = line_number;
  340|  15.3k|        err.m_Column     = column;
  341|       |
  342|  15.3k|        return err;
  343|  15.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  15.3k|    {
  347|  15.3k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  15.3k|                                                        token.GetColumn().unsafe());
  349|  15.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  8.56k|    {
  355|  8.56k|        ParseError err;
  356|       |
  357|  8.56k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  8.56k|        err.m_LineNumber               = line_number;
  359|  8.56k|        err.m_Column                   = column;
  360|  8.56k|        err.too_few_arguments.required = required;
  361|  8.56k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  8.56k|        return err;
  364|  8.56k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  8.56k|    {
  369|  8.56k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  8.56k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  8.56k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  2.40k|    {
  376|  2.40k|        ParseError err;
  377|       |
  378|  2.40k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  2.40k|        err.m_LineNumber           = line_number;
  380|  2.40k|        err.m_Column               = column;
  381|  2.40k|        err.empty_label.label_name = label_name;
  382|       |
  383|  2.40k|        return err;
  384|  2.40k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  2.40k|    {
  388|  2.40k|        return ConstructEmptyLabelParseError(
  389|  2.40k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  2.40k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 2.25k, False: 144]
  ------------------
  391|  2.25k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  2.40k|                        token.GetText());
  393|  2.40k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    337|    {
  398|    337|        ParseError err;
  399|       |
  400|    337|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    337|        err.m_LineNumber = line_number;
  402|    337|        err.m_Column     = column;
  403|       |
  404|    337|        return err;
  405|    337|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    337|    {
  409|    337|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    337|                                               token.GetColumn().unsafe());
  411|    337|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|  61.7k|    {
   17|  61.7k|        m_ParseErrors.emplace_back(phi::move(error));
   18|  61.7k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  3.31k|    {
  181|  3.31k|        ParsedProgram program;
  182|       |
  183|  3.31k|        program.m_Tokens = tokens;
  184|       |
  185|  3.31k|        phi::boolean line_has_instruction{false};
  186|  3.31k|        phi::usize   label_count{0u};
  187|       |
  188|   146k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 142k, False: 3.31k]
  ------------------
  189|   142k|        {
  190|   142k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   142k|            switch (current_token.GetType())
  195|   142k|            {
  196|       |                // Ignore comments
  197|  27.8k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 27.8k, False: 114k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  27.8k|                    break;
  200|       |
  201|  52.2k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 52.2k, False: 90.5k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  52.2k|                    line_has_instruction = false;
  204|  52.2k|                    break;
  205|       |
  206|  19.6k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 19.6k, False: 123k]
  ------------------
  207|  19.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 383, False: 19.2k]
  ------------------
  208|    383|                    {
  209|    383|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|    383|                                current_token, Token::Type::NewLine));
  211|    383|                        break;
  212|    383|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  19.2k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 10.9k, False: 8.29k]
  ------------------
  217|  10.9k|                    {
  218|  10.9k|                        program.AddParseError(
  219|  10.9k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  10.9k|                        break;
  221|  10.9k|                    }
  222|       |
  223|  8.29k|                    phi::string_view label_name = current_token.GetText();
  224|  8.29k|                    label_name.remove_suffix(1u);
  225|       |
  226|  8.29k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.69k, False: 6.59k]
  ------------------
  227|  1.69k|                    {
  228|  1.69k|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|  1.69k|                                current_token.GetLineNumber().unsafe(),
  230|  1.69k|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.69k|                        break;
  232|  1.69k|                    }
  233|       |
  234|  6.59k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 1.70k, False: 4.88k]
  ------------------
  235|  1.70k|                    {
  236|  1.70k|                        program.AddParseError(
  237|  1.70k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  1.70k|                        break;
  239|  1.70k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  4.88k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 2.42k, False: 2.46k]
  ------------------
  243|  2.42k|                    {
  244|       |                        // Find first defintions of label
  245|  2.42k|                        const Token* first_label_definition =
  246|  2.42k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.42k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  2.42k|                                    {
  249|  2.42k|                                        phi::string_view token_label_name = t.GetText();
  250|  2.42k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  2.42k|                                        if (token_label_name == label_name)
  253|  2.42k|                                        {
  254|  2.42k|                                            return true;
  255|  2.42k|                                        }
  256|  2.42k|                                    }
  257|       |
  258|  2.42k|                                    return false;
  259|  2.42k|                                });
  260|       |
  261|  2.42k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  2.42k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  2.42k|                                current_token, *first_label_definition));
  265|  2.42k|                        break;
  266|  2.42k|                    }
  267|       |
  268|  2.46k|                    program.m_JumpData[label_name] =
  269|  2.46k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  2.46k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  2.46k|                    break;
  276|  4.88k|                }
  277|       |
  278|  30.0k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 30.0k, False: 112k]
  ------------------
  279|  30.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 15.3k, False: 14.6k]
  ------------------
  280|  15.3k|                    {
  281|  15.3k|                        program.AddParseError(
  282|  15.3k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  15.3k|                        break;
  284|  15.3k|                    }
  285|       |
  286|  14.6k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  14.6k|                    PHI_ASSERT(current_token.HasHint());
  290|  14.6k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  14.6k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  14.6k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  14.6k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  14.6k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  14.6k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  14.6k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  14.6k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  14.6k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  20.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 19.4k, False: 1.24k]
  ------------------
  312|  19.4k|                    {
  313|       |                        // Get next token
  314|  19.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 133, False: 19.3k]
  ------------------
  315|    133|                        {
  316|    133|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    133|                                    current_token, number_of_argument_required.unsafe(),
  318|    133|                                    argument_num.unsafe()));
  319|    133|                            break;
  320|    133|                        }
  321|       |
  322|  19.3k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  19.3k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 3.61k, False: 15.7k]
  ------------------
  326|  3.61k|                        {
  327|  3.61k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 337, False: 3.27k]
  ------------------
  328|    337|                            {
  329|    337|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    337|                            }
  331|       |
  332|  3.61k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  3.61k|                            continue;
  335|  3.61k|                        }
  336|       |
  337|  15.7k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 8.42k, False: 7.30k]
  ------------------
  338|  8.42k|                        {
  339|  8.42k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  8.42k|                                    token, number_of_argument_required.unsafe(),
  341|  8.42k|                                    argument_num.unsafe()));
  342|  8.42k|                            break;
  343|  8.42k|                        }
  344|       |
  345|  7.30k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  7.30k|                                parse_instruction_argument(
  347|  7.30k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  7.30k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 4.83k, False: 2.47k]
  ------------------
  349|  4.83k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  4.83k|                            break;
  352|  4.83k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  2.47k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  2.47k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  2.47k|                        argument_num++;
  359|  2.47k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  2.47k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  14.6k|                    program.m_Instructions.emplace_back(instruction);
  367|  14.6k|                    line_has_instruction = true;
  368|  14.6k|                    break;
  369|  30.0k|                }
  370|       |
  371|  13.0k|                default:
  ------------------
  |  Branch (371:17): [True: 13.0k, False: 129k]
  ------------------
  372|  13.0k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  13.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 3.58k, False: 9.48k]
  ------------------
  374|  3.58k|                    {
  375|  3.58k|                        expected_token_type = Token::Type::NewLine;
  376|  3.58k|                    }
  377|       |
  378|  13.0k|                    program.AddParseError(
  379|  13.0k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  13.0k|                    break;
  381|   142k|            }
  382|   142k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  3.31k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 262, False: 3.05k]
  ------------------
  386|    262|        {
  387|  3.93k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 3.66k, False: 262]
  ------------------
  388|  3.66k|            {
  389|  3.66k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  3.66k|                const Token& token = *it;
  392|  3.66k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 2.40k, False: 1.26k]
  ------------------
  393|  2.40k|                {
  394|  2.40k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  2.40k|                    --label_count;
  396|  2.40k|                }
  397|  3.66k|            }
  398|    262|        }
  399|       |
  400|  3.31k|        return program;
  401|  3.31k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  3.31k|    {
  405|  3.31k|        TokenStream tokens = Tokenize(source);
  406|  3.31k|        return Parse(tokens);
  407|  3.31k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  7.30k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  7.30k|        switch (token.GetType())
   37|  7.30k|        {
   38|    522|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 522, False: 6.78k]
  ------------------
   39|    522|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 323, False: 199]
  ------------------
   40|    522|                                          ArgumentType::AddressDisplacement))
   41|    323|                {
   42|    323|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    323|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    323|                    return {};
   46|    323|                }
   47|       |
   48|       |                // Get address displacement
   49|    199|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    199|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    199|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 197]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    197|                auto         it           = tokens.current_position();
   61|    197|                const Token& first_token  = tokens.consume();
   62|    197|                const Token& second_token = tokens.consume();
   63|    197|                const Token& third_token  = tokens.consume();
   64|       |
   65|    197|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 197, False: 0]
  ------------------
   66|    197|                {
   67|    197|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    197|                            first_token, Token::Type::OpenBracket));
   69|    197|                    return {};
   70|    197|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  1.41k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 1.41k, False: 5.88k]
  ------------------
   97|  1.41k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 76, False: 1.34k]
  ------------------
   98|     76|                {
   99|     76|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|     76|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|     76|                    return {};
  102|     76|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  1.34k|                return ConstructInstructionArgumentRegisterInt(
  108|  1.34k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  1.41k|            }
  110|    138|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 138, False: 7.16k]
  ------------------
  111|    138|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 71, False: 67]
  ------------------
  112|     71|                {
  113|     71|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|     71|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|     71|                    return {};
  116|     71|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|     67|                return ConstructInstructionArgumentRegisterFloat(
  122|     67|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    138|            }
  124|    211|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 211, False: 7.09k]
  ------------------
  125|    211|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    211|                return {};
  128|    138|            }
  129|  2.55k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 2.55k, False: 4.75k]
  ------------------
  130|       |                // Parse as Label
  131|  2.55k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 203, False: 2.35k]
  ------------------
  132|    203|                {
  133|    203|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    203|                            token, expected_argument_type, ArgumentType::Label));
  135|    203|                    return {};
  136|    203|                }
  137|       |
  138|  2.35k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 2.35k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  2.35k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 1.50k, False: 849]
  ------------------
  145|  1.50k|                {
  146|  1.50k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  1.50k|                    return {};
  148|  1.50k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|    849|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  2.35k|            }
  154|    601|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 601, False: 6.70k]
  ------------------
  155|    601|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 195, False: 406]
  ------------------
  156|    195|                {
  157|    195|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    195|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    195|                    return {};
  160|    195|                }
  161|       |
  162|    406|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 212, False: 194]
  ------------------
  163|    212|                {
  164|    212|                    return ConstructInstructionArgumentImmediateValue(
  165|    212|                            static_cast<phi::int16_t>(token.GetHint()));
  166|    212|                }
  167|       |
  168|    194|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    194|                return {};
  170|    406|            }
  171|       |
  172|  1.85k|            default:
  ------------------
  |  Branch (172:13): [True: 1.85k, False: 5.44k]
  ------------------
  173|  1.85k|                program.AddParseError(
  174|  1.85k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  1.85k|                return {};
  176|  7.30k|        }
  177|  7.30k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  17.5k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  17.5k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 10.5k, False: 6.97k]
  ------------------
  248|  10.5k|                                    {
  249|  10.5k|                                        phi::string_view token_label_name = t.GetText();
  250|  10.5k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  10.5k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 2.42k, False: 8.16k]
  ------------------
  253|  2.42k|                                        {
  254|  2.42k|                                            return true;
  255|  2.42k|                                        }
  256|  10.5k|                                    }
  257|       |
  258|  15.1k|                                    return false;
  259|  17.5k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|    163|    {
  350|    163|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 0, False: 163]
  ------------------
  351|      0|        {
  352|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|      0|            return false;
  354|      0|        }
  355|       |
  356|    163|        m_CurrentProgram = &program;
  357|       |
  358|    163|        m_ProgramCounter               = 0u;
  359|    163|        m_Halted                       = false;
  360|    163|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    163|        m_LastRaisedException          = Exception::None;
  362|    163|        m_CurrentStepCount             = 0u;
  363|       |
  364|    163|        return true;
  365|    163|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|  67.6k|    {
   11|  67.6k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 11.6k, False: 55.9k]
  ------------------
   12|  11.6k|        {
   13|  11.6k|            const char first_char = token[0u];
   14|  11.6k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 1.34k, False: 10.3k]
  |  Branch (14:38): [True: 1.08k, False: 9.23k]
  ------------------
   15|  2.42k|            {
   16|  2.42k|                const char second_char = token[1u];
   17|  2.42k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 2.33k, False: 89]
  |  Branch (17:43): [True: 1.32k, False: 1.00k]
  ------------------
   18|  1.32k|                {
   19|  1.32k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  1.32k|                }
   21|  2.42k|            }
   22|  11.6k|        }
   23|  55.9k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 19.3k, False: 36.5k]
  ------------------
   24|  19.3k|        {
   25|  19.3k|            const char first_char = token[0u];
   26|  19.3k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 1.66k, False: 17.7k]
  |  Branch (26:38): [True: 785, False: 16.9k]
  ------------------
   27|  2.44k|            {
   28|  2.44k|                const char second_char = token[1u];
   29|  2.44k|                const char third_char  = token[2u];
   30|       |
   31|  2.44k|                switch (second_char)
   32|  2.44k|                {
   33|    761|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 761, False: 1.68k]
  ------------------
   34|    761|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 687, False: 74]
  |  Branch (34:50): [True: 492, False: 195]
  ------------------
   35|    492|                        {
   36|    492|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    492|                        }
   38|    269|                        break;
   39|    761|                    }
   40|  1.27k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 1.27k, False: 1.17k]
  ------------------
   41|  1.27k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 1.20k, False: 66]
  |  Branch (41:50): [True: 886, False: 322]
  ------------------
   42|    886|                        {
   43|    886|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    886|                        }
   45|    388|                        break;
   46|  1.27k|                    }
   47|    388|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 347, False: 2.10k]
  ------------------
   48|    347|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 66, False: 281]
  |  Branch (48:50): [True: 215, False: 66]
  ------------------
   49|    281|                        {
   50|    281|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    281|                        }
   52|     66|                        break;
   53|    347|                    }
   54|     67|                    default: {
  ------------------
  |  Branch (54:21): [True: 67, False: 2.38k]
  ------------------
   55|     67|                        break;
   56|    347|                    }
   57|  2.44k|                }
   58|  2.44k|            }
   59|  19.3k|        }
   60|       |
   61|  64.6k|        return IntRegisterID::None;
   62|  67.6k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  64.6k|    {
   66|  64.6k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 10.3k, False: 54.3k]
  ------------------
   67|  10.3k|        {
   68|  10.3k|            const char first_char = token[0u];
   69|  10.3k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 418, False: 9.91k]
  |  Branch (69:38): [True: 349, False: 9.56k]
  ------------------
   70|    767|            {
   71|    767|                const char second_char = token[1u];
   72|    767|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 693, False: 74]
  |  Branch (72:43): [True: 477, False: 216]
  ------------------
   73|    477|                {
   74|    477|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|    477|                }
   76|    767|            }
   77|  10.3k|        }
   78|  54.3k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 17.7k, False: 36.5k]
  ------------------
   79|  17.7k|        {
   80|  17.7k|            const char first_char = token[0u];
   81|  17.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 1.04k, False: 16.6k]
  |  Branch (81:38): [True: 699, False: 15.9k]
  ------------------
   82|  1.74k|            {
   83|  1.74k|                const char second_char = token[1u];
   84|  1.74k|                const char third_char  = token[2u];
   85|       |
   86|  1.74k|                switch (second_char)
   87|  1.74k|                {
   88|    530|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 530, False: 1.21k]
  ------------------
   89|    530|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 464, False: 66]
  |  Branch (89:50): [True: 380, False: 84]
  ------------------
   90|    380|                        {
   91|    380|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    380|                        }
   93|    150|                        break;
   94|    530|                    }
   95|    593|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 593, False: 1.14k]
  ------------------
   96|    593|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 399, False: 194]
  |  Branch (96:50): [True: 198, False: 201]
  ------------------
   97|    198|                        {
   98|    198|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|    198|                        }
  100|    395|                        break;
  101|    593|                    }
  102|    550|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 550, False: 1.19k]
  ------------------
  103|    550|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 241, False: 309]
  |  Branch (103:50): [True: 209, False: 100]
  ------------------
  104|    450|                        {
  105|    450|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    450|                        }
  107|    100|                        break;
  108|    550|                    }
  109|    100|                    default: {
  ------------------
  |  Branch (109:21): [True: 69, False: 1.67k]
  ------------------
  110|     69|                        break;
  111|    550|                    }
  112|  1.74k|                }
  113|  1.74k|            }
  114|  17.7k|        }
  115|       |
  116|  63.1k|        return FloatRegisterID::None;
  117|  64.6k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|  67.6k|    {
  121|  67.6k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 21.4k, False: 46.1k]
  ------------------
  122|  21.4k|        {
  123|  21.4k|            const char c1 = token[0u];
  124|  21.4k|            const char c2 = token[1u];
  125|  21.4k|            const char c3 = token[2u];
  126|  21.4k|            const char c4 = token[3u];
  127|       |
  128|  21.4k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 1.71k, False: 19.7k]
  |  Branch (128:34): [True: 293, False: 19.4k]
  |  Branch (128:49): [True: 1.68k, False: 321]
  |  Branch (128:62): [True: 255, False: 66]
  ------------------
  129|  21.4k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 1.68k, False: 260]
  |  Branch (129:34): [True: 66, False: 194]
  |  Branch (129:49): [True: 1.68k, False: 66]
  |  Branch (129:62): [True: 0, False: 66]
  ------------------
  130|  21.4k|        }
  131|       |
  132|  46.1k|        return false;
  133|  67.6k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   124k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  37.7k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   384k|    {
   40|   384k|        return m_Type;
   41|   384k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   282k|    {
   50|   282k|        return m_LineNumber;
   51|   282k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|   562k|    {
   55|   562k|        return m_Column;
   56|   562k|    }
_ZNK3dlx5Token9GetLengthEv:
   59|   397k|    {
   60|   397k|        return m_Text.length();
   61|   397k|    }
_ZNK3dlx5Token7GetTextEv:
   64|  67.7k|    {
   65|  67.7k|        return m_Text;
   66|  67.7k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  15.2k|    {
   79|  15.2k|        return m_HasHint;
   80|  15.2k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  16.4k|    {
   84|  16.4k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  16.4k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  16.4k|                   m_Type == Type::ImmediateInteger);
   87|  16.4k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  16.4k|        return m_Hint;
   90|  16.4k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  3.31k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  3.31k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  3.31k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    199|    {
   50|    199|        return x + m_Iterator <= m_Tokens.size();
   51|    199|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   165k|    {
   55|   165k|        return m_Iterator < m_Tokens.size();
   56|   165k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   162k|    {
   60|   162k|        return m_Iterator >= m_Tokens.size();
   61|   162k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   162k|    {
   75|   162k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   162k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   162k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    197|    {
  155|    197|        return m_Iterator;
  156|    197|    }
_ZNK3dlx11TokenStream5beginEv:
  168|  3.31k|    {
  169|       |#if defined(PHI_DEBUG)
  170|       |        //PHI_ASSERT(m_Finalized);
  171|       |#endif
  172|       |
  173|  3.31k|        return m_Tokens.begin();
  174|  3.31k|    }
_ZNK3dlx11TokenStream3endEv:
  186|  3.31k|    {
  187|       |#if defined(PHI_DEBUG)
  188|       |        //PHI_ASSERT(m_Finalized);
  189|       |#endif
  190|       |
  191|  3.31k|        return m_Tokens.end();
  192|  3.31k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    262|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    262|        return m_Tokens.rbegin();
  210|    262|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  3.66k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  3.66k|        return m_Tokens.rend();
  219|  3.66k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  3.31k|    {
   66|  3.31k|        TokenStream tokens;
   67|       |
   68|  3.31k|        phi::string_view current_token;
   69|       |
   70|  3.31k|        phi::u64 current_line_number{1u};
   71|  3.31k|        phi::u64 current_column{1u};
   72|  3.31k|        phi::u64 token_begin{0u};
   73|       |
   74|  3.31k|        phi::boolean parsing_comment{false};
   75|       |
   76|   380k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 377k, False: 3.31k]
  ------------------
   77|   377k|        {
   78|   377k|            const char c{source.at(i)};
   79|       |
   80|   377k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 61.0k, False: 316k]
  ------------------
   81|  61.0k|            {
   82|  61.0k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 9.82k, False: 51.2k]
  ------------------
   83|  9.82k|                {
   84|       |                    // Skip empty lines
   85|  9.82k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  9.82k|                                        current_line_number, current_column);
   87|       |
   88|  9.82k|                    parsing_comment = false;
   89|  9.82k|                    current_line_number += 1u;
   90|  9.82k|                    current_column = 1u;
   91|  9.82k|                    continue;
   92|  9.82k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  51.2k|                tokens.emplace_back(ParseToken(
   96|  51.2k|                        source.substring_view(
   97|  51.2k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  51.2k|                                current_token.length()),
   99|  51.2k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  51.2k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  51.2k|                                    current_line_number, current_column);
  103|       |
  104|  51.2k|                current_token   = phi::string_view{};
  105|  51.2k|                parsing_comment = false;
  106|  51.2k|                current_line_number += 1u;
  107|  51.2k|                current_column = 0u;
  108|  51.2k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   316k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 948, False: 315k]
  |  Branch (110:34): [True: 28.4k, False: 286k]
  ------------------
  111|  29.3k|            {
  112|  29.3k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 27.8k, False: 1.54k]
  ------------------
  113|  27.8k|                {
  114|  27.8k|                    token_begin = i;
  115|  27.8k|                }
  116|  1.54k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 1.02k, False: 524]
  ------------------
  117|  1.02k|                {
  118|  1.02k|                    tokens.emplace_back(ParseToken(
  119|  1.02k|                            source.substring_view(
  120|  1.02k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  1.02k|                                    current_token.length()),
  122|  1.02k|                            current_line_number, current_column - current_token.length()));
  123|  1.02k|                    token_begin   = i;
  124|  1.02k|                    current_token = phi::string_view{};
  125|  1.02k|                }
  126|       |
  127|  29.3k|                parsing_comment = true;
  128|  29.3k|                current_token   = source.substring_view(
  129|  29.3k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  29.3k|                        current_token.length() + 1u);
  131|  29.3k|            }
  132|   286k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 30.6k, False: 256k]
  ------------------
  133|  30.6k|            {
  134|       |                // simply append the character
  135|  30.6k|                current_token = source.substring_view(
  136|  30.6k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  30.6k|                        current_token.length() + 1u);
  138|  30.6k|            }
  139|   256k|            else
  140|   256k|            {
  141|       |                // Not parsing a comment
  142|   256k|                switch (c)
  143|   256k|                {
  144|  20.5k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 20.5k, False: 235k]
  ------------------
  145|  20.9k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 353, False: 255k]
  ------------------
  146|  20.9k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 256k]
  ------------------
  147|  20.9k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 113, False: 20.8k]
  ------------------
  148|    113|                        {
  149|    113|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    113|                            continue;
  152|    113|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  20.8k|                        tokens.emplace_back(ParseToken(
  156|  20.8k|                                source.substring_view(
  157|  20.8k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  20.8k|                                        current_token.length()),
  159|  20.8k|                                current_line_number, current_column - current_token.length()));
  160|  20.8k|                        current_token = phi::string_view{};
  161|  20.8k|                        break;
  162|  9.26k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 9.26k, False: 247k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  9.26k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 8.58k, False: 676]
  ------------------
  165|  8.58k|                        {
  166|  8.58k|                            current_token = source.substring_view(
  167|  8.58k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  8.58k|                                    current_token.length() + 1u);
  169|  8.58k|                            tokens.emplace_back(ParseToken(
  170|  8.58k|                                    source.substring_view(
  171|  8.58k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  8.58k|                                                    token_begin),
  173|  8.58k|                                            current_token.length()),
  174|  8.58k|                                    current_line_number,
  175|  8.58k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  8.58k|                            current_token = phi::string_view{};
  178|  8.58k|                        }
  179|    676|                        else
  180|    676|                        {
  181|       |                            // Orphan colon
  182|    676|                            token_begin = i;
  183|       |
  184|    676|                            tokens.emplace_back(
  185|    676|                                    Token::Type::Colon,
  186|    676|                                    source.substring_view(
  187|    676|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|    676|                                                    token_begin),
  189|    676|                                            1u),
  190|    676|                                    current_line_number, current_column);
  191|    676|                        }
  192|  9.26k|                        break;
  193|  8.62k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 8.62k, False: 247k]
  ------------------
  194|  9.20k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 582, False: 255k]
  ------------------
  195|  9.61k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 409, False: 255k]
  ------------------
  196|  9.61k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 8.44k, False: 1.17k]
  ------------------
  197|  8.44k|                        {
  198|  8.44k|                            tokens.emplace_back(ParseToken(
  199|  8.44k|                                    source.substring_view(
  200|  8.44k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  8.44k|                                                    token_begin),
  202|  8.44k|                                            current_token.length()),
  203|  8.44k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  8.44k|                            current_token = phi::string_view{};
  206|  8.44k|                        }
  207|       |
  208|  9.61k|                        Token::Type type;
  209|  9.61k|                        switch (c)
  210|  9.61k|                        {
  211|  8.62k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 8.62k, False: 991]
  ------------------
  212|  8.62k|                                type = Token::Type::Comma;
  213|  8.62k|                                break;
  214|    582|                            case '(':
  ------------------
  |  Branch (214:29): [True: 582, False: 9.03k]
  ------------------
  215|    582|                                type = Token::Type::OpenBracket;
  216|    582|                                break;
  217|    409|                            case ')':
  ------------------
  |  Branch (217:29): [True: 409, False: 9.20k]
  ------------------
  218|    409|                                type = Token::Type::ClosingBracket;
  219|    409|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 9.61k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  9.61k|#endif
  225|  9.61k|                        }
  226|       |
  227|  9.61k|                        token_begin = i;
  228|       |
  229|  9.61k|                        tokens.emplace_back(
  230|  9.61k|                                type,
  231|  9.61k|                                source.substring_view(
  232|  9.61k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  9.61k|                                        1u),
  234|  9.61k|                                current_line_number, current_column);
  235|  9.61k|                        break;
  236|       |
  237|   216k|                    default:
  ------------------
  |  Branch (237:21): [True: 216k, False: 39.8k]
  ------------------
  238|   216k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 62.4k, False: 154k]
  ------------------
  239|  62.4k|                        {
  240|  62.4k|                            token_begin = i;
  241|  62.4k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   216k|                        current_token = source.substring_view(
  245|   216k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   216k|                                current_token.length() + 1u);
  247|   256k|                }
  248|   256k|            }
  249|       |
  250|   367k|            current_column += 1u;
  251|   367k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  3.31k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 1.18k, False: 2.12k]
  ------------------
  255|  1.18k|        {
  256|  1.18k|            tokens.emplace_back(
  257|  1.18k|                    ParseToken(source.substring_view(
  258|  1.18k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  1.18k|                                       current_token.length()),
  260|  1.18k|                               current_line_number, current_column - current_token.length()));
  261|  1.18k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  3.31k|        tokens.finalize();
  265|       |
  266|  3.31k|        return tokens;
  267|  3.31k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  91.3k|    {
   14|  91.3k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 1.67k, False: 89.6k]
  |  Branch (14:13): [True: 1.38k, False: 89.9k]
  |  Branch (14:36): [True: 1.38k, False: 291]
  ------------------
   15|  1.38k|        {
   16|  1.38k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  1.38k|            if (number)
  ------------------
  |  Branch (18:17): [True: 552, False: 832]
  ------------------
   19|    552|            {
   20|    552|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|    552|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|    552|            }
   23|       |
   24|    832|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  1.38k|        }
   26|       |
   27|  89.9k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 477, False: 89.4k]
  |  Branch (27:13): [True: 28.8k, False: 61.1k]
  |  Branch (27:36): [True: 28.3k, False: 61.1k]
  ------------------
   28|  28.8k|        {
   29|  28.8k|            return {Token::Type::Comment, token, line_number, column};
   30|  28.8k|        }
   31|       |
   32|  61.1k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 2.43k, False: 58.6k]
  ------------------
   33|  2.43k|        {
   34|  2.43k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  2.43k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  2.43k|        }
   37|       |
   38|  58.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 1.68k, False: 56.9k]
  ------------------
   39|  1.68k|        {
   40|  1.68k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  1.68k|        }
   42|       |
   43|  56.9k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 2.49k, False: 54.4k]
  ------------------
   44|  2.49k|        {
   45|  2.49k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  2.49k|                    static_cast<phi::uint32_t>(id)};
   47|  2.49k|        }
   48|       |
   49|  54.4k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 1.43k, False: 53.0k]
  ------------------
   50|  1.43k|        {
   51|  1.43k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  1.43k|                    static_cast<phi::uint32_t>(id)};
   53|  1.43k|        }
   54|       |
   55|  53.0k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 30.8k, False: 22.2k]
  ------------------
   56|  30.8k|        {
   57|  30.8k|            return {Token::Type::OpCode, token, line_number, column,
   58|  30.8k|                    static_cast<phi::uint32_t>(opcode)};
   59|  30.8k|        }
   60|       |
   61|  22.2k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  53.0k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   58|  3.31k|    {
   59|       |        // Constants
   60|  3.31k|        constexpr phi::uint8_t number_of_opcodes =
   61|  3.31k|                static_cast<phi::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   62|  3.31k|        constexpr phi::uint8_t number_of_int_registers   = 32;
   63|  3.31k|        constexpr phi::uint8_t number_of_float_registers = 32;
   64|       |
   65|  3.31k|        std::string ret;
   66|       |
   67|  72.6k|        for (phi::size_t index{0}; index < size;)
  ------------------
  |  Branch (67:36): [True: 69.3k, False: 3.29k]
  ------------------
   68|  69.3k|        {
   69|  69.3k|            phi::uint8_t current_value = data[index++];
   70|       |
   71|  69.3k|            switch (current_value)
   72|  69.3k|            {
   73|       |                // OpCode
   74|  21.4k|                case 0: {
  ------------------
  |  Branch (74:17): [True: 21.4k, False: 47.8k]
  ------------------
   75|       |                    // Has one more value
   76|  21.4k|                    if (index < size)
  ------------------
  |  Branch (76:25): [True: 21.4k, False: 3]
  ------------------
   77|  21.4k|                    {
   78|  21.4k|                        phi::uint8_t opcode_value = data[index++] % number_of_opcodes;
   79|       |
   80|  21.4k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   81|       |
   82|  21.4k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (82:29): [True: 2, False: 21.4k]
  ------------------
   83|      2|                        {
   84|      2|                            return detail::ErrorString;
   85|      2|                        }
   86|  21.4k|                    }
   87|  21.4k|                    break;
   88|  21.4k|                }
   89|       |
   90|       |                // Int Register
   91|  21.4k|                case 1: {
  ------------------
  |  Branch (91:17): [True: 3.06k, False: 66.2k]
  ------------------
   92|       |                    // Has one more value
   93|  3.06k|                    if (index < size)
  ------------------
  |  Branch (93:25): [True: 3.06k, False: 3]
  ------------------
   94|  3.06k|                    {
   95|  3.06k|                        phi::uint8_t opcode_value = data[index++] % number_of_int_registers;
   96|       |
   97|  3.06k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   98|  3.06k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (98:29): [True: 1, False: 3.05k]
  ------------------
   99|      1|                        {
  100|      1|                            return detail::ErrorString;
  101|      1|                        }
  102|  3.06k|                    }
  103|  3.06k|                    break;
  104|  3.06k|                }
  105|       |
  106|       |                // Float register
  107|  3.06k|                case 2: {
  ------------------
  |  Branch (107:17): [True: 1.44k, False: 67.9k]
  ------------------
  108|       |                    // Has one more value
  109|  1.44k|                    if (index < size)
  ------------------
  |  Branch (109:25): [True: 1.44k, False: 1]
  ------------------
  110|  1.44k|                    {
  111|  1.44k|                        phi::uint8_t opcode_value = data[index++] % number_of_float_registers;
  112|       |
  113|  1.44k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  114|  1.44k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (114:29): [True: 1, False: 1.44k]
  ------------------
  115|      1|                        {
  116|      1|                            return detail::ErrorString;
  117|      1|                        }
  118|  1.44k|                    }
  119|  1.44k|                    break;
  120|  1.44k|                }
  121|       |
  122|       |                // Floating point status register
  123|  2.05k|                case 3: {
  ------------------
  |  Branch (123:17): [True: 2.05k, False: 67.2k]
  ------------------
  124|  2.05k|                    ret += "FPSR";
  125|  2.05k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (125:25): [True: 2, False: 2.05k]
  ------------------
  126|      2|                    {
  127|      2|                        return detail::ErrorString;
  128|      2|                    }
  129|       |
  130|  2.05k|                    break;
  131|  2.05k|                }
  132|       |
  133|       |                // Immediate integer
  134|  2.30k|                case 4: {
  ------------------
  |  Branch (134:17): [True: 2.30k, False: 67.0k]
  ------------------
  135|  2.30k|                    ret += "#";
  136|  2.30k|                    [[fallthrough]];
  137|  2.30k|                }
  138|       |
  139|       |                // Integer literal
  140|  5.03k|                case 5: {
  ------------------
  |  Branch (140:17): [True: 2.73k, False: 66.6k]
  ------------------
  141|  5.03k|                    phi::size_t size_of_int = std::min(2ul, size - index);
  142|       |
  143|  5.03k|                    if (size_of_int > 0)
  ------------------
  |  Branch (143:25): [True: 4.99k, False: 43]
  ------------------
  144|  4.99k|                    {
  145|  4.99k|                        phi::int16_t value = 0;
  146|       |
  147|  14.9k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (147:32): [True: 9.94k, False: 4.99k]
  ------------------
  148|  9.94k|                        {
  149|  9.94k|                            value <<= 8;
  150|  9.94k|                            value &= data[index++];
  151|  9.94k|                        }
  152|       |
  153|  4.99k|                        ret += std::to_string(value);
  154|  4.99k|                    }
  155|  5.03k|                    break;
  156|  2.30k|                }
  157|       |
  158|       |                // Label
  159|  3.55k|                case 6: {
  ------------------
  |  Branch (159:17): [True: 3.55k, False: 65.7k]
  ------------------
  160|  3.55k|                    phi::size_t label_length = std::min(5ul, size - index);
  161|       |
  162|  3.55k|                    if (label_length > 0)
  ------------------
  |  Branch (162:25): [True: 3.55k, False: 1]
  ------------------
  163|  3.55k|                    {
  164|  3.55k|                        std::string label_name = "lbl_";
  165|       |
  166|  21.1k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (166:32): [True: 17.5k, False: 3.55k]
  ------------------
  167|  17.5k|                        {
  168|  17.5k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  169|       |
  170|  17.5k|                            label_name += c;
  171|  17.5k|                        }
  172|       |
  173|       |                        // Add 1 in 10 chance to add a colon
  174|  3.55k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (174:29): [True: 3.48k, False: 73]
  |  Branch (174:45): [True: 3.15k, False: 330]
  ------------------
  175|  3.15k|                        {
  176|  3.15k|                            label_name += ':';
  177|  3.15k|                            ret += label_name;
  178|  3.15k|                        }
  179|    403|                        else
  180|    403|                        {
  181|    403|                            ret += label_name;
  182|    403|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (182:33): [True: 5, False: 398]
  ------------------
  183|      5|                            {
  184|      5|                                return detail::ErrorString;
  185|      5|                            }
  186|    403|                        }
  187|  3.55k|                    }
  188|  3.55k|                    break;
  189|  3.55k|                }
  190|       |
  191|       |                // Newline
  192|  4.73k|                case 7: {
  ------------------
  |  Branch (192:17): [True: 4.73k, False: 64.6k]
  ------------------
  193|  4.73k|                    ret += '\n';
  194|  4.73k|                    break;
  195|  3.55k|                }
  196|       |
  197|       |                // Comment
  198|  27.9k|                case 8: {
  ------------------
  |  Branch (198:17): [True: 27.9k, False: 41.3k]
  ------------------
  199|  27.9k|                    phi::size_t comment_length = std::min(5ul, size - index);
  200|       |
  201|  27.9k|                    if (comment_length > 0)
  ------------------
  |  Branch (201:25): [True: 27.9k, False: 10]
  ------------------
  202|  27.9k|                    {
  203|  27.9k|                        std::string comment = "; ";
  204|       |
  205|   166k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (205:32): [True: 138k, False: 27.9k]
  ------------------
  206|   138k|                        {
  207|   138k|                            comment += static_cast<char>(data[index++]);
  208|   138k|                        }
  209|       |
  210|  27.9k|                        ret += comment + '\n';
  211|  27.9k|                    }
  212|  27.9k|                    break;
  213|  3.55k|                }
  214|       |
  215|       |                // Ignore
  216|      5|                default:
  ------------------
  |  Branch (216:17): [True: 5, False: 69.3k]
  ------------------
  217|      5|                    return detail::ErrorString;
  218|  69.3k|            }
  219|  69.3k|        }
  220|       |
  221|  3.29k|        return ret;
  222|  3.31k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   23|  28.4k|        {
   24|  28.4k|            if (index < size)
  ------------------
  |  Branch (24:17): [True: 27.3k, False: 1.09k]
  ------------------
   25|  27.3k|            {
   26|  27.3k|                phi::uint8_t val = data[index++];
   27|  27.3k|                if (val == 0)
  ------------------
  |  Branch (27:21): [True: 20.5k, False: 6.82k]
  ------------------
   28|  20.5k|                {
   29|  20.5k|                    text += ' ';
   30|  20.5k|                }
   31|  6.82k|                else if (val == 1)
  ------------------
  |  Branch (31:26): [True: 6.81k, False: 11]
  ------------------
   32|  6.81k|                {
   33|  6.81k|                    text += ',';
   34|  6.81k|                }
   35|     11|                else
   36|     11|                {
   37|     11|                    return false;
   38|     11|                }
   39|  27.3k|            }
   40|       |
   41|  28.4k|            return true;
   42|  28.4k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   47|  17.5k|        {
   48|  17.5k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (48:17): [True: 12.8k, False: 4.77k]
  ------------------
   49|  12.8k|            {
   50|  12.8k|                return '_';
   51|  12.8k|            }
   52|       |
   53|  4.77k|            return c;
   54|  17.5k|        }

LLVMFuzzerTestOneInput:
   10|  3.31k|{
   11|  3.31k|    static dlxemu::Emulator emu;
   12|       |
   13|  3.31k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   14|       |
   15|  3.31k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   16|       |
   17|       |    // Parse it
   18|  3.31k|    editor.SetText(source);
   19|  3.31k|    editor.m_FullText = editor.GetText();
   20|       |
   21|  3.31k|    emu.ParseProgram(editor.m_FullText);
   22|       |
   23|  3.31k|    editor.ColorizeInternal();
   24|       |
   25|  3.31k|    return 0;
   26|  3.31k|}


_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  69.5k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  13.9k|    {
  240|  13.9k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 10.0k, False: 3.83k]
  ------------------
  241|  10.0k|        {
  242|  10.0k|            return m_Line < other.m_Line;
  243|  10.0k|        }
  244|       |
  245|  3.83k|        return m_Column <= other.m_Column;
  246|  13.9k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  9.98M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  13.9k|    {
  349|  13.9k|        m_ErrorMarkers.clear();
  350|  13.9k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  13.9k|    {
  414|  13.9k|        m_Breakpoints.clear();
  415|  13.9k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  13.9k|    {
  494|  13.9k|        m_Lines.clear();
  495|  13.9k|        ResetState();
  496|  13.9k|        m_Lines.emplace_back(Line());
  497|       |
  498|  13.9k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 12.7M, False: 13.9k]
  ------------------
  499|  12.7M|        {
  500|  12.7M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 38.4k, False: 12.7M]
  |  Branch (500:17): [True: 918k, False: 11.8M]
  ------------------
  501|  12.7M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 2.73M, False: 9.96M]
  |  Branch (501:48): [True: 902k, False: 1.83M]
  |  Branch (501:69): [True: 879k, False: 23.1k]
  ------------------
  502|   918k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   918k|            }
  505|  11.8M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.83M, False: 9.98M]
  ------------------
  506|  1.83M|            {
  507|  1.83M|                m_Lines.emplace_back(Line());
  508|  1.83M|            }
  509|  9.98M|            else
  510|  9.98M|            {
  511|  9.98M|                m_Lines.back().emplace_back(
  512|  9.98M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  9.98M|            }
  514|  12.7M|        }
  515|       |
  516|  13.9k|        m_TextChanged = true;
  517|  13.9k|        m_ScrollToTop = true;
  518|       |
  519|  13.9k|        m_UndoBuffer.clear();
  520|  13.9k|        m_UndoIndex = 0u;
  521|       |
  522|  13.9k|        Colorize();
  523|  13.9k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  13.9k|    {
  527|  13.9k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  13.9k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  13.9k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  13.9k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  13.9k|        const phi::u32 to_line =
 1724|  13.9k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 13.9k, False: 0]
  ------------------
 1725|  13.9k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  13.9k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  13.9k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  13.9k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  13.9k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  13.9k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  13.9k|    {
 1839|  13.9k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  13.9k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  13.9k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  13.9k|        std::string result;
 1844|       |
 1845|  13.9k|        phi::u32   lstart = start.m_Line;
 1846|  13.9k|        phi::u32   lend   = end.m_Line;
 1847|  13.9k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  13.9k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  13.9k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  13.9k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.86M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.84M, False: 13.9k]
  ------------------
 1853|  1.84M|        {
 1854|  1.84M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.84M|            size += m_Lines[i.unsafe()].size();
 1856|  1.84M|        }
 1857|       |
 1858|  13.9k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  11.8M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 4.61M, False: 7.22M]
  |  Branch (1860:16): [True: 11.8M, False: 13.9k]
  |  Branch (1860:33): [True: 7.20M, False: 13.9k]
  ------------------
 1861|  11.8M|        {
 1862|  11.8M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  11.8M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  11.8M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 9.98M, False: 1.83M]
  ------------------
 1866|  9.98M|            {
 1867|  9.98M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  9.98M|                istart++;
 1869|  9.98M|            }
 1870|  1.83M|            else
 1871|  1.83M|            {
 1872|  1.83M|                istart = 0u;
 1873|  1.83M|                ++lstart;
 1874|       |
 1875|  1.83M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.83M, False: 0]
  ------------------
 1876|  1.83M|                {
 1877|  1.83M|                    result += '\n';
 1878|  1.83M|                }
 1879|  1.83M|            }
 1880|  11.8M|        }
 1881|       |
 1882|  13.9k|        return result;
 1883|  13.9k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  27.8k|    {
 2422|  27.8k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  27.8k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  27.8k|        phi::u32    index = 0u;
 2426|  2.72M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 2.71M, False: 16.9k]
  |  Branch (2426:35): [True: 2.70M, False: 27.8k]
  |  Branch (2426:58): [True: 2.70M, False: 10.8k]
  ------------------
 2427|  2.70M|        {
 2428|  2.70M|            PHI_ASSERT(index < line.size());
 2429|  2.70M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  2.70M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 2.70M]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|  2.70M|            else
 2436|  2.70M|            {
 2437|  2.70M|                ++column;
 2438|  2.70M|            }
 2439|       |
 2440|  2.70M|            index += UTF8CharLength(character);
 2441|  2.70M|        }
 2442|       |
 2443|  27.8k|        return index;
 2444|  27.8k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  13.9k|    {
 2494|  13.9k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 13.9k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  13.9k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  13.9k|        phi::u32    col  = 0u;
 2501|       |
 2502|  2.71M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 2.70M, False: 13.9k]
  ------------------
 2503|  2.70M|        {
 2504|  2.70M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  2.70M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 2.70M]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|  2.70M|            else
 2510|  2.70M|            {
 2511|  2.70M|                col++;
 2512|  2.70M|            }
 2513|       |
 2514|  2.70M|            i += UTF8CharLength(character);
 2515|  2.70M|        }
 2516|       |
 2517|  13.9k|        return col;
 2518|  13.9k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  13.9k|    {
 2522|  13.9k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  13.9k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  13.9k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  5.16M|    {
 3661|  5.16M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  5.16M|        switch (token.GetType())
 3665|  5.16M|        {
 3666|   789k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 789k, False: 4.37M]
  ------------------
 3667|   789k|                palette_index = PaletteIndex::Comment;
 3668|   789k|                break;
 3669|  75.0k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 75.0k, False: 5.09M]
  ------------------
 3670|   142k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 67.2k, False: 5.10M]
  ------------------
 3671|   142k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|   142k|                break;
 3673|  1.05M|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 1.05M, False: 4.11M]
  ------------------
 3674|  1.05M|                palette_index = PaletteIndex::OpCode;
 3675|  1.05M|                break;
 3676|  67.4k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 67.4k, False: 5.10M]
  ------------------
 3677|   263k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 196k, False: 4.97M]
  ------------------
 3678|   336k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 73.1k, False: 5.09M]
  ------------------
 3679|   336k|                palette_index = PaletteIndex::Register;
 3680|   336k|                break;
 3681|  1.83M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.83M, False: 3.33M]
  ------------------
 3682|  1.83M|                return;
 3683|  1.01M|            default:
  ------------------
  |  Branch (3683:13): [True: 1.01M, False: 4.15M]
  ------------------
 3684|  1.01M|                break;
 3685|  5.16M|        }
 3686|       |
 3687|  3.33M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  3.33M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  3.33M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  12.3M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 9.01M, False: 3.33M]
  ------------------
 3692|  9.01M|        {
 3693|  9.01M|            PHI_ASSERT(index < line.size());
 3694|  9.01M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  9.01M|        }
 3696|  3.33M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  13.9k|    {
 3700|  13.9k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  13.9k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 5.16M, False: 13.9k]
  ------------------
 3703|  5.16M|        {
 3704|  5.16M|            ColorizeToken(token);
 3705|  5.16M|        }
 3706|  13.9k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  13.9k|    {
 3710|  13.9k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  13.9k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  13.9k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  13.9k|        ClearBreakPoints();
 3716|  13.9k|        ClearErrorMarkers();
 3717|  13.9k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  2.70M|{
  135|  2.70M|    return UTF8CharLength(static_cast<char>(characater));
  136|  2.70M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  5.40M|{
  105|  5.40M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 5.40M]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|  5.40M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 5.40M]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|  5.40M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 5.40M]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|  5.40M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 5.40M]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|  5.40M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 5.40M]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|  5.40M|    return 1_u8;
  131|  5.40M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  173|  13.9k|    {
  174|  13.9k|        return m_DLXProgram;
  175|  13.9k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  178|  13.9k|    {
  179|  13.9k|        m_DLXProgram = dlx::Parser::Parse(source);
  180|       |
  181|  13.9k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (181:13): [True: 456, False: 13.4k]
  ------------------
  182|    456|        {
  183|    456|            m_Processor.LoadProgram(m_DLXProgram);
  184|    456|        }
  185|  13.9k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  198|  13.9k|    {
  199|  13.9k|        return m_CodeEditor;
  200|  13.9k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.39M|        {
  169|  1.39M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.39M|            switch (index.unsafe())
  172|  1.39M|            {
  173|   602k|                case 0:
  ------------------
  |  Branch (173:17): [True: 602k, False: 788k]
  ------------------
  174|   602k|                    return m_Arg1Type;
  175|       |
  176|   408k|                case 1:
  ------------------
  |  Branch (176:17): [True: 408k, False: 981k]
  ------------------
  177|   408k|                    return m_Arg2Type;
  178|       |
  179|   379k|                case 2:
  ------------------
  |  Branch (179:17): [True: 379k, False: 1.01M]
  ------------------
  180|   379k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.39M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.39M|#endif
  187|  1.39M|            }
  188|  1.39M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   360k|        {
  195|   360k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   360k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 360k, False: 184]
  ------------------
  199|   360k|            {
  200|   360k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   360k|            }
  202|   360k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 269k, False: 91.4k]
  ------------------
  203|   269k|            {
  204|   269k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   269k|            }
  206|   360k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 181k, False: 179k]
  ------------------
  207|   181k|            {
  208|   181k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   181k|            }
  210|       |
  211|   360k|            return number_of_argument_required;
  212|   360k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   360k|        {
  221|   360k|            return m_Executor;
  222|   360k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   169k|    {
   38|   169k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   169k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   169k|                                         static_cast<underlying_t>(rhs));
   42|   169k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   169k|    {
   55|   169k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   169k|        return static_cast<underlying_t>(type & test) != 0;
   58|   169k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  204|   930k|    {
  205|   930k|        switch (value)
  206|   930k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   172k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|   172k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 172k, False: 758k]
  |  |  |  |  ------------------
  |  |  |  |  209|   172k|        return #name;
  |  |  ------------------
  |  |   16|   172k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  17.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.2k, False: 913k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.2k|        return #name;
  |  |  ------------------
  |  |   17|  36.1k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  36.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 36.1k, False: 894k]
  |  |  |  |  ------------------
  |  |  |  |  209|  36.1k|        return #name;
  |  |  ------------------
  |  |   18|  42.4k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  42.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 42.4k, False: 888k]
  |  |  |  |  ------------------
  |  |  |  |  209|  42.4k|        return #name;
  |  |  ------------------
  |  |   19|  42.4k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  15.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.3k, False: 915k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.3k|        return #name;
  |  |  ------------------
  |  |   20|  16.6k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  16.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.6k, False: 914k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.6k|        return #name;
  |  |  ------------------
  |  |   21|  16.6k|                                                                                                   \
  |  |   22|  16.6k|    /* Sub */                                                                                      \
  |  |   23|  16.6k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.34k, False: 923k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.34k|        return #name;
  |  |  ------------------
  |  |   24|  24.3k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  24.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 24.3k, False: 906k]
  |  |  |  |  ------------------
  |  |  |  |  209|  24.3k|        return #name;
  |  |  ------------------
  |  |   25|  24.3k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.76k, False: 927k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.76k|        return #name;
  |  |  ------------------
  |  |   26|  10.5k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.5k, False: 920k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.5k|        return #name;
  |  |  ------------------
  |  |   27|  10.5k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.72k, False: 924k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.72k|        return #name;
  |  |  ------------------
  |  |   28|  6.72k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    133|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 133, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    133|        return #name;
  |  |  ------------------
  |  |   29|    133|                                                                                                   \
  |  |   30|    133|    /* Multiplication */                                                                           \
  |  |   31|    133|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |   32|    137|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    137|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 137, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    137|        return #name;
  |  |  ------------------
  |  |   33|    202|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 202, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    202|        return #name;
  |  |  ------------------
  |  |   34|  17.3k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  17.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.3k, False: 913k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.3k|        return #name;
  |  |  ------------------
  |  |   35|  19.5k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  19.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 19.5k, False: 911k]
  |  |  |  |  ------------------
  |  |  |  |  209|  19.5k|        return #name;
  |  |  ------------------
  |  |   36|  19.5k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    219|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 219, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    219|        return #name;
  |  |  ------------------
  |  |   37|    219|                                                                                                   \
  |  |   38|    219|    /* Division */                                                                                 \
  |  |   39|  12.9k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  12.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.9k, False: 918k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.9k|        return #name;
  |  |  ------------------
  |  |   40|  12.9k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.21k, False: 928k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.21k|        return #name;
  |  |  ------------------
  |  |   41|  6.30k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.30k, False: 924k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.30k|        return #name;
  |  |  ------------------
  |  |   42|  20.5k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  20.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.5k, False: 910k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.5k|        return #name;
  |  |  ------------------
  |  |   43|  20.5k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   44|  9.00k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.00k, False: 921k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.00k|        return #name;
  |  |  ------------------
  |  |   45|  9.00k|                                                                                                   \
  |  |   46|  9.00k|    /* Shift left (logical) */                                                                     \
  |  |   47|  9.00k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.17k, False: 926k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.17k|        return #name;
  |  |  ------------------
  |  |   48|  5.05k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.05k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.05k|        return #name;
  |  |  ------------------
  |  |   49|  5.05k|                                                                                                   \
  |  |   50|  5.05k|    /* Shift right (logical) */                                                                    \
  |  |   51|  5.05k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 128, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    128|        return #name;
  |  |  ------------------
  |  |   52|    264|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    264|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 264, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    264|        return #name;
  |  |  ------------------
  |  |   53|    264|                                                                                                   \
  |  |   54|    264|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  22.8k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  22.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.8k, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.8k|        return #name;
  |  |  ------------------
  |  |   56|  22.8k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.00k, False: 928k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.00k|        return #name;
  |  |  ------------------
  |  |   57|  2.00k|                                                                                                   \
  |  |   58|  2.00k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  14.8k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  14.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.8k, False: 916k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.8k|        return #name;
  |  |  ------------------
  |  |   60|  14.8k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    446|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 446, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    446|        return #name;
  |  |  ------------------
  |  |   61|    446|                                                                                                   \
  |  |   62|    446|    /* Logic */                                                                                    \
  |  |   63|    446|                                                                                                   \
  |  |   64|    446|    /* And */                                                                                      \
  |  |   65|  6.20k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  6.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.20k, False: 924k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.20k|        return #name;
  |  |  ------------------
  |  |   66|  6.20k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    945|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 945, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    945|        return #name;
  |  |  ------------------
  |  |   67|    945|                                                                                                   \
  |  |   68|    945|    /* Or */                                                                                       \
  |  |   69|  1.86k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.86k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.86k|        return #name;
  |  |  ------------------
  |  |   70|  1.86k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 89, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     89|        return #name;
  |  |  ------------------
  |  |   71|     89|                                                                                                   \
  |  |   72|     89|    /* XOR */                                                                                      \
  |  |   73|  3.69k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.69k, False: 927k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.69k|        return #name;
  |  |  ------------------
  |  |   74|  3.69k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|    180|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    180|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 180, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    180|        return #name;
  |  |  ------------------
  |  |   80|  3.42k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.42k, False: 927k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.42k|        return #name;
  |  |  ------------------
  |  |   81|  3.42k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |   82|  20.1k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  20.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.1k, False: 910k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.1k|        return #name;
  |  |  ------------------
  |  |   83|  20.1k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    251|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 251, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    251|        return #name;
  |  |  ------------------
  |  |   84|    353|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    353|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 353, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    353|        return #name;
  |  |  ------------------
  |  |   85|    353|                                                                                                   \
  |  |   86|    353|    /* Greater than */                                                                             \
  |  |   87|    419|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    419|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 419, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    419|        return #name;
  |  |  ------------------
  |  |   88|  3.74k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.74k, False: 927k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.74k|        return #name;
  |  |  ------------------
  |  |   89|  3.74k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 74, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     74|        return #name;
  |  |  ------------------
  |  |   90|  10.6k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.6k, False: 920k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.6k|        return #name;
  |  |  ------------------
  |  |   91|  13.6k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.6k, False: 917k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.6k|        return #name;
  |  |  ------------------
  |  |   92|  13.6k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.42k, False: 926k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.42k|        return #name;
  |  |  ------------------
  |  |   93|  4.42k|                                                                                                   \
  |  |   94|  4.42k|    /* Less than or equal */                                                                       \
  |  |   95|  13.9k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.9k, False: 917k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.9k|        return #name;
  |  |  ------------------
  |  |   96|  22.4k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  22.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.4k, False: 908k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.4k|        return #name;
  |  |  ------------------
  |  |   97|  22.4k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.44k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.44k|        return #name;
  |  |  ------------------
  |  |   98|  1.44k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    808|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 808, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    808|        return #name;
  |  |  ------------------
  |  |   99|  4.51k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.51k, False: 926k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.51k|        return #name;
  |  |  ------------------
  |  |  100|  4.51k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.09k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.09k|        return #name;
  |  |  ------------------
  |  |  101|  1.09k|                                                                                                   \
  |  |  102|  1.09k|    /* Greater than or equal */                                                                    \
  |  |  103|  1.09k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    309|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 309, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    309|        return #name;
  |  |  ------------------
  |  |  104|    319|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    319|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 319, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    319|        return #name;
  |  |  ------------------
  |  |  105|  16.9k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  16.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.9k, False: 914k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.9k|        return #name;
  |  |  ------------------
  |  |  106|  16.9k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  15.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.7k, False: 915k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.7k|        return #name;
  |  |  ------------------
  |  |  107|  15.7k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  108|  26.8k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  26.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 26.8k, False: 904k]
  |  |  |  |  ------------------
  |  |  |  |  209|  26.8k|        return #name;
  |  |  ------------------
  |  |  109|  26.8k|                                                                                                   \
  |  |  110|  26.8k|    /* Equal */                                                                                    \
  |  |  111|  26.8k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 194, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    194|        return #name;
  |  |  ------------------
  |  |  112|  3.54k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.54k, False: 927k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.54k|        return #name;
  |  |  ------------------
  |  |  113|  3.54k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.15k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.15k|        return #name;
  |  |  ------------------
  |  |  114|  27.2k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  27.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 27.2k, False: 903k]
  |  |  |  |  ------------------
  |  |  |  |  209|  27.2k|        return #name;
  |  |  ------------------
  |  |  115|  27.2k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    367|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 367, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    367|        return #name;
  |  |  ------------------
  |  |  116|    367|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  117|     67|                                                                                                   \
  |  |  118|     67|    /* Not equal */                                                                                \
  |  |  119|    210|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 210, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    210|        return #name;
  |  |  ------------------
  |  |  120|  1.27k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.27k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.27k|        return #name;
  |  |  ------------------
  |  |  121|  12.0k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  12.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.0k, False: 918k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.0k|        return #name;
  |  |  ------------------
  |  |  122|  12.0k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  123|     78|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |  124|     79|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  125|     79|                                                                                                   \
  |  |  126|     79|    /* Conditional branching */                                                                    \
  |  |  127|     79|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|  10.0k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  10.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.0k, False: 920k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.0k|        return #name;
  |  |  ------------------
  |  |  129|  55.6k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  55.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 55.6k, False: 875k]
  |  |  |  |  ------------------
  |  |  |  |  209|  55.6k|        return #name;
  |  |  ------------------
  |  |  130|  55.6k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  28.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 28.4k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  209|  28.4k|        return #name;
  |  |  ------------------
  |  |  131|  28.4k|                                                                                                   \
  |  |  132|  28.4k|    /* Unconditional branching */                                                                  \
  |  |  133|  28.4k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  134|    101|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     84|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  136|     99|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  137|     99|                                                                                                   \
  |  |  138|     99|    /* Loading data */                                                                             \
  |  |  139|     99|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  140|  7.31k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  7.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.31k, False: 923k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.31k|        return #name;
  |  |  ------------------
  |  |  141|  7.31k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    119|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 119, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    119|        return #name;
  |  |  ------------------
  |  |  142|  13.0k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  13.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.0k, False: 917k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.0k|        return #name;
  |  |  ------------------
  |  |  143|  13.0k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |  144|    222|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    222|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 222, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    222|        return #name;
  |  |  ------------------
  |  |  145|    222|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|  12.7k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  12.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.7k, False: 918k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.7k|        return #name;
  |  |  ------------------
  |  |  148|  12.7k|                                                                                                   \
  |  |  149|  12.7k|    /* Storing data */                                                                             \
  |  |  150|  12.7k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    173|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 173, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    173|        return #name;
  |  |  ------------------
  |  |  151|  7.43k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.43k, False: 923k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.43k|        return #name;
  |  |  ------------------
  |  |  152|  27.0k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  27.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 27.0k, False: 903k]
  |  |  |  |  ------------------
  |  |  |  |  209|  27.0k|        return #name;
  |  |  ------------------
  |  |  153|  27.0k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  14.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.0k, False: 916k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.0k|        return #name;
  |  |  ------------------
  |  |  154|  14.0k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|    167|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    167|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 167, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    167|        return #name;
  |  |  ------------------
  |  |  156|    167|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 128, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    128|        return #name;
  |  |  ------------------
  |  |  157|    962|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    962|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 962, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    962|        return #name;
  |  |  ------------------
  |  |  158|    962|                                                                                                   \
  |  |  159|    962|    /* Moving data */                                                                              \
  |  |  160|  18.5k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  18.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 18.5k, False: 912k]
  |  |  |  |  ------------------
  |  |  |  |  209|  18.5k|        return #name;
  |  |  ------------------
  |  |  161|  18.5k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    290|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 290, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    290|        return #name;
  |  |  ------------------
  |  |  162|    290|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    121|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 121, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    121|        return #name;
  |  |  ------------------
  |  |  163|    121|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|    794|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    794|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 794, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    794|        return #name;
  |  |  ------------------
  |  |  167|  1.77k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.77k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.77k|        return #name;
  |  |  ------------------
  |  |  168|  1.77k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.22k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.22k|        return #name;
  |  |  ------------------
  |  |  169|  1.22k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    940|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 940, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    940|        return #name;
  |  |  ------------------
  |  |  170|    940|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    137|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 137, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    137|        return #name;
  |  |  ------------------
  |  |  171|  13.2k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  13.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.2k, False: 917k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.2k|        return #name;
  |  |  ------------------
  |  |  172|  13.2k|                                                                                                   \
  |  |  173|  13.2k|    /* Other */                                                                                    \
  |  |  174|  13.2k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    523|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 523, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|    523|        return #name;
  |  |  ------------------
  |  |  175|    523|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 930k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  176|  1.75k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  1.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.75k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.75k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 930k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   930k|        }
  218|   930k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|   243k|    {
   31|   243k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 25.9k, False: 217k]
  ------------------
   32|  25.9k|        {
   33|  25.9k|            return true;
   34|  25.9k|        }
   35|       |
   36|   217k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 217k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|   217k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.88k, False: 215k]
  ------------------
   42|  1.88k|        {
   43|  1.88k|            return true;
   44|  1.88k|        }
   45|       |
   46|   215k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 215k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|   215k|        return false;
   52|   215k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   215k|    {
   56|   215k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 215k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   215k|        const char first_char = token.at(0u);
   62|       |
   63|   215k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 89.3k, False: 126k]
  ------------------
   64|  89.3k|        {
   65|  89.3k|            return phi::is_alpha(first_char);
   66|  89.3k|        }
   67|       |
   68|   126k|        phi::boolean just_under_scores = (first_char == '_');
   69|   126k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 24.4k, False: 101k]
  |  Branch (69:13): [True: 24.3k, False: 102k]
  |  Branch (69:43): [True: 24.3k, False: 180]
  ------------------
   70|  24.3k|        {
   71|  24.3k|            return false;
   72|  24.3k|        }
   73|       |
   74|   373k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 288k, False: 84.5k]
  ------------------
   75|   288k|        {
   76|   288k|            const char c{token.at(index)};
   77|       |
   78|   288k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 158k, False: 130k]
  ------------------
   79|   158k|            {
   80|   158k|                just_under_scores = false;
   81|   158k|            }
   82|   130k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 113k, False: 17.5k]
  ------------------
   83|   113k|            {
   84|   113k|                continue;
   85|   113k|            }
   86|  17.5k|            else
   87|  17.5k|            {
   88|  17.5k|                return false;
   89|  17.5k|            }
   90|   288k|        }
   91|       |
   92|  84.5k|        return !just_under_scores;
   93|   102k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  2.10M|    {
  100|  2.10M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 2.10M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  2.10M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 209k, False: 1.89M]
  ------------------
  106|   209k|        {
  107|   209k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 99.9k, False: 109k]
  ------------------
  108|  99.9k|            {
  109|  99.9k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  99.9k|            }
  111|       |
  112|   109k|            return {};
  113|   209k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  1.89M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 18.3k, False: 1.87M]
  ------------------
  117|  18.3k|        {
  118|  18.3k|            return {};
  119|  18.3k|        }
  120|       |
  121|  1.87M|        std::int32_t number{0};
  122|  1.87M|        phi::boolean is_negative{false};
  123|  1.87M|        phi::boolean starts_with_zero{false};
  124|  1.87M|        phi::boolean parsing_binary{false};
  125|  1.87M|        phi::boolean parsing_octal{false};
  126|  1.87M|        phi::boolean parsing_hexadecimal{false};
  127|  1.87M|        phi::boolean parsed_something{false};
  128|  1.87M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  2.05M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 2.02M, False: 26.3k]
  ------------------
  133|  2.02M|        {
  134|  2.02M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  2.02M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 1.87M, False: 150k]
  ------------------
  138|  1.87M|            {
  139|  1.87M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 1.60k, False: 1.87M]
  ------------------
  140|  1.60k|                {
  141|  1.60k|                    continue;
  142|  1.60k|                }
  143|       |
  144|  1.87M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 32.2k, False: 1.84M]
  ------------------
  145|  32.2k|                {
  146|  32.2k|                    is_negative = true;
  147|  32.2k|                    continue;
  148|  32.2k|                }
  149|       |
  150|  1.84M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 81.2k, False: 1.76M]
  ------------------
  151|  81.2k|                {
  152|  81.2k|                    starts_with_zero = true;
  153|  81.2k|                    continue;
  154|  81.2k|                }
  155|       |
  156|  1.76M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 245, False: 1.76M]
  ------------------
  157|    245|                {
  158|    245|                    return {};
  159|    245|                }
  160|  1.76M|            }
  161|       |
  162|       |            // Second character
  163|  1.91M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 117k, False: 1.79M]
  ------------------
  164|   117k|            {
  165|   117k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 81.2k, False: 36.4k]
  ------------------
  166|  81.2k|                {
  167|       |                    // Binary
  168|  81.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 1.81k, False: 79.4k]
  |  Branch (168:37): [True: 4.28k, False: 75.1k]
  ------------------
  169|  6.09k|                    {
  170|  6.09k|                        parsing_binary = true;
  171|  6.09k|                        continue;
  172|  6.09k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  75.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 14.6k, False: 60.5k]
  |  Branch (175:37): [True: 1.49k, False: 59.0k]
  ------------------
  176|  16.1k|                    {
  177|  16.1k|                        parsing_hexadecimal = true;
  178|  16.1k|                        continue;
  179|  16.1k|                    }
  180|       |
  181|       |                    // Octal
  182|  59.0k|                    parsing_octal = true;
  183|  59.0k|                }
  184|   117k|            }
  185|       |
  186|       |            // Handle seperators
  187|  1.89M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 142, False: 1.89M]
  ------------------
  188|    142|            {
  189|    142|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 69, False: 73]
  ------------------
  190|     69|                {
  191|     69|                    return {};
  192|     69|                }
  193|       |
  194|     73|                parsed_separator = true;
  195|     73|                continue;
  196|    142|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  1.89M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 32.2k, False: 1.85M]
  |  Branch (199:32): [True: 0, False: 32.2k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  1.89M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 1.85M, False: 32.2k]
  |  Branch (204:17): [True: 0, False: 1.89M]
  |  Branch (204:33): [True: 0, False: 1.85M]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  1.89M|            parsed_separator = false;
  211|  1.89M|            parsed_something = true;
  212|       |
  213|  1.89M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 4.42k, False: 1.88M]
  ------------------
  214|  4.42k|            {
  215|  4.42k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 4.29k, False: 135]
  ------------------
  216|  4.29k|                {
  217|  4.29k|                    return {};
  218|  4.29k|                }
  219|       |
  220|    135|                number <<= 1;
  221|    135|                number |= (c - '0');
  222|    135|            }
  223|  1.88M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 68.8k, False: 1.81M]
  ------------------
  224|  68.8k|            {
  225|  68.8k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 52.4k, False: 16.4k]
  ------------------
  226|  52.4k|                {
  227|  52.4k|                    return {};
  228|  52.4k|                }
  229|       |
  230|  16.4k|                number <<= 3;
  231|  16.4k|                number |= (c - '0');
  232|  16.4k|            }
  233|  1.81M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 16.4k, False: 1.80M]
  ------------------
  234|  16.4k|            {
  235|  16.4k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 1.59k, False: 14.8k]
  ------------------
  236|  1.59k|                {
  237|  1.59k|                    return {};
  238|  1.59k|                }
  239|       |
  240|  14.8k|                number <<= 4;
  241|  14.8k|                number |= phi::hex_digit_value(c).unsafe();
  242|  14.8k|            }
  243|  1.80M|            else
  244|  1.80M|            {
  245|  1.80M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 1.76M, False: 35.5k]
  ------------------
  246|  1.76M|                {
  247|  1.76M|                    return {};
  248|  1.76M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  35.5k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 33.1k, False: 2.37k]
  |  Branch (251:36): [True: 27.9k, False: 5.25k]
  ------------------
  252|  27.9k|                {
  253|  27.9k|                    return {};
  254|  27.9k|                }
  255|       |
  256|  7.63k|                number *= 10;
  257|  7.63k|                number += (c - '0');
  258|  7.63k|            }
  259|  1.89M|        }
  260|       |
  261|  26.3k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 24.5k, False: 1.79k]
  ------------------
  262|  24.5k|        {
  263|       |            // Check for over/underflow
  264|  24.5k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 2.59k, False: 21.9k]
  |  Branch (264:32): [True: 0, False: 2.59k]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  24.5k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 21.9k, False: 2.59k]
  |  Branch (269:17): [True: 0, False: 24.5k]
  |  Branch (269:33): [True: 0, False: 21.9k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  24.5k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.59k, False: 21.9k]
  ------------------
  276|  2.59k|            {
  277|  2.59k|                return static_cast<std::int16_t>(-number);
  278|  2.59k|            }
  279|       |
  280|  21.9k|            return static_cast<std::int16_t>(number);
  281|  24.5k|        }
  282|       |
  283|  1.79k|        return {};
  284|  26.3k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   95|   209k|    {
   96|   209k|        switch (value)
   97|   209k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  40.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  40.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 40.4k, False: 168k]
  |  |  |  |  ------------------
  |  |  |  |  100|  40.4k|        return #name;
  |  |  ------------------
  |  |   14|  68.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  68.8k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 68.8k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|  68.8k|        return #name;
  |  |  ------------------
  |  |   15|  68.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    317|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 317, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    317|        return #name;
  |  |  ------------------
  |  |   16|  6.15k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.15k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.15k, False: 203k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.15k|        return #name;
  |  |  ------------------
  |  |   17|  6.15k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    127|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 127, False: 209k]
  |  |  |  |  ------------------
  |  |  |  |  100|    127|        return #name;
  |  |  ------------------
  |  |   18|    243|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    243|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 243, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    243|        return #name;
  |  |  ------------------
  |  |   19|    977|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    977|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 977, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    977|        return #name;
  |  |  ------------------
  |  |   20|  1.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.04k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.04k, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.04k|        return #name;
  |  |  ------------------
  |  |   21|  13.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  13.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13.3k, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  100|  13.3k|        return #name;
  |  |  ------------------
  |  |   22|  13.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.59k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.59k, False: 205k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.59k|        return #name;
  |  |  ------------------
  |  |   23|  3.59k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    694|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 694, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    694|        return #name;
  |  |  ------------------
  |  |   24|    694|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    281|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 281, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    281|        return #name;
  |  |  ------------------
  |  |   25|    281|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     71|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 71, False: 209k]
  |  |  |  |  ------------------
  |  |  |  |  100|     71|        return #name;
  |  |  ------------------
  |  |   26|     71|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 209k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   27|    267|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    267|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 267, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    267|        return #name;
  |  |  ------------------
  |  |   28|    344|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    344|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 344, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    344|        return #name;
  |  |  ------------------
  |  |   29|    970|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    970|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 970, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    970|        return #name;
  |  |  ------------------
  |  |   30|  15.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  15.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15.5k, False: 193k]
  |  |  |  |  ------------------
  |  |  |  |  100|  15.5k|        return #name;
  |  |  ------------------
  |  |   31|  15.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    343|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 343, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    343|        return #name;
  |  |  ------------------
  |  |   32|    770|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    770|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 770, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    770|        return #name;
  |  |  ------------------
  |  |   33|  1.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.85k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.85k, False: 207k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.85k|        return #name;
  |  |  ------------------
  |  |   34|  1.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.04k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.04k, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.04k|        return #name;
  |  |  ------------------
  |  |   35|  5.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.17k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.17k, False: 203k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.17k|        return #name;
  |  |  ------------------
  |  |   36|  5.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    746|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 746, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    746|        return #name;
  |  |  ------------------
  |  |   37|  11.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  11.1k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11.1k, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|  11.1k|        return #name;
  |  |  ------------------
  |  |   38|  11.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    745|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 745, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    745|        return #name;
  |  |  ------------------
  |  |   39|    745|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     81|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 81, False: 209k]
  |  |  |  |  ------------------
  |  |  |  |  100|     81|        return #name;
  |  |  ------------------
  |  |   40|  14.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  14.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 14.7k, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  100|  14.7k|        return #name;
  |  |  ------------------
  |  |   41|  14.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|    614|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 614, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    614|        return #name;
  |  |  ------------------
  |  |   42|    929|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    929|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 929, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    929|        return #name;
  |  |  ------------------
  |  |   43|    929|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    240|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 240, False: 208k]
  |  |  |  |  ------------------
  |  |  |  |  100|    240|        return #name;
  |  |  ------------------
  |  |   44|  17.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  17.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 17.3k, False: 191k]
  |  |  |  |  ------------------
  |  |  |  |  100|  17.3k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 209k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   209k|        }
  109|   209k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  130|  73.6k|    {
  131|  73.6k|        switch (value)
  132|  73.6k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.28k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.28k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.28k, False: 70.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.28k|        return #name;
  |  |  ------------------
  |  |   48|  7.32k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  7.32k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7.32k, False: 66.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  7.32k|        return #name;
  |  |  ------------------
  |  |   49|  18.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  18.4k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18.4k, False: 55.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  18.4k|        return #name;
  |  |  ------------------
  |  |   50|  18.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|    855|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 855, False: 72.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    855|        return #name;
  |  |  ------------------
  |  |   51|    855|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     60|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 60, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     60|        return #name;
  |  |  ------------------
  |  |   52|    363|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|    363|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 363, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    363|        return #name;
  |  |  ------------------
  |  |   53|    363|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   54|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   55|  2.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.01k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.01k, False: 71.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.01k|        return #name;
  |  |  ------------------
  |  |   56|  2.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   57|  19.0k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  19.0k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19.0k, False: 54.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  19.0k|        return #name;
  |  |  ------------------
  |  |   58|  19.0k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|  1.60k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.60k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.60k, False: 72.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.60k|        return #name;
  |  |  ------------------
  |  |   60|  1.60k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|    421|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 421, False: 73.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    421|        return #name;
  |  |  ------------------
  |  |   61|    421|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    267|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 267, False: 73.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    267|        return #name;
  |  |  ------------------
  |  |   62|    267|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   63|    483|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    483|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 483, False: 73.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    483|        return #name;
  |  |  ------------------
  |  |   64|    483|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|    153|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|    153|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 153, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    153|        return #name;
  |  |  ------------------
  |  |   67|    153|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   68|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|    166|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 166, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    166|        return #name;
  |  |  ------------------
  |  |   71|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     65|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 65, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     65|        return #name;
  |  |  ------------------
  |  |   73|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     58|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     58|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 58, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     58|        return #name;
  |  |  ------------------
  |  |   75|     58|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   76|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   77|  18.8k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  18.8k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18.8k, False: 54.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  18.8k|        return #name;
  |  |  ------------------
  |  |   78|  18.8k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    127|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 127, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    127|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 73.6k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  73.6k|        }
  144|  73.6k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   131k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   131k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.25M, False: 0]
  ------------------
   64|  2.25M|            {
   65|  2.25M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 131k, False: 2.12M]
  ------------------
   66|   131k|                {
   67|   131k|                    return &token;
   68|   131k|                }
   69|  2.25M|            }
   70|       |
   71|      0|            return nullptr;
   72|   131k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.85M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.85M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.85M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.89M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.89M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.89M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   419k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   419k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   419k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   360k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  95.9k|    {
   25|  95.9k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  95.9k|        switch (argument_number.unsafe())
   28|  95.9k|        {
   29|  76.5k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 76.5k, False: 19.3k]
  ------------------
   30|  76.5k|                m_Arg1 = argument;
   31|  76.5k|                break;
   32|  18.7k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 18.7k, False: 77.1k]
  ------------------
   33|  18.7k|                m_Arg2 = argument;
   34|  18.7k|                break;
   35|    590|            case 2u:
  ------------------
  |  Branch (35:13): [True: 590, False: 95.3k]
  ------------------
   36|    590|                m_Arg3 = argument;
   37|    590|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 95.9k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  95.9k|#endif
   42|  95.9k|        }
   43|  95.9k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.17M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  47.9k|    {
  171|  47.9k|        InstructionArgument arg;
  172|  47.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  47.9k|        arg.register_int.register_id = id;
  174|  47.9k|        return arg;
  175|  47.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    178|    {
  179|    178|        InstructionArgument arg;
  180|    178|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    178|        arg.register_float.register_id = id;
  182|    178|        return arg;
  183|    178|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  19.8k|    {
  187|  19.8k|        InstructionArgument arg;
  188|  19.8k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  19.8k|        arg.immediate_value.signed_value = value;
  190|  19.8k|        return arg;
  191|  19.8k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  27.9k|    {
  205|  27.9k|        InstructionArgument arg;
  206|  27.9k|        arg.m_Type           = ArgumentType::Label;
  207|  27.9k|        arg.label.label_name = label_name;
  208|  27.9k|        return arg;
  209|  27.9k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   360k|    {
  453|   360k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   360k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  1.84M|    {
   24|  1.84M|        switch (token.length().unsafe())
   25|  1.84M|        {
   26|       |            // 1 character OpCodes
   27|   199k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 199k, False: 1.64M]
  ------------------
   28|   199k|                const char c1 = token[0u];
   29|       |
   30|   199k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 42.5k, False: 156k]
  ------------------
   31|  42.5k|                {
   32|  42.5k|                    return OpCode::J;
   33|  42.5k|                }
   34|   156k|                break;
   35|   199k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   344k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 344k, False: 1.49M]
  ------------------
   39|   344k|                const char c1 = token[0u];
   40|   344k|                const char c2 = token[1u];
   41|       |
   42|   344k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 131k, False: 213k]
  ------------------
   43|   344k|                {
   44|    131|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 131, False: 344k]
  ------------------
   45|    902|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 771, False: 344k]
  ------------------
   46|    902|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 133, False: 769]
  ------------------
   47|    133|                        {
   48|    133|                            return OpCode::JR;
   49|    133|                        }
   50|    769|                        break;
   51|       |
   52|  33.7k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 33.7k, False: 311k]
  ------------------
   53|  44.1k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 10.4k, False: 334k]
  ------------------
   54|  44.1k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 1.42k, False: 42.6k]
  ------------------
   55|  44.1k|                        {
   56|  7.31k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 7.31k, False: 36.7k]
  ------------------
   57|  10.7k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 3.39k, False: 40.7k]
  ------------------
   58|  10.7k|                                return OpCode::LB;
   59|  12.7k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 12.7k, False: 31.3k]
  ------------------
   60|  12.8k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 130, False: 43.9k]
  ------------------
   61|  12.8k|                                return OpCode::LD;
   62|     66|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 66, False: 44.0k]
  ------------------
   63|    132|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 66, False: 44.0k]
  ------------------
   64|    132|                                return OpCode::LF;
   65|  13.0k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 13.0k, False: 31.0k]
  ------------------
   66|  13.1k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 66, False: 44.0k]
  ------------------
   67|  13.1k|                                return OpCode::LH;
   68|    222|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 222, False: 43.8k]
  ------------------
   69|  5.86k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 5.63k, False: 38.4k]
  ------------------
   70|  5.86k|                                return OpCode::LW;
   71|  44.1k|                        }
   72|  1.42k|                        break;
   73|  49.8k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 49.8k, False: 295k]
  ------------------
   74|  50.0k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 205, False: 344k]
  ------------------
   75|  50.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 5.61k, False: 44.4k]
  ------------------
   76|  5.61k|                        {
   77|  5.61k|                            return OpCode::OR;
   78|  5.61k|                        }
   79|  44.4k|                        break;
   80|  62.3k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 62.3k, False: 282k]
  ------------------
   81|   118k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 55.7k, False: 289k]
  ------------------
   82|   118k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 79.4k, False: 38.5k]
  ------------------
   83|   118k|                        {
   84|    173|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 173, False: 117k]
  ------------------
   85|    239|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 66, False: 118k]
  ------------------
   86|    239|                                return OpCode::SB;
   87|    996|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 996, False: 117k]
  ------------------
   88|  5.69k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 4.69k, False: 113k]
  ------------------
   89|  5.69k|                                return OpCode::SD;
   90|    230|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 230, False: 117k]
  ------------------
   91|  9.26k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 9.03k, False: 109k]
  ------------------
   92|  9.26k|                                return OpCode::SF;
   93|  22.9k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 22.9k, False: 95.1k]
  ------------------
   94|  23.0k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 66, False: 118k]
  ------------------
   95|  23.0k|                                return OpCode::SH;
   96|    286|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 286, False: 117k]
  ------------------
   97|    356|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 70, False: 118k]
  ------------------
   98|    356|                                return OpCode::SW;
   99|   118k|                        }
  100|  79.4k|                        break;
  101|   344k|                }
  102|   257k|                break;
  103|   344k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   548k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 548k, False: 1.29M]
  ------------------
  107|   548k|                const char c1 = token[0u];
  108|   548k|                const char c2 = token[1u];
  109|   548k|                const char c3 = token[2u];
  110|       |
  111|   548k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 54.9k, False: 493k]
  ------------------
  112|   548k|                {
  113|   162k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 162k, False: 386k]
  ------------------
  114|   186k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 23.4k, False: 525k]
  ------------------
  115|   186k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 156k, False: 29.6k]
  |  Branch (115:29): [True: 156k, False: 29.7k]
  |  Branch (115:45): [True: 156k, False: 83]
  ------------------
  116|   156k|                        {
  117|   156k|                            return OpCode::ADD;
  118|   156k|                        }
  119|  29.7k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 29.3k, False: 388]
  |  Branch (119:34): [True: 16.7k, False: 12.9k]
  |  Branch (119:50): [True: 16.7k, False: 12.6k]
  ------------------
  120|  16.7k|                        {
  121|  16.7k|                            return OpCode::AND;
  122|  16.7k|                        }
  123|  12.9k|                        break;
  124|       |
  125|  13.1k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 13.1k, False: 535k]
  ------------------
  126|  13.2k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 75, False: 548k]
  ------------------
  127|  13.2k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 13.0k, False: 133]
  |  Branch (127:29): [True: 13.0k, False: 199]
  |  Branch (127:45): [True: 13.0k, False: 66]
  ------------------
  128|  13.0k|                        {
  129|  13.0k|                            return OpCode::DIV;
  130|  13.0k|                        }
  131|    199|                        break;
  132|       |
  133|  1.08k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 1.08k, False: 547k]
  ------------------
  134|  1.49k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 413, False: 548k]
  ------------------
  135|  1.49k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.13k, False: 359]
  ------------------
  136|  1.13k|                        {
  137|  1.13k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 133, False: 1.00k]
  ------------------
  138|    133|                            {
  139|    133|                                return OpCode::EQD;
  140|    133|                            }
  141|  1.00k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 641, False: 363]
  ------------------
  142|    641|                            {
  143|    641|                                return OpCode::EQF;
  144|    641|                            }
  145|  1.13k|                        }
  146|    722|                        break;
  147|       |
  148|  59.7k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 59.7k, False: 488k]
  ------------------
  149|  71.3k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 11.6k, False: 536k]
  ------------------
  150|  71.3k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 38.5k, False: 32.8k]
  ------------------
  151|  38.5k|                        {
  152|  38.5k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 26.9k, False: 11.6k]
  ------------------
  153|  26.9k|                            {
  154|  26.9k|                                return OpCode::GED;
  155|  26.9k|                            }
  156|  11.6k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 11.5k, False: 73]
  ------------------
  157|  11.5k|                            {
  158|  11.5k|                                return OpCode::GEF;
  159|  11.5k|                            }
  160|  38.5k|                        }
  161|  32.8k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 32.6k, False: 191]
  ------------------
  162|  32.6k|                        {
  163|  32.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 10.5k, False: 22.0k]
  ------------------
  164|  10.5k|                            {
  165|  10.5k|                                return OpCode::GTD;
  166|  10.5k|                            }
  167|  22.0k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 13.7k, False: 8.31k]
  ------------------
  168|  13.7k|                            {
  169|  13.7k|                                return OpCode::GTF;
  170|  13.7k|                            }
  171|  22.0k|                        }
  172|  8.58k|                        break;
  173|       |
  174|  8.58k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 93, False: 548k]
  ------------------
  175|    979|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 886, False: 547k]
  ------------------
  176|    979|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 868, False: 111]
  |  Branch (176:29): [True: 149, False: 830]
  |  Branch (176:45): [True: 149, False: 719]
  ------------------
  177|    149|                        {
  178|    149|                            return OpCode::JAL;
  179|    149|                        }
  180|    830|                        break;
  181|       |
  182|  6.74k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 6.74k, False: 541k]
  ------------------
  183|  19.3k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 12.6k, False: 536k]
  ------------------
  184|  19.3k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 90, False: 19.2k]
  ------------------
  185|  19.3k|                        {
  186|    119|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 119, False: 19.2k]
  ------------------
  187|  10.5k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 10.4k, False: 8.89k]
  ------------------
  188|  10.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 486, False: 10.1k]
  ------------------
  189|    486|                                {
  190|    486|                                    return OpCode::LBU;
  191|    486|                                }
  192|  10.1k|                                break;
  193|       |
  194|  10.1k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 5.63k, False: 13.7k]
  ------------------
  195|  5.81k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 184, False: 19.1k]
  ------------------
  196|  5.81k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 1.16k, False: 4.65k]
  ------------------
  197|  1.16k|                                {
  198|  1.16k|                                    return OpCode::LED;
  199|  1.16k|                                }
  200|  4.65k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 4.58k, False: 66]
  ------------------
  201|  4.58k|                                {
  202|  4.58k|                                    return OpCode::LEF;
  203|  4.58k|                                }
  204|     66|                                break;
  205|       |
  206|    270|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 270, False: 19.1k]
  ------------------
  207|  1.18k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 913, False: 18.4k]
  ------------------
  208|  1.18k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 165, False: 1.01k]
  ------------------
  209|    165|                                {
  210|    165|                                    return OpCode::LHI;
  211|    165|                                }
  212|  1.01k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 952, False: 66]
  ------------------
  213|    952|                                {
  214|    952|                                    return OpCode::LHU;
  215|    952|                                }
  216|     66|                                break;
  217|       |
  218|    617|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 617, False: 18.7k]
  ------------------
  219|    812|                            case 't':
  ------------------
  |  Branch (219:29): [True: 195, False: 19.1k]
  ------------------
  220|    812|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 419, False: 393]
  ------------------
  221|    419|                                {
  222|    419|                                    return OpCode::LTD;
  223|    419|                                }
  224|    393|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 317, False: 76]
  ------------------
  225|    317|                                {
  226|    317|                                    return OpCode::LTF;
  227|    317|                                }
  228|     76|                                break;
  229|       |
  230|     78|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 78, False: 19.2k]
  ------------------
  231|    876|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 798, False: 18.5k]
  ------------------
  232|    876|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 132, False: 744]
  ------------------
  233|    132|                                {
  234|    132|                                    return OpCode::LWU;
  235|    132|                                }
  236|    744|                                break;
  237|  19.3k|                        }
  238|  11.1k|                        break;
  239|       |
  240|  11.1k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 7.76k, False: 540k]
  ------------------
  241|  30.8k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 23.1k, False: 525k]
  ------------------
  242|  30.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 6.05k, False: 24.8k]
  ------------------
  243|  6.05k|                        {
  244|  6.05k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 145, False: 5.91k]
  ------------------
  245|    145|                            {
  246|    145|                                return OpCode::NED;
  247|    145|                            }
  248|  5.91k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 144, False: 5.76k]
  ------------------
  249|    144|                            {
  250|    144|                                return OpCode::NEF;
  251|    144|                            }
  252|  6.05k|                        }
  253|  24.8k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 18.1k, False: 6.66k]
  |  Branch (253:34): [True: 1.82k, False: 23.0k]
  |  Branch (253:50): [True: 1.82k, False: 16.3k]
  ------------------
  254|  1.82k|                        {
  255|  1.82k|                            return OpCode::NOP;
  256|  1.82k|                        }
  257|       |
  258|  28.7k|                        break;
  259|       |
  260|  28.7k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 1.87k, False: 546k]
  ------------------
  261|  1.95k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 80, False: 548k]
  ------------------
  262|  1.95k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 800, False: 1.15k]
  |  Branch (262:29): [True: 155, False: 1.80k]
  |  Branch (262:45): [True: 155, False: 645]
  ------------------
  263|    155|                        {
  264|    155|                            return OpCode::ORI;
  265|    155|                        }
  266|  1.80k|                        break;
  267|       |
  268|   148k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 148k, False: 399k]
  ------------------
  269|   151k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 2.36k, False: 546k]
  ------------------
  270|   151k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 639, False: 150k]
  ------------------
  271|   151k|                        {
  272|  7.42k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 7.42k, False: 143k]
  ------------------
  273|  8.00k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 577, False: 150k]
  ------------------
  274|  8.00k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 7.49k, False: 511]
  ------------------
  275|  7.49k|                                {
  276|  7.49k|                                    return OpCode::SBU;
  277|  7.49k|                                }
  278|    511|                                break;
  279|       |
  280|    511|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 194, False: 150k]
  ------------------
  281|  28.7k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 28.5k, False: 122k]
  ------------------
  282|  28.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 23.5k, False: 5.21k]
  ------------------
  283|  23.5k|                                {
  284|  23.5k|                                    return OpCode::SEQ;
  285|  23.5k|                                }
  286|  5.21k|                                break;
  287|       |
  288|  5.21k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 708, False: 150k]
  ------------------
  289|  1.22k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 514, False: 150k]
  ------------------
  290|  1.22k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 375, False: 847]
  ------------------
  291|    375|                                {
  292|    375|                                    return OpCode::SGE;
  293|    375|                                }
  294|    847|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 629, False: 218]
  ------------------
  295|    629|                                {
  296|    629|                                    return OpCode::SGT;
  297|    629|                                }
  298|    218|                                break;
  299|       |
  300|  14.0k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 14.0k, False: 137k]
  ------------------
  301|  14.4k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 426, False: 150k]
  ------------------
  302|  14.4k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 14.0k, False: 363]
  ------------------
  303|  14.0k|                                {
  304|  14.0k|                                    return OpCode::SHU;
  305|  14.0k|                                }
  306|    363|                                break;
  307|       |
  308|  41.1k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 41.1k, False: 109k]
  ------------------
  309|  41.4k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 310, False: 150k]
  ------------------
  310|  41.4k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 67, False: 41.3k]
  ------------------
  311|  41.4k|                                {
  312|  22.8k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 22.8k, False: 18.6k]
  ------------------
  313|  22.8k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 69, False: 41.3k]
  ------------------
  314|  22.8k|                                        return OpCode::SLA;
  315|       |
  316|  13.9k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 13.9k, False: 27.4k]
  ------------------
  317|  14.0k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 70, False: 41.3k]
  ------------------
  318|  14.0k|                                        return OpCode::SLE;
  319|       |
  320|  4.17k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 4.17k, False: 37.2k]
  ------------------
  321|  4.24k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 70, False: 41.3k]
  ------------------
  322|  4.24k|                                        return OpCode::SLL;
  323|       |
  324|    151|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 151, False: 41.2k]
  ------------------
  325|    234|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 83, False: 41.3k]
  ------------------
  326|    234|                                        return OpCode::SLT;
  327|  41.4k|                                }
  328|     67|                                break;
  329|       |
  330|    212|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 212, False: 150k]
  ------------------
  331|    376|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 164, False: 150k]
  ------------------
  332|    376|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 308, False: 68]
  ------------------
  333|    308|                                {
  334|    308|                                    return OpCode::SNE;
  335|    308|                                }
  336|     68|                                break;
  337|       |
  338|  17.7k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 17.7k, False: 133k]
  ------------------
  339|  47.2k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 29.4k, False: 121k]
  ------------------
  340|  47.2k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 14.9k, False: 32.2k]
  ------------------
  341|  14.9k|                                {
  342|  14.9k|                                    return OpCode::SRA;
  343|  14.9k|                                }
  344|  32.2k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 2.96k, False: 29.2k]
  ------------------
  345|  2.96k|                                {
  346|  2.96k|                                    return OpCode::SRL;
  347|  2.96k|                                }
  348|  29.2k|                                break;
  349|       |
  350|  29.2k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 7.34k, False: 143k]
  ------------------
  351|  8.07k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 729, False: 150k]
  ------------------
  352|  8.07k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 7.54k, False: 527]
  ------------------
  353|  7.54k|                                {
  354|  7.54k|                                    return OpCode::SUB;
  355|  7.54k|                                }
  356|    527|                                break;
  357|       |
  358|    701|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 701, False: 150k]
  ------------------
  359|    974|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 273, False: 150k]
  ------------------
  360|    974|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 708, False: 266]
  ------------------
  361|    708|                                {
  362|    708|                                    return OpCode::SWU;
  363|    708|                                }
  364|    266|                                break;
  365|   151k|                        }
  366|       |
  367|  39.1k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 1.97k, False: 546k]
  ------------------
  368|  54.3k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 15.2k, False: 533k]
  ------------------
  369|  54.3k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 2.01k, False: 52.3k]
  |  Branch (369:29): [True: 1.93k, False: 52.4k]
  |  Branch (369:45): [True: 1.93k, False: 75]
  ------------------
  370|  1.93k|                        {
  371|  1.93k|                            return OpCode::XOR;
  372|  1.93k|                        }
  373|  52.4k|                        break;
  374|   548k|                }
  375|   172k|                break;
  376|   548k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|   471k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 471k, False: 1.37M]
  ------------------
  380|   471k|                const char c1 = token[0u];
  381|   471k|                const char c2 = token[1u];
  382|   471k|                const char c3 = token[2u];
  383|   471k|                const char c4 = token[3u];
  384|       |
  385|   471k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 34.3k, False: 437k]
  ------------------
  386|   471k|                {
  387|  84.1k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 84.1k, False: 387k]
  ------------------
  388|  88.3k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 4.26k, False: 467k]
  ------------------
  389|  88.3k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 76, False: 88.2k]
  ------------------
  390|  88.3k|                        {
  391|  86.8k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 86.8k, False: 1.51k]
  ------------------
  392|  87.0k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 157, False: 88.2k]
  ------------------
  393|  87.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 82.9k, False: 4.03k]
  ------------------
  394|  82.9k|                                {
  395|  82.9k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 66, False: 82.9k]
  ------------------
  396|  82.9k|                                    {
  397|  15.5k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 15.5k, False: 67.4k]
  ------------------
  398|  15.6k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 82.9k]
  ------------------
  399|  15.6k|                                            return OpCode::ADDD;
  400|       |
  401|  15.1k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 15.1k, False: 67.7k]
  ------------------
  402|  15.2k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 66, False: 82.9k]
  ------------------
  403|  15.2k|                                            return OpCode::ADDF;
  404|       |
  405|  16.7k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 16.7k, False: 66.1k]
  ------------------
  406|  16.8k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 82.9k]
  ------------------
  407|  16.8k|                                            return OpCode::ADDI;
  408|       |
  409|  35.1k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 35.1k, False: 47.8k]
  ------------------
  410|  35.2k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 82.9k]
  ------------------
  411|  35.2k|                                            return OpCode::ADDU;
  412|  82.9k|                                    }
  413|  82.9k|                                }
  414|  4.10k|                                break;
  415|       |
  416|  4.10k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 970, False: 87.3k]
  ------------------
  417|  1.27k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 307, False: 88.0k]
  ------------------
  418|  1.27k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 1.07k, False: 203]
  |  Branch (418:37): [True: 1.00k, False: 275]
  |  Branch (418:53): [True: 1.00k, False: 72]
  ------------------
  419|  1.00k|                                {
  420|  1.00k|                                    return OpCode::ANDI;
  421|  1.00k|                                }
  422|       |
  423|    275|                                break;
  424|  88.3k|                        }
  425|  4.45k|                        break;
  426|       |
  427|  89.9k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 89.9k, False: 381k]
  ------------------
  428|   100k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 10.7k, False: 460k]
  ------------------
  429|   100k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 324, False: 100k]
  ------------------
  430|   100k|                        {
  431|    279|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 279, False: 100k]
  ------------------
  432|  10.2k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 9.94k, False: 90.7k]
  ------------------
  433|  10.2k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 4.65k, False: 5.57k]
  |  Branch (433:37): [True: 4.50k, False: 5.72k]
  |  Branch (433:53): [True: 4.50k, False: 152]
  ------------------
  434|  4.50k|                                {
  435|  4.50k|                                    return OpCode::BEQZ;
  436|  4.50k|                                }
  437|  5.72k|                                break;
  438|       |
  439|  79.5k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 79.5k, False: 21.1k]
  ------------------
  440|  79.7k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 265, False: 100k]
  ------------------
  441|  79.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 79.7k, False: 66]
  ------------------
  442|  79.7k|                                {
  443|  79.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 26.7k, False: 52.9k]
  ------------------
  444|  26.7k|                                    {
  445|  26.7k|                                        return OpCode::BFPF;
  446|  26.7k|                                    }
  447|  52.9k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 52.8k, False: 66]
  ------------------
  448|  52.8k|                                    {
  449|  52.8k|                                        return OpCode::BFPT;
  450|  52.8k|                                    }
  451|  79.7k|                                }
  452|    132|                                break;
  453|       |
  454|  10.1k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 10.1k, False: 90.5k]
  ------------------
  455|  10.3k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 198, False: 100k]
  ------------------
  456|  10.3k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 10.2k, False: 66]
  |  Branch (456:37): [True: 10.1k, False: 132]
  |  Branch (456:53): [True: 10.1k, False: 66]
  ------------------
  457|  10.1k|                                {
  458|  10.1k|                                    return OpCode::BNEZ;
  459|  10.1k|                                }
  460|   100k|                        }
  461|  6.31k|                        break;
  462|       |
  463|  18.0k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 18.0k, False: 453k]
  ------------------
  464|  18.1k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 114, False: 471k]
  ------------------
  465|  18.1k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 18.0k, False: 118]
  |  Branch (465:29): [True: 17.9k, False: 184]
  |  Branch (465:45): [True: 17.9k, False: 66]
  ------------------
  466|  17.9k|                        {
  467|  17.9k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 113, False: 17.8k]
  ------------------
  468|  17.9k|                            {
  469|  9.00k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 9.00k, False: 8.98k]
  ------------------
  470|  9.07k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 17.9k]
  ------------------
  471|  9.07k|                                    return OpCode::DIVD;
  472|       |
  473|     70|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 70, False: 17.9k]
  ------------------
  474|    136|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 17.9k]
  ------------------
  475|    136|                                    return OpCode::DIVF;
  476|       |
  477|  2.20k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 2.20k, False: 15.7k]
  ------------------
  478|  2.27k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 66, False: 17.9k]
  ------------------
  479|  2.27k|                                    return OpCode::DIVI;
  480|       |
  481|  6.30k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 6.30k, False: 11.6k]
  ------------------
  482|  6.40k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 98, False: 17.8k]
  ------------------
  483|  6.40k|                                    return OpCode::DIVU;
  484|  17.9k|                            }
  485|  17.9k|                        }
  486|    297|                        break;
  487|       |
  488|    297|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 103, False: 471k]
  ------------------
  489|  12.7k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 12.6k, False: 458k]
  ------------------
  490|  12.7k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 12.5k, False: 228]
  |  Branch (490:29): [True: 149, False: 12.6k]
  |  Branch (490:45): [True: 12.4k, False: 66]
  |  Branch (490:61): [True: 149, False: 12.3k]
  ------------------
  491|    149|                        {
  492|    149|                            return OpCode::HALT;
  493|    149|                        }
  494|  12.6k|                        break;
  495|       |
  496|  12.6k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 321, False: 471k]
  ------------------
  497|  3.33k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 3.01k, False: 468k]
  ------------------
  498|  3.33k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 2.99k, False: 340]
  |  Branch (498:29): [True: 165, False: 3.17k]
  |  Branch (498:45): [True: 231, False: 2.76k]
  |  Branch (498:61): [True: 165, False: 66]
  ------------------
  499|    165|                        {
  500|    165|                            return OpCode::JALR;
  501|    165|                        }
  502|  3.17k|                        break;
  503|       |
  504|  21.2k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 21.2k, False: 450k]
  ------------------
  505|  34.2k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 12.9k, False: 458k]
  ------------------
  506|  34.2k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 19.1k, False: 15.1k]
  |  Branch (506:29): [True: 19.0k, False: 15.1k]
  |  Branch (506:45): [True: 19.0k, False: 66]
  ------------------
  507|  19.0k|                        {
  508|  19.0k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 18.6k, False: 422]
  ------------------
  509|  18.6k|                            {
  510|  18.6k|                                return OpCode::MOVD;
  511|  18.6k|                            }
  512|    422|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 356, False: 66]
  ------------------
  513|    356|                            {
  514|    356|                                return OpCode::MOVF;
  515|    356|                            }
  516|  19.0k|                        }
  517|  15.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 14.4k, False: 705]
  |  Branch (517:34): [True: 177, False: 15.0k]
  |  Branch (517:50): [True: 14.0k, False: 415]
  |  Branch (517:66): [True: 177, False: 13.8k]
  ------------------
  518|    177|                        {
  519|    177|                            return OpCode::MULT;
  520|    177|                        }
  521|  15.0k|                        break;
  522|       |
  523|   149k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 149k, False: 322k]
  ------------------
  524|   167k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 18.3k, False: 453k]
  ------------------
  525|   167k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 1.22k, False: 166k]
  ------------------
  526|   167k|                        {
  527|  4.47k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 4.47k, False: 162k]
  ------------------
  528|  14.4k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 9.95k, False: 157k]
  ------------------
  529|  14.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 9.98k, False: 4.43k]
  ------------------
  530|  9.98k|                                {
  531|  9.98k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 8.84k, False: 1.14k]
  ------------------
  532|  8.84k|                                    {
  533|  8.84k|                                        return OpCode::SEQI;
  534|  8.84k|                                    }
  535|  1.14k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 1.06k, False: 81]
  ------------------
  536|  1.06k|                                    {
  537|  1.06k|                                        return OpCode::SEQU;
  538|  1.06k|                                    }
  539|  9.98k|                                }
  540|  4.51k|                                break;
  541|       |
  542|  21.0k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 21.0k, False: 146k]
  ------------------
  543|  37.0k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 16.0k, False: 151k]
  ------------------
  544|  37.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 17.4k, False: 19.6k]
  ------------------
  545|  17.4k|                                {
  546|  17.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 385, False: 17.0k]
  ------------------
  547|    385|                                    {
  548|    385|                                        return OpCode::SGEI;
  549|    385|                                    }
  550|  17.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 16.9k, False: 66]
  ------------------
  551|  16.9k|                                    {
  552|  16.9k|                                        return OpCode::SGEU;
  553|  16.9k|                                    }
  554|  17.4k|                                }
  555|  19.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 19.5k, False: 88]
  ------------------
  556|  19.5k|                                {
  557|  19.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 3.84k, False: 15.7k]
  ------------------
  558|  3.84k|                                    {
  559|  3.84k|                                        return OpCode::SGTI;
  560|  3.84k|                                    }
  561|  15.7k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 132, False: 15.5k]
  ------------------
  562|    132|                                    {
  563|    132|                                        return OpCode::SGTU;
  564|    132|                                    }
  565|  19.5k|                                }
  566|  15.7k|                                break;
  567|       |
  568|  34.4k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 34.4k, False: 132k]
  ------------------
  569|  35.2k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 766, False: 166k]
  ------------------
  570|  35.2k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 66, False: 35.1k]
  ------------------
  571|  35.2k|                                {
  572|  2.02k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 2.02k, False: 33.1k]
  ------------------
  573|  2.13k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 113, False: 35.0k]
  ------------------
  574|  2.13k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 2.07k, False: 66]
  ------------------
  575|  2.07k|                                        {
  576|  2.07k|                                            return OpCode::SLAI;
  577|  2.07k|                                        }
  578|     66|                                        break;
  579|       |
  580|  23.9k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 23.9k, False: 11.2k]
  ------------------
  581|  24.1k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 164, False: 35.0k]
  ------------------
  582|  24.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 22.4k, False: 1.61k]
  ------------------
  583|  22.4k|                                        {
  584|  22.4k|                                            return OpCode::SLEI;
  585|  22.4k|                                        }
  586|  1.61k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 1.54k, False: 66]
  ------------------
  587|  1.54k|                                        {
  588|  1.54k|                                            return OpCode::SLEU;
  589|  1.54k|                                        }
  590|     66|                                        break;
  591|       |
  592|  5.06k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 5.06k, False: 30.1k]
  ------------------
  593|  5.22k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 165, False: 35.0k]
  ------------------
  594|  5.22k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 5.15k, False: 69]
  ------------------
  595|  5.15k|                                        {
  596|  5.15k|                                            return OpCode::SLLI;
  597|  5.15k|                                        }
  598|     69|                                        break;
  599|       |
  600|  3.53k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 3.53k, False: 31.6k]
  ------------------
  601|  3.67k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 141, False: 35.0k]
  ------------------
  602|  3.67k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 3.46k, False: 211]
  ------------------
  603|  3.46k|                                        {
  604|  3.46k|                                            return OpCode::SLTI;
  605|  3.46k|                                        }
  606|    211|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 145, False: 66]
  ------------------
  607|    145|                                        {
  608|    145|                                            return OpCode::SLTU;
  609|    145|                                        }
  610|     66|                                        break;
  611|  35.2k|                                }
  612|       |
  613|  13.6k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 13.3k, False: 154k]
  ------------------
  614|  21.4k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 7.82k, False: 159k]
  ------------------
  615|  21.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 21.2k, False: 268]
  ------------------
  616|  21.2k|                                {
  617|  21.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 1.34k, False: 19.8k]
  ------------------
  618|  1.34k|                                    {
  619|  1.34k|                                        return OpCode::SNEI;
  620|  1.34k|                                    }
  621|  19.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 19.7k, False: 66]
  ------------------
  622|  19.7k|                                    {
  623|  19.7k|                                        return OpCode::SNEU;
  624|  19.7k|                                    }
  625|  21.2k|                                }
  626|    334|                                break;
  627|       |
  628|    804|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 804, False: 166k]
  ------------------
  629|  1.03k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 235, False: 167k]
  ------------------
  630|  1.03k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 473, False: 566]
  |  Branch (630:37): [True: 406, False: 633]
  |  Branch (630:53): [True: 406, False: 67]
  ------------------
  631|    406|                                {
  632|    406|                                    return OpCode::SRAI;
  633|    406|                                }
  634|    633|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 528, False: 105]
  |  Branch (634:42): [True: 330, False: 303]
  |  Branch (634:58): [True: 330, False: 198]
  ------------------
  635|    330|                                {
  636|    330|                                    return OpCode::SRLI;
  637|    330|                                }
  638|    303|                                break;
  639|       |
  640|  35.0k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 35.0k, False: 132k]
  ------------------
  641|  57.2k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 22.2k, False: 145k]
  ------------------
  642|  57.2k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 50.4k, False: 6.85k]
  ------------------
  643|  50.4k|                                {
  644|  50.4k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 15.2k, False: 35.2k]
  ------------------
  645|  50.4k|                                    {
  646|    132|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 132, False: 50.2k]
  ------------------
  647|    198|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 50.3k]
  ------------------
  648|    198|                                            return OpCode::SUBD;
  649|       |
  650|  6.72k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 6.72k, False: 43.6k]
  ------------------
  651|  6.79k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 66, False: 50.3k]
  ------------------
  652|  6.79k|                                            return OpCode::SUBF;
  653|       |
  654|  24.3k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 24.3k, False: 26.1k]
  ------------------
  655|  24.3k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 99, False: 50.3k]
  ------------------
  656|  24.3k|                                            return OpCode::SUBI;
  657|       |
  658|  3.75k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 3.75k, False: 46.6k]
  ------------------
  659|  3.81k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 50.3k]
  ------------------
  660|  3.81k|                                            return OpCode::SUBU;
  661|  50.4k|                                    }
  662|  50.4k|                                }
  663|  22.0k|                                break;
  664|   167k|                        }
  665|  44.1k|                        break;
  666|       |
  667|  44.1k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 11.6k, False: 459k]
  ------------------
  668|  11.7k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 122, False: 471k]
  ------------------
  669|  11.7k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 11.6k, False: 66]
  |  Branch (669:29): [True: 11.4k, False: 289]
  |  Branch (669:45): [True: 11.5k, False: 84]
  |  Branch (669:61): [True: 11.4k, False: 139]
  ------------------
  670|  11.4k|                        {
  671|  11.4k|                            return OpCode::TRAP;
  672|  11.4k|                        }
  673|    289|                        break;
  674|    289|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 170, False: 471k]
  ------------------
  675|    419|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 249, False: 471k]
  ------------------
  676|    419|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 265, False: 154]
  |  Branch (676:29): [True: 133, False: 286]
  |  Branch (676:45): [True: 199, False: 66]
  |  Branch (676:61): [True: 133, False: 66]
  ------------------
  677|    133|                        {
  678|    133|                            return OpCode::XORI;
  679|    133|                        }
  680|    286|                        break;
  681|   471k|                }
  682|   121k|                break;
  683|   471k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   176k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 176k, False: 1.66M]
  ------------------
  687|   176k|                const char c1 = token[0u];
  688|   176k|                const char c2 = token[1u];
  689|   176k|                const char c3 = token[2u];
  690|   176k|                const char c4 = token[3u];
  691|   176k|                const char c5 = token[4u];
  692|       |
  693|   176k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 13.1k, False: 163k]
  ------------------
  694|   176k|                {
  695|  39.0k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 39.0k, False: 137k]
  ------------------
  696|  39.0k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 176k]
  ------------------
  697|  39.0k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 39.0k, False: 0]
  |  Branch (697:29): [True: 39.0k, False: 0]
  |  Branch (697:45): [True: 39.0k, False: 0]
  |  Branch (697:61): [True: 39.0k, False: 0]
  |  Branch (697:77): [True: 39.0k, False: 0]
  ------------------
  698|  39.0k|                        {
  699|  39.0k|                            return OpCode::ADDUI;
  700|  39.0k|                        }
  701|      0|                        break;
  702|       |
  703|  20.5k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 20.5k, False: 156k]
  ------------------
  704|  20.5k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 176k]
  ------------------
  705|  20.5k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 20.5k, False: 0]
  |  Branch (705:29): [True: 20.5k, False: 0]
  |  Branch (705:45): [True: 20.5k, False: 0]
  |  Branch (705:61): [True: 20.5k, False: 0]
  |  Branch (705:77): [True: 20.5k, False: 0]
  ------------------
  706|  20.5k|                        {
  707|  20.5k|                            return OpCode::DIVUI;
  708|  20.5k|                        }
  709|      0|                        break;
  710|       |
  711|  20.0k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 20.0k, False: 156k]
  ------------------
  712|  20.0k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 176k]
  ------------------
  713|  20.0k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 20.0k, False: 0]
  |  Branch (713:29): [True: 20.0k, False: 0]
  |  Branch (713:45): [True: 20.0k, False: 0]
  |  Branch (713:61): [True: 20.0k, False: 0]
  ------------------
  714|  20.0k|                        {
  715|  20.0k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 20.0k]
  ------------------
  716|  20.0k|                            {
  717|    218|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 218, False: 19.8k]
  ------------------
  718|    218|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 20.0k]
  ------------------
  719|    218|                                    return OpCode::MULTD;
  720|       |
  721|  19.5k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 19.5k, False: 547]
  ------------------
  722|  19.5k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 20.0k]
  ------------------
  723|  19.5k|                                    return OpCode::MULTF;
  724|       |
  725|    137|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 137, False: 19.9k]
  ------------------
  726|    137|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 20.0k]
  ------------------
  727|    137|                                    return OpCode::MULTI;
  728|       |
  729|    192|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 192, False: 19.8k]
  ------------------
  730|    192|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 20.0k]
  ------------------
  731|    192|                                    return OpCode::MULTU;
  732|  20.0k|                            }
  733|  20.0k|                        }
  734|      0|                        break;
  735|       |
  736|  83.9k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 83.9k, False: 92.7k]
  ------------------
  737|  83.9k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 176k]
  ------------------
  738|  83.9k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 83.9k]
  ------------------
  739|  83.9k|                        {
  740|  26.1k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 26.1k, False: 57.8k]
  ------------------
  741|  26.1k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 83.9k]
  ------------------
  742|  26.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 26.1k, False: 0]
  |  Branch (742:37): [True: 26.1k, False: 0]
  |  Branch (742:53): [True: 26.1k, False: 0]
  |  Branch (742:69): [True: 26.1k, False: 0]
  ------------------
  743|  26.1k|                                {
  744|  26.1k|                                    return OpCode::SEQUI;
  745|  26.1k|                                }
  746|      0|                                break;
  747|       |
  748|  26.4k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 26.4k, False: 57.5k]
  ------------------
  749|  26.4k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 83.9k]
  ------------------
  750|  26.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 15.7k, False: 10.6k]
  |  Branch (750:37): [True: 15.7k, False: 10.6k]
  |  Branch (750:53): [True: 15.7k, False: 0]
  |  Branch (750:69): [True: 15.7k, False: 0]
  ------------------
  751|  15.7k|                                {
  752|  15.7k|                                    return OpCode::SGEUI;
  753|  15.7k|                                }
  754|  10.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 10.6k, False: 0]
  |  Branch (754:42): [True: 10.6k, False: 0]
  |  Branch (754:58): [True: 10.6k, False: 0]
  |  Branch (754:74): [True: 10.6k, False: 0]
  ------------------
  755|  10.6k|                                {
  756|  10.6k|                                    return OpCode::SGTUI;
  757|  10.6k|                                }
  758|      0|                                break;
  759|       |
  760|  20.8k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 20.8k, False: 63.1k]
  ------------------
  761|  20.8k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 83.9k]
  ------------------
  762|  20.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 808, False: 20.0k]
  |  Branch (762:37): [True: 808, False: 20.0k]
  |  Branch (762:53): [True: 808, False: 0]
  |  Branch (762:69): [True: 808, False: 0]
  ------------------
  763|    808|                                {
  764|    808|                                    return OpCode::SLEUI;
  765|    808|                                }
  766|  20.0k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 20.0k, False: 0]
  |  Branch (766:42): [True: 20.0k, False: 0]
  |  Branch (766:58): [True: 20.0k, False: 0]
  |  Branch (766:74): [True: 20.0k, False: 0]
  ------------------
  767|  20.0k|                                {
  768|  20.0k|                                    return OpCode::SLTUI;
  769|  20.0k|                                }
  770|      0|                                break;
  771|       |
  772|     66|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 66, False: 83.9k]
  ------------------
  773|     66|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 83.9k]
  ------------------
  774|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:53): [True: 66, False: 0]
  |  Branch (774:69): [True: 66, False: 0]
  ------------------
  775|     66|                                {
  776|     66|                                    return OpCode::SNEUI;
  777|     66|                                }
  778|      0|                                break;
  779|       |
  780|  10.5k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 10.5k, False: 73.4k]
  ------------------
  781|  10.5k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 83.9k]
  ------------------
  782|  10.5k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 10.5k, False: 0]
  |  Branch (782:37): [True: 10.5k, False: 0]
  |  Branch (782:53): [True: 10.5k, False: 0]
  |  Branch (782:69): [True: 10.5k, False: 0]
  ------------------
  783|  10.5k|                                {
  784|  10.5k|                                    return OpCode::SUBUI;
  785|  10.5k|                                }
  786|      0|                                break;
  787|  83.9k|                        }
  788|       |
  789|      0|                        break;
  790|   176k|                }
  791|       |
  792|  13.1k|                break;
  793|   176k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  43.5k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 43.5k, False: 1.80M]
  ------------------
  797|  43.5k|                const char c1 = token[0u];
  798|  43.5k|                const char c2 = token[1u];
  799|  43.5k|                const char c3 = token[2u];
  800|  43.5k|                const char c4 = token[3u];
  801|  43.5k|                const char c5 = token[4u];
  802|  43.5k|                const char c6 = token[5u];
  803|       |
  804|  43.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 18.0k, False: 25.5k]
  |  Branch (804:21): [True: 18.0k, False: 25.5k]
  |  Branch (804:37): [True: 18.0k, False: 0]
  |  Branch (804:53): [True: 18.0k, False: 0]
  ------------------
  805|  18.0k|                {
  806|  18.0k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 18.0k]
  ------------------
  807|  18.0k|                    {
  808|  2.16k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 2.16k, False: 15.9k]
  ------------------
  809|  2.16k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 18.0k]
  ------------------
  810|  2.16k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 2.16k, False: 0]
  ------------------
  811|  2.16k|                            {
  812|  2.16k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 1.22k, False: 940]
  ------------------
  813|  1.22k|                                {
  814|  1.22k|                                    return OpCode::CVTD2F;
  815|  1.22k|                                }
  816|    940|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 940, False: 0]
  ------------------
  817|    940|                                {
  818|    940|                                    return OpCode::CVTD2I;
  819|    940|                                }
  820|  2.16k|                            }
  821|      0|                            break;
  822|       |
  823|  2.56k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 2.56k, False: 15.5k]
  ------------------
  824|  2.56k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 18.0k]
  ------------------
  825|  2.56k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 2.56k, False: 0]
  ------------------
  826|  2.56k|                            {
  827|  2.56k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 793, False: 1.77k]
  ------------------
  828|    793|                                {
  829|    793|                                    return OpCode::CVTF2D;
  830|    793|                                }
  831|  1.77k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 1.77k, False: 0]
  ------------------
  832|  1.77k|                                {
  833|  1.77k|                                    return OpCode::CVTF2I;
  834|  1.77k|                                }
  835|  2.56k|                            }
  836|      0|                            break;
  837|       |
  838|  13.3k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 13.3k, False: 4.73k]
  ------------------
  839|  13.3k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 18.0k]
  ------------------
  840|  13.3k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 13.3k, False: 0]
  ------------------
  841|  13.3k|                            {
  842|  13.3k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 13.2k, False: 137]
  ------------------
  843|  13.2k|                                {
  844|  13.2k|                                    return OpCode::CVTI2D;
  845|  13.2k|                                }
  846|    137|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 137, False: 0]
  ------------------
  847|    137|                                {
  848|    137|                                    return OpCode::CVTI2F;
  849|    137|                                }
  850|  13.3k|                            }
  851|  18.0k|                    }
  852|  18.0k|                }
  853|  25.5k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 17.3k, False: 8.19k]
  |  Branch (853:26): [True: 17.3k, False: 8.19k]
  |  Branch (853:42): [True: 17.3k, False: 0]
  |  Branch (853:58): [True: 17.3k, False: 0]
  |  Branch (853:74): [True: 17.3k, False: 0]
  ------------------
  854|  25.5k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 17.3k, False: 0]
  |  Branch (854:42): [True: 17.3k, False: 0]
  ------------------
  855|  17.3k|                {
  856|  17.3k|                    return OpCode::MULTUI;
  857|  17.3k|                }
  858|  8.19k|                break;
  859|  43.5k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  8.19k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 708, False: 1.84M]
  ------------------
  863|    708|                const char c1 = token[0u];
  864|    708|                const char c2 = token[1u];
  865|    708|                const char c3 = token[2u];
  866|    708|                const char c4 = token[3u];
  867|    708|                const char c5 = token[4u];
  868|    708|                const char c6 = token[5u];
  869|    708|                const char c7 = token[6u];
  870|       |
  871|    708|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 204, False: 504]
  |  Branch (871:21): [True: 204, False: 504]
  |  Branch (871:37): [True: 204, False: 0]
  |  Branch (871:53): [True: 204, False: 0]
  ------------------
  872|    204|                {
  873|    204|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 83, False: 121]
  |  Branch (873:25): [True: 83, False: 121]
  |  Branch (873:41): [True: 83, False: 0]
  |  Branch (873:54): [True: 83, False: 0]
  |  Branch (873:70): [True: 83, False: 0]
  ------------------
  874|     83|                    {
  875|     83|                        return OpCode::MOVI2FP;
  876|     83|                    }
  877|    121|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 121, False: 0]
  |  Branch (877:25): [True: 121, False: 0]
  |  Branch (877:41): [True: 121, False: 0]
  |  Branch (877:57): [True: 121, False: 0]
  |  Branch (877:70): [True: 121, False: 0]
  ------------------
  878|    121|                    {
  879|    121|                        return OpCode::MOVFP2I;
  880|    121|                    }
  881|    121|                }
  882|    504|                break;
  883|    708|            }
  884|       |
  885|  58.8k|            default: {
  ------------------
  |  Branch (885:13): [True: 58.8k, False: 1.78M]
  ------------------
  886|  58.8k|                break;
  887|    708|            }
  888|  1.84M|        }
  889|       |
  890|       |        // None found
  891|   788k|        return OpCode::NONE;
  892|  1.84M|    }
_ZN3dlx3iceEcc:
   17|  2.88M|    {
   18|  2.88M|        constexpr const char diff = 'a' - 'A';
   19|  2.88M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.79M, False: 1.08M]
  |  Branch (19:28): [True: 280k, False: 805k]
  ------------------
   20|  2.88M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  2.14M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  33.6k|    {
  195|  33.6k|        ParseError err;
  196|       |
  197|  33.6k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  33.6k|        err.m_LineNumber                           = line_number;
  199|  33.6k|        err.m_Column                               = column;
  200|  33.6k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  33.6k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  33.6k|        return err;
  204|  33.6k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  33.6k|    {
  209|  33.6k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  33.6k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  33.6k|                                                         actual_type);
  212|  33.6k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    978|    {
  218|    978|        ParseError err;
  219|       |
  220|    978|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    978|        err.m_LineNumber        = line_number;
  222|    978|        err.m_Column            = column;
  223|    978|        err.invalid_number.text = text;
  224|       |
  225|    978|        return err;
  226|    978|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    978|    {
  230|    978|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    978|                                                token.GetColumn().unsafe(), token.GetText());
  232|    978|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     27|    {
  237|     27|        ParseError err;
  238|       |
  239|     27|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     27|        err.m_LineNumber = line_number;
  241|     27|        err.m_Column     = column;
  242|       |
  243|     27|        return err;
  244|     27|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     27|    {
  249|     27|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     27|                                                                     token.GetColumn().unsafe());
  251|     27|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|   821k|    {
  257|   821k|        ParseError err;
  258|       |
  259|   821k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|   821k|        err.m_LineNumber                   = line_number;
  261|   821k|        err.m_Column                       = column;
  262|   821k|        err.unexpected_token.expected_type = expected_type;
  263|   821k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|   821k|        return err;
  266|   821k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|   821k|    {
  271|   821k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|   821k|                                                  token.GetColumn().unsafe(), expected_type,
  273|   821k|                                                  token.GetType());
  274|   821k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  46.0k|    {
  279|  46.0k|        ParseError err;
  280|       |
  281|  46.0k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  46.0k|        err.m_LineNumber                   = line_number;
  283|  46.0k|        err.m_Column                       = column;
  284|  46.0k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  46.0k|        return err;
  287|  46.0k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  18.1k|    {
  291|  18.1k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  18.1k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  18.1k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   334k|    {
  298|   334k|        ParseError err;
  299|       |
  300|   334k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   334k|        err.m_LineNumber                       = line_number;
  302|   334k|        err.m_Column                           = column;
  303|   334k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   334k|        return err;
  306|   334k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   334k|    {
  311|   334k|        return ConstructInvalidLabelIdentifierParseError(
  312|   334k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   334k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   131k|    {
  319|   131k|        ParseError err;
  320|       |
  321|   131k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   131k|        err.m_LineNumber                     = line_number;
  323|   131k|        err.m_Column                         = column;
  324|   131k|        err.label_already_defined.label_name = label_name;
  325|   131k|        err.label_already_defined.at_line    = at_line;
  326|   131k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   131k|        return err;
  329|   131k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   131k|    {
  334|   131k|        return ConstructLabelAlreadyDefinedParseError(
  335|   131k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   131k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   131k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   644k|    {
  342|   644k|        ParseError err;
  343|       |
  344|   644k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   644k|        err.m_LineNumber = line_number;
  346|   644k|        err.m_Column     = column;
  347|       |
  348|   644k|        return err;
  349|   644k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   644k|    {
  354|   644k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   644k|                                                        token.GetColumn().unsafe());
  356|   644k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   118k|    {
  362|   118k|        ParseError err;
  363|       |
  364|   118k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   118k|        err.m_LineNumber               = line_number;
  366|   118k|        err.m_Column                   = column;
  367|   118k|        err.too_few_arguments.required = required;
  368|   118k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   118k|        return err;
  371|   118k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   118k|    {
  376|   118k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   118k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   118k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  5.35k|    {
  383|  5.35k|        ParseError err;
  384|       |
  385|  5.35k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  5.35k|        err.m_LineNumber           = line_number;
  387|  5.35k|        err.m_Column               = column;
  388|  5.35k|        err.empty_label.label_name = label_name;
  389|       |
  390|  5.35k|        return err;
  391|  5.35k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  5.35k|    {
  395|  5.35k|        return ConstructEmptyLabelParseError(
  396|  5.35k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  5.35k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 4.35k, False: 998]
  ------------------
  398|  4.35k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  5.35k|                        token.GetText());
  400|  5.35k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|  3.35k|    {
  405|  3.35k|        ParseError err;
  406|       |
  407|  3.35k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|  3.35k|        err.m_LineNumber = line_number;
  409|  3.35k|        err.m_Column     = column;
  410|       |
  411|  3.35k|        return err;
  412|  3.35k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|  3.35k|    {
  416|  3.35k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|  3.35k|                                               token.GetColumn().unsafe());
  418|  3.35k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  2.14M|    {
   19|  2.14M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  2.14M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  13.9k|    {
  181|  13.9k|        ParsedProgram program;
  182|       |
  183|  13.9k|        program.m_Tokens = tokens;
  184|       |
  185|  13.9k|        phi::boolean line_has_instruction{false};
  186|  13.9k|        phi::usize   label_count{0u};
  187|       |
  188|  4.59M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 4.57M, False: 13.9k]
  ------------------
  189|  4.57M|        {
  190|  4.57M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  4.57M|            switch (current_token.GetType())
  195|  4.57M|            {
  196|       |                // Ignore comments
  197|   714k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 714k, False: 3.86M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   714k|                    break;
  200|       |
  201|  1.69M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.69M, False: 2.88M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.69M|                    line_has_instruction = false;
  204|  1.69M|                    break;
  205|       |
  206|   502k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 502k, False: 4.07M]
  ------------------
  207|   502k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 22.1k, False: 480k]
  ------------------
  208|  22.1k|                    {
  209|  22.1k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  22.1k|                                current_token, Token::Type::NewLine));
  211|  22.1k|                        break;
  212|  22.1k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   480k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 290k, False: 190k]
  ------------------
  217|   290k|                    {
  218|   290k|                        program.AddParseError(
  219|   290k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   290k|                        break;
  221|   290k|                    }
  222|       |
  223|   190k|                    phi::string_view label_name = current_token.GetText();
  224|   190k|                    label_name.remove_suffix(1u);
  225|       |
  226|   190k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 27.8k, False: 162k]
  ------------------
  227|  27.8k|                    {
  228|  27.8k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  27.8k|                                current_token.GetLineNumber().unsafe(),
  230|  27.8k|                                current_token.GetColumn().unsafe(), label_name));
  231|  27.8k|                        break;
  232|  27.8k|                    }
  233|       |
  234|   162k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 19.9k, False: 142k]
  ------------------
  235|  19.9k|                    {
  236|  19.9k|                        program.AddParseError(
  237|  19.9k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  19.9k|                        break;
  239|  19.9k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   142k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 131k, False: 11.7k]
  ------------------
  243|   131k|                    {
  244|       |                        // Find first defintions of label
  245|   131k|                        const Token* first_label_definition =
  246|   131k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   131k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   131k|                                    {
  249|   131k|                                        phi::string_view token_label_name = t.GetText();
  250|   131k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   131k|                                        if (token_label_name == label_name)
  253|   131k|                                        {
  254|   131k|                                            return true;
  255|   131k|                                        }
  256|   131k|                                    }
  257|       |
  258|   131k|                                    return false;
  259|   131k|                                });
  260|       |
  261|   131k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   131k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   131k|                                current_token, *first_label_definition));
  265|   131k|                        break;
  266|   131k|                    }
  267|       |
  268|  11.7k|                    program.m_JumpData[label_name] =
  269|  11.7k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  11.7k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  11.7k|                    break;
  276|   142k|                }
  277|       |
  278|  1.00M|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 1.00M, False: 3.57M]
  ------------------
  279|  1.00M|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 644k, False: 360k]
  ------------------
  280|   644k|                    {
  281|   644k|                        program.AddParseError(
  282|   644k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   644k|                        break;
  284|   644k|                    }
  285|       |
  286|   360k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   360k|                    PHI_ASSERT(current_token.HasHint());
  290|   360k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   360k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   360k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   360k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   360k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   360k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   360k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   360k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   360k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   580k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 551k, False: 28.8k]
  ------------------
  312|   551k|                    {
  313|       |                        // Get next token
  314|   551k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 679, False: 550k]
  ------------------
  315|    679|                        {
  316|    679|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    679|                                    current_token, number_of_argument_required.unsafe(),
  318|    679|                                    argument_num.unsafe()));
  319|    679|                            break;
  320|    679|                        }
  321|       |
  322|   550k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   550k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 123k, False: 426k]
  ------------------
  326|   123k|                        {
  327|   123k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 3.35k, False: 120k]
  ------------------
  328|  3.35k|                            {
  329|  3.35k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  3.35k|                            }
  331|       |
  332|   123k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   123k|                            continue;
  335|   123k|                        }
  336|       |
  337|   426k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 117k, False: 309k]
  ------------------
  338|   117k|                        {
  339|   117k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   117k|                                    token, number_of_argument_required.unsafe(),
  341|   117k|                                    argument_num.unsafe()));
  342|   117k|                            break;
  343|   117k|                        }
  344|       |
  345|   309k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   309k|                                parse_instruction_argument(
  347|   309k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   309k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 213k, False: 95.9k]
  ------------------
  349|   213k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   213k|                            break;
  352|   213k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  95.9k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  95.9k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  95.9k|                        argument_num++;
  359|  95.9k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  95.9k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   360k|                    program.m_Instructions.emplace_back(instruction);
  367|   360k|                    line_has_instruction = true;
  368|   360k|                    break;
  369|  1.00M|                }
  370|       |
  371|   664k|                default:
  ------------------
  |  Branch (371:17): [True: 664k, False: 3.91M]
  ------------------
  372|   664k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   664k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 331k, False: 332k]
  ------------------
  374|   331k|                    {
  375|   331k|                        expected_token_type = Token::Type::NewLine;
  376|   331k|                    }
  377|       |
  378|   664k|                    program.AddParseError(
  379|   664k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   664k|                    break;
  381|  4.57M|            }
  382|  4.57M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  13.9k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 990, False: 12.9k]
  ------------------
  386|    990|        {
  387|  10.6k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 9.68k, False: 990]
  ------------------
  388|  9.68k|            {
  389|  9.68k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  9.68k|                const Token& token = *it;
  392|  9.68k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 5.35k, False: 4.33k]
  ------------------
  393|  5.35k|                {
  394|  5.35k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  5.35k|                    --label_count;
  396|  5.35k|                }
  397|  9.68k|            }
  398|    990|        }
  399|       |
  400|  13.9k|        return program;
  401|  13.9k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  13.9k|    {
  405|  13.9k|        TokenStream tokens = Tokenize(source);
  406|  13.9k|        return Parse(tokens);
  407|  13.9k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   309k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   309k|        switch (token.GetType())
   37|   309k|        {
   38|  14.3k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 14.3k, False: 294k]
  ------------------
   39|  14.3k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 815, False: 13.5k]
  ------------------
   40|  14.3k|                                          ArgumentType::AddressDisplacement))
   41|    815|                {
   42|    815|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    815|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    815|                    return {};
   46|    815|                }
   47|       |
   48|       |                // Get address displacement
   49|  13.5k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  13.5k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  13.5k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 27, False: 13.5k]
  ------------------
   54|     27|                {
   55|     27|                    program.AddParseError(
   56|     27|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     27|                    return {};
   58|     27|                }
   59|       |
   60|  13.5k|                auto         it           = tokens.current_position();
   61|  13.5k|                const Token& first_token  = tokens.consume();
   62|  13.5k|                const Token& second_token = tokens.consume();
   63|  13.5k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  13.5k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 13.5k, False: 0]
  ------------------
   66|  13.5k|                {
   67|  13.5k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  13.5k|                            first_token, Token::Type::OpenBracket));
   69|  13.5k|                    return {};
   70|  13.5k|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  57.7k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 57.7k, False: 251k]
  ------------------
   97|  57.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 9.84k, False: 47.9k]
  ------------------
   98|  9.84k|                {
   99|  9.84k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  9.84k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  9.84k|                    return {};
  102|  9.84k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  47.9k|                return ConstructInstructionArgumentRegisterInt(
  108|  47.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  57.7k|            }
  110|  4.18k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 4.18k, False: 304k]
  ------------------
  111|  4.18k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 4.00k, False: 178]
  ------------------
  112|  4.00k|                {
  113|  4.00k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  4.00k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  4.00k|                    return {};
  116|  4.00k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    178|                return ConstructInstructionArgumentRegisterFloat(
  122|    178|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  4.18k|            }
  124|  18.1k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 18.1k, False: 290k]
  ------------------
  125|  18.1k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  18.1k|                return {};
  128|  4.18k|            }
  129|  65.5k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 65.5k, False: 243k]
  ------------------
  130|       |                // Parse as Label
  131|  65.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 12.6k, False: 52.8k]
  ------------------
  132|  12.6k|                {
  133|  12.6k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  12.6k|                            token, expected_argument_type, ArgumentType::Label));
  135|  12.6k|                    return {};
  136|  12.6k|                }
  137|       |
  138|  52.8k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 52.8k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  52.8k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 24.8k, False: 27.9k]
  ------------------
  145|  24.8k|                {
  146|  24.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  24.8k|                    return {};
  148|  24.8k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  27.9k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  52.8k|            }
  154|  27.1k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 27.1k, False: 281k]
  ------------------
  155|  27.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 6.35k, False: 20.7k]
  ------------------
  156|  6.35k|                {
  157|  6.35k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  6.35k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  6.35k|                    return {};
  160|  6.35k|                }
  161|       |
  162|  20.7k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 19.8k, False: 978]
  ------------------
  163|  19.8k|                {
  164|  19.8k|                    return ConstructInstructionArgumentImmediateValue(
  165|  19.8k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  19.8k|                }
  167|       |
  168|    978|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    978|                return {};
  170|  20.7k|            }
  171|       |
  172|   121k|            default:
  ------------------
  |  Branch (172:13): [True: 121k, False: 187k]
  ------------------
  173|   121k|                program.AddParseError(
  174|   121k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|   121k|                return {};
  176|   309k|        }
  177|   309k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  2.25M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.25M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 649k, False: 1.60M]
  ------------------
  248|   649k|                                    {
  249|   649k|                                        phi::string_view token_label_name = t.GetText();
  250|   649k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   649k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 131k, False: 518k]
  ------------------
  253|   131k|                                        {
  254|   131k|                                            return true;
  255|   131k|                                        }
  256|   649k|                                    }
  257|       |
  258|  2.12M|                                    return false;
  259|  2.25M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    456|    {
  354|    456|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 456]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    456|        m_CurrentProgram = &program;
  361|       |
  362|    456|        m_ProgramCounter               = 0u;
  363|    456|        m_Halted                       = false;
  364|    456|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    456|        m_LastRaisedException          = Exception::None;
  366|    456|        m_CurrentStepCount             = 0u;
  367|       |
  368|    456|        return true;
  369|    456|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  2.13M|    {
   13|  2.13M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 530k, False: 1.60M]
  ------------------
   14|   530k|        {
   15|   530k|            const char first_char = token[0u];
   16|   530k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 137k, False: 392k]
  |  Branch (16:38): [True: 61.2k, False: 331k]
  ------------------
   17|   198k|            {
   18|   198k|                const char second_char = token[1u];
   19|   198k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 198k, False: 728]
  |  Branch (19:43): [True: 157k, False: 41.0k]
  ------------------
   20|   157k|                {
   21|   157k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|   157k|                }
   23|   198k|            }
   24|   530k|        }
   25|  1.60M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 652k, False: 950k]
  ------------------
   26|   652k|        {
   27|   652k|            const char first_char = token[0u];
   28|   652k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 65.2k, False: 587k]
  |  Branch (28:38): [True: 27.2k, False: 560k]
  ------------------
   29|  92.5k|            {
   30|  92.5k|                const char second_char = token[1u];
   31|  92.5k|                const char third_char  = token[2u];
   32|       |
   33|  92.5k|                switch (second_char)
   34|  92.5k|                {
   35|  31.5k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 31.5k, False: 60.9k]
  ------------------
   36|  31.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 31.3k, False: 178]
  |  Branch (36:50): [True: 19.1k, False: 12.2k]
  ------------------
   37|  19.1k|                        {
   38|  19.1k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  19.1k|                        }
   40|  12.3k|                        break;
   41|  31.5k|                    }
   42|  50.5k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 50.5k, False: 41.9k]
  ------------------
   43|  50.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 50.4k, False: 124]
  |  Branch (43:50): [True: 36.6k, False: 13.7k]
  ------------------
   44|  36.6k|                        {
   45|  36.6k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  36.6k|                        }
   47|  13.8k|                        break;
   48|  50.5k|                    }
   49|  13.8k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 9.46k, False: 83.0k]
  ------------------
   50|  9.46k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 240, False: 9.22k]
  |  Branch (50:50): [True: 9.15k, False: 71]
  ------------------
   51|  9.39k|                        {
   52|  9.39k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  9.39k|                        }
   54|     71|                        break;
   55|  9.46k|                    }
   56|    954|                    default: {
  ------------------
  |  Branch (56:21): [True: 954, False: 91.5k]
  ------------------
   57|    954|                        break;
   58|  9.46k|                    }
   59|  92.5k|                }
   60|  92.5k|            }
   61|   652k|        }
   62|       |
   63|  1.91M|        return IntRegisterID::None;
   64|  2.13M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  1.91M|    {
   68|  1.91M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 373k, False: 1.53M]
  ------------------
   69|   373k|        {
   70|   373k|            const char first_char = token[0u];
   71|   373k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 28.5k, False: 344k]
  |  Branch (71:38): [True: 9.99k, False: 334k]
  ------------------
   72|  38.5k|            {
   73|  38.5k|                const char second_char = token[1u];
   74|  38.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 38.4k, False: 155]
  |  Branch (74:43): [True: 28.4k, False: 9.97k]
  ------------------
   75|  28.4k|                {
   76|  28.4k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  28.4k|                }
   78|  38.5k|            }
   79|   373k|        }
   80|  1.53M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 587k, False: 950k]
  ------------------
   81|   587k|        {
   82|   587k|            const char first_char = token[0u];
   83|   587k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 39.1k, False: 548k]
  |  Branch (83:38): [True: 15.2k, False: 533k]
  ------------------
   84|  54.3k|            {
   85|  54.3k|                const char second_char = token[1u];
   86|  54.3k|                const char third_char  = token[2u];
   87|       |
   88|  54.3k|                switch (second_char)
   89|  54.3k|                {
   90|  19.9k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 19.9k, False: 34.4k]
  ------------------
   91|  19.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 19.8k, False: 107]
  |  Branch (91:50): [True: 19.7k, False: 84]
  ------------------
   92|  19.7k|                        {
   93|  19.7k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  19.7k|                        }
   95|    191|                        break;
   96|  19.9k|                    }
   97|  15.1k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 15.1k, False: 39.2k]
  ------------------
   98|  15.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 1.79k, False: 13.3k]
  |  Branch (98:50): [True: 304, False: 1.49k]
  ------------------
   99|    304|                        {
  100|    304|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    304|                        }
  102|  14.8k|                        break;
  103|  15.1k|                    }
  104|  19.1k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 19.1k, False: 35.2k]
  ------------------
  105|  19.1k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 18.8k, False: 227]
  |  Branch (105:50): [True: 127, False: 100]
  ------------------
  106|  19.0k|                        {
  107|  19.0k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  19.0k|                        }
  109|    100|                        break;
  110|  19.1k|                    }
  111|    139|                    default: {
  ------------------
  |  Branch (111:21): [True: 139, False: 54.2k]
  ------------------
  112|    139|                        break;
  113|  19.1k|                    }
  114|  54.3k|                }
  115|  54.3k|            }
  116|   587k|        }
  117|       |
  118|  1.84M|        return FloatRegisterID::None;
  119|  1.91M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  2.17M|    {
  123|  2.17M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 544k, False: 1.63M]
  ------------------
  124|   544k|        {
  125|   544k|            const char c1 = token[0u];
  126|   544k|            const char c2 = token[1u];
  127|   544k|            const char c3 = token[2u];
  128|   544k|            const char c4 = token[3u];
  129|       |
  130|   544k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 73.1k, False: 471k]
  |  Branch (130:34): [True: 166, False: 471k]
  |  Branch (130:49): [True: 73.1k, False: 194]
  |  Branch (130:62): [True: 127, False: 67]
  ------------------
  131|   544k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 73.1k, False: 132]
  |  Branch (131:34): [True: 66, False: 66]
  |  Branch (131:49): [True: 73.1k, False: 66]
  |  Branch (131:62): [True: 0, False: 66]
  ------------------
  132|   544k|        }
  133|       |
  134|  1.63M|        return false;
  135|  2.17M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  3.72M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.44M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  14.1M|    {
   41|  14.1M|        return m_Type;
   42|  14.1M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  9.30M|    {
   51|  9.30M|        return m_LineNumber;
   52|  9.30M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  17.9M|    {
   56|  17.9M|        return m_Column;
   57|  17.9M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  12.3M|    {
   61|  12.3M|        return m_Text.length();
   62|  12.3M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.95M|    {
   66|  1.95M|        return m_Text;
   67|  1.95M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   394k|    {
   80|   394k|        return m_HasHint;
   81|   394k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   442k|    {
   85|   442k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   442k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   442k|                   m_Type == Type::ImmediateInteger);
   88|   442k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   442k|        return m_Hint;
   91|   442k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  13.9k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  13.9k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  13.9k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  13.5k|    {
   51|  13.5k|        auto it = m_Iterator;
   52|  54.2k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 40.6k, False: 13.5k]
  ------------------
   53|  40.6k|        {
   54|  40.6k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 27, False: 40.6k]
  ------------------
   55|     27|            {
   56|     27|                return false;
   57|     27|            }
   58|  40.6k|        }
   59|       |
   60|  13.5k|        return true;
   61|  13.5k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  5.14M|    {
   65|  5.14M|        return m_Iterator != m_Tokens.end();
   66|  5.14M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  5.16M|    {
   70|  5.16M|        return m_Iterator == m_Tokens.end();
   71|  5.16M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  5.16M|    {
   85|  5.16M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  5.16M|        return *m_Iterator++;
   91|  5.16M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  13.5k|    {
  164|  13.5k|        return m_Iterator;
  165|  13.5k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  13.9k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  13.9k|        return m_Tokens.begin();
  188|  13.9k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  13.9k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  13.9k|        return m_Tokens.end();
  206|  13.9k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    990|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    990|        return m_Tokens.rbegin();
  224|    990|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  9.68k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  9.68k|        return m_Tokens.rend();
  233|  9.68k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  13.9k|    {
   66|  13.9k|        TokenStream tokens;
   67|       |
   68|  13.9k|        phi::string_view current_token;
   69|       |
   70|  13.9k|        phi::u64 current_line_number{1u};
   71|  13.9k|        phi::u64 current_column{1u};
   72|  13.9k|        phi::u64 token_begin{0u};
   73|       |
   74|  13.9k|        phi::boolean parsing_comment{false};
   75|       |
   76|  11.8M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 11.8M, False: 13.9k]
  ------------------
   77|  11.8M|        {
   78|  11.8M|            const char c{source.at(i)};
   79|       |
   80|  11.8M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.83M, False: 9.98M]
  ------------------
   81|  1.83M|            {
   82|  1.83M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 546k, False: 1.28M]
  ------------------
   83|   546k|                {
   84|       |                    // Skip empty lines
   85|   546k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   546k|                                        current_line_number, current_column);
   87|       |
   88|   546k|                    parsing_comment = false;
   89|   546k|                    current_line_number += 1u;
   90|   546k|                    current_column = 1u;
   91|   546k|                    continue;
   92|   546k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.28M|                tokens.emplace_back(ParseToken(
   96|  1.28M|                        source.substring_view(
   97|  1.28M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.28M|                                current_token.length()),
   99|  1.28M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.28M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.28M|                                    current_line_number, current_column);
  103|       |
  104|  1.28M|                current_token   = phi::string_view{};
  105|  1.28M|                parsing_comment = false;
  106|  1.28M|                current_line_number += 1u;
  107|  1.28M|                current_column = 0u;
  108|  1.28M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  9.98M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 89.8k, False: 9.89M]
  |  Branch (110:34): [True: 754k, False: 9.14M]
  ------------------
  111|   844k|            {
  112|   844k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 713k, False: 131k]
  ------------------
  113|   713k|                {
  114|   713k|                    token_begin = i;
  115|   713k|                }
  116|   131k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 76.0k, False: 55.1k]
  ------------------
  117|  76.0k|                {
  118|  76.0k|                    tokens.emplace_back(ParseToken(
  119|  76.0k|                            source.substring_view(
  120|  76.0k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  76.0k|                                    current_token.length()),
  122|  76.0k|                            current_line_number, current_column - current_token.length()));
  123|  76.0k|                    token_begin   = i;
  124|  76.0k|                    current_token = phi::string_view{};
  125|  76.0k|                }
  126|       |
  127|   844k|                parsing_comment = true;
  128|   844k|                current_token   = source.substring_view(
  129|   844k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   844k|                        current_token.length() + 1u);
  131|   844k|            }
  132|  9.14M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 929k, False: 8.21M]
  ------------------
  133|   929k|            {
  134|       |                // simply append the character
  135|   929k|                current_token = source.substring_view(
  136|   929k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   929k|                        current_token.length() + 1u);
  138|   929k|            }
  139|  8.21M|            else
  140|  8.21M|            {
  141|       |                // Not parsing a comment
  142|  8.21M|                switch (c)
  143|  8.21M|                {
  144|   975k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 975k, False: 7.23M]
  ------------------
  145|   975k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 517, False: 8.21M]
  ------------------
  146|   975k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 8.21M]
  ------------------
  147|   975k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 3.85k, False: 971k]
  ------------------
  148|  3.85k|                        {
  149|  3.85k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  3.85k|                            continue;
  152|  3.85k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   971k|                        tokens.emplace_back(ParseToken(
  156|   971k|                                source.substring_view(
  157|   971k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   971k|                                        current_token.length()),
  159|   971k|                                current_line_number, current_column - current_token.length()));
  160|   971k|                        current_token = phi::string_view{};
  161|   971k|                        break;
  162|   214k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 214k, False: 7.99M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|   214k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 195k, False: 19.7k]
  ------------------
  165|   195k|                        {
  166|   195k|                            current_token = source.substring_view(
  167|   195k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|   195k|                                    current_token.length() + 1u);
  169|   195k|                            tokens.emplace_back(ParseToken(
  170|   195k|                                    source.substring_view(
  171|   195k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|   195k|                                                    token_begin),
  173|   195k|                                            current_token.length()),
  174|   195k|                                    current_line_number,
  175|   195k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|   195k|                            current_token = phi::string_view{};
  178|   195k|                        }
  179|  19.7k|                        else
  180|  19.7k|                        {
  181|       |                            // Orphan colon
  182|  19.7k|                            token_begin = i;
  183|       |
  184|  19.7k|                            tokens.emplace_back(
  185|  19.7k|                                    Token::Type::Colon,
  186|  19.7k|                                    source.substring_view(
  187|  19.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  19.7k|                                                    token_begin),
  189|  19.7k|                                            1u),
  190|  19.7k|                                    current_line_number, current_column);
  191|  19.7k|                        }
  192|   214k|                        break;
  193|   354k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 354k, False: 7.85M]
  ------------------
  194|   418k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 63.6k, False: 8.14M]
  ------------------
  195|   419k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 980, False: 8.21M]
  ------------------
  196|   419k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 359k, False: 59.4k]
  ------------------
  197|   359k|                        {
  198|   359k|                            tokens.emplace_back(ParseToken(
  199|   359k|                                    source.substring_view(
  200|   359k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   359k|                                                    token_begin),
  202|   359k|                                            current_token.length()),
  203|   359k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   359k|                            current_token = phi::string_view{};
  206|   359k|                        }
  207|       |
  208|   419k|                        Token::Type type;
  209|   419k|                        switch (c)
  210|   419k|                        {
  211|   354k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 354k, False: 64.6k]
  ------------------
  212|   354k|                                type = Token::Type::Comma;
  213|   354k|                                break;
  214|  63.6k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 63.6k, False: 355k]
  ------------------
  215|  63.6k|                                type = Token::Type::OpenBracket;
  216|  63.6k|                                break;
  217|    980|                            case ')':
  ------------------
  |  Branch (217:29): [True: 980, False: 418k]
  ------------------
  218|    980|                                type = Token::Type::ClosingBracket;
  219|    980|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 419k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   419k|#endif
  225|   419k|                        }
  226|       |
  227|   419k|                        token_begin = i;
  228|       |
  229|   419k|                        tokens.emplace_back(
  230|   419k|                                type,
  231|   419k|                                source.substring_view(
  232|   419k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   419k|                                        1u),
  234|   419k|                                current_line_number, current_column);
  235|   419k|                        break;
  236|       |
  237|  6.60M|                    default:
  ------------------
  |  Branch (237:21): [True: 6.60M, False: 1.60M]
  ------------------
  238|  6.60M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 2.10M, False: 4.49M]
  ------------------
  239|  2.10M|                        {
  240|  2.10M|                            token_begin = i;
  241|  2.10M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  6.60M|                        current_token = source.substring_view(
  245|  6.60M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  6.60M|                                current_token.length() + 1u);
  247|  8.21M|                }
  248|  8.21M|            }
  249|       |
  250|  11.2M|            current_column += 1u;
  251|  11.2M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  13.9k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 4.33k, False: 9.56k]
  ------------------
  255|  4.33k|        {
  256|  4.33k|            tokens.emplace_back(
  257|  4.33k|                    ParseToken(source.substring_view(
  258|  4.33k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  4.33k|                                       current_token.length()),
  260|  4.33k|                               current_line_number, current_column - current_token.length()));
  261|  4.33k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  13.9k|        tokens.finalize();
  265|       |
  266|  13.9k|        return tokens;
  267|  13.9k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  2.89M|    {
   14|  2.89M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 81.7k, False: 2.81M]
  |  Branch (14:13): [True: 75.0k, False: 2.82M]
  |  Branch (14:36): [True: 75.0k, False: 6.63k]
  ------------------
   15|  75.0k|        {
   16|  75.0k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  75.0k|            if (number)
  ------------------
  |  Branch (18:17): [True: 57.1k, False: 17.9k]
  ------------------
   19|  57.1k|            {
   20|  57.1k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  57.1k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  57.1k|            }
   23|       |
   24|  17.9k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  75.0k|        }
   26|       |
   27|  2.82M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 34.9k, False: 2.78M]
  |  Branch (27:13): [True: 789k, False: 2.03M]
  |  Branch (27:36): [True: 754k, False: 2.03M]
  ------------------
   28|   789k|        {
   29|   789k|            return {Token::Type::Comment, token, line_number, column};
   30|   789k|        }
   31|       |
   32|  2.03M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 67.2k, False: 1.96M]
  ------------------
   33|  67.2k|        {
   34|  67.2k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  67.2k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  67.2k|        }
   37|       |
   38|  1.96M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 73.1k, False: 1.89M]
  ------------------
   39|  73.1k|        {
   40|  73.1k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  73.1k|        }
   42|       |
   43|  1.89M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 196k, False: 1.69M]
  ------------------
   44|   196k|        {
   45|   196k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   196k|                    static_cast<phi::uint32_t>(id)};
   47|   196k|        }
   48|       |
   49|  1.69M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 67.4k, False: 1.62M]
  ------------------
   50|  67.4k|        {
   51|  67.4k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  67.4k|                    static_cast<phi::uint32_t>(id)};
   53|  67.4k|        }
   54|       |
   55|  1.62M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.05M, False: 572k]
  ------------------
   56|  1.05M|        {
   57|  1.05M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.05M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.05M|        }
   60|       |
   61|   572k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  1.62M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  13.9k|    {
   53|       |        // Constants
   54|  13.9k|        constexpr std::uint8_t number_of_opcodes =
   55|  13.9k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  13.9k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  13.9k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  13.9k|        std::string ret;
   60|       |
   61|  2.66M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 2.65M, False: 13.6k]
  ------------------
   62|  2.65M|        {
   63|  2.65M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  2.65M|            switch (current_value)
   66|  2.65M|            {
   67|       |                // OpCode
   68|   931k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 931k, False: 1.72M]
  ------------------
   69|       |                    // Has one more value
   70|   931k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 930k, False: 852]
  ------------------
   71|   930k|                    {
   72|   930k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   930k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   930k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 38, False: 930k]
  ------------------
   77|     38|                        {
   78|     38|                            return detail::ErrorString;
   79|     38|                        }
   80|   930k|                    }
   81|   931k|                    break;
   82|   931k|                }
   83|       |
   84|       |                // Int Register
   85|   931k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 209k, False: 2.44M]
  ------------------
   86|       |                    // Has one more value
   87|   209k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 209k, False: 216]
  ------------------
   88|   209k|                    {
   89|   209k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   209k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   209k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 6, False: 209k]
  ------------------
   93|      6|                        {
   94|      6|                            return detail::ErrorString;
   95|      6|                        }
   96|   209k|                    }
   97|   209k|                    break;
   98|   209k|                }
   99|       |
  100|       |                // Float register
  101|   209k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 73.6k, False: 2.58M]
  ------------------
  102|       |                    // Has one more value
  103|  73.6k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 73.6k, False: 1]
  ------------------
  104|  73.6k|                    {
  105|  73.6k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  73.6k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  73.6k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 27, False: 73.6k]
  ------------------
  109|     27|                        {
  110|     27|                            return detail::ErrorString;
  111|     27|                        }
  112|  73.6k|                    }
  113|  73.6k|                    break;
  114|  73.6k|                }
  115|       |
  116|       |                // Floating point status register
  117|  74.3k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 74.3k, False: 2.58M]
  ------------------
  118|  74.3k|                    ret += "FPSR";
  119|  74.3k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 10, False: 74.3k]
  ------------------
  120|     10|                    {
  121|     10|                        return detail::ErrorString;
  122|     10|                    }
  123|       |
  124|  74.3k|                    break;
  125|  74.3k|                }
  126|       |
  127|       |                // Immediate integer
  128|  94.3k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 94.3k, False: 2.56M]
  ------------------
  129|  94.3k|                    ret += "#";
  130|  94.3k|                    [[fallthrough]];
  131|  94.3k|                }
  132|       |
  133|       |                // Integer literal
  134|   183k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 88.9k, False: 2.56M]
  ------------------
  135|   183k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   183k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 183k, False: 289]
  ------------------
  138|   183k|                    {
  139|   183k|                        std::int16_t value = 0;
  140|       |
  141|   548k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 365k, False: 183k]
  ------------------
  142|   365k|                        {
  143|   365k|                            value <<= 8;
  144|   365k|                            value &= data[index++];
  145|   365k|                        }
  146|       |
  147|   183k|                        ret += std::to_string(value);
  148|   183k|                    }
  149|   183k|                    break;
  150|  94.3k|                }
  151|       |
  152|       |                // Label
  153|  34.3k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 34.3k, False: 2.62M]
  ------------------
  154|  34.3k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  34.3k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 34.3k, False: 33]
  ------------------
  157|  34.3k|                    {
  158|  34.3k|                        std::string label_name = "lbl_";
  159|       |
  160|   205k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 171k, False: 34.3k]
  ------------------
  161|   171k|                        {
  162|   171k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   171k|                            label_name += c;
  165|   171k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  34.3k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 34.1k, False: 187]
  |  Branch (168:45): [True: 23.2k, False: 10.8k]
  ------------------
  169|  23.2k|                        {
  170|  23.2k|                            label_name += ':';
  171|  23.2k|                            ret += label_name;
  172|  23.2k|                        }
  173|  11.0k|                        else
  174|  11.0k|                        {
  175|  11.0k|                            ret += label_name;
  176|  11.0k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 3, False: 11.0k]
  ------------------
  177|      3|                            {
  178|      3|                                return detail::ErrorString;
  179|      3|                            }
  180|  11.0k|                        }
  181|  34.3k|                    }
  182|  34.3k|                    break;
  183|  34.3k|                }
  184|       |
  185|       |                // Newline
  186|   395k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 395k, False: 2.25M]
  ------------------
  187|   395k|                    ret += '\n';
  188|   395k|                    break;
  189|  34.3k|                }
  190|       |
  191|       |                // Comment
  192|   752k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 752k, False: 1.90M]
  ------------------
  193|   752k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   752k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 752k, False: 532]
  ------------------
  196|   752k|                    {
  197|   752k|                        std::string comment = "; ";
  198|       |
  199|  4.50M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 3.75M, False: 752k]
  ------------------
  200|  3.75M|                        {
  201|  3.75M|                            comment += static_cast<char>(data[index++]);
  202|  3.75M|                        }
  203|       |
  204|   752k|                        ret += comment + '\n';
  205|   752k|                    }
  206|   752k|                    break;
  207|  34.3k|                }
  208|       |
  209|       |                // Ignore
  210|    170|                default:
  ------------------
  |  Branch (210:17): [True: 170, False: 2.65M]
  ------------------
  211|    170|                    return detail::ErrorString;
  212|  2.65M|            }
  213|  2.65M|        }
  214|       |
  215|  13.6k|        return ret;
  216|  13.9k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|  1.29M|        {
   20|  1.29M|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 1.29M, False: 3.60k]
  ------------------
   21|  1.29M|            {
   22|  1.29M|                std::uint8_t val = data[index++];
   23|  1.29M|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 974k, False: 321k]
  ------------------
   24|   974k|                {
   25|   974k|                    text += ' ';
   26|   974k|                }
   27|   321k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 321k, False: 84]
  ------------------
   28|   321k|                {
   29|   321k|                    text += ',';
   30|   321k|                }
   31|     84|                else
   32|     84|                {
   33|     84|                    return false;
   34|     84|                }
   35|  1.29M|            }
   36|       |
   37|  1.29M|            return true;
   38|  1.29M|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   171k|        {
   42|   171k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 131k, False: 39.8k]
  ------------------
   43|   131k|            {
   44|   131k|                return '_';
   45|   131k|            }
   46|       |
   47|  39.8k|            return c;
   48|   171k|        }

LLVMFuzzerTestOneInput:
   11|  13.9k|{
   12|  13.9k|    static dlxemu::Emulator emu;
   13|       |
   14|  13.9k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|  13.9k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  13.9k|    editor.SetText(source);
   20|  13.9k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  13.9k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  13.9k|    editor.ColorizeInternal();
   25|       |
   26|  13.9k|    return 0;
   27|  13.9k|}


_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  46.8k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  9.36k|    {
  240|  9.36k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 6.57k, False: 2.79k]
  ------------------
  241|  6.57k|        {
  242|  6.57k|            return m_Line < other.m_Line;
  243|  6.57k|        }
  244|       |
  245|  2.79k|        return m_Column <= other.m_Column;
  246|  9.36k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  6.33M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  9.36k|    {
  349|  9.36k|        m_ErrorMarkers.clear();
  350|  9.36k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  9.36k|    {
  414|  9.36k|        m_Breakpoints.clear();
  415|  9.36k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  9.36k|    {
  494|  9.36k|        m_Lines.clear();
  495|  9.36k|        ResetState();
  496|  9.36k|        m_Lines.emplace_back(Line());
  497|       |
  498|  9.36k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 8.03M, False: 9.36k]
  ------------------
  499|  8.03M|        {
  500|  8.03M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 23.4k, False: 8.01M]
  |  Branch (500:17): [True: 576k, False: 7.45M]
  ------------------
  501|  8.03M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 1.69M, False: 6.31M]
  |  Branch (501:48): [True: 571k, False: 1.12M]
  |  Branch (501:69): [True: 553k, False: 17.9k]
  ------------------
  502|   576k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   576k|            }
  505|  7.45M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.12M, False: 6.33M]
  ------------------
  506|  1.12M|            {
  507|  1.12M|                m_Lines.emplace_back(Line());
  508|  1.12M|            }
  509|  6.33M|            else
  510|  6.33M|            {
  511|  6.33M|                m_Lines.back().emplace_back(
  512|  6.33M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  6.33M|            }
  514|  8.03M|        }
  515|       |
  516|  9.36k|        m_TextChanged = true;
  517|  9.36k|        m_ScrollToTop = true;
  518|       |
  519|  9.36k|        m_UndoBuffer.clear();
  520|  9.36k|        m_UndoIndex = 0u;
  521|       |
  522|  9.36k|        Colorize();
  523|  9.36k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  9.36k|    {
  527|  9.36k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  9.36k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  9.36k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  9.36k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  9.36k|        const phi::u32 to_line =
 1724|  9.36k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 9.36k, False: 0]
  ------------------
 1725|  9.36k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  9.36k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  9.36k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  9.36k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  9.36k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  9.36k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  9.36k|    {
 1839|  9.36k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  9.36k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  9.36k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  9.36k|        std::string result;
 1844|       |
 1845|  9.36k|        phi::u32   lstart = start.m_Line;
 1846|  9.36k|        phi::u32   lend   = end.m_Line;
 1847|  9.36k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  9.36k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  9.36k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  9.36k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.14M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.13M, False: 9.36k]
  ------------------
 1853|  1.13M|        {
 1854|  1.13M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.13M|            size += m_Lines[i.unsafe()].size();
 1856|  1.13M|        }
 1857|       |
 1858|  9.36k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  7.46M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 3.02M, False: 4.44M]
  |  Branch (1860:16): [True: 7.45M, False: 9.36k]
  |  Branch (1860:33): [True: 4.43M, False: 9.36k]
  ------------------
 1861|  7.45M|        {
 1862|  7.45M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  7.45M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  7.45M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 6.33M, False: 1.12M]
  ------------------
 1866|  6.33M|            {
 1867|  6.33M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  6.33M|                istart++;
 1869|  6.33M|            }
 1870|  1.12M|            else
 1871|  1.12M|            {
 1872|  1.12M|                istart = 0u;
 1873|  1.12M|                ++lstart;
 1874|       |
 1875|  1.12M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.12M, False: 0]
  ------------------
 1876|  1.12M|                {
 1877|  1.12M|                    result += '\n';
 1878|  1.12M|                }
 1879|  1.12M|            }
 1880|  7.45M|        }
 1881|       |
 1882|  9.36k|        return result;
 1883|  9.36k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  18.7k|    {
 2422|  18.7k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  18.7k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  18.7k|        phi::u32    index = 0u;
 2426|  1.89M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 1.88M, False: 11.2k]
  |  Branch (2426:35): [True: 1.87M, False: 18.7k]
  |  Branch (2426:58): [True: 1.87M, False: 7.45k]
  ------------------
 2427|  1.87M|        {
 2428|  1.87M|            PHI_ASSERT(index < line.size());
 2429|  1.87M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  1.87M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 1.87M]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|  1.87M|            else
 2436|  1.87M|            {
 2437|  1.87M|                ++column;
 2438|  1.87M|            }
 2439|       |
 2440|  1.87M|            index += UTF8CharLength(character);
 2441|  1.87M|        }
 2442|       |
 2443|  18.7k|        return index;
 2444|  18.7k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  9.36k|    {
 2494|  9.36k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 9.36k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  9.36k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  9.36k|        phi::u32    col  = 0u;
 2501|       |
 2502|  1.88M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 1.87M, False: 9.36k]
  ------------------
 2503|  1.87M|        {
 2504|  1.87M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  1.87M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 1.87M]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|  1.87M|            else
 2510|  1.87M|            {
 2511|  1.87M|                col++;
 2512|  1.87M|            }
 2513|       |
 2514|  1.87M|            i += UTF8CharLength(character);
 2515|  1.87M|        }
 2516|       |
 2517|  9.36k|        return col;
 2518|  9.36k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  9.36k|    {
 2522|  9.36k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  9.36k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  9.36k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  3.18M|    {
 3661|  3.18M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  3.18M|        switch (token.GetType())
 3665|  3.18M|        {
 3666|   473k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 473k, False: 2.71M]
  ------------------
 3667|   473k|                palette_index = PaletteIndex::Comment;
 3668|   473k|                break;
 3669|  42.0k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 42.0k, False: 3.14M]
  ------------------
 3670|  79.0k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 36.9k, False: 3.14M]
  ------------------
 3671|  79.0k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  79.0k|                break;
 3673|   673k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 673k, False: 2.51M]
  ------------------
 3674|   673k|                palette_index = PaletteIndex::OpCode;
 3675|   673k|                break;
 3676|  40.5k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 40.5k, False: 3.14M]
  ------------------
 3677|   173k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 133k, False: 3.05M]
  ------------------
 3678|   224k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 50.7k, False: 3.13M]
  ------------------
 3679|   224k|                palette_index = PaletteIndex::Register;
 3680|   224k|                break;
 3681|  1.12M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.12M, False: 2.05M]
  ------------------
 3682|  1.12M|                return;
 3683|   605k|            default:
  ------------------
  |  Branch (3683:13): [True: 605k, False: 2.57M]
  ------------------
 3684|   605k|                break;
 3685|  3.18M|        }
 3686|       |
 3687|  2.05M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  2.05M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  2.05M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  7.74M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 5.69M, False: 2.05M]
  ------------------
 3692|  5.69M|        {
 3693|  5.69M|            PHI_ASSERT(index < line.size());
 3694|  5.69M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  5.69M|        }
 3696|  2.05M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  9.36k|    {
 3700|  9.36k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  9.36k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 3.18M, False: 9.36k]
  ------------------
 3703|  3.18M|        {
 3704|  3.18M|            ColorizeToken(token);
 3705|  3.18M|        }
 3706|  9.36k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  9.36k|    {
 3710|  9.36k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  9.36k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  9.36k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  9.36k|        ClearBreakPoints();
 3716|  9.36k|        ClearErrorMarkers();
 3717|  9.36k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  1.87M|{
  135|  1.87M|    return UTF8CharLength(static_cast<char>(characater));
  136|  1.87M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  3.75M|{
  105|  3.75M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 3.75M]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|  3.75M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 3.75M]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|  3.75M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 3.75M]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|  3.75M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 3.75M]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|  3.75M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 3.75M]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|  3.75M|    return 1_u8;
  131|  3.75M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  9.36k|    {
  175|  9.36k|        return m_DLXProgram;
  176|  9.36k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  9.36k|    {
  180|  9.36k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  9.36k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 250, False: 9.11k]
  ------------------
  183|    250|        {
  184|    250|            m_Processor.LoadProgram(m_DLXProgram);
  185|    250|        }
  186|  9.36k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  9.36k|    {
  200|  9.36k|        return m_CodeEditor;
  201|  9.36k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   797k|        {
  169|   797k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   797k|            switch (index.unsafe())
  172|   797k|            {
  173|   340k|                case 0:
  ------------------
  |  Branch (173:17): [True: 340k, False: 456k]
  ------------------
  174|   340k|                    return m_Arg1Type;
  175|       |
  176|   237k|                case 1:
  ------------------
  |  Branch (176:17): [True: 237k, False: 559k]
  ------------------
  177|   237k|                    return m_Arg2Type;
  178|       |
  179|   219k|                case 2:
  ------------------
  |  Branch (179:17): [True: 219k, False: 578k]
  ------------------
  180|   219k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 797k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   797k|#endif
  187|   797k|            }
  188|   797k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   207k|        {
  195|   207k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   207k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 207k, False: 178]
  ------------------
  199|   207k|            {
  200|   207k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   207k|            }
  202|   207k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 170k, False: 36.8k]
  ------------------
  203|   170k|            {
  204|   170k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   170k|            }
  206|   207k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 116k, False: 90.7k]
  ------------------
  207|   116k|            {
  208|   116k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   116k|            }
  210|       |
  211|   207k|            return number_of_argument_required;
  212|   207k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   207k|        {
  221|   207k|            return m_Executor;
  222|   207k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  96.6k|    {
   38|  96.6k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  96.6k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  96.6k|                                         static_cast<underlying_t>(rhs));
   42|  96.6k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  96.6k|    {
   55|  96.6k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  96.6k|        return static_cast<underlying_t>(type & test) != 0;
   58|  96.6k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|   607k|    {
  205|   607k|        switch (value)
  206|   607k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   118k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|   118k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 118k, False: 489k]
  |  |  |  |  ------------------
  |  |  |  |  209|   118k|        return #name;
  |  |  ------------------
  |  |   16|   118k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  11.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.5k, False: 595k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.5k|        return #name;
  |  |  ------------------
  |  |   17|  20.4k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  20.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.4k, False: 586k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.4k|        return #name;
  |  |  ------------------
  |  |   18|  33.2k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  33.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 33.2k, False: 574k]
  |  |  |  |  ------------------
  |  |  |  |  209|  33.2k|        return #name;
  |  |  ------------------
  |  |   19|  33.2k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  7.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.60k, False: 599k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.60k|        return #name;
  |  |  ------------------
  |  |   20|  9.65k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.65k, False: 597k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.65k|        return #name;
  |  |  ------------------
  |  |   21|  9.65k|                                                                                                   \
  |  |   22|  9.65k|    /* Sub */                                                                                      \
  |  |   23|  9.65k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  6.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.61k, False: 600k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.61k|        return #name;
  |  |  ------------------
  |  |   24|  14.1k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  14.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.1k, False: 593k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.1k|        return #name;
  |  |  ------------------
  |  |   25|  14.1k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.66k, False: 604k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.66k|        return #name;
  |  |  ------------------
  |  |   26|  7.85k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  7.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.85k, False: 599k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.85k|        return #name;
  |  |  ------------------
  |  |   27|  7.85k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.51k, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.51k|        return #name;
  |  |  ------------------
  |  |   28|  4.51k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    115|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 115, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    115|        return #name;
  |  |  ------------------
  |  |   29|    115|                                                                                                   \
  |  |   30|    115|    /* Multiplication */                                                                           \
  |  |   31|    115|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 108, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    108|        return #name;
  |  |  ------------------
  |  |   32|    108|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |   33|    183|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    183|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 183, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    183|        return #name;
  |  |  ------------------
  |  |   34|  13.8k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  13.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.8k, False: 593k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.8k|        return #name;
  |  |  ------------------
  |  |   35|  16.7k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  16.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.7k, False: 590k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.7k|        return #name;
  |  |  ------------------
  |  |   36|  16.7k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    136|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 136, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    136|        return #name;
  |  |  ------------------
  |  |   37|    136|                                                                                                   \
  |  |   38|    136|    /* Division */                                                                                 \
  |  |   39|  8.55k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  8.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.55k, False: 598k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.55k|        return #name;
  |  |  ------------------
  |  |   40|  8.55k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.88k, False: 605k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.88k|        return #name;
  |  |  ------------------
  |  |   41|  4.74k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.74k, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.74k|        return #name;
  |  |  ------------------
  |  |   42|  11.1k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  11.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.1k, False: 596k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.1k|        return #name;
  |  |  ------------------
  |  |   43|  11.1k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   44|  5.92k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.92k, False: 601k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.92k|        return #name;
  |  |  ------------------
  |  |   45|  5.92k|                                                                                                   \
  |  |   46|  5.92k|    /* Shift left (logical) */                                                                     \
  |  |   47|  5.92k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.93k, False: 603k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.93k|        return #name;
  |  |  ------------------
  |  |   48|  4.65k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.65k, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.65k|        return #name;
  |  |  ------------------
  |  |   49|  4.65k|                                                                                                   \
  |  |   50|  4.65k|    /* Shift right (logical) */                                                                    \
  |  |   51|  4.65k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |   52|    250|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    250|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 250, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    250|        return #name;
  |  |  ------------------
  |  |   53|    250|                                                                                                   \
  |  |   54|    250|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  15.1k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  15.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.1k, False: 592k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.1k|        return #name;
  |  |  ------------------
  |  |   56|  15.1k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.74k, False: 605k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.74k|        return #name;
  |  |  ------------------
  |  |   57|  1.74k|                                                                                                   \
  |  |   58|  1.74k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  8.60k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  8.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.60k, False: 598k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.60k|        return #name;
  |  |  ------------------
  |  |   60|  8.60k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    349|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 349, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    349|        return #name;
  |  |  ------------------
  |  |   61|    349|                                                                                                   \
  |  |   62|    349|    /* Logic */                                                                                    \
  |  |   63|    349|                                                                                                   \
  |  |   64|    349|    /* And */                                                                                      \
  |  |   65|  4.92k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.92k, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.92k|        return #name;
  |  |  ------------------
  |  |   66|  4.92k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    484|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 484, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    484|        return #name;
  |  |  ------------------
  |  |   67|    484|                                                                                                   \
  |  |   68|    484|    /* Or */                                                                                       \
  |  |   69|  1.60k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.60k, False: 605k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.60k|        return #name;
  |  |  ------------------
  |  |   70|  1.60k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   71|     70|                                                                                                   \
  |  |   72|     70|    /* XOR */                                                                                      \
  |  |   73|  2.35k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.35k, False: 604k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.35k|        return #name;
  |  |  ------------------
  |  |   74|  2.35k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|    143|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    143|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 143, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    143|        return #name;
  |  |  ------------------
  |  |   80|  2.76k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.76k, False: 604k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.76k|        return #name;
  |  |  ------------------
  |  |   81|  2.76k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |   82|  13.2k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  13.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.2k, False: 594k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.2k|        return #name;
  |  |  ------------------
  |  |   83|  13.2k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    152|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 152, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    152|        return #name;
  |  |  ------------------
  |  |   84|    310|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    310|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 310, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    310|        return #name;
  |  |  ------------------
  |  |   85|    310|                                                                                                   \
  |  |   86|    310|    /* Greater than */                                                                             \
  |  |   87|    310|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    212|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 212, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    212|        return #name;
  |  |  ------------------
  |  |   88|  2.34k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.34k, False: 604k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.34k|        return #name;
  |  |  ------------------
  |  |   89|  2.34k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |   90|  8.41k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  8.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.41k, False: 598k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.41k|        return #name;
  |  |  ------------------
  |  |   91|  10.0k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  10.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.0k, False: 597k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.0k|        return #name;
  |  |  ------------------
  |  |   92|  10.0k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.89k, False: 603k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.89k|        return #name;
  |  |  ------------------
  |  |   93|  3.89k|                                                                                                   \
  |  |   94|  3.89k|    /* Less than or equal */                                                                       \
  |  |   95|  10.4k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  10.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.4k, False: 596k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.4k|        return #name;
  |  |  ------------------
  |  |   96|  18.8k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  18.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 18.8k, False: 588k]
  |  |  |  |  ------------------
  |  |  |  |  209|  18.8k|        return #name;
  |  |  ------------------
  |  |   97|  18.8k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.29k, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.29k|        return #name;
  |  |  ------------------
  |  |   98|  1.29k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    733|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 733, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    733|        return #name;
  |  |  ------------------
  |  |   99|  3.45k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.45k, False: 603k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.45k|        return #name;
  |  |  ------------------
  |  |  100|  3.45k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    840|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 840, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    840|        return #name;
  |  |  ------------------
  |  |  101|    840|                                                                                                   \
  |  |  102|    840|    /* Greater than or equal */                                                                    \
  |  |  103|    840|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 216, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    216|        return #name;
  |  |  ------------------
  |  |  104|    216|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    136|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 136, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    136|        return #name;
  |  |  ------------------
  |  |  105|  9.24k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.24k, False: 598k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.24k|        return #name;
  |  |  ------------------
  |  |  106|  13.1k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  13.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.1k, False: 594k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.1k|        return #name;
  |  |  ------------------
  |  |  107|  13.1k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |  108|  14.8k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  14.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.8k, False: 592k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.8k|        return #name;
  |  |  ------------------
  |  |  109|  14.8k|                                                                                                   \
  |  |  110|  14.8k|    /* Equal */                                                                                    \
  |  |  111|  14.8k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    166|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 166, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    166|        return #name;
  |  |  ------------------
  |  |  112|  2.66k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.66k, False: 604k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.66k|        return #name;
  |  |  ------------------
  |  |  113|  2.66k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    962|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 962, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    962|        return #name;
  |  |  ------------------
  |  |  114|  19.1k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  19.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 19.1k, False: 588k]
  |  |  |  |  ------------------
  |  |  |  |  209|  19.1k|        return #name;
  |  |  ------------------
  |  |  115|  19.1k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    146|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 146, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    146|        return #name;
  |  |  ------------------
  |  |  116|    146|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  117|     67|                                                                                                   \
  |  |  118|     67|    /* Not equal */                                                                                \
  |  |  119|    176|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    176|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 176, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    176|        return #name;
  |  |  ------------------
  |  |  120|    218|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 218, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    218|        return #name;
  |  |  ------------------
  |  |  121|  8.96k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  8.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.96k, False: 598k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.96k|        return #name;
  |  |  ------------------
  |  |  122|  8.96k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  123|     66|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  124|     67|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  125|     67|                                                                                                   \
  |  |  126|     67|    /* Conditional branching */                                                                    \
  |  |  127|     67|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|  6.79k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.79k, False: 600k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.79k|        return #name;
  |  |  ------------------
  |  |  129|  11.0k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  11.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.0k, False: 596k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.0k|        return #name;
  |  |  ------------------
  |  |  130|  17.2k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  17.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.2k, False: 590k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.2k|        return #name;
  |  |  ------------------
  |  |  131|  17.2k|                                                                                                   \
  |  |  132|  17.2k|    /* Unconditional branching */                                                                  \
  |  |  133|  17.2k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 91, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     91|        return #name;
  |  |  ------------------
  |  |  134|     91|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     80|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |  136|     80|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  137|     71|                                                                                                   \
  |  |  138|     71|    /* Loading data */                                                                             \
  |  |  139|     79|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  140|  4.49k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  4.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.49k, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.49k|        return #name;
  |  |  ------------------
  |  |  141|  4.49k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 110, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    110|        return #name;
  |  |  ------------------
  |  |  142|  8.54k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  8.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.54k, False: 598k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.54k|        return #name;
  |  |  ------------------
  |  |  143|  8.54k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |  144|    190|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    190|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 190, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    190|        return #name;
  |  |  ------------------
  |  |  145|    190|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|  5.44k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  5.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.44k, False: 601k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.44k|        return #name;
  |  |  ------------------
  |  |  148|  5.44k|                                                                                                   \
  |  |  149|  5.44k|    /* Storing data */                                                                             \
  |  |  150|  5.44k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    173|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 173, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    173|        return #name;
  |  |  ------------------
  |  |  151|  6.63k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  6.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.63k, False: 600k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.63k|        return #name;
  |  |  ------------------
  |  |  152|  15.4k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  15.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.4k, False: 591k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.4k|        return #name;
  |  |  ------------------
  |  |  153|  15.4k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  9.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.32k, False: 597k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.32k|        return #name;
  |  |  ------------------
  |  |  154|  9.32k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|    156|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 156, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    156|        return #name;
  |  |  ------------------
  |  |  156|    156|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 82, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     82|        return #name;
  |  |  ------------------
  |  |  157|    879|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    879|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 879, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    879|        return #name;
  |  |  ------------------
  |  |  158|    879|                                                                                                   \
  |  |  159|    879|    /* Moving data */                                                                              \
  |  |  160|  14.3k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  14.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.3k, False: 592k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.3k|        return #name;
  |  |  ------------------
  |  |  161|  14.3k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    158|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 158, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    158|        return #name;
  |  |  ------------------
  |  |  162|    158|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    120|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 120, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    120|        return #name;
  |  |  ------------------
  |  |  163|    120|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|    562|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    562|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 562, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    562|        return #name;
  |  |  ------------------
  |  |  167|  1.51k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.51k, False: 605k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.51k|        return #name;
  |  |  ------------------
  |  |  168|  1.51k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.22k, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.22k|        return #name;
  |  |  ------------------
  |  |  169|  1.22k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    411|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 411, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    411|        return #name;
  |  |  ------------------
  |  |  170|    411|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    112|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 112, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|    112|        return #name;
  |  |  ------------------
  |  |  171|  7.38k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  7.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.38k, False: 599k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.38k|        return #name;
  |  |  ------------------
  |  |  172|  7.38k|                                                                                                   \
  |  |  173|  7.38k|    /* Other */                                                                                    \
  |  |  174|  7.38k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    413|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 413, False: 606k]
  |  |  |  |  ------------------
  |  |  |  |  209|    413|        return #name;
  |  |  ------------------
  |  |  175|    413|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 607k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  176|  1.58k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  1.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.58k, False: 605k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.58k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 607k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   607k|        }
  218|   607k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   146k|    {
   32|   146k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 19.4k, False: 126k]
  ------------------
   33|  19.4k|        {
   34|  19.4k|            return true;
   35|  19.4k|        }
   36|       |
   37|   126k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 66, False: 126k]
  ------------------
   38|     66|        {
   39|     66|            return true;
   40|     66|        }
   41|       |
   42|   126k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 1.44k, False: 125k]
  ------------------
   43|  1.44k|        {
   44|  1.44k|            return true;
   45|  1.44k|        }
   46|       |
   47|   125k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 125k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|   125k|        return false;
   53|   125k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   125k|    {
   57|   125k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 125k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   125k|        const char first_char = token.at(0);
   63|       |
   64|   125k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 50.1k, False: 74.9k]
  ------------------
   65|  50.1k|        {
   66|  50.1k|            return phi::is_alpha(first_char);
   67|  50.1k|        }
   68|       |
   69|  74.9k|        phi::boolean just_under_scores = (first_char == '_');
   70|  74.9k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 10.5k, False: 64.3k]
  |  Branch (70:15): [True: 64.2k, False: 10.7k]
  |  Branch (70:44): [True: 144, False: 10.5k]
  ------------------
   71|  10.5k|        {
   72|  10.5k|            return false;
   73|  10.5k|        }
   74|       |
   75|   239k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 187k, False: 51.9k]
  ------------------
   76|   187k|        {
   77|   187k|            const char c{token.at(index)};
   78|       |
   79|   187k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 100k, False: 86.8k]
  ------------------
   80|   100k|            {
   81|   100k|                just_under_scores = false;
   82|   100k|            }
   83|  86.8k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 74.4k, False: 12.4k]
  ------------------
   84|  74.4k|            {
   85|  74.4k|                continue;
   86|  74.4k|            }
   87|  12.4k|            else
   88|  12.4k|            {
   89|  12.4k|                return false;
   90|  12.4k|            }
   91|   187k|        }
   92|       |
   93|  51.9k|        return !just_under_scores;
   94|  64.3k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.31M|    {
  101|  1.31M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.31M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.31M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 106k, False: 1.21M]
  ------------------
  107|   106k|        {
  108|   106k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 57.0k, False: 49.8k]
  ------------------
  109|  57.0k|            {
  110|  57.0k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  57.0k|            }
  112|       |
  113|  49.8k|            return {};
  114|   106k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.21M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 11.6k, False: 1.20M]
  ------------------
  118|  11.6k|        {
  119|  11.6k|            return {};
  120|  11.6k|        }
  121|       |
  122|  1.20M|        std::int32_t number{0};
  123|  1.20M|        phi::boolean is_negative{false};
  124|  1.20M|        phi::boolean starts_with_zero{false};
  125|  1.20M|        phi::boolean parsing_binary{false};
  126|  1.20M|        phi::boolean parsing_octal{false};
  127|  1.20M|        phi::boolean parsing_hexadecimal{false};
  128|  1.20M|        phi::boolean parsed_something{false};
  129|  1.20M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.30M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.28M, False: 14.8k]
  ------------------
  134|  1.28M|        {
  135|  1.28M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.28M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.20M, False: 84.8k]
  ------------------
  139|  1.20M|            {
  140|  1.20M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 840, False: 1.19M]
  ------------------
  141|    840|                {
  142|    840|                    continue;
  143|    840|                }
  144|       |
  145|  1.19M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 20.9k, False: 1.17M]
  ------------------
  146|  20.9k|                {
  147|  20.9k|                    is_negative = true;
  148|  20.9k|                    continue;
  149|  20.9k|                }
  150|       |
  151|  1.17M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 44.3k, False: 1.13M]
  ------------------
  152|  44.3k|                {
  153|  44.3k|                    starts_with_zero = true;
  154|  44.3k|                    continue;
  155|  44.3k|                }
  156|       |
  157|  1.13M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 154, False: 1.13M]
  ------------------
  158|    154|                {
  159|    154|                    return {};
  160|    154|                }
  161|  1.13M|            }
  162|       |
  163|       |            // Second character
  164|  1.21M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 68.1k, False: 1.15M]
  ------------------
  165|  68.1k|            {
  166|  68.1k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 44.3k, False: 23.8k]
  ------------------
  167|  44.3k|                {
  168|       |                    // Binary
  169|  44.3k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.17k, False: 43.1k]
  |  Branch (169:37): [True: 975, False: 42.1k]
  ------------------
  170|  2.14k|                    {
  171|  2.14k|                        parsing_binary = true;
  172|  2.14k|                        continue;
  173|  2.14k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  42.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 6.99k, False: 35.1k]
  |  Branch (176:37): [True: 975, False: 34.1k]
  ------------------
  177|  7.96k|                    {
  178|  7.96k|                        parsing_hexadecimal = true;
  179|  7.96k|                        continue;
  180|  7.96k|                    }
  181|       |
  182|       |                    // Octal
  183|  34.1k|                    parsing_octal = true;
  184|  34.1k|                }
  185|  68.1k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.20M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 140, False: 1.20M]
  ------------------
  189|    140|            {
  190|    140|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 68, False: 72]
  ------------------
  191|     68|                {
  192|     68|                    return {};
  193|     68|                }
  194|       |
  195|     72|                parsed_separator = true;
  196|     72|                continue;
  197|    140|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.20M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 21.0k, False: 1.18M]
  |  Branch (200:32): [True: 0, False: 21.0k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|  1.20M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.18M, False: 21.0k]
  |  Branch (205:17): [True: 0, False: 1.20M]
  |  Branch (205:33): [True: 0, False: 1.18M]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|  1.20M|            parsed_separator = false;
  212|  1.20M|            parsed_something = true;
  213|       |
  214|  1.20M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 1.11k, False: 1.20M]
  ------------------
  215|  1.11k|            {
  216|  1.11k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 987, False: 132]
  ------------------
  217|    987|                {
  218|    987|                    return {};
  219|    987|                }
  220|       |
  221|    132|                number <<= 1;
  222|    132|                number |= (c - '0');
  223|    132|            }
  224|  1.20M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 40.3k, False: 1.16M]
  ------------------
  225|  40.3k|            {
  226|  40.3k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 30.4k, False: 9.93k]
  ------------------
  227|  30.4k|                {
  228|  30.4k|                    return {};
  229|  30.4k|                }
  230|       |
  231|  9.93k|                number <<= 3;
  232|  9.93k|                number |= (c - '0');
  233|  9.93k|            }
  234|  1.16M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 8.19k, False: 1.15M]
  ------------------
  235|  8.19k|            {
  236|  8.19k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.06k, False: 7.13k]
  ------------------
  237|  1.06k|                {
  238|  1.06k|                    return {};
  239|  1.06k|                }
  240|       |
  241|  7.13k|                number <<= 4;
  242|  7.13k|                number |= phi::hex_digit_value(c).unsafe();
  243|  7.13k|            }
  244|  1.15M|            else
  245|  1.15M|            {
  246|  1.15M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.13M, False: 23.4k]
  ------------------
  247|  1.13M|                {
  248|  1.13M|                    return {};
  249|  1.13M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  23.4k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 21.8k, False: 1.57k]
  |  Branch (252:36): [True: 17.2k, False: 4.56k]
  ------------------
  253|  17.2k|                {
  254|  17.2k|                    return {};
  255|  17.2k|                }
  256|       |
  257|  6.14k|                number *= 10;
  258|  6.14k|                number += (c - '0');
  259|  6.14k|            }
  260|  1.20M|        }
  261|       |
  262|  14.8k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 13.6k, False: 1.15k]
  ------------------
  263|  13.6k|        {
  264|       |            // Check for over/underflow
  265|  13.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 2.52k, False: 11.1k]
  |  Branch (265:32): [True: 0, False: 2.52k]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  13.6k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 11.1k, False: 2.52k]
  |  Branch (270:17): [True: 0, False: 13.6k]
  |  Branch (270:33): [True: 0, False: 11.1k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  13.6k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 2.52k, False: 11.1k]
  ------------------
  277|  2.52k|            {
  278|  2.52k|                return static_cast<std::int16_t>(-number);
  279|  2.52k|            }
  280|       |
  281|  11.1k|            return static_cast<std::int16_t>(number);
  282|  13.6k|        }
  283|       |
  284|  1.15k|        return {};
  285|  14.8k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   142k|    {
   96|   142k|        switch (value)
   97|   142k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  28.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  28.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 28.5k, False: 113k]
  |  |  |  |  ------------------
  |  |  |  |  100|  28.5k|        return #name;
  |  |  ------------------
  |  |   14|  45.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  45.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45.7k, False: 96.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  45.7k|        return #name;
  |  |  ------------------
  |  |   15|  45.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    239|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 239, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    239|        return #name;
  |  |  ------------------
  |  |   16|  4.68k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  4.68k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4.68k, False: 137k]
  |  |  |  |  ------------------
  |  |  |  |  100|  4.68k|        return #name;
  |  |  ------------------
  |  |   17|  4.68k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    127|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 127, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    127|        return #name;
  |  |  ------------------
  |  |   18|    215|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    215|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 215, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    215|        return #name;
  |  |  ------------------
  |  |   19|    751|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    751|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 751, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    751|        return #name;
  |  |  ------------------
  |  |   20|    751|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    568|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 568, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    568|        return #name;
  |  |  ------------------
  |  |   21|  8.56k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  8.56k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8.56k, False: 133k]
  |  |  |  |  ------------------
  |  |  |  |  100|  8.56k|        return #name;
  |  |  ------------------
  |  |   22|  8.56k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.38k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.38k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.38k|        return #name;
  |  |  ------------------
  |  |   23|  2.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    425|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 425, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    425|        return #name;
  |  |  ------------------
  |  |   24|    425|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    137|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 137, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    137|        return #name;
  |  |  ------------------
  |  |   25|    137|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     53|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 53, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|     53|        return #name;
  |  |  ------------------
  |  |   26|     53|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   27|    165|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    165|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 165, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    165|        return #name;
  |  |  ------------------
  |  |   28|    289|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    289|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 289, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    289|        return #name;
  |  |  ------------------
  |  |   29|    745|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    745|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 745, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    745|        return #name;
  |  |  ------------------
  |  |   30|  10.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  10.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10.4k, False: 131k]
  |  |  |  |  ------------------
  |  |  |  |  100|  10.4k|        return #name;
  |  |  ------------------
  |  |   31|  10.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    272|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 272, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    272|        return #name;
  |  |  ------------------
  |  |   32|    634|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    634|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 634, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    634|        return #name;
  |  |  ------------------
  |  |   33|  1.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.24k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.24k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.24k|        return #name;
  |  |  ------------------
  |  |   34|  1.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    735|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 735, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    735|        return #name;
  |  |  ------------------
  |  |   35|  3.67k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.67k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.67k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.67k|        return #name;
  |  |  ------------------
  |  |   36|  3.67k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    583|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 583, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    583|        return #name;
  |  |  ------------------
  |  |   37|  6.96k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  6.96k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.96k, False: 135k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.96k|        return #name;
  |  |  ------------------
  |  |   38|  6.96k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    521|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 521, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    521|        return #name;
  |  |  ------------------
  |  |   39|    521|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     36|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 36, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|     36|        return #name;
  |  |  ------------------
  |  |   40|  9.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  9.24k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9.24k, False: 133k]
  |  |  |  |  ------------------
  |  |  |  |  100|  9.24k|        return #name;
  |  |  ------------------
  |  |   41|  9.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|    563|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 563, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    563|        return #name;
  |  |  ------------------
  |  |   42|    643|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    643|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 643, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  100|    643|        return #name;
  |  |  ------------------
  |  |   43|    643|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    179|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 179, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  100|    179|        return #name;
  |  |  ------------------
  |  |   44|  12.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  12.8k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12.8k, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|  12.8k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 142k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   142k|        }
  109|   142k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  46.7k|    {
  131|  46.7k|        switch (value)
  132|  46.7k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  2.30k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.30k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.30k, False: 44.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.30k|        return #name;
  |  |  ------------------
  |  |   48|  4.93k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.93k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.93k, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.93k|        return #name;
  |  |  ------------------
  |  |   49|  11.0k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  11.0k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11.0k, False: 35.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  11.0k|        return #name;
  |  |  ------------------
  |  |   50|  11.0k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|    490|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 490, False: 46.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    490|        return #name;
  |  |  ------------------
  |  |   51|    490|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   52|    222|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|    222|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 222, False: 46.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    222|        return #name;
  |  |  ------------------
  |  |   53|    222|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   54|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   55|  1.16k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.16k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.16k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.16k|        return #name;
  |  |  ------------------
  |  |   56|  1.16k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   57|  11.3k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  11.3k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11.3k, False: 35.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  11.3k|        return #name;
  |  |  ------------------
  |  |   58|  11.3k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   59|  1.19k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.19k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.19k, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.19k|        return #name;
  |  |  ------------------
  |  |   60|  1.19k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|    172|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 172, False: 46.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    172|        return #name;
  |  |  ------------------
  |  |   61|    262|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    262|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 262, False: 46.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    262|        return #name;
  |  |  ------------------
  |  |   62|    262|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   63|    469|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    469|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 469, False: 46.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    469|        return #name;
  |  |  ------------------
  |  |   64|    469|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|     90|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|     90|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 90, False: 46.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     90|        return #name;
  |  |  ------------------
  |  |   67|     90|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   68|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|    160|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|    160|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 160, False: 46.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    160|        return #name;
  |  |  ------------------
  |  |   71|    160|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|     55|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     55|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 55, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     55|        return #name;
  |  |  ------------------
  |  |   73|     55|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 39, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     39|        return #name;
  |  |  ------------------
  |  |   75|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|     20|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 20, False: 46.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     20|        return #name;
  |  |  ------------------
  |  |   77|  12.6k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  12.6k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12.6k, False: 34.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  12.6k|        return #name;
  |  |  ------------------
  |  |   78|  12.6k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    116|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 116, False: 46.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    116|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 46.7k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  46.7k|        }
  144|  46.7k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  78.6k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  78.6k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 1.43M, False: 0]
  ------------------
   64|  1.43M|            {
   65|  1.43M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 78.6k, False: 1.35M]
  ------------------
   66|  78.6k|                {
   67|  78.6k|                    return &token;
   68|  78.6k|                }
   69|  1.43M|            }
   70|       |
   71|      0|            return nullptr;
   72|  78.6k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.13M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.13M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.13M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.79M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.79M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.79M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   251k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   251k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   251k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   207k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  55.9k|    {
   25|  55.9k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  55.9k|        switch (argument_number.unsafe())
   28|  55.9k|        {
   29|  43.7k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 43.7k, False: 12.2k]
  ------------------
   30|  43.7k|                m_Arg1 = argument;
   31|  43.7k|                break;
   32|  11.8k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 11.8k, False: 44.1k]
  ------------------
   33|  11.8k|                m_Arg2 = argument;
   34|  11.8k|                break;
   35|    406|            case 2u:
  ------------------
  |  Branch (35:13): [True: 406, False: 55.5k]
  ------------------
   36|    406|                m_Arg3 = argument;
   37|    406|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 55.9k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  55.9k|#endif
   42|  55.9k|        }
   43|  55.9k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   678k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  31.4k|    {
  171|  31.4k|        InstructionArgument arg;
  172|  31.4k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  31.4k|        arg.register_int.register_id = id;
  174|  31.4k|        return arg;
  175|  31.4k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    178|    {
  179|    178|        InstructionArgument arg;
  180|    178|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    178|        arg.register_float.register_id = id;
  182|    178|        return arg;
  183|    178|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  10.7k|    {
  187|  10.7k|        InstructionArgument arg;
  188|  10.7k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  10.7k|        arg.immediate_value.signed_value = value;
  190|  10.7k|        return arg;
  191|  10.7k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  13.5k|    {
  205|  13.5k|        InstructionArgument arg;
  206|  13.5k|        arg.m_Type           = ArgumentType::Label;
  207|  13.5k|        arg.label.label_name = label_name;
  208|  13.5k|        return arg;
  209|  13.5k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   207k|    {
  453|   207k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   207k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  1.14M|    {
   24|  1.14M|        switch (token.length())
   25|  1.14M|        {
   26|       |            // 1 character OpCodes
   27|   100k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 100k, False: 1.04M]
  ------------------
   28|   100k|                char c1 = token[0];
   29|   100k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 13.9k, False: 86.1k]
  ------------------
   30|  13.9k|                {
   31|  13.9k|                    return OpCode::J;
   32|  13.9k|                }
   33|  86.1k|                break;
   34|   100k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   192k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 192k, False: 949k]
  ------------------
   38|   192k|                char c1 = token[0];
   39|   192k|                char c2 = token[1];
   40|       |
   41|   192k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 73.0k, False: 119k]
  ------------------
   42|   192k|                {
   43|    131|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 131, False: 192k]
  ------------------
   44|    710|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 579, False: 191k]
  ------------------
   45|    710|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 133, False: 577]
  ------------------
   46|    133|                        {
   47|    133|                            return OpCode::JR;
   48|    133|                        }
   49|    577|                        break;
   50|       |
   51|  19.0k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 19.0k, False: 173k]
  ------------------
   52|  25.8k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 6.81k, False: 185k]
  ------------------
   53|  25.8k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 991, False: 24.8k]
  ------------------
   54|  25.8k|                        {
   55|  4.49k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 4.49k, False: 21.3k]
  ------------------
   56|  6.35k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 1.86k, False: 23.9k]
  ------------------
   57|  6.35k|                                return OpCode::LB;
   58|  5.44k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 5.44k, False: 20.3k]
  ------------------
   59|  5.57k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 130, False: 25.6k]
  ------------------
   60|  5.57k|                                return OpCode::LD;
   61|     66|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 66, False: 25.7k]
  ------------------
   62|    132|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 66, False: 25.7k]
  ------------------
   63|    132|                                return OpCode::LF;
   64|  8.54k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 8.54k, False: 17.2k]
  ------------------
   65|  8.61k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 66, False: 25.7k]
  ------------------
   66|  8.61k|                                return OpCode::LH;
   67|    190|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 190, False: 25.6k]
  ------------------
   68|  4.16k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 3.97k, False: 21.8k]
  ------------------
   69|  4.16k|                                return OpCode::LW;
   70|  25.8k|                        }
   71|    991|                        break;
   72|  30.6k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 30.6k, False: 161k]
  ------------------
   73|  30.8k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 166, False: 192k]
  ------------------
   74|  30.8k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 3.59k, False: 27.2k]
  ------------------
   75|  3.59k|                        {
   76|  3.59k|                            return OpCode::OR;
   77|  3.59k|                        }
   78|  27.2k|                        break;
   79|  37.8k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 37.8k, False: 154k]
  ------------------
   80|  61.9k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 24.0k, False: 168k]
  ------------------
   81|  61.9k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 39.0k, False: 22.9k]
  ------------------
   82|  61.9k|                        {
   83|    173|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 173, False: 61.8k]
  ------------------
   84|    239|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 66, False: 61.9k]
  ------------------
   85|    239|                                return OpCode::SB;
   86|    905|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 905, False: 61.0k]
  ------------------
   87|  3.94k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 3.04k, False: 58.9k]
  ------------------
   88|  3.94k|                                return OpCode::SD;
   89|    184|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 184, False: 61.8k]
  ------------------
   90|  5.11k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 4.93k, False: 57.0k]
  ------------------
   91|  5.11k|                                return OpCode::SF;
   92|  13.2k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 13.2k, False: 48.7k]
  ------------------
   93|  13.2k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 66, False: 61.9k]
  ------------------
   94|  13.2k|                                return OpCode::SH;
   95|    286|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 286, False: 61.7k]
  ------------------
   96|    356|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 70, False: 61.9k]
  ------------------
   97|    356|                                return OpCode::SW;
   98|  61.9k|                        }
   99|  39.0k|                        break;
  100|   192k|                }
  101|   140k|                break;
  102|   192k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   369k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 369k, False: 772k]
  ------------------
  106|   369k|                char c1 = token[0];
  107|   369k|                char c2 = token[1];
  108|   369k|                char c3 = token[2];
  109|       |
  110|   369k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 35.1k, False: 334k]
  ------------------
  111|   369k|                {
  112|   113k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 113k, False: 256k]
  ------------------
  113|   127k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 14.1k, False: 355k]
  ------------------
  114|   127k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 108k, False: 19.0k]
  |  Branch (114:29): [True: 108k, False: 19.1k]
  |  Branch (114:45): [True: 108k, False: 82]
  ------------------
  115|   108k|                        {
  116|   108k|                            return OpCode::ADD;
  117|   108k|                        }
  118|  19.1k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 18.8k, False: 282]
  |  Branch (118:34): [True: 10.8k, False: 8.29k]
  |  Branch (118:50): [True: 10.8k, False: 8.01k]
  ------------------
  119|  10.8k|                        {
  120|  10.8k|                            return OpCode::AND;
  121|  10.8k|                        }
  122|  8.29k|                        break;
  123|       |
  124|  8.76k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 8.76k, False: 361k]
  ------------------
  125|  8.84k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 75, False: 369k]
  ------------------
  126|  8.84k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 8.70k, False: 133]
  |  Branch (126:29): [True: 8.64k, False: 199]
  |  Branch (126:45): [True: 8.64k, False: 66]
  ------------------
  127|  8.64k|                        {
  128|  8.64k|                            return OpCode::DIV;
  129|  8.64k|                        }
  130|    199|                        break;
  131|       |
  132|    824|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 824, False: 369k]
  ------------------
  133|  1.18k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 358, False: 369k]
  ------------------
  134|  1.18k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 865, False: 317]
  ------------------
  135|    865|                        {
  136|    865|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 133, False: 732]
  ------------------
  137|    133|                            {
  138|    133|                                return OpCode::EQD;
  139|    133|                            }
  140|    732|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 408, False: 324]
  ------------------
  141|    408|                            {
  142|    408|                                return OpCode::EQF;
  143|    408|                            }
  144|    865|                        }
  145|    641|                        break;
  146|       |
  147|  38.1k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 38.1k, False: 331k]
  ------------------
  148|  45.0k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 6.92k, False: 362k]
  ------------------
  149|  45.0k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 21.7k, False: 23.2k]
  ------------------
  150|  21.7k|                        {
  151|  21.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 14.9k, False: 6.86k]
  ------------------
  152|  14.9k|                            {
  153|  14.9k|                                return OpCode::GED;
  154|  14.9k|                            }
  155|  6.86k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 6.79k, False: 66]
  ------------------
  156|  6.79k|                            {
  157|  6.79k|                                return OpCode::GEF;
  158|  6.79k|                            }
  159|  21.7k|                        }
  160|  23.2k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 23.1k, False: 144]
  ------------------
  161|  23.1k|                        {
  162|  23.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 7.68k, False: 15.4k]
  ------------------
  163|  7.68k|                            {
  164|  7.68k|                                return OpCode::GTD;
  165|  7.68k|                            }
  166|  15.4k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 10.1k, False: 5.26k]
  ------------------
  167|  10.1k|                            {
  168|  10.1k|                                return OpCode::GTF;
  169|  10.1k|                            }
  170|  15.4k|                        }
  171|  5.47k|                        break;
  172|       |
  173|  5.47k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 89, False: 369k]
  ------------------
  174|    566|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 477, False: 369k]
  ------------------
  175|    566|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 480, False: 86]
  |  Branch (175:29): [True: 145, False: 421]
  |  Branch (175:45): [True: 145, False: 335]
  ------------------
  176|    145|                        {
  177|    145|                            return OpCode::JAL;
  178|    145|                        }
  179|    421|                        break;
  180|       |
  181|  5.24k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 5.24k, False: 364k]
  ------------------
  182|  12.0k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 6.84k, False: 363k]
  ------------------
  183|  12.0k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 90, False: 12.0k]
  ------------------
  184|  12.0k|                        {
  185|    110|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 110, False: 11.9k]
  ------------------
  186|  5.39k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 5.28k, False: 6.81k]
  ------------------
  187|  5.39k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 425, False: 4.96k]
  ------------------
  188|    425|                                {
  189|    425|                                    return OpCode::LBU;
  190|    425|                                }
  191|  4.96k|                                break;
  192|       |
  193|  4.96k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 4.30k, False: 7.78k]
  ------------------
  194|  4.48k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 184, False: 11.9k]
  ------------------
  195|  4.48k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 906, False: 3.58k]
  ------------------
  196|    906|                                {
  197|    906|                                    return OpCode::LED;
  198|    906|                                }
  199|  3.58k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 3.51k, False: 66]
  ------------------
  200|  3.51k|                                {
  201|  3.51k|                                    return OpCode::LEF;
  202|  3.51k|                                }
  203|     66|                                break;
  204|       |
  205|    238|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 238, False: 11.8k]
  ------------------
  206|    779|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 541, False: 11.5k]
  ------------------
  207|    779|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 145, False: 634]
  ------------------
  208|    145|                                {
  209|    145|                                    return OpCode::LHI;
  210|    145|                                }
  211|    634|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 568, False: 66]
  ------------------
  212|    568|                                {
  213|    568|                                    return OpCode::LHU;
  214|    568|                                }
  215|     66|                                break;
  216|       |
  217|    475|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 475, False: 11.6k]
  ------------------
  218|    667|                            case 't':
  ------------------
  |  Branch (218:29): [True: 192, False: 11.8k]
  ------------------
  219|    667|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 376, False: 291]
  ------------------
  220|    376|                                {
  221|    376|                                    return OpCode::LTD;
  222|    376|                                }
  223|    291|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 218, False: 73]
  ------------------
  224|    218|                                {
  225|    218|                                    return OpCode::LTF;
  226|    218|                                }
  227|     73|                                break;
  228|       |
  229|     78|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 78, False: 12.0k]
  ------------------
  230|    676|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 598, False: 11.4k]
  ------------------
  231|    676|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 132, False: 544]
  ------------------
  232|    132|                                {
  233|    132|                                    return OpCode::LWU;
  234|    132|                                }
  235|    544|                                break;
  236|  12.0k|                        }
  237|  5.80k|                        break;
  238|       |
  239|  5.80k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 5.80k, False: 364k]
  ------------------
  240|  21.2k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 15.4k, False: 354k]
  ------------------
  241|  21.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 4.30k, False: 16.9k]
  ------------------
  242|  4.30k|                        {
  243|  4.30k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 133, False: 4.16k]
  ------------------
  244|    133|                            {
  245|    133|                                return OpCode::NED;
  246|    133|                            }
  247|  4.16k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 132, False: 4.03k]
  ------------------
  248|    132|                            {
  249|    132|                                return OpCode::NEF;
  250|    132|                            }
  251|  4.30k|                        }
  252|  16.9k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 11.7k, False: 5.26k]
  |  Branch (252:34): [True: 1.65k, False: 15.3k]
  |  Branch (252:50): [True: 1.65k, False: 10.0k]
  ------------------
  253|  1.65k|                        {
  254|  1.65k|                            return OpCode::NOP;
  255|  1.65k|                        }
  256|       |
  257|  19.3k|                        break;
  258|       |
  259|  19.3k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 1.25k, False: 368k]
  ------------------
  260|  1.33k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 80, False: 369k]
  ------------------
  261|  1.33k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 583, False: 751]
  |  Branch (261:29): [True: 136, False: 1.19k]
  |  Branch (261:45): [True: 136, False: 447]
  ------------------
  262|    136|                        {
  263|    136|                            return OpCode::ORI;
  264|    136|                        }
  265|  1.19k|                        break;
  266|       |
  267|   102k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 102k, False: 267k]
  ------------------
  268|   104k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 1.54k, False: 368k]
  ------------------
  269|   104k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 344, False: 103k]
  ------------------
  270|   104k|                        {
  271|  6.63k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 6.63k, False: 97.6k]
  ------------------
  272|  7.05k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 420, False: 103k]
  ------------------
  273|  7.05k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 6.70k, False: 354]
  ------------------
  274|  6.70k|                                {
  275|  6.70k|                                    return OpCode::SBU;
  276|  6.70k|                                }
  277|    354|                                break;
  278|       |
  279|    354|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 166, False: 104k]
  ------------------
  280|  20.1k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 19.9k, False: 84.2k]
  ------------------
  281|  20.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 16.3k, False: 3.77k]
  ------------------
  282|  16.3k|                                {
  283|  16.3k|                                    return OpCode::SEQ;
  284|  16.3k|                                }
  285|  3.77k|                                break;
  286|       |
  287|  3.77k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 429, False: 103k]
  ------------------
  288|    812|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 383, False: 103k]
  ------------------
  289|    812|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 282, False: 530]
  ------------------
  290|    282|                                {
  291|    282|                                    return OpCode::SGE;
  292|    282|                                }
  293|    530|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 403, False: 127]
  ------------------
  294|    403|                                {
  295|    403|                                    return OpCode::SGT;
  296|    403|                                }
  297|    127|                                break;
  298|       |
  299|  9.32k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 9.32k, False: 94.9k]
  ------------------
  300|  9.54k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 222, False: 104k]
  ------------------
  301|  9.54k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 9.38k, False: 159]
  ------------------
  302|  9.38k|                                {
  303|  9.38k|                                    return OpCode::SHU;
  304|  9.38k|                                }
  305|    159|                                break;
  306|       |
  307|  29.6k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 29.6k, False: 74.6k]
  ------------------
  308|  29.9k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 305, False: 103k]
  ------------------
  309|  29.9k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 67, False: 29.9k]
  ------------------
  310|  29.9k|                                {
  311|  15.1k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 15.1k, False: 14.8k]
  ------------------
  312|  15.1k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 69, False: 29.9k]
  ------------------
  313|  15.1k|                                        return OpCode::SLA;
  314|       |
  315|  10.4k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 10.4k, False: 19.5k]
  ------------------
  316|  10.4k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 69, False: 29.9k]
  ------------------
  317|  10.4k|                                        return OpCode::SLE;
  318|       |
  319|  3.93k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.93k, False: 26.0k]
  ------------------
  320|  4.00k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 70, False: 29.9k]
  ------------------
  321|  4.00k|                                        return OpCode::SLL;
  322|       |
  323|    143|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 143, False: 29.8k]
  ------------------
  324|    222|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 79, False: 29.8k]
  ------------------
  325|    222|                                        return OpCode::SLT;
  326|  29.9k|                                }
  327|     67|                                break;
  328|       |
  329|    178|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 178, False: 104k]
  ------------------
  330|    334|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 156, False: 104k]
  ------------------
  331|    334|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 267, False: 67]
  ------------------
  332|    267|                                {
  333|    267|                                    return OpCode::SNE;
  334|    267|                                }
  335|     67|                                break;
  336|       |
  337|  10.3k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 10.3k, False: 93.8k]
  ------------------
  338|  28.1k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 17.7k, False: 86.5k]
  ------------------
  339|  28.1k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 8.71k, False: 19.3k]
  ------------------
  340|  8.71k|                                {
  341|  8.71k|                                    return OpCode::SRA;
  342|  8.71k|                                }
  343|  19.3k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.82k, False: 17.5k]
  ------------------
  344|  1.82k|                                {
  345|  1.82k|                                    return OpCode::SRL;
  346|  1.82k|                                }
  347|  17.5k|                                break;
  348|       |
  349|  17.5k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 6.61k, False: 97.6k]
  ------------------
  350|  7.16k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 545, False: 103k]
  ------------------
  351|  7.16k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 6.82k, False: 343]
  ------------------
  352|  6.82k|                                {
  353|  6.82k|                                    return OpCode::SUB;
  354|  6.82k|                                }
  355|    343|                                break;
  356|       |
  357|    511|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 511, False: 103k]
  ------------------
  358|    784|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 273, False: 104k]
  ------------------
  359|    784|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 518, False: 266]
  ------------------
  360|    518|                                {
  361|    518|                                    return OpCode::SWU;
  362|    518|                                }
  363|    266|                                break;
  364|   104k|                        }
  365|       |
  366|  24.4k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.33k, False: 368k]
  ------------------
  367|  35.2k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 10.8k, False: 359k]
  ------------------
  368|  35.2k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 1.37k, False: 33.8k]
  |  Branch (368:29): [True: 1.30k, False: 33.9k]
  |  Branch (368:45): [True: 1.30k, False: 69]
  ------------------
  369|  1.30k|                        {
  370|  1.30k|                            return OpCode::XOR;
  371|  1.30k|                        }
  372|  33.9k|                        break;
  373|   369k|                }
  374|   110k|                break;
  375|   369k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   280k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 280k, False: 861k]
  ------------------
  379|   280k|                char c1 = token[0];
  380|   280k|                char c2 = token[1];
  381|   280k|                char c3 = token[2];
  382|   280k|                char c4 = token[3];
  383|       |
  384|   280k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 20.1k, False: 260k]
  ------------------
  385|   280k|                {
  386|  48.8k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 48.8k, False: 231k]
  ------------------
  387|  51.4k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.57k, False: 278k]
  ------------------
  388|  51.4k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 76, False: 51.3k]
  ------------------
  389|  51.4k|                        {
  390|  50.4k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 50.4k, False: 1.03k]
  ------------------
  391|  50.5k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 157, False: 51.2k]
  ------------------
  392|  50.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 48.1k, False: 2.36k]
  ------------------
  393|  48.1k|                                {
  394|  48.1k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 66, False: 48.1k]
  ------------------
  395|  48.1k|                                    {
  396|  9.06k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 9.06k, False: 39.1k]
  ------------------
  397|  9.12k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 48.1k]
  ------------------
  398|  9.12k|                                            return OpCode::ADDD;
  399|       |
  400|  7.50k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 7.50k, False: 40.6k]
  ------------------
  401|  7.56k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 66, False: 48.1k]
  ------------------
  402|  7.56k|                                            return OpCode::ADDF;
  403|       |
  404|  11.2k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 11.2k, False: 36.9k]
  ------------------
  405|  11.3k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 48.1k]
  ------------------
  406|  11.3k|                                            return OpCode::ADDI;
  407|       |
  408|  20.0k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 20.0k, False: 28.1k]
  ------------------
  409|  20.1k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 66, False: 48.1k]
  ------------------
  410|  20.1k|                                            return OpCode::ADDU;
  411|  48.1k|                                    }
  412|  48.1k|                                }
  413|  2.43k|                                break;
  414|       |
  415|  2.43k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 512, False: 50.9k]
  ------------------
  416|    798|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 286, False: 51.1k]
  ------------------
  417|    798|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 616, False: 182]
  |  Branch (417:37): [True: 544, False: 254]
  |  Branch (417:53): [True: 544, False: 72]
  ------------------
  418|    544|                                {
  419|    544|                                    return OpCode::ANDI;
  420|    544|                                }
  421|       |
  422|    254|                                break;
  423|  51.4k|                        }
  424|  2.76k|                        break;
  425|       |
  426|  34.2k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 34.2k, False: 246k]
  ------------------
  427|  41.6k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 7.46k, False: 273k]
  ------------------
  428|  41.6k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 236, False: 41.4k]
  ------------------
  429|  41.6k|                        {
  430|    198|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 198, False: 41.5k]
  ------------------
  431|  7.06k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 6.86k, False: 34.8k]
  ------------------
  432|  7.06k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.79k, False: 4.27k]
  |  Branch (432:37): [True: 2.66k, False: 4.40k]
  |  Branch (432:53): [True: 2.66k, False: 128]
  ------------------
  433|  2.66k|                                {
  434|  2.66k|                                    return OpCode::BEQZ;
  435|  2.66k|                                }
  436|  4.40k|                                break;
  437|       |
  438|  27.1k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 27.1k, False: 14.5k]
  ------------------
  439|  27.3k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 265, False: 41.4k]
  ------------------
  440|  27.3k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 27.3k, False: 66]
  ------------------
  441|  27.3k|                                {
  442|  27.3k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 16.2k, False: 11.0k]
  ------------------
  443|  16.2k|                                    {
  444|  16.2k|                                        return OpCode::BFPF;
  445|  16.2k|                                    }
  446|  11.0k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 10.9k, False: 66]
  ------------------
  447|  10.9k|                                    {
  448|  10.9k|                                        return OpCode::BFPT;
  449|  10.9k|                                    }
  450|  27.3k|                                }
  451|    132|                                break;
  452|       |
  453|  6.81k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 6.81k, False: 34.8k]
  ------------------
  454|  7.01k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 198, False: 41.5k]
  ------------------
  455|  7.01k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 6.95k, False: 66]
  |  Branch (455:37): [True: 6.88k, False: 132]
  |  Branch (455:53): [True: 6.88k, False: 66]
  ------------------
  456|  6.88k|                                {
  457|  6.88k|                                    return OpCode::BNEZ;
  458|  6.88k|                                }
  459|  41.6k|                        }
  460|  4.90k|                        break;
  461|       |
  462|  13.0k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 13.0k, False: 267k]
  ------------------
  463|  13.1k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 114, False: 280k]
  ------------------
  464|  13.1k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 13.0k, False: 118]
  |  Branch (464:29): [True: 13.0k, False: 184]
  |  Branch (464:45): [True: 13.0k, False: 66]
  ------------------
  465|  13.0k|                        {
  466|  13.0k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 97, False: 12.9k]
  ------------------
  467|  13.0k|                            {
  468|  5.92k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 5.92k, False: 7.08k]
  ------------------
  469|  5.99k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 12.9k]
  ------------------
  470|  5.99k|                                    return OpCode::DIVD;
  471|       |
  472|     70|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 70, False: 12.9k]
  ------------------
  473|    136|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 12.9k]
  ------------------
  474|    136|                                    return OpCode::DIVF;
  475|       |
  476|  1.87k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 1.87k, False: 11.1k]
  ------------------
  477|  1.94k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 12.9k]
  ------------------
  478|  1.94k|                                    return OpCode::DIVI;
  479|       |
  480|  4.74k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 4.74k, False: 8.26k]
  ------------------
  481|  4.84k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 98, False: 12.9k]
  ------------------
  482|  4.84k|                                    return OpCode::DIVU;
  483|  13.0k|                            }
  484|  13.0k|                        }
  485|    281|                        break;
  486|       |
  487|    281|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 103, False: 280k]
  ------------------
  488|  7.54k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 7.44k, False: 273k]
  ------------------
  489|  7.54k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 7.32k, False: 221]
  |  Branch (489:29): [True: 149, False: 7.39k]
  |  Branch (489:45): [True: 7.25k, False: 66]
  |  Branch (489:61): [True: 149, False: 7.10k]
  ------------------
  490|    149|                        {
  491|    149|                            return OpCode::HALT;
  492|    149|                        }
  493|  7.39k|                        break;
  494|       |
  495|  7.39k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 293, False: 280k]
  ------------------
  496|  2.18k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 1.89k, False: 278k]
  ------------------
  497|  2.18k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 1.93k, False: 250]
  |  Branch (497:29): [True: 137, False: 2.05k]
  |  Branch (497:45): [True: 203, False: 1.73k]
  |  Branch (497:61): [True: 137, False: 66]
  ------------------
  498|    137|                        {
  499|    137|                            return OpCode::JALR;
  500|    137|                        }
  501|  2.05k|                        break;
  502|       |
  503|  16.6k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 16.6k, False: 264k]
  ------------------
  504|  25.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 9.24k, False: 271k]
  ------------------
  505|  25.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 14.7k, False: 11.0k]
  |  Branch (505:29): [True: 14.7k, False: 11.1k]
  |  Branch (505:45): [True: 14.7k, False: 66]
  ------------------
  506|  14.7k|                        {
  507|  14.7k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 14.4k, False: 290]
  ------------------
  508|  14.4k|                            {
  509|  14.4k|                                return OpCode::MOVD;
  510|  14.4k|                            }
  511|    290|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 224, False: 66]
  ------------------
  512|    224|                            {
  513|    224|                                return OpCode::MOVF;
  514|    224|                            }
  515|  14.7k|                        }
  516|  11.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 10.7k, False: 444]
  |  Branch (516:34): [True: 174, False: 10.9k]
  |  Branch (516:50): [True: 10.3k, False: 364]
  |  Branch (516:66): [True: 174, False: 10.1k]
  ------------------
  517|    174|                        {
  518|    174|                            return OpCode::MULT;
  519|    174|                        }
  520|  11.0k|                        break;
  521|       |
  522|  99.6k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 99.6k, False: 181k]
  ------------------
  523|   112k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 12.5k, False: 268k]
  ------------------
  524|   112k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 813, False: 111k]
  ------------------
  525|   112k|                        {
  526|  3.48k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 3.48k, False: 108k]
  ------------------
  527|  10.1k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 6.62k, False: 105k]
  ------------------
  528|  10.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 6.92k, False: 3.17k]
  ------------------
  529|  6.92k|                                {
  530|  6.92k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 5.92k, False: 995]
  ------------------
  531|  5.92k|                                    {
  532|  5.92k|                                        return OpCode::SEQI;
  533|  5.92k|                                    }
  534|    995|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 914, False: 81]
  ------------------
  535|    914|                                    {
  536|    914|                                        return OpCode::SEQU;
  537|    914|                                    }
  538|  6.92k|                                }
  539|  3.26k|                                break;
  540|       |
  541|  11.7k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 11.7k, False: 100k]
  ------------------
  542|  19.5k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 7.80k, False: 104k]
  ------------------
  543|  19.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 9.57k, False: 10.0k]
  ------------------
  544|  9.57k|                                {
  545|  9.57k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 202, False: 9.37k]
  ------------------
  546|    202|                                    {
  547|    202|                                        return OpCode::SGEI;
  548|    202|                                    }
  549|  9.37k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 9.30k, False: 66]
  ------------------
  550|  9.30k|                                    {
  551|  9.30k|                                        return OpCode::SGEU;
  552|  9.30k|                                    }
  553|  9.57k|                                }
  554|  10.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 9.94k, False: 76]
  ------------------
  555|  9.94k|                                {
  556|  9.94k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 2.44k, False: 7.50k]
  ------------------
  557|  2.44k|                                    {
  558|  2.44k|                                        return OpCode::SGTI;
  559|  2.44k|                                    }
  560|  7.50k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 132, False: 7.37k]
  ------------------
  561|    132|                                    {
  562|    132|                                        return OpCode::SGTU;
  563|    132|                                    }
  564|  9.94k|                                }
  565|  7.51k|                                break;
  566|       |
  567|  29.3k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 29.3k, False: 82.8k]
  ------------------
  568|  30.1k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 766, False: 111k]
  ------------------
  569|  30.1k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 66, False: 30.0k]
  ------------------
  570|  30.1k|                                {
  571|  1.76k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.76k, False: 28.3k]
  ------------------
  572|  1.87k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 113, False: 30.0k]
  ------------------
  573|  1.87k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.81k, False: 66]
  ------------------
  574|  1.81k|                                        {
  575|  1.81k|                                            return OpCode::SLAI;
  576|  1.81k|                                        }
  577|     66|                                        break;
  578|       |
  579|  20.2k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 20.2k, False: 9.96k]
  ------------------
  580|  20.3k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 164, False: 29.9k]
  ------------------
  581|  20.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 18.9k, False: 1.45k]
  ------------------
  582|  18.9k|                                        {
  583|  18.9k|                                            return OpCode::SLEI;
  584|  18.9k|                                        }
  585|  1.45k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.39k, False: 66]
  ------------------
  586|  1.39k|                                        {
  587|  1.39k|                                            return OpCode::SLEU;
  588|  1.39k|                                        }
  589|     66|                                        break;
  590|       |
  591|  4.65k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 4.65k, False: 25.5k]
  ------------------
  592|  4.81k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 165, False: 29.9k]
  ------------------
  593|  4.81k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 4.74k, False: 69]
  ------------------
  594|  4.74k|                                        {
  595|  4.74k|                                            return OpCode::SLLI;
  596|  4.74k|                                        }
  597|     69|                                        break;
  598|       |
  599|  2.89k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.89k, False: 27.2k]
  ------------------
  600|  3.03k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 141, False: 30.0k]
  ------------------
  601|  3.03k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 2.83k, False: 203]
  ------------------
  602|  2.83k|                                        {
  603|  2.83k|                                            return OpCode::SLTI;
  604|  2.83k|                                        }
  605|    203|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 137, False: 66]
  ------------------
  606|    137|                                        {
  607|    137|                                            return OpCode::SLTU;
  608|    137|                                        }
  609|     66|                                        break;
  610|  30.1k|                                }
  611|       |
  612|  9.51k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 9.18k, False: 103k]
  ------------------
  613|  14.5k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 5.00k, False: 107k]
  ------------------
  614|  14.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 14.2k, False: 268]
  ------------------
  615|  14.2k|                                {
  616|  14.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 284, False: 13.9k]
  ------------------
  617|    284|                                    {
  618|    284|                                        return OpCode::SNEI;
  619|    284|                                    }
  620|  13.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 13.9k, False: 66]
  ------------------
  621|  13.9k|                                    {
  622|  13.9k|                                        return OpCode::SNEU;
  623|  13.9k|                                    }
  624|  14.2k|                                }
  625|    334|                                break;
  626|       |
  627|    724|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 724, False: 111k]
  ------------------
  628|    928|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 204, False: 112k]
  ------------------
  629|    928|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 413, False: 515]
  |  Branch (629:37): [True: 346, False: 582]
  |  Branch (629:53): [True: 346, False: 67]
  ------------------
  630|    346|                                {
  631|    346|                                    return OpCode::SRAI;
  632|    346|                                }
  633|    582|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 508, False: 74]
  |  Branch (633:42): [True: 316, False: 266]
  |  Branch (633:58): [True: 316, False: 192]
  ------------------
  634|    316|                                {
  635|    316|                                    return OpCode::SRLI;
  636|    316|                                }
  637|    266|                                break;
  638|       |
  639|  21.5k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 21.5k, False: 90.6k]
  ------------------
  640|  36.4k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 14.8k, False: 97.3k]
  ------------------
  641|  36.4k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 31.9k, False: 4.46k]
  ------------------
  642|  31.9k|                                {
  643|  31.9k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 10.2k, False: 21.7k]
  ------------------
  644|  31.9k|                                    {
  645|    115|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 115, False: 31.8k]
  ------------------
  646|    181|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 31.9k]
  ------------------
  647|    181|                                            return OpCode::SUBD;
  648|       |
  649|  4.51k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 4.51k, False: 27.4k]
  ------------------
  650|  4.58k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 66, False: 31.9k]
  ------------------
  651|  4.58k|                                            return OpCode::SUBF;
  652|       |
  653|  14.1k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 14.1k, False: 17.8k]
  ------------------
  654|  14.2k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 98, False: 31.8k]
  ------------------
  655|  14.2k|                                            return OpCode::SUBI;
  656|       |
  657|  2.65k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 2.65k, False: 29.3k]
  ------------------
  658|  2.72k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 31.9k]
  ------------------
  659|  2.72k|                                            return OpCode::SUBU;
  660|  31.9k|                                    }
  661|  31.9k|                                }
  662|  14.6k|                                break;
  663|   112k|                        }
  664|  26.8k|                        break;
  665|       |
  666|  26.8k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 5.84k, False: 274k]
  ------------------
  667|  5.96k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 122, False: 280k]
  ------------------
  668|  5.96k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 5.89k, False: 66]
  |  Branch (668:29): [True: 5.67k, False: 288]
  |  Branch (668:45): [True: 5.81k, False: 84]
  |  Branch (668:61): [True: 5.67k, False: 138]
  ------------------
  669|  5.67k|                        {
  670|  5.67k|                            return OpCode::TRAP;
  671|  5.67k|                        }
  672|    288|                        break;
  673|    288|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 170, False: 280k]
  ------------------
  674|    411|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 241, False: 280k]
  ------------------
  675|    411|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 265, False: 146]
  |  Branch (675:29): [True: 133, False: 278]
  |  Branch (675:45): [True: 199, False: 66]
  |  Branch (675:61): [True: 133, False: 66]
  ------------------
  676|    133|                        {
  677|    133|                            return OpCode::XORI;
  678|    133|                        }
  679|    278|                        break;
  680|   280k|                }
  681|  76.0k|                break;
  682|   280k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   127k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 127k, False: 1.01M]
  ------------------
  686|   127k|                char c1 = token[0];
  687|   127k|                char c2 = token[1];
  688|   127k|                char c3 = token[2];
  689|   127k|                char c4 = token[3];
  690|   127k|                char c5 = token[4];
  691|       |
  692|   127k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 7.40k, False: 120k]
  ------------------
  693|   127k|                {
  694|  30.4k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 30.4k, False: 97.2k]
  ------------------
  695|  30.4k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 127k]
  ------------------
  696|  30.4k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 30.4k, False: 0]
  |  Branch (696:29): [True: 30.4k, False: 0]
  |  Branch (696:45): [True: 30.4k, False: 0]
  |  Branch (696:61): [True: 30.4k, False: 0]
  |  Branch (696:77): [True: 30.4k, False: 0]
  ------------------
  697|  30.4k|                        {
  698|  30.4k|                            return OpCode::ADDUI;
  699|  30.4k|                        }
  700|      0|                        break;
  701|       |
  702|  11.1k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 11.1k, False: 116k]
  ------------------
  703|  11.1k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 127k]
  ------------------
  704|  11.1k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 11.1k, False: 0]
  |  Branch (704:29): [True: 11.1k, False: 0]
  |  Branch (704:45): [True: 11.1k, False: 0]
  |  Branch (704:61): [True: 11.1k, False: 0]
  |  Branch (704:77): [True: 11.1k, False: 0]
  ------------------
  705|  11.1k|                        {
  706|  11.1k|                            return OpCode::DIVUI;
  707|  11.1k|                        }
  708|      0|                        break;
  709|       |
  710|  17.1k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 17.1k, False: 110k]
  ------------------
  711|  17.1k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 127k]
  ------------------
  712|  17.1k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 17.1k, False: 0]
  |  Branch (712:29): [True: 17.1k, False: 0]
  |  Branch (712:45): [True: 17.1k, False: 0]
  |  Branch (712:61): [True: 17.1k, False: 0]
  ------------------
  713|  17.1k|                        {
  714|  17.1k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 17.1k]
  ------------------
  715|  17.1k|                            {
  716|    136|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 136, False: 16.9k]
  ------------------
  717|    136|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 17.1k]
  ------------------
  718|    136|                                    return OpCode::MULTD;
  719|       |
  720|  16.7k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 16.7k, False: 410]
  ------------------
  721|  16.7k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 17.1k]
  ------------------
  722|  16.7k|                                    return OpCode::MULTF;
  723|       |
  724|     97|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 97, False: 17.0k]
  ------------------
  725|     97|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 17.1k]
  ------------------
  726|     97|                                    return OpCode::MULTI;
  727|       |
  728|    177|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 177, False: 16.9k]
  ------------------
  729|    177|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 17.1k]
  ------------------
  730|    177|                                    return OpCode::MULTU;
  731|  17.1k|                            }
  732|  17.1k|                        }
  733|      0|                        break;
  734|       |
  735|  61.5k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 61.5k, False: 66.0k]
  ------------------
  736|  61.5k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 127k]
  ------------------
  737|  61.5k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 61.5k]
  ------------------
  738|  61.5k|                        {
  739|  18.2k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 18.2k, False: 43.3k]
  ------------------
  740|  18.2k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 61.5k]
  ------------------
  741|  18.2k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 18.2k, False: 0]
  |  Branch (741:37): [True: 18.2k, False: 0]
  |  Branch (741:53): [True: 18.2k, False: 0]
  |  Branch (741:69): [True: 18.2k, False: 0]
  ------------------
  742|  18.2k|                                {
  743|  18.2k|                                    return OpCode::SEQUI;
  744|  18.2k|                                }
  745|      0|                                break;
  746|       |
  747|  21.5k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 21.5k, False: 40.0k]
  ------------------
  748|  21.5k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 61.5k]
  ------------------
  749|  21.5k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 13.1k, False: 8.41k]
  |  Branch (749:37): [True: 13.1k, False: 8.41k]
  |  Branch (749:53): [True: 13.1k, False: 0]
  |  Branch (749:69): [True: 13.1k, False: 0]
  ------------------
  750|  13.1k|                                {
  751|  13.1k|                                    return OpCode::SGEUI;
  752|  13.1k|                                }
  753|  8.41k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 8.41k, False: 0]
  |  Branch (753:42): [True: 8.41k, False: 0]
  |  Branch (753:58): [True: 8.41k, False: 0]
  |  Branch (753:74): [True: 8.41k, False: 0]
  ------------------
  754|  8.41k|                                {
  755|  8.41k|                                    return OpCode::SGTUI;
  756|  8.41k|                                }
  757|      0|                                break;
  758|       |
  759|  13.9k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 13.9k, False: 47.6k]
  ------------------
  760|  13.9k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 61.5k]
  ------------------
  761|  13.9k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 733, False: 13.1k]
  |  Branch (761:37): [True: 733, False: 13.1k]
  |  Branch (761:53): [True: 733, False: 0]
  |  Branch (761:69): [True: 733, False: 0]
  ------------------
  762|    733|                                {
  763|    733|                                    return OpCode::SLEUI;
  764|    733|                                }
  765|  13.1k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 13.1k, False: 0]
  |  Branch (765:42): [True: 13.1k, False: 0]
  |  Branch (765:58): [True: 13.1k, False: 0]
  |  Branch (765:74): [True: 13.1k, False: 0]
  ------------------
  766|  13.1k|                                {
  767|  13.1k|                                    return OpCode::SLTUI;
  768|  13.1k|                                }
  769|      0|                                break;
  770|       |
  771|     66|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 66, False: 61.4k]
  ------------------
  772|     66|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 61.5k]
  ------------------
  773|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 66, False: 0]
  |  Branch (773:37): [True: 66, False: 0]
  |  Branch (773:53): [True: 66, False: 0]
  |  Branch (773:69): [True: 66, False: 0]
  ------------------
  774|     66|                                {
  775|     66|                                    return OpCode::SNEUI;
  776|     66|                                }
  777|      0|                                break;
  778|       |
  779|  7.84k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 7.84k, False: 53.7k]
  ------------------
  780|  7.84k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 61.5k]
  ------------------
  781|  7.84k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 7.84k, False: 0]
  |  Branch (781:37): [True: 7.84k, False: 0]
  |  Branch (781:53): [True: 7.84k, False: 0]
  |  Branch (781:69): [True: 7.84k, False: 0]
  ------------------
  782|  7.84k|                                {
  783|  7.84k|                                    return OpCode::SUBUI;
  784|  7.84k|                                }
  785|      0|                                break;
  786|  61.5k|                        }
  787|       |
  788|      0|                        break;
  789|   127k|                }
  790|       |
  791|  7.40k|                break;
  792|   127k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  31.6k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 31.6k, False: 1.11M]
  ------------------
  796|  31.6k|                char c1 = token[0];
  797|  31.6k|                char c2 = token[1];
  798|  31.6k|                char c3 = token[2];
  799|  31.6k|                char c4 = token[3];
  800|  31.6k|                char c5 = token[4];
  801|  31.6k|                char c6 = token[5];
  802|       |
  803|  31.6k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 11.2k, False: 20.4k]
  |  Branch (803:21): [True: 11.2k, False: 20.4k]
  |  Branch (803:37): [True: 11.2k, False: 0]
  |  Branch (803:53): [True: 11.2k, False: 0]
  ------------------
  804|  11.2k|                {
  805|  11.2k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 11.2k]
  ------------------
  806|  11.2k|                    {
  807|  1.63k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.63k, False: 9.57k]
  ------------------
  808|  1.63k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 11.2k]
  ------------------
  809|  1.63k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 1.63k, False: 0]
  ------------------
  810|  1.63k|                            {
  811|  1.63k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.22k, False: 411]
  ------------------
  812|  1.22k|                                {
  813|  1.22k|                                    return OpCode::CVTD2F;
  814|  1.22k|                                }
  815|    411|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 411, False: 0]
  ------------------
  816|    411|                                {
  817|    411|                                    return OpCode::CVTD2I;
  818|    411|                                }
  819|  1.63k|                            }
  820|      0|                            break;
  821|       |
  822|  2.07k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.07k, False: 9.13k]
  ------------------
  823|  2.07k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 11.2k]
  ------------------
  824|  2.07k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 2.07k, False: 0]
  ------------------
  825|  2.07k|                            {
  826|  2.07k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 561, False: 1.51k]
  ------------------
  827|    561|                                {
  828|    561|                                    return OpCode::CVTF2D;
  829|    561|                                }
  830|  1.51k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.51k, False: 0]
  ------------------
  831|  1.51k|                                {
  832|  1.51k|                                    return OpCode::CVTF2I;
  833|  1.51k|                                }
  834|  2.07k|                            }
  835|      0|                            break;
  836|       |
  837|  7.49k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 7.49k, False: 3.70k]
  ------------------
  838|  7.49k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 11.2k]
  ------------------
  839|  7.49k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 7.49k, False: 0]
  ------------------
  840|  7.49k|                            {
  841|  7.49k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 7.38k, False: 112]
  ------------------
  842|  7.38k|                                {
  843|  7.38k|                                    return OpCode::CVTI2D;
  844|  7.38k|                                }
  845|    112|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 112, False: 0]
  ------------------
  846|    112|                                {
  847|    112|                                    return OpCode::CVTI2F;
  848|    112|                                }
  849|  7.49k|                            }
  850|  11.2k|                    }
  851|  11.2k|                }
  852|  20.4k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 13.8k, False: 6.55k]
  |  Branch (852:26): [True: 13.8k, False: 6.55k]
  |  Branch (852:42): [True: 13.8k, False: 0]
  |  Branch (852:58): [True: 13.8k, False: 0]
  |  Branch (852:74): [True: 13.8k, False: 0]
  ------------------
  853|  20.4k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 13.8k, False: 0]
  |  Branch (853:42): [True: 13.8k, False: 0]
  ------------------
  854|  13.8k|                {
  855|  13.8k|                    return OpCode::MULTUI;
  856|  13.8k|                }
  857|  6.55k|                break;
  858|  31.6k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  6.55k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 537, False: 1.14M]
  ------------------
  862|    537|                char c1 = token[0];
  863|    537|                char c2 = token[1];
  864|    537|                char c3 = token[2];
  865|    537|                char c4 = token[3];
  866|    537|                char c5 = token[4];
  867|    537|                char c6 = token[5];
  868|    537|                char c7 = token[6];
  869|       |
  870|    537|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 203, False: 334]
  |  Branch (870:21): [True: 203, False: 334]
  |  Branch (870:37): [True: 203, False: 0]
  |  Branch (870:53): [True: 203, False: 0]
  ------------------
  871|    203|                {
  872|    203|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 83, False: 120]
  |  Branch (872:25): [True: 83, False: 120]
  |  Branch (872:41): [True: 83, False: 0]
  |  Branch (872:54): [True: 83, False: 0]
  |  Branch (872:70): [True: 83, False: 0]
  ------------------
  873|     83|                    {
  874|     83|                        return OpCode::MOVI2FP;
  875|     83|                    }
  876|    120|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 120, False: 0]
  |  Branch (876:30): [True: 120, False: 0]
  |  Branch (876:46): [True: 120, False: 0]
  |  Branch (876:62): [True: 120, False: 0]
  |  Branch (876:75): [True: 120, False: 0]
  ------------------
  877|    120|                    {
  878|    120|                        return OpCode::MOVFP2I;
  879|    120|                    }
  880|    203|                }
  881|    334|                break;
  882|    537|            }
  883|       |
  884|  39.0k|            default: {
  ------------------
  |  Branch (884:13): [True: 39.0k, False: 1.10M]
  ------------------
  885|  39.0k|                break;
  886|    537|            }
  887|  1.14M|        }
  888|       |
  889|       |        // None found
  890|   467k|        return OpCode::NONE;
  891|  1.14M|    }
_ZN3dlx3iceEcc:
   17|  1.85M|    {
   18|  1.85M|        constexpr const char diff = 'a' - 'A';
   19|  1.85M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.20M, False: 648k]
  |  Branch (19:28): [True: 162k, False: 485k]
  ------------------
   20|  1.85M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.35M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  19.6k|    {
  193|  19.6k|        ParseError err;
  194|       |
  195|  19.6k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  19.6k|        err.m_LineNumber                           = line_number;
  197|  19.6k|        err.m_Column                               = column;
  198|  19.6k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  19.6k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  19.6k|        return err;
  202|  19.6k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  19.6k|    {
  207|  19.6k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  19.6k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  19.6k|                                                         actual_type);
  210|  19.6k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    946|    {
  216|    946|        ParseError err;
  217|       |
  218|    946|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    946|        err.m_LineNumber        = line_number;
  220|    946|        err.m_Column            = column;
  221|    946|        err.invalid_number.text = text;
  222|       |
  223|    946|        return err;
  224|    946|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    946|    {
  228|    946|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    946|                                                token.GetColumn().unsafe(), token.GetText());
  230|    946|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     18|    {
  235|     18|        ParseError err;
  236|       |
  237|     18|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     18|        err.m_LineNumber = line_number;
  239|     18|        err.m_Column     = column;
  240|       |
  241|     18|        return err;
  242|     18|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     18|    {
  247|     18|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     18|                                                                     token.GetColumn().unsafe());
  249|     18|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   504k|    {
  255|   504k|        ParseError err;
  256|       |
  257|   504k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   504k|        err.m_LineNumber                   = line_number;
  259|   504k|        err.m_Column                       = column;
  260|   504k|        err.unexpected_token.expected_type = expected_type;
  261|   504k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   504k|        return err;
  264|   504k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   504k|    {
  269|   504k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   504k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   504k|                                                  token.GetType());
  272|   504k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  33.5k|    {
  277|  33.5k|        ParseError err;
  278|       |
  279|  33.5k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  33.5k|        err.m_LineNumber                   = line_number;
  281|  33.5k|        err.m_Column                       = column;
  282|  33.5k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  33.5k|        return err;
  285|  33.5k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  12.5k|    {
  289|  12.5k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  12.5k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  12.5k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   200k|    {
  296|   200k|        ParseError err;
  297|       |
  298|   200k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   200k|        err.m_LineNumber                       = line_number;
  300|   200k|        err.m_Column                           = column;
  301|   200k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   200k|        return err;
  304|   200k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   200k|    {
  309|   200k|        return ConstructInvalidLabelIdentifierParseError(
  310|   200k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   200k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  78.6k|    {
  317|  78.6k|        ParseError err;
  318|       |
  319|  78.6k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  78.6k|        err.m_LineNumber                     = line_number;
  321|  78.6k|        err.m_Column                         = column;
  322|  78.6k|        err.label_already_defined.label_name = label_name;
  323|  78.6k|        err.label_already_defined.at_line    = at_line;
  324|  78.6k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  78.6k|        return err;
  327|  78.6k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  78.6k|    {
  332|  78.6k|        return ConstructLabelAlreadyDefinedParseError(
  333|  78.6k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  78.6k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  78.6k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   435k|    {
  340|   435k|        ParseError err;
  341|       |
  342|   435k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   435k|        err.m_LineNumber = line_number;
  344|   435k|        err.m_Column     = column;
  345|       |
  346|   435k|        return err;
  347|   435k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   435k|    {
  352|   435k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   435k|                                                        token.GetColumn().unsafe());
  354|   435k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  74.4k|    {
  360|  74.4k|        ParseError err;
  361|       |
  362|  74.4k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  74.4k|        err.m_LineNumber               = line_number;
  364|  74.4k|        err.m_Column                   = column;
  365|  74.4k|        err.too_few_arguments.required = required;
  366|  74.4k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  74.4k|        return err;
  369|  74.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  74.4k|    {
  374|  74.4k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  74.4k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  74.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  4.63k|    {
  381|  4.63k|        ParseError err;
  382|       |
  383|  4.63k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  4.63k|        err.m_LineNumber           = line_number;
  385|  4.63k|        err.m_Column               = column;
  386|  4.63k|        err.empty_label.label_name = label_name;
  387|       |
  388|  4.63k|        return err;
  389|  4.63k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  4.63k|    {
  393|  4.63k|        return ConstructEmptyLabelParseError(
  394|  4.63k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  4.63k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 3.85k, False: 778]
  ------------------
  396|  3.85k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  4.63k|                        token.GetText());
  398|  4.63k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    452|    {
  403|    452|        ParseError err;
  404|       |
  405|    452|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    452|        err.m_LineNumber = line_number;
  407|    452|        err.m_Column     = column;
  408|       |
  409|    452|        return err;
  410|    452|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    452|    {
  414|    452|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    452|                                               token.GetColumn().unsafe());
  416|    452|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.35M|    {
   19|  1.35M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.35M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  9.36k|    {
  182|  9.36k|        ParsedProgram program;
  183|       |
  184|  9.36k|        program.m_Tokens = tokens;
  185|       |
  186|  9.36k|        phi::boolean line_has_instruction{false};
  187|  9.36k|        phi::usize   label_count{0u};
  188|       |
  189|  2.84M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.83M, False: 9.36k]
  ------------------
  190|  2.83M|        {
  191|  2.83M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.83M|            switch (current_token.GetType())
  196|  2.83M|            {
  197|       |                // Ignore comments
  198|   432k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 432k, False: 2.40M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   432k|                    break;
  201|       |
  202|  1.03M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.03M, False: 1.80M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.03M|                    line_has_instruction = false;
  205|  1.03M|                    break;
  206|       |
  207|   308k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 308k, False: 2.53M]
  ------------------
  208|   308k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 10.3k, False: 297k]
  ------------------
  209|  10.3k|                    {
  210|  10.3k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  10.3k|                                current_token, Token::Type::NewLine));
  212|  10.3k|                        break;
  213|  10.3k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   297k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 176k, False: 121k]
  ------------------
  218|   176k|                    {
  219|   176k|                        program.AddParseError(
  220|   176k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   176k|                        break;
  222|   176k|                    }
  223|       |
  224|   121k|                    std::string_view label_name = current_token.GetText();
  225|   121k|                    label_name.remove_suffix(1);
  226|       |
  227|   121k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 21.0k, False: 100k]
  ------------------
  228|  21.0k|                    {
  229|  21.0k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  21.0k|                                current_token.GetLineNumber().unsafe(),
  231|  21.0k|                                current_token.GetColumn().unsafe(), label_name));
  232|  21.0k|                        break;
  233|  21.0k|                    }
  234|       |
  235|   100k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 13.7k, False: 86.7k]
  ------------------
  236|  13.7k|                    {
  237|  13.7k|                        program.AddParseError(
  238|  13.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  13.7k|                        break;
  240|  13.7k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  86.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 78.6k, False: 8.14k]
  ------------------
  244|  78.6k|                    {
  245|       |                        // Find first defintions of label
  246|  78.6k|                        const Token* first_label_definition =
  247|  78.6k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  78.6k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  78.6k|                                    {
  250|  78.6k|                                        std::string_view token_label_name = t.GetText();
  251|  78.6k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  78.6k|                                        if (token_label_name == label_name)
  254|  78.6k|                                        {
  255|  78.6k|                                            return true;
  256|  78.6k|                                        }
  257|  78.6k|                                    }
  258|       |
  259|  78.6k|                                    return false;
  260|  78.6k|                                });
  261|       |
  262|  78.6k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  78.6k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  78.6k|                                current_token, *first_label_definition));
  266|  78.6k|                        break;
  267|  78.6k|                    }
  268|       |
  269|  8.14k|                    program.m_JumpData[label_name] =
  270|  8.14k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  8.14k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  8.14k|                    break;
  277|  86.7k|                }
  278|       |
  279|   643k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 643k, False: 2.19M]
  ------------------
  280|   643k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 435k, False: 207k]
  ------------------
  281|   435k|                    {
  282|   435k|                        program.AddParseError(
  283|   435k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   435k|                        break;
  285|   435k|                    }
  286|       |
  287|   207k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   207k|                    PHI_ASSERT(current_token.HasHint());
  291|   207k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   207k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   207k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   207k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   207k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   207k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   207k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   207k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   207k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   332k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 318k, False: 14.2k]
  ------------------
  313|   318k|                    {
  314|       |                        // Get next token
  315|   318k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 449, False: 317k]
  ------------------
  316|    449|                        {
  317|    449|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    449|                                    current_token, number_of_argument_required.unsafe(),
  319|    449|                                    argument_num.unsafe()));
  320|    449|                            break;
  321|    449|                        }
  322|       |
  323|   317k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   317k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 68.8k, False: 248k]
  ------------------
  327|  68.8k|                        {
  328|  68.8k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 452, False: 68.4k]
  ------------------
  329|    452|                            {
  330|    452|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    452|                            }
  332|       |
  333|  68.8k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  68.8k|                            continue;
  336|  68.8k|                        }
  337|       |
  338|   248k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 73.9k, False: 174k]
  ------------------
  339|  73.9k|                        {
  340|  73.9k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  73.9k|                                    token, number_of_argument_required.unsafe(),
  342|  73.9k|                                    argument_num.unsafe()));
  343|  73.9k|                            break;
  344|  73.9k|                        }
  345|       |
  346|   174k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   174k|                                parse_instruction_argument(
  348|   174k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   174k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 118k, False: 55.9k]
  ------------------
  350|   118k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   118k|                            break;
  353|   118k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  55.9k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  55.9k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  55.9k|                        argument_num++;
  360|  55.9k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  55.9k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   207k|                    program.m_Instructions.emplace_back(instruction);
  368|   207k|                    line_has_instruction = true;
  369|   207k|                    break;
  370|   643k|                }
  371|       |
  372|   418k|                default:
  ------------------
  |  Branch (372:17): [True: 418k, False: 2.42M]
  ------------------
  373|   418k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   418k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 222k, False: 196k]
  ------------------
  375|   222k|                    {
  376|   222k|                        expected_token_type = Token::Type::NewLine;
  377|   222k|                    }
  378|       |
  379|   418k|                    program.AddParseError(
  380|   418k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   418k|                    break;
  382|  2.83M|            }
  383|  2.83M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  9.36k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 712, False: 8.65k]
  ------------------
  387|    712|        {
  388|  8.87k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 8.16k, False: 712]
  ------------------
  389|  8.16k|            {
  390|  8.16k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  8.16k|                const Token& token = *it;
  393|  8.16k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 4.63k, False: 3.53k]
  ------------------
  394|  4.63k|                {
  395|  4.63k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  4.63k|                    --label_count;
  397|  4.63k|                }
  398|  8.16k|            }
  399|    712|        }
  400|       |
  401|  9.36k|        return program;
  402|  9.36k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  9.36k|    {
  406|  9.36k|        TokenStream tokens = Tokenize(source);
  407|  9.36k|        return Parse(tokens);
  408|  9.36k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   174k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   174k|        switch (token.GetType())
   38|   174k|        {
   39|  9.71k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 9.71k, False: 165k]
  ------------------
   40|  9.71k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 689, False: 9.02k]
  ------------------
   41|  9.71k|                                          ArgumentType::AddressDisplacement))
   42|    689|                {
   43|    689|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    689|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    689|                    return {};
   47|    689|                }
   48|       |
   49|       |                // Get address displacement
   50|  9.02k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  9.02k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  9.02k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 18, False: 9.00k]
  ------------------
   55|     18|                {
   56|     18|                    program.AddParseError(
   57|     18|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     18|                    return {};
   59|     18|                }
   60|       |
   61|  9.00k|                auto         it           = tokens.current_position();
   62|  9.00k|                const Token& first_token  = tokens.consume();
   63|  9.00k|                const Token& second_token = tokens.consume();
   64|  9.00k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  9.00k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 9.00k, False: 0]
  ------------------
   67|  9.00k|                {
   68|  9.00k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  9.00k|                            first_token, Token::Type::OpenBracket));
   70|  9.00k|                    return {};
   71|  9.00k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  37.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 37.5k, False: 137k]
  ------------------
   98|  37.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 6.08k, False: 31.4k]
  ------------------
   99|  6.08k|                {
  100|  6.08k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  6.08k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  6.08k|                    return {};
  103|  6.08k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  31.4k|                return ConstructInstructionArgumentRegisterInt(
  109|  31.4k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  37.5k|            }
  111|  2.95k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 2.95k, False: 171k]
  ------------------
  112|  2.95k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.77k, False: 178]
  ------------------
  113|  2.77k|                {
  114|  2.77k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.77k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.77k|                    return {};
  117|  2.77k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    178|                return ConstructInstructionArgumentRegisterFloat(
  123|    178|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  2.95k|            }
  125|  12.5k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 12.5k, False: 162k]
  ------------------
  126|  12.5k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  12.5k|                return {};
  129|  2.95k|            }
  130|  30.9k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 30.9k, False: 143k]
  ------------------
  131|       |                // Parse as Label
  132|  30.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 6.41k, False: 24.5k]
  ------------------
  133|  6.41k|                {
  134|  6.41k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  6.41k|                            token, expected_argument_type, ArgumentType::Label));
  136|  6.41k|                    return {};
  137|  6.41k|                }
  138|       |
  139|  24.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 24.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  24.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 10.9k, False: 13.5k]
  ------------------
  146|  10.9k|                {
  147|  10.9k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  10.9k|                    return {};
  149|  10.9k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  13.5k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  24.5k|            }
  155|  15.3k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 15.3k, False: 159k]
  ------------------
  156|  15.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.66k, False: 11.7k]
  ------------------
  157|  3.66k|                {
  158|  3.66k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.66k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.66k|                    return {};
  161|  3.66k|                }
  162|       |
  163|  11.7k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 10.7k, False: 946]
  ------------------
  164|  10.7k|                {
  165|  10.7k|                    return ConstructInstructionArgumentImmediateValue(
  166|  10.7k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  10.7k|                }
  168|       |
  169|    946|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    946|                return {};
  171|  11.7k|            }
  172|       |
  173|  65.7k|            default:
  ------------------
  |  Branch (173:13): [True: 65.7k, False: 109k]
  ------------------
  174|  65.7k|                program.AddParseError(
  175|  65.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  65.7k|                return {};
  177|   174k|        }
  178|   174k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  1.43M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.43M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 403k, False: 1.03M]
  ------------------
  249|   403k|                                    {
  250|   403k|                                        std::string_view token_label_name = t.GetText();
  251|   403k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   403k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 78.6k, False: 324k]
  ------------------
  254|  78.6k|                                        {
  255|  78.6k|                                            return true;
  256|  78.6k|                                        }
  257|   403k|                                    }
  258|       |
  259|  1.35M|                                    return false;
  260|  1.43M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    250|    {
  354|    250|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 250]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    250|        m_CurrentProgram = &program;
  361|       |
  362|    250|        m_ProgramCounter               = 0u;
  363|    250|        m_Halted                       = false;
  364|    250|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    250|        m_LastRaisedException          = Exception::None;
  366|    250|        m_CurrentStepCount             = 0u;
  367|       |
  368|    250|        return true;
  369|    250|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.33M|    {
   14|  1.33M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 316k, False: 1.01M]
  ------------------
   15|   316k|        {
   16|   316k|            char first_char = token[0];
   17|   316k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 90.0k, False: 225k]
  |  Branch (17:38): [True: 41.4k, False: 184k]
  ------------------
   18|   131k|            {
   19|   131k|                char second_char = token[1];
   20|   131k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 130k, False: 613]
  |  Branch (20:43): [True: 107k, False: 23.6k]
  ------------------
   21|   107k|                {
   22|   107k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|   107k|                }
   24|   131k|            }
   25|   316k|        }
   26|  1.01M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 439k, False: 579k]
  ------------------
   27|   439k|        {
   28|   439k|            char first_char = token[0];
   29|   439k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 45.4k, False: 394k]
  |  Branch (29:38): [True: 20.5k, False: 373k]
  ------------------
   30|  66.0k|            {
   31|  66.0k|                char second_char = token[1];
   32|  66.0k|                char third_char  = token[2];
   33|       |
   34|  66.0k|                switch (second_char)
   35|  66.0k|                {
   36|  23.0k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 23.0k, False: 42.9k]
  ------------------
   37|  23.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 22.8k, False: 169]
  |  Branch (37:50): [True: 13.0k, False: 9.81k]
  ------------------
   38|  13.0k|                        {
   39|  13.0k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  13.0k|                        }
   41|  9.98k|                        break;
   42|  23.0k|                    }
   43|  33.6k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 33.6k, False: 32.4k]
  ------------------
   44|  33.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 33.5k, False: 88]
  |  Branch (44:50): [True: 23.8k, False: 9.63k]
  ------------------
   45|  23.8k|                        {
   46|  23.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  23.8k|                        }
   48|  9.72k|                        break;
   49|  33.6k|                    }
   50|  9.72k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 8.50k, False: 57.5k]
  ------------------
   51|  8.50k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 179, False: 8.32k]
  |  Branch (51:50): [True: 8.25k, False: 71]
  ------------------
   52|  8.43k|                        {
   53|  8.43k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  8.43k|                        }
   55|     71|                        break;
   56|  8.50k|                    }
   57|    832|                    default: {
  ------------------
  |  Branch (57:21): [True: 832, False: 65.1k]
  ------------------
   58|    832|                        break;
   59|  8.50k|                    }
   60|  66.0k|                }
   61|  66.0k|            }
   62|   439k|        }
   63|       |
   64|  1.18M|        return IntRegisterID::None;
   65|  1.33M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.18M|    {
   69|  1.18M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 208k, False: 974k]
  ------------------
   70|   208k|        {
   71|   208k|            char first_char = token[0];
   72|   208k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 16.3k, False: 192k]
  |  Branch (72:38): [True: 5.76k, False: 186k]
  ------------------
   73|  22.0k|            {
   74|  22.0k|                char second_char = token[1];
   75|  22.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 21.9k, False: 117]
  |  Branch (75:43): [True: 16.2k, False: 5.68k]
  ------------------
   76|  16.2k|                {
   77|  16.2k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  16.2k|                }
   79|  22.0k|            }
   80|   208k|        }
   81|   974k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 394k, False: 579k]
  ------------------
   82|   394k|        {
   83|   394k|            char first_char = token[0];
   84|   394k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 24.3k, False: 369k]
  |  Branch (84:38): [True: 6.37k, False: 363k]
  ------------------
   85|  30.7k|            {
   86|  30.7k|                char second_char = token[1];
   87|  30.7k|                char third_char  = token[2];
   88|       |
   89|  30.7k|                switch (second_char)
   90|  30.7k|                {
   91|  11.5k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 11.5k, False: 19.2k]
  ------------------
   92|  11.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 11.3k, False: 107]
  |  Branch (92:50): [True: 11.3k, False: 84]
  ------------------
   93|  11.3k|                        {
   94|  11.3k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  11.3k|                        }
   96|    191|                        break;
   97|  11.5k|                    }
   98|  6.28k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 6.28k, False: 24.4k]
  ------------------
   99|  6.28k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 328, False: 5.95k]
  |  Branch (99:50): [True: 255, False: 73]
  ------------------
  100|    255|                        {
  101|    255|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    255|                        }
  103|  6.02k|                        break;
  104|  6.28k|                    }
  105|  12.8k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 12.8k, False: 17.8k]
  ------------------
  106|  12.8k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 12.6k, False: 216]
  |  Branch (106:50): [True: 116, False: 100]
  ------------------
  107|  12.7k|                        {
  108|  12.7k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  12.7k|                        }
  110|    100|                        break;
  111|  12.8k|                    }
  112|    100|                    default: {
  ------------------
  |  Branch (112:21): [True: 72, False: 30.6k]
  ------------------
  113|     72|                        break;
  114|  12.8k|                    }
  115|  30.7k|                }
  116|  30.7k|            }
  117|   394k|        }
  118|       |
  119|  1.14M|        return FloatRegisterID::None;
  120|  1.18M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.36M|    {
  124|  1.36M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 331k, False: 1.03M]
  ------------------
  125|   331k|        {
  126|   331k|            char c1 = token[0];
  127|   331k|            char c2 = token[1];
  128|   331k|            char c3 = token[2];
  129|   331k|            char c4 = token[3];
  130|       |
  131|   331k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 50.7k, False: 280k]
  |  Branch (131:34): [True: 165, False: 280k]
  |  Branch (131:49): [True: 50.7k, False: 193]
  |  Branch (131:62): [True: 127, False: 66]
  ------------------
  132|   331k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 50.7k, False: 132]
  |  Branch (132:34): [True: 66, False: 66]
  |  Branch (132:49): [True: 50.7k, False: 66]
  |  Branch (132:62): [True: 0, False: 66]
  ------------------
  133|   331k|        }
  134|       |
  135|  1.03M|        return false;
  136|  1.36M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  2.26M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   918k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  8.72M|    {
   41|  8.72M|        return m_Type;
   42|  8.72M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  5.75M|    {
   51|  5.75M|        return m_LineNumber;
   52|  5.75M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  11.2M|    {
   56|  11.2M|        return m_Column;
   57|  11.2M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  7.74M|    {
   61|  7.74M|        return m_Text.length();
   62|  7.74M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.19M|    {
   66|  1.19M|        return m_Text;
   67|  1.19M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   228k|    {
   80|   228k|        return m_HasHint;
   81|   228k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   258k|    {
   85|   258k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   258k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   258k|                   m_Type == Type::ImmediateInteger);
   88|   258k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   258k|        return m_Hint;
   91|   258k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  9.36k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  9.36k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  9.36k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  9.02k|    {
   51|  9.02k|        auto it = m_Iterator;
   52|  36.0k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 27.0k, False: 9.00k]
  ------------------
   53|  27.0k|        {
   54|  27.0k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 18, False: 27.0k]
  ------------------
   55|     18|            {
   56|     18|                return false;
   57|     18|            }
   58|  27.0k|        }
   59|       |
   60|  9.00k|        return true;
   61|  9.02k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  3.16M|    {
   65|  3.16M|        return m_Iterator != m_Tokens.end();
   66|  3.16M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  3.18M|    {
   70|  3.18M|        return m_Iterator == m_Tokens.end();
   71|  3.18M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  3.18M|    {
   85|  3.18M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  3.18M|        return *m_Iterator++;
   91|  3.18M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  9.00k|    {
  164|  9.00k|        return m_Iterator;
  165|  9.00k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  9.36k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  9.36k|        return m_Tokens.begin();
  188|  9.36k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  9.36k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  9.36k|        return m_Tokens.end();
  206|  9.36k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    712|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    712|        return m_Tokens.rbegin();
  224|    712|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  8.16k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  8.16k|        return m_Tokens.rend();
  233|  8.16k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  9.36k|    {
   63|  9.36k|        TokenStream tokens;
   64|       |
   65|  9.36k|        std::string_view current_token;
   66|       |
   67|  9.36k|        phi::u64 current_line_number{1u};
   68|  9.36k|        phi::u64 current_column{1u};
   69|  9.36k|        phi::u64 token_begin{0u};
   70|       |
   71|  9.36k|        phi::boolean parsing_comment{false};
   72|       |
   73|  7.46M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 7.45M, False: 9.36k]
  ------------------
   74|  7.45M|        {
   75|  7.45M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  7.45M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.12M, False: 6.33M]
  ------------------
   78|  1.12M|            {
   79|  1.12M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 363k, False: 764k]
  ------------------
   80|   363k|                {
   81|       |                    // Skip empty lines
   82|   363k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   363k|                                        current_line_number, current_column);
   84|       |
   85|   363k|                    parsing_comment = false;
   86|   363k|                    current_line_number += 1u;
   87|   363k|                    current_column = 1u;
   88|   363k|                    continue;
   89|   363k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   764k|                tokens.emplace_back(
   93|   764k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   764k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   764k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   764k|                                    current_line_number, current_column);
   98|       |
   99|   764k|                current_token   = std::string_view{};
  100|   764k|                parsing_comment = false;
  101|   764k|                current_line_number += 1u;
  102|   764k|                current_column = 0u;
  103|   764k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  6.33M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 50.0k, False: 6.28M]
  |  Branch (105:34): [True: 454k, False: 5.82M]
  ------------------
  106|   504k|            {
  107|   504k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 430k, False: 73.7k]
  ------------------
  108|   430k|                {
  109|   430k|                    token_begin = i;
  110|   430k|                }
  111|  73.7k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 42.3k, False: 31.4k]
  ------------------
  112|  42.3k|                {
  113|  42.3k|                    tokens.emplace_back(ParseToken(
  114|  42.3k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  42.3k|                            current_line_number, current_column - current_token.length()));
  116|  42.3k|                    token_begin   = i;
  117|  42.3k|                    current_token = std::string_view{};
  118|  42.3k|                }
  119|       |
  120|   504k|                parsing_comment = true;
  121|   504k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   504k|            }
  123|  5.82M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 565k, False: 5.26M]
  ------------------
  124|   565k|            {
  125|       |                // simply append the character
  126|   565k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   565k|            }
  128|  5.26M|            else
  129|  5.26M|            {
  130|       |                // Not parsing a comment
  131|  5.26M|                switch (c)
  132|  5.26M|                {
  133|   638k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 638k, False: 4.62M]
  ------------------
  134|   639k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 419, False: 5.26M]
  ------------------
  135|   639k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 5.26M]
  ------------------
  136|   639k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 2.36k, False: 636k]
  ------------------
  137|  2.36k|                        {
  138|  2.36k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  2.36k|                            continue;
  141|  2.36k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   636k|                        tokens.emplace_back(ParseToken(
  145|   636k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   636k|                                current_line_number, current_column - current_token.length()));
  147|   636k|                        current_token = std::string_view{};
  148|   636k|                        break;
  149|   136k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 136k, False: 5.12M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   136k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 124k, False: 11.8k]
  ------------------
  152|   124k|                        {
  153|   124k|                            current_token =
  154|   124k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   124k|                            tokens.emplace_back(ParseToken(
  156|   124k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   124k|                                    current_line_number,
  158|   124k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   124k|                            current_token = std::string_view{};
  161|   124k|                        }
  162|  11.8k|                        else
  163|  11.8k|                        {
  164|       |                            // Orphan colon
  165|  11.8k|                            token_begin = i;
  166|       |
  167|  11.8k|                            tokens.emplace_back(Token::Type::Colon,
  168|  11.8k|                                                source.substr(token_begin.unsafe(), 1),
  169|  11.8k|                                                current_line_number, current_column);
  170|  11.8k|                        }
  171|   136k|                        break;
  172|   220k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 220k, False: 5.04M]
  ------------------
  173|   250k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 30.2k, False: 5.23M]
  ------------------
  174|   251k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 894, False: 5.26M]
  ------------------
  175|   251k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 220k, False: 30.9k]
  ------------------
  176|   220k|                        {
  177|   220k|                            tokens.emplace_back(ParseToken(
  178|   220k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   220k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   220k|                            current_token = std::string_view{};
  182|   220k|                        }
  183|       |
  184|   251k|                        Token::Type type;
  185|   251k|                        switch (c)
  186|   251k|                        {
  187|   220k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 220k, False: 31.1k]
  ------------------
  188|   220k|                                type = Token::Type::Comma;
  189|   220k|                                break;
  190|  30.2k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 30.2k, False: 221k]
  ------------------
  191|  30.2k|                                type = Token::Type::OpenBracket;
  192|  30.2k|                                break;
  193|    894|                            case ')':
  ------------------
  |  Branch (193:29): [True: 894, False: 250k]
  ------------------
  194|    894|                                type = Token::Type::ClosingBracket;
  195|    894|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 251k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   251k|#endif
  201|   251k|                        }
  202|       |
  203|   251k|                        token_begin = i;
  204|       |
  205|   251k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   251k|                                            current_line_number, current_column);
  207|   251k|                        break;
  208|       |
  209|  4.23M|                    default:
  ------------------
  |  Branch (209:21): [True: 4.23M, False: 1.02M]
  ------------------
  210|  4.23M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.31M, False: 2.91M]
  ------------------
  211|  1.31M|                        {
  212|  1.31M|                            token_begin = i;
  213|  1.31M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  4.23M|                        current_token =
  217|  4.23M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  5.26M|                }
  219|  5.26M|            }
  220|       |
  221|  7.09M|            current_column += 1u;
  222|  7.09M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  9.36k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 3.13k, False: 6.23k]
  ------------------
  226|  3.13k|        {
  227|  3.13k|            tokens.emplace_back(
  228|  3.13k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  3.13k|                               current_line_number, current_column - current_token.length()));
  230|  3.13k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  9.36k|        tokens.finalize();
  234|       |
  235|  9.36k|        return tokens;
  236|  9.36k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.79M|    {
   11|  1.79M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 42.7k, False: 1.74M]
  |  Branch (11:35): [True: 42.0k, False: 673]
  ------------------
   12|  42.0k|        {
   13|  42.0k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  42.0k|            if (number)
  ------------------
  |  Branch (15:17): [True: 33.7k, False: 8.27k]
  ------------------
   16|  33.7k|            {
   17|  33.7k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  33.7k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  33.7k|            }
   20|       |
   21|  8.27k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  42.0k|        }
   23|       |
   24|  1.75M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 18.7k, False: 1.73M]
  |  Branch (24:35): [True: 454k, False: 1.27M]
  ------------------
   25|   473k|        {
   26|   473k|            return {Token::Type::Comment, token, line_number, column};
   27|   473k|        }
   28|       |
   29|  1.27M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 36.9k, False: 1.24M]
  ------------------
   30|  36.9k|        {
   31|  36.9k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  36.9k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  36.9k|        }
   34|       |
   35|  1.24M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 50.7k, False: 1.18M]
  ------------------
   36|  50.7k|        {
   37|  50.7k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  50.7k|        }
   39|       |
   40|  1.18M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 133k, False: 1.05M]
  ------------------
   41|   133k|        {
   42|   133k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|   133k|                    static_cast<std::uint32_t>(id)};
   44|   133k|        }
   45|       |
   46|  1.05M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 40.5k, False: 1.01M]
  ------------------
   47|  40.5k|        {
   48|  40.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  40.5k|                    static_cast<std::uint32_t>(id)};
   50|  40.5k|        }
   51|       |
   52|  1.01M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 673k, False: 341k]
  ------------------
   53|   673k|        {
   54|   673k|            return {Token::Type::OpCode, token, line_number, column,
   55|   673k|                    static_cast<std::uint32_t>(opcode)};
   56|   673k|        }
   57|       |
   58|   341k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  1.01M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  9.36k|    {
   53|       |        // Constants
   54|  9.36k|        constexpr std::uint8_t number_of_opcodes =
   55|  9.36k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  9.36k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  9.36k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  9.36k|        std::string ret;
   60|       |
   61|  1.70M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.70M, False: 9.26k]
  ------------------
   62|  1.70M|        {
   63|  1.70M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.70M|            switch (current_value)
   66|  1.70M|            {
   67|       |                // OpCode
   68|   607k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 607k, False: 1.09M]
  ------------------
   69|       |                    // Has one more value
   70|   607k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 607k, False: 535]
  ------------------
   71|   607k|                    {
   72|   607k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   607k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   607k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 25, False: 607k]
  ------------------
   77|     25|                        {
   78|     25|                            return detail::ErrorString;
   79|     25|                        }
   80|   607k|                    }
   81|   607k|                    break;
   82|   607k|                }
   83|       |
   84|       |                // Int Register
   85|   607k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 142k, False: 1.55M]
  ------------------
   86|       |                    // Has one more value
   87|   142k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 142k, False: 137]
  ------------------
   88|   142k|                    {
   89|   142k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   142k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   142k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 4, False: 142k]
  ------------------
   93|      4|                        {
   94|      4|                            return detail::ErrorString;
   95|      4|                        }
   96|   142k|                    }
   97|   142k|                    break;
   98|   142k|                }
   99|       |
  100|       |                // Float register
  101|   142k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 46.7k, False: 1.65M]
  ------------------
  102|       |                    // Has one more value
  103|  46.7k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 46.7k, False: 1]
  ------------------
  104|  46.7k|                    {
  105|  46.7k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  46.7k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  46.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 27, False: 46.7k]
  ------------------
  109|     27|                        {
  110|     27|                            return detail::ErrorString;
  111|     27|                        }
  112|  46.7k|                    }
  113|  46.7k|                    break;
  114|  46.7k|                }
  115|       |
  116|       |                // Floating point status register
  117|  51.5k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 51.5k, False: 1.64M]
  ------------------
  118|  51.5k|                    ret += "FPSR";
  119|  51.5k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 3, False: 51.5k]
  ------------------
  120|      3|                    {
  121|      3|                        return detail::ErrorString;
  122|      3|                    }
  123|       |
  124|  51.5k|                    break;
  125|  51.5k|                }
  126|       |
  127|       |                // Immediate integer
  128|  53.7k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 53.7k, False: 1.64M]
  ------------------
  129|  53.7k|                    ret += "#";
  130|  53.7k|                    [[fallthrough]];
  131|  53.7k|                }
  132|       |
  133|       |                // Integer literal
  134|   107k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 53.3k, False: 1.64M]
  ------------------
  135|   107k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   107k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 106k, False: 207]
  ------------------
  138|   106k|                    {
  139|   106k|                        std::int16_t value = 0;
  140|       |
  141|   320k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 213k, False: 106k]
  ------------------
  142|   213k|                        {
  143|   213k|                            value <<= 8;
  144|   213k|                            value &= data[index++];
  145|   213k|                        }
  146|       |
  147|   106k|                        ret += std::to_string(value);
  148|   106k|                    }
  149|   107k|                    break;
  150|  53.7k|                }
  151|       |
  152|       |                // Label
  153|  22.9k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 22.9k, False: 1.67M]
  ------------------
  154|  22.9k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  22.9k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 22.9k, False: 27]
  ------------------
  157|  22.9k|                    {
  158|  22.9k|                        std::string label_name = "lbl_";
  159|       |
  160|   137k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 114k, False: 22.9k]
  ------------------
  161|   114k|                        {
  162|   114k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   114k|                            label_name += c;
  165|   114k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  22.9k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 22.8k, False: 136]
  |  Branch (168:45): [True: 15.3k, False: 7.47k]
  ------------------
  169|  15.3k|                        {
  170|  15.3k|                            label_name += ':';
  171|  15.3k|                            ret += label_name;
  172|  15.3k|                        }
  173|  7.61k|                        else
  174|  7.61k|                        {
  175|  7.61k|                            ret += label_name;
  176|  7.61k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 2, False: 7.60k]
  ------------------
  177|      2|                            {
  178|      2|                                return detail::ErrorString;
  179|      2|                            }
  180|  7.61k|                        }
  181|  22.9k|                    }
  182|  22.9k|                    break;
  183|  22.9k|                }
  184|       |
  185|       |                // Newline
  186|   268k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 268k, False: 1.43M]
  ------------------
  187|   268k|                    ret += '\n';
  188|   268k|                    break;
  189|  22.9k|                }
  190|       |
  191|       |                // Comment
  192|   453k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 453k, False: 1.24M]
  ------------------
  193|   453k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   453k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 452k, False: 289]
  ------------------
  196|   452k|                    {
  197|   452k|                        std::string comment = "; ";
  198|       |
  199|  2.71M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 2.26M, False: 452k]
  ------------------
  200|  2.26M|                        {
  201|  2.26M|                            comment += static_cast<char>(data[index++]);
  202|  2.26M|                        }
  203|       |
  204|   452k|                        ret += comment + '\n';
  205|   452k|                    }
  206|   453k|                    break;
  207|  22.9k|                }
  208|       |
  209|       |                // Ignore
  210|     46|                default:
  ------------------
  |  Branch (210:17): [True: 46, False: 1.70M]
  ------------------
  211|     46|                    return detail::ErrorString;
  212|  1.70M|            }
  213|  1.70M|        }
  214|       |
  215|  9.26k|        return ret;
  216|  9.36k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   855k|        {
   20|   855k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 852k, False: 2.64k]
  ------------------
   21|   852k|            {
   22|   852k|                std::uint8_t val = data[index++];
   23|   852k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 639k, False: 213k]
  ------------------
   24|   639k|                {
   25|   639k|                    text += ' ';
   26|   639k|                }
   27|   213k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 213k, False: 61]
  ------------------
   28|   213k|                {
   29|   213k|                    text += ',';
   30|   213k|                }
   31|     61|                else
   32|     61|                {
   33|     61|                    return false;
   34|     61|                }
   35|   852k|            }
   36|       |
   37|   855k|            return true;
   38|   855k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   114k|        {
   42|   114k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 88.5k, False: 25.9k]
  ------------------
   43|  88.5k|            {
   44|  88.5k|                return '_';
   45|  88.5k|            }
   46|       |
   47|  25.9k|            return c;
   48|   114k|        }

LLVMFuzzerTestOneInput:
   12|  9.36k|{
   13|  9.36k|    static dlxemu::Emulator emu;
   14|       |
   15|  9.36k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  9.36k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  9.36k|    editor.SetText(source);
   21|  9.36k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  9.36k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  9.36k|    editor.ColorizeInternal();
   26|       |
   27|  9.36k|    return 0;
   28|  9.36k|}


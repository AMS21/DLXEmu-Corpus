_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  197|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  202|  19.0k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  240|  3.81k|    {
  241|  3.81k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (241:13): [True: 2.52k, False: 1.29k]
  ------------------
  242|  2.52k|        {
  243|  2.52k|            return m_Line < other.m_Line;
  244|  2.52k|        }
  245|       |
  246|  1.29k|        return m_Column <= other.m_Column;
  247|  3.81k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  251|      1|    {
  252|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (252:13): [True: 0, False: 1]
  ------------------
  253|      0|        {
  254|      0|            return m_Line > other.m_Line;
  255|      0|        }
  256|       |
  257|      1|        return m_Column >= other.m_Column;
  258|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  265|   803k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  293|      1|    {
  294|      1|        Colorize();
  295|      1|        m_Lines.push_back(Line());
  296|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  299|      1|    {
  300|      1|        VerifyInternalState();
  301|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  349|  3.81k|    {
  350|  3.81k|        m_ErrorMarkers.clear();
  351|  3.81k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  414|  3.81k|    {
  415|  3.81k|        m_Breakpoints.clear();
  416|  3.81k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  494|  3.81k|    {
  495|  3.81k|        m_Lines.clear();
  496|  3.81k|        ResetState();
  497|  3.81k|        m_Lines.emplace_back(Line());
  498|       |
  499|  3.81k|        for (const char character : text)
  ------------------
  |  Branch (499:35): [True: 1.01M, False: 3.81k]
  ------------------
  500|  1.01M|        {
  501|  1.01M|            if (character == '\r' ||
  ------------------
  |  Branch (501:17): [True: 2.47k, False: 1.00M]
  |  Branch (501:17): [True: 63.2k, False: 947k]
  ------------------
  502|  1.01M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (502:18): [True: 205k, False: 802k]
  |  Branch (502:48): [True: 61.5k, False: 144k]
  |  Branch (502:69): [True: 60.7k, False: 775]
  ------------------
  503|  63.2k|            {
  504|       |                // ignore the carriage return character and control characters
  505|  63.2k|            }
  506|   947k|            else if (character == '\n')
  ------------------
  |  Branch (506:22): [True: 144k, False: 803k]
  ------------------
  507|   144k|            {
  508|   144k|                m_Lines.emplace_back(Line());
  509|   144k|            }
  510|   803k|            else
  511|   803k|            {
  512|   803k|                m_Lines.back().emplace_back(
  513|   803k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  514|   803k|            }
  515|  1.01M|        }
  516|       |
  517|  3.81k|        m_TextChanged = true;
  518|  3.81k|        m_ScrollToTop = true;
  519|       |
  520|  3.81k|        m_UndoBuffer.clear();
  521|  3.81k|        m_UndoIndex = 0u;
  522|       |
  523|  3.81k|        Colorize();
  524|  3.81k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  527|  3.81k|    {
  528|  3.81k|        const phi::u32 max_line = GetMaxLineNumber();
  529|       |
  530|  3.81k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  531|  3.81k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1494|      1|    {
 1495|       |        // Lines should never be empty
 1496|      1|        PHI_ASSERT(!m_Lines.empty());
 1497|       |
 1498|       |        // Verify Selection is still in a valid state
 1499|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1501|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1503|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1504|       |
 1505|       |        // Verify cursor position
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1508|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1509|       |
 1510|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1511|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1512|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1513|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1514|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1515|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1516|       |#endif
 1517|       |
 1518|       |        // Verify that all breakpoints are on existing lines
 1519|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1519:35): [True: 0, False: 1]
  ------------------
 1520|      0|        {
 1521|      0|            PHI_ASSERT(break_point != 0u);
 1522|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1523|      0|        }
 1524|       |
 1525|       |        // Verify that all error markers are on existing lines
 1526|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1526:34): [True: 0, False: 1]
  ------------------
 1527|      0|        {
 1528|      0|            const phi::u32 line_number = error_marker.first;
 1529|       |
 1530|      0|            PHI_ASSERT(line_number != 0u);
 1531|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1532|      0|        }
 1533|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1536|      1|    {
 1537|      1|        constexpr const static Palette palette = {{
 1538|      1|                0xff7f7f7f, // Default
 1539|      1|                0xffd69c56, // OpCode
 1540|      1|                0xff00ff00, // Register
 1541|      1|                0xff7070e0, // IntegerLiteral
 1542|      1|                0xff206020, // Comment
 1543|      1|                0xff101010, // Background
 1544|      1|                0xffe0e0e0, // Cursor
 1545|      1|                0x80a06020, // Selection
 1546|      1|                0x800020ff, // ErrorMarker
 1547|      1|                0x40f08000, // Breakpoint
 1548|      1|                0xff707000, // Line number
 1549|      1|                0x40000000, // Current line fill
 1550|      1|                0x40808080, // Current line fill (inactive)
 1551|      1|                0x40a0a0a0, // Current line edge
 1552|      1|        }};
 1553|       |
 1554|      1|        return palette;
 1555|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1722|  3.81k|    {
 1723|       |        // TODO: This is quite unreadable
 1724|  3.81k|        const phi::u32 to_line =
 1725|  3.81k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1725:17): [True: 3.81k, False: 0]
  ------------------
 1726|  3.81k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1727|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1728|       |
 1729|  3.81k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1730|  3.81k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1731|  3.81k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1732|  3.81k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1733|  3.81k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1839|  3.81k|    {
 1840|  3.81k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1841|  3.81k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1842|  3.81k|        PHI_ASSERT(start <= end);
 1843|       |
 1844|  3.81k|        std::string result;
 1845|       |
 1846|  3.81k|        phi::u32   lstart = start.m_Line;
 1847|  3.81k|        phi::u32   lend   = end.m_Line;
 1848|  3.81k|        phi::u32   istart = GetCharacterIndex(start);
 1849|  3.81k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1850|  3.81k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1851|  3.81k|        phi::usize size   = 0u;
 1852|       |
 1853|   151k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1853:35): [True: 147k, False: 3.81k]
  ------------------
 1854|   147k|        {
 1855|   147k|            PHI_ASSERT(i < m_Lines.size());
 1856|   147k|            size += m_Lines[i.unsafe()].size();
 1857|   147k|        }
 1858|       |
 1859|  3.81k|        result.reserve((size + size / 8u).unsafe());
 1860|       |
 1861|   951k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1861:16): [True: 330k, False: 621k]
  |  Branch (1861:16): [True: 947k, False: 3.81k]
  |  Branch (1861:33): [True: 617k, False: 3.81k]
  ------------------
 1862|   947k|        {
 1863|   947k|            PHI_ASSERT(lstart < m_Lines.size());
 1864|       |
 1865|   947k|            const Line& line = m_Lines[lstart.unsafe()];
 1866|   947k|            if (istart < line.size())
  ------------------
  |  Branch (1866:17): [True: 803k, False: 144k]
  ------------------
 1867|   803k|            {
 1868|   803k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1869|   803k|                istart++;
 1870|   803k|            }
 1871|   144k|            else
 1872|   144k|            {
 1873|   144k|                istart = 0u;
 1874|   144k|                ++lstart;
 1875|       |
 1876|   144k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1876:21): [True: 144k, False: 0]
  ------------------
 1877|   144k|                {
 1878|   144k|                    result += '\n';
 1879|   144k|                }
 1880|   144k|            }
 1881|   947k|        }
 1882|       |
 1883|  3.81k|        return result;
 1884|  3.81k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2422|  7.63k|    {
 2423|  7.63k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2424|       |
 2425|  7.63k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2426|  7.63k|        phi::u32    index = 0u;
 2427|   170k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2427:35): [True: 166k, False: 4.15k]
  |  Branch (2427:35): [True: 162k, False: 7.63k]
  |  Branch (2427:58): [True: 162k, False: 3.48k]
  ------------------
 2428|   162k|        {
 2429|   162k|            PHI_ASSERT(index < line.size());
 2430|   162k|            const Char character = line[index.unsafe()].m_Char;
 2431|       |
 2432|   162k|            if (character == '\t')
  ------------------
  |  Branch (2432:17): [True: 0, False: 162k]
  ------------------
 2433|      0|            {
 2434|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2435|      0|            }
 2436|   162k|            else
 2437|   162k|            {
 2438|   162k|                ++column;
 2439|   162k|            }
 2440|       |
 2441|   162k|            index += UTF8CharLength(character);
 2442|   162k|        }
 2443|       |
 2444|  7.63k|        return index;
 2445|  7.63k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2494|  3.81k|    {
 2495|  3.81k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2495:13): [True: 0, False: 3.81k]
  ------------------
 2496|      0|        {
 2497|      0|            return 0u;
 2498|      0|        }
 2499|       |
 2500|  3.81k|        const Line& line = m_Lines[line_number.unsafe()];
 2501|  3.81k|        phi::u32    col  = 0u;
 2502|       |
 2503|   166k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2503:32): [True: 162k, False: 3.81k]
  ------------------
 2504|   162k|        {
 2505|   162k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2506|   162k|            if (character == '\t')
  ------------------
  |  Branch (2506:17): [True: 0, False: 162k]
  ------------------
 2507|      0|            {
 2508|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2509|      0|            }
 2510|   162k|            else
 2511|   162k|            {
 2512|   162k|                col++;
 2513|   162k|            }
 2514|       |
 2515|   162k|            i += UTF8CharLength(character);
 2516|   162k|        }
 2517|       |
 2518|  3.81k|        return col;
 2519|  3.81k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2522|  3.81k|    {
 2523|  3.81k|        PHI_ASSERT(!m_Lines.empty());
 2524|       |
 2525|  3.81k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2526|  3.81k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3661|   415k|    {
 3662|   415k|        PaletteIndex palette_index{PaletteIndex::Default};
 3663|       |
 3664|       |        // Determine palette color
 3665|   415k|        switch (token.GetType())
 3666|   415k|        {
 3667|  63.9k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3667:13): [True: 63.9k, False: 351k]
  ------------------
 3668|  63.9k|                palette_index = PaletteIndex::Comment;
 3669|  63.9k|                break;
 3670|  4.39k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3670:13): [True: 4.39k, False: 411k]
  ------------------
 3671|  12.7k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3671:13): [True: 8.40k, False: 407k]
  ------------------
 3672|  12.7k|                palette_index = PaletteIndex::IntegerLiteral;
 3673|  12.7k|                break;
 3674|  68.0k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3674:13): [True: 68.0k, False: 347k]
  ------------------
 3675|  68.0k|                palette_index = PaletteIndex::OpCode;
 3676|  68.0k|                break;
 3677|  5.50k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3677:13): [True: 5.50k, False: 410k]
  ------------------
 3678|  21.7k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3678:13): [True: 16.2k, False: 399k]
  ------------------
 3679|  25.8k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3679:13): [True: 4.08k, False: 411k]
  ------------------
 3680|  25.8k|                palette_index = PaletteIndex::Register;
 3681|  25.8k|                break;
 3682|   144k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3682:13): [True: 144k, False: 271k]
  ------------------
 3683|   144k|                return;
 3684|   100k|            default:
  ------------------
  |  Branch (3684:13): [True: 100k, False: 314k]
  ------------------
 3685|   100k|                break;
 3686|   415k|        }
 3687|       |
 3688|   271k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3689|   271k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3690|       |
 3691|   271k|        for (phi::u64 index{token.GetColumn() - 1u};
 3692|  1.01M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3692:14): [True: 742k, False: 271k]
  ------------------
 3693|   742k|        {
 3694|   742k|            PHI_ASSERT(index < line.size());
 3695|   742k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3696|   742k|        }
 3697|   271k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3700|  3.81k|    {
 3701|  3.81k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3702|       |
 3703|  3.81k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3703:38): [True: 415k, False: 3.81k]
  ------------------
 3704|   415k|        {
 3705|   415k|            ColorizeToken(token);
 3706|   415k|        }
 3707|  3.81k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3710|  3.81k|    {
 3711|  3.81k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3712|  3.81k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3713|  3.81k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3714|       |
 3715|       |        // Clear breakpoints and markers
 3716|  3.81k|        ClearBreakPoints();
 3717|  3.81k|        ClearErrorMarkers();
 3718|  3.81k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  135|   162k|{
  136|   162k|    return UTF8CharLength(static_cast<char>(characater));
  137|   162k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  105|   325k|{
  106|   325k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (106:9): [True: 0, False: 325k]
  ------------------
  107|      0|    {
  108|      0|        return 6_u8;
  109|      0|    }
  110|       |
  111|   325k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (111:9): [True: 0, False: 325k]
  ------------------
  112|      0|    {
  113|      0|        return 5_u8;
  114|      0|    }
  115|       |
  116|   325k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (116:9): [True: 0, False: 325k]
  ------------------
  117|      0|    {
  118|      0|        return 4_u8;
  119|      0|    }
  120|       |
  121|   325k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (121:9): [True: 0, False: 325k]
  ------------------
  122|      0|    {
  123|      0|        return 3_u8;
  124|      0|    }
  125|       |
  126|   325k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (126:9): [True: 0, False: 325k]
  ------------------
  127|      0|    {
  128|      0|        return 2_u8;
  129|      0|    }
  130|       |
  131|   325k|    return 1_u8;
  132|   325k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  3.81k|    {
  184|  3.81k|        return m_DLXProgram;
  185|  3.81k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  3.81k|    {
  189|  3.81k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  3.81k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 200, False: 3.61k]
  ------------------
  192|    200|        {
  193|    200|            m_Processor.LoadProgram(m_DLXProgram);
  194|    200|        }
  195|  3.81k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  3.81k|    {
  209|  3.81k|        return m_CodeEditor;
  210|  3.81k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|   156k|        {
  173|   156k|            PHI_ASSERT(index < 3u);
  174|       |
  175|   156k|            switch (index.unsafe())
  176|   156k|            {
  177|  67.1k|                case 0:
  ------------------
  |  Branch (177:17): [True: 67.1k, False: 89.3k]
  ------------------
  178|  67.1k|                    return m_Arg1Type;
  179|       |
  180|  45.4k|                case 1:
  ------------------
  |  Branch (180:17): [True: 45.4k, False: 111k]
  ------------------
  181|  45.4k|                    return m_Arg2Type;
  182|       |
  183|  43.9k|                case 2:
  ------------------
  |  Branch (183:17): [True: 43.9k, False: 112k]
  ------------------
  184|  43.9k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 156k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|   156k|#endif
  191|   156k|            }
  192|   156k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  40.4k|        {
  199|  40.4k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  40.4k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 40.3k, False: 162]
  ------------------
  203|  40.3k|            {
  204|  40.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  40.3k|            }
  206|  40.4k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 24.3k, False: 16.0k]
  ------------------
  207|  24.3k|            {
  208|  24.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  24.3k|            }
  210|  40.4k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 16.5k, False: 23.9k]
  ------------------
  211|  16.5k|            {
  212|  16.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  16.5k|            }
  214|       |
  215|  40.4k|            return number_of_argument_required;
  216|  40.4k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  40.4k|        {
  225|  40.4k|            return m_Executor;
  226|  40.4k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  27.0k|    {
   38|  27.0k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  27.0k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  27.0k|                                         static_cast<underlying_t>(rhs));
   42|  27.0k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  27.0k|    {
   55|  27.0k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  27.0k|        return static_cast<underlying_t>(type & test) != 0;
   58|  27.0k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  63.7k|    {
  206|  63.7k|        switch (value)
  207|  63.7k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  9.15k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  9.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 9.15k, False: 54.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|  9.15k|        return #name;
  |  |  ------------------
  |  |   16|  9.15k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    826|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 826, False: 62.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    826|        return #name;
  |  |  ------------------
  |  |   17|    826|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    640|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 640, False: 63.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    640|        return #name;
  |  |  ------------------
  |  |   18|    924|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    924|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 924, False: 62.8k]
  |  |  |  |  ------------------
  |  |  |  |  210|    924|        return #name;
  |  |  ------------------
  |  |   19|    924|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    704|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 704, False: 63.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    704|        return #name;
  |  |  ------------------
  |  |   20|  1.30k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.30k, False: 62.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.30k|        return #name;
  |  |  ------------------
  |  |   21|  1.30k|                                                                                                   \
  |  |   22|  1.30k|    /* Sub */                                                                                      \
  |  |   23|  1.30k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    216|        return #name;
  |  |  ------------------
  |  |   24|    671|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    671|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 671, False: 63.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    671|        return #name;
  |  |  ------------------
  |  |   25|    714|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    714|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 714, False: 63.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    714|        return #name;
  |  |  ------------------
  |  |   26|    714|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    245|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 245, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    245|        return #name;
  |  |  ------------------
  |  |   27|    245|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 200, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    200|        return #name;
  |  |  ------------------
  |  |   28|    200|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 73, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     73|        return #name;
  |  |  ------------------
  |  |   29|     73|                                                                                                   \
  |  |   30|     73|    /* Multiplication */                                                                           \
  |  |   31|     74|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |   32|     80|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |   33|     80|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   34|    323|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    323|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 323, False: 63.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    323|        return #name;
  |  |  ------------------
  |  |   35|    323|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    212|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 212, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    212|        return #name;
  |  |  ------------------
  |  |   36|    212|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   37|     67|                                                                                                   \
  |  |   38|     67|    /* Division */                                                                                 \
  |  |   39|    194|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   40|    254|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    254|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 254, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    254|        return #name;
  |  |  ------------------
  |  |   41|    254|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 201, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    201|        return #name;
  |  |  ------------------
  |  |   42|    328|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    328|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 328, False: 63.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    328|        return #name;
  |  |  ------------------
  |  |   43|    328|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   44|    216|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    216|        return #name;
  |  |  ------------------
  |  |   45|    216|                                                                                                   \
  |  |   46|    216|    /* Shift left (logical) */                                                                     \
  |  |   47|    216|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 198, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    198|        return #name;
  |  |  ------------------
  |  |   48|    222|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    222|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 222, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    222|        return #name;
  |  |  ------------------
  |  |   49|    222|                                                                                                   \
  |  |   50|    222|    /* Shift right (logical) */                                                                    \
  |  |   51|    222|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |   52|     80|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |   53|     69|                                                                                                   \
  |  |   54|     69|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    194|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   56|    229|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 229, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    229|        return #name;
  |  |  ------------------
  |  |   57|    229|                                                                                                   \
  |  |   58|    229|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  2.24k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  2.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.24k, False: 61.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.24k|        return #name;
  |  |  ------------------
  |  |   60|  2.24k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    138|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 138, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    138|        return #name;
  |  |  ------------------
  |  |   61|    138|                                                                                                   \
  |  |   62|    138|    /* Logic */                                                                                    \
  |  |   63|    138|                                                                                                   \
  |  |   64|    138|    /* And */                                                                                      \
  |  |   65|    411|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    411|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 411, False: 63.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    411|        return #name;
  |  |  ------------------
  |  |   66|    411|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   67|     70|                                                                                                   \
  |  |   68|     70|    /* Or */                                                                                       \
  |  |   69|    194|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   70|    322|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    322|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 322, False: 63.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    322|        return #name;
  |  |  ------------------
  |  |   71|    322|                                                                                                   \
  |  |   72|    322|    /* XOR */                                                                                      \
  |  |   73|    322|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    252|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 252, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    252|        return #name;
  |  |  ------------------
  |  |   74|    252|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|     84|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 84, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     84|        return #name;
  |  |  ------------------
  |  |   80|    206|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  |  |   81|    206|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   82|    216|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    216|        return #name;
  |  |  ------------------
  |  |   83|    216|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 110, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    110|        return #name;
  |  |  ------------------
  |  |   84|    110|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   85|     67|                                                                                                   \
  |  |   86|     67|    /* Greater than */                                                                             \
  |  |   87|     78|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 78, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     78|        return #name;
  |  |  ------------------
  |  |   88|    241|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    241|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 241, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    241|        return #name;
  |  |  ------------------
  |  |   89|    241|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |   90|    239|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    239|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 239, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    239|        return #name;
  |  |  ------------------
  |  |   91|    239|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    216|        return #name;
  |  |  ------------------
  |  |   92|    339|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    339|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 339, False: 63.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    339|        return #name;
  |  |  ------------------
  |  |   93|    339|                                                                                                   \
  |  |   94|    339|    /* Less than or equal */                                                                       \
  |  |   95|    339|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 197, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    197|        return #name;
  |  |  ------------------
  |  |   96|    197|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |   97|    195|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   98|     78|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 78, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     78|        return #name;
  |  |  ------------------
  |  |   99|    210|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |  100|    210|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  101|    194|                                                                                                   \
  |  |  102|    194|    /* Greater than or equal */                                                                    \
  |  |  103|    194|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 75, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     75|        return #name;
  |  |  ------------------
  |  |  104|     75|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  105|  2.25k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.25k, False: 61.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.25k|        return #name;
  |  |  ------------------
  |  |  106|  2.25k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    743|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 743, False: 63.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    743|        return #name;
  |  |  ------------------
  |  |  107|    743|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  108|    487|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    487|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 487, False: 63.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    487|        return #name;
  |  |  ------------------
  |  |  109|    487|                                                                                                   \
  |  |  110|    487|    /* Equal */                                                                                    \
  |  |  111|    487|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  112|    587|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    587|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 587, False: 63.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    587|        return #name;
  |  |  ------------------
  |  |  113|    587|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    117|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 117, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    117|        return #name;
  |  |  ------------------
  |  |  114|  1.78k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.78k, False: 61.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.78k|        return #name;
  |  |  ------------------
  |  |  115|  1.78k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  116|     75|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 75, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     75|        return #name;
  |  |  ------------------
  |  |  117|     75|                                                                                                   \
  |  |  118|     75|    /* Not equal */                                                                                \
  |  |  119|     75|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  120|    228|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    228|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 228, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    228|        return #name;
  |  |  ------------------
  |  |  121|    228|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    226|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 226, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    226|        return #name;
  |  |  ------------------
  |  |  122|    226|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  123|     66|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  124|     85|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |  125|     85|                                                                                                   \
  |  |  126|     85|    /* Conditional branching */                                                                    \
  |  |  127|     85|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |  128|    224|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 224, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    224|        return #name;
  |  |  ------------------
  |  |  129|  3.85k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  3.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 3.85k, False: 59.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|  3.85k|        return #name;
  |  |  ------------------
  |  |  130|  18.3k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  18.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 18.3k, False: 45.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|  18.3k|        return #name;
  |  |  ------------------
  |  |  131|  18.3k|                                                                                                   \
  |  |  132|  18.3k|    /* Unconditional branching */                                                                  \
  |  |  133|  18.3k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     12|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  135|    202|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |  136|    202|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|     67|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  140|    194|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  141|    194|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  142|    194|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  143|    194|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  144|     76|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 76, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     76|        return #name;
  |  |  ------------------
  |  |  145|     76|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  147|  2.24k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  2.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.24k, False: 61.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.24k|        return #name;
  |  |  ------------------
  |  |  148|  2.24k|                                                                                                   \
  |  |  149|  2.24k|    /* Storing data */                                                                             \
  |  |  150|  2.24k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  151|    210|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |  152|  1.99k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  1.99k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.99k, False: 61.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.99k|        return #name;
  |  |  ------------------
  |  |  153|  1.99k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    565|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 565, False: 63.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    565|        return #name;
  |  |  ------------------
  |  |  154|    565|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  155|     70|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  156|     85|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |  157|     85|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  158|     68|                                                                                                   \
  |  |  159|     68|    /* Moving data */                                                                              \
  |  |  160|    194|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  161|    194|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    145|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 145, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    145|        return #name;
  |  |  ------------------
  |  |  162|    145|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  163|     86|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|     83|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  167|    197|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 197, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    197|        return #name;
  |  |  ------------------
  |  |  168|    197|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  169|    196|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |  170|     69|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  171|    834|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    834|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 834, False: 62.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    834|        return #name;
  |  |  ------------------
  |  |  172|    834|                                                                                                   \
  |  |  173|    834|    /* Other */                                                                                    \
  |  |  174|    834|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    105|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 105, False: 63.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    105|        return #name;
  |  |  ------------------
  |  |  175|    105|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 63.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |  176|    206|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 63.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 63.7k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  63.7k|        }
  219|  63.7k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  27.6k|    {
   31|  27.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 973, False: 26.7k]
  ------------------
   32|    973|        {
   33|    973|            return true;
   34|    973|        }
   35|       |
   36|  26.7k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 26.6k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|  26.6k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 569, False: 26.0k]
  ------------------
   42|    569|        {
   43|    569|            return true;
   44|    569|        }
   45|       |
   46|  26.0k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 26.0k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  26.0k|        return false;
   52|  26.0k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  26.0k|    {
   56|  26.0k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 26.0k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  26.0k|        const char first_char = token.at(0u);
   62|       |
   63|  26.0k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 6.57k, False: 19.5k]
  ------------------
   64|  6.57k|        {
   65|  6.57k|            return phi::is_alpha(first_char);
   66|  6.57k|        }
   67|       |
   68|  19.5k|        phi::boolean just_under_scores = (first_char == '_');
   69|  19.5k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 10.0k, False: 9.42k]
  |  Branch (69:13): [True: 9.92k, False: 9.57k]
  |  Branch (69:43): [True: 9.92k, False: 150]
  ------------------
   70|  9.92k|        {
   71|  9.92k|            return false;
   72|  9.92k|        }
   73|       |
   74|  43.5k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 35.9k, False: 7.65k]
  ------------------
   75|  35.9k|        {
   76|  35.9k|            const char c{token.at(index)};
   77|       |
   78|  35.9k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 17.7k, False: 18.2k]
  ------------------
   79|  17.7k|            {
   80|  17.7k|                just_under_scores = false;
   81|  17.7k|            }
   82|  18.2k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 16.3k, False: 1.92k]
  ------------------
   83|  16.3k|            {
   84|  16.3k|                continue;
   85|  16.3k|            }
   86|  1.92k|            else
   87|  1.92k|            {
   88|  1.92k|                return false;
   89|  1.92k|            }
   90|  35.9k|        }
   91|       |
   92|  7.65k|        return !just_under_scores;
   93|  9.57k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   164k|    {
  100|   164k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 164k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   164k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 15.0k, False: 149k]
  ------------------
  106|  15.0k|        {
  107|  15.0k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 9.01k, False: 6.01k]
  ------------------
  108|  9.01k|            {
  109|  9.01k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  9.01k|            }
  111|       |
  112|  6.01k|            return {};
  113|  15.0k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|   149k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 988, False: 148k]
  ------------------
  117|    988|        {
  118|    988|            return {};
  119|    988|        }
  120|       |
  121|   148k|        std::int32_t number{0};
  122|   148k|        phi::boolean is_negative{false};
  123|   148k|        phi::boolean starts_with_zero{false};
  124|   148k|        phi::boolean parsing_binary{false};
  125|   148k|        phi::boolean parsing_octal{false};
  126|   148k|        phi::boolean parsing_hexadecimal{false};
  127|   148k|        phi::boolean parsed_something{false};
  128|   148k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|   191k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 188k, False: 3.12k]
  ------------------
  133|   188k|        {
  134|   188k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|   188k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 148k, False: 39.6k]
  ------------------
  138|   148k|            {
  139|   148k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 87, False: 148k]
  ------------------
  140|     87|                {
  141|     87|                    continue;
  142|     87|                }
  143|       |
  144|   148k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.80k, False: 147k]
  ------------------
  145|  1.80k|                {
  146|  1.80k|                    is_negative = true;
  147|  1.80k|                    continue;
  148|  1.80k|                }
  149|       |
  150|   147k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 21.3k, False: 125k]
  ------------------
  151|  21.3k|                {
  152|  21.3k|                    starts_with_zero = true;
  153|  21.3k|                    continue;
  154|  21.3k|                }
  155|       |
  156|   125k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 98, False: 125k]
  ------------------
  157|     98|                {
  158|     98|                    return {};
  159|     98|                }
  160|   125k|            }
  161|       |
  162|       |            // Second character
  163|   165k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 23.5k, False: 141k]
  ------------------
  164|  23.5k|            {
  165|  23.5k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 21.3k, False: 2.16k]
  ------------------
  166|  21.3k|                {
  167|       |                    // Binary
  168|  21.3k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 282, False: 21.0k]
  |  Branch (168:37): [True: 9.50k, False: 11.5k]
  ------------------
  169|  9.78k|                    {
  170|  9.78k|                        parsing_binary = true;
  171|  9.78k|                        continue;
  172|  9.78k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  11.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 1.66k, False: 9.89k]
  |  Branch (175:37): [True: 92, False: 9.80k]
  ------------------
  176|  1.75k|                    {
  177|  1.75k|                        parsing_hexadecimal = true;
  178|  1.75k|                        continue;
  179|  1.75k|                    }
  180|       |
  181|       |                    // Octal
  182|  9.80k|                    parsing_octal = true;
  183|  9.80k|                }
  184|  23.5k|            }
  185|       |
  186|       |            // Handle seperators
  187|   153k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 140, False: 153k]
  ------------------
  188|    140|            {
  189|    140|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 68, False: 72]
  ------------------
  190|     68|                {
  191|     68|                    return {};
  192|     68|                }
  193|       |
  194|     72|                parsed_separator = true;
  195|     72|                continue;
  196|    140|            }
  197|       |
  198|       |            // Check for over/underflow
  199|   153k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 1.85k, False: 151k]
  |  Branch (199:32): [True: 0, False: 1.85k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|   153k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 151k, False: 1.85k]
  |  Branch (204:17): [True: 0, False: 153k]
  |  Branch (204:33): [True: 0, False: 151k]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|   153k|            parsed_separator = false;
  211|   153k|            parsed_something = true;
  212|       |
  213|   153k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 9.65k, False: 143k]
  ------------------
  214|  9.65k|            {
  215|  9.65k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 9.51k, False: 141]
  ------------------
  216|  9.51k|                {
  217|  9.51k|                    return {};
  218|  9.51k|                }
  219|       |
  220|    141|                number <<= 1;
  221|    141|                number |= (c - '0');
  222|    141|            }
  223|   143k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 13.8k, False: 130k]
  ------------------
  224|  13.8k|            {
  225|  13.8k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 8.79k, False: 5.01k]
  ------------------
  226|  8.79k|                {
  227|  8.79k|                    return {};
  228|  8.79k|                }
  229|       |
  230|  5.01k|                number <<= 3;
  231|  5.01k|                number |= (c - '0');
  232|  5.01k|            }
  233|   130k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 1.85k, False: 128k]
  ------------------
  234|  1.85k|            {
  235|  1.85k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 183, False: 1.67k]
  ------------------
  236|    183|                {
  237|    183|                    return {};
  238|    183|                }
  239|       |
  240|  1.67k|                number <<= 4;
  241|  1.67k|                number |= phi::hex_digit_value(c).unsafe();
  242|  1.67k|            }
  243|   128k|            else
  244|   128k|            {
  245|   128k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 125k, False: 2.77k]
  ------------------
  246|   125k|                {
  247|   125k|                    return {};
  248|   125k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  2.77k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 2.00k, False: 767]
  |  Branch (251:36): [True: 1.63k, False: 370]
  ------------------
  252|  1.63k|                {
  253|  1.63k|                    return {};
  254|  1.63k|                }
  255|       |
  256|  1.13k|                number *= 10;
  257|  1.13k|                number += (c - '0');
  258|  1.13k|            }
  259|   153k|        }
  260|       |
  261|  3.12k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 2.88k, False: 233]
  ------------------
  262|  2.88k|        {
  263|       |            // Check for over/underflow
  264|  2.88k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 92, False: 2.79k]
  |  Branch (264:32): [True: 0, False: 92]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  2.88k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 2.79k, False: 92]
  |  Branch (269:17): [True: 0, False: 2.88k]
  |  Branch (269:33): [True: 0, False: 2.79k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  2.88k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 92, False: 2.79k]
  ------------------
  276|     92|            {
  277|     92|                return static_cast<std::int16_t>(-number);
  278|     92|            }
  279|       |
  280|  2.79k|            return static_cast<std::int16_t>(number);
  281|  2.88k|        }
  282|       |
  283|    233|        return {};
  284|  3.12k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  20.9k|    {
   97|  20.9k|        switch (value)
   98|  20.9k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  3.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  3.17k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3.17k, False: 17.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|  3.17k|        return #name;
  |  |  ------------------
  |  |   14|  3.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|  2.91k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.91k, False: 18.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.91k|        return #name;
  |  |  ------------------
  |  |   15|  2.91k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|     16|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 16, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     16|        return #name;
  |  |  ------------------
  |  |   16|     76|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|     76|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 76, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     76|        return #name;
  |  |  ------------------
  |  |   17|     76|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   18|      5|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 5, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      5|        return #name;
  |  |  ------------------
  |  |   19|      5|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   20|    116|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|    116|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 116, False: 20.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|    116|        return #name;
  |  |  ------------------
  |  |   21|  1.22k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.22k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.22k, False: 19.7k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.22k|        return #name;
  |  |  ------------------
  |  |   22|  1.22k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|    121|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 121, False: 20.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|    121|        return #name;
  |  |  ------------------
  |  |   23|    121|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     17|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 17, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     17|        return #name;
  |  |  ------------------
  |  |   24|     17|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 5, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      5|        return #name;
  |  |  ------------------
  |  |   25|      5|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   26|      3|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   27|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   28|     28|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|     28|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 28, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     28|        return #name;
  |  |  ------------------
  |  |   29|    646|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|    646|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 646, False: 20.3k]
  |  |  |  |  ------------------
  |  |  |  |  101|    646|        return #name;
  |  |  ------------------
  |  |   30|    646|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|    306|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 306, False: 20.6k]
  |  |  |  |  ------------------
  |  |  |  |  101|    306|        return #name;
  |  |  ------------------
  |  |   31|    306|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 57, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     57|        return #name;
  |  |  ------------------
  |  |   32|  2.06k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|  2.06k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.06k, False: 18.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.06k|        return #name;
  |  |  ------------------
  |  |   33|  2.06k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    621|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 621, False: 20.3k]
  |  |  |  |  ------------------
  |  |  |  |  101|    621|        return #name;
  |  |  ------------------
  |  |   34|    621|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 45, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     45|        return #name;
  |  |  ------------------
  |  |   35|     98|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|     98|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 98, False: 20.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|     98|        return #name;
  |  |  ------------------
  |  |   36|     98|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     49|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 49, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     49|        return #name;
  |  |  ------------------
  |  |   37|    982|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|    982|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 982, False: 20.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|    982|        return #name;
  |  |  ------------------
  |  |   38|  2.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|  2.38k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.38k, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.38k|        return #name;
  |  |  ------------------
  |  |   39|  2.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   40|    889|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    889|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 889, False: 20.1k]
  |  |  |  |  ------------------
  |  |  |  |  101|    889|        return #name;
  |  |  ------------------
  |  |   41|    889|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     63|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 63, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     63|        return #name;
  |  |  ------------------
  |  |   42|  1.08k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|  1.08k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.08k, False: 19.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.08k|        return #name;
  |  |  ------------------
  |  |   43|  1.08k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|     68|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 68, False: 20.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     68|        return #name;
  |  |  ------------------
  |  |   44|  3.93k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|  3.93k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3.93k, False: 17.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|  3.93k|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 20.9k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  20.9k|        }
  110|  20.9k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  5.50k|    {
  134|  5.50k|        switch (value)
  135|  5.50k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    176|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|    176|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 176, False: 5.32k]
  |  |  |  |  ------------------
  |  |  |  |  138|    176|        return #name;
  |  |  ------------------
  |  |   48|    219|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    219|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 219, False: 5.28k]
  |  |  |  |  ------------------
  |  |  |  |  138|    219|        return #name;
  |  |  ------------------
  |  |   49|    754|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|    754|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 754, False: 4.74k]
  |  |  |  |  ------------------
  |  |  |  |  138|    754|        return #name;
  |  |  ------------------
  |  |   50|    754|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 19, False: 5.48k]
  |  |  |  |  ------------------
  |  |  |  |  138|     19|        return #name;
  |  |  ------------------
  |  |   51|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   52|     31|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|     31|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 31, False: 5.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|     31|        return #name;
  |  |  ------------------
  |  |   53|     31|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   54|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   55|    287|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|    287|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 287, False: 5.21k]
  |  |  |  |  ------------------
  |  |  |  |  138|    287|        return #name;
  |  |  ------------------
  |  |   56|    287|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 5.49k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   57|  2.23k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|  2.23k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2.23k, False: 3.26k]
  |  |  |  |  ------------------
  |  |  |  |  138|  2.23k|        return #name;
  |  |  ------------------
  |  |   58|  2.23k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   59|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 5.49k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   60|     16|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|     16|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 16, False: 5.48k]
  |  |  |  |  ------------------
  |  |  |  |  138|     16|        return #name;
  |  |  ------------------
  |  |   61|     60|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|     60|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 60, False: 5.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|     60|        return #name;
  |  |  ------------------
  |  |   62|     60|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   63|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 22, False: 5.48k]
  |  |  |  |  ------------------
  |  |  |  |  138|     22|        return #name;
  |  |  ------------------
  |  |   64|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   66|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 17, False: 5.48k]
  |  |  |  |  ------------------
  |  |  |  |  138|     17|        return #name;
  |  |  ------------------
  |  |   67|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   68|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   70|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|     48|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 48, False: 5.45k]
  |  |  |  |  ------------------
  |  |  |  |  138|     48|        return #name;
  |  |  ------------------
  |  |   71|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   74|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   75|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 5.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   76|     14|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14, False: 5.48k]
  |  |  |  |  ------------------
  |  |  |  |  138|     14|        return #name;
  |  |  ------------------
  |  |   77|  1.30k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.30k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.30k, False: 4.19k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.30k|        return #name;
  |  |  ------------------
  |  |   78|  1.30k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|    272|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 272, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|    272|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 5.50k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  5.50k|        }
  147|  5.50k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  8.33k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  8.33k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 103k, False: 0]
  ------------------
   64|   103k|            {
   65|   103k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 8.33k, False: 94.7k]
  ------------------
   66|  8.33k|                {
   67|  8.33k|                    return &token;
   68|  8.33k|                }
   69|   103k|            }
   70|       |
   71|      0|            return nullptr;
   72|  8.33k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|   144k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   144k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   144k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   228k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   228k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   228k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  42.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  42.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  42.0k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  40.4k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  12.8k|    {
   25|  12.8k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  12.8k|        switch (argument_number.unsafe())
   28|  12.8k|        {
   29|  7.41k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 7.41k, False: 5.44k]
  ------------------
   30|  7.41k|                m_Arg1 = argument;
   31|  7.41k|                break;
   32|  3.53k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 3.53k, False: 9.33k]
  ------------------
   33|  3.53k|                m_Arg2 = argument;
   34|  3.53k|                break;
   35|  1.91k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 1.91k, False: 10.9k]
  ------------------
   36|  1.91k|                m_Arg3 = argument;
   37|  1.91k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 12.8k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  12.8k|#endif
   42|  12.8k|        }
   43|  12.8k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   134k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  9.02k|    {
  173|  9.02k|        InstructionArgument arg;
  174|  9.02k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  9.02k|        arg.register_int.register_id = id;
  176|  9.02k|        return arg;
  177|  9.02k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|     74|    {
  181|     74|        InstructionArgument arg;
  182|     74|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|     74|        arg.register_float.register_id = id;
  184|     74|        return arg;
  185|     74|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  1.31k|    {
  189|  1.31k|        InstructionArgument arg;
  190|  1.31k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  1.31k|        arg.immediate_value.signed_value = value;
  192|  1.31k|        return arg;
  193|  1.31k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  2.44k|    {
  207|  2.44k|        InstructionArgument arg;
  208|  2.44k|        arg.m_Type           = ArgumentType::Label;
  209|  2.44k|        arg.label.label_name = label_name;
  210|  2.44k|        return arg;
  211|  2.44k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  40.4k|    {
  453|  40.4k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  40.4k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   152k|    {
   24|   152k|        switch (token.length().unsafe())
   25|   152k|        {
   26|       |            // 1 character OpCodes
   27|  12.6k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 12.6k, False: 140k]
  ------------------
   28|  12.6k|                const char c1 = token[0u];
   29|       |
   30|  12.6k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 3.25k, False: 9.37k]
  ------------------
   31|  3.25k|                {
   32|  3.25k|                    return OpCode::J;
   33|  3.25k|                }
   34|  9.37k|                break;
   35|  12.6k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  25.0k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 25.0k, False: 127k]
  ------------------
   39|  25.0k|                const char c1 = token[0u];
   40|  25.0k|                const char c2 = token[1u];
   41|       |
   42|  25.0k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 8.95k, False: 16.1k]
  ------------------
   43|  25.0k|                {
   44|    100|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 100, False: 24.9k]
  ------------------
   45|    231|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 131, False: 24.9k]
  ------------------
   46|    231|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 133, False: 98]
  ------------------
   47|    133|                        {
   48|    133|                            return OpCode::JR;
   49|    133|                        }
   50|     98|                        break;
   51|       |
   52|  2.96k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 2.96k, False: 22.1k]
  ------------------
   53|  4.23k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 1.27k, False: 23.7k]
  ------------------
   54|  4.23k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 171, False: 4.06k]
  ------------------
   55|  4.23k|                        {
   56|    194|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 194, False: 4.03k]
  ------------------
   57|    902|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 708, False: 3.52k]
  ------------------
   58|    902|                                return OpCode::LB;
   59|  2.24k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 2.24k, False: 1.98k]
  ------------------
   60|  2.31k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 66, False: 4.16k]
  ------------------
   61|  2.31k|                                return OpCode::LD;
   62|     66|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 66, False: 4.16k]
  ------------------
   63|    132|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 66, False: 4.16k]
  ------------------
   64|    132|                                return OpCode::LF;
   65|    194|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 194, False: 4.03k]
  ------------------
   66|    260|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 66, False: 4.16k]
  ------------------
   67|    260|                                return OpCode::LH;
   68|     76|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 76, False: 4.15k]
  ------------------
   69|    458|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 382, False: 3.85k]
  ------------------
   70|    458|                                return OpCode::LW;
   71|  4.23k|                        }
   72|    171|                        break;
   73|  2.90k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 2.90k, False: 22.1k]
  ------------------
   74|  3.03k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 129, False: 24.9k]
  ------------------
   75|  3.03k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 521, False: 2.50k]
  ------------------
   76|    521|                        {
   77|    521|                            return OpCode::OR;
   78|    521|                        }
   79|  2.50k|                        break;
   80|  4.81k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 4.81k, False: 20.2k]
  ------------------
   81|  8.61k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 3.79k, False: 21.2k]
  ------------------
   82|  8.61k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 5.17k, False: 3.43k]
  ------------------
   83|  8.61k|                        {
   84|     70|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 70, False: 8.54k]
  ------------------
   85|    136|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 66, False: 8.54k]
  ------------------
   86|    136|                                return OpCode::SB;
   87|     70|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 70, False: 8.54k]
  ------------------
   88|    921|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 851, False: 7.75k]
  ------------------
   89|    921|                                return OpCode::SD;
   90|     85|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 85, False: 8.52k]
  ------------------
   91|    279|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 194, False: 8.41k]
  ------------------
   92|    279|                                return OpCode::SF;
   93|  1.77k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 1.77k, False: 6.83k]
  ------------------
   94|  1.83k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 66, False: 8.54k]
  ------------------
   95|  1.83k|                                return OpCode::SH;
   96|    194|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 194, False: 8.41k]
  ------------------
   97|    264|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 70, False: 8.54k]
  ------------------
   98|    264|                                return OpCode::SW;
   99|  8.61k|                        }
  100|  5.17k|                        break;
  101|  25.0k|                }
  102|  16.9k|                break;
  103|  25.0k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  34.5k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 34.5k, False: 118k]
  ------------------
  107|  34.5k|                const char c1 = token[0u];
  108|  34.5k|                const char c2 = token[1u];
  109|  34.5k|                const char c3 = token[2u];
  110|       |
  111|  34.5k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 5.17k, False: 29.3k]
  ------------------
  112|  34.5k|                {
  113|  8.59k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 8.59k, False: 25.9k]
  ------------------
  114|  10.6k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 2.00k, False: 32.5k]
  ------------------
  115|  10.6k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 8.17k, False: 2.42k]
  |  Branch (115:29): [True: 8.10k, False: 2.49k]
  |  Branch (115:45): [True: 8.10k, False: 67]
  ------------------
  116|  8.10k|                        {
  117|  8.10k|                            return OpCode::ADD;
  118|  8.10k|                        }
  119|  2.49k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 2.35k, False: 140]
  |  Branch (119:34): [True: 2.00k, False: 485]
  |  Branch (119:50): [True: 2.00k, False: 345]
  ------------------
  120|  2.00k|                        {
  121|  2.00k|                            return OpCode::AND;
  122|  2.00k|                        }
  123|    485|                        break;
  124|       |
  125|    485|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 417, False: 34.1k]
  ------------------
  126|    492|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 75, False: 34.4k]
  ------------------
  127|    492|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 363, False: 129]
  |  Branch (127:29): [True: 297, False: 195]
  |  Branch (127:45): [True: 297, False: 66]
  ------------------
  128|    297|                        {
  129|    297|                            return OpCode::DIV;
  130|    297|                        }
  131|    195|                        break;
  132|       |
  133|    326|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 326, False: 34.2k]
  ------------------
  134|    461|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 135, False: 34.4k]
  ------------------
  135|    461|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 378, False: 83]
  ------------------
  136|    378|                        {
  137|    378|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 141, False: 237]
  ------------------
  138|    141|                            {
  139|    141|                                return OpCode::EQD;
  140|    141|                            }
  141|    237|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 132, False: 105]
  ------------------
  142|    132|                            {
  143|    132|                                return OpCode::EQF;
  144|    132|                            }
  145|    378|                        }
  146|    188|                        break;
  147|       |
  148|  2.15k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 2.15k, False: 32.3k]
  ------------------
  149|  2.67k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 519, False: 34.0k]
  ------------------
  150|  2.67k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 1.00k, False: 1.66k]
  ------------------
  151|  1.00k|                        {
  152|  1.00k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 553, False: 456]
  ------------------
  153|    553|                            {
  154|    553|                                return OpCode::GED;
  155|    553|                            }
  156|    456|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 390, False: 66]
  ------------------
  157|    390|                            {
  158|    390|                                return OpCode::GEF;
  159|    390|                            }
  160|  1.00k|                        }
  161|  1.66k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 1.60k, False: 66]
  ------------------
  162|  1.60k|                        {
  163|  1.60k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 867, False: 734]
  ------------------
  164|    867|                            {
  165|    867|                                return OpCode::GTD;
  166|    867|                            }
  167|    734|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 290, False: 444]
  ------------------
  168|    290|                            {
  169|    290|                                return OpCode::GTF;
  170|    290|                            }
  171|    734|                        }
  172|    576|                        break;
  173|       |
  174|    576|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 206, False: 34.3k]
  ------------------
  175|    544|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 338, False: 34.2k]
  ------------------
  176|    544|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 475, False: 69]
  |  Branch (176:29): [True: 268, False: 276]
  |  Branch (176:45): [True: 268, False: 207]
  ------------------
  177|    268|                        {
  178|    268|                            return OpCode::JAL;
  179|    268|                        }
  180|    276|                        break;
  181|       |
  182|    996|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 996, False: 33.5k]
  ------------------
  183|  2.58k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 1.58k, False: 32.9k]
  ------------------
  184|  2.58k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 67, False: 2.51k]
  ------------------
  185|  2.58k|                        {
  186|     66|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 66, False: 2.51k]
  ------------------
  187|    735|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 669, False: 1.91k]
  ------------------
  188|    735|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 142, False: 593]
  ------------------
  189|    142|                                {
  190|    142|                                    return OpCode::LBU;
  191|    142|                                }
  192|    593|                                break;
  193|       |
  194|    593|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 418, False: 2.16k]
  ------------------
  195|    730|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 312, False: 2.27k]
  ------------------
  196|    730|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 388, False: 342]
  ------------------
  197|    388|                                {
  198|    388|                                    return OpCode::LED;
  199|    388|                                }
  200|    342|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 276, False: 66]
  ------------------
  201|    276|                                {
  202|    276|                                    return OpCode::LEF;
  203|    276|                                }
  204|     66|                                break;
  205|       |
  206|    201|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 201, False: 2.38k]
  ------------------
  207|    459|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 258, False: 2.32k]
  ------------------
  208|    459|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 133, False: 326]
  ------------------
  209|    133|                                {
  210|    133|                                    return OpCode::LHI;
  211|    133|                                }
  212|    326|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 260, False: 66]
  ------------------
  213|    260|                                {
  214|    260|                                    return OpCode::LHU;
  215|    260|                                }
  216|     66|                                break;
  217|       |
  218|    190|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 190, False: 2.39k]
  ------------------
  219|    376|                            case 't':
  ------------------
  |  Branch (219:29): [True: 186, False: 2.39k]
  ------------------
  220|    376|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 133, False: 243]
  ------------------
  221|    133|                                {
  222|    133|                                    return OpCode::LTD;
  223|    133|                                }
  224|    243|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 176, False: 67]
  ------------------
  225|    176|                                {
  226|    176|                                    return OpCode::LTF;
  227|    176|                                }
  228|     67|                                break;
  229|       |
  230|     78|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 78, False: 2.50k]
  ------------------
  231|    218|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 140, False: 2.44k]
  ------------------
  232|    218|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 132, False: 86]
  ------------------
  233|    132|                                {
  234|    132|                                    return OpCode::LWU;
  235|    132|                                }
  236|     86|                                break;
  237|  2.58k|                        }
  238|    945|                        break;
  239|       |
  240|    945|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 587, False: 33.9k]
  ------------------
  241|  1.37k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 789, False: 33.7k]
  ------------------
  242|  1.37k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 460, False: 916]
  ------------------
  243|    460|                        {
  244|    460|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 134, False: 326]
  ------------------
  245|    134|                            {
  246|    134|                                return OpCode::NED;
  247|    134|                            }
  248|    326|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 132, False: 194]
  ------------------
  249|    132|                            {
  250|    132|                                return OpCode::NEF;
  251|    132|                            }
  252|    460|                        }
  253|    916|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 593, False: 323]
  |  Branch (253:34): [True: 271, False: 645]
  |  Branch (253:50): [True: 271, False: 322]
  ------------------
  254|    271|                        {
  255|    271|                            return OpCode::NOP;
  256|    271|                        }
  257|       |
  258|    839|                        break;
  259|       |
  260|    839|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 482, False: 34.0k]
  ------------------
  261|    561|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 79, False: 34.4k]
  ------------------
  262|    561|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 458, False: 103]
  |  Branch (262:29): [True: 388, False: 173]
  |  Branch (262:45): [True: 388, False: 70]
  ------------------
  263|    388|                        {
  264|    388|                            return OpCode::ORI;
  265|    388|                        }
  266|    173|                        break;
  267|       |
  268|  8.51k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 8.51k, False: 26.0k]
  ------------------
  269|  9.22k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 706, False: 33.8k]
  ------------------
  270|  9.22k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 328, False: 8.89k]
  ------------------
  271|  9.22k|                        {
  272|    210|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 210, False: 9.01k]
  ------------------
  273|    367|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 157, False: 9.06k]
  ------------------
  274|    367|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 276, False: 91]
  ------------------
  275|    276|                                {
  276|    276|                                    return OpCode::SBU;
  277|    276|                                }
  278|     91|                                break;
  279|       |
  280|     91|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 79, False: 9.14k]
  ------------------
  281|  1.17k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 1.09k, False: 8.12k]
  ------------------
  282|  1.17k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 711, False: 462]
  ------------------
  283|    711|                                {
  284|    711|                                    return OpCode::SEQ;
  285|    711|                                }
  286|    462|                                break;
  287|       |
  288|    462|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 154, False: 9.06k]
  ------------------
  289|    388|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 234, False: 8.98k]
  ------------------
  290|    388|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 141, False: 247]
  ------------------
  291|    141|                                {
  292|    141|                                    return OpCode::SGE;
  293|    141|                                }
  294|    247|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 152, False: 95]
  ------------------
  295|    152|                                {
  296|    152|                                    return OpCode::SGT;
  297|    152|                                }
  298|     95|                                break;
  299|       |
  300|    568|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 568, False: 8.65k]
  ------------------
  301|    744|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 176, False: 9.04k]
  ------------------
  302|    744|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 631, False: 113]
  ------------------
  303|    631|                                {
  304|    631|                                    return OpCode::SHU;
  305|    631|                                }
  306|    113|                                break;
  307|       |
  308|    703|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 703, False: 8.51k]
  ------------------
  309|    991|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 288, False: 8.93k]
  ------------------
  310|    991|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 66, False: 925]
  ------------------
  311|    991|                                {
  312|    194|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 194, False: 797]
  ------------------
  313|    260|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 66, False: 925]
  ------------------
  314|    260|                                        return OpCode::SLA;
  315|       |
  316|    197|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 197, False: 794]
  ------------------
  317|    264|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 67, False: 924]
  ------------------
  318|    264|                                        return OpCode::SLE;
  319|       |
  320|    198|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 198, False: 793]
  ------------------
  321|    268|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 70, False: 921]
  ------------------
  322|    268|                                        return OpCode::SLL;
  323|       |
  324|     66|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 66, False: 925]
  ------------------
  325|    133|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 67, False: 924]
  ------------------
  326|    133|                                        return OpCode::SLT;
  327|    991|                                }
  328|     66|                                break;
  329|       |
  330|     70|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 70, False: 9.15k]
  ------------------
  331|    214|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 144, False: 9.07k]
  ------------------
  332|    214|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 147, False: 67]
  ------------------
  333|    147|                                {
  334|    147|                                    return OpCode::SNE;
  335|    147|                                }
  336|     67|                                break;
  337|       |
  338|  2.45k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 2.45k, False: 6.76k]
  ------------------
  339|  4.36k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 1.90k, False: 7.31k]
  ------------------
  340|  4.36k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 2.35k, False: 2.00k]
  ------------------
  341|  2.35k|                                {
  342|  2.35k|                                    return OpCode::SRA;
  343|  2.35k|                                }
  344|  2.00k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 258, False: 1.74k]
  ------------------
  345|    258|                                {
  346|    258|                                    return OpCode::SRL;
  347|    258|                                }
  348|  1.74k|                                break;
  349|       |
  350|  1.74k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 222, False: 9.00k]
  ------------------
  351|    427|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 205, False: 9.01k]
  ------------------
  352|    427|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 339, False: 88]
  ------------------
  353|    339|                                {
  354|    339|                                    return OpCode::SUB;
  355|    339|                                }
  356|     88|                                break;
  357|       |
  358|    153|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 153, False: 9.06k]
  ------------------
  359|    226|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 73, False: 9.14k]
  ------------------
  360|    226|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 160, False: 66]
  ------------------
  361|    160|                                {
  362|    160|                                    return OpCode::SWU;
  363|    160|                                }
  364|     66|                                break;
  365|  9.22k|                        }
  366|       |
  367|  3.26k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 142, False: 34.4k]
  ------------------
  368|  3.98k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 714, False: 33.8k]
  ------------------
  369|  3.98k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 411, False: 3.57k]
  |  Branch (369:29): [True: 215, False: 3.76k]
  |  Branch (369:45): [True: 215, False: 196]
  ------------------
  370|    215|                        {
  371|    215|                            return OpCode::XOR;
  372|    215|                        }
  373|  3.76k|                        break;
  374|  34.5k|                }
  375|  12.6k|                break;
  376|  34.5k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  43.2k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 43.2k, False: 109k]
  ------------------
  380|  43.2k|                const char c1 = token[0u];
  381|  43.2k|                const char c2 = token[1u];
  382|  43.2k|                const char c3 = token[2u];
  383|  43.2k|                const char c4 = token[3u];
  384|       |
  385|  43.2k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 4.24k, False: 39.0k]
  ------------------
  386|  43.2k|                {
  387|  3.81k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 3.81k, False: 39.4k]
  ------------------
  388|  4.09k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 280, False: 43.0k]
  ------------------
  389|  4.09k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 66, False: 4.03k]
  ------------------
  390|  4.09k|                        {
  391|  3.60k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 3.60k, False: 496]
  ------------------
  392|  3.75k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 157, False: 3.93k]
  ------------------
  393|  3.75k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 3.55k, False: 202]
  ------------------
  394|  3.55k|                                {
  395|  3.55k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 66, False: 3.48k]
  ------------------
  396|  3.55k|                                    {
  397|  1.26k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 1.26k, False: 2.29k]
  ------------------
  398|  1.32k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 3.48k]
  ------------------
  399|  1.32k|                                            return OpCode::ADDD;
  400|       |
  401|    703|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 703, False: 2.85k]
  ------------------
  402|    769|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 66, False: 3.48k]
  ------------------
  403|    769|                                            return OpCode::ADDF;
  404|       |
  405|    800|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 800, False: 2.75k]
  ------------------
  406|    866|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 3.48k]
  ------------------
  407|    866|                                            return OpCode::ADDI;
  408|       |
  409|    462|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 462, False: 3.09k]
  ------------------
  410|    528|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 3.48k]
  ------------------
  411|    528|                                            return OpCode::ADDU;
  412|  3.55k|                                    }
  413|  3.55k|                                }
  414|    268|                                break;
  415|       |
  416|    268|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 102, False: 3.99k]
  ------------------
  417|    273|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 171, False: 3.92k]
  ------------------
  418|    273|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 206, False: 67]
  |  Branch (418:37): [True: 134, False: 139]
  |  Branch (418:53): [True: 134, False: 72]
  ------------------
  419|    134|                                {
  420|    134|                                    return OpCode::ANDI;
  421|    134|                                }
  422|       |
  423|    139|                                break;
  424|  4.09k|                        }
  425|    473|                        break;
  426|       |
  427|  13.0k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 13.0k, False: 30.2k]
  ------------------
  428|  14.2k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 1.17k, False: 42.1k]
  ------------------
  429|  14.2k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 83, False: 14.1k]
  ------------------
  430|  14.2k|                        {
  431|    117|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 117, False: 14.1k]
  ------------------
  432|    916|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 799, False: 13.4k]
  ------------------
  433|    916|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 490, False: 426]
  |  Branch (433:37): [True: 423, False: 493]
  |  Branch (433:53): [True: 423, False: 67]
  ------------------
  434|    423|                                {
  435|    423|                                    return OpCode::BEQZ;
  436|    423|                                }
  437|    493|                                break;
  438|       |
  439|  12.5k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 12.5k, False: 1.67k]
  ------------------
  440|  12.8k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 264, False: 13.9k]
  ------------------
  441|  12.8k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 12.7k, False: 66]
  ------------------
  442|  12.7k|                                {
  443|  12.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 11.4k, False: 1.33k]
  ------------------
  444|  11.4k|                                    {
  445|  11.4k|                                        return OpCode::BFPF;
  446|  11.4k|                                    }
  447|  1.33k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 1.27k, False: 66]
  ------------------
  448|  1.27k|                                    {
  449|  1.27k|                                        return OpCode::BFPT;
  450|  1.27k|                                    }
  451|  12.7k|                                }
  452|    132|                                break;
  453|       |
  454|    246|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 246, False: 13.9k]
  ------------------
  455|    412|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 166, False: 14.0k]
  ------------------
  456|    412|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 346, False: 66]
  |  Branch (456:37): [True: 280, False: 132]
  |  Branch (456:53): [True: 280, False: 66]
  ------------------
  457|    280|                                {
  458|    280|                                    return OpCode::BNEZ;
  459|    280|                                }
  460|  14.2k|                        }
  461|    840|                        break;
  462|       |
  463|  1.17k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.17k, False: 42.1k]
  ------------------
  464|  1.28k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 114, False: 43.1k]
  ------------------
  465|  1.28k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 1.17k, False: 118]
  |  Branch (465:29): [True: 1.10k, False: 184]
  |  Branch (465:45): [True: 1.10k, False: 66]
  ------------------
  466|  1.10k|                        {
  467|  1.10k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 104, False: 1.00k]
  ------------------
  468|  1.10k|                            {
  469|    216|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 216, False: 889]
  ------------------
  470|    282|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 1.03k]
  ------------------
  471|    282|                                    return OpCode::DIVD;
  472|       |
  473|     66|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 66, False: 1.03k]
  ------------------
  474|    132|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 1.03k]
  ------------------
  475|    132|                                    return OpCode::DIVF;
  476|       |
  477|    254|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 254, False: 851]
  ------------------
  478|    320|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 66, False: 1.03k]
  ------------------
  479|    320|                                    return OpCode::DIVI;
  480|       |
  481|    201|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 201, False: 904]
  ------------------
  482|    267|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 66, False: 1.03k]
  ------------------
  483|    267|                                    return OpCode::DIVU;
  484|  1.10k|                            }
  485|  1.10k|                        }
  486|    288|                        break;
  487|       |
  488|    288|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 93, False: 43.1k]
  ------------------
  489|  1.39k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 1.30k, False: 41.9k]
  ------------------
  490|  1.39k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 1.29k, False: 96]
  |  Branch (490:29): [True: 140, False: 1.25k]
  |  Branch (490:45): [True: 1.23k, False: 66]
  |  Branch (490:61): [True: 140, False: 1.09k]
  ------------------
  491|    140|                        {
  492|    140|                            return OpCode::HALT;
  493|    140|                        }
  494|  1.25k|                        break;
  495|       |
  496|  1.25k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 288, False: 42.9k]
  ------------------
  497|    725|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 437, False: 42.8k]
  ------------------
  498|    725|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 524, False: 201]
  |  Branch (498:29): [True: 132, False: 593]
  |  Branch (498:45): [True: 198, False: 326]
  |  Branch (498:61): [True: 132, False: 66]
  ------------------
  499|    132|                        {
  500|    132|                            return OpCode::JALR;
  501|    132|                        }
  502|    593|                        break;
  503|       |
  504|    800|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 800, False: 42.4k]
  ------------------
  505|  2.28k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 1.48k, False: 41.8k]
  ------------------
  506|  2.28k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 603, False: 1.67k]
  |  Branch (506:29): [True: 537, False: 1.74k]
  |  Branch (506:45): [True: 537, False: 66]
  ------------------
  507|    537|                        {
  508|    537|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 260, False: 277]
  ------------------
  509|    260|                            {
  510|    260|                                return OpCode::MOVD;
  511|    260|                            }
  512|    277|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 211, False: 66]
  ------------------
  513|    211|                            {
  514|    211|                                return OpCode::MOVF;
  515|    211|                            }
  516|    537|                        }
  517|  1.74k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 1.57k, False: 170]
  |  Branch (517:34): [True: 139, False: 1.60k]
  |  Branch (517:50): [True: 1.48k, False: 90]
  |  Branch (517:66): [True: 139, False: 1.34k]
  ------------------
  518|    139|                        {
  519|    139|                            return OpCode::MULT;
  520|    139|                        }
  521|  1.67k|                        break;
  522|       |
  523|  10.9k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 10.9k, False: 32.3k]
  ------------------
  524|  12.9k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 1.99k, False: 41.2k]
  ------------------
  525|  12.9k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 159, False: 12.7k]
  ------------------
  526|  12.9k|                        {
  527|    339|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 339, False: 12.6k]
  ------------------
  528|  1.25k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 917, False: 12.0k]
  ------------------
  529|  1.25k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 807, False: 449]
  ------------------
  530|    807|                                {
  531|    807|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 585, False: 222]
  ------------------
  532|    585|                                    {
  533|    585|                                        return OpCode::SEQI;
  534|    585|                                    }
  535|    222|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 141, False: 81]
  ------------------
  536|    141|                                    {
  537|    141|                                        return OpCode::SEQU;
  538|    141|                                    }
  539|    807|                                }
  540|    530|                                break;
  541|       |
  542|  2.62k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 2.62k, False: 10.3k]
  ------------------
  543|  5.01k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 2.38k, False: 10.5k]
  ------------------
  544|  5.01k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 2.51k, False: 2.49k]
  ------------------
  545|  2.51k|                                {
  546|  2.51k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 132, False: 2.38k]
  ------------------
  547|    132|                                    {
  548|    132|                                        return OpCode::SGEI;
  549|    132|                                    }
  550|  2.38k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 2.31k, False: 66]
  ------------------
  551|  2.31k|                                    {
  552|  2.31k|                                        return OpCode::SGEU;
  553|  2.31k|                                    }
  554|  2.51k|                                }
  555|  2.49k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 2.42k, False: 70]
  ------------------
  556|  2.42k|                                {
  557|  2.42k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 307, False: 2.11k]
  ------------------
  558|    307|                                    {
  559|    307|                                        return OpCode::SGTI;
  560|    307|                                    }
  561|  2.11k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 132, False: 1.98k]
  ------------------
  562|    132|                                    {
  563|    132|                                        return OpCode::SGTU;
  564|    132|                                    }
  565|  2.42k|                                }
  566|  2.12k|                                break;
  567|       |
  568|  2.12k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 1.04k, False: 11.9k]
  ------------------
  569|  1.74k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 702, False: 12.2k]
  ------------------
  570|  1.74k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 66, False: 1.67k]
  ------------------
  571|  1.74k|                                {
  572|    246|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 246, False: 1.49k]
  ------------------
  573|    359|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 113, False: 1.63k]
  ------------------
  574|    359|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 293, False: 66]
  ------------------
  575|    293|                                        {
  576|    293|                                            return OpCode::SLAI;
  577|    293|                                        }
  578|     66|                                        break;
  579|       |
  580|    328|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 328, False: 1.41k]
  ------------------
  581|    492|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 164, False: 1.58k]
  ------------------
  582|    492|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 261, False: 231]
  ------------------
  583|    261|                                        {
  584|    261|                                            return OpCode::SLEI;
  585|    261|                                        }
  586|    231|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 165, False: 66]
  ------------------
  587|    165|                                        {
  588|    165|                                            return OpCode::SLEU;
  589|    165|                                        }
  590|     66|                                        break;
  591|       |
  592|    224|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 224, False: 1.52k]
  ------------------
  593|    357|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 133, False: 1.61k]
  ------------------
  594|    357|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 288, False: 69]
  ------------------
  595|    288|                                        {
  596|    288|                                            return OpCode::SLLI;
  597|    288|                                        }
  598|     69|                                        break;
  599|       |
  600|    330|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 330, False: 1.41k]
  ------------------
  601|    471|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 141, False: 1.60k]
  ------------------
  602|    471|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 272, False: 199]
  ------------------
  603|    272|                                        {
  604|    272|                                            return OpCode::SLTI;
  605|    272|                                        }
  606|    199|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 133, False: 66]
  ------------------
  607|    133|                                        {
  608|    133|                                            return OpCode::SLTU;
  609|    133|                                        }
  610|     66|                                        break;
  611|  1.74k|                                }
  612|       |
  613|    755|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 422, False: 12.5k]
  ------------------
  614|  1.40k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 654, False: 12.2k]
  ------------------
  615|  1.40k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 1.14k, False: 268]
  ------------------
  616|  1.14k|                                {
  617|  1.14k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 294, False: 847]
  ------------------
  618|    294|                                    {
  619|    294|                                        return OpCode::SNEI;
  620|    294|                                    }
  621|    847|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 781, False: 66]
  ------------------
  622|    781|                                    {
  623|    781|                                        return OpCode::SNEU;
  624|    781|                                    }
  625|  1.14k|                                }
  626|    334|                                break;
  627|       |
  628|    334|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 287, False: 12.6k]
  ------------------
  629|    497|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 210, False: 12.7k]
  ------------------
  630|    497|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 251, False: 246]
  |  Branch (630:37): [True: 184, False: 313]
  |  Branch (630:53): [True: 184, False: 67]
  ------------------
  631|    184|                                {
  632|    184|                                    return OpCode::SRAI;
  633|    184|                                }
  634|    313|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 230, False: 83]
  |  Branch (634:42): [True: 135, False: 178]
  |  Branch (634:58): [True: 135, False: 95]
  ------------------
  635|    135|                                {
  636|    135|                                    return OpCode::SRLI;
  637|    135|                                }
  638|    178|                                break;
  639|       |
  640|  1.59k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.59k, False: 11.3k]
  ------------------
  641|  3.20k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.61k, False: 11.3k]
  ------------------
  642|  3.20k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 2.83k, False: 370]
  ------------------
  643|  2.83k|                                {
  644|  2.83k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 976, False: 1.85k]
  ------------------
  645|  2.83k|                                    {
  646|     73|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 73, False: 2.75k]
  ------------------
  647|    139|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 2.76k]
  ------------------
  648|    139|                                            return OpCode::SUBD;
  649|       |
  650|    200|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 200, False: 2.63k]
  ------------------
  651|    266|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 66, False: 2.76k]
  ------------------
  652|    266|                                            return OpCode::SUBF;
  653|       |
  654|    608|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 608, False: 2.22k]
  ------------------
  655|    674|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 66, False: 2.76k]
  ------------------
  656|    674|                                            return OpCode::SUBI;
  657|       |
  658|    710|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 710, False: 2.12k]
  ------------------
  659|    776|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 2.76k]
  ------------------
  660|    776|                                            return OpCode::SUBU;
  661|  2.83k|                                    }
  662|  2.83k|                                }
  663|  1.34k|                                break;
  664|  12.9k|                        }
  665|  4.66k|                        break;
  666|       |
  667|  4.66k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 1.62k, False: 41.6k]
  ------------------
  668|  1.73k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 112, False: 43.1k]
  ------------------
  669|  1.73k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 1.67k, False: 66]
  |  Branch (669:29): [True: 1.49k, False: 248]
  |  Branch (669:45): [True: 1.59k, False: 74]
  |  Branch (669:61): [True: 1.49k, False: 108]
  ------------------
  670|  1.49k|                        {
  671|  1.49k|                            return OpCode::TRAP;
  672|  1.49k|                        }
  673|    248|                        break;
  674|    248|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 170, False: 43.1k]
  ------------------
  675|    337|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 167, False: 43.1k]
  ------------------
  676|    337|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 265, False: 72]
  |  Branch (676:29): [True: 133, False: 204]
  |  Branch (676:45): [True: 199, False: 66]
  |  Branch (676:61): [True: 133, False: 66]
  ------------------
  677|    133|                        {
  678|    133|                            return OpCode::XORI;
  679|    133|                        }
  680|    204|                        break;
  681|  43.2k|                }
  682|  14.4k|                break;
  683|  43.2k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  26.6k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 26.6k, False: 126k]
  ------------------
  687|  26.6k|                const char c1 = token[0u];
  688|  26.6k|                const char c2 = token[1u];
  689|  26.6k|                const char c3 = token[2u];
  690|  26.6k|                const char c4 = token[3u];
  691|  26.6k|                const char c5 = token[4u];
  692|       |
  693|  26.6k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 22.0k, False: 4.58k]
  ------------------
  694|  26.6k|                {
  695|    631|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 631, False: 25.9k]
  ------------------
  696|    631|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 26.6k]
  ------------------
  697|    631|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 631, False: 0]
  |  Branch (697:29): [True: 631, False: 0]
  |  Branch (697:45): [True: 631, False: 0]
  |  Branch (697:61): [True: 631, False: 0]
  |  Branch (697:77): [True: 631, False: 0]
  ------------------
  698|    631|                        {
  699|    631|                            return OpCode::ADDUI;
  700|    631|                        }
  701|      0|                        break;
  702|       |
  703|    326|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 326, False: 26.2k]
  ------------------
  704|    326|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 26.6k]
  ------------------
  705|    326|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 326, False: 0]
  |  Branch (705:29): [True: 326, False: 0]
  |  Branch (705:45): [True: 326, False: 0]
  |  Branch (705:61): [True: 326, False: 0]
  |  Branch (705:77): [True: 326, False: 0]
  ------------------
  706|    326|                        {
  707|    326|                            return OpCode::DIVUI;
  708|    326|                        }
  709|      0|                        break;
  710|       |
  711|    419|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 419, False: 26.2k]
  ------------------
  712|    419|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 26.6k]
  ------------------
  713|    419|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 419, False: 0]
  |  Branch (713:29): [True: 419, False: 0]
  |  Branch (713:45): [True: 419, False: 0]
  |  Branch (713:61): [True: 419, False: 0]
  ------------------
  714|    419|                        {
  715|    419|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 419]
  ------------------
  716|    419|                            {
  717|     67|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 67, False: 352]
  ------------------
  718|     67|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 419]
  ------------------
  719|     67|                                    return OpCode::MULTD;
  720|       |
  721|    209|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 209, False: 210]
  ------------------
  722|    209|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 419]
  ------------------
  723|    209|                                    return OpCode::MULTF;
  724|       |
  725|     77|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 77, False: 342]
  ------------------
  726|     77|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 419]
  ------------------
  727|     77|                                    return OpCode::MULTI;
  728|       |
  729|     66|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 66, False: 353]
  ------------------
  730|     66|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 419]
  ------------------
  731|     66|                                    return OpCode::MULTU;
  732|    419|                            }
  733|    419|                        }
  734|      0|                        break;
  735|       |
  736|  3.21k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 3.21k, False: 23.4k]
  ------------------
  737|  3.21k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 26.6k]
  ------------------
  738|  3.21k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 3.21k]
  ------------------
  739|  3.21k|                        {
  740|  1.64k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 1.64k, False: 1.56k]
  ------------------
  741|  1.64k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 3.21k]
  ------------------
  742|  1.64k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 1.64k, False: 0]
  |  Branch (742:37): [True: 1.64k, False: 0]
  |  Branch (742:53): [True: 1.64k, False: 0]
  |  Branch (742:69): [True: 1.64k, False: 0]
  ------------------
  743|  1.64k|                                {
  744|  1.64k|                                    return OpCode::SEQUI;
  745|  1.64k|                                }
  746|      0|                                break;
  747|       |
  748|    982|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 982, False: 2.22k]
  ------------------
  749|    982|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 3.21k]
  ------------------
  750|    982|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 743, False: 239]
  |  Branch (750:37): [True: 743, False: 239]
  |  Branch (750:53): [True: 743, False: 0]
  |  Branch (750:69): [True: 743, False: 0]
  ------------------
  751|    743|                                {
  752|    743|                                    return OpCode::SGEUI;
  753|    743|                                }
  754|    239|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 239, False: 0]
  |  Branch (754:42): [True: 239, False: 0]
  |  Branch (754:58): [True: 239, False: 0]
  |  Branch (754:74): [True: 239, False: 0]
  ------------------
  755|    239|                                {
  756|    239|                                    return OpCode::SGTUI;
  757|    239|                                }
  758|      0|                                break;
  759|       |
  760|    273|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 273, False: 2.93k]
  ------------------
  761|    273|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 3.21k]
  ------------------
  762|    273|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 78, False: 195]
  |  Branch (762:37): [True: 78, False: 195]
  |  Branch (762:53): [True: 78, False: 0]
  |  Branch (762:69): [True: 78, False: 0]
  ------------------
  763|     78|                                {
  764|     78|                                    return OpCode::SLEUI;
  765|     78|                                }
  766|    195|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 195, False: 0]
  |  Branch (766:42): [True: 195, False: 0]
  |  Branch (766:58): [True: 195, False: 0]
  |  Branch (766:74): [True: 195, False: 0]
  ------------------
  767|    195|                                {
  768|    195|                                    return OpCode::SLTUI;
  769|    195|                                }
  770|      0|                                break;
  771|       |
  772|     66|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 66, False: 3.14k]
  ------------------
  773|     66|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 3.21k]
  ------------------
  774|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:53): [True: 66, False: 0]
  |  Branch (774:69): [True: 66, False: 0]
  ------------------
  775|     66|                                {
  776|     66|                                    return OpCode::SNEUI;
  777|     66|                                }
  778|      0|                                break;
  779|       |
  780|    242|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 242, False: 2.96k]
  ------------------
  781|    242|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 3.21k]
  ------------------
  782|    242|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 242, False: 0]
  |  Branch (782:37): [True: 242, False: 0]
  |  Branch (782:53): [True: 242, False: 0]
  |  Branch (782:69): [True: 242, False: 0]
  ------------------
  783|    242|                                {
  784|    242|                                    return OpCode::SUBUI;
  785|    242|                                }
  786|      0|                                break;
  787|  3.21k|                        }
  788|       |
  789|      0|                        break;
  790|  26.6k|                }
  791|       |
  792|  22.0k|                break;
  793|  26.6k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  22.0k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 2.63k, False: 150k]
  ------------------
  797|  2.63k|                const char c1 = token[0u];
  798|  2.63k|                const char c2 = token[1u];
  799|  2.63k|                const char c3 = token[2u];
  800|  2.63k|                const char c4 = token[3u];
  801|  2.63k|                const char c5 = token[4u];
  802|  2.63k|                const char c6 = token[5u];
  803|       |
  804|  2.63k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 1.42k, False: 1.21k]
  |  Branch (804:21): [True: 1.42k, False: 1.21k]
  |  Branch (804:37): [True: 1.42k, False: 0]
  |  Branch (804:53): [True: 1.42k, False: 0]
  ------------------
  805|  1.42k|                {
  806|  1.42k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 1.42k]
  ------------------
  807|  1.42k|                    {
  808|    262|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 262, False: 1.16k]
  ------------------
  809|    262|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 1.42k]
  ------------------
  810|    262|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 262, False: 0]
  ------------------
  811|    262|                            {
  812|    262|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 195, False: 67]
  ------------------
  813|    195|                                {
  814|    195|                                    return OpCode::CVTD2F;
  815|    195|                                }
  816|     67|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 67, False: 0]
  ------------------
  817|     67|                                {
  818|     67|                                    return OpCode::CVTD2I;
  819|     67|                                }
  820|    262|                            }
  821|      0|                            break;
  822|       |
  823|    260|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 260, False: 1.16k]
  ------------------
  824|    260|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 1.42k]
  ------------------
  825|    260|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 260, False: 0]
  ------------------
  826|    260|                            {
  827|    260|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 66, False: 194]
  ------------------
  828|     66|                                {
  829|     66|                                    return OpCode::CVTF2D;
  830|     66|                                }
  831|    194|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 194, False: 0]
  ------------------
  832|    194|                                {
  833|    194|                                    return OpCode::CVTF2I;
  834|    194|                                }
  835|    260|                            }
  836|      0|                            break;
  837|       |
  838|    901|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 901, False: 522]
  ------------------
  839|    901|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 1.42k]
  ------------------
  840|    901|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 901, False: 0]
  ------------------
  841|    901|                            {
  842|    901|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 834, False: 67]
  ------------------
  843|    834|                                {
  844|    834|                                    return OpCode::CVTI2D;
  845|    834|                                }
  846|     67|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 67, False: 0]
  ------------------
  847|     67|                                {
  848|     67|                                    return OpCode::CVTI2F;
  849|     67|                                }
  850|    901|                            }
  851|  1.42k|                    }
  852|  1.42k|                }
  853|  1.21k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 323, False: 892]
  |  Branch (853:26): [True: 323, False: 892]
  |  Branch (853:42): [True: 323, False: 0]
  |  Branch (853:58): [True: 323, False: 0]
  |  Branch (853:74): [True: 323, False: 0]
  ------------------
  854|  1.21k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 323, False: 0]
  |  Branch (854:42): [True: 323, False: 0]
  ------------------
  855|    323|                {
  856|    323|                    return OpCode::MULTUI;
  857|    323|                }
  858|    892|                break;
  859|  2.63k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|    892|            case 7: {
  ------------------
  |  Branch (862:13): [True: 385, False: 152k]
  ------------------
  863|    385|                const char c1 = token[0u];
  864|    385|                const char c2 = token[1u];
  865|    385|                const char c3 = token[2u];
  866|    385|                const char c4 = token[3u];
  867|    385|                const char c5 = token[4u];
  868|    385|                const char c6 = token[5u];
  869|    385|                const char c7 = token[6u];
  870|       |
  871|    385|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 169, False: 216]
  |  Branch (871:21): [True: 169, False: 216]
  |  Branch (871:37): [True: 169, False: 0]
  |  Branch (871:53): [True: 169, False: 0]
  ------------------
  872|    169|                {
  873|    169|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 83, False: 86]
  |  Branch (873:25): [True: 83, False: 86]
  |  Branch (873:41): [True: 83, False: 0]
  |  Branch (873:54): [True: 83, False: 0]
  |  Branch (873:70): [True: 83, False: 0]
  ------------------
  874|     83|                    {
  875|     83|                        return OpCode::MOVI2FP;
  876|     83|                    }
  877|     86|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 86, False: 0]
  |  Branch (877:25): [True: 86, False: 0]
  |  Branch (877:41): [True: 86, False: 0]
  |  Branch (877:57): [True: 86, False: 0]
  |  Branch (877:70): [True: 86, False: 0]
  ------------------
  878|     86|                    {
  879|     86|                        return OpCode::MOVFP2I;
  880|     86|                    }
  881|     86|                }
  882|    216|                break;
  883|    385|            }
  884|       |
  885|  7.76k|            default: {
  ------------------
  |  Branch (885:13): [True: 7.76k, False: 145k]
  ------------------
  886|  7.76k|                break;
  887|    385|            }
  888|   152k|        }
  889|       |
  890|       |        // None found
  891|  84.2k|        return OpCode::NONE;
  892|   152k|    }
_ZN3dlx3iceEcc:
   17|   184k|    {
   18|   184k|        constexpr const char diff = 'a' - 'A';
   19|   184k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 98.6k, False: 85.8k]
  |  Branch (19:28): [True: 29.3k, False: 56.4k]
  ------------------
   20|   184k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   154k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  3.16k|    {
  195|  3.16k|        ParseError err;
  196|       |
  197|  3.16k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  3.16k|        err.m_LineNumber                           = line_number;
  199|  3.16k|        err.m_Column                               = column;
  200|  3.16k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  3.16k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  3.16k|        return err;
  204|  3.16k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  3.16k|    {
  209|  3.16k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  3.16k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  3.16k|                                                         actual_type);
  212|  3.16k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|     66|    {
  218|     66|        ParseError err;
  219|       |
  220|     66|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|     66|        err.m_LineNumber        = line_number;
  222|     66|        err.m_Column            = column;
  223|     66|        err.invalid_number.text = text;
  224|       |
  225|     66|        return err;
  226|     66|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|     66|    {
  230|     66|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|     66|                                                token.GetColumn().unsafe(), token.GetText());
  232|     66|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      8|    {
  237|      8|        ParseError err;
  238|       |
  239|      8|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      8|        err.m_LineNumber = line_number;
  241|      8|        err.m_Column     = column;
  242|       |
  243|      8|        return err;
  244|      8|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      8|    {
  249|      8|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      8|                                                                     token.GetColumn().unsafe());
  251|      8|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  63.7k|    {
  257|  63.7k|        ParseError err;
  258|       |
  259|  63.7k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  63.7k|        err.m_LineNumber                   = line_number;
  261|  63.7k|        err.m_Column                       = column;
  262|  63.7k|        err.unexpected_token.expected_type = expected_type;
  263|  63.7k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  63.7k|        return err;
  266|  63.7k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  63.7k|    {
  271|  63.7k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  63.7k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  63.7k|                                                  token.GetType());
  274|  63.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  2.89k|    {
  279|  2.89k|        ParseError err;
  280|       |
  281|  2.89k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  2.89k|        err.m_LineNumber                   = line_number;
  283|  2.89k|        err.m_Column                       = column;
  284|  2.89k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  2.89k|        return err;
  287|  2.89k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  1.28k|    {
  291|  1.28k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  1.28k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  1.28k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  35.2k|    {
  298|  35.2k|        ParseError err;
  299|       |
  300|  35.2k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  35.2k|        err.m_LineNumber                       = line_number;
  302|  35.2k|        err.m_Column                           = column;
  303|  35.2k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  35.2k|        return err;
  306|  35.2k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  35.2k|    {
  311|  35.2k|        return ConstructInvalidLabelIdentifierParseError(
  312|  35.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  35.2k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  8.33k|    {
  319|  8.33k|        ParseError err;
  320|       |
  321|  8.33k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  8.33k|        err.m_LineNumber                     = line_number;
  323|  8.33k|        err.m_Column                         = column;
  324|  8.33k|        err.label_already_defined.label_name = label_name;
  325|  8.33k|        err.label_already_defined.at_line    = at_line;
  326|  8.33k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  8.33k|        return err;
  329|  8.33k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  8.33k|    {
  334|  8.33k|        return ConstructLabelAlreadyDefinedParseError(
  335|  8.33k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  8.33k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  8.33k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  25.4k|    {
  342|  25.4k|        ParseError err;
  343|       |
  344|  25.4k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  25.4k|        err.m_LineNumber = line_number;
  346|  25.4k|        err.m_Column     = column;
  347|       |
  348|  25.4k|        return err;
  349|  25.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  25.4k|    {
  354|  25.4k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  25.4k|                                                        token.GetColumn().unsafe());
  356|  25.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  13.6k|    {
  362|  13.6k|        ParseError err;
  363|       |
  364|  13.6k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  13.6k|        err.m_LineNumber               = line_number;
  366|  13.6k|        err.m_Column                   = column;
  367|  13.6k|        err.too_few_arguments.required = required;
  368|  13.6k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  13.6k|        return err;
  371|  13.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  13.6k|    {
  376|  13.6k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  13.6k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  13.6k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  1.78k|    {
  383|  1.78k|        ParseError err;
  384|       |
  385|  1.78k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  1.78k|        err.m_LineNumber           = line_number;
  387|  1.78k|        err.m_Column               = column;
  388|  1.78k|        err.empty_label.label_name = label_name;
  389|       |
  390|  1.78k|        return err;
  391|  1.78k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  1.78k|    {
  395|  1.78k|        return ConstructEmptyLabelParseError(
  396|  1.78k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  1.78k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 1.61k, False: 170]
  ------------------
  398|  1.61k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  1.78k|                        token.GetText());
  400|  1.78k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    167|    {
  405|    167|        ParseError err;
  406|       |
  407|    167|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    167|        err.m_LineNumber = line_number;
  409|    167|        err.m_Column     = column;
  410|       |
  411|    167|        return err;
  412|    167|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    167|    {
  416|    167|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    167|                                               token.GetColumn().unsafe());
  418|    167|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   154k|    {
   19|   154k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   154k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  3.81k|    {
  181|  3.81k|        ParsedProgram program;
  182|       |
  183|  3.81k|        program.m_Tokens = tokens;
  184|       |
  185|  3.81k|        phi::boolean line_has_instruction{false};
  186|  3.81k|        phi::usize   label_count{0u};
  187|       |
  188|   352k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 348k, False: 3.81k]
  ------------------
  189|   348k|        {
  190|   348k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   348k|            switch (current_token.GetType())
  195|   348k|            {
  196|       |                // Ignore comments
  197|  59.0k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 59.0k, False: 289k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  59.0k|                    break;
  200|       |
  201|   129k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 129k, False: 218k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   129k|                    line_has_instruction = false;
  204|   129k|                    break;
  205|       |
  206|  43.8k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 43.8k, False: 304k]
  ------------------
  207|  43.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 6.62k, False: 37.2k]
  ------------------
  208|  6.62k|                    {
  209|  6.62k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  6.62k|                                current_token, Token::Type::NewLine));
  211|  6.62k|                        break;
  212|  6.62k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  37.2k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 22.4k, False: 14.8k]
  ------------------
  217|  22.4k|                    {
  218|  22.4k|                        program.AddParseError(
  219|  22.4k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  22.4k|                        break;
  221|  22.4k|                    }
  222|       |
  223|  14.8k|                    phi::string_view label_name = current_token.GetText();
  224|  14.8k|                    label_name.remove_suffix(1u);
  225|       |
  226|  14.8k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.60k, False: 13.2k]
  ------------------
  227|  1.60k|                    {
  228|  1.60k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.60k|                                current_token.GetLineNumber().unsafe(),
  230|  1.60k|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.60k|                        break;
  232|  1.60k|                    }
  233|       |
  234|  13.2k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 2.48k, False: 10.7k]
  ------------------
  235|  2.48k|                    {
  236|  2.48k|                        program.AddParseError(
  237|  2.48k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  2.48k|                        break;
  239|  2.48k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  10.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 8.33k, False: 2.40k]
  ------------------
  243|  8.33k|                    {
  244|       |                        // Find first defintions of label
  245|  8.33k|                        const Token* first_label_definition =
  246|  8.33k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  8.33k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  8.33k|                                    {
  249|  8.33k|                                        phi::string_view token_label_name = t.GetText();
  250|  8.33k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  8.33k|                                        if (token_label_name == label_name)
  253|  8.33k|                                        {
  254|  8.33k|                                            return true;
  255|  8.33k|                                        }
  256|  8.33k|                                    }
  257|       |
  258|  8.33k|                                    return false;
  259|  8.33k|                                });
  260|       |
  261|  8.33k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  8.33k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  8.33k|                                current_token, *first_label_definition));
  265|  8.33k|                        break;
  266|  8.33k|                    }
  267|       |
  268|  2.40k|                    program.m_JumpData[label_name] =
  269|  2.40k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  2.40k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  2.40k|                    break;
  276|  10.7k|                }
  277|       |
  278|  65.9k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 65.9k, False: 282k]
  ------------------
  279|  65.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 25.4k, False: 40.4k]
  ------------------
  280|  25.4k|                    {
  281|  25.4k|                        program.AddParseError(
  282|  25.4k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  25.4k|                        break;
  284|  25.4k|                    }
  285|       |
  286|  40.4k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  40.4k|                    PHI_ASSERT(current_token.HasHint());
  290|  40.4k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  40.4k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  40.4k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  40.4k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  40.4k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  40.4k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  40.4k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  40.4k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  40.4k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  70.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 66.1k, False: 4.56k]
  ------------------
  312|  66.1k|                    {
  313|       |                        // Get next token
  314|  66.1k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 157, False: 65.9k]
  ------------------
  315|    157|                        {
  316|    157|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    157|                                    current_token, number_of_argument_required.unsafe(),
  318|    157|                                    argument_num.unsafe()));
  319|    157|                            break;
  320|    157|                        }
  321|       |
  322|  65.9k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  65.9k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 17.3k, False: 48.6k]
  ------------------
  326|  17.3k|                        {
  327|  17.3k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 167, False: 17.2k]
  ------------------
  328|    167|                            {
  329|    167|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    167|                            }
  331|       |
  332|  17.3k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  17.3k|                            continue;
  335|  17.3k|                        }
  336|       |
  337|  48.6k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 13.5k, False: 35.1k]
  ------------------
  338|  13.5k|                        {
  339|  13.5k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  13.5k|                                    token, number_of_argument_required.unsafe(),
  341|  13.5k|                                    argument_num.unsafe()));
  342|  13.5k|                            break;
  343|  13.5k|                        }
  344|       |
  345|  35.1k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  35.1k|                                parse_instruction_argument(
  347|  35.1k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  35.1k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 22.2k, False: 12.8k]
  ------------------
  349|  22.2k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  22.2k|                            break;
  352|  22.2k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  12.8k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  12.8k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  12.8k|                        argument_num++;
  359|  12.8k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  12.8k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  40.4k|                    program.m_Instructions.emplace_back(instruction);
  367|  40.4k|                    line_has_instruction = true;
  368|  40.4k|                    break;
  369|  65.9k|                }
  370|       |
  371|  49.7k|                default:
  ------------------
  |  Branch (371:17): [True: 49.7k, False: 298k]
  ------------------
  372|  49.7k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  49.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 25.7k, False: 24.0k]
  ------------------
  374|  25.7k|                    {
  375|  25.7k|                        expected_token_type = Token::Type::NewLine;
  376|  25.7k|                    }
  377|       |
  378|  49.7k|                    program.AddParseError(
  379|  49.7k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  49.7k|                    break;
  381|   348k|            }
  382|   348k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  3.81k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 289, False: 3.52k]
  ------------------
  386|    289|        {
  387|  3.26k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 2.98k, False: 289]
  ------------------
  388|  2.98k|            {
  389|  2.98k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  2.98k|                const Token& token = *it;
  392|  2.98k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 1.78k, False: 1.19k]
  ------------------
  393|  1.78k|                {
  394|  1.78k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  1.78k|                    --label_count;
  396|  1.78k|                }
  397|  2.98k|            }
  398|    289|        }
  399|       |
  400|  3.81k|        return program;
  401|  3.81k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  3.81k|    {
  405|  3.81k|        TokenStream tokens = Tokenize(source);
  406|  3.81k|        return Parse(tokens);
  407|  3.81k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  35.1k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  35.1k|        switch (token.GetType())
   37|  35.1k|        {
   38|    747|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 747, False: 34.3k]
  ------------------
   39|    747|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 218, False: 529]
  ------------------
   40|    747|                                          ArgumentType::AddressDisplacement))
   41|    218|                {
   42|    218|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    218|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    218|                    return {};
   46|    218|                }
   47|       |
   48|       |                // Get address displacement
   49|    529|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    529|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|    529|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 8, False: 521]
  ------------------
   54|      8|                {
   55|      8|                    program.AddParseError(
   56|      8|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      8|                    return {};
   58|      8|                }
   59|       |
   60|    521|                auto         it           = tokens.current_position();
   61|    521|                const Token& first_token  = tokens.consume();
   62|    521|                const Token& second_token = tokens.consume();
   63|    521|                const Token& third_token  = tokens.consume();
   64|       |
   65|    521|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 521, False: 0]
  ------------------
   66|    521|                {
   67|    521|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    521|                            first_token, Token::Type::OpenBracket));
   69|    521|                    return {};
   70|    521|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  9.34k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 9.34k, False: 25.7k]
  ------------------
   97|  9.34k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 315, False: 9.02k]
  ------------------
   98|    315|                {
   99|    315|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    315|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    315|                    return {};
  102|    315|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  9.02k|                return ConstructInstructionArgumentRegisterInt(
  108|  9.02k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  9.34k|            }
  110|    430|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 430, False: 34.6k]
  ------------------
  111|    430|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 356, False: 74]
  ------------------
  112|    356|                {
  113|    356|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    356|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    356|                    return {};
  116|    356|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|     74|                return ConstructInstructionArgumentRegisterFloat(
  122|     74|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    430|            }
  124|  1.28k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 1.28k, False: 33.8k]
  ------------------
  125|  1.28k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  1.28k|                return {};
  128|    430|            }
  129|  14.1k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 14.1k, False: 20.9k]
  ------------------
  130|       |                // Parse as Label
  131|  14.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 1.30k, False: 12.8k]
  ------------------
  132|  1.30k|                {
  133|  1.30k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  1.30k|                            token, expected_argument_type, ArgumentType::Label));
  135|  1.30k|                    return {};
  136|  1.30k|                }
  137|       |
  138|  12.8k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 12.8k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  12.8k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 10.3k, False: 2.44k]
  ------------------
  145|  10.3k|                {
  146|  10.3k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  10.3k|                    return {};
  148|  10.3k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  2.44k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  12.8k|            }
  154|  2.34k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 2.34k, False: 32.7k]
  ------------------
  155|  2.34k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 963, False: 1.38k]
  ------------------
  156|    963|                {
  157|    963|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    963|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    963|                    return {};
  160|    963|                }
  161|       |
  162|  1.38k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 1.31k, False: 66]
  ------------------
  163|  1.31k|                {
  164|  1.31k|                    return ConstructInstructionArgumentImmediateValue(
  165|  1.31k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  1.31k|                }
  167|       |
  168|     66|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|     66|                return {};
  170|  1.38k|            }
  171|       |
  172|  6.79k|            default:
  ------------------
  |  Branch (172:13): [True: 6.79k, False: 28.3k]
  ------------------
  173|  6.79k|                program.AddParseError(
  174|  6.79k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  6.79k|                return {};
  176|  35.1k|        }
  177|  35.1k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   103k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   103k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 41.7k, False: 61.3k]
  ------------------
  248|  41.7k|                                    {
  249|  41.7k|                                        phi::string_view token_label_name = t.GetText();
  250|  41.7k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  41.7k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 8.33k, False: 33.4k]
  ------------------
  253|  8.33k|                                        {
  254|  8.33k|                                            return true;
  255|  8.33k|                                        }
  256|  41.7k|                                    }
  257|       |
  258|  94.7k|                                    return false;
  259|   103k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    200|    {
  354|    200|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 200]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    200|        m_CurrentProgram = &program;
  361|       |
  362|    200|        m_ProgramCounter               = 0u;
  363|    200|        m_Halted                       = false;
  364|    200|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    200|        m_LastRaisedException          = Exception::None;
  366|    200|        m_CurrentStepCount             = 0u;
  367|       |
  368|    200|        return true;
  369|    200|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   175k|    {
   13|   175k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 35.1k, False: 140k]
  ------------------
   14|  35.1k|        {
   15|  35.1k|            const char first_char = token[0u];
   16|  35.1k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 8.15k, False: 26.9k]
  |  Branch (16:38): [True: 3.14k, False: 23.8k]
  ------------------
   17|  11.2k|            {
   18|  11.2k|                const char second_char = token[1u];
   19|  11.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 11.2k, False: 95]
  |  Branch (19:43): [True: 8.50k, False: 2.70k]
  ------------------
   20|  8.50k|                {
   21|  8.50k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  8.50k|                }
   23|  11.2k|            }
   24|  35.1k|        }
   25|   140k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 47.3k, False: 93.3k]
  ------------------
   26|  47.3k|        {
   27|  47.3k|            const char first_char = token[0u];
   28|  47.3k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 8.75k, False: 38.5k]
  |  Branch (28:38): [True: 1.30k, False: 37.2k]
  ------------------
   29|  10.0k|            {
   30|  10.0k|                const char second_char = token[1u];
   31|  10.0k|                const char third_char  = token[2u];
   32|       |
   33|  10.0k|                switch (second_char)
   34|  10.0k|                {
   35|  3.50k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 3.50k, False: 6.55k]
  ------------------
   36|  3.50k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 3.43k, False: 74]
  |  Branch (36:50): [True: 3.11k, False: 323]
  ------------------
   37|  3.11k|                        {
   38|  3.11k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  3.11k|                        }
   40|    397|                        break;
   41|  3.50k|                    }
   42|  5.94k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 5.94k, False: 4.10k]
  ------------------
   43|  5.94k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 5.88k, False: 66]
  |  Branch (43:50): [True: 5.17k, False: 706]
  ------------------
   44|  5.17k|                        {
   45|  5.17k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  5.17k|                        }
   47|    772|                        break;
   48|  5.94k|                    }
   49|    772|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 532, False: 9.52k]
  ------------------
   50|    532|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 68, False: 464]
  |  Branch (50:50): [True: 398, False: 66]
  ------------------
   51|    466|                        {
   52|    466|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    466|                        }
   54|     66|                        break;
   55|    532|                    }
   56|     69|                    default: {
  ------------------
  |  Branch (56:21): [True: 69, False: 9.98k]
  ------------------
   57|     69|                        break;
   58|    532|                    }
   59|  10.0k|                }
   60|  10.0k|            }
   61|  47.3k|        }
   62|       |
   63|   158k|        return IntRegisterID::None;
   64|   175k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   158k|    {
   68|   158k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 26.6k, False: 131k]
  ------------------
   69|  26.6k|        {
   70|  26.6k|            const char first_char = token[0u];
   71|  26.6k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 1.50k, False: 25.1k]
  |  Branch (71:38): [True: 877, False: 24.2k]
  ------------------
   72|  2.38k|            {
   73|  2.38k|                const char second_char = token[1u];
   74|  2.38k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 2.30k, False: 75]
  |  Branch (74:43): [True: 1.56k, False: 745]
  ------------------
   75|  1.56k|                {
   76|  1.56k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  1.56k|                }
   78|  2.38k|            }
   79|  26.6k|        }
   80|   131k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 38.5k, False: 93.3k]
  ------------------
   81|  38.5k|        {
   82|  38.5k|            const char first_char = token[0u];
   83|  38.5k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 4.02k, False: 34.5k]
  |  Branch (83:38): [True: 2.75k, False: 31.7k]
  ------------------
   84|  6.78k|            {
   85|  6.78k|                const char second_char = token[1u];
   86|  6.78k|                const char third_char  = token[2u];
   87|       |
   88|  6.78k|                switch (second_char)
   89|  6.78k|                {
   90|  2.51k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 2.51k, False: 4.27k]
  ------------------
   91|  2.51k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 2.44k, False: 67]
  |  Branch (91:50): [True: 2.36k, False: 84]
  ------------------
   92|  2.36k|                        {
   93|  2.36k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  2.36k|                        }
   95|    151|                        break;
   96|  2.51k|                    }
   97|  2.51k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 2.51k, False: 4.27k]
  ------------------
   98|  2.51k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 399, False: 2.11k]
  |  Branch (98:50): [True: 70, False: 329]
  ------------------
   99|     70|                        {
  100|     70|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|     70|                        }
  102|  2.44k|                        break;
  103|  2.51k|                    }
  104|  2.44k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 1.67k, False: 5.10k]
  ------------------
  105|  1.67k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 1.30k, False: 374]
  |  Branch (105:50): [True: 272, False: 102]
  ------------------
  106|  1.57k|                        {
  107|  1.57k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  1.57k|                        }
  109|    102|                        break;
  110|  1.67k|                    }
  111|    102|                    default: {
  ------------------
  |  Branch (111:21): [True: 80, False: 6.70k]
  ------------------
  112|     80|                        break;
  113|  1.67k|                    }
  114|  6.78k|                }
  115|  6.78k|            }
  116|  38.5k|        }
  117|       |
  118|   152k|        return FloatRegisterID::None;
  119|   158k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   178k|    {
  123|   178k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 47.3k, False: 130k]
  ------------------
  124|  47.3k|        {
  125|  47.3k|            const char c1 = token[0u];
  126|  47.3k|            const char c2 = token[1u];
  127|  47.3k|            const char c3 = token[2u];
  128|  47.3k|            const char c4 = token[3u];
  129|       |
  130|  47.3k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 4.11k, False: 43.2k]
  |  Branch (130:34): [True: 165, False: 43.0k]
  |  Branch (130:49): [True: 4.08k, False: 193]
  |  Branch (130:62): [True: 127, False: 66]
  ------------------
  131|  47.3k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 4.08k, False: 132]
  |  Branch (131:34): [True: 66, False: 66]
  |  Branch (131:49): [True: 4.08k, False: 66]
  |  Branch (131:62): [True: 0, False: 66]
  ------------------
  132|  47.3k|        }
  133|       |
  134|   130k|        return false;
  135|   178k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   314k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|   101k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  1.08M|    {
   41|  1.08M|        return m_Type;
   42|  1.08M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   746k|    {
   51|   746k|        return m_LineNumber;
   52|   746k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.44M|    {
   56|  1.44M|        return m_Column;
   57|  1.44M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  1.01M|    {
   61|  1.01M|        return m_Text.length();
   62|  1.01M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   172k|    {
   66|   172k|        return m_Text;
   67|   172k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  42.3k|    {
   80|  42.3k|        return m_HasHint;
   81|  42.3k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  51.4k|    {
   85|  51.4k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  51.4k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  51.4k|                   m_Type == Type::ImmediateInteger);
   88|  51.4k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  51.4k|        return m_Hint;
   91|  51.4k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  3.81k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  3.81k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  3.81k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|    529|    {
   52|    529|        return x + m_Iterator <= m_Tokens.size();
   53|    529|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   418k|    {
   57|   418k|        return m_Iterator < m_Tokens.size();
   58|   418k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   415k|    {
   62|   415k|        return m_Iterator >= m_Tokens.size();
   63|   415k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   415k|    {
   77|   415k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   415k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   415k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|    521|    {
  156|    521|        return m_Iterator;
  157|    521|    }
_ZNK3dlx11TokenStream5beginEv:
  169|  3.81k|    {
  170|       |#if defined(PHI_DEBUG)
  171|       |        //PHI_ASSERT(m_Finialized);
  172|       |#endif
  173|       |
  174|  3.81k|        return m_Tokens.begin();
  175|  3.81k|    }
_ZNK3dlx11TokenStream3endEv:
  187|  3.81k|    {
  188|       |#if defined(PHI_DEBUG)
  189|       |        //PHI_ASSERT(m_Finialized);
  190|       |#endif
  191|       |
  192|  3.81k|        return m_Tokens.end();
  193|  3.81k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    289|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    289|        return m_Tokens.rbegin();
  211|    289|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  2.98k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  2.98k|        return m_Tokens.rend();
  220|  2.98k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  3.81k|    {
   66|  3.81k|        TokenStream tokens;
   67|       |
   68|  3.81k|        phi::string_view current_token;
   69|       |
   70|  3.81k|        phi::u64 current_line_number{1u};
   71|  3.81k|        phi::u64 current_column{1u};
   72|  3.81k|        phi::u64 token_begin{0u};
   73|       |
   74|  3.81k|        phi::boolean parsing_comment{false};
   75|       |
   76|   951k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 947k, False: 3.81k]
  ------------------
   77|   947k|        {
   78|   947k|            const char c{source.at(i)};
   79|       |
   80|   947k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 144k, False: 803k]
  ------------------
   81|   144k|            {
   82|   144k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 34.9k, False: 109k]
  ------------------
   83|  34.9k|                {
   84|       |                    // Skip empty lines
   85|  34.9k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  34.9k|                                        current_line_number, current_column);
   87|       |
   88|  34.9k|                    parsing_comment = false;
   89|  34.9k|                    current_line_number += 1u;
   90|  34.9k|                    current_column = 1u;
   91|  34.9k|                    continue;
   92|  34.9k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   109k|                tokens.emplace_back(ParseToken(
   96|   109k|                        source.substring_view(
   97|   109k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   109k|                                current_token.length()),
   99|   109k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   109k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   109k|                                    current_line_number, current_column);
  103|       |
  104|   109k|                current_token   = phi::string_view{};
  105|   109k|                parsing_comment = false;
  106|   109k|                current_line_number += 1u;
  107|   109k|                current_column = 0u;
  108|   109k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   803k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 5.32k, False: 797k]
  |  Branch (110:34): [True: 61.2k, False: 736k]
  ------------------
  111|  66.5k|            {
  112|  66.5k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 59.1k, False: 7.41k]
  ------------------
  113|  59.1k|                {
  114|  59.1k|                    token_begin = i;
  115|  59.1k|                }
  116|  7.41k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 4.81k, False: 2.59k]
  ------------------
  117|  4.81k|                {
  118|  4.81k|                    tokens.emplace_back(ParseToken(
  119|  4.81k|                            source.substring_view(
  120|  4.81k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  4.81k|                                    current_token.length()),
  122|  4.81k|                            current_line_number, current_column - current_token.length()));
  123|  4.81k|                    token_begin   = i;
  124|  4.81k|                    current_token = phi::string_view{};
  125|  4.81k|                }
  126|       |
  127|  66.5k|                parsing_comment = true;
  128|  66.5k|                current_token   = source.substring_view(
  129|  66.5k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  66.5k|                        current_token.length() + 1u);
  131|  66.5k|            }
  132|   736k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 70.9k, False: 665k]
  ------------------
  133|  70.9k|            {
  134|       |                // simply append the character
  135|  70.9k|                current_token = source.substring_view(
  136|  70.9k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  70.9k|                        current_token.length() + 1u);
  138|  70.9k|            }
  139|   665k|            else
  140|   665k|            {
  141|       |                // Not parsing a comment
  142|   665k|                switch (c)
  143|   665k|                {
  144|  60.6k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 60.6k, False: 604k]
  ------------------
  145|  60.8k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 194, False: 665k]
  ------------------
  146|  60.8k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 665k]
  ------------------
  147|  60.8k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 122, False: 60.7k]
  ------------------
  148|    122|                        {
  149|    122|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    122|                            continue;
  152|    122|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  60.7k|                        tokens.emplace_back(ParseToken(
  156|  60.7k|                                source.substring_view(
  157|  60.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  60.7k|                                        current_token.length()),
  159|  60.7k|                                current_line_number, current_column - current_token.length()));
  160|  60.7k|                        current_token = phi::string_view{};
  161|  60.7k|                        break;
  162|  16.0k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 16.0k, False: 649k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  16.0k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 15.3k, False: 692]
  ------------------
  165|  15.3k|                        {
  166|  15.3k|                            current_token = source.substring_view(
  167|  15.3k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  15.3k|                                    current_token.length() + 1u);
  169|  15.3k|                            tokens.emplace_back(ParseToken(
  170|  15.3k|                                    source.substring_view(
  171|  15.3k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  15.3k|                                                    token_begin),
  173|  15.3k|                                            current_token.length()),
  174|  15.3k|                                    current_line_number,
  175|  15.3k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  15.3k|                            current_token = phi::string_view{};
  178|  15.3k|                        }
  179|    692|                        else
  180|    692|                        {
  181|       |                            // Orphan colon
  182|    692|                            token_begin = i;
  183|       |
  184|    692|                            tokens.emplace_back(
  185|    692|                                    Token::Type::Colon,
  186|    692|                                    source.substring_view(
  187|    692|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|    692|                                                    token_begin),
  189|    692|                                            1u),
  190|    692|                                    current_line_number, current_column);
  191|    692|                        }
  192|  16.0k|                        break;
  193|  37.6k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 37.6k, False: 628k]
  ------------------
  194|  41.6k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 4.00k, False: 661k]
  ------------------
  195|  42.0k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 409, False: 665k]
  ------------------
  196|  42.0k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 37.5k, False: 4.47k]
  ------------------
  197|  37.5k|                        {
  198|  37.5k|                            tokens.emplace_back(ParseToken(
  199|  37.5k|                                    source.substring_view(
  200|  37.5k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  37.5k|                                                    token_begin),
  202|  37.5k|                                            current_token.length()),
  203|  37.5k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  37.5k|                            current_token = phi::string_view{};
  206|  37.5k|                        }
  207|       |
  208|  42.0k|                        Token::Type type;
  209|  42.0k|                        switch (c)
  210|  42.0k|                        {
  211|  37.6k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 37.6k, False: 4.41k]
  ------------------
  212|  37.6k|                                type = Token::Type::Comma;
  213|  37.6k|                                break;
  214|  4.00k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 4.00k, False: 38.0k]
  ------------------
  215|  4.00k|                                type = Token::Type::OpenBracket;
  216|  4.00k|                                break;
  217|    409|                            case ')':
  ------------------
  |  Branch (217:29): [True: 409, False: 41.6k]
  ------------------
  218|    409|                                type = Token::Type::ClosingBracket;
  219|    409|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 42.0k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  42.0k|#endif
  225|  42.0k|                        }
  226|       |
  227|  42.0k|                        token_begin = i;
  228|       |
  229|  42.0k|                        tokens.emplace_back(
  230|  42.0k|                                type,
  231|  42.0k|                                source.substring_view(
  232|  42.0k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  42.0k|                                        1u),
  234|  42.0k|                                current_line_number, current_column);
  235|  42.0k|                        break;
  236|       |
  237|   546k|                    default:
  ------------------
  |  Branch (237:21): [True: 546k, False: 118k]
  ------------------
  238|   546k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 164k, False: 381k]
  ------------------
  239|   164k|                        {
  240|   164k|                            token_begin = i;
  241|   164k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   546k|                        current_token = source.substring_view(
  245|   546k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   546k|                                current_token.length() + 1u);
  247|   665k|                }
  248|   665k|            }
  249|       |
  250|   912k|            current_column += 1u;
  251|   912k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  3.81k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 1.28k, False: 2.53k]
  ------------------
  255|  1.28k|        {
  256|  1.28k|            tokens.emplace_back(
  257|  1.28k|                    ParseToken(source.substring_view(
  258|  1.28k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  1.28k|                                       current_token.length()),
  260|  1.28k|                               current_line_number, current_column - current_token.length()));
  261|  1.28k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  3.81k|        tokens.finalize();
  265|       |
  266|  3.81k|        return tokens;
  267|  3.81k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   228k|    {
   14|   228k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 4.74k, False: 224k]
  |  Branch (14:13): [True: 4.39k, False: 224k]
  |  Branch (14:36): [True: 4.39k, False: 347]
  ------------------
   15|  4.39k|        {
   16|  4.39k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  4.39k|            if (number)
  ------------------
  |  Branch (18:17): [True: 3.50k, False: 893]
  ------------------
   19|  3.50k|            {
   20|  3.50k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  3.50k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  3.50k|            }
   23|       |
   24|    893|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  4.39k|        }
   26|       |
   27|   224k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 2.77k, False: 221k]
  |  Branch (27:13): [True: 63.9k, False: 160k]
  |  Branch (27:36): [True: 61.2k, False: 160k]
  ------------------
   28|  63.9k|        {
   29|  63.9k|            return {Token::Type::Comment, token, line_number, column};
   30|  63.9k|        }
   31|       |
   32|   160k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 8.40k, False: 152k]
  ------------------
   33|  8.40k|        {
   34|  8.40k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  8.40k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  8.40k|        }
   37|       |
   38|   152k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 4.08k, False: 148k]
  ------------------
   39|  4.08k|        {
   40|  4.08k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  4.08k|        }
   42|       |
   43|   148k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 16.2k, False: 131k]
  ------------------
   44|  16.2k|        {
   45|  16.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  16.2k|                    static_cast<phi::uint32_t>(id)};
   47|  16.2k|        }
   48|       |
   49|   131k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 5.50k, False: 126k]
  ------------------
   50|  5.50k|        {
   51|  5.50k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  5.50k|                    static_cast<phi::uint32_t>(id)};
   53|  5.50k|        }
   54|       |
   55|   126k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 68.0k, False: 58.2k]
  ------------------
   56|  68.0k|        {
   57|  68.0k|            return {Token::Type::OpCode, token, line_number, column,
   58|  68.0k|                    static_cast<phi::uint32_t>(opcode)};
   59|  68.0k|        }
   60|       |
   61|  58.2k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|   126k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   59|  3.81k|    {
   60|       |        // Constants
   61|  3.81k|        constexpr std::uint8_t number_of_opcodes =
   62|  3.81k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   63|  3.81k|        constexpr std::uint8_t number_of_int_registers   = 32;
   64|  3.81k|        constexpr std::uint8_t number_of_float_registers = 32;
   65|       |
   66|  3.81k|        std::string ret;
   67|       |
   68|   223k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (68:36): [True: 219k, False: 3.75k]
  ------------------
   69|   219k|        {
   70|   219k|            std::uint8_t current_value = data[index++];
   71|       |
   72|   219k|            switch (current_value)
   73|   219k|            {
   74|       |                // OpCode
   75|  63.8k|                case 0: {
  ------------------
  |  Branch (75:17): [True: 63.8k, False: 155k]
  ------------------
   76|       |                    // Has one more value
   77|  63.8k|                    if (index < size)
  ------------------
  |  Branch (77:25): [True: 63.7k, False: 26]
  ------------------
   78|  63.7k|                    {
   79|  63.7k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   80|       |
   81|  63.7k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   82|       |
   83|  63.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (83:29): [True: 6, False: 63.7k]
  ------------------
   84|      6|                        {
   85|      6|                            return detail::ErrorString;
   86|      6|                        }
   87|  63.7k|                    }
   88|  63.7k|                    break;
   89|  63.8k|                }
   90|       |
   91|       |                // Int Register
   92|  63.7k|                case 1: {
  ------------------
  |  Branch (92:17): [True: 20.9k, False: 198k]
  ------------------
   93|       |                    // Has one more value
   94|  20.9k|                    if (index < size)
  ------------------
  |  Branch (94:25): [True: 20.9k, False: 2]
  ------------------
   95|  20.9k|                    {
   96|  20.9k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   97|       |
   98|  20.9k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   99|  20.9k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (99:29): [True: 1, False: 20.9k]
  ------------------
  100|      1|                        {
  101|      1|                            return detail::ErrorString;
  102|      1|                        }
  103|  20.9k|                    }
  104|  20.9k|                    break;
  105|  20.9k|                }
  106|       |
  107|       |                // Float register
  108|  20.9k|                case 2: {
  ------------------
  |  Branch (108:17): [True: 5.50k, False: 214k]
  ------------------
  109|       |                    // Has one more value
  110|  5.50k|                    if (index < size)
  ------------------
  |  Branch (110:25): [True: 5.50k, False: 1]
  ------------------
  111|  5.50k|                    {
  112|  5.50k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  113|       |
  114|  5.50k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  115|  5.50k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (115:29): [True: 1, False: 5.50k]
  ------------------
  116|      1|                        {
  117|      1|                            return detail::ErrorString;
  118|      1|                        }
  119|  5.50k|                    }
  120|  5.50k|                    break;
  121|  5.50k|                }
  122|       |
  123|       |                // Floating point status register
  124|  5.50k|                case 3: {
  ------------------
  |  Branch (124:17): [True: 4.61k, False: 215k]
  ------------------
  125|  4.61k|                    ret += "FPSR";
  126|  4.61k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (126:25): [True: 2, False: 4.60k]
  ------------------
  127|      2|                    {
  128|      2|                        return detail::ErrorString;
  129|      2|                    }
  130|       |
  131|  4.60k|                    break;
  132|  4.61k|                }
  133|       |
  134|       |                // Immediate integer
  135|  5.67k|                case 4: {
  ------------------
  |  Branch (135:17): [True: 5.67k, False: 214k]
  ------------------
  136|  5.67k|                    ret += "#";
  137|  5.67k|                    [[fallthrough]];
  138|  5.67k|                }
  139|       |
  140|       |                // Integer literal
  141|  32.1k|                case 5: {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 193k]
  ------------------
  142|  32.1k|                    std::size_t size_of_int = std::min(2ul, size - index);
  143|       |
  144|  32.1k|                    if (size_of_int > 0)
  ------------------
  |  Branch (144:25): [True: 32.1k, False: 55]
  ------------------
  145|  32.1k|                    {
  146|  32.1k|                        std::int16_t value = 0;
  147|       |
  148|  96.2k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (148:32): [True: 64.1k, False: 32.1k]
  ------------------
  149|  64.1k|                        {
  150|  64.1k|                            value <<= 8;
  151|  64.1k|                            value &= data[index++];
  152|  64.1k|                        }
  153|       |
  154|  32.1k|                        ret += std::to_string(value);
  155|  32.1k|                    }
  156|  32.1k|                    break;
  157|  5.67k|                }
  158|       |
  159|       |                // Label
  160|  4.31k|                case 6: {
  ------------------
  |  Branch (160:17): [True: 4.31k, False: 215k]
  ------------------
  161|  4.31k|                    std::size_t label_length = std::min(5ul, size - index);
  162|       |
  163|  4.31k|                    if (label_length > 0)
  ------------------
  |  Branch (163:25): [True: 4.31k, False: 3]
  ------------------
  164|  4.31k|                    {
  165|  4.31k|                        std::string label_name = "lbl_";
  166|       |
  167|  25.6k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (167:32): [True: 21.3k, False: 4.31k]
  ------------------
  168|  21.3k|                        {
  169|  21.3k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  170|       |
  171|  21.3k|                            label_name += c;
  172|  21.3k|                        }
  173|       |
  174|       |                        // Add 1 in 10 chance to add a colon
  175|  4.31k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (175:29): [True: 4.24k, False: 70]
  |  Branch (175:45): [True: 3.42k, False: 819]
  ------------------
  176|  3.42k|                        {
  177|  3.42k|                            label_name += ':';
  178|  3.42k|                            ret += label_name;
  179|  3.42k|                        }
  180|    889|                        else
  181|    889|                        {
  182|    889|                            ret += label_name;
  183|    889|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (183:33): [True: 1, False: 888]
  ------------------
  184|      1|                            {
  185|      1|                                return detail::ErrorString;
  186|      1|                            }
  187|    889|                        }
  188|  4.31k|                    }
  189|  4.31k|                    break;
  190|  4.31k|                }
  191|       |
  192|       |                // Newline
  193|  26.2k|                case 7: {
  ------------------
  |  Branch (193:17): [True: 26.2k, False: 193k]
  ------------------
  194|  26.2k|                    ret += '\n';
  195|  26.2k|                    break;
  196|  4.31k|                }
  197|       |
  198|       |                // Comment
  199|  62.0k|                case 8: {
  ------------------
  |  Branch (199:17): [True: 62.0k, False: 157k]
  ------------------
  200|  62.0k|                    std::size_t comment_length = std::min(5ul, size - index);
  201|       |
  202|  62.0k|                    if (comment_length > 0)
  ------------------
  |  Branch (202:25): [True: 62.0k, False: 18]
  ------------------
  203|  62.0k|                    {
  204|  62.0k|                        std::string comment = "; ";
  205|       |
  206|   370k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (206:32): [True: 307k, False: 62.0k]
  ------------------
  207|   307k|                        {
  208|   307k|                            comment += static_cast<char>(data[index++]);
  209|   307k|                        }
  210|       |
  211|  62.0k|                        ret += comment + '\n';
  212|  62.0k|                    }
  213|  62.0k|                    break;
  214|  4.31k|                }
  215|       |
  216|       |                // Ignore
  217|     49|                default:
  ------------------
  |  Branch (217:17): [True: 49, False: 219k]
  ------------------
  218|     49|                    return detail::ErrorString;
  219|   219k|            }
  220|   219k|        }
  221|       |
  222|  3.75k|        return ret;
  223|  3.81k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   24|  95.7k|        {
   25|  95.7k|            if (index < size)
  ------------------
  |  Branch (25:17): [True: 94.6k, False: 1.12k]
  ------------------
   26|  94.6k|            {
   27|  94.6k|                std::uint8_t val = data[index++];
   28|  94.6k|                if (val == 0)
  ------------------
  |  Branch (28:21): [True: 60.5k, False: 34.0k]
  ------------------
   29|  60.5k|                {
   30|  60.5k|                    text += ' ';
   31|  60.5k|                }
   32|  34.0k|                else if (val == 1)
  ------------------
  |  Branch (32:26): [True: 34.0k, False: 11]
  ------------------
   33|  34.0k|                {
   34|  34.0k|                    text += ',';
   35|  34.0k|                }
   36|     11|                else
   37|     11|                {
   38|     11|                    return false;
   39|     11|                }
   40|  94.6k|            }
   41|       |
   42|  95.7k|            return true;
   43|  95.7k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   48|  21.3k|        {
   49|  21.3k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (49:17): [True: 16.1k, False: 5.20k]
  ------------------
   50|  16.1k|            {
   51|  16.1k|                return '_';
   52|  16.1k|            }
   53|       |
   54|  5.20k|            return c;
   55|  21.3k|        }

LLVMFuzzerTestOneInput:
   11|  3.81k|{
   12|  3.81k|    static dlxemu::Emulator emu;
   13|       |
   14|  3.81k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|  3.81k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  3.81k|    editor.SetText(source);
   20|  3.81k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  3.81k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  3.81k|    editor.ColorizeInternal();
   25|       |
   26|  3.81k|    return 0;
   27|  3.81k|}


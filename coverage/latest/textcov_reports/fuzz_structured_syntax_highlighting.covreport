_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  65.1k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  13.0k|    {
  240|  13.0k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 9.37k, False: 3.65k]
  ------------------
  241|  9.37k|        {
  242|  9.37k|            return m_Line < other.m_Line;
  243|  9.37k|        }
  244|       |
  245|  3.65k|        return m_Column <= other.m_Column;
  246|  13.0k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|  9.37M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  13.0k|    {
  349|  13.0k|        m_ErrorMarkers.clear();
  350|  13.0k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  13.0k|    {
  414|  13.0k|        m_Breakpoints.clear();
  415|  13.0k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  13.0k|    {
  494|  13.0k|        m_Lines.clear();
  495|  13.0k|        ResetState();
  496|  13.0k|        m_Lines.emplace_back(Line());
  497|       |
  498|  13.0k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 11.9M, False: 13.0k]
  ------------------
  499|  11.9M|        {
  500|  11.9M|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 35.7k, False: 11.8M]
  |  Branch (500:17): [True: 857k, False: 11.0M]
  ------------------
  501|  11.9M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 2.54M, False: 9.35M]
  |  Branch (501:48): [True: 843k, False: 1.70M]
  |  Branch (501:69): [True: 821k, False: 22.0k]
  ------------------
  502|   857k|            {
  503|       |                // ignore the carriage return character and control characters
  504|   857k|            }
  505|  11.0M|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 1.70M, False: 9.37M]
  ------------------
  506|  1.70M|            {
  507|  1.70M|                m_Lines.emplace_back(Line());
  508|  1.70M|            }
  509|  9.37M|            else
  510|  9.37M|            {
  511|  9.37M|                m_Lines.back().emplace_back(
  512|  9.37M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|  9.37M|            }
  514|  11.9M|        }
  515|       |
  516|  13.0k|        m_TextChanged = true;
  517|  13.0k|        m_ScrollToTop = true;
  518|       |
  519|  13.0k|        m_UndoBuffer.clear();
  520|  13.0k|        m_UndoIndex = 0u;
  521|       |
  522|  13.0k|        Colorize();
  523|  13.0k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  13.0k|    {
  527|  13.0k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  13.0k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  13.0k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  13.0k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  13.0k|        const phi::u32 to_line =
 1724|  13.0k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 13.0k, False: 0]
  ------------------
 1725|  13.0k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  13.0k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  13.0k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  13.0k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  13.0k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  13.0k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  13.0k|    {
 1839|  13.0k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  13.0k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  13.0k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  13.0k|        std::string result;
 1844|       |
 1845|  13.0k|        phi::u32   lstart = start.m_Line;
 1846|  13.0k|        phi::u32   lend   = end.m_Line;
 1847|  13.0k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  13.0k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  13.0k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  13.0k|        phi::usize size   = 0u;
 1851|       |
 1852|  1.72M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 1.71M, False: 13.0k]
  ------------------
 1853|  1.71M|        {
 1854|  1.71M|            PHI_ASSERT(i < m_Lines.size());
 1855|  1.71M|            size += m_Lines[i.unsafe()].size();
 1856|  1.71M|        }
 1857|       |
 1858|  13.0k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|  11.0M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 4.35M, False: 6.73M]
  |  Branch (1860:16): [True: 11.0M, False: 13.0k]
  |  Branch (1860:33): [True: 6.71M, False: 13.0k]
  ------------------
 1861|  11.0M|        {
 1862|  11.0M|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|  11.0M|            const Line& line = m_Lines[lstart.unsafe()];
 1865|  11.0M|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 9.37M, False: 1.70M]
  ------------------
 1866|  9.37M|            {
 1867|  9.37M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|  9.37M|                istart++;
 1869|  9.37M|            }
 1870|  1.70M|            else
 1871|  1.70M|            {
 1872|  1.70M|                istart = 0u;
 1873|  1.70M|                ++lstart;
 1874|       |
 1875|  1.70M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 1.70M, False: 0]
  ------------------
 1876|  1.70M|                {
 1877|  1.70M|                    result += '\n';
 1878|  1.70M|                }
 1879|  1.70M|            }
 1880|  11.0M|        }
 1881|       |
 1882|  13.0k|        return result;
 1883|  13.0k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  26.0k|    {
 2422|  26.0k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  26.0k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  26.0k|        phi::u32    index = 0u;
 2426|  2.61M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 2.59M, False: 15.8k]
  |  Branch (2426:35): [True: 2.58M, False: 26.0k]
  |  Branch (2426:58): [True: 2.58M, False: 10.1k]
  ------------------
 2427|  2.58M|        {
 2428|  2.58M|            PHI_ASSERT(index < line.size());
 2429|  2.58M|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|  2.58M|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 2.58M]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|  2.58M|            else
 2436|  2.58M|            {
 2437|  2.58M|                ++column;
 2438|  2.58M|            }
 2439|       |
 2440|  2.58M|            index += UTF8CharLength(character);
 2441|  2.58M|        }
 2442|       |
 2443|  26.0k|        return index;
 2444|  26.0k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  13.0k|    {
 2494|  13.0k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 13.0k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  13.0k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  13.0k|        phi::u32    col  = 0u;
 2501|       |
 2502|  2.59M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 2.58M, False: 13.0k]
  ------------------
 2503|  2.58M|        {
 2504|  2.58M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|  2.58M|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 2.58M]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|  2.58M|            else
 2510|  2.58M|            {
 2511|  2.58M|                col++;
 2512|  2.58M|            }
 2513|       |
 2514|  2.58M|            i += UTF8CharLength(character);
 2515|  2.58M|        }
 2516|       |
 2517|  13.0k|        return col;
 2518|  13.0k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  13.0k|    {
 2522|  13.0k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  13.0k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  13.0k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|  4.81M|    {
 3661|  4.81M|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|  4.81M|        switch (token.GetType())
 3665|  4.81M|        {
 3666|   730k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 730k, False: 4.08M]
  ------------------
 3667|   730k|                palette_index = PaletteIndex::Comment;
 3668|   730k|                break;
 3669|  68.9k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 68.9k, False: 4.74M]
  ------------------
 3670|   127k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 58.8k, False: 4.75M]
  ------------------
 3671|   127k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|   127k|                break;
 3673|   996k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 996k, False: 3.82M]
  ------------------
 3674|   996k|                palette_index = PaletteIndex::OpCode;
 3675|   996k|                break;
 3676|  63.0k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 63.0k, False: 4.75M]
  ------------------
 3677|   248k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 185k, False: 4.63M]
  ------------------
 3678|   318k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 69.4k, False: 4.74M]
  ------------------
 3679|   318k|                palette_index = PaletteIndex::Register;
 3680|   318k|                break;
 3681|  1.70M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 1.70M, False: 3.11M]
  ------------------
 3682|  1.70M|                return;
 3683|   943k|            default:
  ------------------
  |  Branch (3683:13): [True: 943k, False: 3.87M]
  ------------------
 3684|   943k|                break;
 3685|  4.81M|        }
 3686|       |
 3687|  3.11M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|  3.11M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|  3.11M|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|  11.5M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 8.44M, False: 3.11M]
  ------------------
 3692|  8.44M|        {
 3693|  8.44M|            PHI_ASSERT(index < line.size());
 3694|  8.44M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|  8.44M|        }
 3696|  3.11M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  13.0k|    {
 3700|  13.0k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  13.0k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 4.81M, False: 13.0k]
  ------------------
 3703|  4.81M|        {
 3704|  4.81M|            ColorizeToken(token);
 3705|  4.81M|        }
 3706|  13.0k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  13.0k|    {
 3710|  13.0k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  13.0k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  13.0k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  13.0k|        ClearBreakPoints();
 3716|  13.0k|        ClearErrorMarkers();
 3717|  13.0k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|  2.58M|{
  135|  2.58M|    return UTF8CharLength(static_cast<char>(characater));
  136|  2.58M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|  5.16M|{
  105|  5.16M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 5.16M]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|  5.16M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 5.16M]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|  5.16M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 5.16M]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|  5.16M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 5.16M]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|  5.16M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 5.16M]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|  5.16M|    return 1_u8;
  131|  5.16M|}

_ZN6dlxemu8EmulatorC2Ev:
   42|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  173|  13.0k|    {
  174|  13.0k|        return m_DLXProgram;
  175|  13.0k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  178|  13.0k|    {
  179|  13.0k|        m_DLXProgram = dlx::Parser::Parse(source);
  180|       |
  181|  13.0k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (181:13): [True: 398, False: 12.6k]
  ------------------
  182|    398|        {
  183|    398|            m_Processor.LoadProgram(m_DLXProgram);
  184|    398|        }
  185|  13.0k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  198|  13.0k|    {
  199|  13.0k|        return m_CodeEditor;
  200|  13.0k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  107|      1|    {
  108|      1|        if (imgui_initialized)
  ------------------
  |  Branch (108:13): [True: 0, False: 1]
  ------------------
  109|      0|        {
  110|      0|            ShutdownImGui();
  111|      0|        }
  112|       |
  113|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (113:13): [True: 0, False: 1]
  ------------------
  114|      0|        {
  115|      0|            glfwDestroyWindow(m_Window);
  116|      0|        }
  117|       |
  118|      1|        if (glfw_initialized)
  ------------------
  |  Branch (118:13): [True: 0, False: 1]
  ------------------
  119|      0|        {
  120|      0|            glfwTerminate();
  121|      0|        }
  122|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|  1.28M|        {
  169|  1.28M|            PHI_ASSERT(index < 3u);
  170|       |
  171|  1.28M|            switch (index.unsafe())
  172|  1.28M|            {
  173|   558k|                case 0:
  ------------------
  |  Branch (173:17): [True: 558k, False: 729k]
  ------------------
  174|   558k|                    return m_Arg1Type;
  175|       |
  176|   378k|                case 1:
  ------------------
  |  Branch (176:17): [True: 378k, False: 908k]
  ------------------
  177|   378k|                    return m_Arg2Type;
  178|       |
  179|   350k|                case 2:
  ------------------
  |  Branch (179:17): [True: 350k, False: 936k]
  ------------------
  180|   350k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 1.28M]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|  1.28M|#endif
  187|  1.28M|            }
  188|  1.28M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   333k|        {
  195|   333k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   333k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 333k, False: 183]
  ------------------
  199|   333k|            {
  200|   333k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   333k|            }
  202|   333k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 250k, False: 82.9k]
  ------------------
  203|   250k|            {
  204|   250k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   250k|            }
  206|   333k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 169k, False: 163k]
  ------------------
  207|   169k|            {
  208|   169k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   169k|            }
  210|       |
  211|   333k|            return number_of_argument_required;
  212|   333k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   333k|        {
  221|   333k|            return m_Executor;
  222|   333k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   156k|    {
   38|   156k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   156k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   156k|                                         static_cast<underlying_t>(rhs));
   42|   156k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   156k|    {
   55|   156k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   156k|        return static_cast<underlying_t>(type & test) != 0;
   58|   156k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  204|   884k|    {
  205|   884k|        switch (value)
  206|   884k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   163k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|   163k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 163k, False: 721k]
  |  |  |  |  ------------------
  |  |  |  |  209|   163k|        return #name;
  |  |  ------------------
  |  |   16|   163k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  16.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.5k, False: 868k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.5k|        return #name;
  |  |  ------------------
  |  |   17|  33.6k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  33.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 33.6k, False: 851k]
  |  |  |  |  ------------------
  |  |  |  |  209|  33.6k|        return #name;
  |  |  ------------------
  |  |   18|  41.8k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  41.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 41.8k, False: 842k]
  |  |  |  |  ------------------
  |  |  |  |  209|  41.8k|        return #name;
  |  |  ------------------
  |  |   19|  41.8k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  13.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.6k, False: 870k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.6k|        return #name;
  |  |  ------------------
  |  |   20|  15.0k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  15.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.0k, False: 869k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.0k|        return #name;
  |  |  ------------------
  |  |   21|  15.0k|                                                                                                   \
  |  |   22|  15.0k|    /* Sub */                                                                                      \
  |  |   23|  15.0k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.30k, False: 877k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.30k|        return #name;
  |  |  ------------------
  |  |   24|  21.5k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  21.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 21.5k, False: 863k]
  |  |  |  |  ------------------
  |  |  |  |  209|  21.5k|        return #name;
  |  |  ------------------
  |  |   25|  21.5k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.63k, False: 881k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.63k|        return #name;
  |  |  ------------------
  |  |   26|  10.5k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.5k, False: 874k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.5k|        return #name;
  |  |  ------------------
  |  |   27|  10.5k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.34k, False: 878k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.34k|        return #name;
  |  |  ------------------
  |  |   28|  6.34k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    128|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 128, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    128|        return #name;
  |  |  ------------------
  |  |   29|    128|                                                                                                   \
  |  |   30|    128|    /* Multiplication */                                                                           \
  |  |   31|    128|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |   32|    134|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    134|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 134, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    134|        return #name;
  |  |  ------------------
  |  |   33|    202|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 202, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    202|        return #name;
  |  |  ------------------
  |  |   34|  16.8k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  16.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.8k, False: 867k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.8k|        return #name;
  |  |  ------------------
  |  |   35|  19.3k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  19.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 19.3k, False: 865k]
  |  |  |  |  ------------------
  |  |  |  |  209|  19.3k|        return #name;
  |  |  ------------------
  |  |   36|  19.3k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    215|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 215, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    215|        return #name;
  |  |  ------------------
  |  |   37|    215|                                                                                                   \
  |  |   38|    215|    /* Division */                                                                                 \
  |  |   39|  12.3k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  12.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.3k, False: 872k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.3k|        return #name;
  |  |  ------------------
  |  |   40|  12.3k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.05k, False: 882k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.05k|        return #name;
  |  |  ------------------
  |  |   41|  6.30k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.30k, False: 878k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.30k|        return #name;
  |  |  ------------------
  |  |   42|  19.5k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  19.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 19.5k, False: 865k]
  |  |  |  |  ------------------
  |  |  |  |  209|  19.5k|        return #name;
  |  |  ------------------
  |  |   43|  19.5k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |   44|  9.00k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.00k, False: 875k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.00k|        return #name;
  |  |  ------------------
  |  |   45|  9.00k|                                                                                                   \
  |  |   46|  9.00k|    /* Shift left (logical) */                                                                     \
  |  |   47|  9.00k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.16k, False: 880k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.16k|        return #name;
  |  |  ------------------
  |  |   48|  4.98k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.98k, False: 879k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.98k|        return #name;
  |  |  ------------------
  |  |   49|  4.98k|                                                                                                   \
  |  |   50|  4.98k|    /* Shift right (logical) */                                                                    \
  |  |   51|  4.98k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    116|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 116, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    116|        return #name;
  |  |  ------------------
  |  |   52|    263|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    263|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 263, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    263|        return #name;
  |  |  ------------------
  |  |   53|    263|                                                                                                   \
  |  |   54|    263|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  22.2k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  22.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.2k, False: 862k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.2k|        return #name;
  |  |  ------------------
  |  |   56|  22.2k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.00k, False: 882k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.00k|        return #name;
  |  |  ------------------
  |  |   57|  2.00k|                                                                                                   \
  |  |   58|  2.00k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  14.1k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  14.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.1k, False: 870k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.1k|        return #name;
  |  |  ------------------
  |  |   60|  14.1k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    435|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 435, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    435|        return #name;
  |  |  ------------------
  |  |   61|    435|                                                                                                   \
  |  |   62|    435|    /* Logic */                                                                                    \
  |  |   63|    435|                                                                                                   \
  |  |   64|    435|    /* And */                                                                                      \
  |  |   65|  6.03k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  6.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.03k, False: 878k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.03k|        return #name;
  |  |  ------------------
  |  |   66|  6.03k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    830|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 830, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|    830|        return #name;
  |  |  ------------------
  |  |   67|    830|                                                                                                   \
  |  |   68|    830|    /* Or */                                                                                       \
  |  |   69|  1.86k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.86k, False: 882k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.86k|        return #name;
  |  |  ------------------
  |  |   70|  1.86k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |   71|     85|                                                                                                   \
  |  |   72|     85|    /* XOR */                                                                                      \
  |  |   73|  3.39k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  3.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.39k, False: 881k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.39k|        return #name;
  |  |  ------------------
  |  |   74|  3.39k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|    159|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    159|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 159, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    159|        return #name;
  |  |  ------------------
  |  |   80|  3.41k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.41k, False: 881k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.41k|        return #name;
  |  |  ------------------
  |  |   81|  3.41k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |   82|  20.0k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  20.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.0k, False: 864k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.0k|        return #name;
  |  |  ------------------
  |  |   83|  20.0k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    246|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 246, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    246|        return #name;
  |  |  ------------------
  |  |   84|    353|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    353|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 353, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    353|        return #name;
  |  |  ------------------
  |  |   85|    353|                                                                                                   \
  |  |   86|    353|    /* Greater than */                                                                             \
  |  |   87|    395|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    395|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 395, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    395|        return #name;
  |  |  ------------------
  |  |   88|  3.44k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.44k, False: 881k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.44k|        return #name;
  |  |  ------------------
  |  |   89|  3.44k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |   90|  10.3k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.3k, False: 874k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.3k|        return #name;
  |  |  ------------------
  |  |   91|  12.9k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  12.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.9k, False: 871k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.9k|        return #name;
  |  |  ------------------
  |  |   92|  12.9k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.38k, False: 880k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.38k|        return #name;
  |  |  ------------------
  |  |   93|  4.38k|                                                                                                   \
  |  |   94|  4.38k|    /* Less than or equal */                                                                       \
  |  |   95|  13.6k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.6k, False: 871k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.6k|        return #name;
  |  |  ------------------
  |  |   96|  22.3k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  22.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 22.3k, False: 862k]
  |  |  |  |  ------------------
  |  |  |  |  209|  22.3k|        return #name;
  |  |  ------------------
  |  |   97|  22.3k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.40k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.40k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.40k|        return #name;
  |  |  ------------------
  |  |   98|  1.40k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    807|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 807, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|    807|        return #name;
  |  |  ------------------
  |  |   99|  4.36k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.36k, False: 880k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.36k|        return #name;
  |  |  ------------------
  |  |  100|  4.36k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    969|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 969, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|    969|        return #name;
  |  |  ------------------
  |  |  101|    969|                                                                                                   \
  |  |  102|    969|    /* Greater than or equal */                                                                    \
  |  |  103|    969|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    282|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 282, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    282|        return #name;
  |  |  ------------------
  |  |  104|    303|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    303|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 303, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    303|        return #name;
  |  |  ------------------
  |  |  105|  15.3k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  15.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.3k, False: 869k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.3k|        return #name;
  |  |  ------------------
  |  |  106|  15.3k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  15.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.3k, False: 869k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.3k|        return #name;
  |  |  ------------------
  |  |  107|  15.3k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 87, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     87|        return #name;
  |  |  ------------------
  |  |  108|  25.0k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  25.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 25.0k, False: 859k]
  |  |  |  |  ------------------
  |  |  |  |  209|  25.0k|        return #name;
  |  |  ------------------
  |  |  109|  25.0k|                                                                                                   \
  |  |  110|  25.0k|    /* Equal */                                                                                    \
  |  |  111|  25.0k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    187|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 187, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    187|        return #name;
  |  |  ------------------
  |  |  112|  3.51k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.51k, False: 881k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.51k|        return #name;
  |  |  ------------------
  |  |  113|  3.51k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.12k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.12k|        return #name;
  |  |  ------------------
  |  |  114|  25.4k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  25.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 25.4k, False: 859k]
  |  |  |  |  ------------------
  |  |  |  |  209|  25.4k|        return #name;
  |  |  ------------------
  |  |  115|  25.4k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    366|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 366, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    366|        return #name;
  |  |  ------------------
  |  |  116|    366|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  117|     67|                                                                                                   \
  |  |  118|     67|    /* Not equal */                                                                                \
  |  |  119|    210|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 210, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    210|        return #name;
  |  |  ------------------
  |  |  120|  1.14k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.14k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.14k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.14k|        return #name;
  |  |  ------------------
  |  |  121|  11.8k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  11.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.8k, False: 872k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.8k|        return #name;
  |  |  ------------------
  |  |  122|  11.8k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  123|     67|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  124|     76|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 76, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     76|        return #name;
  |  |  ------------------
  |  |  125|     76|                                                                                                   \
  |  |  126|     76|    /* Conditional branching */                                                                    \
  |  |  127|     76|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  128|  9.69k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  9.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.69k, False: 874k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.69k|        return #name;
  |  |  ------------------
  |  |  129|  53.0k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  53.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 53.0k, False: 831k]
  |  |  |  |  ------------------
  |  |  |  |  209|  53.0k|        return #name;
  |  |  ------------------
  |  |  130|  53.0k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  25.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 25.6k, False: 859k]
  |  |  |  |  ------------------
  |  |  |  |  209|  25.6k|        return #name;
  |  |  ------------------
  |  |  131|  25.6k|                                                                                                   \
  |  |  132|  25.6k|    /* Unconditional branching */                                                                  \
  |  |  133|  25.6k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  134|    101|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  135|     82|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 82, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     82|        return #name;
  |  |  ------------------
  |  |  136|     99|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  137|     99|                                                                                                   \
  |  |  138|     99|    /* Loading data */                                                                             \
  |  |  139|     99|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |  140|  7.06k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  7.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.06k, False: 877k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.06k|        return #name;
  |  |  ------------------
  |  |  141|  7.06k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    119|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 119, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    119|        return #name;
  |  |  ------------------
  |  |  142|  12.1k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  12.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.1k, False: 872k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.1k|        return #name;
  |  |  ------------------
  |  |  143|  12.1k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |  144|    212|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    212|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 212, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    212|        return #name;
  |  |  ------------------
  |  |  145|    212|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  147|  11.2k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  11.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.2k, False: 873k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.2k|        return #name;
  |  |  ------------------
  |  |  148|  11.2k|                                                                                                   \
  |  |  149|  11.2k|    /* Storing data */                                                                             \
  |  |  150|  11.2k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    173|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 173, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    173|        return #name;
  |  |  ------------------
  |  |  151|  7.43k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.43k, False: 877k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.43k|        return #name;
  |  |  ------------------
  |  |  152|  25.0k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  25.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 25.0k, False: 859k]
  |  |  |  |  ------------------
  |  |  |  |  209|  25.0k|        return #name;
  |  |  ------------------
  |  |  153|  25.0k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  12.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.9k, False: 871k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.9k|        return #name;
  |  |  ------------------
  |  |  154|  12.9k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  155|    166|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    166|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 166, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    166|        return #name;
  |  |  ------------------
  |  |  156|    166|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    124|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 124, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    124|        return #name;
  |  |  ------------------
  |  |  157|    962|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    962|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 962, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|    962|        return #name;
  |  |  ------------------
  |  |  158|    962|                                                                                                   \
  |  |  159|    962|    /* Moving data */                                                                              \
  |  |  160|  18.2k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  18.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 18.2k, False: 866k]
  |  |  |  |  ------------------
  |  |  |  |  209|  18.2k|        return #name;
  |  |  ------------------
  |  |  161|  18.2k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    270|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 270, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    270|        return #name;
  |  |  ------------------
  |  |  162|    270|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    121|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 121, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    121|        return #name;
  |  |  ------------------
  |  |  163|    121|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|    770|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    770|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 770, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|    770|        return #name;
  |  |  ------------------
  |  |  167|  1.77k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.77k, False: 882k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.77k|        return #name;
  |  |  ------------------
  |  |  168|  1.77k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.22k, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.22k|        return #name;
  |  |  ------------------
  |  |  169|  1.22k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    830|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 830, False: 883k]
  |  |  |  |  ------------------
  |  |  |  |  209|    830|        return #name;
  |  |  ------------------
  |  |  170|    830|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    133|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 133, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    133|        return #name;
  |  |  ------------------
  |  |  171|  11.8k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|  11.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.8k, False: 872k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.8k|        return #name;
  |  |  ------------------
  |  |  172|  11.8k|                                                                                                   \
  |  |  173|  11.8k|    /* Other */                                                                                    \
  |  |  174|  11.8k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    509|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 509, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|    509|        return #name;
  |  |  ------------------
  |  |  175|    509|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 884k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  176|  1.75k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  1.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.75k, False: 882k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.75k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 884k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   884k|        }
  218|   884k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|   226k|    {
   31|   226k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 24.5k, False: 202k]
  ------------------
   32|  24.5k|        {
   33|  24.5k|            return true;
   34|  24.5k|        }
   35|       |
   36|   202k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 202k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|   202k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.81k, False: 200k]
  ------------------
   42|  1.81k|        {
   43|  1.81k|            return true;
   44|  1.81k|        }
   45|       |
   46|   200k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 200k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|   200k|        return false;
   52|   200k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|   200k|    {
   56|   200k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 200k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|   200k|        const char first_char = token.at(0u);
   62|       |
   63|   200k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 83.3k, False: 117k]
  ------------------
   64|  83.3k|        {
   65|  83.3k|            return phi::is_alpha(first_char);
   66|  83.3k|        }
   67|       |
   68|   117k|        phi::boolean just_under_scores = (first_char == '_');
   69|   117k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 22.1k, False: 95.0k]
  |  Branch (69:13): [True: 21.9k, False: 95.2k]
  |  Branch (69:43): [True: 21.9k, False: 162]
  ------------------
   70|  21.9k|        {
   71|  21.9k|            return false;
   72|  21.9k|        }
   73|       |
   74|   345k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 265k, False: 79.2k]
  ------------------
   75|   265k|        {
   76|   265k|            const char c{token.at(index)};
   77|       |
   78|   265k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 146k, False: 119k]
  ------------------
   79|   146k|            {
   80|   146k|                just_under_scores = false;
   81|   146k|            }
   82|   119k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 103k, False: 15.9k]
  ------------------
   83|   103k|            {
   84|   103k|                continue;
   85|   103k|            }
   86|  15.9k|            else
   87|  15.9k|            {
   88|  15.9k|                return false;
   89|  15.9k|            }
   90|   265k|        }
   91|       |
   92|  79.2k|        return !just_under_scores;
   93|  95.2k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  1.97M|    {
  100|  1.97M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 1.97M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  1.97M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 191k, False: 1.78M]
  ------------------
  106|   191k|        {
  107|   191k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 89.8k, False: 101k]
  ------------------
  108|  89.8k|            {
  109|  89.8k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  89.8k|            }
  111|       |
  112|   101k|            return {};
  113|   191k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  1.78M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 17.6k, False: 1.76M]
  ------------------
  117|  17.6k|        {
  118|  17.6k|            return {};
  119|  17.6k|        }
  120|       |
  121|  1.76M|        std::int32_t number{0};
  122|  1.76M|        phi::boolean is_negative{false};
  123|  1.76M|        phi::boolean starts_with_zero{false};
  124|  1.76M|        phi::boolean parsing_binary{false};
  125|  1.76M|        phi::boolean parsing_octal{false};
  126|  1.76M|        phi::boolean parsing_hexadecimal{false};
  127|  1.76M|        phi::boolean parsed_something{false};
  128|  1.76M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  1.92M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 1.90M, False: 23.6k]
  ------------------
  133|  1.90M|        {
  134|  1.90M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  1.90M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 1.76M, False: 138k]
  ------------------
  138|  1.76M|            {
  139|  1.76M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 1.52k, False: 1.76M]
  ------------------
  140|  1.52k|                {
  141|  1.52k|                    continue;
  142|  1.52k|                }
  143|       |
  144|  1.76M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 31.0k, False: 1.73M]
  ------------------
  145|  31.0k|                {
  146|  31.0k|                    is_negative = true;
  147|  31.0k|                    continue;
  148|  31.0k|                }
  149|       |
  150|  1.73M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 73.2k, False: 1.65M]
  ------------------
  151|  73.2k|                {
  152|  73.2k|                    starts_with_zero = true;
  153|  73.2k|                    continue;
  154|  73.2k|                }
  155|       |
  156|  1.65M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 241, False: 1.65M]
  ------------------
  157|    241|                {
  158|    241|                    return {};
  159|    241|                }
  160|  1.65M|            }
  161|       |
  162|       |            // Second character
  163|  1.79M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 108k, False: 1.68M]
  ------------------
  164|   108k|            {
  165|   108k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 73.2k, False: 35.2k]
  ------------------
  166|  73.2k|                {
  167|       |                    // Binary
  168|  73.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 1.43k, False: 71.8k]
  |  Branch (168:37): [True: 3.78k, False: 68.0k]
  ------------------
  169|  5.21k|                    {
  170|  5.21k|                        parsing_binary = true;
  171|  5.21k|                        continue;
  172|  5.21k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  68.0k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 13.2k, False: 54.7k]
  |  Branch (175:37): [True: 1.43k, False: 53.3k]
  ------------------
  176|  14.6k|                    {
  177|  14.6k|                        parsing_hexadecimal = true;
  178|  14.6k|                        continue;
  179|  14.6k|                    }
  180|       |
  181|       |                    // Octal
  182|  53.3k|                    parsing_octal = true;
  183|  53.3k|                }
  184|   108k|            }
  185|       |
  186|       |            // Handle seperators
  187|  1.77M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 142, False: 1.77M]
  ------------------
  188|    142|            {
  189|    142|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 69, False: 73]
  ------------------
  190|     69|                {
  191|     69|                    return {};
  192|     69|                }
  193|       |
  194|     73|                parsed_separator = true;
  195|     73|                continue;
  196|    142|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  1.77M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 31.1k, False: 1.74M]
  |  Branch (199:32): [True: 0, False: 31.1k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  1.77M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 1.74M, False: 31.1k]
  |  Branch (204:17): [True: 0, False: 1.77M]
  |  Branch (204:33): [True: 0, False: 1.74M]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  1.77M|            parsed_separator = false;
  211|  1.77M|            parsed_something = true;
  212|       |
  213|  1.77M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 3.93k, False: 1.77M]
  ------------------
  214|  3.93k|            {
  215|  3.93k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 3.80k, False: 135]
  ------------------
  216|  3.80k|                {
  217|  3.80k|                    return {};
  218|  3.80k|                }
  219|       |
  220|    135|                number <<= 1;
  221|    135|                number |= (c - '0');
  222|    135|            }
  223|  1.77M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 62.4k, False: 1.71M]
  ------------------
  224|  62.4k|            {
  225|  62.4k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 47.5k, False: 14.8k]
  ------------------
  226|  47.5k|                {
  227|  47.5k|                    return {};
  228|  47.5k|                }
  229|       |
  230|  14.8k|                number <<= 3;
  231|  14.8k|                number |= (c - '0');
  232|  14.8k|            }
  233|  1.71M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 14.9k, False: 1.69M]
  ------------------
  234|  14.9k|            {
  235|  14.9k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 1.51k, False: 13.4k]
  ------------------
  236|  1.51k|                {
  237|  1.51k|                    return {};
  238|  1.51k|                }
  239|       |
  240|  13.4k|                number <<= 4;
  241|  13.4k|                number |= phi::hex_digit_value(c).unsafe();
  242|  13.4k|            }
  243|  1.69M|            else
  244|  1.69M|            {
  245|  1.69M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 1.66M, False: 34.4k]
  ------------------
  246|  1.66M|                {
  247|  1.66M|                    return {};
  248|  1.66M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  34.4k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 32.0k, False: 2.36k]
  |  Branch (251:36): [True: 26.8k, False: 5.23k]
  ------------------
  252|  26.8k|                {
  253|  26.8k|                    return {};
  254|  26.8k|                }
  255|       |
  256|  7.60k|                number *= 10;
  257|  7.60k|                number += (c - '0');
  258|  7.60k|            }
  259|  1.77M|        }
  260|       |
  261|  23.6k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 22.2k, False: 1.41k]
  ------------------
  262|  22.2k|        {
  263|       |            // Check for over/underflow
  264|  22.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 2.59k, False: 19.6k]
  |  Branch (264:32): [True: 0, False: 2.59k]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  22.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 19.6k, False: 2.59k]
  |  Branch (269:17): [True: 0, False: 22.2k]
  |  Branch (269:33): [True: 0, False: 19.6k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  22.2k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 2.59k, False: 19.6k]
  ------------------
  276|  2.59k|            {
  277|  2.59k|                return static_cast<std::int16_t>(-number);
  278|  2.59k|            }
  279|       |
  280|  19.6k|            return static_cast<std::int16_t>(number);
  281|  22.2k|        }
  282|       |
  283|  1.41k|        return {};
  284|  23.6k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   95|   197k|    {
   96|   197k|        switch (value)
   97|   197k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  38.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  38.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 38.7k, False: 158k]
  |  |  |  |  ------------------
  |  |  |  |  100|  38.7k|        return #name;
  |  |  ------------------
  |  |   14|  65.0k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  65.0k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 65.0k, False: 132k]
  |  |  |  |  ------------------
  |  |  |  |  100|  65.0k|        return #name;
  |  |  ------------------
  |  |   15|  65.0k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    307|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 307, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    307|        return #name;
  |  |  ------------------
  |  |   16|  6.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.01k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.01k, False: 191k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.01k|        return #name;
  |  |  ------------------
  |  |   17|  6.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    127|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 127, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    127|        return #name;
  |  |  ------------------
  |  |   18|    240|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    240|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 240, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    240|        return #name;
  |  |  ------------------
  |  |   19|    969|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    969|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 969, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    969|        return #name;
  |  |  ------------------
  |  |   20|    969|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    904|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 904, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    904|        return #name;
  |  |  ------------------
  |  |   21|  12.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  12.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12.4k, False: 185k]
  |  |  |  |  ------------------
  |  |  |  |  100|  12.4k|        return #name;
  |  |  ------------------
  |  |   22|  12.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.35k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.35k, False: 194k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.35k|        return #name;
  |  |  ------------------
  |  |   23|  3.35k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    622|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 622, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    622|        return #name;
  |  |  ------------------
  |  |   24|    622|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    257|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 257, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    257|        return #name;
  |  |  ------------------
  |  |   25|    257|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     71|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 71, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|     71|        return #name;
  |  |  ------------------
  |  |   26|     71|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   27|    252|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    252|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 252, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    252|        return #name;
  |  |  ------------------
  |  |   28|    324|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    324|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 324, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    324|        return #name;
  |  |  ------------------
  |  |   29|    917|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    917|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 917, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    917|        return #name;
  |  |  ------------------
  |  |   30|  14.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  14.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 14.5k, False: 183k]
  |  |  |  |  ------------------
  |  |  |  |  100|  14.5k|        return #name;
  |  |  ------------------
  |  |   31|  14.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    325|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 325, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    325|        return #name;
  |  |  ------------------
  |  |   32|    686|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|    686|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 686, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    686|        return #name;
  |  |  ------------------
  |  |   33|  1.69k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.69k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.69k, False: 195k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.69k|        return #name;
  |  |  ------------------
  |  |   34|  1.69k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.00k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.00k, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.00k|        return #name;
  |  |  ------------------
  |  |   35|  4.95k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  4.95k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4.95k, False: 192k]
  |  |  |  |  ------------------
  |  |  |  |  100|  4.95k|        return #name;
  |  |  ------------------
  |  |   36|  4.95k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    723|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 723, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    723|        return #name;
  |  |  ------------------
  |  |   37|  10.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  10.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10.3k, False: 187k]
  |  |  |  |  ------------------
  |  |  |  |  100|  10.3k|        return #name;
  |  |  ------------------
  |  |   38|  10.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    639|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 639, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    639|        return #name;
  |  |  ------------------
  |  |   39|    639|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 57, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|     57|        return #name;
  |  |  ------------------
  |  |   40|  13.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  13.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13.7k, False: 183k]
  |  |  |  |  ------------------
  |  |  |  |  100|  13.7k|        return #name;
  |  |  ------------------
  |  |   41|  13.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|    612|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 612, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    612|        return #name;
  |  |  ------------------
  |  |   42|    882|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    882|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 882, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|    882|        return #name;
  |  |  ------------------
  |  |   43|    882|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    212|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 212, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|    212|        return #name;
  |  |  ------------------
  |  |   44|  16.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  16.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 16.5k, False: 181k]
  |  |  |  |  ------------------
  |  |  |  |  100|  16.5k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 197k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   197k|        }
  109|   197k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  130|  69.2k|    {
  131|  69.2k|        switch (value)
  132|  69.2k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.15k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.15k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.15k, False: 66.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.15k|        return #name;
  |  |  ------------------
  |  |   48|  6.43k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  6.43k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.43k, False: 62.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.43k|        return #name;
  |  |  ------------------
  |  |   49|  16.9k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  16.9k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 16.9k, False: 52.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  16.9k|        return #name;
  |  |  ------------------
  |  |   50|  16.9k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|    753|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 753, False: 68.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    753|        return #name;
  |  |  ------------------
  |  |   51|    753|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     44|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 44, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     44|        return #name;
  |  |  ------------------
  |  |   52|    337|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|    337|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 337, False: 68.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    337|        return #name;
  |  |  ------------------
  |  |   53|    337|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   54|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   55|  1.92k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.92k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.92k, False: 67.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.92k|        return #name;
  |  |  ------------------
  |  |   56|  1.92k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   57|  17.8k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  17.8k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 17.8k, False: 51.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  17.8k|        return #name;
  |  |  ------------------
  |  |   58|  17.8k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|  1.59k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.59k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.59k, False: 67.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.59k|        return #name;
  |  |  ------------------
  |  |   60|  1.59k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|    416|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 416, False: 68.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    416|        return #name;
  |  |  ------------------
  |  |   61|    416|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    262|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 262, False: 68.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    262|        return #name;
  |  |  ------------------
  |  |   62|    262|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   63|    478|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    478|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 478, False: 68.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    478|        return #name;
  |  |  ------------------
  |  |   64|    478|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|    153|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|    153|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 153, False: 69.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    153|        return #name;
  |  |  ------------------
  |  |   67|    153|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   68|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|    166|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 166, False: 69.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|    166|        return #name;
  |  |  ------------------
  |  |   71|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     65|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 65, False: 69.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|     65|        return #name;
  |  |  ------------------
  |  |   73|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     56|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     56|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 56, False: 69.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|     56|        return #name;
  |  |  ------------------
  |  |   75|     56|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   76|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 69.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   77|  18.3k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  18.3k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18.3k, False: 50.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|  18.3k|        return #name;
  |  |  ------------------
  |  |   78|  18.3k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    121|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 121, False: 69.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    121|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 69.2k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  69.2k|        }
  144|  69.2k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   122k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   122k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 2.13M, False: 0]
  ------------------
   64|  2.13M|            {
   65|  2.13M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 122k, False: 2.01M]
  ------------------
   66|   122k|                {
   67|   122k|                    return &token;
   68|   122k|                }
   69|  2.13M|            }
   70|       |
   71|      0|            return nullptr;
   72|   122k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.71M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.71M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.71M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.70M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.70M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.70M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   392k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   392k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   392k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   333k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  89.8k|    {
   25|  89.8k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  89.8k|        switch (argument_number.unsafe())
   28|  89.8k|        {
   29|  72.0k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 72.0k, False: 17.8k]
  ------------------
   30|  72.0k|                m_Arg1 = argument;
   31|  72.0k|                break;
   32|  17.3k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 17.3k, False: 72.5k]
  ------------------
   33|  17.3k|                m_Arg2 = argument;
   34|  17.3k|                break;
   35|    505|            case 2u:
  ------------------
  |  Branch (35:13): [True: 505, False: 89.3k]
  ------------------
   36|    505|                m_Arg3 = argument;
   37|    505|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 89.8k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  89.8k|#endif
   42|  89.8k|        }
   43|  89.8k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  1.08M|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  44.7k|    {
  171|  44.7k|        InstructionArgument arg;
  172|  44.7k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  44.7k|        arg.register_int.register_id = id;
  174|  44.7k|        return arg;
  175|  44.7k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|    178|    {
  179|    178|        InstructionArgument arg;
  180|    178|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|    178|        arg.register_float.register_id = id;
  182|    178|        return arg;
  183|    178|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  18.5k|    {
  187|  18.5k|        InstructionArgument arg;
  188|  18.5k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  18.5k|        arg.immediate_value.signed_value = value;
  190|  18.5k|        return arg;
  191|  18.5k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  26.4k|    {
  205|  26.4k|        InstructionArgument arg;
  206|  26.4k|        arg.m_Type           = ArgumentType::Label;
  207|  26.4k|        arg.label.label_name = label_name;
  208|  26.4k|        return arg;
  209|  26.4k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   333k|    {
  453|   333k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   333k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  1.73M|    {
   24|  1.73M|        switch (token.length().unsafe())
   25|  1.73M|        {
   26|       |            // 1 character OpCodes
   27|   185k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 185k, False: 1.54M]
  ------------------
   28|   185k|                const char c1 = token[0u];
   29|       |
   30|   185k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 38.8k, False: 146k]
  ------------------
   31|  38.8k|                {
   32|  38.8k|                    return OpCode::J;
   33|  38.8k|                }
   34|   146k|                break;
   35|   185k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   321k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 321k, False: 1.41M]
  ------------------
   39|   321k|                const char c1 = token[0u];
   40|   321k|                const char c2 = token[1u];
   41|       |
   42|   321k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 121k, False: 199k]
  ------------------
   43|   321k|                {
   44|    131|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 131, False: 321k]
  ------------------
   45|    874|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 743, False: 320k]
  ------------------
   46|    874|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 133, False: 741]
  ------------------
   47|    133|                        {
   48|    133|                            return OpCode::JR;
   49|    133|                        }
   50|    741|                        break;
   51|       |
   52|  30.9k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 30.9k, False: 290k]
  ------------------
   53|  40.3k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 9.30k, False: 311k]
  ------------------
   54|  40.3k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 1.35k, False: 38.9k]
  ------------------
   55|  40.3k|                        {
   56|  7.05k|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 7.05k, False: 33.2k]
  ------------------
   57|  9.81k|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 2.75k, False: 37.5k]
  ------------------
   58|  9.81k|                                return OpCode::LB;
   59|  11.2k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 11.2k, False: 29.1k]
  ------------------
   60|  11.3k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 130, False: 40.1k]
  ------------------
   61|  11.3k|                                return OpCode::LD;
   62|     66|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 66, False: 40.2k]
  ------------------
   63|    132|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 66, False: 40.2k]
  ------------------
   64|    132|                                return OpCode::LF;
   65|  12.1k|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 12.1k, False: 28.1k]
  ------------------
   66|  12.2k|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 66, False: 40.2k]
  ------------------
   67|  12.2k|                                return OpCode::LH;
   68|    212|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 212, False: 40.0k]
  ------------------
   69|  5.46k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 5.25k, False: 35.0k]
  ------------------
   70|  5.46k|                                return OpCode::LW;
   71|  40.3k|                        }
   72|  1.35k|                        break;
   73|  46.9k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 46.9k, False: 274k]
  ------------------
   74|  47.1k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 192, False: 321k]
  ------------------
   75|  47.1k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 5.47k, False: 41.7k]
  ------------------
   76|  5.47k|                        {
   77|  5.47k|                            return OpCode::OR;
   78|  5.47k|                        }
   79|  41.7k|                        break;
   80|  58.6k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 58.6k, False: 262k]
  ------------------
   81|   111k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 52.4k, False: 268k]
  ------------------
   82|   111k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 74.6k, False: 36.4k]
  ------------------
   83|   111k|                        {
   84|    173|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 173, False: 110k]
  ------------------
   85|    239|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 66, False: 111k]
  ------------------
   86|    239|                                return OpCode::SB;
   87|    994|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 994, False: 110k]
  ------------------
   88|  5.54k|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 4.55k, False: 106k]
  ------------------
   89|  5.54k|                                return OpCode::SD;
   90|    226|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 226, False: 110k]
  ------------------
   91|  8.74k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 8.51k, False: 102k]
  ------------------
   92|  8.74k|                                return OpCode::SF;
   93|  21.5k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 21.5k, False: 89.5k]
  ------------------
   94|  21.6k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 66, False: 111k]
  ------------------
   95|  21.6k|                                return OpCode::SH;
   96|    286|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 286, False: 110k]
  ------------------
   97|    356|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 70, False: 111k]
  ------------------
   98|    356|                                return OpCode::SW;
   99|   111k|                        }
  100|  74.6k|                        break;
  101|   321k|                }
  102|   240k|                break;
  103|   321k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   515k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 515k, False: 1.21M]
  ------------------
  107|   515k|                const char c1 = token[0u];
  108|   515k|                const char c2 = token[1u];
  109|   515k|                const char c3 = token[2u];
  110|       |
  111|   515k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 50.1k, False: 465k]
  ------------------
  112|   515k|                {
  113|   154k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 154k, False: 360k]
  ------------------
  114|   175k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 20.9k, False: 494k]
  ------------------
  115|   175k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 148k, False: 26.9k]
  |  Branch (115:29): [True: 148k, False: 27.0k]
  |  Branch (115:45): [True: 148k, False: 83]
  ------------------
  116|   148k|                        {
  117|   148k|                            return OpCode::ADD;
  118|   148k|                        }
  119|  27.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 26.7k, False: 366]
  |  Branch (119:34): [True: 15.2k, False: 11.7k]
  |  Branch (119:50): [True: 15.2k, False: 11.4k]
  ------------------
  120|  15.2k|                        {
  121|  15.2k|                            return OpCode::AND;
  122|  15.2k|                        }
  123|  11.7k|                        break;
  124|       |
  125|  12.6k|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 12.6k, False: 502k]
  ------------------
  126|  12.6k|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 75, False: 515k]
  ------------------
  127|  12.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 12.5k, False: 133]
  |  Branch (127:29): [True: 12.4k, False: 199]
  |  Branch (127:45): [True: 12.4k, False: 66]
  ------------------
  128|  12.4k|                        {
  129|  12.4k|                            return OpCode::DIV;
  130|  12.4k|                        }
  131|    199|                        break;
  132|       |
  133|  1.05k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 1.05k, False: 514k]
  ------------------
  134|  1.43k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 371, False: 514k]
  ------------------
  135|  1.43k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 1.10k, False: 322]
  ------------------
  136|  1.10k|                        {
  137|  1.10k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 133, False: 975]
  ------------------
  138|    133|                            {
  139|    133|                                return OpCode::EQD;
  140|    133|                            }
  141|    975|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 640, False: 335]
  ------------------
  142|    640|                            {
  143|    640|                                return OpCode::EQF;
  144|    640|                            }
  145|  1.10k|                        }
  146|    657|                        break;
  147|       |
  148|  56.1k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 56.1k, False: 459k]
  ------------------
  149|  66.2k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 10.1k, False: 505k]
  ------------------
  150|  66.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 35.2k, False: 31.0k]
  ------------------
  151|  35.2k|                        {
  152|  35.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 25.1k, False: 10.0k]
  ------------------
  153|  25.1k|                            {
  154|  25.1k|                                return OpCode::GED;
  155|  25.1k|                            }
  156|  10.0k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 10.0k, False: 72]
  ------------------
  157|  10.0k|                            {
  158|  10.0k|                                return OpCode::GEF;
  159|  10.0k|                            }
  160|  35.2k|                        }
  161|  31.0k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 30.8k, False: 186]
  ------------------
  162|  30.8k|                        {
  163|  30.8k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 10.1k, False: 20.7k]
  ------------------
  164|  10.1k|                            {
  165|  10.1k|                                return OpCode::GTD;
  166|  10.1k|                            }
  167|  20.7k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 13.0k, False: 7.65k]
  ------------------
  168|  13.0k|                            {
  169|  13.0k|                                return OpCode::GTF;
  170|  13.0k|                            }
  171|  20.7k|                        }
  172|  7.91k|                        break;
  173|       |
  174|  7.91k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 91, False: 515k]
  ------------------
  175|    593|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 502, False: 514k]
  ------------------
  176|    593|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 482, False: 111]
  |  Branch (176:29): [True: 147, False: 446]
  |  Branch (176:45): [True: 147, False: 335]
  ------------------
  177|    147|                        {
  178|    147|                            return OpCode::JAL;
  179|    147|                        }
  180|    446|                        break;
  181|       |
  182|  6.43k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 6.43k, False: 508k]
  ------------------
  183|  17.9k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 11.5k, False: 503k]
  ------------------
  184|  17.9k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 90, False: 17.8k]
  ------------------
  185|  17.9k|                        {
  186|    119|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 119, False: 17.8k]
  ------------------
  187|  9.67k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 9.55k, False: 8.38k]
  ------------------
  188|  9.67k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 473, False: 9.20k]
  ------------------
  189|    473|                                {
  190|    473|                                    return OpCode::LBU;
  191|    473|                                }
  192|  9.20k|                                break;
  193|       |
  194|  9.20k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 5.34k, False: 12.5k]
  ------------------
  195|  5.53k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 184, False: 17.7k]
  ------------------
  196|  5.53k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 1.03k, False: 4.49k]
  ------------------
  197|  1.03k|                                {
  198|  1.03k|                                    return OpCode::LED;
  199|  1.03k|                                }
  200|  4.49k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 4.43k, False: 66]
  ------------------
  201|  4.43k|                                {
  202|  4.43k|                                    return OpCode::LEF;
  203|  4.43k|                                }
  204|     66|                                break;
  205|       |
  206|    246|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 246, False: 17.6k]
  ------------------
  207|  1.00k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 758, False: 17.1k]
  ------------------
  208|  1.00k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 146, False: 858]
  ------------------
  209|    146|                                {
  210|    146|                                    return OpCode::LHI;
  211|    146|                                }
  212|    858|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 792, False: 66]
  ------------------
  213|    792|                                {
  214|    792|                                    return OpCode::LHU;
  215|    792|                                }
  216|     66|                                break;
  217|       |
  218|    612|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 612, False: 17.3k]
  ------------------
  219|    807|                            case 't':
  ------------------
  |  Branch (219:29): [True: 195, False: 17.7k]
  ------------------
  220|    807|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 419, False: 388]
  ------------------
  221|    419|                                {
  222|    419|                                    return OpCode::LTD;
  223|    419|                                }
  224|    388|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 312, False: 76]
  ------------------
  225|    312|                                {
  226|    312|                                    return OpCode::LTF;
  227|    312|                                }
  228|     76|                                break;
  229|       |
  230|     78|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 78, False: 17.8k]
  ------------------
  231|    831|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 753, False: 17.1k]
  ------------------
  232|    831|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 132, False: 699]
  ------------------
  233|    132|                                {
  234|    132|                                    return OpCode::LWU;
  235|    132|                                }
  236|    699|                                break;
  237|  17.9k|                        }
  238|  10.2k|                        break;
  239|       |
  240|  10.2k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 7.33k, False: 508k]
  ------------------
  241|  28.4k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 21.0k, False: 494k]
  ------------------
  242|  28.4k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 5.65k, False: 22.7k]
  ------------------
  243|  5.65k|                        {
  244|  5.65k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 142, False: 5.51k]
  ------------------
  245|    142|                            {
  246|    142|                                return OpCode::NED;
  247|    142|                            }
  248|  5.51k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 133, False: 5.38k]
  ------------------
  249|    133|                            {
  250|    133|                                return OpCode::NEF;
  251|    133|                            }
  252|  5.65k|                        }
  253|  22.7k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 16.3k, False: 6.38k]
  |  Branch (253:34): [True: 1.82k, False: 20.9k]
  |  Branch (253:50): [True: 1.82k, False: 14.5k]
  ------------------
  254|  1.82k|                        {
  255|  1.82k|                            return OpCode::NOP;
  256|  1.82k|                        }
  257|       |
  258|  26.3k|                        break;
  259|       |
  260|  26.3k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 1.80k, False: 513k]
  ------------------
  261|  1.88k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 80, False: 515k]
  ------------------
  262|  1.88k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 781, False: 1.10k]
  |  Branch (262:29): [True: 151, False: 1.73k]
  |  Branch (262:45): [True: 151, False: 630]
  ------------------
  263|    151|                        {
  264|    151|                            return OpCode::ORI;
  265|    151|                        }
  266|  1.73k|                        break;
  267|       |
  268|   142k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 142k, False: 373k]
  ------------------
  269|   144k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 2.24k, False: 513k]
  ------------------
  270|   144k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 589, False: 143k]
  ------------------
  271|   144k|                        {
  272|  7.42k|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 7.42k, False: 137k]
  ------------------
  273|  7.98k|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 563, False: 143k]
  ------------------
  274|  7.98k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 7.49k, False: 497]
  ------------------
  275|  7.49k|                                {
  276|  7.49k|                                    return OpCode::SBU;
  277|  7.49k|                                }
  278|    497|                                break;
  279|       |
  280|    497|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 187, False: 144k]
  ------------------
  281|  27.1k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 26.9k, False: 117k]
  ------------------
  282|  27.1k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 22.0k, False: 5.08k]
  ------------------
  283|  22.0k|                                {
  284|  22.0k|                                    return OpCode::SEQ;
  285|  22.0k|                                }
  286|  5.08k|                                break;
  287|       |
  288|  5.08k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 658, False: 143k]
  ------------------
  289|  1.13k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 480, False: 144k]
  ------------------
  290|  1.13k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 348, False: 790]
  ------------------
  291|    348|                                {
  292|    348|                                    return OpCode::SGE;
  293|    348|                                }
  294|    790|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 596, False: 194]
  ------------------
  295|    596|                                {
  296|    596|                                    return OpCode::SGT;
  297|    596|                                }
  298|    194|                                break;
  299|       |
  300|  12.9k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 12.9k, False: 131k]
  ------------------
  301|  13.3k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 373, False: 144k]
  ------------------
  302|  13.3k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 13.0k, False: 310]
  ------------------
  303|  13.0k|                                {
  304|  13.0k|                                    return OpCode::SHU;
  305|  13.0k|                                }
  306|    310|                                break;
  307|       |
  308|  40.2k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 40.2k, False: 104k]
  ------------------
  309|  40.5k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 309, False: 144k]
  ------------------
  310|  40.5k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 67, False: 40.5k]
  ------------------
  311|  40.5k|                                {
  312|  22.2k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 22.2k, False: 18.3k]
  ------------------
  313|  22.3k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 69, False: 40.5k]
  ------------------
  314|  22.3k|                                        return OpCode::SLA;
  315|       |
  316|  13.6k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 13.6k, False: 26.9k]
  ------------------
  317|  13.7k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 70, False: 40.5k]
  ------------------
  318|  13.7k|                                        return OpCode::SLE;
  319|       |
  320|  4.16k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 4.16k, False: 36.4k]
  ------------------
  321|  4.23k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 70, False: 40.5k]
  ------------------
  322|  4.23k|                                        return OpCode::SLL;
  323|       |
  324|    148|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 148, False: 40.4k]
  ------------------
  325|    230|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 82, False: 40.5k]
  ------------------
  326|    230|                                        return OpCode::SLT;
  327|  40.5k|                                }
  328|     67|                                break;
  329|       |
  330|    212|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 212, False: 144k]
  ------------------
  331|    376|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 164, False: 144k]
  ------------------
  332|    376|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 308, False: 68]
  ------------------
  333|    308|                                {
  334|    308|                                    return OpCode::SNE;
  335|    308|                                }
  336|     68|                                break;
  337|       |
  338|  16.7k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 16.7k, False: 127k]
  ------------------
  339|  44.3k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 27.6k, False: 116k]
  ------------------
  340|  44.3k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 14.2k, False: 30.0k]
  ------------------
  341|  14.2k|                                {
  342|  14.2k|                                    return OpCode::SRA;
  343|  14.2k|                                }
  344|  30.0k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 2.62k, False: 27.4k]
  ------------------
  345|  2.62k|                                {
  346|  2.62k|                                    return OpCode::SRL;
  347|  2.62k|                                }
  348|  27.4k|                                break;
  349|       |
  350|  27.4k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 7.30k, False: 137k]
  ------------------
  351|  8.01k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 707, False: 143k]
  ------------------
  352|  8.01k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 7.50k, False: 505]
  ------------------
  353|  7.50k|                                {
  354|  7.50k|                                    return OpCode::SUB;
  355|  7.50k|                                }
  356|    505|                                break;
  357|       |
  358|    685|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 685, False: 143k]
  ------------------
  359|    958|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 273, False: 144k]
  ------------------
  360|    958|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 692, False: 266]
  ------------------
  361|    692|                                {
  362|    692|                                    return OpCode::SWU;
  363|    692|                                }
  364|    266|                                break;
  365|   144k|                        }
  366|       |
  367|  36.8k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 1.80k, False: 513k]
  ------------------
  368|  51.0k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 14.1k, False: 501k]
  ------------------
  369|  51.0k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 1.83k, False: 49.1k]
  |  Branch (369:29): [True: 1.76k, False: 49.2k]
  |  Branch (369:45): [True: 1.76k, False: 71]
  ------------------
  370|  1.76k|                        {
  371|  1.76k|                            return OpCode::XOR;
  372|  1.76k|                        }
  373|  49.2k|                        break;
  374|   515k|                }
  375|   158k|                break;
  376|   515k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|   442k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 442k, False: 1.28M]
  ------------------
  380|   442k|                const char c1 = token[0u];
  381|   442k|                const char c2 = token[1u];
  382|   442k|                const char c3 = token[2u];
  383|   442k|                const char c4 = token[3u];
  384|       |
  385|   442k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 31.4k, False: 410k]
  ------------------
  386|   442k|                {
  387|  77.8k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 77.8k, False: 364k]
  ------------------
  388|  82.0k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 4.25k, False: 438k]
  ------------------
  389|  82.0k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 76, False: 82.0k]
  ------------------
  390|  82.0k|                        {
  391|  80.6k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 80.6k, False: 1.39k]
  ------------------
  392|  80.8k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 157, False: 81.9k]
  ------------------
  393|  80.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 76.8k, False: 4.03k]
  ------------------
  394|  76.8k|                                {
  395|  76.8k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 66, False: 76.7k]
  ------------------
  396|  76.8k|                                    {
  397|  14.0k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 14.0k, False: 62.7k]
  ------------------
  398|  14.1k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 76.7k]
  ------------------
  399|  14.1k|                                            return OpCode::ADDD;
  400|       |
  401|  13.5k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 13.5k, False: 63.2k]
  ------------------
  402|  13.5k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 66, False: 76.7k]
  ------------------
  403|  13.5k|                                            return OpCode::ADDF;
  404|       |
  405|  16.1k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 16.1k, False: 60.6k]
  ------------------
  406|  16.2k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 76.7k]
  ------------------
  407|  16.2k|                                            return OpCode::ADDI;
  408|       |
  409|  32.7k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 32.7k, False: 44.0k]
  ------------------
  410|  32.8k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 76.7k]
  ------------------
  411|  32.8k|                                            return OpCode::ADDU;
  412|  76.8k|                                    }
  413|  76.8k|                                }
  414|  4.10k|                                break;
  415|       |
  416|  4.10k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 856, False: 81.2k]
  ------------------
  417|  1.15k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 303, False: 81.7k]
  ------------------
  418|  1.15k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 960, False: 199]
  |  Branch (418:37): [True: 888, False: 271]
  |  Branch (418:53): [True: 888, False: 72]
  ------------------
  419|    888|                                {
  420|    888|                                    return OpCode::ANDI;
  421|    888|                                }
  422|       |
  423|    271|                                break;
  424|  82.0k|                        }
  425|  4.45k|                        break;
  426|       |
  427|  84.5k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 84.5k, False: 357k]
  ------------------
  428|  94.3k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 9.73k, False: 432k]
  ------------------
  429|  94.3k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 310, False: 93.9k]
  ------------------
  430|  94.3k|                        {
  431|    252|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 252, False: 94.0k]
  ------------------
  432|  9.26k|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 9.01k, False: 85.2k]
  ------------------
  433|  9.26k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 3.99k, False: 5.26k]
  |  Branch (433:37): [True: 3.85k, False: 5.41k]
  |  Branch (433:53): [True: 3.85k, False: 147]
  ------------------
  434|  3.85k|                                {
  435|  3.85k|                                    return OpCode::BEQZ;
  436|  3.85k|                                }
  437|  5.41k|                                break;
  438|       |
  439|  74.5k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 74.5k, False: 19.7k]
  ------------------
  440|  74.8k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 265, False: 94.0k]
  ------------------
  441|  74.8k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 74.7k, False: 66]
  ------------------
  442|  74.7k|                                {
  443|  74.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 24.0k, False: 50.6k]
  ------------------
  444|  24.0k|                                    {
  445|  24.0k|                                        return OpCode::BFPF;
  446|  24.0k|                                    }
  447|  50.6k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 50.6k, False: 66]
  ------------------
  448|  50.6k|                                    {
  449|  50.6k|                                        return OpCode::BFPT;
  450|  50.6k|                                    }
  451|  74.7k|                                }
  452|    132|                                break;
  453|       |
  454|  9.71k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 9.71k, False: 84.5k]
  ------------------
  455|  9.91k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 198, False: 94.1k]
  ------------------
  456|  9.91k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 9.84k, False: 66]
  |  Branch (456:37): [True: 9.78k, False: 132]
  |  Branch (456:53): [True: 9.78k, False: 66]
  ------------------
  457|  9.78k|                                {
  458|  9.78k|                                    return OpCode::BNEZ;
  459|  9.78k|                                }
  460|  94.3k|                        }
  461|  5.98k|                        break;
  462|       |
  463|  17.8k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 17.8k, False: 424k]
  ------------------
  464|  18.0k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 114, False: 442k]
  ------------------
  465|  18.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 17.8k, False: 118]
  |  Branch (465:29): [True: 17.8k, False: 184]
  |  Branch (465:45): [True: 17.8k, False: 66]
  ------------------
  466|  17.8k|                        {
  467|  17.8k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 105, False: 17.7k]
  ------------------
  468|  17.8k|                            {
  469|  9.00k|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 9.00k, False: 8.81k]
  ------------------
  470|  9.07k|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 17.7k]
  ------------------
  471|  9.07k|                                    return OpCode::DIVD;
  472|       |
  473|     70|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 70, False: 17.7k]
  ------------------
  474|    136|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 17.7k]
  ------------------
  475|    136|                                    return OpCode::DIVF;
  476|       |
  477|  2.04k|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 2.04k, False: 15.7k]
  ------------------
  478|  2.11k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 66, False: 17.7k]
  ------------------
  479|  2.11k|                                    return OpCode::DIVI;
  480|       |
  481|  6.30k|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 6.30k, False: 11.5k]
  ------------------
  482|  6.39k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 98, False: 17.7k]
  ------------------
  483|  6.39k|                                    return OpCode::DIVU;
  484|  17.8k|                            }
  485|  17.8k|                        }
  486|    289|                        break;
  487|       |
  488|    289|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 103, False: 442k]
  ------------------
  489|  11.4k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 11.3k, False: 430k]
  ------------------
  490|  11.4k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 11.2k, False: 228]
  |  Branch (490:29): [True: 149, False: 11.2k]
  |  Branch (490:45): [True: 11.1k, False: 66]
  |  Branch (490:61): [True: 149, False: 10.9k]
  ------------------
  491|    149|                        {
  492|    149|                            return OpCode::HALT;
  493|    149|                        }
  494|  11.2k|                        break;
  495|       |
  496|  11.2k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 321, False: 441k]
  ------------------
  497|  2.94k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 2.62k, False: 439k]
  ------------------
  498|  2.94k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 2.61k, False: 331]
  |  Branch (498:29): [True: 165, False: 2.77k]
  |  Branch (498:45): [True: 231, False: 2.38k]
  |  Branch (498:61): [True: 165, False: 66]
  ------------------
  499|    165|                        {
  500|    165|                            return OpCode::JALR;
  501|    165|                        }
  502|  2.77k|                        break;
  503|       |
  504|  20.9k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 20.9k, False: 421k]
  ------------------
  505|  33.5k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 12.5k, False: 429k]
  ------------------
  506|  33.5k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 18.8k, False: 14.7k]
  |  Branch (506:29): [True: 18.7k, False: 14.7k]
  |  Branch (506:45): [True: 18.7k, False: 66]
  ------------------
  507|  18.7k|                        {
  508|  18.7k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 18.3k, False: 402]
  ------------------
  509|  18.3k|                            {
  510|  18.3k|                                return OpCode::MOVD;
  511|  18.3k|                            }
  512|    402|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 336, False: 66]
  ------------------
  513|    336|                            {
  514|    336|                                return OpCode::MOVF;
  515|    336|                            }
  516|  18.7k|                        }
  517|  14.7k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 14.1k, False: 666]
  |  Branch (517:34): [True: 177, False: 14.6k]
  |  Branch (517:50): [True: 13.7k, False: 409]
  |  Branch (517:66): [True: 177, False: 13.5k]
  ------------------
  518|    177|                        {
  519|    177|                            return OpCode::MULT;
  520|    177|                        }
  521|  14.6k|                        break;
  522|       |
  523|   140k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 140k, False: 301k]
  ------------------
  524|   158k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 17.5k, False: 424k]
  ------------------
  525|   158k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 1.19k, False: 156k]
  ------------------
  526|   158k|                        {
  527|  4.42k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 4.42k, False: 153k]
  ------------------
  528|  13.9k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 9.53k, False: 148k]
  ------------------
  529|  13.9k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 9.68k, False: 4.28k]
  ------------------
  530|  9.68k|                                {
  531|  9.68k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 8.56k, False: 1.12k]
  ------------------
  532|  8.56k|                                    {
  533|  8.56k|                                        return OpCode::SEQI;
  534|  8.56k|                                    }
  535|  1.12k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 1.04k, False: 81]
  ------------------
  536|  1.04k|                                    {
  537|  1.04k|                                        return OpCode::SEQU;
  538|  1.04k|                                    }
  539|  9.68k|                                }
  540|  4.36k|                                break;
  541|       |
  542|  19.1k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 19.1k, False: 138k]
  ------------------
  543|  33.3k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 14.2k, False: 143k]
  ------------------
  544|  33.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 15.8k, False: 17.5k]
  ------------------
  545|  15.8k|                                {
  546|  15.8k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 369, False: 15.4k]
  ------------------
  547|    369|                                    {
  548|    369|                                        return OpCode::SGEI;
  549|    369|                                    }
  550|  15.4k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 15.4k, False: 66]
  ------------------
  551|  15.4k|                                    {
  552|  15.4k|                                        return OpCode::SGEU;
  553|  15.4k|                                    }
  554|  15.8k|                                }
  555|  17.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 17.4k, False: 80]
  ------------------
  556|  17.4k|                                {
  557|  17.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 3.53k, False: 13.9k]
  ------------------
  558|  3.53k|                                    {
  559|  3.53k|                                        return OpCode::SGTI;
  560|  3.53k|                                    }
  561|  13.9k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 132, False: 13.7k]
  ------------------
  562|    132|                                    {
  563|    132|                                        return OpCode::SGTU;
  564|    132|                                    }
  565|  17.4k|                                }
  566|  13.9k|                                break;
  567|       |
  568|  34.1k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 34.1k, False: 123k]
  ------------------
  569|  34.9k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 766, False: 157k]
  ------------------
  570|  34.9k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 66, False: 34.8k]
  ------------------
  571|  34.9k|                                {
  572|  2.02k|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 2.02k, False: 32.9k]
  ------------------
  573|  2.13k|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 113, False: 34.8k]
  ------------------
  574|  2.13k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 2.07k, False: 66]
  ------------------
  575|  2.07k|                                        {
  576|  2.07k|                                            return OpCode::SLAI;
  577|  2.07k|                                        }
  578|     66|                                        break;
  579|       |
  580|  23.7k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 23.7k, False: 11.1k]
  ------------------
  581|  23.9k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 164, False: 34.7k]
  ------------------
  582|  23.9k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 22.3k, False: 1.57k]
  ------------------
  583|  22.3k|                                        {
  584|  22.3k|                                            return OpCode::SLEI;
  585|  22.3k|                                        }
  586|  1.57k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 1.50k, False: 66]
  ------------------
  587|  1.50k|                                        {
  588|  1.50k|                                            return OpCode::SLEU;
  589|  1.50k|                                        }
  590|     66|                                        break;
  591|       |
  592|  4.98k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 4.98k, False: 29.9k]
  ------------------
  593|  5.15k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 165, False: 34.7k]
  ------------------
  594|  5.15k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 5.08k, False: 69]
  ------------------
  595|  5.08k|                                        {
  596|  5.08k|                                            return OpCode::SLLI;
  597|  5.08k|                                        }
  598|     69|                                        break;
  599|       |
  600|  3.52k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 3.52k, False: 31.4k]
  ------------------
  601|  3.66k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 141, False: 34.8k]
  ------------------
  602|  3.66k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 3.46k, False: 203]
  ------------------
  603|  3.46k|                                        {
  604|  3.46k|                                            return OpCode::SLTI;
  605|  3.46k|                                        }
  606|    203|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 137, False: 66]
  ------------------
  607|    137|                                        {
  608|    137|                                            return OpCode::SLTU;
  609|    137|                                        }
  610|     66|                                        break;
  611|  34.9k|                                }
  612|       |
  613|  13.2k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 12.9k, False: 145k]
  ------------------
  614|  20.8k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 7.56k, False: 150k]
  ------------------
  615|  20.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 20.5k, False: 268]
  ------------------
  616|  20.5k|                                {
  617|  20.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 1.21k, False: 19.3k]
  ------------------
  618|  1.21k|                                    {
  619|  1.21k|                                        return OpCode::SNEI;
  620|  1.21k|                                    }
  621|  19.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 19.2k, False: 66]
  ------------------
  622|  19.2k|                                    {
  623|  19.2k|                                        return OpCode::SNEU;
  624|  19.2k|                                    }
  625|  20.5k|                                }
  626|    334|                                break;
  627|       |
  628|    798|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 798, False: 157k]
  ------------------
  629|  1.02k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 225, False: 157k]
  ------------------
  630|  1.02k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 471, False: 552]
  |  Branch (630:37): [True: 404, False: 619]
  |  Branch (630:53): [True: 404, False: 67]
  ------------------
  631|    404|                                {
  632|    404|                                    return OpCode::SRAI;
  633|    404|                                }
  634|    619|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 524, False: 95]
  |  Branch (634:42): [True: 329, False: 290]
  |  Branch (634:58): [True: 329, False: 195]
  ------------------
  635|    329|                                {
  636|    329|                                    return OpCode::SRLI;
  637|    329|                                }
  638|    290|                                break;
  639|       |
  640|  31.8k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 31.8k, False: 126k]
  ------------------
  641|  53.1k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 21.3k, False: 136k]
  ------------------
  642|  53.1k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 46.4k, False: 6.68k]
  ------------------
  643|  46.4k|                                {
  644|  46.4k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 14.4k, False: 31.9k]
  ------------------
  645|  46.4k|                                    {
  646|    128|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 128, False: 46.3k]
  ------------------
  647|    194|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 46.3k]
  ------------------
  648|    194|                                            return OpCode::SUBD;
  649|       |
  650|  6.34k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 6.34k, False: 40.0k]
  ------------------
  651|  6.41k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 66, False: 46.3k]
  ------------------
  652|  6.41k|                                            return OpCode::SUBF;
  653|       |
  654|  21.5k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 21.5k, False: 24.8k]
  ------------------
  655|  21.6k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 98, False: 46.3k]
  ------------------
  656|  21.6k|                                            return OpCode::SUBI;
  657|       |
  658|  3.63k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 3.63k, False: 42.8k]
  ------------------
  659|  3.70k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 46.3k]
  ------------------
  660|  3.70k|                                            return OpCode::SUBU;
  661|  46.4k|                                    }
  662|  46.4k|                                }
  663|  21.1k|                                break;
  664|   158k|                        }
  665|  41.2k|                        break;
  666|       |
  667|  41.2k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 9.80k, False: 432k]
  ------------------
  668|  9.92k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 122, False: 442k]
  ------------------
  669|  9.92k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 9.85k, False: 66]
  |  Branch (669:29): [True: 9.63k, False: 289]
  |  Branch (669:45): [True: 9.77k, False: 84]
  |  Branch (669:61): [True: 9.63k, False: 139]
  ------------------
  670|  9.63k|                        {
  671|  9.63k|                            return OpCode::TRAP;
  672|  9.63k|                        }
  673|    289|                        break;
  674|    289|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 170, False: 442k]
  ------------------
  675|    419|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 249, False: 442k]
  ------------------
  676|    419|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 265, False: 154]
  |  Branch (676:29): [True: 133, False: 286]
  |  Branch (676:45): [True: 199, False: 66]
  |  Branch (676:61): [True: 133, False: 66]
  ------------------
  677|    133|                        {
  678|    133|                            return OpCode::XORI;
  679|    133|                        }
  680|    286|                        break;
  681|   442k|                }
  682|   112k|                break;
  683|   442k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   170k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 170k, False: 1.56M]
  ------------------
  687|   170k|                const char c1 = token[0u];
  688|   170k|                const char c2 = token[1u];
  689|   170k|                const char c3 = token[2u];
  690|   170k|                const char c4 = token[3u];
  691|   170k|                const char c5 = token[4u];
  692|       |
  693|   170k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 11.9k, False: 159k]
  ------------------
  694|   170k|                {
  695|  38.4k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 38.4k, False: 132k]
  ------------------
  696|  38.4k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 170k]
  ------------------
  697|  38.4k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 38.4k, False: 0]
  |  Branch (697:29): [True: 38.4k, False: 0]
  |  Branch (697:45): [True: 38.4k, False: 0]
  |  Branch (697:61): [True: 38.4k, False: 0]
  |  Branch (697:77): [True: 38.4k, False: 0]
  ------------------
  698|  38.4k|                        {
  699|  38.4k|                            return OpCode::ADDUI;
  700|  38.4k|                        }
  701|      0|                        break;
  702|       |
  703|  19.5k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 19.5k, False: 151k]
  ------------------
  704|  19.5k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 170k]
  ------------------
  705|  19.5k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 19.5k, False: 0]
  |  Branch (705:29): [True: 19.5k, False: 0]
  |  Branch (705:45): [True: 19.5k, False: 0]
  |  Branch (705:61): [True: 19.5k, False: 0]
  |  Branch (705:77): [True: 19.5k, False: 0]
  ------------------
  706|  19.5k|                        {
  707|  19.5k|                            return OpCode::DIVUI;
  708|  19.5k|                        }
  709|      0|                        break;
  710|       |
  711|  19.8k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 19.8k, False: 151k]
  ------------------
  712|  19.8k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 170k]
  ------------------
  713|  19.8k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 19.8k, False: 0]
  |  Branch (713:29): [True: 19.8k, False: 0]
  |  Branch (713:45): [True: 19.8k, False: 0]
  |  Branch (713:61): [True: 19.8k, False: 0]
  ------------------
  714|  19.8k|                        {
  715|  19.8k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 19.8k]
  ------------------
  716|  19.8k|                            {
  717|    214|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 214, False: 19.6k]
  ------------------
  718|    214|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 19.8k]
  ------------------
  719|    214|                                    return OpCode::MULTD;
  720|       |
  721|  19.3k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 19.3k, False: 540]
  ------------------
  722|  19.3k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 19.8k]
  ------------------
  723|  19.3k|                                    return OpCode::MULTF;
  724|       |
  725|    134|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 134, False: 19.7k]
  ------------------
  726|    134|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 19.8k]
  ------------------
  727|    134|                                    return OpCode::MULTI;
  728|       |
  729|    192|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 192, False: 19.6k]
  ------------------
  730|    192|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 19.8k]
  ------------------
  731|    192|                                    return OpCode::MULTU;
  732|  19.8k|                            }
  733|  19.8k|                        }
  734|      0|                        break;
  735|       |
  736|  81.2k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 81.2k, False: 89.7k]
  ------------------
  737|  81.2k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 170k]
  ------------------
  738|  81.2k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 81.2k]
  ------------------
  739|  81.2k|                        {
  740|  24.3k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 24.3k, False: 56.8k]
  ------------------
  741|  24.3k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 81.2k]
  ------------------
  742|  24.3k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 24.3k, False: 0]
  |  Branch (742:37): [True: 24.3k, False: 0]
  |  Branch (742:53): [True: 24.3k, False: 0]
  |  Branch (742:69): [True: 24.3k, False: 0]
  ------------------
  743|  24.3k|                                {
  744|  24.3k|                                    return OpCode::SEQUI;
  745|  24.3k|                                }
  746|      0|                                break;
  747|       |
  748|  25.6k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 25.6k, False: 55.6k]
  ------------------
  749|  25.6k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 81.2k]
  ------------------
  750|  25.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 15.3k, False: 10.3k]
  |  Branch (750:37): [True: 15.3k, False: 10.3k]
  |  Branch (750:53): [True: 15.3k, False: 0]
  |  Branch (750:69): [True: 15.3k, False: 0]
  ------------------
  751|  15.3k|                                {
  752|  15.3k|                                    return OpCode::SGEUI;
  753|  15.3k|                                }
  754|  10.3k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 10.3k, False: 0]
  |  Branch (754:42): [True: 10.3k, False: 0]
  |  Branch (754:58): [True: 10.3k, False: 0]
  |  Branch (754:74): [True: 10.3k, False: 0]
  ------------------
  755|  10.3k|                                {
  756|  10.3k|                                    return OpCode::SGTUI;
  757|  10.3k|                                }
  758|      0|                                break;
  759|       |
  760|  20.6k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 20.6k, False: 60.5k]
  ------------------
  761|  20.6k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 81.2k]
  ------------------
  762|  20.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 807, False: 19.8k]
  |  Branch (762:37): [True: 807, False: 19.8k]
  |  Branch (762:53): [True: 807, False: 0]
  |  Branch (762:69): [True: 807, False: 0]
  ------------------
  763|    807|                                {
  764|    807|                                    return OpCode::SLEUI;
  765|    807|                                }
  766|  19.8k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 19.8k, False: 0]
  |  Branch (766:42): [True: 19.8k, False: 0]
  |  Branch (766:58): [True: 19.8k, False: 0]
  |  Branch (766:74): [True: 19.8k, False: 0]
  ------------------
  767|  19.8k|                                {
  768|  19.8k|                                    return OpCode::SLTUI;
  769|  19.8k|                                }
  770|      0|                                break;
  771|       |
  772|     66|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 66, False: 81.1k]
  ------------------
  773|     66|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 81.2k]
  ------------------
  774|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:53): [True: 66, False: 0]
  |  Branch (774:69): [True: 66, False: 0]
  ------------------
  775|     66|                                {
  776|     66|                                    return OpCode::SNEUI;
  777|     66|                                }
  778|      0|                                break;
  779|       |
  780|  10.5k|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 10.5k, False: 70.7k]
  ------------------
  781|  10.5k|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 81.2k]
  ------------------
  782|  10.5k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 10.5k, False: 0]
  |  Branch (782:37): [True: 10.5k, False: 0]
  |  Branch (782:53): [True: 10.5k, False: 0]
  |  Branch (782:69): [True: 10.5k, False: 0]
  ------------------
  783|  10.5k|                                {
  784|  10.5k|                                    return OpCode::SUBUI;
  785|  10.5k|                                }
  786|      0|                                break;
  787|  81.2k|                        }
  788|       |
  789|      0|                        break;
  790|   170k|                }
  791|       |
  792|  11.9k|                break;
  793|   170k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  41.4k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 41.4k, False: 1.69M]
  ------------------
  797|  41.4k|                const char c1 = token[0u];
  798|  41.4k|                const char c2 = token[1u];
  799|  41.4k|                const char c3 = token[2u];
  800|  41.4k|                const char c4 = token[3u];
  801|  41.4k|                const char c5 = token[4u];
  802|  41.4k|                const char c6 = token[5u];
  803|       |
  804|  41.4k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 16.5k, False: 24.9k]
  |  Branch (804:21): [True: 16.5k, False: 24.9k]
  |  Branch (804:37): [True: 16.5k, False: 0]
  |  Branch (804:53): [True: 16.5k, False: 0]
  ------------------
  805|  16.5k|                {
  806|  16.5k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 16.5k]
  ------------------
  807|  16.5k|                    {
  808|  2.05k|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 2.05k, False: 14.4k]
  ------------------
  809|  2.05k|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 16.5k]
  ------------------
  810|  2.05k|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 2.05k, False: 0]
  ------------------
  811|  2.05k|                            {
  812|  2.05k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 1.22k, False: 830]
  ------------------
  813|  1.22k|                                {
  814|  1.22k|                                    return OpCode::CVTD2F;
  815|  1.22k|                                }
  816|    830|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 830, False: 0]
  ------------------
  817|    830|                                {
  818|    830|                                    return OpCode::CVTD2I;
  819|    830|                                }
  820|  2.05k|                            }
  821|      0|                            break;
  822|       |
  823|  2.54k|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 2.54k, False: 13.9k]
  ------------------
  824|  2.54k|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 16.5k]
  ------------------
  825|  2.54k|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 2.54k, False: 0]
  ------------------
  826|  2.54k|                            {
  827|  2.54k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 769, False: 1.77k]
  ------------------
  828|    769|                                {
  829|    769|                                    return OpCode::CVTF2D;
  830|    769|                                }
  831|  1.77k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 1.77k, False: 0]
  ------------------
  832|  1.77k|                                {
  833|  1.77k|                                    return OpCode::CVTF2I;
  834|  1.77k|                                }
  835|  2.54k|                            }
  836|      0|                            break;
  837|       |
  838|  11.9k|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 11.9k, False: 4.59k]
  ------------------
  839|  11.9k|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 16.5k]
  ------------------
  840|  11.9k|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 11.9k, False: 0]
  ------------------
  841|  11.9k|                            {
  842|  11.9k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 11.8k, False: 133]
  ------------------
  843|  11.8k|                                {
  844|  11.8k|                                    return OpCode::CVTI2D;
  845|  11.8k|                                }
  846|    133|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 133, False: 0]
  ------------------
  847|    133|                                {
  848|    133|                                    return OpCode::CVTI2F;
  849|    133|                                }
  850|  11.9k|                            }
  851|  16.5k|                    }
  852|  16.5k|                }
  853|  24.9k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 16.8k, False: 8.10k]
  |  Branch (853:26): [True: 16.8k, False: 8.10k]
  |  Branch (853:42): [True: 16.8k, False: 0]
  |  Branch (853:58): [True: 16.8k, False: 0]
  |  Branch (853:74): [True: 16.8k, False: 0]
  ------------------
  854|  24.9k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 16.8k, False: 0]
  |  Branch (854:42): [True: 16.8k, False: 0]
  ------------------
  855|  16.8k|                {
  856|  16.8k|                    return OpCode::MULTUI;
  857|  16.8k|                }
  858|  8.10k|                break;
  859|  41.4k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  8.10k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 649, False: 1.73M]
  ------------------
  863|    649|                const char c1 = token[0u];
  864|    649|                const char c2 = token[1u];
  865|    649|                const char c3 = token[2u];
  866|    649|                const char c4 = token[3u];
  867|    649|                const char c5 = token[4u];
  868|    649|                const char c6 = token[5u];
  869|    649|                const char c7 = token[6u];
  870|       |
  871|    649|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 204, False: 445]
  |  Branch (871:21): [True: 204, False: 445]
  |  Branch (871:37): [True: 204, False: 0]
  |  Branch (871:53): [True: 204, False: 0]
  ------------------
  872|    204|                {
  873|    204|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 83, False: 121]
  |  Branch (873:25): [True: 83, False: 121]
  |  Branch (873:41): [True: 83, False: 0]
  |  Branch (873:54): [True: 83, False: 0]
  |  Branch (873:70): [True: 83, False: 0]
  ------------------
  874|     83|                    {
  875|     83|                        return OpCode::MOVI2FP;
  876|     83|                    }
  877|    121|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 121, False: 0]
  |  Branch (877:25): [True: 121, False: 0]
  |  Branch (877:41): [True: 121, False: 0]
  |  Branch (877:57): [True: 121, False: 0]
  |  Branch (877:70): [True: 121, False: 0]
  ------------------
  878|    121|                    {
  879|    121|                        return OpCode::MOVFP2I;
  880|    121|                    }
  881|    121|                }
  882|    445|                break;
  883|    649|            }
  884|       |
  885|  54.4k|            default: {
  ------------------
  |  Branch (885:13): [True: 54.4k, False: 1.67M]
  ------------------
  886|  54.4k|                break;
  887|    649|            }
  888|  1.73M|        }
  889|       |
  890|       |        // None found
  891|   732k|        return OpCode::NONE;
  892|  1.73M|    }
_ZN3dlx3iceEcc:
   17|  2.72M|    {
   18|  2.72M|        constexpr const char diff = 'a' - 'A';
   19|  2.72M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.71M, False: 1.01M]
  |  Branch (19:28): [True: 256k, False: 753k]
  ------------------
   20|  2.72M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  2.01M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  30.9k|    {
  195|  30.9k|        ParseError err;
  196|       |
  197|  30.9k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  30.9k|        err.m_LineNumber                           = line_number;
  199|  30.9k|        err.m_Column                               = column;
  200|  30.9k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  30.9k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  30.9k|        return err;
  204|  30.9k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  30.9k|    {
  209|  30.9k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  30.9k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  30.9k|                                                         actual_type);
  212|  30.9k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    978|    {
  218|    978|        ParseError err;
  219|       |
  220|    978|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    978|        err.m_LineNumber        = line_number;
  222|    978|        err.m_Column            = column;
  223|    978|        err.invalid_number.text = text;
  224|       |
  225|    978|        return err;
  226|    978|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    978|    {
  230|    978|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    978|                                                token.GetColumn().unsafe(), token.GetText());
  232|    978|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     27|    {
  237|     27|        ParseError err;
  238|       |
  239|     27|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     27|        err.m_LineNumber = line_number;
  241|     27|        err.m_Column     = column;
  242|       |
  243|     27|        return err;
  244|     27|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     27|    {
  249|     27|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     27|                                                                     token.GetColumn().unsafe());
  251|     27|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|   768k|    {
  257|   768k|        ParseError err;
  258|       |
  259|   768k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|   768k|        err.m_LineNumber                   = line_number;
  261|   768k|        err.m_Column                       = column;
  262|   768k|        err.unexpected_token.expected_type = expected_type;
  263|   768k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|   768k|        return err;
  266|   768k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|   768k|    {
  271|   768k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|   768k|                                                  token.GetColumn().unsafe(), expected_type,
  273|   768k|                                                  token.GetType());
  274|   768k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  43.3k|    {
  279|  43.3k|        ParseError err;
  280|       |
  281|  43.3k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  43.3k|        err.m_LineNumber                   = line_number;
  283|  43.3k|        err.m_Column                       = column;
  284|  43.3k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  43.3k|        return err;
  287|  43.3k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  16.9k|    {
  291|  16.9k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  16.9k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  16.9k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   310k|    {
  298|   310k|        ParseError err;
  299|       |
  300|   310k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   310k|        err.m_LineNumber                       = line_number;
  302|   310k|        err.m_Column                           = column;
  303|   310k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   310k|        return err;
  306|   310k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   310k|    {
  311|   310k|        return ConstructInvalidLabelIdentifierParseError(
  312|   310k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   310k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|   122k|    {
  319|   122k|        ParseError err;
  320|       |
  321|   122k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|   122k|        err.m_LineNumber                     = line_number;
  323|   122k|        err.m_Column                         = column;
  324|   122k|        err.label_already_defined.label_name = label_name;
  325|   122k|        err.label_already_defined.at_line    = at_line;
  326|   122k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|   122k|        return err;
  329|   122k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|   122k|    {
  334|   122k|        return ConstructLabelAlreadyDefinedParseError(
  335|   122k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|   122k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|   122k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   617k|    {
  342|   617k|        ParseError err;
  343|       |
  344|   617k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   617k|        err.m_LineNumber = line_number;
  346|   617k|        err.m_Column     = column;
  347|       |
  348|   617k|        return err;
  349|   617k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   617k|    {
  354|   617k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   617k|                                                        token.GetColumn().unsafe());
  356|   617k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   108k|    {
  362|   108k|        ParseError err;
  363|       |
  364|   108k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   108k|        err.m_LineNumber               = line_number;
  366|   108k|        err.m_Column                   = column;
  367|   108k|        err.too_few_arguments.required = required;
  368|   108k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   108k|        return err;
  371|   108k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   108k|    {
  376|   108k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   108k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   108k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  5.20k|    {
  383|  5.20k|        ParseError err;
  384|       |
  385|  5.20k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  5.20k|        err.m_LineNumber           = line_number;
  387|  5.20k|        err.m_Column               = column;
  388|  5.20k|        err.empty_label.label_name = label_name;
  389|       |
  390|  5.20k|        return err;
  391|  5.20k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  5.20k|    {
  395|  5.20k|        return ConstructEmptyLabelParseError(
  396|  5.20k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  5.20k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 4.24k, False: 966]
  ------------------
  398|  4.24k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  5.20k|                        token.GetText());
  400|  5.20k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|  3.09k|    {
  405|  3.09k|        ParseError err;
  406|       |
  407|  3.09k|        err.m_Type       = ParseError::Type::TooManyComma;
  408|  3.09k|        err.m_LineNumber = line_number;
  409|  3.09k|        err.m_Column     = column;
  410|       |
  411|  3.09k|        return err;
  412|  3.09k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|  3.09k|    {
  416|  3.09k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|  3.09k|                                               token.GetColumn().unsafe());
  418|  3.09k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  2.01M|    {
   19|  2.01M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  2.01M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  13.0k|    {
  181|  13.0k|        ParsedProgram program;
  182|       |
  183|  13.0k|        program.m_Tokens = tokens;
  184|       |
  185|  13.0k|        phi::boolean line_has_instruction{false};
  186|  13.0k|        phi::usize   label_count{0u};
  187|       |
  188|  4.28M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 4.26M, False: 13.0k]
  ------------------
  189|  4.26M|        {
  190|  4.26M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  4.26M|            switch (current_token.GetType())
  195|  4.26M|            {
  196|       |                // Ignore comments
  197|   660k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 660k, False: 3.60M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   660k|                    break;
  200|       |
  201|  1.56M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.56M, False: 2.70M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.56M|                    line_has_instruction = false;
  204|  1.56M|                    break;
  205|       |
  206|   468k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 468k, False: 3.80M]
  ------------------
  207|   468k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 20.6k, False: 447k]
  ------------------
  208|  20.6k|                    {
  209|  20.6k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  20.6k|                                current_token, Token::Type::NewLine));
  211|  20.6k|                        break;
  212|  20.6k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   447k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 269k, False: 178k]
  ------------------
  217|   269k|                    {
  218|   269k|                        program.AddParseError(
  219|   269k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   269k|                        break;
  221|   269k|                    }
  222|       |
  223|   178k|                    phi::string_view label_name = current_token.GetText();
  224|   178k|                    label_name.remove_suffix(1u);
  225|       |
  226|   178k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 26.4k, False: 152k]
  ------------------
  227|  26.4k|                    {
  228|  26.4k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  26.4k|                                current_token.GetLineNumber().unsafe(),
  230|  26.4k|                                current_token.GetColumn().unsafe(), label_name));
  231|  26.4k|                        break;
  232|  26.4k|                    }
  233|       |
  234|   152k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 18.7k, False: 133k]
  ------------------
  235|  18.7k|                    {
  236|  18.7k|                        program.AddParseError(
  237|  18.7k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  18.7k|                        break;
  239|  18.7k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|   133k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 122k, False: 11.1k]
  ------------------
  243|   122k|                    {
  244|       |                        // Find first defintions of label
  245|   122k|                        const Token* first_label_definition =
  246|   122k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   122k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|   122k|                                    {
  249|   122k|                                        phi::string_view token_label_name = t.GetText();
  250|   122k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   122k|                                        if (token_label_name == label_name)
  253|   122k|                                        {
  254|   122k|                                            return true;
  255|   122k|                                        }
  256|   122k|                                    }
  257|       |
  258|   122k|                                    return false;
  259|   122k|                                });
  260|       |
  261|   122k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|   122k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|   122k|                                current_token, *first_label_definition));
  265|   122k|                        break;
  266|   122k|                    }
  267|       |
  268|  11.1k|                    program.m_JumpData[label_name] =
  269|  11.1k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  11.1k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  11.1k|                    break;
  276|   133k|                }
  277|       |
  278|   950k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 950k, False: 3.31M]
  ------------------
  279|   950k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 617k, False: 333k]
  ------------------
  280|   617k|                    {
  281|   617k|                        program.AddParseError(
  282|   617k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   617k|                        break;
  284|   617k|                    }
  285|       |
  286|   333k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   333k|                    PHI_ASSERT(current_token.HasHint());
  290|   333k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   333k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   333k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   333k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   333k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   333k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   333k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   333k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   333k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   538k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 511k, False: 27.1k]
  ------------------
  312|   511k|                    {
  313|       |                        // Get next token
  314|   511k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 628, False: 510k]
  ------------------
  315|    628|                        {
  316|    628|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    628|                                    current_token, number_of_argument_required.unsafe(),
  318|    628|                                    argument_num.unsafe()));
  319|    628|                            break;
  320|    628|                        }
  321|       |
  322|   510k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   510k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 115k, False: 395k]
  ------------------
  326|   115k|                        {
  327|   115k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 3.09k, False: 112k]
  ------------------
  328|  3.09k|                            {
  329|  3.09k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|  3.09k|                            }
  331|       |
  332|   115k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|   115k|                            continue;
  335|   115k|                        }
  336|       |
  337|   395k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 107k, False: 287k]
  ------------------
  338|   107k|                        {
  339|   107k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   107k|                                    token, number_of_argument_required.unsafe(),
  341|   107k|                                    argument_num.unsafe()));
  342|   107k|                            break;
  343|   107k|                        }
  344|       |
  345|   287k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   287k|                                parse_instruction_argument(
  347|   287k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   287k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 197k, False: 89.8k]
  ------------------
  349|   197k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   197k|                            break;
  352|   197k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  89.8k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  89.8k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  89.8k|                        argument_num++;
  359|  89.8k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  89.8k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   333k|                    program.m_Instructions.emplace_back(instruction);
  367|   333k|                    line_has_instruction = true;
  368|   333k|                    break;
  369|   950k|                }
  370|       |
  371|   620k|                default:
  ------------------
  |  Branch (371:17): [True: 620k, False: 3.64M]
  ------------------
  372|   620k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   620k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 313k, False: 307k]
  ------------------
  374|   313k|                    {
  375|   313k|                        expected_token_type = Token::Type::NewLine;
  376|   313k|                    }
  377|       |
  378|   620k|                    program.AddParseError(
  379|   620k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   620k|                    break;
  381|  4.26M|            }
  382|  4.26M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  13.0k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 938, False: 12.0k]
  ------------------
  386|    938|        {
  387|  10.3k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 9.37k, False: 938]
  ------------------
  388|  9.37k|            {
  389|  9.37k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  9.37k|                const Token& token = *it;
  392|  9.37k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 5.20k, False: 4.16k]
  ------------------
  393|  5.20k|                {
  394|  5.20k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  5.20k|                    --label_count;
  396|  5.20k|                }
  397|  9.37k|            }
  398|    938|        }
  399|       |
  400|  13.0k|        return program;
  401|  13.0k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  13.0k|    {
  405|  13.0k|        TokenStream tokens = Tokenize(source);
  406|  13.0k|        return Parse(tokens);
  407|  13.0k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   287k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   287k|        switch (token.GetType())
   37|   287k|        {
   38|  13.3k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 13.3k, False: 274k]
  ------------------
   39|  13.3k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 790, False: 12.5k]
  ------------------
   40|  13.3k|                                          ArgumentType::AddressDisplacement))
   41|    790|                {
   42|    790|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    790|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    790|                    return {};
   46|    790|                }
   47|       |
   48|       |                // Get address displacement
   49|  12.5k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  12.5k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  12.5k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 27, False: 12.5k]
  ------------------
   54|     27|                {
   55|     27|                    program.AddParseError(
   56|     27|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     27|                    return {};
   58|     27|                }
   59|       |
   60|  12.5k|                auto         it           = tokens.current_position();
   61|  12.5k|                const Token& first_token  = tokens.consume();
   62|  12.5k|                const Token& second_token = tokens.consume();
   63|  12.5k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  12.5k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 12.5k, False: 0]
  ------------------
   66|  12.5k|                {
   67|  12.5k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  12.5k|                            first_token, Token::Type::OpenBracket));
   69|  12.5k|                    return {};
   70|  12.5k|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  53.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 53.9k, False: 233k]
  ------------------
   97|  53.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 9.23k, False: 44.7k]
  ------------------
   98|  9.23k|                {
   99|  9.23k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|  9.23k|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|  9.23k|                    return {};
  102|  9.23k|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  44.7k|                return ConstructInstructionArgumentRegisterInt(
  108|  44.7k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  53.9k|            }
  110|  4.06k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 4.06k, False: 283k]
  ------------------
  111|  4.06k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 3.89k, False: 178]
  ------------------
  112|  3.89k|                {
  113|  3.89k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  3.89k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  3.89k|                    return {};
  116|  3.89k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|    178|                return ConstructInstructionArgumentRegisterFloat(
  122|    178|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  4.06k|            }
  124|  16.9k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 16.9k, False: 270k]
  ------------------
  125|  16.9k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  16.9k|                return {};
  128|  4.06k|            }
  129|  59.6k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 59.6k, False: 227k]
  ------------------
  130|       |                // Parse as Label
  131|  59.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 11.2k, False: 48.4k]
  ------------------
  132|  11.2k|                {
  133|  11.2k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  11.2k|                            token, expected_argument_type, ArgumentType::Label));
  135|  11.2k|                    return {};
  136|  11.2k|                }
  137|       |
  138|  48.4k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 48.4k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  48.4k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 22.0k, False: 26.4k]
  ------------------
  145|  22.0k|                {
  146|  22.0k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  22.0k|                    return {};
  148|  22.0k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  26.4k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  48.4k|            }
  154|  25.3k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 25.3k, False: 262k]
  ------------------
  155|  25.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 5.82k, False: 19.5k]
  ------------------
  156|  5.82k|                {
  157|  5.82k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  5.82k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  5.82k|                    return {};
  160|  5.82k|                }
  161|       |
  162|  19.5k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 18.5k, False: 978]
  ------------------
  163|  18.5k|                {
  164|  18.5k|                    return ConstructInstructionArgumentImmediateValue(
  165|  18.5k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  18.5k|                }
  167|       |
  168|    978|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    978|                return {};
  170|  19.5k|            }
  171|       |
  172|   114k|            default:
  ------------------
  |  Branch (172:13): [True: 114k, False: 173k]
  ------------------
  173|   114k|                program.AddParseError(
  174|   114k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|   114k|                return {};
  176|   287k|        }
  177|   287k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  2.13M|                                tokens.find_first_token_if([&](const Token& t) {
  247|  2.13M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 607k, False: 1.52M]
  ------------------
  248|   607k|                                    {
  249|   607k|                                        phi::string_view token_label_name = t.GetText();
  250|   607k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|   607k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 122k, False: 485k]
  ------------------
  253|   122k|                                        {
  254|   122k|                                            return true;
  255|   122k|                                        }
  256|   607k|                                    }
  257|       |
  258|  2.01M|                                    return false;
  259|  2.13M|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    398|    {
  354|    398|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 398]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    398|        m_CurrentProgram = &program;
  361|       |
  362|    398|        m_ProgramCounter               = 0u;
  363|    398|        m_Halted                       = false;
  364|    398|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    398|        m_LastRaisedException          = Exception::None;
  366|    398|        m_CurrentStepCount             = 0u;
  367|       |
  368|    398|        return true;
  369|    398|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  2.00M|    {
   13|  2.00M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 495k, False: 1.50M]
  ------------------
   14|   495k|        {
   15|   495k|            const char first_char = token[0u];
   16|   495k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 130k, False: 365k]
  |  Branch (16:38): [True: 57.4k, False: 308k]
  ------------------
   17|   187k|            {
   18|   187k|                const char second_char = token[1u];
   19|   187k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 186k, False: 708]
  |  Branch (19:43): [True: 148k, False: 38.1k]
  ------------------
   20|   148k|                {
   21|   148k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|   148k|                }
   23|   187k|            }
   24|   495k|        }
   25|  1.50M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 614k, False: 895k]
  ------------------
   26|   614k|        {
   27|   614k|            const char first_char = token[0u];
   28|   614k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 61.3k, False: 552k]
  |  Branch (28:38): [True: 25.8k, False: 526k]
  ------------------
   29|  87.1k|            {
   30|  87.1k|                const char second_char = token[1u];
   31|  87.1k|                const char third_char  = token[2u];
   32|       |
   33|  87.1k|                switch (second_char)
   34|  87.1k|                {
   35|  30.0k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 30.0k, False: 57.1k]
  ------------------
   36|  30.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 29.8k, False: 178]
  |  Branch (36:50): [True: 17.8k, False: 12.0k]
  ------------------
   37|  17.8k|                        {
   38|  17.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  17.8k|                        }
   40|  12.2k|                        break;
   41|  30.0k|                    }
   42|  46.8k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 46.8k, False: 40.3k]
  ------------------
   43|  46.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 46.7k, False: 114]
  |  Branch (43:50): [True: 34.2k, False: 12.4k]
  ------------------
   44|  34.2k|                        {
   45|  34.2k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  34.2k|                        }
   47|  12.6k|                        break;
   48|  46.8k|                    }
   49|  12.6k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 9.38k, False: 77.8k]
  ------------------
   50|  9.38k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 212, False: 9.17k]
  |  Branch (50:50): [True: 9.10k, False: 71]
  ------------------
   51|  9.31k|                        {
   52|  9.31k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  9.31k|                        }
   54|     71|                        break;
   55|  9.38k|                    }
   56|    936|                    default: {
  ------------------
  |  Branch (56:21): [True: 936, False: 86.2k]
  ------------------
   57|    936|                        break;
   58|  9.38k|                    }
   59|  87.1k|                }
   60|  87.1k|            }
   61|   614k|        }
   62|       |
   63|  1.79M|        return IntRegisterID::None;
   64|  2.00M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  1.79M|    {
   68|  1.79M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 346k, False: 1.44M]
  ------------------
   69|   346k|        {
   70|   346k|            const char first_char = token[0u];
   71|   346k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 25.8k, False: 321k]
  |  Branch (71:38): [True: 8.83k, False: 312k]
  ------------------
   72|  34.7k|            {
   73|  34.7k|                const char second_char = token[1u];
   74|  34.7k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 34.5k, False: 145]
  |  Branch (74:43): [True: 25.7k, False: 8.81k]
  ------------------
   75|  25.7k|                {
   76|  25.7k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  25.7k|                }
   78|  34.7k|            }
   79|   346k|        }
   80|  1.44M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 552k, False: 895k]
  ------------------
   81|   552k|        {
   82|   552k|            const char first_char = token[0u];
   83|   552k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 37.3k, False: 515k]
  |  Branch (83:38): [True: 12.5k, False: 502k]
  ------------------
   84|  49.9k|            {
   85|  49.9k|                const char second_char = token[1u];
   86|  49.9k|                const char third_char  = token[2u];
   87|       |
   88|  49.9k|                switch (second_char)
   89|  49.9k|                {
   90|  18.7k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 18.7k, False: 31.1k]
  ------------------
   91|  18.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 18.6k, False: 107]
  |  Branch (91:50): [True: 18.5k, False: 84]
  ------------------
   92|  18.5k|                        {
   93|  18.5k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  18.5k|                        }
   95|    191|                        break;
   96|  18.7k|                    }
   97|  12.4k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 12.4k, False: 37.4k]
  ------------------
   98|  12.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 375, False: 12.1k]
  |  Branch (98:50): [True: 302, False: 73]
  ------------------
   99|    302|                        {
  100|    302|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|    302|                        }
  102|  12.1k|                        break;
  103|  12.4k|                    }
  104|  18.5k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 18.5k, False: 31.3k]
  ------------------
  105|  18.5k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 18.3k, False: 221]
  |  Branch (105:50): [True: 121, False: 100]
  ------------------
  106|  18.4k|                        {
  107|  18.4k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|  18.4k|                        }
  109|    100|                        break;
  110|  18.5k|                    }
  111|    118|                    default: {
  ------------------
  |  Branch (111:21): [True: 118, False: 49.8k]
  ------------------
  112|    118|                        break;
  113|  18.5k|                    }
  114|  49.9k|                }
  115|  49.9k|            }
  116|   552k|        }
  117|       |
  118|  1.73M|        return FloatRegisterID::None;
  119|  1.79M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  2.04M|    {
  123|  2.04M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 511k, False: 1.53M]
  ------------------
  124|   511k|        {
  125|   511k|            const char c1 = token[0u];
  126|   511k|            const char c2 = token[1u];
  127|   511k|            const char c3 = token[2u];
  128|   511k|            const char c4 = token[3u];
  129|       |
  130|   511k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 69.4k, False: 442k]
  |  Branch (130:34): [True: 165, False: 442k]
  |  Branch (130:49): [True: 69.4k, False: 193]
  |  Branch (130:62): [True: 127, False: 66]
  ------------------
  131|   511k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 69.4k, False: 132]
  |  Branch (131:34): [True: 66, False: 66]
  |  Branch (131:49): [True: 69.4k, False: 66]
  |  Branch (131:62): [True: 0, False: 66]
  ------------------
  132|   511k|        }
  133|       |
  134|  1.53M|        return false;
  135|  2.04M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  3.45M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.35M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  13.2M|    {
   41|  13.2M|        return m_Type;
   42|  13.2M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  8.69M|    {
   51|  8.69M|        return m_LineNumber;
   52|  8.69M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  16.8M|    {
   56|  16.8M|        return m_Column;
   57|  16.8M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  11.5M|    {
   61|  11.5M|        return m_Text.length();
   62|  11.5M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.82M|    {
   66|  1.82M|        return m_Text;
   67|  1.82M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   365k|    {
   80|   365k|        return m_HasHint;
   81|   365k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   409k|    {
   85|   409k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   409k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   409k|                   m_Type == Type::ImmediateInteger);
   88|   409k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   409k|        return m_Hint;
   91|   409k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  13.0k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  13.0k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  13.0k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  12.5k|    {
   51|  12.5k|        auto it = m_Iterator;
   52|  50.1k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 37.6k, False: 12.5k]
  ------------------
   53|  37.6k|        {
   54|  37.6k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 27, False: 37.5k]
  ------------------
   55|     27|            {
   56|     27|                return false;
   57|     27|            }
   58|  37.6k|        }
   59|       |
   60|  12.5k|        return true;
   61|  12.5k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.79M|    {
   65|  4.79M|        return m_Iterator != m_Tokens.end();
   66|  4.79M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.81M|    {
   70|  4.81M|        return m_Iterator == m_Tokens.end();
   71|  4.81M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.81M|    {
   85|  4.81M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.81M|        return *m_Iterator++;
   91|  4.81M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  12.5k|    {
  164|  12.5k|        return m_Iterator;
  165|  12.5k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  13.0k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  13.0k|        return m_Tokens.begin();
  188|  13.0k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  13.0k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  13.0k|        return m_Tokens.end();
  206|  13.0k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    938|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    938|        return m_Tokens.rbegin();
  224|    938|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  9.37k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  9.37k|        return m_Tokens.rend();
  233|  9.37k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  13.0k|    {
   66|  13.0k|        TokenStream tokens;
   67|       |
   68|  13.0k|        phi::string_view current_token;
   69|       |
   70|  13.0k|        phi::u64 current_line_number{1u};
   71|  13.0k|        phi::u64 current_column{1u};
   72|  13.0k|        phi::u64 token_begin{0u};
   73|       |
   74|  13.0k|        phi::boolean parsing_comment{false};
   75|       |
   76|  11.0M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 11.0M, False: 13.0k]
  ------------------
   77|  11.0M|        {
   78|  11.0M|            const char c{source.at(i)};
   79|       |
   80|  11.0M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.70M, False: 9.37M]
  ------------------
   81|  1.70M|            {
   82|  1.70M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 512k, False: 1.18M]
  ------------------
   83|   512k|                {
   84|       |                    // Skip empty lines
   85|   512k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   512k|                                        current_line_number, current_column);
   87|       |
   88|   512k|                    parsing_comment = false;
   89|   512k|                    current_line_number += 1u;
   90|   512k|                    current_column = 1u;
   91|   512k|                    continue;
   92|   512k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.18M|                tokens.emplace_back(ParseToken(
   96|  1.18M|                        source.substring_view(
   97|  1.18M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.18M|                                current_token.length()),
   99|  1.18M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.18M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.18M|                                    current_line_number, current_column);
  103|       |
  104|  1.18M|                current_token   = phi::string_view{};
  105|  1.18M|                parsing_comment = false;
  106|  1.18M|                current_line_number += 1u;
  107|  1.18M|                current_column = 0u;
  108|  1.18M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  9.37M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 81.7k, False: 9.29M]
  |  Branch (110:34): [True: 698k, False: 8.59M]
  ------------------
  111|   780k|            {
  112|   780k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 660k, False: 119k]
  ------------------
  113|   660k|                {
  114|   660k|                    token_begin = i;
  115|   660k|                }
  116|   119k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 69.6k, False: 50.0k]
  ------------------
  117|  69.6k|                {
  118|  69.6k|                    tokens.emplace_back(ParseToken(
  119|  69.6k|                            source.substring_view(
  120|  69.6k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  69.6k|                                    current_token.length()),
  122|  69.6k|                            current_line_number, current_column - current_token.length()));
  123|  69.6k|                    token_begin   = i;
  124|  69.6k|                    current_token = phi::string_view{};
  125|  69.6k|                }
  126|       |
  127|   780k|                parsing_comment = true;
  128|   780k|                current_token   = source.substring_view(
  129|   780k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   780k|                        current_token.length() + 1u);
  131|   780k|            }
  132|  8.59M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 861k, False: 7.73M]
  ------------------
  133|   861k|            {
  134|       |                // simply append the character
  135|   861k|                current_token = source.substring_view(
  136|   861k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   861k|                        current_token.length() + 1u);
  138|   861k|            }
  139|  7.73M|            else
  140|  7.73M|            {
  141|       |                // Not parsing a comment
  142|  7.73M|                switch (c)
  143|  7.73M|                {
  144|   926k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 926k, False: 6.80M]
  ------------------
  145|   926k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 486, False: 7.73M]
  ------------------
  146|   926k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 7.73M]
  ------------------
  147|   926k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 3.66k, False: 923k]
  ------------------
  148|  3.66k|                        {
  149|  3.66k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  3.66k|                            continue;
  152|  3.66k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   923k|                        tokens.emplace_back(ParseToken(
  156|   923k|                                source.substring_view(
  157|   923k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   923k|                                        current_token.length()),
  159|   923k|                                current_line_number, current_column - current_token.length()));
  160|   923k|                        current_token = phi::string_view{};
  161|   923k|                        break;
  162|   201k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 201k, False: 7.53M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|   201k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 182k, False: 18.6k]
  ------------------
  165|   182k|                        {
  166|   182k|                            current_token = source.substring_view(
  167|   182k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|   182k|                                    current_token.length() + 1u);
  169|   182k|                            tokens.emplace_back(ParseToken(
  170|   182k|                                    source.substring_view(
  171|   182k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|   182k|                                                    token_begin),
  173|   182k|                                            current_token.length()),
  174|   182k|                                    current_line_number,
  175|   182k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|   182k|                            current_token = phi::string_view{};
  178|   182k|                        }
  179|  18.6k|                        else
  180|  18.6k|                        {
  181|       |                            // Orphan colon
  182|  18.6k|                            token_begin = i;
  183|       |
  184|  18.6k|                            tokens.emplace_back(
  185|  18.6k|                                    Token::Type::Colon,
  186|  18.6k|                                    source.substring_view(
  187|  18.6k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  18.6k|                                                    token_begin),
  189|  18.6k|                                            1u),
  190|  18.6k|                                    current_line_number, current_column);
  191|  18.6k|                        }
  192|   201k|                        break;
  193|   333k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 333k, False: 7.40M]
  ------------------
  194|   391k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 58.3k, False: 7.67M]
  ------------------
  195|   392k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 967, False: 7.73M]
  ------------------
  196|   392k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 337k, False: 54.7k]
  ------------------
  197|   337k|                        {
  198|   337k|                            tokens.emplace_back(ParseToken(
  199|   337k|                                    source.substring_view(
  200|   337k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   337k|                                                    token_begin),
  202|   337k|                                            current_token.length()),
  203|   337k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   337k|                            current_token = phi::string_view{};
  206|   337k|                        }
  207|       |
  208|   392k|                        Token::Type type;
  209|   392k|                        switch (c)
  210|   392k|                        {
  211|   333k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 333k, False: 59.3k]
  ------------------
  212|   333k|                                type = Token::Type::Comma;
  213|   333k|                                break;
  214|  58.3k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 58.3k, False: 334k]
  ------------------
  215|  58.3k|                                type = Token::Type::OpenBracket;
  216|  58.3k|                                break;
  217|    967|                            case ')':
  ------------------
  |  Branch (217:29): [True: 967, False: 391k]
  ------------------
  218|    967|                                type = Token::Type::ClosingBracket;
  219|    967|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 392k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   392k|#endif
  225|   392k|                        }
  226|       |
  227|   392k|                        token_begin = i;
  228|       |
  229|   392k|                        tokens.emplace_back(
  230|   392k|                                type,
  231|   392k|                                source.substring_view(
  232|   392k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   392k|                                        1u),
  234|   392k|                                current_line_number, current_column);
  235|   392k|                        break;
  236|       |
  237|  6.21M|                    default:
  ------------------
  |  Branch (237:21): [True: 6.21M, False: 1.52M]
  ------------------
  238|  6.21M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 1.97M, False: 4.23M]
  ------------------
  239|  1.97M|                        {
  240|  1.97M|                            token_begin = i;
  241|  1.97M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  6.21M|                        current_token = source.substring_view(
  245|  6.21M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  6.21M|                                current_token.length() + 1u);
  247|  7.73M|                }
  248|  7.73M|            }
  249|       |
  250|  10.5M|            current_column += 1u;
  251|  10.5M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  13.0k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 4.13k, False: 8.89k]
  ------------------
  255|  4.13k|        {
  256|  4.13k|            tokens.emplace_back(
  257|  4.13k|                    ParseToken(source.substring_view(
  258|  4.13k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  4.13k|                                       current_token.length()),
  260|  4.13k|                               current_line_number, current_column - current_token.length()));
  261|  4.13k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  13.0k|        tokens.finalize();
  265|       |
  266|  13.0k|        return tokens;
  267|  13.0k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  2.70M|    {
   14|  2.70M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 74.1k, False: 2.63M]
  |  Branch (14:13): [True: 68.9k, False: 2.63M]
  |  Branch (14:36): [True: 68.9k, False: 5.21k]
  ------------------
   15|  68.9k|        {
   16|  68.9k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  68.9k|            if (number)
  ------------------
  |  Branch (18:17): [True: 53.2k, False: 15.6k]
  ------------------
   19|  53.2k|            {
   20|  53.2k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  53.2k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  53.2k|            }
   23|       |
   24|  15.6k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  68.9k|        }
   26|       |
   27|  2.63M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 31.9k, False: 2.60M]
  |  Branch (27:13): [True: 730k, False: 1.90M]
  |  Branch (27:36): [True: 698k, False: 1.90M]
  ------------------
   28|   730k|        {
   29|   730k|            return {Token::Type::Comment, token, line_number, column};
   30|   730k|        }
   31|       |
   32|  1.90M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 58.8k, False: 1.84M]
  ------------------
   33|  58.8k|        {
   34|  58.8k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  58.8k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  58.8k|        }
   37|       |
   38|  1.84M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 69.4k, False: 1.77M]
  ------------------
   39|  69.4k|        {
   40|  69.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  69.4k|        }
   42|       |
   43|  1.77M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 185k, False: 1.59M]
  ------------------
   44|   185k|        {
   45|   185k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   185k|                    static_cast<phi::uint32_t>(id)};
   47|   185k|        }
   48|       |
   49|  1.59M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 63.0k, False: 1.52M]
  ------------------
   50|  63.0k|        {
   51|  63.0k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  63.0k|                    static_cast<phi::uint32_t>(id)};
   53|  63.0k|        }
   54|       |
   55|  1.52M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 996k, False: 532k]
  ------------------
   56|   996k|        {
   57|   996k|            return {Token::Type::OpCode, token, line_number, column,
   58|   996k|                    static_cast<phi::uint32_t>(opcode)};
   59|   996k|        }
   60|       |
   61|   532k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  1.52M|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  13.0k|    {
   53|       |        // Constants
   54|  13.0k|        constexpr std::uint8_t number_of_opcodes =
   55|  13.0k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  13.0k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  13.0k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  13.0k|        std::string ret;
   60|       |
   61|  2.50M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 2.49M, False: 12.8k]
  ------------------
   62|  2.49M|        {
   63|  2.49M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  2.49M|            switch (current_value)
   66|  2.49M|            {
   67|       |                // OpCode
   68|   885k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 885k, False: 1.60M]
  ------------------
   69|       |                    // Has one more value
   70|   885k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 884k, False: 833]
  ------------------
   71|   884k|                    {
   72|   884k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   884k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   884k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 33, False: 884k]
  ------------------
   77|     33|                        {
   78|     33|                            return detail::ErrorString;
   79|     33|                        }
   80|   884k|                    }
   81|   885k|                    break;
   82|   885k|                }
   83|       |
   84|       |                // Int Register
   85|   885k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 197k, False: 2.29M]
  ------------------
   86|       |                    // Has one more value
   87|   197k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 197k, False: 196]
  ------------------
   88|   197k|                    {
   89|   197k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   197k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   197k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 6, False: 197k]
  ------------------
   93|      6|                        {
   94|      6|                            return detail::ErrorString;
   95|      6|                        }
   96|   197k|                    }
   97|   197k|                    break;
   98|   197k|                }
   99|       |
  100|       |                // Float register
  101|   197k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 69.2k, False: 2.42M]
  ------------------
  102|       |                    // Has one more value
  103|  69.2k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 69.2k, False: 1]
  ------------------
  104|  69.2k|                    {
  105|  69.2k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  69.2k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  69.2k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 27, False: 69.2k]
  ------------------
  109|     27|                        {
  110|     27|                            return detail::ErrorString;
  111|     27|                        }
  112|  69.2k|                    }
  113|  69.2k|                    break;
  114|  69.2k|                }
  115|       |
  116|       |                // Floating point status register
  117|  70.6k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 70.6k, False: 2.41M]
  ------------------
  118|  70.6k|                    ret += "FPSR";
  119|  70.6k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 8, False: 70.6k]
  ------------------
  120|      8|                    {
  121|      8|                        return detail::ErrorString;
  122|      8|                    }
  123|       |
  124|  70.6k|                    break;
  125|  70.6k|                }
  126|       |
  127|       |                // Immediate integer
  128|  86.4k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 86.4k, False: 2.40M]
  ------------------
  129|  86.4k|                    ret += "#";
  130|  86.4k|                    [[fallthrough]];
  131|  86.4k|                }
  132|       |
  133|       |                // Integer literal
  134|   167k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 81.4k, False: 2.40M]
  ------------------
  135|   167k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   167k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 167k, False: 264]
  ------------------
  138|   167k|                    {
  139|   167k|                        std::int16_t value = 0;
  140|       |
  141|   502k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 335k, False: 167k]
  ------------------
  142|   335k|                        {
  143|   335k|                            value <<= 8;
  144|   335k|                            value &= data[index++];
  145|   335k|                        }
  146|       |
  147|   167k|                        ret += std::to_string(value);
  148|   167k|                    }
  149|   167k|                    break;
  150|  86.4k|                }
  151|       |
  152|       |                // Label
  153|  31.9k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 31.9k, False: 2.45M]
  ------------------
  154|  31.9k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  31.9k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 31.9k, False: 33]
  ------------------
  157|  31.9k|                    {
  158|  31.9k|                        std::string label_name = "lbl_";
  159|       |
  160|   191k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 159k, False: 31.9k]
  ------------------
  161|   159k|                        {
  162|   159k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   159k|                            label_name += c;
  165|   159k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  31.9k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 31.7k, False: 173]
  |  Branch (168:45): [True: 21.2k, False: 10.4k]
  ------------------
  169|  21.2k|                        {
  170|  21.2k|                            label_name += ':';
  171|  21.2k|                            ret += label_name;
  172|  21.2k|                        }
  173|  10.6k|                        else
  174|  10.6k|                        {
  175|  10.6k|                            ret += label_name;
  176|  10.6k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 2, False: 10.6k]
  ------------------
  177|      2|                            {
  178|      2|                                return detail::ErrorString;
  179|      2|                            }
  180|  10.6k|                        }
  181|  31.9k|                    }
  182|  31.9k|                    break;
  183|  31.9k|                }
  184|       |
  185|       |                // Newline
  186|   370k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 370k, False: 2.12M]
  ------------------
  187|   370k|                    ret += '\n';
  188|   370k|                    break;
  189|  31.9k|                }
  190|       |
  191|       |                // Comment
  192|   696k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 696k, False: 1.79M]
  ------------------
  193|   696k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   696k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 696k, False: 477]
  ------------------
  196|   696k|                    {
  197|   696k|                        std::string comment = "; ";
  198|       |
  199|  4.17M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 3.47M, False: 696k]
  ------------------
  200|  3.47M|                        {
  201|  3.47M|                            comment += static_cast<char>(data[index++]);
  202|  3.47M|                        }
  203|       |
  204|   696k|                        ret += comment + '\n';
  205|   696k|                    }
  206|   696k|                    break;
  207|  31.9k|                }
  208|       |
  209|       |                // Ignore
  210|    136|                default:
  ------------------
  |  Branch (210:17): [True: 136, False: 2.49M]
  ------------------
  211|    136|                    return detail::ErrorString;
  212|  2.49M|            }
  213|  2.49M|        }
  214|       |
  215|  12.8k|        return ret;
  216|  13.0k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|  1.23M|        {
   20|  1.23M|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 1.22M, False: 3.46k]
  ------------------
   21|  1.22M|            {
   22|  1.22M|                std::uint8_t val = data[index++];
   23|  1.22M|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 925k, False: 303k]
  ------------------
   24|   925k|                {
   25|   925k|                    text += ' ';
   26|   925k|                }
   27|   303k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 303k, False: 76]
  ------------------
   28|   303k|                {
   29|   303k|                    text += ',';
   30|   303k|                }
   31|     76|                else
   32|     76|                {
   33|     76|                    return false;
   34|     76|                }
   35|  1.22M|            }
   36|       |
   37|  1.23M|            return true;
   38|  1.23M|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   159k|        {
   42|   159k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 122k, False: 36.6k]
  ------------------
   43|   122k|            {
   44|   122k|                return '_';
   45|   122k|            }
   46|       |
   47|  36.6k|            return c;
   48|   159k|        }

LLVMFuzzerTestOneInput:
   11|  13.0k|{
   12|  13.0k|    static dlxemu::Emulator emu;
   13|       |
   14|  13.0k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|  13.0k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  13.0k|    editor.SetText(source);
   20|  13.0k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  13.0k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  13.0k|    editor.ColorizeInternal();
   25|       |
   26|  13.0k|    return 0;
   27|  13.0k|}


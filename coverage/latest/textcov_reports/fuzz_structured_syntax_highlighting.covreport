_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  196|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  201|  17.5k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  239|  3.51k|    {
  240|  3.51k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (240:13): [True: 2.28k, False: 1.23k]
  ------------------
  241|  2.28k|        {
  242|  2.28k|            return m_Line < other.m_Line;
  243|  2.28k|        }
  244|       |
  245|  1.23k|        return m_Column <= other.m_Column;
  246|  3.51k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  250|      1|    {
  251|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (251:13): [True: 0, False: 1]
  ------------------
  252|      0|        {
  253|      0|            return m_Line > other.m_Line;
  254|      0|        }
  255|       |
  256|      1|        return m_Column >= other.m_Column;
  257|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  264|   487k|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  292|      1|    {
  293|      1|        Colorize();
  294|      1|        m_Lines.push_back(Line());
  295|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  298|      1|    {
  299|      1|        VerifyInternalState();
  300|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  348|  3.51k|    {
  349|  3.51k|        m_ErrorMarkers.clear();
  350|  3.51k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  413|  3.51k|    {
  414|  3.51k|        m_Breakpoints.clear();
  415|  3.51k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  493|  3.51k|    {
  494|  3.51k|        m_Lines.clear();
  495|  3.51k|        ResetState();
  496|  3.51k|        m_Lines.emplace_back(Line());
  497|       |
  498|  3.51k|        for (const char character : text)
  ------------------
  |  Branch (498:35): [True: 627k, False: 3.51k]
  ------------------
  499|   627k|        {
  500|   627k|            if (character == '\r' ||
  ------------------
  |  Branch (500:17): [True: 1.93k, False: 625k]
  |  Branch (500:17): [True: 40.4k, False: 586k]
  ------------------
  501|   627k|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (501:18): [True: 141k, False: 483k]
  |  Branch (501:48): [True: 42.0k, False: 99.1k]
  |  Branch (501:69): [True: 38.5k, False: 3.50k]
  ------------------
  502|  40.4k|            {
  503|       |                // ignore the carriage return character and control characters
  504|  40.4k|            }
  505|   586k|            else if (character == '\n')
  ------------------
  |  Branch (505:22): [True: 99.1k, False: 487k]
  ------------------
  506|  99.1k|            {
  507|  99.1k|                m_Lines.emplace_back(Line());
  508|  99.1k|            }
  509|   487k|            else
  510|   487k|            {
  511|   487k|                m_Lines.back().emplace_back(
  512|   487k|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  513|   487k|            }
  514|   627k|        }
  515|       |
  516|  3.51k|        m_TextChanged = true;
  517|  3.51k|        m_ScrollToTop = true;
  518|       |
  519|  3.51k|        m_UndoBuffer.clear();
  520|  3.51k|        m_UndoIndex = 0u;
  521|       |
  522|  3.51k|        Colorize();
  523|  3.51k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  526|  3.51k|    {
  527|  3.51k|        const phi::u32 max_line = GetMaxLineNumber();
  528|       |
  529|  3.51k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  530|  3.51k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1493|      1|    {
 1494|       |        // Lines should never be empty
 1495|      1|        PHI_ASSERT(!m_Lines.empty());
 1496|       |
 1497|       |        // Verify Selection is still in a valid state
 1498|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1499|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1500|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1501|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1502|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1503|       |
 1504|       |        // Verify cursor position
 1505|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1506|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1507|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1508|       |
 1509|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1510|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1511|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1512|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1513|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1514|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1515|       |#endif
 1516|       |
 1517|       |        // Verify that all breakpoints are on existing lines
 1518|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1518:35): [True: 0, False: 1]
  ------------------
 1519|      0|        {
 1520|      0|            PHI_ASSERT(break_point != 0u);
 1521|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1522|      0|        }
 1523|       |
 1524|       |        // Verify that all error markers are on existing lines
 1525|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1525:34): [True: 0, False: 1]
  ------------------
 1526|      0|        {
 1527|      0|            const phi::u32 line_number = error_marker.first;
 1528|       |
 1529|      0|            PHI_ASSERT(line_number != 0u);
 1530|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1531|      0|        }
 1532|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1535|      1|    {
 1536|      1|        constexpr const static Palette palette = {{
 1537|      1|                0xff7f7f7f, // Default
 1538|      1|                0xffd69c56, // OpCode
 1539|      1|                0xff00ff00, // Register
 1540|      1|                0xff7070e0, // IntegerLiteral
 1541|      1|                0xff206020, // Comment
 1542|      1|                0xff101010, // Background
 1543|      1|                0xffe0e0e0, // Cursor
 1544|      1|                0x80a06020, // Selection
 1545|      1|                0x800020ff, // ErrorMarker
 1546|      1|                0x40f08000, // Breakpoint
 1547|      1|                0xff707000, // Line number
 1548|      1|                0x40000000, // Current line fill
 1549|      1|                0x40808080, // Current line fill (inactive)
 1550|      1|                0x40a0a0a0, // Current line edge
 1551|      1|        }};
 1552|       |
 1553|      1|        return palette;
 1554|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1721|  3.51k|    {
 1722|       |        // TODO: This is quite unreadable
 1723|  3.51k|        const phi::u32 to_line =
 1724|  3.51k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1724:17): [True: 3.51k, False: 0]
  ------------------
 1725|  3.51k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1726|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1727|       |
 1728|  3.51k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1729|  3.51k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1730|  3.51k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1731|  3.51k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1732|  3.51k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1838|  3.51k|    {
 1839|  3.51k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1840|  3.51k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1841|  3.51k|        PHI_ASSERT(start <= end);
 1842|       |
 1843|  3.51k|        std::string result;
 1844|       |
 1845|  3.51k|        phi::u32   lstart = start.m_Line;
 1846|  3.51k|        phi::u32   lend   = end.m_Line;
 1847|  3.51k|        phi::u32   istart = GetCharacterIndex(start);
 1848|  3.51k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1849|  3.51k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1850|  3.51k|        phi::usize size   = 0u;
 1851|       |
 1852|   106k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1852:35): [True: 102k, False: 3.51k]
  ------------------
 1853|   102k|        {
 1854|   102k|            PHI_ASSERT(i < m_Lines.size());
 1855|   102k|            size += m_Lines[i.unsafe()].size();
 1856|   102k|        }
 1857|       |
 1858|  3.51k|        result.reserve((size + size / 8u).unsafe());
 1859|       |
 1860|   590k|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1860:16): [True: 196k, False: 393k]
  |  Branch (1860:16): [True: 586k, False: 3.51k]
  |  Branch (1860:33): [True: 389k, False: 3.51k]
  ------------------
 1861|   586k|        {
 1862|   586k|            PHI_ASSERT(lstart < m_Lines.size());
 1863|       |
 1864|   586k|            const Line& line = m_Lines[lstart.unsafe()];
 1865|   586k|            if (istart < line.size())
  ------------------
  |  Branch (1865:17): [True: 487k, False: 99.1k]
  ------------------
 1866|   487k|            {
 1867|   487k|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1868|   487k|                istart++;
 1869|   487k|            }
 1870|  99.1k|            else
 1871|  99.1k|            {
 1872|  99.1k|                istart = 0u;
 1873|  99.1k|                ++lstart;
 1874|       |
 1875|  99.1k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1875:21): [True: 99.1k, False: 0]
  ------------------
 1876|  99.1k|                {
 1877|  99.1k|                    result += '\n';
 1878|  99.1k|                }
 1879|  99.1k|            }
 1880|   586k|        }
 1881|       |
 1882|  3.51k|        return result;
 1883|  3.51k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2421|  7.03k|    {
 2422|  7.03k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2423|       |
 2424|  7.03k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2425|  7.03k|        phi::u32    index = 0u;
 2426|   147k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2426:35): [True: 144k, False: 3.66k]
  |  Branch (2426:35): [True: 140k, False: 7.03k]
  |  Branch (2426:58): [True: 140k, False: 3.36k]
  ------------------
 2427|   140k|        {
 2428|   140k|            PHI_ASSERT(index < line.size());
 2429|   140k|            const Char character = line[index.unsafe()].m_Char;
 2430|       |
 2431|   140k|            if (character == '\t')
  ------------------
  |  Branch (2431:17): [True: 0, False: 140k]
  ------------------
 2432|      0|            {
 2433|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2434|      0|            }
 2435|   140k|            else
 2436|   140k|            {
 2437|   140k|                ++column;
 2438|   140k|            }
 2439|       |
 2440|   140k|            index += UTF8CharLength(character);
 2441|   140k|        }
 2442|       |
 2443|  7.03k|        return index;
 2444|  7.03k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2493|  3.51k|    {
 2494|  3.51k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2494:13): [True: 0, False: 3.51k]
  ------------------
 2495|      0|        {
 2496|      0|            return 0u;
 2497|      0|        }
 2498|       |
 2499|  3.51k|        const Line& line = m_Lines[line_number.unsafe()];
 2500|  3.51k|        phi::u32    col  = 0u;
 2501|       |
 2502|   144k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2502:32): [True: 140k, False: 3.51k]
  ------------------
 2503|   140k|        {
 2504|   140k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2505|   140k|            if (character == '\t')
  ------------------
  |  Branch (2505:17): [True: 0, False: 140k]
  ------------------
 2506|      0|            {
 2507|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2508|      0|            }
 2509|   140k|            else
 2510|   140k|            {
 2511|   140k|                col++;
 2512|   140k|            }
 2513|       |
 2514|   140k|            i += UTF8CharLength(character);
 2515|   140k|        }
 2516|       |
 2517|  3.51k|        return col;
 2518|  3.51k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2521|  3.51k|    {
 2522|  3.51k|        PHI_ASSERT(!m_Lines.empty());
 2523|       |
 2524|  3.51k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2525|  3.51k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3660|   267k|    {
 3661|   267k|        PaletteIndex palette_index{PaletteIndex::Default};
 3662|       |
 3663|       |        // Determine palette color
 3664|   267k|        switch (token.GetType())
 3665|   267k|        {
 3666|  47.3k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3666:13): [True: 47.3k, False: 220k]
  ------------------
 3667|  47.3k|                palette_index = PaletteIndex::Comment;
 3668|  47.3k|                break;
 3669|  2.35k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3669:13): [True: 2.35k, False: 265k]
  ------------------
 3670|  5.48k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3670:13): [True: 3.13k, False: 264k]
  ------------------
 3671|  5.48k|                palette_index = PaletteIndex::IntegerLiteral;
 3672|  5.48k|                break;
 3673|  47.5k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3673:13): [True: 47.5k, False: 220k]
  ------------------
 3674|  47.5k|                palette_index = PaletteIndex::OpCode;
 3675|  47.5k|                break;
 3676|  3.51k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3676:13): [True: 3.51k, False: 264k]
  ------------------
 3677|  10.5k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3677:13): [True: 7.06k, False: 260k]
  ------------------
 3678|  13.0k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3678:13): [True: 2.45k, False: 265k]
  ------------------
 3679|  13.0k|                palette_index = PaletteIndex::Register;
 3680|  13.0k|                break;
 3681|  99.1k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3681:13): [True: 99.1k, False: 168k]
  ------------------
 3682|  99.1k|                return;
 3683|  55.4k|            default:
  ------------------
  |  Branch (3683:13): [True: 55.4k, False: 212k]
  ------------------
 3684|  55.4k|                break;
 3685|   267k|        }
 3686|       |
 3687|   168k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3688|   168k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3689|       |
 3690|   168k|        for (phi::u64 index{token.GetColumn() - 1u};
 3691|   618k|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3691:14): [True: 449k, False: 168k]
  ------------------
 3692|   449k|        {
 3693|   449k|            PHI_ASSERT(index < line.size());
 3694|   449k|            line[index.unsafe()].m_ColorIndex = palette_index;
 3695|   449k|        }
 3696|   168k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3699|  3.51k|    {
 3700|  3.51k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3701|       |
 3702|  3.51k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3702:38): [True: 267k, False: 3.51k]
  ------------------
 3703|   267k|        {
 3704|   267k|            ColorizeToken(token);
 3705|   267k|        }
 3706|  3.51k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3709|  3.51k|    {
 3710|  3.51k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3711|  3.51k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3712|  3.51k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3713|       |
 3714|       |        // Clear breakpoints and markers
 3715|  3.51k|        ClearBreakPoints();
 3716|  3.51k|        ClearErrorMarkers();
 3717|  3.51k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  134|   140k|{
  135|   140k|    return UTF8CharLength(static_cast<char>(characater));
  136|   140k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  104|   281k|{
  105|   281k|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (105:9): [True: 0, False: 281k]
  ------------------
  106|      0|    {
  107|      0|        return 6_u8;
  108|      0|    }
  109|       |
  110|   281k|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (110:9): [True: 0, False: 281k]
  ------------------
  111|      0|    {
  112|      0|        return 5_u8;
  113|      0|    }
  114|       |
  115|   281k|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (115:9): [True: 0, False: 281k]
  ------------------
  116|      0|    {
  117|      0|        return 4_u8;
  118|      0|    }
  119|       |
  120|   281k|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (120:9): [True: 0, False: 281k]
  ------------------
  121|      0|    {
  122|      0|        return 3_u8;
  123|      0|    }
  124|       |
  125|   281k|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (125:9): [True: 0, False: 281k]
  ------------------
  126|      0|    {
  127|      0|        return 2_u8;
  128|      0|    }
  129|       |
  130|   281k|    return 1_u8;
  131|   281k|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  183|  3.51k|    {
  184|  3.51k|        return m_DLXProgram;
  185|  3.51k|    }
_ZN6dlxemu8Emulator12ParseProgramEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  188|  3.51k|    {
  189|  3.51k|        m_DLXProgram = dlx::Parser::Parse(source);
  190|       |
  191|  3.51k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (191:13): [True: 150, False: 3.36k]
  ------------------
  192|    150|        {
  193|    150|            m_Processor.LoadProgram(m_DLXProgram);
  194|    150|        }
  195|  3.51k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  208|  3.51k|    {
  209|  3.51k|        return m_CodeEditor;
  210|  3.51k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   38|      1|    {
   39|      1|        Shutdown();
   40|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  108|      1|    {
  109|      1|        if (imgui_initialized)
  ------------------
  |  Branch (109:13): [True: 0, False: 1]
  ------------------
  110|      0|        {
  111|      0|            ShutdownImGui();
  112|      0|        }
  113|       |
  114|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (114:13): [True: 0, False: 1]
  ------------------
  115|      0|        {
  116|      0|            glfwDestroyWindow(m_Window);
  117|      0|        }
  118|       |
  119|      1|        if (glfw_initialized)
  ------------------
  |  Branch (119:13): [True: 0, False: 1]
  ------------------
  120|      0|        {
  121|      0|            glfwTerminate();
  122|      0|        }
  123|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  93.3k|        {
  173|  93.3k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  93.3k|            switch (index.unsafe())
  176|  93.3k|            {
  177|  38.8k|                case 0:
  ------------------
  |  Branch (177:17): [True: 38.8k, False: 54.5k]
  ------------------
  178|  38.8k|                    return m_Arg1Type;
  179|       |
  180|  27.6k|                case 1:
  ------------------
  |  Branch (180:17): [True: 27.6k, False: 65.6k]
  ------------------
  181|  27.6k|                    return m_Arg2Type;
  182|       |
  183|  26.8k|                case 2:
  ------------------
  |  Branch (183:17): [True: 26.8k, False: 66.4k]
  ------------------
  184|  26.8k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 93.3k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  93.3k|#endif
  191|  93.3k|            }
  192|  93.3k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  25.2k|        {
  199|  25.2k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  25.2k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 25.1k, False: 163]
  ------------------
  203|  25.1k|            {
  204|  25.1k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  25.1k|            }
  206|  25.2k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 16.2k, False: 8.99k]
  ------------------
  207|  16.2k|            {
  208|  16.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  16.2k|            }
  210|  25.2k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 10.0k, False: 15.1k]
  ------------------
  211|  10.0k|            {
  212|  10.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|  10.0k|            }
  214|       |
  215|  25.2k|            return number_of_argument_required;
  216|  25.2k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  25.2k|        {
  225|  25.2k|            return m_Executor;
  226|  25.2k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  13.2k|    {
   38|  13.2k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  13.2k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  13.2k|                                         static_cast<underlying_t>(rhs));
   42|  13.2k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  13.2k|    {
   55|  13.2k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  13.2k|        return static_cast<underlying_t>(type & test) != 0;
   58|  13.2k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  33.7k|    {
  206|  33.7k|        switch (value)
  207|  33.7k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  3.71k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  3.71k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 3.71k, False: 29.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|  3.71k|        return #name;
  |  |  ------------------
  |  |   16|  3.71k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    583|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 583, False: 33.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    583|        return #name;
  |  |  ------------------
  |  |   17|    583|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    372|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 372, False: 33.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    372|        return #name;
  |  |  ------------------
  |  |   18|    430|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    430|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 430, False: 33.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    430|        return #name;
  |  |  ------------------
  |  |   19|    571|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    571|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 571, False: 33.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    571|        return #name;
  |  |  ------------------
  |  |   20|    571|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    510|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 510, False: 33.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    510|        return #name;
  |  |  ------------------
  |  |   21|    510|                                                                                                   \
  |  |   22|    510|    /* Sub */                                                                                      \
  |  |   23|    510|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  |  |   24|    208|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   25|    553|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    553|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 553, False: 33.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    553|        return #name;
  |  |  ------------------
  |  |   26|    553|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    222|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 222, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    222|        return #name;
  |  |  ------------------
  |  |   27|    222|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  |  |   28|    206|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   29|     68|                                                                                                   \
  |  |   30|     68|    /* Multiplication */                                                                           \
  |  |   31|     70|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   32|     71|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |   33|     73|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 73, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     73|        return #name;
  |  |  ------------------
  |  |   34|    331|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    331|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 331, False: 33.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    331|        return #name;
  |  |  ------------------
  |  |   35|    331|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    243|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 243, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    243|        return #name;
  |  |  ------------------
  |  |   36|    243|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   37|     66|                                                                                                   \
  |  |   38|     66|    /* Division */                                                                                 \
  |  |   39|    194|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   40|    194|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   41|    194|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   42|    204|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |   43|    204|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   44|    194|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   45|    194|                                                                                                   \
  |  |   46|    194|    /* Shift left (logical) */                                                                     \
  |  |   47|    197|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 197, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    197|        return #name;
  |  |  ------------------
  |  |   48|    210|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |   49|    210|                                                                                                   \
  |  |   50|    210|    /* Shift right (logical) */                                                                    \
  |  |   51|    210|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   52|     67|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   53|     67|                                                                                                   \
  |  |   54|     67|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    194|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   56|    194|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   57|    194|                                                                                                   \
  |  |   58|    194|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  1.47k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.47k, False: 32.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.47k|        return #name;
  |  |  ------------------
  |  |   60|  1.47k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 93, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     93|        return #name;
  |  |  ------------------
  |  |   61|     93|                                                                                                   \
  |  |   62|     93|    /* Logic */                                                                                    \
  |  |   63|     93|                                                                                                   \
  |  |   64|     93|    /* And */                                                                                      \
  |  |   65|    278|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    278|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 278, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    278|        return #name;
  |  |  ------------------
  |  |   66|    278|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |   67|     81|                                                                                                   \
  |  |   68|     81|    /* Or */                                                                                       \
  |  |   69|    194|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   70|    194|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   71|    194|                                                                                                   \
  |  |   72|    194|    /* XOR */                                                                                      \
  |  |   73|    194|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    157|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 157, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    157|        return #name;
  |  |  ------------------
  |  |   74|    157|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   75|     67|                                                                                                   \
  |  |   76|     67|    /* Set conditionals */                                                                         \
  |  |   77|     67|                                                                                                   \
  |  |   78|     67|    /* Less than */                                                                                \
  |  |   79|     75|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 75, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     75|        return #name;
  |  |  ------------------
  |  |   80|    204|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |   81|    204|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    163|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 163, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    163|        return #name;
  |  |  ------------------
  |  |   82|    241|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    241|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 241, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    241|        return #name;
  |  |  ------------------
  |  |   83|    241|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 109, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    109|        return #name;
  |  |  ------------------
  |  |   84|    109|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   85|     67|                                                                                                   \
  |  |   86|     67|    /* Greater than */                                                                             \
  |  |   87|     70|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |   88|    229|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 229, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    229|        return #name;
  |  |  ------------------
  |  |   89|    229|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |   90|    263|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    263|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 263, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    263|        return #name;
  |  |  ------------------
  |  |   91|    263|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    197|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 197, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    197|        return #name;
  |  |  ------------------
  |  |   92|    201|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 201, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    201|        return #name;
  |  |  ------------------
  |  |   93|    201|                                                                                                   \
  |  |   94|    201|    /* Less than or equal */                                                                       \
  |  |   95|    201|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   96|    196|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   97|    194|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |   98|     72|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |   99|    202|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 202, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    202|        return #name;
  |  |  ------------------
  |  |  100|    202|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  101|    194|                                                                                                   \
  |  |  102|    194|    /* Greater than or equal */                                                                    \
  |  |  103|    194|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  104|     66|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  105|  2.11k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.11k, False: 31.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.11k|        return #name;
  |  |  ------------------
  |  |  106|  2.11k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    363|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 363, False: 33.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    363|        return #name;
  |  |  ------------------
  |  |  107|    363|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  108|    289|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    289|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 289, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    289|        return #name;
  |  |  ------------------
  |  |  109|    289|                                                                                                   \
  |  |  110|    289|    /* Equal */                                                                                    \
  |  |  111|    289|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  112|    224|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 224, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    224|        return #name;
  |  |  ------------------
  |  |  113|    224|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |  114|  1.01k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.01k, False: 32.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.01k|        return #name;
  |  |  ------------------
  |  |  115|  1.01k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  116|     66|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  117|     66|                                                                                                   \
  |  |  118|     66|    /* Not equal */                                                                                \
  |  |  119|     68|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  120|    227|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    227|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 227, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    227|        return #name;
  |  |  ------------------
  |  |  121|    227|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  122|    194|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  123|     81|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |  124|     81|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 72, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     72|        return #name;
  |  |  ------------------
  |  |  125|     72|                                                                                                   \
  |  |  126|     72|    /* Conditional branching */                                                                    \
  |  |  127|     72|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  128|    204|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |  129|    792|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    792|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 792, False: 32.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    792|        return #name;
  |  |  ------------------
  |  |  130|  3.88k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  3.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 3.88k, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  210|  3.88k|        return #name;
  |  |  ------------------
  |  |  131|  3.88k|                                                                                                   \
  |  |  132|  3.88k|    /* Unconditional branching */                                                                  \
  |  |  133|  3.88k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     12|        return #name;
  |  |  ------------------
  |  |  134|     67|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  135|    199|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    199|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 199, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    199|        return #name;
  |  |  ------------------
  |  |  136|    199|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  137|     66|                                                                                                   \
  |  |  138|     66|    /* Loading data */                                                                             \
  |  |  139|     67|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  140|    194|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  141|    194|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  142|    194|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  143|    194|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  144|     68|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  145|     68|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  146|     66|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  147|  2.11k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  2.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.11k, False: 31.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.11k|        return #name;
  |  |  ------------------
  |  |  148|  2.11k|                                                                                                   \
  |  |  149|  2.11k|    /* Storing data */                                                                             \
  |  |  150|  2.11k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    322|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 322, False: 33.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    322|        return #name;
  |  |  ------------------
  |  |  151|    322|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 33.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |  152|  1.23k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.23k, False: 32.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.23k|        return #name;
  |  |  ------------------
  |  |  153|  1.23k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    360|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 360, False: 33.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    360|        return #name;
  |  |  ------------------
  |  |  154|    360|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  155|     70|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  156|     75|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 75, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     75|        return #name;
  |  |  ------------------
  |  |  157|     75|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  158|     67|                                                                                                   \
  |  |  159|     67|    /* Moving data */                                                                              \
  |  |  160|    194|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  161|    194|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    154|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 154, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    154|        return #name;
  |  |  ------------------
  |  |  162|    154|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  163|     86|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |  164|     83|                                                                                                   \
  |  |  165|     83|    /* Converting data */                                                                          \
  |  |  166|     83|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  167|    195|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |  168|    196|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  169|    196|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 70, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     70|        return #name;
  |  |  ------------------
  |  |  170|     70|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  171|    578|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    578|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 578, False: 33.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    578|        return #name;
  |  |  ------------------
  |  |  172|    578|                                                                                                   \
  |  |  173|    578|    /* Other */                                                                                    \
  |  |  174|    578|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 108, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    108|        return #name;
  |  |  ------------------
  |  |  175|    108|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 74, False: 33.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|     74|        return #name;
  |  |  ------------------
  |  |  176|    206|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 33.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 33.7k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  33.7k|        }
  219|  33.7k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  17.8k|    {
   31|  17.8k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 500, False: 17.3k]
  ------------------
   32|    500|        {
   33|    500|            return true;
   34|    500|        }
   35|       |
   36|  17.3k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 66, False: 17.2k]
  ------------------
   37|     66|        {
   38|     66|            return true;
   39|     66|        }
   40|       |
   41|  17.2k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 556, False: 16.7k]
  ------------------
   42|    556|        {
   43|    556|            return true;
   44|    556|        }
   45|       |
   46|  16.7k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 16.7k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  16.7k|        return false;
   52|  16.7k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  16.7k|    {
   56|  16.7k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 16.7k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  16.7k|        const char first_char = token.at(0u);
   62|       |
   63|  16.7k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 6.42k, False: 10.2k]
  ------------------
   64|  6.42k|        {
   65|  6.42k|            return phi::is_alpha(first_char);
   66|  6.42k|        }
   67|       |
   68|  10.2k|        phi::boolean just_under_scores = (first_char == '_');
   69|  10.2k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 1.96k, False: 8.31k]
  |  Branch (69:13): [True: 1.82k, False: 8.46k]
  |  Branch (69:43): [True: 1.82k, False: 146]
  ------------------
   70|  1.82k|        {
   71|  1.82k|            return false;
   72|  1.82k|        }
   73|       |
   74|  36.1k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 29.7k, False: 6.44k]
  ------------------
   75|  29.7k|        {
   76|  29.7k|            const char c{token.at(index)};
   77|       |
   78|  29.7k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 14.9k, False: 14.7k]
  ------------------
   79|  14.9k|            {
   80|  14.9k|                just_under_scores = false;
   81|  14.9k|            }
   82|  14.7k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 12.7k, False: 2.01k]
  ------------------
   83|  12.7k|            {
   84|  12.7k|                continue;
   85|  12.7k|            }
   86|  2.01k|            else
   87|  2.01k|            {
   88|  2.01k|                return false;
   89|  2.01k|            }
   90|  29.7k|        }
   91|       |
   92|  6.44k|        return !just_under_scores;
   93|  8.46k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|   102k|    {
  100|   102k|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 102k]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|   102k|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 14.8k, False: 87.3k]
  ------------------
  106|  14.8k|        {
  107|  14.8k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 3.68k, False: 11.1k]
  ------------------
  108|  3.68k|            {
  109|  3.68k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  3.68k|            }
  111|       |
  112|  11.1k|            return {};
  113|  14.8k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  87.3k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 387, False: 87.0k]
  ------------------
  117|    387|        {
  118|    387|            return {};
  119|    387|        }
  120|       |
  121|  87.0k|        std::int32_t number{0};
  122|  87.0k|        phi::boolean is_negative{false};
  123|  87.0k|        phi::boolean starts_with_zero{false};
  124|  87.0k|        phi::boolean parsing_binary{false};
  125|  87.0k|        phi::boolean parsing_octal{false};
  126|  87.0k|        phi::boolean parsing_hexadecimal{false};
  127|  87.0k|        phi::boolean parsed_something{false};
  128|  87.0k|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  99.7k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 98.3k, False: 1.42k]
  ------------------
  133|  98.3k|        {
  134|  98.3k|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  98.3k|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 87.0k, False: 11.3k]
  ------------------
  138|  87.0k|            {
  139|  87.0k|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 98, False: 86.9k]
  ------------------
  140|     98|                {
  141|     98|                    continue;
  142|     98|                }
  143|       |
  144|  86.9k|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 732, False: 86.1k]
  ------------------
  145|    732|                {
  146|    732|                    is_negative = true;
  147|    732|                    continue;
  148|    732|                }
  149|       |
  150|  86.1k|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 5.83k, False: 80.3k]
  ------------------
  151|  5.83k|                {
  152|  5.83k|                    starts_with_zero = true;
  153|  5.83k|                    continue;
  154|  5.83k|                }
  155|       |
  156|  80.3k|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 66, False: 80.2k]
  ------------------
  157|     66|                {
  158|     66|                    return {};
  159|     66|                }
  160|  80.3k|            }
  161|       |
  162|       |            // Second character
  163|  91.5k|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 6.93k, False: 84.6k]
  ------------------
  164|  6.93k|            {
  165|  6.93k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 5.83k, False: 1.09k]
  ------------------
  166|  5.83k|                {
  167|       |                    // Binary
  168|  5.83k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 280, False: 5.55k]
  |  Branch (168:37): [True: 2.14k, False: 3.40k]
  ------------------
  169|  2.42k|                    {
  170|  2.42k|                        parsing_binary = true;
  171|  2.42k|                        continue;
  172|  2.42k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  3.40k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 735, False: 2.67k]
  |  Branch (175:37): [True: 72, False: 2.59k]
  ------------------
  176|    807|                    {
  177|    807|                        parsing_hexadecimal = true;
  178|    807|                        continue;
  179|    807|                    }
  180|       |
  181|       |                    // Octal
  182|  2.59k|                    parsing_octal = true;
  183|  2.59k|                }
  184|  6.93k|            }
  185|       |
  186|       |            // Handle seperators
  187|  88.3k|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 140, False: 88.2k]
  ------------------
  188|    140|            {
  189|    140|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 68, False: 72]
  ------------------
  190|     68|                {
  191|     68|                    return {};
  192|     68|                }
  193|       |
  194|     72|                parsed_separator = true;
  195|     72|                continue;
  196|    140|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  88.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 780, False: 87.4k]
  |  Branch (199:32): [True: 0, False: 780]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  88.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 87.4k, False: 780]
  |  Branch (204:17): [True: 0, False: 88.2k]
  |  Branch (204:33): [True: 0, False: 87.4k]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  88.2k|            parsed_separator = false;
  211|  88.2k|            parsed_something = true;
  212|       |
  213|  88.2k|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 2.29k, False: 85.9k]
  ------------------
  214|  2.29k|            {
  215|  2.29k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 2.16k, False: 138]
  ------------------
  216|  2.16k|                {
  217|  2.16k|                    return {};
  218|  2.16k|                }
  219|       |
  220|    138|                number <<= 1;
  221|    138|                number |= (c - '0');
  222|    138|            }
  223|  85.9k|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 3.08k, False: 82.8k]
  ------------------
  224|  3.08k|            {
  225|  3.08k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 2.36k, False: 718]
  ------------------
  226|  2.36k|                {
  227|  2.36k|                    return {};
  228|  2.36k|                }
  229|       |
  230|    718|                number <<= 3;
  231|    718|                number |= (c - '0');
  232|    718|            }
  233|  82.8k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 934, False: 81.8k]
  ------------------
  234|    934|            {
  235|    934|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 160, False: 774]
  ------------------
  236|    160|                {
  237|    160|                    return {};
  238|    160|                }
  239|       |
  240|    774|                number <<= 4;
  241|    774|                number |= phi::hex_digit_value(c).unsafe();
  242|    774|            }
  243|  81.8k|            else
  244|  81.8k|            {
  245|  81.8k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 80.1k, False: 1.70k]
  ------------------
  246|  80.1k|                {
  247|  80.1k|                    return {};
  248|  80.1k|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  1.70k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 941, False: 766]
  |  Branch (251:36): [True: 578, False: 363]
  ------------------
  252|    578|                {
  253|    578|                    return {};
  254|    578|                }
  255|       |
  256|  1.12k|                number *= 10;
  257|  1.12k|                number += (c - '0');
  258|  1.12k|            }
  259|  88.2k|        }
  260|       |
  261|  1.42k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 1.20k, False: 219]
  ------------------
  262|  1.20k|        {
  263|       |            // Check for over/underflow
  264|  1.20k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 92, False: 1.11k]
  |  Branch (264:32): [True: 0, False: 92]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  1.20k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 1.11k, False: 92]
  |  Branch (269:17): [True: 0, False: 1.20k]
  |  Branch (269:33): [True: 0, False: 1.11k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  1.20k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 92, False: 1.11k]
  ------------------
  276|     92|            {
  277|     92|                return static_cast<std::int16_t>(-number);
  278|     92|            }
  279|       |
  280|  1.11k|            return static_cast<std::int16_t>(number);
  281|  1.20k|        }
  282|       |
  283|    219|        return {};
  284|  1.42k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  7.86k|    {
   97|  7.86k|        switch (value)
   98|  7.86k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  1.33k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.33k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.33k, False: 6.52k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.33k|        return #name;
  |  |  ------------------
  |  |   14|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.53k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.53k, False: 6.32k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.53k|        return #name;
  |  |  ------------------
  |  |   15|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   16|     19|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 19, False: 7.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|     19|        return #name;
  |  |  ------------------
  |  |   17|     19|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   18|     20|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 20, False: 7.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|     20|        return #name;
  |  |  ------------------
  |  |   19|     20|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      3|        return #name;
  |  |  ------------------
  |  |   20|      4|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      4|        return #name;
  |  |  ------------------
  |  |   21|    392|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|    392|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 392, False: 7.46k]
  |  |  |  |  ------------------
  |  |  |  |  101|    392|        return #name;
  |  |  ------------------
  |  |   22|    392|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|     49|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 49, False: 7.81k]
  |  |  |  |  ------------------
  |  |  |  |  101|     49|        return #name;
  |  |  ------------------
  |  |   23|     49|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     30|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 30, False: 7.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|     30|        return #name;
  |  |  ------------------
  |  |   24|     30|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   25|      1|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|      0|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 0, False: 7.86k]
  |  |  |  |  ------------------
  |  |  |  |  101|      0|        return #name;
  |  |  ------------------
  |  |   26|      1|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   27|      6|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   28|     15|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 15, False: 7.84k]
  |  |  |  |  ------------------
  |  |  |  |  101|     15|        return #name;
  |  |  ------------------
  |  |   29|    254|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|    254|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 254, False: 7.60k]
  |  |  |  |  ------------------
  |  |  |  |  101|    254|        return #name;
  |  |  ------------------
  |  |   30|    254|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|    171|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 171, False: 7.68k]
  |  |  |  |  ------------------
  |  |  |  |  101|    171|        return #name;
  |  |  ------------------
  |  |   31|    171|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     47|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 47, False: 7.81k]
  |  |  |  |  ------------------
  |  |  |  |  101|     47|        return #name;
  |  |  ------------------
  |  |   32|    688|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|    688|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 688, False: 7.17k]
  |  |  |  |  ------------------
  |  |  |  |  101|    688|        return #name;
  |  |  ------------------
  |  |   33|    688|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    251|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 251, False: 7.60k]
  |  |  |  |  ------------------
  |  |  |  |  101|    251|        return #name;
  |  |  ------------------
  |  |   34|    251|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 26, False: 7.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|     26|        return #name;
  |  |  ------------------
  |  |   35|     36|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|     36|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 36, False: 7.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|     36|        return #name;
  |  |  ------------------
  |  |   36|     54|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     54|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 54, False: 7.80k]
  |  |  |  |  ------------------
  |  |  |  |  101|     54|        return #name;
  |  |  ------------------
  |  |   37|    521|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|    521|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 521, False: 7.33k]
  |  |  |  |  ------------------
  |  |  |  |  101|    521|        return #name;
  |  |  ------------------
  |  |   38|    851|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|    851|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 851, False: 7.00k]
  |  |  |  |  ------------------
  |  |  |  |  101|    851|        return #name;
  |  |  ------------------
  |  |   39|    851|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1, False: 7.85k]
  |  |  |  |  ------------------
  |  |  |  |  101|      1|        return #name;
  |  |  ------------------
  |  |   40|    424|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    424|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 424, False: 7.43k]
  |  |  |  |  ------------------
  |  |  |  |  101|    424|        return #name;
  |  |  ------------------
  |  |   41|    424|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     25|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 25, False: 7.83k]
  |  |  |  |  ------------------
  |  |  |  |  101|     25|        return #name;
  |  |  ------------------
  |  |   42|     64|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|     64|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 64, False: 7.79k]
  |  |  |  |  ------------------
  |  |  |  |  101|     64|        return #name;
  |  |  ------------------
  |  |   43|     66|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|     66|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 66, False: 7.79k]
  |  |  |  |  ------------------
  |  |  |  |  101|     66|        return #name;
  |  |  ------------------
  |  |   44|    967|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    967|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 967, False: 6.89k]
  |  |  |  |  ------------------
  |  |  |  |  101|    967|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 7.86k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  7.86k|        }
  110|  7.86k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  3.51k|    {
  134|  3.51k|        switch (value)
  135|  3.51k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    129|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|    129|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 129, False: 3.38k]
  |  |  |  |  ------------------
  |  |  |  |  138|    129|        return #name;
  |  |  ------------------
  |  |   48|    150|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    150|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 150, False: 3.36k]
  |  |  |  |  ------------------
  |  |  |  |  138|    150|        return #name;
  |  |  ------------------
  |  |   49|    492|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|    492|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 492, False: 3.02k]
  |  |  |  |  ------------------
  |  |  |  |  138|    492|        return #name;
  |  |  ------------------
  |  |   50|    492|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 7, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      7|        return #name;
  |  |  ------------------
  |  |   51|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   52|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 10, False: 3.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|     10|        return #name;
  |  |  ------------------
  |  |   53|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   54|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   55|    157|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|    157|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 157, False: 3.36k]
  |  |  |  |  ------------------
  |  |  |  |  138|    157|        return #name;
  |  |  ------------------
  |  |   56|    157|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   57|  1.41k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.41k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.41k, False: 2.10k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.41k|        return #name;
  |  |  ------------------
  |  |   58|  1.41k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   59|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   60|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   61|     74|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|     74|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 74, False: 3.44k]
  |  |  |  |  ------------------
  |  |  |  |  138|     74|        return #name;
  |  |  ------------------
  |  |   62|     74|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   63|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 25, False: 3.49k]
  |  |  |  |  ------------------
  |  |  |  |  138|     25|        return #name;
  |  |  ------------------
  |  |   64|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   66|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 11, False: 3.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|     11|        return #name;
  |  |  ------------------
  |  |   67|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   68|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   70|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|     48|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 48, False: 3.47k]
  |  |  |  |  ------------------
  |  |  |  |  138|     48|        return #name;
  |  |  ------------------
  |  |   71|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   74|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   75|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 0, False: 3.51k]
  |  |  |  |  ------------------
  |  |  |  |  138|      0|        return #name;
  |  |  ------------------
  |  |   76|     14|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14, False: 3.50k]
  |  |  |  |  ------------------
  |  |  |  |  138|     14|        return #name;
  |  |  ------------------
  |  |   77|    752|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|    752|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 752, False: 2.76k]
  |  |  |  |  ------------------
  |  |  |  |  138|    752|        return #name;
  |  |  ------------------
  |  |   78|    752|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|    209|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 209, False: 3.30k]
  |  |  |  |  ------------------
  |  |  |  |  138|    209|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 3.51k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  3.51k|        }
  147|  3.51k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  5.74k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  5.74k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 61.0k, False: 0]
  ------------------
   64|  61.0k|            {
   65|  61.0k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 5.74k, False: 55.3k]
  ------------------
   66|  5.74k|                {
   67|  5.74k|                    return &token;
   68|  5.74k|                }
   69|  61.0k|            }
   70|       |
   71|      0|            return nullptr;
   72|  5.74k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|   100k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   100k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   100k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   149k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   149k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   149k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  18.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  18.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  18.0k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  25.2k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  9.26k|    {
   25|  9.26k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  9.26k|        switch (argument_number.unsafe())
   28|  9.26k|        {
   29|  6.89k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 6.89k, False: 2.36k]
  ------------------
   30|  6.89k|                m_Arg1 = argument;
   31|  6.89k|                break;
   32|  1.63k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 1.63k, False: 7.63k]
  ------------------
   33|  1.63k|                m_Arg2 = argument;
   34|  1.63k|                break;
   35|    733|            case 2u:
  ------------------
  |  Branch (35:13): [True: 733, False: 8.53k]
  ------------------
   36|    733|                m_Arg3 = argument;
   37|    733|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 9.26k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  9.26k|#endif
   42|  9.26k|        }
   43|  9.26k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|  85.0k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  3.97k|    {
  173|  3.97k|        InstructionArgument arg;
  174|  3.97k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  3.97k|        arg.register_int.register_id = id;
  176|  3.97k|        return arg;
  177|  3.97k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|     66|    {
  181|     66|        InstructionArgument arg;
  182|     66|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|     66|        arg.register_float.register_id = id;
  184|     66|        return arg;
  185|     66|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|    766|    {
  189|    766|        InstructionArgument arg;
  190|    766|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|    766|        arg.immediate_value.signed_value = value;
  192|    766|        return arg;
  193|    766|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  4.46k|    {
  207|  4.46k|        InstructionArgument arg;
  208|  4.46k|        arg.m_Type           = ArgumentType::Label;
  209|  4.46k|        arg.label.label_name = label_name;
  210|  4.46k|        return arg;
  211|  4.46k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  25.2k|    {
  453|  25.2k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  25.2k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|   100k|    {
   24|   100k|        switch (token.length().unsafe())
   25|   100k|        {
   26|       |            // 1 character OpCodes
   27|  17.5k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 17.5k, False: 83.3k]
  ------------------
   28|  17.5k|                const char c1 = token[0u];
   29|       |
   30|  17.5k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 5.99k, False: 11.5k]
  ------------------
   31|  5.99k|                {
   32|  5.99k|                    return OpCode::J;
   33|  5.99k|                }
   34|  11.5k|                break;
   35|  17.5k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  17.8k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 17.8k, False: 83.0k]
  ------------------
   39|  17.8k|                const char c1 = token[0u];
   40|  17.8k|                const char c2 = token[1u];
   41|       |
   42|  17.8k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 5.87k, False: 11.9k]
  ------------------
   43|  17.8k|                {
   44|     99|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 99, False: 17.7k]
  ------------------
   45|    218|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 119, False: 17.7k]
  ------------------
   46|    218|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 133, False: 85]
  ------------------
   47|    133|                        {
   48|    133|                            return OpCode::JR;
   49|    133|                        }
   50|     85|                        break;
   51|       |
   52|  2.82k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 2.82k, False: 15.0k]
  ------------------
   53|  3.69k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 870, False: 16.9k]
  ------------------
   54|  3.69k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 158, False: 3.54k]
  ------------------
   55|  3.69k|                        {
   56|    194|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 194, False: 3.50k]
  ------------------
   57|    518|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 324, False: 3.37k]
  ------------------
   58|    518|                                return OpCode::LB;
   59|  2.11k|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 2.11k, False: 1.58k]
  ------------------
   60|  2.18k|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 66, False: 3.63k]
  ------------------
   61|  2.18k|                                return OpCode::LD;
   62|     66|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 66, False: 3.63k]
  ------------------
   63|    132|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 66, False: 3.63k]
  ------------------
   64|    132|                                return OpCode::LF;
   65|    194|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 194, False: 3.50k]
  ------------------
   66|    260|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 66, False: 3.63k]
  ------------------
   67|    260|                                return OpCode::LH;
   68|     68|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 68, False: 3.63k]
  ------------------
   69|    450|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 382, False: 3.31k]
  ------------------
   70|    450|                                return OpCode::LW;
   71|  3.69k|                        }
   72|    158|                        break;
   73|  1.23k|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 1.23k, False: 16.6k]
  ------------------
   74|  1.35k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 119, False: 17.7k]
  ------------------
   75|  1.35k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 389, False: 969]
  ------------------
   76|    389|                        {
   77|    389|                            return OpCode::OR;
   78|    389|                        }
   79|    969|                        break;
   80|  4.23k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 4.23k, False: 13.6k]
  ------------------
   81|  6.71k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 2.48k, False: 15.3k]
  ------------------
   82|  6.71k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 3.70k, False: 3.00k]
  ------------------
   83|  6.71k|                        {
   84|    322|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 322, False: 6.39k]
  ------------------
   85|    388|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 66, False: 6.64k]
  ------------------
   86|    388|                                return OpCode::SB;
   87|     69|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 69, False: 6.64k]
  ------------------
   88|    536|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 467, False: 6.24k]
  ------------------
   89|    536|                                return OpCode::SD;
   90|     75|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 75, False: 6.63k]
  ------------------
   91|    653|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 578, False: 6.13k]
  ------------------
   92|    653|                                return OpCode::SF;
   93|  1.10k|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 1.10k, False: 5.61k]
  ------------------
   94|  1.16k|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 66, False: 6.64k]
  ------------------
   95|  1.16k|                                return OpCode::SH;
   96|    194|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 194, False: 6.51k]
  ------------------
   97|    264|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 70, False: 6.64k]
  ------------------
   98|    264|                                return OpCode::SW;
   99|  6.71k|                        }
  100|  3.70k|                        break;
  101|  17.8k|                }
  102|  10.7k|                break;
  103|  17.8k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|  25.4k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 25.4k, False: 75.4k]
  ------------------
  107|  25.4k|                const char c1 = token[0u];
  108|  25.4k|                const char c2 = token[1u];
  109|  25.4k|                const char c3 = token[2u];
  110|       |
  111|  25.4k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 3.79k, False: 21.6k]
  ------------------
  112|  25.4k|                {
  113|  3.75k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 3.75k, False: 21.6k]
  ------------------
  114|  4.97k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 1.21k, False: 24.2k]
  ------------------
  115|  4.97k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 3.46k, False: 1.50k]
  |  Branch (115:29): [True: 3.40k, False: 1.57k]
  |  Branch (115:45): [True: 3.40k, False: 67]
  ------------------
  116|  3.40k|                        {
  117|  3.40k|                            return OpCode::ADD;
  118|  3.40k|                        }
  119|  1.57k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 1.43k, False: 138]
  |  Branch (119:34): [True: 1.23k, False: 339]
  |  Branch (119:50): [True: 1.23k, False: 201]
  ------------------
  120|  1.23k|                        {
  121|  1.23k|                            return OpCode::AND;
  122|  1.23k|                        }
  123|    339|                        break;
  124|       |
  125|    416|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 416, False: 25.0k]
  ------------------
  126|    491|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 75, False: 25.3k]
  ------------------
  127|    491|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 362, False: 129]
  |  Branch (127:29): [True: 296, False: 195]
  |  Branch (127:45): [True: 296, False: 66]
  ------------------
  128|    296|                        {
  129|    296|                            return OpCode::DIV;
  130|    296|                        }
  131|    195|                        break;
  132|       |
  133|    317|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 317, False: 25.1k]
  ------------------
  134|    452|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 135, False: 25.3k]
  ------------------
  135|    452|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 369, False: 83]
  ------------------
  136|    369|                        {
  137|    369|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 132, False: 237]
  ------------------
  138|    132|                            {
  139|    132|                                return OpCode::EQD;
  140|    132|                            }
  141|    237|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 132, False: 105]
  ------------------
  142|    132|                            {
  143|    132|                                return OpCode::EQF;
  144|    132|                            }
  145|    369|                        }
  146|    188|                        break;
  147|       |
  148|  1.34k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 1.34k, False: 24.1k]
  ------------------
  149|  1.86k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 519, False: 24.9k]
  ------------------
  150|  1.86k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 809, False: 1.05k]
  ------------------
  151|    809|                        {
  152|    809|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 355, False: 454]
  ------------------
  153|    355|                            {
  154|    355|                                return OpCode::GED;
  155|    355|                            }
  156|    454|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 388, False: 66]
  ------------------
  157|    388|                            {
  158|    388|                                return OpCode::GEF;
  159|    388|                            }
  160|    809|                        }
  161|  1.05k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 991, False: 66]
  ------------------
  162|    991|                        {
  163|    991|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 397, False: 594]
  ------------------
  164|    397|                            {
  165|    397|                                return OpCode::GTD;
  166|    397|                            }
  167|    594|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 266, False: 328]
  ------------------
  168|    266|                            {
  169|    266|                                return OpCode::GTF;
  170|    266|                            }
  171|    594|                        }
  172|    460|                        break;
  173|       |
  174|    460|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 235, False: 25.2k]
  ------------------
  175|    575|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 340, False: 25.1k]
  ------------------
  176|    575|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 472, False: 103]
  |  Branch (176:29): [True: 265, False: 310]
  |  Branch (176:45): [True: 265, False: 207]
  ------------------
  177|    265|                        {
  178|    265|                            return OpCode::JAL;
  179|    265|                        }
  180|    310|                        break;
  181|       |
  182|    987|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 987, False: 24.4k]
  ------------------
  183|  2.34k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 1.35k, False: 24.1k]
  ------------------
  184|  2.34k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 67, False: 2.27k]
  ------------------
  185|  2.34k|                        {
  186|     66|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 66, False: 2.27k]
  ------------------
  187|    598|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 532, False: 1.81k]
  ------------------
  188|    598|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 142, False: 456]
  ------------------
  189|    142|                                {
  190|    142|                                    return OpCode::LBU;
  191|    142|                                }
  192|    456|                                break;
  193|       |
  194|    456|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 410, False: 1.93k]
  ------------------
  195|    722|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 312, False: 2.03k]
  ------------------
  196|    722|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 388, False: 334]
  ------------------
  197|    388|                                {
  198|    388|                                    return OpCode::LED;
  199|    388|                                }
  200|    334|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 268, False: 66]
  ------------------
  201|    268|                                {
  202|    268|                                    return OpCode::LEF;
  203|    268|                                }
  204|     66|                                break;
  205|       |
  206|    196|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 196, False: 2.14k]
  ------------------
  207|    363|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 167, False: 2.17k]
  ------------------
  208|    363|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 133, False: 230]
  ------------------
  209|    133|                                {
  210|    133|                                    return OpCode::LHI;
  211|    133|                                }
  212|    230|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 164, False: 66]
  ------------------
  213|    164|                                {
  214|    164|                                    return OpCode::LHU;
  215|    164|                                }
  216|     66|                                break;
  217|       |
  218|    189|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 189, False: 2.15k]
  ------------------
  219|    375|                            case 't':
  ------------------
  |  Branch (219:29): [True: 186, False: 2.15k]
  ------------------
  220|    375|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 133, False: 242]
  ------------------
  221|    133|                                {
  222|    133|                                    return OpCode::LTD;
  223|    133|                                }
  224|    242|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 175, False: 67]
  ------------------
  225|    175|                                {
  226|    175|                                    return OpCode::LTF;
  227|    175|                                }
  228|     67|                                break;
  229|       |
  230|     78|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 78, False: 2.26k]
  ------------------
  231|    218|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 140, False: 2.20k]
  ------------------
  232|    218|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 132, False: 86]
  ------------------
  233|    132|                                {
  234|    132|                                    return OpCode::LWU;
  235|    132|                                }
  236|     86|                                break;
  237|  2.34k|                        }
  238|    808|                        break;
  239|       |
  240|    808|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 735, False: 24.7k]
  ------------------
  241|  1.26k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 533, False: 24.9k]
  ------------------
  242|  1.26k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 607, False: 661]
  ------------------
  243|    607|                        {
  244|    607|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 138, False: 469]
  ------------------
  245|    138|                            {
  246|    138|                                return OpCode::NED;
  247|    138|                            }
  248|    469|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 147, False: 322]
  ------------------
  249|    147|                            {
  250|    147|                                return OpCode::NEF;
  251|    147|                            }
  252|    607|                        }
  253|    661|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 466, False: 195]
  |  Branch (253:34): [True: 272, False: 389]
  |  Branch (253:50): [True: 272, False: 194]
  ------------------
  254|    272|                        {
  255|    272|                            return OpCode::NOP;
  256|    272|                        }
  257|       |
  258|    711|                        break;
  259|       |
  260|    711|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 329, False: 25.1k]
  ------------------
  261|    408|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 79, False: 25.3k]
  ------------------
  262|    408|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 326, False: 82]
  |  Branch (262:29): [True: 260, False: 148]
  |  Branch (262:45): [True: 260, False: 66]
  ------------------
  263|    260|                        {
  264|    260|                            return OpCode::ORI;
  265|    260|                        }
  266|    148|                        break;
  267|       |
  268|  7.89k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 7.89k, False: 17.5k]
  ------------------
  269|  8.50k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 608, False: 24.8k]
  ------------------
  270|  8.50k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 309, False: 8.19k]
  ------------------
  271|  8.50k|                        {
  272|    210|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 210, False: 8.29k]
  ------------------
  273|    349|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 139, False: 8.36k]
  ------------------
  274|    349|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 276, False: 73]
  ------------------
  275|    276|                                {
  276|    276|                                    return OpCode::SBU;
  277|    276|                                }
  278|     73|                                break;
  279|       |
  280|     79|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 79, False: 8.42k]
  ------------------
  281|  1.26k|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 1.18k, False: 7.31k]
  ------------------
  282|  1.26k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 679, False: 581]
  ------------------
  283|    679|                                {
  284|    679|                                    return OpCode::SEQ;
  285|    679|                                }
  286|    581|                                break;
  287|       |
  288|    581|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 137, False: 8.36k]
  ------------------
  289|    342|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 205, False: 8.29k]
  ------------------
  290|    342|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 132, False: 210]
  ------------------
  291|    132|                                {
  292|    132|                                    return OpCode::SGE;
  293|    132|                                }
  294|    210|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 144, False: 66]
  ------------------
  295|    144|                                {
  296|    144|                                    return OpCode::SGT;
  297|    144|                                }
  298|     66|                                break;
  299|       |
  300|    363|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 363, False: 8.13k]
  ------------------
  301|    492|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 129, False: 8.37k]
  ------------------
  302|    492|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 426, False: 66]
  ------------------
  303|    426|                                {
  304|    426|                                    return OpCode::SHU;
  305|    426|                                }
  306|     66|                                break;
  307|       |
  308|    701|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 701, False: 7.79k]
  ------------------
  309|    988|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 287, False: 8.21k]
  ------------------
  310|    988|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 66, False: 922]
  ------------------
  311|    988|                                {
  312|    194|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 194, False: 794]
  ------------------
  313|    260|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 66, False: 922]
  ------------------
  314|    260|                                        return OpCode::SLA;
  315|       |
  316|    196|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 196, False: 792]
  ------------------
  317|    262|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 66, False: 922]
  ------------------
  318|    262|                                        return OpCode::SLE;
  319|       |
  320|    197|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 197, False: 791]
  ------------------
  321|    267|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 70, False: 918]
  ------------------
  322|    267|                                        return OpCode::SLL;
  323|       |
  324|     66|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 66, False: 922]
  ------------------
  325|    133|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 67, False: 921]
  ------------------
  326|    133|                                        return OpCode::SLT;
  327|    988|                                }
  328|     66|                                break;
  329|       |
  330|     70|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 70, False: 8.43k]
  ------------------
  331|    222|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 152, False: 8.34k]
  ------------------
  332|    222|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 155, False: 67]
  ------------------
  333|    155|                                {
  334|    155|                                    return OpCode::SNE;
  335|    155|                                }
  336|     67|                                break;
  337|       |
  338|  1.63k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 1.63k, False: 6.86k]
  ------------------
  339|  3.91k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 2.27k, False: 6.22k]
  ------------------
  340|  3.91k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 1.58k, False: 2.32k]
  ------------------
  341|  1.58k|                                {
  342|  1.58k|                                    return OpCode::SRA;
  343|  1.58k|                                }
  344|  2.32k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 207, False: 2.12k]
  ------------------
  345|    207|                                {
  346|    207|                                    return OpCode::SRL;
  347|    207|                                }
  348|  2.12k|                                break;
  349|       |
  350|  2.12k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 211, False: 8.28k]
  ------------------
  351|    403|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 192, False: 8.30k]
  ------------------
  352|    403|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 328, False: 75]
  ------------------
  353|    328|                                {
  354|    328|                                    return OpCode::SUB;
  355|    328|                                }
  356|     75|                                break;
  357|       |
  358|    145|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 145, False: 8.35k]
  ------------------
  359|    218|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 73, False: 8.42k]
  ------------------
  360|    218|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 152, False: 66]
  ------------------
  361|    152|                                {
  362|    152|                                    return OpCode::SWU;
  363|    152|                                }
  364|     66|                                break;
  365|  8.50k|                        }
  366|       |
  367|  3.56k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 77, False: 25.3k]
  ------------------
  368|  4.27k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 708, False: 24.7k]
  ------------------
  369|  4.27k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 346, False: 3.92k]
  |  Branch (369:29): [True: 150, False: 4.12k]
  |  Branch (369:45): [True: 150, False: 196]
  ------------------
  370|    150|                        {
  371|    150|                            return OpCode::XOR;
  372|    150|                        }
  373|  4.12k|                        break;
  374|  25.4k|                }
  375|  11.0k|                break;
  376|  25.4k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|  25.6k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 25.6k, False: 75.3k]
  ------------------
  380|  25.6k|                const char c1 = token[0u];
  381|  25.6k|                const char c2 = token[1u];
  382|  25.6k|                const char c3 = token[2u];
  383|  25.6k|                const char c4 = token[3u];
  384|       |
  385|  25.6k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 2.29k, False: 23.3k]
  ------------------
  386|  25.6k|                {
  387|  2.45k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 2.45k, False: 23.1k]
  ------------------
  388|  2.86k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 407, False: 25.1k]
  ------------------
  389|  2.86k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 66, False: 2.79k]
  ------------------
  390|  2.86k|                        {
  391|  2.35k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 2.35k, False: 504]
  ------------------
  392|  2.51k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 157, False: 2.70k]
  ------------------
  393|  2.51k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 2.18k, False: 329]
  ------------------
  394|  2.18k|                                {
  395|  2.18k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 66, False: 2.12k]
  ------------------
  396|  2.18k|                                    {
  397|    473|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 473, False: 1.71k]
  ------------------
  398|    539|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 2.12k]
  ------------------
  399|    539|                                            return OpCode::ADDD;
  400|       |
  401|    568|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 568, False: 1.61k]
  ------------------
  402|    634|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 66, False: 2.12k]
  ------------------
  403|    634|                                            return OpCode::ADDF;
  404|       |
  405|    536|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 536, False: 1.65k]
  ------------------
  406|    602|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 2.12k]
  ------------------
  407|    602|                                            return OpCode::ADDI;
  408|       |
  409|    279|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 279, False: 1.90k]
  ------------------
  410|    345|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 2.12k]
  ------------------
  411|    345|                                            return OpCode::ADDU;
  412|  2.18k|                                    }
  413|  2.18k|                                }
  414|    395|                                break;
  415|       |
  416|    395|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 110, False: 2.75k]
  ------------------
  417|    281|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 171, False: 2.69k]
  ------------------
  418|    281|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 214, False: 67]
  |  Branch (418:37): [True: 142, False: 139]
  |  Branch (418:53): [True: 142, False: 72]
  ------------------
  419|    142|                                {
  420|    142|                                    return OpCode::ANDI;
  421|    142|                                }
  422|       |
  423|    139|                                break;
  424|  2.86k|                        }
  425|    600|                        break;
  426|       |
  427|  3.02k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 3.02k, False: 22.5k]
  ------------------
  428|  4.08k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 1.06k, False: 24.5k]
  ------------------
  429|  4.08k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 74, False: 4.00k]
  ------------------
  430|  4.08k|                        {
  431|    116|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 116, False: 3.96k]
  ------------------
  432|    780|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 664, False: 3.41k]
  ------------------
  433|    780|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 532, False: 248]
  |  Branch (433:37): [True: 466, False: 314]
  |  Branch (433:53): [True: 466, False: 66]
  ------------------
  434|    466|                                {
  435|    466|                                    return OpCode::BEQZ;
  436|    466|                                }
  437|    314|                                break;
  438|       |
  439|  2.54k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 2.54k, False: 1.54k]
  ------------------
  440|  2.83k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 296, False: 3.78k]
  ------------------
  441|  2.83k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 2.77k, False: 66]
  ------------------
  442|  2.77k|                                {
  443|  2.77k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 2.14k, False: 623]
  ------------------
  444|  2.14k|                                    {
  445|  2.14k|                                        return OpCode::BFPF;
  446|  2.14k|                                    }
  447|    623|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 557, False: 66]
  ------------------
  448|    557|                                    {
  449|    557|                                        return OpCode::BFPT;
  450|    557|                                    }
  451|  2.77k|                                }
  452|    132|                                break;
  453|       |
  454|    226|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 226, False: 3.85k]
  ------------------
  455|    392|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 166, False: 3.91k]
  ------------------
  456|    392|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 326, False: 66]
  |  Branch (456:37): [True: 260, False: 132]
  |  Branch (456:53): [True: 260, False: 66]
  ------------------
  457|    260|                                {
  458|    260|                                    return OpCode::BNEZ;
  459|    260|                                }
  460|  4.08k|                        }
  461|    652|                        break;
  462|       |
  463|  1.08k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.08k, False: 24.5k]
  ------------------
  464|  1.20k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 114, False: 25.4k]
  ------------------
  465|  1.20k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 1.08k, False: 118]
  |  Branch (465:29): [True: 1.01k, False: 184]
  |  Branch (465:45): [True: 1.01k, False: 66]
  ------------------
  466|  1.01k|                        {
  467|  1.01k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 104, False: 912]
  ------------------
  468|  1.01k|                            {
  469|    194|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 194, False: 822]
  ------------------
  470|    260|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 950]
  ------------------
  471|    260|                                    return OpCode::DIVD;
  472|       |
  473|     66|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 66, False: 950]
  ------------------
  474|    132|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 950]
  ------------------
  475|    132|                                    return OpCode::DIVF;
  476|       |
  477|    194|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 194, False: 822]
  ------------------
  478|    260|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 66, False: 950]
  ------------------
  479|    260|                                    return OpCode::DIVI;
  480|       |
  481|    194|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 194, False: 822]
  ------------------
  482|    260|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 66, False: 950]
  ------------------
  483|    260|                                    return OpCode::DIVU;
  484|  1.01k|                            }
  485|  1.01k|                        }
  486|    288|                        break;
  487|       |
  488|    288|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 93, False: 25.5k]
  ------------------
  489|  1.13k|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 1.04k, False: 24.5k]
  ------------------
  490|  1.13k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 1.04k, False: 96]
  |  Branch (490:29): [True: 140, False: 996]
  |  Branch (490:45): [True: 974, False: 66]
  |  Branch (490:61): [True: 140, False: 834]
  ------------------
  491|    140|                        {
  492|    140|                            return OpCode::HALT;
  493|    140|                        }
  494|    996|                        break;
  495|       |
  496|    996|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 288, False: 25.3k]
  ------------------
  497|    725|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 437, False: 25.1k]
  ------------------
  498|    725|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 524, False: 201]
  |  Branch (498:29): [True: 132, False: 593]
  |  Branch (498:45): [True: 198, False: 326]
  |  Branch (498:61): [True: 132, False: 66]
  ------------------
  499|    132|                        {
  500|    132|                            return OpCode::JALR;
  501|    132|                        }
  502|    593|                        break;
  503|       |
  504|    884|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 884, False: 24.7k]
  ------------------
  505|  1.51k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 635, False: 24.9k]
  ------------------
  506|  1.51k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 612, False: 907]
  |  Branch (506:29): [True: 546, False: 973]
  |  Branch (506:45): [True: 546, False: 66]
  ------------------
  507|    546|                        {
  508|    546|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 260, False: 286]
  ------------------
  509|    260|                            {
  510|    260|                                return OpCode::MOVD;
  511|    260|                            }
  512|    286|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 220, False: 66]
  ------------------
  513|    220|                            {
  514|    220|                                return OpCode::MOVF;
  515|    220|                            }
  516|    546|                        }
  517|    973|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 896, False: 77]
  |  Branch (517:34): [True: 133, False: 840]
  |  Branch (517:50): [True: 826, False: 70]
  |  Branch (517:66): [True: 133, False: 693]
  ------------------
  518|    133|                        {
  519|    133|                            return OpCode::MULT;
  520|    133|                        }
  521|    906|                        break;
  522|       |
  523|  9.11k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 9.11k, False: 16.4k]
  ------------------
  524|  10.4k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 1.35k, False: 24.2k]
  ------------------
  525|  10.4k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 113, False: 10.3k]
  ------------------
  526|  10.4k|                        {
  527|    278|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 278, False: 10.1k]
  ------------------
  528|  1.31k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 1.03k, False: 9.43k]
  ------------------
  529|  1.31k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 746, False: 571]
  ------------------
  530|    746|                                {
  531|    746|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 527, False: 219]
  ------------------
  532|    527|                                    {
  533|    527|                                        return OpCode::SEQI;
  534|    527|                                    }
  535|    219|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 138, False: 81]
  ------------------
  536|    138|                                    {
  537|    138|                                        return OpCode::SEQU;
  538|    138|                                    }
  539|    746|                                }
  540|    652|                                break;
  541|       |
  542|  2.47k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 2.47k, False: 7.99k]
  ------------------
  543|  3.71k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 1.23k, False: 9.23k]
  ------------------
  544|  3.71k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 2.38k, False: 1.33k]
  ------------------
  545|  2.38k|                                {
  546|  2.38k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 132, False: 2.25k]
  ------------------
  547|    132|                                    {
  548|    132|                                        return OpCode::SGEI;
  549|    132|                                    }
  550|  2.25k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 2.18k, False: 66]
  ------------------
  551|  2.18k|                                    {
  552|  2.18k|                                        return OpCode::SGEU;
  553|  2.18k|                                    }
  554|  2.38k|                                }
  555|  1.33k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 1.26k, False: 70]
  ------------------
  556|  1.26k|                                {
  557|  1.26k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 294, False: 967]
  ------------------
  558|    294|                                    {
  559|    294|                                        return OpCode::SGTI;
  560|    294|                                    }
  561|    967|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 132, False: 835]
  ------------------
  562|    132|                                    {
  563|    132|                                        return OpCode::SGTU;
  564|    132|                                    }
  565|  1.26k|                                }
  566|    971|                                break;
  567|       |
  568|  1.09k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 1.09k, False: 9.37k]
  ------------------
  569|  1.89k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 801, False: 9.66k]
  ------------------
  570|  1.89k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 66, False: 1.82k]
  ------------------
  571|  1.89k|                                {
  572|    213|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 213, False: 1.67k]
  ------------------
  573|    326|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 113, False: 1.77k]
  ------------------
  574|    326|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 260, False: 66]
  ------------------
  575|    260|                                        {
  576|    260|                                            return OpCode::SLAI;
  577|    260|                                        }
  578|     66|                                        break;
  579|       |
  580|    327|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 327, False: 1.56k]
  ------------------
  581|    590|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 263, False: 1.62k]
  ------------------
  582|    590|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 260, False: 330]
  ------------------
  583|    260|                                        {
  584|    260|                                            return OpCode::SLEI;
  585|    260|                                        }
  586|    330|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 264, False: 66]
  ------------------
  587|    264|                                        {
  588|    264|                                            return OpCode::SLEU;
  589|    264|                                        }
  590|     66|                                        break;
  591|       |
  592|    212|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 212, False: 1.67k]
  ------------------
  593|    345|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 133, False: 1.75k]
  ------------------
  594|    345|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 276, False: 69]
  ------------------
  595|    276|                                        {
  596|    276|                                            return OpCode::SLLI;
  597|    276|                                        }
  598|     69|                                        break;
  599|       |
  600|    423|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 423, False: 1.46k]
  ------------------
  601|    564|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 141, False: 1.75k]
  ------------------
  602|    564|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 270, False: 294]
  ------------------
  603|    270|                                        {
  604|    270|                                            return OpCode::SLTI;
  605|    270|                                        }
  606|    294|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 228, False: 66]
  ------------------
  607|    228|                                        {
  608|    228|                                            return OpCode::SLTU;
  609|    228|                                        }
  610|     66|                                        break;
  611|  1.89k|                                }
  612|       |
  613|    754|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 421, False: 10.0k]
  ------------------
  614|  1.29k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 540, False: 9.92k]
  ------------------
  615|  1.29k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 1.02k, False: 268]
  ------------------
  616|  1.02k|                                {
  617|  1.02k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 293, False: 733]
  ------------------
  618|    293|                                    {
  619|    293|                                        return OpCode::SNEI;
  620|    293|                                    }
  621|    733|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 667, False: 66]
  ------------------
  622|    667|                                    {
  623|    667|                                        return OpCode::SNEU;
  624|    667|                                    }
  625|  1.02k|                                }
  626|    334|                                break;
  627|       |
  628|    334|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 239, False: 10.2k]
  ------------------
  629|    440|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 201, False: 10.2k]
  ------------------
  630|    440|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 205, False: 235]
  |  Branch (630:37): [True: 138, False: 302]
  |  Branch (630:53): [True: 138, False: 67]
  ------------------
  631|    138|                                {
  632|    138|                                    return OpCode::SRAI;
  633|    138|                                }
  634|    302|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 228, False: 74]
  |  Branch (634:42): [True: 133, False: 169]
  |  Branch (634:58): [True: 133, False: 95]
  ------------------
  635|    133|                                {
  636|    133|                                    return OpCode::SRLI;
  637|    133|                                }
  638|    169|                                break;
  639|       |
  640|  1.01k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 1.01k, False: 9.45k]
  ------------------
  641|  2.03k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 1.01k, False: 9.45k]
  ------------------
  642|  2.03k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 1.56k, False: 464]
  ------------------
  643|  1.56k|                                {
  644|  1.56k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 286, False: 1.28k]
  ------------------
  645|  1.56k|                                    {
  646|     68|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 68, False: 1.50k]
  ------------------
  647|    134|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 1.50k]
  ------------------
  648|    134|                                            return OpCode::SUBD;
  649|       |
  650|    205|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 205, False: 1.36k]
  ------------------
  651|    271|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 66, False: 1.50k]
  ------------------
  652|    271|                                            return OpCode::SUBF;
  653|       |
  654|    205|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 205, False: 1.36k]
  ------------------
  655|    271|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 66, False: 1.50k]
  ------------------
  656|    271|                                            return OpCode::SUBI;
  657|       |
  658|    541|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 541, False: 1.02k]
  ------------------
  659|    607|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 1.50k]
  ------------------
  660|    607|                                            return OpCode::SUBU;
  661|  1.56k|                                    }
  662|  1.56k|                                }
  663|    750|                                break;
  664|  10.4k|                        }
  665|  2.98k|                        break;
  666|       |
  667|  2.98k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 862, False: 24.7k]
  ------------------
  668|    975|                    case 't':
  ------------------
  |  Branch (668:21): [True: 113, False: 25.4k]
  ------------------
  669|    975|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 908, False: 67]
  |  Branch (669:29): [True: 726, False: 249]
  |  Branch (669:45): [True: 834, False: 74]
  |  Branch (669:61): [True: 726, False: 108]
  ------------------
  670|    726|                        {
  671|    726|                            return OpCode::TRAP;
  672|    726|                        }
  673|    249|                        break;
  674|    249|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 170, False: 25.4k]
  ------------------
  675|    337|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 167, False: 25.4k]
  ------------------
  676|    337|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 265, False: 72]
  |  Branch (676:29): [True: 133, False: 204]
  |  Branch (676:45): [True: 199, False: 66]
  |  Branch (676:61): [True: 133, False: 66]
  ------------------
  677|    133|                        {
  678|    133|                            return OpCode::XORI;
  679|    133|                        }
  680|    204|                        break;
  681|  25.6k|                }
  682|  9.77k|                break;
  683|  25.6k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|  9.77k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 6.42k, False: 94.5k]
  ------------------
  687|  6.42k|                const char c1 = token[0u];
  688|  6.42k|                const char c2 = token[1u];
  689|  6.42k|                const char c3 = token[2u];
  690|  6.42k|                const char c4 = token[3u];
  691|  6.42k|                const char c5 = token[4u];
  692|       |
  693|  6.42k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 3.30k, False: 3.12k]
  ------------------
  694|  6.42k|                {
  695|    353|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 353, False: 6.07k]
  ------------------
  696|    353|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 6.42k]
  ------------------
  697|    353|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 353, False: 0]
  |  Branch (697:29): [True: 353, False: 0]
  |  Branch (697:45): [True: 353, False: 0]
  |  Branch (697:61): [True: 353, False: 0]
  |  Branch (697:77): [True: 353, False: 0]
  ------------------
  698|    353|                        {
  699|    353|                            return OpCode::ADDUI;
  700|    353|                        }
  701|      0|                        break;
  702|       |
  703|    201|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 201, False: 6.22k]
  ------------------
  704|    201|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 6.42k]
  ------------------
  705|    201|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 201, False: 0]
  |  Branch (705:29): [True: 201, False: 0]
  |  Branch (705:45): [True: 201, False: 0]
  |  Branch (705:61): [True: 201, False: 0]
  |  Branch (705:77): [True: 201, False: 0]
  ------------------
  706|    201|                        {
  707|    201|                            return OpCode::DIVUI;
  708|    201|                        }
  709|      0|                        break;
  710|       |
  711|    418|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 418, False: 6.01k]
  ------------------
  712|    418|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 6.42k]
  ------------------
  713|    418|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 418, False: 0]
  |  Branch (713:29): [True: 418, False: 0]
  |  Branch (713:45): [True: 418, False: 0]
  |  Branch (713:61): [True: 418, False: 0]
  ------------------
  714|    418|                        {
  715|    418|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 418]
  ------------------
  716|    418|                            {
  717|     66|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 66, False: 352]
  ------------------
  718|     66|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 418]
  ------------------
  719|     66|                                    return OpCode::MULTD;
  720|       |
  721|    216|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 216, False: 202]
  ------------------
  722|    216|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 418]
  ------------------
  723|    216|                                    return OpCode::MULTF;
  724|       |
  725|     70|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 70, False: 348]
  ------------------
  726|     70|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 418]
  ------------------
  727|     70|                                    return OpCode::MULTI;
  728|       |
  729|     66|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 66, False: 352]
  ------------------
  730|     66|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 418]
  ------------------
  731|     66|                                    return OpCode::MULTU;
  732|    418|                            }
  733|    418|                        }
  734|      0|                        break;
  735|       |
  736|  2.15k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 2.15k, False: 4.27k]
  ------------------
  737|  2.15k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 6.42k]
  ------------------
  738|  2.15k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 2.15k]
  ------------------
  739|  2.15k|                        {
  740|    982|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 982, False: 1.17k]
  ------------------
  741|    982|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 2.15k]
  ------------------
  742|    982|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 982, False: 0]
  |  Branch (742:37): [True: 982, False: 0]
  |  Branch (742:53): [True: 982, False: 0]
  |  Branch (742:69): [True: 982, False: 0]
  ------------------
  743|    982|                                {
  744|    982|                                    return OpCode::SEQUI;
  745|    982|                                }
  746|      0|                                break;
  747|       |
  748|    623|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 623, False: 1.53k]
  ------------------
  749|    623|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 2.15k]
  ------------------
  750|    623|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 363, False: 260]
  |  Branch (750:37): [True: 363, False: 260]
  |  Branch (750:53): [True: 363, False: 0]
  |  Branch (750:69): [True: 363, False: 0]
  ------------------
  751|    363|                                {
  752|    363|                                    return OpCode::SGEUI;
  753|    363|                                }
  754|    260|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 260, False: 0]
  |  Branch (754:42): [True: 260, False: 0]
  |  Branch (754:58): [True: 260, False: 0]
  |  Branch (754:74): [True: 260, False: 0]
  ------------------
  755|    260|                                {
  756|    260|                                    return OpCode::SGTUI;
  757|    260|                                }
  758|      0|                                break;
  759|       |
  760|    267|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 267, False: 1.89k]
  ------------------
  761|    267|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 2.15k]
  ------------------
  762|    267|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 72, False: 195]
  |  Branch (762:37): [True: 72, False: 195]
  |  Branch (762:53): [True: 72, False: 0]
  |  Branch (762:69): [True: 72, False: 0]
  ------------------
  763|     72|                                {
  764|     72|                                    return OpCode::SLEUI;
  765|     72|                                }
  766|    195|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 195, False: 0]
  |  Branch (766:42): [True: 195, False: 0]
  |  Branch (766:58): [True: 195, False: 0]
  |  Branch (766:74): [True: 195, False: 0]
  ------------------
  767|    195|                                {
  768|    195|                                    return OpCode::SLTUI;
  769|    195|                                }
  770|      0|                                break;
  771|       |
  772|     66|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 66, False: 2.09k]
  ------------------
  773|     66|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 2.15k]
  ------------------
  774|     66|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:37): [True: 66, False: 0]
  |  Branch (774:53): [True: 66, False: 0]
  |  Branch (774:69): [True: 66, False: 0]
  ------------------
  775|     66|                                {
  776|     66|                                    return OpCode::SNEUI;
  777|     66|                                }
  778|      0|                                break;
  779|       |
  780|    219|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 219, False: 1.93k]
  ------------------
  781|    219|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 2.15k]
  ------------------
  782|    219|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 219, False: 0]
  |  Branch (782:37): [True: 219, False: 0]
  |  Branch (782:53): [True: 219, False: 0]
  |  Branch (782:69): [True: 219, False: 0]
  ------------------
  783|    219|                                {
  784|    219|                                    return OpCode::SUBUI;
  785|    219|                                }
  786|      0|                                break;
  787|  2.15k|                        }
  788|       |
  789|      0|                        break;
  790|  6.42k|                }
  791|       |
  792|  3.30k|                break;
  793|  6.42k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  3.30k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 1.70k, False: 99.2k]
  ------------------
  797|  1.70k|                const char c1 = token[0u];
  798|  1.70k|                const char c2 = token[1u];
  799|  1.70k|                const char c3 = token[2u];
  800|  1.70k|                const char c4 = token[3u];
  801|  1.70k|                const char c5 = token[4u];
  802|  1.70k|                const char c6 = token[5u];
  803|       |
  804|  1.70k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 1.16k, False: 537]
  |  Branch (804:21): [True: 1.16k, False: 537]
  |  Branch (804:37): [True: 1.16k, False: 0]
  |  Branch (804:53): [True: 1.16k, False: 0]
  ------------------
  805|  1.16k|                {
  806|  1.16k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 1.16k]
  ------------------
  807|  1.16k|                    {
  808|    262|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 262, False: 905]
  ------------------
  809|    262|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 1.16k]
  ------------------
  810|    262|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 262, False: 0]
  ------------------
  811|    262|                            {
  812|    262|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 195, False: 67]
  ------------------
  813|    195|                                {
  814|    195|                                    return OpCode::CVTD2F;
  815|    195|                                }
  816|     67|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 67, False: 0]
  ------------------
  817|     67|                                {
  818|     67|                                    return OpCode::CVTD2I;
  819|     67|                                }
  820|    262|                            }
  821|      0|                            break;
  822|       |
  823|    260|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 260, False: 907]
  ------------------
  824|    260|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 1.16k]
  ------------------
  825|    260|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 260, False: 0]
  ------------------
  826|    260|                            {
  827|    260|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 66, False: 194]
  ------------------
  828|     66|                                {
  829|     66|                                    return OpCode::CVTF2D;
  830|     66|                                }
  831|    194|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 194, False: 0]
  ------------------
  832|    194|                                {
  833|    194|                                    return OpCode::CVTF2I;
  834|    194|                                }
  835|    260|                            }
  836|      0|                            break;
  837|       |
  838|    645|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 645, False: 522]
  ------------------
  839|    645|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 1.16k]
  ------------------
  840|    645|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 645, False: 0]
  ------------------
  841|    645|                            {
  842|    645|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 578, False: 67]
  ------------------
  843|    578|                                {
  844|    578|                                    return OpCode::CVTI2D;
  845|    578|                                }
  846|     67|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 67, False: 0]
  ------------------
  847|     67|                                {
  848|     67|                                    return OpCode::CVTI2F;
  849|     67|                                }
  850|    645|                            }
  851|  1.16k|                    }
  852|  1.16k|                }
  853|    537|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 323, False: 214]
  |  Branch (853:26): [True: 323, False: 214]
  |  Branch (853:42): [True: 323, False: 0]
  |  Branch (853:58): [True: 323, False: 0]
  |  Branch (853:74): [True: 323, False: 0]
  ------------------
  854|    537|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 323, False: 0]
  |  Branch (854:42): [True: 323, False: 0]
  ------------------
  855|    323|                {
  856|    323|                    return OpCode::MULTUI;
  857|    323|                }
  858|    214|                break;
  859|  1.70k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|    329|            case 7: {
  ------------------
  |  Branch (862:13): [True: 329, False: 100k]
  ------------------
  863|    329|                const char c1 = token[0u];
  864|    329|                const char c2 = token[1u];
  865|    329|                const char c3 = token[2u];
  866|    329|                const char c4 = token[3u];
  867|    329|                const char c5 = token[4u];
  868|    329|                const char c6 = token[5u];
  869|    329|                const char c7 = token[6u];
  870|       |
  871|    329|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 169, False: 160]
  |  Branch (871:21): [True: 169, False: 160]
  |  Branch (871:37): [True: 169, False: 0]
  |  Branch (871:53): [True: 169, False: 0]
  ------------------
  872|    169|                {
  873|    169|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 83, False: 86]
  |  Branch (873:25): [True: 83, False: 86]
  |  Branch (873:41): [True: 83, False: 0]
  |  Branch (873:54): [True: 83, False: 0]
  |  Branch (873:70): [True: 83, False: 0]
  ------------------
  874|     83|                    {
  875|     83|                        return OpCode::MOVI2FP;
  876|     83|                    }
  877|     86|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 86, False: 0]
  |  Branch (877:25): [True: 86, False: 0]
  |  Branch (877:41): [True: 86, False: 0]
  |  Branch (877:57): [True: 86, False: 0]
  |  Branch (877:70): [True: 86, False: 0]
  ------------------
  878|     86|                    {
  879|     86|                        return OpCode::MOVFP2I;
  880|     86|                    }
  881|     86|                }
  882|    160|                break;
  883|    329|            }
  884|       |
  885|  5.97k|            default: {
  ------------------
  |  Branch (885:13): [True: 5.97k, False: 94.9k]
  ------------------
  886|  5.97k|                break;
  887|    329|            }
  888|   100k|        }
  889|       |
  890|       |        // None found
  891|  52.8k|        return OpCode::NONE;
  892|   100k|    }
_ZN3dlx3iceEcc:
   17|   130k|    {
   18|   130k|        constexpr const char diff = 'a' - 'A';
   19|   130k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 59.9k, False: 70.6k]
  |  Branch (19:28): [True: 22.1k, False: 48.4k]
  ------------------
   20|   130k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  94.7k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  1.33k|    {
  195|  1.33k|        ParseError err;
  196|       |
  197|  1.33k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  1.33k|        err.m_LineNumber                           = line_number;
  199|  1.33k|        err.m_Column                               = column;
  200|  1.33k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  1.33k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  1.33k|        return err;
  204|  1.33k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  1.33k|    {
  209|  1.33k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  1.33k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  1.33k|                                                         actual_type);
  212|  1.33k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|     68|    {
  218|     68|        ParseError err;
  219|       |
  220|     68|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|     68|        err.m_LineNumber        = line_number;
  222|     68|        err.m_Column            = column;
  223|     68|        err.invalid_number.text = text;
  224|       |
  225|     68|        return err;
  226|     68|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|     68|    {
  230|     68|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|     68|                                                token.GetColumn().unsafe(), token.GetText());
  232|     68|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|      2|    {
  237|      2|        ParseError err;
  238|       |
  239|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|      2|        err.m_LineNumber = line_number;
  241|      2|        err.m_Column     = column;
  242|       |
  243|      2|        return err;
  244|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|      2|    {
  249|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|      2|                                                                     token.GetColumn().unsafe());
  251|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|  31.2k|    {
  257|  31.2k|        ParseError err;
  258|       |
  259|  31.2k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|  31.2k|        err.m_LineNumber                   = line_number;
  261|  31.2k|        err.m_Column                       = column;
  262|  31.2k|        err.unexpected_token.expected_type = expected_type;
  263|  31.2k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|  31.2k|        return err;
  266|  31.2k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|  31.2k|    {
  271|  31.2k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|  31.2k|                                                  token.GetColumn().unsafe(), expected_type,
  273|  31.2k|                                                  token.GetType());
  274|  31.2k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  1.61k|    {
  279|  1.61k|        ParseError err;
  280|       |
  281|  1.61k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  1.61k|        err.m_LineNumber                   = line_number;
  283|  1.61k|        err.m_Column                       = column;
  284|  1.61k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  1.61k|        return err;
  287|  1.61k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|    492|    {
  291|    492|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|    492|                                                    token.GetColumn().unsafe(), token.GetText());
  293|    492|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|  20.2k|    {
  298|  20.2k|        ParseError err;
  299|       |
  300|  20.2k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|  20.2k|        err.m_LineNumber                       = line_number;
  302|  20.2k|        err.m_Column                           = column;
  303|  20.2k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|  20.2k|        return err;
  306|  20.2k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|  20.2k|    {
  311|  20.2k|        return ConstructInvalidLabelIdentifierParseError(
  312|  20.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|  20.2k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  5.74k|    {
  319|  5.74k|        ParseError err;
  320|       |
  321|  5.74k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  5.74k|        err.m_LineNumber                     = line_number;
  323|  5.74k|        err.m_Column                         = column;
  324|  5.74k|        err.label_already_defined.label_name = label_name;
  325|  5.74k|        err.label_already_defined.at_line    = at_line;
  326|  5.74k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  5.74k|        return err;
  329|  5.74k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  5.74k|    {
  334|  5.74k|        return ConstructLabelAlreadyDefinedParseError(
  335|  5.74k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  5.74k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  5.74k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|  21.1k|    {
  342|  21.1k|        ParseError err;
  343|       |
  344|  21.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|  21.1k|        err.m_LineNumber = line_number;
  346|  21.1k|        err.m_Column     = column;
  347|       |
  348|  21.1k|        return err;
  349|  21.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|  21.1k|    {
  354|  21.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|  21.1k|                                                        token.GetColumn().unsafe());
  356|  21.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  11.5k|    {
  362|  11.5k|        ParseError err;
  363|       |
  364|  11.5k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  11.5k|        err.m_LineNumber               = line_number;
  366|  11.5k|        err.m_Column                   = column;
  367|  11.5k|        err.too_few_arguments.required = required;
  368|  11.5k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  11.5k|        return err;
  371|  11.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  11.5k|    {
  376|  11.5k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  11.5k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  11.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  1.58k|    {
  383|  1.58k|        ParseError err;
  384|       |
  385|  1.58k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  1.58k|        err.m_LineNumber           = line_number;
  387|  1.58k|        err.m_Column               = column;
  388|  1.58k|        err.empty_label.label_name = label_name;
  389|       |
  390|  1.58k|        return err;
  391|  1.58k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  1.58k|    {
  395|  1.58k|        return ConstructEmptyLabelParseError(
  396|  1.58k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  1.58k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 1.40k, False: 178]
  ------------------
  398|  1.40k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  1.58k|                        token.GetText());
  400|  1.58k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    158|    {
  405|    158|        ParseError err;
  406|       |
  407|    158|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    158|        err.m_LineNumber = line_number;
  409|    158|        err.m_Column     = column;
  410|       |
  411|    158|        return err;
  412|    158|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    158|    {
  416|    158|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    158|                                               token.GetColumn().unsafe());
  418|    158|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  94.7k|    {
   19|  94.7k|        m_ParseErrors.emplace_back(phi::move(error));
   20|  94.7k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  3.51k|    {
  181|  3.51k|        ParsedProgram program;
  182|       |
  183|  3.51k|        program.m_Tokens = tokens;
  184|       |
  185|  3.51k|        phi::boolean line_has_instruction{false};
  186|  3.51k|        phi::usize   label_count{0u};
  187|       |
  188|   235k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 232k, False: 3.51k]
  ------------------
  189|   232k|        {
  190|   232k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   232k|            switch (current_token.GetType())
  195|   232k|            {
  196|       |                // Ignore comments
  197|  44.7k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 44.7k, False: 187k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  44.7k|                    break;
  200|       |
  201|  87.0k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 87.0k, False: 144k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  87.0k|                    line_has_instruction = false;
  204|  87.0k|                    break;
  205|       |
  206|  28.8k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 28.8k, False: 203k]
  ------------------
  207|  28.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 2.15k, False: 26.7k]
  ------------------
  208|  2.15k|                    {
  209|  2.15k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  2.15k|                                current_token, Token::Type::NewLine));
  211|  2.15k|                        break;
  212|  2.15k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  26.7k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 15.6k, False: 11.1k]
  ------------------
  217|  15.6k|                    {
  218|  15.6k|                        program.AddParseError(
  219|  15.6k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  15.6k|                        break;
  221|  15.6k|                    }
  222|       |
  223|  11.1k|                    phi::string_view label_name = current_token.GetText();
  224|  11.1k|                    label_name.remove_suffix(1u);
  225|       |
  226|  11.1k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.12k, False: 10.0k]
  ------------------
  227|  1.12k|                    {
  228|  1.12k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.12k|                                current_token.GetLineNumber().unsafe(),
  230|  1.12k|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.12k|                        break;
  232|  1.12k|                    }
  233|       |
  234|  10.0k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 2.43k, False: 7.57k]
  ------------------
  235|  2.43k|                    {
  236|  2.43k|                        program.AddParseError(
  237|  2.43k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  2.43k|                        break;
  239|  2.43k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  7.57k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 5.74k, False: 1.83k]
  ------------------
  243|  5.74k|                    {
  244|       |                        // Find first defintions of label
  245|  5.74k|                        const Token* first_label_definition =
  246|  5.74k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  5.74k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  5.74k|                                    {
  249|  5.74k|                                        phi::string_view token_label_name = t.GetText();
  250|  5.74k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  5.74k|                                        if (token_label_name == label_name)
  253|  5.74k|                                        {
  254|  5.74k|                                            return true;
  255|  5.74k|                                        }
  256|  5.74k|                                    }
  257|       |
  258|  5.74k|                                    return false;
  259|  5.74k|                                });
  260|       |
  261|  5.74k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  5.74k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  5.74k|                                current_token, *first_label_definition));
  265|  5.74k|                        break;
  266|  5.74k|                    }
  267|       |
  268|  1.83k|                    program.m_JumpData[label_name] =
  269|  1.83k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  1.83k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  1.83k|                    break;
  276|  7.57k|                }
  277|       |
  278|  46.3k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 46.3k, False: 185k]
  ------------------
  279|  46.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 21.1k, False: 25.2k]
  ------------------
  280|  21.1k|                    {
  281|  21.1k|                        program.AddParseError(
  282|  21.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  21.1k|                        break;
  284|  21.1k|                    }
  285|       |
  286|  25.2k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  25.2k|                    PHI_ASSERT(current_token.HasHint());
  290|  25.2k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  25.2k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  25.2k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  25.2k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  25.2k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  25.2k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  25.2k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  25.2k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  25.2k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  40.4k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 35.0k, False: 5.39k]
  ------------------
  312|  35.0k|                    {
  313|       |                        // Get next token
  314|  35.0k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 149, False: 34.9k]
  ------------------
  315|    149|                        {
  316|    149|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    149|                                    current_token, number_of_argument_required.unsafe(),
  318|    149|                                    argument_num.unsafe()));
  319|    149|                            break;
  320|    149|                        }
  321|       |
  322|  34.9k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  34.9k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 5.94k, False: 28.9k]
  ------------------
  326|  5.94k|                        {
  327|  5.94k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 158, False: 5.78k]
  ------------------
  328|    158|                            {
  329|    158|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    158|                            }
  331|       |
  332|  5.94k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  5.94k|                            continue;
  335|  5.94k|                        }
  336|       |
  337|  28.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 11.4k, False: 17.5k]
  ------------------
  338|  11.4k|                        {
  339|  11.4k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  11.4k|                                    token, number_of_argument_required.unsafe(),
  341|  11.4k|                                    argument_num.unsafe()));
  342|  11.4k|                            break;
  343|  11.4k|                        }
  344|       |
  345|  17.5k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  17.5k|                                parse_instruction_argument(
  347|  17.5k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  17.5k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 8.30k, False: 9.26k]
  ------------------
  349|  8.30k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  8.30k|                            break;
  352|  8.30k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  9.26k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  9.26k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  9.26k|                        argument_num++;
  359|  9.26k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  9.26k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  25.2k|                    program.m_Instructions.emplace_back(instruction);
  367|  25.2k|                    line_has_instruction = true;
  368|  25.2k|                    break;
  369|  46.3k|                }
  370|       |
  371|  24.9k|                default:
  ------------------
  |  Branch (371:17): [True: 24.9k, False: 207k]
  ------------------
  372|  24.9k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  24.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 9.90k, False: 15.0k]
  ------------------
  374|  9.90k|                    {
  375|  9.90k|                        expected_token_type = Token::Type::NewLine;
  376|  9.90k|                    }
  377|       |
  378|  24.9k|                    program.AddParseError(
  379|  24.9k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  24.9k|                    break;
  381|   232k|            }
  382|   232k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  3.51k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 287, False: 3.22k]
  ------------------
  386|    287|        {
  387|  3.01k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 2.73k, False: 287]
  ------------------
  388|  2.73k|            {
  389|  2.73k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  2.73k|                const Token& token = *it;
  392|  2.73k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 1.58k, False: 1.14k]
  ------------------
  393|  1.58k|                {
  394|  1.58k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  1.58k|                    --label_count;
  396|  1.58k|                }
  397|  2.73k|            }
  398|    287|        }
  399|       |
  400|  3.51k|        return program;
  401|  3.51k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  3.51k|    {
  405|  3.51k|        TokenStream tokens = Tokenize(source);
  406|  3.51k|        return Parse(tokens);
  407|  3.51k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  17.5k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  17.5k|        switch (token.GetType())
   37|  17.5k|        {
   38|    507|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 507, False: 17.0k]
  ------------------
   39|    507|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 181, False: 326]
  ------------------
   40|    507|                                          ArgumentType::AddressDisplacement))
   41|    181|                {
   42|    181|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    181|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    181|                    return {};
   46|    181|                }
   47|       |
   48|       |                // Get address displacement
   49|    326|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    326|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|    326|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 324]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    324|                auto         it           = tokens.current_position();
   61|    324|                const Token& first_token  = tokens.consume();
   62|    324|                const Token& second_token = tokens.consume();
   63|    324|                const Token& third_token  = tokens.consume();
   64|       |
   65|    324|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 324, False: 0]
  ------------------
   66|    324|                {
   67|    324|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    324|                            first_token, Token::Type::OpenBracket));
   69|    324|                    return {};
   70|    324|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  4.12k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 4.12k, False: 13.4k]
  ------------------
   97|  4.12k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 157, False: 3.97k]
  ------------------
   98|    157|                {
   99|    157|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    157|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    157|                    return {};
  102|    157|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  3.97k|                return ConstructInstructionArgumentRegisterInt(
  108|  3.97k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  4.12k|            }
  110|    268|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 268, False: 17.3k]
  ------------------
  111|    268|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 202, False: 66]
  ------------------
  112|    202|                {
  113|    202|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    202|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    202|                    return {};
  116|    202|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|     66|                return ConstructInstructionArgumentRegisterFloat(
  122|     66|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|    268|            }
  124|    492|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 492, False: 17.0k]
  ------------------
  125|    492|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|    492|                return {};
  128|    268|            }
  129|  7.17k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 7.17k, False: 10.3k]
  ------------------
  130|       |                // Parse as Label
  131|  7.17k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 475, False: 6.69k]
  ------------------
  132|    475|                {
  133|    475|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    475|                            token, expected_argument_type, ArgumentType::Label));
  135|    475|                    return {};
  136|    475|                }
  137|       |
  138|  6.69k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 6.69k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  6.69k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 2.23k, False: 4.46k]
  ------------------
  145|  2.23k|                {
  146|  2.23k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  2.23k|                    return {};
  148|  2.23k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  4.46k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  6.69k|            }
  154|  1.15k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 1.15k, False: 16.4k]
  ------------------
  155|  1.15k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 323, False: 834]
  ------------------
  156|    323|                {
  157|    323|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    323|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    323|                    return {};
  160|    323|                }
  161|       |
  162|    834|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 766, False: 68]
  ------------------
  163|    766|                {
  164|    766|                    return ConstructInstructionArgumentImmediateValue(
  165|    766|                            static_cast<std::int16_t>(token.GetHint()));
  166|    766|                }
  167|       |
  168|     68|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|     68|                return {};
  170|    834|            }
  171|       |
  172|  3.84k|            default:
  ------------------
  |  Branch (172:13): [True: 3.84k, False: 13.7k]
  ------------------
  173|  3.84k|                program.AddParseError(
  174|  3.84k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  3.84k|                return {};
  176|  17.5k|        }
  177|  17.5k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  61.0k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  61.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 27.0k, False: 34.0k]
  ------------------
  248|  27.0k|                                    {
  249|  27.0k|                                        phi::string_view token_label_name = t.GetText();
  250|  27.0k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  27.0k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 5.74k, False: 21.2k]
  ------------------
  253|  5.74k|                                        {
  254|  5.74k|                                            return true;
  255|  5.74k|                                        }
  256|  27.0k|                                    }
  257|       |
  258|  55.3k|                                    return false;
  259|  61.0k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|    150|    {
  354|    150|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 0, False: 150]
  ------------------
  355|      0|        {
  356|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|      0|            return false;
  358|      0|        }
  359|       |
  360|    150|        m_CurrentProgram = &program;
  361|       |
  362|    150|        m_ProgramCounter               = 0u;
  363|    150|        m_Halted                       = false;
  364|    150|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    150|        m_LastRaisedException          = Exception::None;
  366|    150|        m_CurrentStepCount             = 0u;
  367|       |
  368|    150|        return true;
  369|    150|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|   112k|    {
   13|   112k|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 22.7k, False: 89.3k]
  ------------------
   14|  22.7k|        {
   15|  22.7k|            const char first_char = token[0u];
   16|  22.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 3.81k, False: 18.8k]
  |  Branch (16:38): [True: 1.67k, False: 17.2k]
  ------------------
   17|  5.48k|            {
   18|  5.48k|                const char second_char = token[1u];
   19|  5.48k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 5.39k, False: 95]
  |  Branch (19:43): [True: 3.83k, False: 1.56k]
  ------------------
   20|  3.83k|                {
   21|  3.83k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  3.83k|                }
   23|  5.48k|            }
   24|  22.7k|        }
   25|  89.3k|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 31.7k, False: 57.6k]
  ------------------
   26|  31.7k|        {
   27|  31.7k|            const char first_char = token[0u];
   28|  31.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 3.74k, False: 28.0k]
  |  Branch (28:38): [True: 786, False: 27.2k]
  ------------------
   29|  4.52k|            {
   30|  4.52k|                const char second_char = token[1u];
   31|  4.52k|                const char third_char  = token[2u];
   32|       |
   33|  4.52k|                switch (second_char)
   34|  4.52k|                {
   35|  1.59k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 1.59k, False: 2.93k]
  ------------------
   36|  1.59k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 1.51k, False: 74]
  |  Branch (36:50): [True: 1.19k, False: 323]
  ------------------
   37|  1.19k|                        {
   38|  1.19k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  1.19k|                        }
   40|    397|                        break;
   41|  1.59k|                    }
   42|  2.49k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 2.49k, False: 2.03k]
  ------------------
   43|  2.49k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 2.42k, False: 66]
  |  Branch (43:50): [True: 2.23k, False: 194]
  ------------------
   44|  2.23k|                        {
   45|  2.23k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  2.23k|                        }
   47|    260|                        break;
   48|  2.49k|                    }
   49|    373|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 373, False: 4.15k]
  ------------------
   50|    373|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 66, False: 307]
  |  Branch (50:50): [True: 241, False: 66]
  ------------------
   51|    307|                        {
   52|    307|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|    307|                        }
   54|     66|                        break;
   55|    373|                    }
   56|     71|                    default: {
  ------------------
  |  Branch (56:21): [True: 71, False: 4.45k]
  ------------------
   57|     71|                        break;
   58|    373|                    }
   59|  4.52k|                }
   60|  4.52k|            }
   61|  31.7k|        }
   62|       |
   63|   104k|        return IntRegisterID::None;
   64|   112k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|   104k|    {
   68|   104k|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 18.8k, False: 85.6k]
  ------------------
   69|  18.8k|        {
   70|  18.8k|            const char first_char = token[0u];
   71|  18.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 968, False: 17.9k]
  |  Branch (71:38): [True: 636, False: 17.2k]
  ------------------
   72|  1.60k|            {
   73|  1.60k|                const char second_char = token[1u];
   74|  1.60k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 1.52k, False: 83]
  |  Branch (74:43): [True: 1.01k, False: 503]
  ------------------
   75|  1.01k|                {
   76|  1.01k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  1.01k|                }
   78|  1.60k|            }
   79|  18.8k|        }
   80|  85.6k|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 28.0k, False: 57.6k]
  ------------------
   81|  28.0k|        {
   82|  28.0k|            const char first_char = token[0u];
   83|  28.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 2.59k, False: 25.4k]
  |  Branch (83:38): [True: 2.10k, False: 23.3k]
  ------------------
   84|  4.70k|            {
   85|  4.70k|                const char second_char = token[1u];
   86|  4.70k|                const char third_char  = token[2u];
   87|       |
   88|  4.70k|                switch (second_char)
   89|  4.70k|                {
   90|  1.68k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 1.68k, False: 3.01k]
  ------------------
   91|  1.68k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 1.61k, False: 67]
  |  Branch (91:50): [True: 1.53k, False: 84]
  ------------------
   92|  1.53k|                        {
   93|  1.53k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  1.53k|                        }
   95|    151|                        break;
   96|  1.68k|                    }
   97|  1.87k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 1.87k, False: 2.82k]
  ------------------
   98|  1.87k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 271, False: 1.60k]
  |  Branch (98:50): [True: 70, False: 201]
  ------------------
   99|     70|                        {
  100|     70|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|     70|                        }
  102|  1.80k|                        break;
  103|  1.87k|                    }
  104|  1.80k|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 1.06k, False: 3.64k]
  ------------------
  105|  1.06k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 752, False: 309]
  |  Branch (105:50): [True: 209, False: 100]
  ------------------
  106|    961|                        {
  107|    961|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    961|                        }
  109|    100|                        break;
  110|  1.06k|                    }
  111|    100|                    default: {
  ------------------
  |  Branch (111:21): [True: 83, False: 4.61k]
  ------------------
  112|     83|                        break;
  113|  1.06k|                    }
  114|  4.70k|                }
  115|  4.70k|            }
  116|  28.0k|        }
  117|       |
  118|   100k|        return FloatRegisterID::None;
  119|   104k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|   113k|    {
  123|   113k|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 28.0k, False: 85.3k]
  ------------------
  124|  28.0k|        {
  125|  28.0k|            const char c1 = token[0u];
  126|  28.0k|            const char c2 = token[1u];
  127|  28.0k|            const char c3 = token[2u];
  128|  28.0k|            const char c4 = token[3u];
  129|       |
  130|  28.0k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 2.48k, False: 25.5k]
  |  Branch (130:34): [True: 165, False: 25.4k]
  |  Branch (130:49): [True: 2.45k, False: 193]
  |  Branch (130:62): [True: 127, False: 66]
  ------------------
  131|  28.0k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 2.45k, False: 132]
  |  Branch (131:34): [True: 66, False: 66]
  |  Branch (131:49): [True: 2.45k, False: 66]
  |  Branch (131:62): [True: 0, False: 66]
  ------------------
  132|  28.0k|        }
  133|       |
  134|  85.3k|        return false;
  135|   113k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|   205k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  62.9k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   676k|    {
   41|   676k|        return m_Type;
   42|   676k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   463k|    {
   51|   463k|        return m_LineNumber;
   52|   463k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   887k|    {
   56|   887k|        return m_Column;
   57|   887k|    }
_ZNK3dlx5Token9GetLengthEv:
   60|   618k|    {
   61|   618k|        return m_Text.length();
   62|   618k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   113k|    {
   66|   113k|        return m_Text;
   67|   113k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  26.4k|    {
   80|  26.4k|        return m_HasHint;
   81|  26.4k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  30.3k|    {
   85|  30.3k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  30.3k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  30.3k|                   m_Type == Type::ImmediateInteger);
   88|  30.3k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  30.3k|        return m_Hint;
   91|  30.3k|    }

_ZN3dlx11TokenStream8finalizeEv:
   30|  3.51k|    {
   31|       |#if defined(PHI_DEBUG)
   32|       |        PHI_ASSERT(!m_Finialized);
   33|       |#endif
   34|       |
   35|  3.51k|        m_Iterator = 0u;
   36|       |#if defined(PHI_DEBUG)
   37|       |        m_Finialized = true;
   38|       |#endif
   39|  3.51k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   51|    326|    {
   52|    326|        return x + m_Iterator <= m_Tokens.size();
   53|    326|    }
_ZNK3dlx11TokenStream8has_moreEv:
   56|   270k|    {
   57|   270k|        return m_Iterator < m_Tokens.size();
   58|   270k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   61|   267k|    {
   62|   267k|        return m_Iterator >= m_Tokens.size();
   63|   267k|    }
_ZN3dlx11TokenStream7consumeEv:
   76|   267k|    {
   77|   267k|        PHI_ASSERT(!reached_end());
   78|       |#if defined(PHI_DEBUG)
   79|       |        PHI_ASSERT(m_Finialized);
   80|       |#endif
   81|       |
   82|   267k|        return m_Tokens.at(m_Iterator++.unsafe());
   83|   267k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  155|    324|    {
  156|    324|        return m_Iterator;
  157|    324|    }
_ZNK3dlx11TokenStream5beginEv:
  169|  3.51k|    {
  170|       |#if defined(PHI_DEBUG)
  171|       |        //PHI_ASSERT(m_Finialized);
  172|       |#endif
  173|       |
  174|  3.51k|        return m_Tokens.begin();
  175|  3.51k|    }
_ZNK3dlx11TokenStream3endEv:
  187|  3.51k|    {
  188|       |#if defined(PHI_DEBUG)
  189|       |        //PHI_ASSERT(m_Finialized);
  190|       |#endif
  191|       |
  192|  3.51k|        return m_Tokens.end();
  193|  3.51k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  205|    287|    {
  206|       |#if defined(PHI_DEBUG)
  207|       |        //PHI_ASSERT(m_Finialized);
  208|       |#endif
  209|       |
  210|    287|        return m_Tokens.rbegin();
  211|    287|    }
_ZNK3dlx11TokenStream4rendEv:
  214|  2.73k|    {
  215|       |#if defined(PHI_DEBUG)
  216|       |        //PHI_ASSERT(m_Finialized);
  217|       |#endif
  218|       |
  219|  2.73k|        return m_Tokens.rend();
  220|  2.73k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  3.51k|    {
   66|  3.51k|        TokenStream tokens;
   67|       |
   68|  3.51k|        phi::string_view current_token;
   69|       |
   70|  3.51k|        phi::u64 current_line_number{1u};
   71|  3.51k|        phi::u64 current_column{1u};
   72|  3.51k|        phi::u64 token_begin{0u};
   73|       |
   74|  3.51k|        phi::boolean parsing_comment{false};
   75|       |
   76|   590k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 586k, False: 3.51k]
  ------------------
   77|   586k|        {
   78|   586k|            const char c{source.at(i)};
   79|       |
   80|   586k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 99.1k, False: 487k]
  ------------------
   81|  99.1k|            {
   82|  99.1k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 17.8k, False: 81.2k]
  ------------------
   83|  17.8k|                {
   84|       |                    // Skip empty lines
   85|  17.8k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  17.8k|                                        current_line_number, current_column);
   87|       |
   88|  17.8k|                    parsing_comment = false;
   89|  17.8k|                    current_line_number += 1u;
   90|  17.8k|                    current_column = 1u;
   91|  17.8k|                    continue;
   92|  17.8k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  81.2k|                tokens.emplace_back(ParseToken(
   96|  81.2k|                        source.substring_view(
   97|  81.2k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  81.2k|                                current_token.length()),
   99|  81.2k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  81.2k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  81.2k|                                    current_line_number, current_column);
  103|       |
  104|  81.2k|                current_token   = phi::string_view{};
  105|  81.2k|                parsing_comment = false;
  106|  81.2k|                current_line_number += 1u;
  107|  81.2k|                current_column = 0u;
  108|  81.2k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   487k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 2.53k, False: 484k]
  |  Branch (110:34): [True: 46.0k, False: 438k]
  ------------------
  111|  48.6k|            {
  112|  48.6k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 44.6k, False: 3.92k]
  ------------------
  113|  44.6k|                {
  114|  44.6k|                    token_begin = i;
  115|  44.6k|                }
  116|  3.92k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 2.68k, False: 1.24k]
  ------------------
  117|  2.68k|                {
  118|  2.68k|                    tokens.emplace_back(ParseToken(
  119|  2.68k|                            source.substring_view(
  120|  2.68k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  2.68k|                                    current_token.length()),
  122|  2.68k|                            current_line_number, current_column - current_token.length()));
  123|  2.68k|                    token_begin   = i;
  124|  2.68k|                    current_token = phi::string_view{};
  125|  2.68k|                }
  126|       |
  127|  48.6k|                parsing_comment = true;
  128|  48.6k|                current_token   = source.substring_view(
  129|  48.6k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  48.6k|                        current_token.length() + 1u);
  131|  48.6k|            }
  132|   438k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 51.2k, False: 387k]
  ------------------
  133|  51.2k|            {
  134|       |                // simply append the character
  135|  51.2k|                current_token = source.substring_view(
  136|  51.2k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  51.2k|                        current_token.length() + 1u);
  138|  51.2k|            }
  139|   387k|            else
  140|   387k|            {
  141|       |                // Not parsing a comment
  142|   387k|                switch (c)
  143|   387k|                {
  144|  34.8k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 34.8k, False: 352k]
  ------------------
  145|  38.1k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 3.31k, False: 384k]
  ------------------
  146|  38.1k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 0, False: 387k]
  ------------------
  147|  38.1k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 285, False: 37.8k]
  ------------------
  148|    285|                        {
  149|    285|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    285|                            continue;
  152|    285|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  37.8k|                        tokens.emplace_back(ParseToken(
  156|  37.8k|                                source.substring_view(
  157|  37.8k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  37.8k|                                        current_token.length()),
  159|  37.8k|                                current_line_number, current_column - current_token.length()));
  160|  37.8k|                        current_token = phi::string_view{};
  161|  37.8k|                        break;
  162|  12.8k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 12.8k, False: 374k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  12.8k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 11.5k, False: 1.20k]
  ------------------
  165|  11.5k|                        {
  166|  11.5k|                            current_token = source.substring_view(
  167|  11.5k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  11.5k|                                    current_token.length() + 1u);
  169|  11.5k|                            tokens.emplace_back(ParseToken(
  170|  11.5k|                                    source.substring_view(
  171|  11.5k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  11.5k|                                                    token_begin),
  173|  11.5k|                                            current_token.length()),
  174|  11.5k|                                    current_line_number,
  175|  11.5k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  11.5k|                            current_token = phi::string_view{};
  178|  11.5k|                        }
  179|  1.20k|                        else
  180|  1.20k|                        {
  181|       |                            // Orphan colon
  182|  1.20k|                            token_begin = i;
  183|       |
  184|  1.20k|                            tokens.emplace_back(
  185|  1.20k|                                    Token::Type::Colon,
  186|  1.20k|                                    source.substring_view(
  187|  1.20k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  1.20k|                                                    token_begin),
  189|  1.20k|                                            1u),
  190|  1.20k|                                    current_line_number, current_column);
  191|  1.20k|                        }
  192|  12.8k|                        break;
  193|  14.7k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 14.7k, False: 372k]
  ------------------
  194|  17.5k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 2.84k, False: 384k]
  ------------------
  195|  18.0k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 442, False: 387k]
  ------------------
  196|  18.0k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 15.0k, False: 3.02k]
  ------------------
  197|  15.0k|                        {
  198|  15.0k|                            tokens.emplace_back(ParseToken(
  199|  15.0k|                                    source.substring_view(
  200|  15.0k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  15.0k|                                                    token_begin),
  202|  15.0k|                                            current_token.length()),
  203|  15.0k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  15.0k|                            current_token = phi::string_view{};
  206|  15.0k|                        }
  207|       |
  208|  18.0k|                        Token::Type type;
  209|  18.0k|                        switch (c)
  210|  18.0k|                        {
  211|  14.7k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 14.7k, False: 3.28k]
  ------------------
  212|  14.7k|                                type = Token::Type::Comma;
  213|  14.7k|                                break;
  214|  2.84k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 2.84k, False: 15.1k]
  ------------------
  215|  2.84k|                                type = Token::Type::OpenBracket;
  216|  2.84k|                                break;
  217|    442|                            case ')':
  ------------------
  |  Branch (217:29): [True: 442, False: 17.5k]
  ------------------
  218|    442|                                type = Token::Type::ClosingBracket;
  219|    442|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 18.0k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  18.0k|#endif
  225|  18.0k|                        }
  226|       |
  227|  18.0k|                        token_begin = i;
  228|       |
  229|  18.0k|                        tokens.emplace_back(
  230|  18.0k|                                type,
  231|  18.0k|                                source.substring_view(
  232|  18.0k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  18.0k|                                        1u),
  234|  18.0k|                                current_line_number, current_column);
  235|  18.0k|                        break;
  236|       |
  237|   318k|                    default:
  ------------------
  |  Branch (237:21): [True: 318k, False: 68.9k]
  ------------------
  238|   318k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 102k, False: 216k]
  ------------------
  239|   102k|                        {
  240|   102k|                            token_begin = i;
  241|   102k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   318k|                        current_token = source.substring_view(
  245|   318k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   318k|                                current_token.length() + 1u);
  247|   387k|                }
  248|   387k|            }
  249|       |
  250|   568k|            current_column += 1u;
  251|   568k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  3.51k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 1.20k, False: 2.31k]
  ------------------
  255|  1.20k|        {
  256|  1.20k|            tokens.emplace_back(
  257|  1.20k|                    ParseToken(source.substring_view(
  258|  1.20k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  1.20k|                                       current_token.length()),
  260|  1.20k|                               current_line_number, current_column - current_token.length()));
  261|  1.20k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  3.51k|        tokens.finalize();
  265|       |
  266|  3.51k|        return tokens;
  267|  3.51k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   149k|    {
   14|   149k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 2.77k, False: 146k]
  |  Branch (14:13): [True: 2.35k, False: 147k]
  |  Branch (14:36): [True: 2.35k, False: 422]
  ------------------
   15|  2.35k|        {
   16|  2.35k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  2.35k|            if (number)
  ------------------
  |  Branch (18:17): [True: 1.76k, False: 594]
  ------------------
   19|  1.76k|            {
   20|  1.76k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  1.76k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  1.76k|            }
   23|       |
   24|    594|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  2.35k|        }
   26|       |
   27|   147k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 1.34k, False: 145k]
  |  Branch (27:13): [True: 47.3k, False: 99.8k]
  |  Branch (27:36): [True: 46.0k, False: 99.8k]
  ------------------
   28|  47.3k|        {
   29|  47.3k|            return {Token::Type::Comment, token, line_number, column};
   30|  47.3k|        }
   31|       |
   32|  99.8k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 3.13k, False: 96.7k]
  ------------------
   33|  3.13k|        {
   34|  3.13k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  3.13k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  3.13k|        }
   37|       |
   38|  96.7k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 2.45k, False: 94.2k]
  ------------------
   39|  2.45k|        {
   40|  2.45k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  2.45k|        }
   42|       |
   43|  94.2k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 7.06k, False: 87.2k]
  ------------------
   44|  7.06k|        {
   45|  7.06k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  7.06k|                    static_cast<phi::uint32_t>(id)};
   47|  7.06k|        }
   48|       |
   49|  87.2k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 3.51k, False: 83.6k]
  ------------------
   50|  3.51k|        {
   51|  3.51k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  3.51k|                    static_cast<phi::uint32_t>(id)};
   53|  3.51k|        }
   54|       |
   55|  83.6k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 47.5k, False: 36.1k]
  ------------------
   56|  47.5k|        {
   57|  47.5k|            return {Token::Type::OpCode, token, line_number, column,
   58|  47.5k|                    static_cast<phi::uint32_t>(opcode)};
   59|  47.5k|        }
   60|       |
   61|  36.1k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  83.6k|    }

_ZN6ImVec2C2Ev:
  262|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   59|  3.51k|    {
   60|       |        // Constants
   61|  3.51k|        constexpr std::uint8_t number_of_opcodes =
   62|  3.51k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   63|  3.51k|        constexpr std::uint8_t number_of_int_registers   = 32;
   64|  3.51k|        constexpr std::uint8_t number_of_float_registers = 32;
   65|       |
   66|  3.51k|        std::string ret;
   67|       |
   68|   118k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (68:36): [True: 115k, False: 3.50k]
  ------------------
   69|   115k|        {
   70|   115k|            std::uint8_t current_value = data[index++];
   71|       |
   72|   115k|            switch (current_value)
   73|   115k|            {
   74|       |                // OpCode
   75|  33.7k|                case 0: {
  ------------------
  |  Branch (75:17): [True: 33.7k, False: 81.4k]
  ------------------
   76|       |                    // Has one more value
   77|  33.7k|                    if (index < size)
  ------------------
  |  Branch (77:25): [True: 33.7k, False: 5]
  ------------------
   78|  33.7k|                    {
   79|  33.7k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   80|       |
   81|  33.7k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   82|       |
   83|  33.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (83:29): [True: 4, False: 33.7k]
  ------------------
   84|      4|                        {
   85|      4|                            return detail::ErrorString;
   86|      4|                        }
   87|  33.7k|                    }
   88|  33.7k|                    break;
   89|  33.7k|                }
   90|       |
   91|       |                // Int Register
   92|  33.7k|                case 1: {
  ------------------
  |  Branch (92:17): [True: 7.86k, False: 107k]
  ------------------
   93|       |                    // Has one more value
   94|  7.86k|                    if (index < size)
  ------------------
  |  Branch (94:25): [True: 7.86k, False: 7]
  ------------------
   95|  7.86k|                    {
   96|  7.86k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   97|       |
   98|  7.86k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   99|  7.86k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (99:29): [True: 1, False: 7.85k]
  ------------------
  100|      1|                        {
  101|      1|                            return detail::ErrorString;
  102|      1|                        }
  103|  7.86k|                    }
  104|  7.86k|                    break;
  105|  7.86k|                }
  106|       |
  107|       |                // Float register
  108|  7.86k|                case 2: {
  ------------------
  |  Branch (108:17): [True: 3.51k, False: 111k]
  ------------------
  109|       |                    // Has one more value
  110|  3.51k|                    if (index < size)
  ------------------
  |  Branch (110:25): [True: 3.51k, False: 1]
  ------------------
  111|  3.51k|                    {
  112|  3.51k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  113|       |
  114|  3.51k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  115|  3.51k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (115:29): [True: 1, False: 3.51k]
  ------------------
  116|      1|                        {
  117|      1|                            return detail::ErrorString;
  118|      1|                        }
  119|  3.51k|                    }
  120|  3.51k|                    break;
  121|  3.51k|                }
  122|       |
  123|       |                // Floating point status register
  124|  3.51k|                case 3: {
  ------------------
  |  Branch (124:17): [True: 2.60k, False: 112k]
  ------------------
  125|  2.60k|                    ret += "FPSR";
  126|  2.60k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (126:25): [True: 2, False: 2.60k]
  ------------------
  127|      2|                    {
  128|      2|                        return detail::ErrorString;
  129|      2|                    }
  130|       |
  131|  2.60k|                    break;
  132|  2.60k|                }
  133|       |
  134|       |                // Immediate integer
  135|  3.01k|                case 4: {
  ------------------
  |  Branch (135:17): [True: 3.01k, False: 112k]
  ------------------
  136|  3.01k|                    ret += "#";
  137|  3.01k|                    [[fallthrough]];
  138|  3.01k|                }
  139|       |
  140|       |                // Integer literal
  141|  9.25k|                case 5: {
  ------------------
  |  Branch (141:17): [True: 6.23k, False: 108k]
  ------------------
  142|  9.25k|                    std::size_t size_of_int = std::min(2ul, size - index);
  143|       |
  144|  9.25k|                    if (size_of_int > 0)
  ------------------
  |  Branch (144:25): [True: 9.20k, False: 43]
  ------------------
  145|  9.20k|                    {
  146|  9.20k|                        std::int16_t value = 0;
  147|       |
  148|  27.5k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (148:32): [True: 18.3k, False: 9.20k]
  ------------------
  149|  18.3k|                        {
  150|  18.3k|                            value <<= 8;
  151|  18.3k|                            value &= data[index++];
  152|  18.3k|                        }
  153|       |
  154|  9.20k|                        ret += std::to_string(value);
  155|  9.20k|                    }
  156|  9.25k|                    break;
  157|  3.01k|                }
  158|       |
  159|       |                // Label
  160|  3.26k|                case 6: {
  ------------------
  |  Branch (160:17): [True: 3.26k, False: 111k]
  ------------------
  161|  3.26k|                    std::size_t label_length = std::min(5ul, size - index);
  162|       |
  163|  3.26k|                    if (label_length > 0)
  ------------------
  |  Branch (163:25): [True: 3.25k, False: 1]
  ------------------
  164|  3.25k|                    {
  165|  3.25k|                        std::string label_name = "lbl_";
  166|       |
  167|  19.3k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (167:32): [True: 16.1k, False: 3.25k]
  ------------------
  168|  16.1k|                        {
  169|  16.1k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  170|       |
  171|  16.1k|                            label_name += c;
  172|  16.1k|                        }
  173|       |
  174|       |                        // Add 1 in 10 chance to add a colon
  175|  3.25k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (175:29): [True: 3.18k, False: 72]
  |  Branch (175:45): [True: 2.83k, False: 354]
  ------------------
  176|  2.83k|                        {
  177|  2.83k|                            label_name += ':';
  178|  2.83k|                            ret += label_name;
  179|  2.83k|                        }
  180|    426|                        else
  181|    426|                        {
  182|    426|                            ret += label_name;
  183|    426|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (183:33): [True: 1, False: 425]
  ------------------
  184|      1|                            {
  185|      1|                                return detail::ErrorString;
  186|      1|                            }
  187|    426|                        }
  188|  3.25k|                    }
  189|  3.25k|                    break;
  190|  3.26k|                }
  191|       |
  192|       |                // Newline
  193|  8.99k|                case 7: {
  ------------------
  |  Branch (193:17): [True: 8.99k, False: 106k]
  ------------------
  194|  8.99k|                    ret += '\n';
  195|  8.99k|                    break;
  196|  3.26k|                }
  197|       |
  198|       |                // Comment
  199|  45.9k|                case 8: {
  ------------------
  |  Branch (199:17): [True: 45.9k, False: 69.2k]
  ------------------
  200|  45.9k|                    std::size_t comment_length = std::min(5ul, size - index);
  201|       |
  202|  45.9k|                    if (comment_length > 0)
  ------------------
  |  Branch (202:25): [True: 45.9k, False: 10]
  ------------------
  203|  45.9k|                    {
  204|  45.9k|                        std::string comment = "; ";
  205|       |
  206|   273k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (206:32): [True: 227k, False: 45.9k]
  ------------------
  207|   227k|                        {
  208|   227k|                            comment += static_cast<char>(data[index++]);
  209|   227k|                        }
  210|       |
  211|  45.9k|                        ret += comment + '\n';
  212|  45.9k|                    }
  213|  45.9k|                    break;
  214|  3.26k|                }
  215|       |
  216|       |                // Ignore
  217|      2|                default:
  ------------------
  |  Branch (217:17): [True: 2, False: 115k]
  ------------------
  218|      2|                    return detail::ErrorString;
  219|   115k|            }
  220|   115k|        }
  221|       |
  222|  3.50k|        return ret;
  223|  3.51k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   24|  48.1k|        {
   25|  48.1k|            if (index < size)
  ------------------
  |  Branch (25:17): [True: 47.0k, False: 1.09k]
  ------------------
   26|  47.0k|            {
   27|  47.0k|                std::uint8_t val = data[index++];
   28|  47.0k|                if (val == 0)
  ------------------
  |  Branch (28:21): [True: 34.6k, False: 12.3k]
  ------------------
   29|  34.6k|                {
   30|  34.6k|                    text += ' ';
   31|  34.6k|                }
   32|  12.3k|                else if (val == 1)
  ------------------
  |  Branch (32:26): [True: 12.3k, False: 9]
  ------------------
   33|  12.3k|                {
   34|  12.3k|                    text += ',';
   35|  12.3k|                }
   36|      9|                else
   37|      9|                {
   38|      9|                    return false;
   39|      9|                }
   40|  47.0k|            }
   41|       |
   42|  48.1k|            return true;
   43|  48.1k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   48|  16.1k|        {
   49|  16.1k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (49:17): [True: 11.8k, False: 4.28k]
  ------------------
   50|  11.8k|            {
   51|  11.8k|                return '_';
   52|  11.8k|            }
   53|       |
   54|  4.28k|            return c;
   55|  16.1k|        }

LLVMFuzzerTestOneInput:
   11|  3.51k|{
   12|  3.51k|    static dlxemu::Emulator emu;
   13|       |
   14|  3.51k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|  3.51k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   17|       |
   18|       |    // Parse it
   19|  3.51k|    editor.SetText(source);
   20|  3.51k|    editor.m_FullText = editor.GetText();
   21|       |
   22|  3.51k|    emu.ParseProgram(editor.m_FullText);
   23|       |
   24|  3.51k|    editor.ColorizeInternal();
   25|       |
   26|  3.51k|    return 0;
   27|  3.51k|}


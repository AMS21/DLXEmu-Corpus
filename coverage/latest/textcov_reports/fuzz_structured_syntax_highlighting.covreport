_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  33.8k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  237|  6.77k|    {
  238|  6.77k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (238:13): [True: 4.76k, False: 2.00k]
  ------------------
  239|  4.76k|        {
  240|  4.76k|            return m_Line < other.m_Line;
  241|  4.76k|        }
  242|       |
  243|  2.00k|        return m_Column <= other.m_Column;
  244|  6.77k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  248|      1|    {
  249|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (249:13): [True: 0, False: 1]
  ------------------
  250|      0|        {
  251|      0|            return m_Line > other.m_Line;
  252|      0|        }
  253|       |
  254|      1|        return m_Column >= other.m_Column;
  255|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  262|  2.98M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  290|      1|    {
  291|      1|        Colorize();
  292|      1|        m_Lines.push_back(Line());
  293|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  296|      1|    {
  297|      1|        VerifyInternalState();
  298|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  346|  6.77k|    {
  347|  6.77k|        m_ErrorMarkers.clear();
  348|  6.77k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  411|  6.77k|    {
  412|  6.77k|        m_Breakpoints.clear();
  413|  6.77k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  508|  6.77k|    {
  509|  6.77k|        m_Lines.clear();
  510|  6.77k|        ResetState();
  511|  6.77k|        m_Lines.emplace_back(Line());
  512|       |
  513|  6.77k|        for (const char character : text)
  ------------------
  |  Branch (513:35): [True: 3.96M, False: 6.77k]
  ------------------
  514|  3.96M|        {
  515|  3.96M|            if (character == '\r' ||
  ------------------
  |  Branch (515:17): [True: 737, False: 3.96M]
  |  Branch (515:17): [True: 203k, False: 3.76M]
  ------------------
  516|  3.96M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (516:18): [True: 985k, False: 2.97M]
  |  Branch (516:48): [True: 203k, False: 781k]
  |  Branch (516:69): [True: 202k, False: 1.55k]
  ------------------
  517|   203k|            {
  518|       |                // ignore the carriage return character and control characters
  519|   203k|            }
  520|  3.76M|            else if (character == '\n')
  ------------------
  |  Branch (520:22): [True: 781k, False: 2.98M]
  ------------------
  521|   781k|            {
  522|   781k|                m_Lines.emplace_back(Line());
  523|   781k|            }
  524|  2.98M|            else
  525|  2.98M|            {
  526|  2.98M|                m_Lines.back().emplace_back(
  527|  2.98M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  528|  2.98M|            }
  529|  3.96M|        }
  530|       |
  531|  6.77k|        m_TextChanged = true;
  532|  6.77k|        m_ScrollToTop = true;
  533|       |
  534|  6.77k|        m_UndoBuffer.clear();
  535|  6.77k|        m_UndoIndex = 0u;
  536|       |
  537|  6.77k|        Colorize();
  538|  6.77k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  541|  6.77k|    {
  542|  6.77k|        const phi::u32 max_line = GetMaxLineNumber();
  543|       |
  544|  6.77k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  545|  6.77k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1505|      1|    {
 1506|       |        // Lines should never be empty
 1507|      1|        PHI_ASSERT(!m_Lines.empty());
 1508|       |
 1509|       |        // Verify Selection is still in a valid state
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1511|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1512|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1513|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1514|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1515|       |
 1516|       |        // Verify cursor position
 1517|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1518|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1519|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1520|       |
 1521|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1522|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1523|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1524|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1525|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1526|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1527|       |#endif
 1528|       |
 1529|       |        // Verify that all breakpoints are on existing lines
 1530|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1530:35): [True: 0, False: 1]
  ------------------
 1531|      0|        {
 1532|      0|            PHI_ASSERT(break_point != 0u);
 1533|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1534|      0|        }
 1535|       |
 1536|       |        // Verify that all error markers are on existing lines
 1537|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1537:34): [True: 0, False: 1]
  ------------------
 1538|      0|        {
 1539|      0|            const phi::u32 line_number = error_marker.first;
 1540|       |
 1541|      0|            PHI_ASSERT(line_number != 0u);
 1542|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1543|      0|        }
 1544|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1547|      1|    {
 1548|      1|        constexpr const static Palette palette = {{
 1549|      1|                0xff7f7f7f, // Default
 1550|      1|                0xffd69c56, // OpCode
 1551|      1|                0xff00ff00, // Register
 1552|      1|                0xff7070e0, // IntegerLiteral
 1553|      1|                0xff206020, // Comment
 1554|      1|                0xff101010, // Background
 1555|      1|                0xffe0e0e0, // Cursor
 1556|      1|                0x80a06020, // Selection
 1557|      1|                0x800020ff, // ErrorMarker
 1558|      1|                0x40f08000, // Breakpoint
 1559|      1|                0xff707000, // Line number
 1560|      1|                0x40000000, // Current line fill
 1561|      1|                0x40808080, // Current line fill (inactive)
 1562|      1|                0x40a0a0a0, // Current line edge
 1563|      1|        }};
 1564|       |
 1565|      1|        return palette;
 1566|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1733|  6.77k|    {
 1734|       |        // TODO: This is quite unreadable
 1735|  6.77k|        const phi::u32 to_line =
 1736|  6.77k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1736:17): [True: 6.77k, False: 0]
  ------------------
 1737|  6.77k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1738|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1739|       |
 1740|  6.77k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1741|  6.77k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1742|  6.77k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1743|  6.77k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1744|  6.77k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1850|  6.77k|    {
 1851|  6.77k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1852|  6.77k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1853|  6.77k|        PHI_ASSERT(start <= end);
 1854|       |
 1855|  6.77k|        std::string result;
 1856|       |
 1857|  6.77k|        phi::u32   lstart = start.m_Line;
 1858|  6.77k|        phi::u32   lend   = end.m_Line;
 1859|  6.77k|        phi::u32   istart = GetCharacterIndex(start);
 1860|  6.77k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1861|  6.77k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1862|  6.77k|        phi::usize size   = 0u;
 1863|       |
 1864|   794k|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1864:35): [True: 787k, False: 6.77k]
  ------------------
 1865|   787k|        {
 1866|   787k|            PHI_ASSERT(i < m_Lines.size());
 1867|   787k|            size += m_Lines[i.unsafe()].size();
 1868|   787k|        }
 1869|       |
 1870|  6.77k|        result.reserve((size + size / 8u).unsafe());
 1871|       |
 1872|  3.76M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1872:16): [True: 1.65M, False: 2.10M]
  |  Branch (1872:16): [True: 3.76M, False: 6.77k]
  |  Branch (1872:33): [True: 2.10M, False: 6.77k]
  ------------------
 1873|  3.76M|        {
 1874|  3.76M|            PHI_ASSERT(lstart < m_Lines.size());
 1875|       |
 1876|  3.76M|            const Line& line = m_Lines[lstart.unsafe()];
 1877|  3.76M|            if (istart < line.size())
  ------------------
  |  Branch (1877:17): [True: 2.98M, False: 781k]
  ------------------
 1878|  2.98M|            {
 1879|  2.98M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1880|  2.98M|                istart++;
 1881|  2.98M|            }
 1882|   781k|            else
 1883|   781k|            {
 1884|   781k|                istart = 0u;
 1885|   781k|                ++lstart;
 1886|       |
 1887|   781k|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1887:21): [True: 781k, False: 0]
  ------------------
 1888|   781k|                {
 1889|   781k|                    result += '\n';
 1890|   781k|                }
 1891|   781k|            }
 1892|  3.76M|        }
 1893|       |
 1894|  6.77k|        return result;
 1895|  6.77k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2431|  13.5k|    {
 2432|  13.5k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2433|       |
 2434|  13.5k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2435|  13.5k|        phi::u32    index = 0u;
 2436|   974k|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2436:35): [True: 966k, False: 8.16k]
  |  Branch (2436:35): [True: 961k, False: 13.5k]
  |  Branch (2436:58): [True: 961k, False: 5.37k]
  ------------------
 2437|   961k|        {
 2438|   961k|            PHI_ASSERT(index < line.size());
 2439|   961k|            const Char character = line[index.unsafe()].m_Char;
 2440|       |
 2441|   961k|            if (character == '\t')
  ------------------
  |  Branch (2441:17): [True: 0, False: 961k]
  ------------------
 2442|      0|            {
 2443|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2444|      0|            }
 2445|   961k|            else
 2446|   961k|            {
 2447|   961k|                ++column;
 2448|   961k|            }
 2449|       |
 2450|   961k|            index += UTF8CharLength(character);
 2451|   961k|        }
 2452|       |
 2453|  13.5k|        return index;
 2454|  13.5k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2503|  6.77k|    {
 2504|  6.77k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2504:13): [True: 0, False: 6.77k]
  ------------------
 2505|      0|        {
 2506|      0|            return 0u;
 2507|      0|        }
 2508|       |
 2509|  6.77k|        const Line& line = m_Lines[line_number.unsafe()];
 2510|  6.77k|        phi::u32    col  = 0u;
 2511|       |
 2512|   968k|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2512:32): [True: 961k, False: 6.77k]
  ------------------
 2513|   961k|        {
 2514|   961k|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2515|   961k|            if (character == '\t')
  ------------------
  |  Branch (2515:17): [True: 0, False: 961k]
  ------------------
 2516|      0|            {
 2517|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2518|      0|            }
 2519|   961k|            else
 2520|   961k|            {
 2521|   961k|                col++;
 2522|   961k|            }
 2523|       |
 2524|   961k|            i += UTF8CharLength(character);
 2525|   961k|        }
 2526|       |
 2527|  6.77k|        return col;
 2528|  6.77k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2531|  6.77k|    {
 2532|  6.77k|        PHI_ASSERT(!m_Lines.empty());
 2533|       |
 2534|  6.77k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2535|  6.77k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3663|  1.71M|    {
 3664|  1.71M|        PaletteIndex palette_index{PaletteIndex::Default};
 3665|       |
 3666|       |        // Determine palette color
 3667|  1.71M|        switch (token.GetType())
 3668|  1.71M|        {
 3669|   178k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3669:13): [True: 178k, False: 1.53M]
  ------------------
 3670|   178k|                palette_index = PaletteIndex::Comment;
 3671|   178k|                break;
 3672|  8.91k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3672:13): [True: 8.91k, False: 1.70M]
  ------------------
 3673|  24.7k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3673:13): [True: 15.8k, False: 1.69M]
  ------------------
 3674|  24.7k|                palette_index = PaletteIndex::IntegerLiteral;
 3675|  24.7k|                break;
 3676|   380k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3676:13): [True: 380k, False: 1.32M]
  ------------------
 3677|   380k|                palette_index = PaletteIndex::OpCode;
 3678|   380k|                break;
 3679|  13.7k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3679:13): [True: 13.7k, False: 1.69M]
  ------------------
 3680|  84.4k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3680:13): [True: 70.7k, False: 1.64M]
  ------------------
 3681|  98.1k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3681:13): [True: 13.6k, False: 1.69M]
  ------------------
 3682|  98.1k|                palette_index = PaletteIndex::Register;
 3683|  98.1k|                break;
 3684|   781k|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3684:13): [True: 781k, False: 929k]
  ------------------
 3685|   781k|                return;
 3686|   247k|            default:
  ------------------
  |  Branch (3686:13): [True: 247k, False: 1.46M]
  ------------------
 3687|   247k|                break;
 3688|  1.71M|        }
 3689|       |
 3690|   929k|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3691|   929k|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3692|       |
 3693|   929k|        for (phi::u64 index{token.GetColumn() - 1u};
 3694|  3.55M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3694:14): [True: 2.62M, False: 929k]
  ------------------
 3695|  2.62M|        {
 3696|  2.62M|            PHI_ASSERT(index < line.size());
 3697|  2.62M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3698|  2.62M|        }
 3699|   929k|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3702|  6.77k|    {
 3703|  6.77k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3704|       |
 3705|  6.77k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3705:38): [True: 1.71M, False: 6.77k]
  ------------------
 3706|  1.71M|        {
 3707|  1.71M|            ColorizeToken(token);
 3708|  1.71M|        }
 3709|  6.77k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3712|  6.77k|    {
 3713|  6.77k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3714|  6.77k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3715|  6.77k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3716|       |
 3717|       |        // Clear breakpoints and markers
 3718|  6.77k|        ClearBreakPoints();
 3719|  6.77k|        ClearErrorMarkers();
 3720|  6.77k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|   961k|{
  133|   961k|    return UTF8CharLength(static_cast<char>(characater));
  134|   961k|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  1.92M|{
  103|  1.92M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 1.92M]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|  1.92M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 1.92M]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|  1.92M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 1.92M]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|  1.92M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 1.92M]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|  1.92M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 1.92M]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|  1.92M|    return 1_u8;
  129|  1.92M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  6.77k|    {
  175|  6.77k|        return m_DLXProgram;
  176|  6.77k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  6.77k|    {
  180|  6.77k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  6.77k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 164, False: 6.60k]
  ------------------
  183|    164|        {
  184|    164|            m_Processor.LoadProgram(m_DLXProgram);
  185|    164|        }
  186|  6.77k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  6.77k|    {
  200|  6.77k|        return m_CodeEditor;
  201|  6.77k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|      1|    {
  107|      1|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 1]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 1]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|      1|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 1]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   321k|        {
  169|   321k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   321k|            switch (index.unsafe())
  172|   321k|            {
  173|   133k|                case 0:
  ------------------
  |  Branch (173:17): [True: 133k, False: 188k]
  ------------------
  174|   133k|                    return m_Arg1Type;
  175|       |
  176|  95.5k|                case 1:
  ------------------
  |  Branch (176:17): [True: 95.5k, False: 226k]
  ------------------
  177|  95.5k|                    return m_Arg2Type;
  178|       |
  179|  92.9k|                case 2:
  ------------------
  |  Branch (179:17): [True: 92.9k, False: 228k]
  ------------------
  180|  92.9k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 321k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   321k|#endif
  187|   321k|            }
  188|   321k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  89.8k|        {
  195|  89.8k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  89.8k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 89.5k, False: 226]
  ------------------
  199|  89.5k|            {
  200|  89.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  89.5k|            }
  202|  89.8k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 72.7k, False: 17.0k]
  ------------------
  203|  72.7k|            {
  204|  72.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  72.7k|            }
  206|  89.8k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 47.8k, False: 41.9k]
  ------------------
  207|  47.8k|            {
  208|  47.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  47.8k|            }
  210|       |
  211|  89.8k|            return number_of_argument_required;
  212|  89.8k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  89.8k|        {
  221|  89.8k|            return m_Executor;
  222|  89.8k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  31.4k|    {
   38|  31.4k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  31.4k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  31.4k|                                         static_cast<underlying_t>(rhs));
   42|  31.4k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  31.4k|    {
   55|  31.4k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  31.4k|        return static_cast<underlying_t>(type & test) != 0;
   58|  31.4k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   346k|    {
  204|   346k|        switch (value)
  205|   346k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   167k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   167k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 167k, False: 178k]
  |  |  |  |  ------------------
  |  |  |  |  208|   167k|        return #name;
  |  |  ------------------
  |  |   16|   167k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.35k, False: 338k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.35k|        return #name;
  |  |  ------------------
  |  |   17|  7.35k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.62k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.62k|        return #name;
  |  |  ------------------
  |  |   18|  9.88k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  9.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.88k, False: 336k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.88k|        return #name;
  |  |  ------------------
  |  |   19|  9.88k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.20k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.20k|        return #name;
  |  |  ------------------
  |  |   20|  4.20k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.16k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.16k|        return #name;
  |  |  ------------------
  |  |   21|  2.16k|                                                                                                   \
  |  |   22|  2.16k|    /* Sub */                                                                                      \
  |  |   23|  3.08k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.08k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.08k|        return #name;
  |  |  ------------------
  |  |   24|  3.08k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.06k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.06k|        return #name;
  |  |  ------------------
  |  |   25|  2.99k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.99k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.99k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.99k|        return #name;
  |  |  ------------------
  |  |   26|  3.53k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.53k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.53k|        return #name;
  |  |  ------------------
  |  |   27|  4.32k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.32k, False: 341k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.32k|        return #name;
  |  |  ------------------
  |  |   28|  4.32k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    213|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 213, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    213|        return #name;
  |  |  ------------------
  |  |   29|    213|                                                                                                   \
  |  |   30|    213|    /* Multiplication */                                                                           \
  |  |   31|    854|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    854|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 854, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    854|        return #name;
  |  |  ------------------
  |  |   32|    854|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    393|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 393, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    393|        return #name;
  |  |  ------------------
  |  |   33|  1.16k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.16k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.16k|        return #name;
  |  |  ------------------
  |  |   34|  1.45k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.45k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.45k|        return #name;
  |  |  ------------------
  |  |   35|  2.86k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.86k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.86k|        return #name;
  |  |  ------------------
  |  |   36|  2.86k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    515|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 515, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    515|        return #name;
  |  |  ------------------
  |  |   37|    515|                                                                                                   \
  |  |   38|    515|    /* Division */                                                                                 \
  |  |   39|    955|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    955|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 955, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    955|        return #name;
  |  |  ------------------
  |  |   40|    955|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    366|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 366, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    366|        return #name;
  |  |  ------------------
  |  |   41|  1.36k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.36k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.36k|        return #name;
  |  |  ------------------
  |  |   42|  1.36k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    773|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 773, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    773|        return #name;
  |  |  ------------------
  |  |   43|    773|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    182|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 182, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    182|        return #name;
  |  |  ------------------
  |  |   44|  1.22k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.22k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.22k|        return #name;
  |  |  ------------------
  |  |   45|  1.22k|                                                                                                   \
  |  |   46|  1.22k|    /* Shift left (logical) */                                                                     \
  |  |   47|  3.44k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.44k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.44k|        return #name;
  |  |  ------------------
  |  |   48|  3.44k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.37k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.37k|        return #name;
  |  |  ------------------
  |  |   49|  1.37k|                                                                                                   \
  |  |   50|  1.37k|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.37k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    174|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 174, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    174|        return #name;
  |  |  ------------------
  |  |   52|    977|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    977|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 977, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    977|        return #name;
  |  |  ------------------
  |  |   53|    977|                                                                                                   \
  |  |   54|    977|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.07k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.07k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.07k|        return #name;
  |  |  ------------------
  |  |   56|  1.82k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.82k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.82k|        return #name;
  |  |  ------------------
  |  |   57|  1.82k|                                                                                                   \
  |  |   58|  1.82k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  1.82k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.17k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.17k|        return #name;
  |  |  ------------------
  |  |   60|  1.17k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    840|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 840, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    840|        return #name;
  |  |  ------------------
  |  |   61|    840|                                                                                                   \
  |  |   62|    840|    /* Logic */                                                                                    \
  |  |   63|    840|                                                                                                   \
  |  |   64|    840|    /* And */                                                                                      \
  |  |   65|  3.36k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.36k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.36k|        return #name;
  |  |  ------------------
  |  |   66|  3.36k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.15k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.15k|        return #name;
  |  |  ------------------
  |  |   67|  1.15k|                                                                                                   \
  |  |   68|  1.15k|    /* Or */                                                                                       \
  |  |   69|  1.15k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.07k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.07k|        return #name;
  |  |  ------------------
  |  |   70|  1.28k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.28k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.28k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.28k|        return #name;
  |  |  ------------------
  |  |   71|  1.28k|                                                                                                   \
  |  |   72|  1.28k|    /* XOR */                                                                                      \
  |  |   73|  1.73k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.73k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.73k|        return #name;
  |  |  ------------------
  |  |   74|  1.73k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    166|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 166, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    166|        return #name;
  |  |  ------------------
  |  |   75|    166|                                                                                                   \
  |  |   76|    166|    /* Set conditionals */                                                                         \
  |  |   77|    166|                                                                                                   \
  |  |   78|    166|    /* Less than */                                                                                \
  |  |   79|    239|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    239|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 239, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    239|        return #name;
  |  |  ------------------
  |  |   80|  1.88k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.88k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.88k|        return #name;
  |  |  ------------------
  |  |   81|  1.88k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 103, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    103|        return #name;
  |  |  ------------------
  |  |   82|    611|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    611|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 611, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    611|        return #name;
  |  |  ------------------
  |  |   83|    611|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    605|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 605, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    605|        return #name;
  |  |  ------------------
  |  |   84|  1.73k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.73k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.73k|        return #name;
  |  |  ------------------
  |  |   85|  1.73k|                                                                                                   \
  |  |   86|  1.73k|    /* Greater than */                                                                             \
  |  |   87|  1.73k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    400|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 400, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    400|        return #name;
  |  |  ------------------
  |  |   88|    695|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    695|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 695, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    695|        return #name;
  |  |  ------------------
  |  |   89|    695|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    455|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 455, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    455|        return #name;
  |  |  ------------------
  |  |   90|  4.43k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.43k, False: 341k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.43k|        return #name;
  |  |  ------------------
  |  |   91|  5.63k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.63k, False: 340k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.63k|        return #name;
  |  |  ------------------
  |  |   92|  5.63k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.63k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.63k|        return #name;
  |  |  ------------------
  |  |   93|  3.63k|                                                                                                   \
  |  |   94|  3.63k|    /* Less than or equal */                                                                       \
  |  |   95|  3.63k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.22k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.22k|        return #name;
  |  |  ------------------
  |  |   96|  7.27k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.27k, False: 339k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.27k|        return #name;
  |  |  ------------------
  |  |   97|  7.27k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.03k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.03k|        return #name;
  |  |  ------------------
  |  |   98|  2.33k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.33k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.33k|        return #name;
  |  |  ------------------
  |  |   99|  2.72k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.72k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.72k|        return #name;
  |  |  ------------------
  |  |  100|  3.83k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.83k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.83k|        return #name;
  |  |  ------------------
  |  |  101|  3.83k|                                                                                                   \
  |  |  102|  3.83k|    /* Greater than or equal */                                                                    \
  |  |  103|  3.83k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    904|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 904, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    904|        return #name;
  |  |  ------------------
  |  |  104|    904|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 236, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    236|        return #name;
  |  |  ------------------
  |  |  105|  2.99k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.99k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.99k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.99k|        return #name;
  |  |  ------------------
  |  |  106|  3.55k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.55k, False: 342k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.55k|        return #name;
  |  |  ------------------
  |  |  107|  3.55k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    916|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 916, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    916|        return #name;
  |  |  ------------------
  |  |  108|  1.19k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.19k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.19k|        return #name;
  |  |  ------------------
  |  |  109|  1.19k|                                                                                                   \
  |  |  110|  1.19k|    /* Equal */                                                                                    \
  |  |  111|  1.24k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.24k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.24k|        return #name;
  |  |  ------------------
  |  |  112|  1.24k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    759|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 759, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    759|        return #name;
  |  |  ------------------
  |  |  113|  1.76k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.76k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.76k|        return #name;
  |  |  ------------------
  |  |  114|  2.69k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.69k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.69k|        return #name;
  |  |  ------------------
  |  |  115|  2.69k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    813|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 813, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    813|        return #name;
  |  |  ------------------
  |  |  116|    813|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 90, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     90|        return #name;
  |  |  ------------------
  |  |  117|     90|                                                                                                   \
  |  |  118|     90|    /* Not equal */                                                                                \
  |  |  119|    178|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    178|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 178, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    178|        return #name;
  |  |  ------------------
  |  |  120|    338|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    338|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 338, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    338|        return #name;
  |  |  ------------------
  |  |  121|  1.49k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.49k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.49k|        return #name;
  |  |  ------------------
  |  |  122|  1.49k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 129, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    129|        return #name;
  |  |  ------------------
  |  |  123|    671|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    671|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 671, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    671|        return #name;
  |  |  ------------------
  |  |  124|    671|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 99, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     99|        return #name;
  |  |  ------------------
  |  |  125|     99|                                                                                                   \
  |  |  126|     99|    /* Conditional branching */                                                                    \
  |  |  127|    214|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    214|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 214, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    214|        return #name;
  |  |  ------------------
  |  |  128|  3.16k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.16k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.16k|        return #name;
  |  |  ------------------
  |  |  129|  3.16k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.01k, False: 343k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.01k|        return #name;
  |  |  ------------------
  |  |  130|  11.6k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  11.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.6k, False: 334k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.6k|        return #name;
  |  |  ------------------
  |  |  131|  11.6k|                                                                                                   \
  |  |  132|  11.6k|    /* Unconditional branching */                                                                  \
  |  |  133|  11.6k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|     26|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 26, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     26|        return #name;
  |  |  ------------------
  |  |  134|    402|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    402|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 402, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    402|        return #name;
  |  |  ------------------
  |  |  135|    402|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    100|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 100, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    100|        return #name;
  |  |  ------------------
  |  |  136|    100|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 68, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     68|        return #name;
  |  |  ------------------
  |  |  137|     68|                                                                                                   \
  |  |  138|     68|    /* Loading data */                                                                             \
  |  |  139|    946|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    946|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 946, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    946|        return #name;
  |  |  ------------------
  |  |  140|  2.06k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.06k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.06k|        return #name;
  |  |  ------------------
  |  |  141|  2.06k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    134|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 134, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    134|        return #name;
  |  |  ------------------
  |  |  142|    690|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    690|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 690, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    690|        return #name;
  |  |  ------------------
  |  |  143|    690|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    175|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 175, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    175|        return #name;
  |  |  ------------------
  |  |  144|    175|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 82, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     82|        return #name;
  |  |  ------------------
  |  |  145|    759|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    759|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 759, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    759|        return #name;
  |  |  ------------------
  |  |  146|    759|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 66, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     66|        return #name;
  |  |  ------------------
  |  |  147|  2.15k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.15k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.15k|        return #name;
  |  |  ------------------
  |  |  148|  2.15k|                                                                                                   \
  |  |  149|  2.15k|    /* Storing data */                                                                             \
  |  |  150|  2.15k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    126|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 126, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    126|        return #name;
  |  |  ------------------
  |  |  151|  2.22k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.22k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.22k|        return #name;
  |  |  ------------------
  |  |  152|  2.22k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.01k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.01k|        return #name;
  |  |  ------------------
  |  |  153|  1.35k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.35k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.35k|        return #name;
  |  |  ------------------
  |  |  154|  1.35k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    117|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 117, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    117|        return #name;
  |  |  ------------------
  |  |  155|    865|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    865|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 865, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    865|        return #name;
  |  |  ------------------
  |  |  156|    865|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 216, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    216|        return #name;
  |  |  ------------------
  |  |  157|    252|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    252|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 252, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    252|        return #name;
  |  |  ------------------
  |  |  158|    252|                                                                                                   \
  |  |  159|    252|    /* Moving data */                                                                              \
  |  |  160|  2.05k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.05k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.05k|        return #name;
  |  |  ------------------
  |  |  161|  2.05k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.07k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.07k|        return #name;
  |  |  ------------------
  |  |  162|  1.07k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    695|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 695, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    695|        return #name;
  |  |  ------------------
  |  |  163|    695|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    164|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 164, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|    164|        return #name;
  |  |  ------------------
  |  |  164|    164|                                                                                                   \
  |  |  165|    164|    /* Converting data */                                                                          \
  |  |  166|  1.64k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.64k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.64k|        return #name;
  |  |  ------------------
  |  |  167|  1.64k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.16k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.16k|        return #name;
  |  |  ------------------
  |  |  168|  1.23k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  |  |  169|  1.23k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    554|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 554, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    554|        return #name;
  |  |  ------------------
  |  |  170|    554|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 71, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     71|        return #name;
  |  |  ------------------
  |  |  171|    950|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    950|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 950, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    950|        return #name;
  |  |  ------------------
  |  |  172|    950|                                                                                                   \
  |  |  173|    950|    /* Other */                                                                                    \
  |  |  174|    950|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    908|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 908, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  208|    908|        return #name;
  |  |  ------------------
  |  |  175|    908|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 77, False: 346k]
  |  |  |  |  ------------------
  |  |  |  |  208|     77|        return #name;
  |  |  ------------------
  |  |  176|  1.69k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.69k, False: 344k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.69k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 346k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   346k|        }
  217|   346k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  54.5k|    {
   32|  54.5k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 1.85k, False: 52.7k]
  ------------------
   33|  1.85k|        {
   34|  1.85k|            return true;
   35|  1.85k|        }
   36|       |
   37|  52.7k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 226, False: 52.4k]
  ------------------
   38|    226|        {
   39|    226|            return true;
   40|    226|        }
   41|       |
   42|  52.4k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 2.61k, False: 49.8k]
  ------------------
   43|  2.61k|        {
   44|  2.61k|            return true;
   45|  2.61k|        }
   46|       |
   47|  49.8k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 49.8k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  49.8k|        return false;
   53|  49.8k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  49.8k|    {
   57|  49.8k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 49.8k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  49.8k|        const char first_char = token.at(0);
   63|       |
   64|  49.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 7.32k, False: 42.5k]
  ------------------
   65|  7.32k|        {
   66|  7.32k|            return phi::is_alpha(first_char);
   67|  7.32k|        }
   68|       |
   69|  42.5k|        phi::boolean just_under_scores = (first_char == '_');
   70|  42.5k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 13.6k, False: 28.8k]
  |  Branch (70:15): [True: 28.6k, False: 13.8k]
  |  Branch (70:44): [True: 196, False: 13.6k]
  ------------------
   71|  13.6k|        {
   72|  13.6k|            return false;
   73|  13.6k|        }
   74|       |
   75|   120k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 99.8k, False: 20.2k]
  ------------------
   76|  99.8k|        {
   77|  99.8k|            const char c{token.at(index)};
   78|       |
   79|  99.8k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 45.3k, False: 54.5k]
  ------------------
   80|  45.3k|            {
   81|  45.3k|                just_under_scores = false;
   82|  45.3k|            }
   83|  54.5k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 45.9k, False: 8.59k]
  ------------------
   84|  45.9k|            {
   85|  45.9k|                continue;
   86|  45.9k|            }
   87|  8.59k|            else
   88|  8.59k|            {
   89|  8.59k|                return false;
   90|  8.59k|            }
   91|  99.8k|        }
   92|       |
   93|  20.2k|        return !just_under_scores;
   94|  28.8k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   644k|    {
  101|   644k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 644k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   644k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 29.7k, False: 614k]
  ------------------
  107|  29.7k|        {
  108|  29.7k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 15.3k, False: 14.3k]
  ------------------
  109|  15.3k|            {
  110|  15.3k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  15.3k|            }
  112|       |
  113|  14.3k|            return {};
  114|  29.7k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   614k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 2.93k, False: 611k]
  ------------------
  118|  2.93k|        {
  119|  2.93k|            return {};
  120|  2.93k|        }
  121|       |
  122|   611k|        std::int32_t number{0};
  123|   611k|        phi::boolean is_negative{false};
  124|   611k|        phi::boolean starts_with_zero{false};
  125|   611k|        phi::boolean parsing_binary{false};
  126|   611k|        phi::boolean parsing_octal{false};
  127|   611k|        phi::boolean parsing_hexadecimal{false};
  128|   611k|        phi::boolean parsed_something{false};
  129|   611k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   667k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 660k, False: 6.83k]
  ------------------
  134|   660k|        {
  135|   660k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   660k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 611k, False: 48.9k]
  ------------------
  139|   611k|            {
  140|   611k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.34k, False: 609k]
  ------------------
  141|  2.34k|                {
  142|  2.34k|                    continue;
  143|  2.34k|                }
  144|       |
  145|   609k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 1.99k, False: 607k]
  ------------------
  146|  1.99k|                {
  147|  1.99k|                    is_negative = true;
  148|  1.99k|                    continue;
  149|  1.99k|                }
  150|       |
  151|   607k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 26.2k, False: 581k]
  ------------------
  152|  26.2k|                {
  153|  26.2k|                    starts_with_zero = true;
  154|  26.2k|                    continue;
  155|  26.2k|                }
  156|       |
  157|   581k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 137, False: 580k]
  ------------------
  158|    137|                {
  159|    137|                    return {};
  160|    137|                }
  161|   581k|            }
  162|       |
  163|       |            // Second character
  164|   629k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 31.2k, False: 598k]
  ------------------
  165|  31.2k|            {
  166|  31.2k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 26.2k, False: 4.98k]
  ------------------
  167|  26.2k|                {
  168|       |                    // Binary
  169|  26.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 300, False: 25.9k]
  |  Branch (169:37): [True: 590, False: 25.3k]
  ------------------
  170|    890|                    {
  171|    890|                        parsing_binary = true;
  172|    890|                        continue;
  173|    890|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  25.3k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.24k, False: 23.0k]
  |  Branch (176:37): [True: 775, False: 22.3k]
  ------------------
  177|  3.02k|                    {
  178|  3.02k|                        parsing_hexadecimal = true;
  179|  3.02k|                        continue;
  180|  3.02k|                    }
  181|       |
  182|       |                    // Octal
  183|  22.3k|                    parsing_octal = true;
  184|  22.3k|                }
  185|  31.2k|            }
  186|       |
  187|       |            // Handle seperators
  188|   626k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 274, False: 625k]
  ------------------
  189|    274|            {
  190|    274|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 100, False: 174]
  ------------------
  191|    100|                {
  192|    100|                    return {};
  193|    100|                }
  194|       |
  195|    174|                parsed_separator = true;
  196|    174|                continue;
  197|    274|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   625k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 2.07k, False: 623k]
  |  Branch (200:32): [True: 0, False: 2.07k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   625k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 623k, False: 2.07k]
  |  Branch (205:17): [True: 0, False: 625k]
  |  Branch (205:33): [True: 0, False: 623k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   625k|            parsed_separator = false;
  212|   625k|            parsed_something = true;
  213|       |
  214|   625k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 829, False: 624k]
  ------------------
  215|    829|            {
  216|    829|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 690, False: 139]
  ------------------
  217|    690|                {
  218|    690|                    return {};
  219|    690|                }
  220|       |
  221|    139|                number <<= 1;
  222|    139|                number |= (c - '0');
  223|    139|            }
  224|   624k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 35.1k, False: 589k]
  ------------------
  225|  35.1k|            {
  226|  35.1k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 17.4k, False: 17.6k]
  ------------------
  227|  17.4k|                {
  228|  17.4k|                    return {};
  229|  17.4k|                }
  230|       |
  231|  17.6k|                number <<= 3;
  232|  17.6k|                number |= (c - '0');
  233|  17.6k|            }
  234|   589k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 3.26k, False: 586k]
  ------------------
  235|  3.26k|            {
  236|  3.26k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.70k, False: 1.55k]
  ------------------
  237|  1.70k|                {
  238|  1.70k|                    return {};
  239|  1.70k|                }
  240|       |
  241|  1.55k|                number <<= 4;
  242|  1.55k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.55k|            }
  244|   586k|            else
  245|   586k|            {
  246|   586k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 584k, False: 2.38k]
  ------------------
  247|   584k|                {
  248|   584k|                    return {};
  249|   584k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  2.38k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 1.51k, False: 867]
  |  Branch (252:36): [True: 587, False: 929]
  ------------------
  253|    587|                {
  254|    587|                    return {};
  255|    587|                }
  256|       |
  257|  1.79k|                number *= 10;
  258|  1.79k|                number += (c - '0');
  259|  1.79k|            }
  260|   625k|        }
  261|       |
  262|  6.83k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 6.66k, False: 177]
  ------------------
  263|  6.66k|        {
  264|       |            // Check for over/underflow
  265|  6.66k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 263, False: 6.39k]
  |  Branch (265:32): [True: 0, False: 263]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  6.66k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 6.39k, False: 263]
  |  Branch (270:17): [True: 0, False: 6.66k]
  |  Branch (270:33): [True: 0, False: 6.39k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  6.66k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 263, False: 6.39k]
  ------------------
  277|    263|            {
  278|    263|                return static_cast<std::int16_t>(-number);
  279|    263|            }
  280|       |
  281|  6.39k|            return static_cast<std::int16_t>(number);
  282|  6.66k|        }
  283|       |
  284|    177|        return {};
  285|  6.83k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  80.5k|    {
   96|  80.5k|        switch (value)
   97|  80.5k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  18.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  18.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 18.3k, False: 62.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  18.3k|        return #name;
  |  |  ------------------
  |  |   14|  34.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  34.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 34.3k, False: 46.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  34.3k|        return #name;
  |  |  ------------------
  |  |   15|  34.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     91|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 91, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     91|        return #name;
  |  |  ------------------
  |  |   16|  1.73k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.73k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.73k, False: 78.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.73k|        return #name;
  |  |  ------------------
  |  |   17|  1.73k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    119|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 119, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    119|        return #name;
  |  |  ------------------
  |  |   18|    119|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     76|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 76, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     76|        return #name;
  |  |  ------------------
  |  |   19|    486|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    486|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 486, False: 80.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    486|        return #name;
  |  |  ------------------
  |  |   20|    486|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    103|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 103, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    103|        return #name;
  |  |  ------------------
  |  |   21|  1.56k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.56k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.56k, False: 79.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.56k|        return #name;
  |  |  ------------------
  |  |   22|  1.56k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    536|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 536, False: 80.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    536|        return #name;
  |  |  ------------------
  |  |   23|    536|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    182|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 182, False: 80.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    182|        return #name;
  |  |  ------------------
  |  |   24|    390|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    390|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 390, False: 80.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    390|        return #name;
  |  |  ------------------
  |  |   25|    390|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6, False: 80.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|      6|        return #name;
  |  |  ------------------
  |  |   26|     17|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     17|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 17, False: 80.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     17|        return #name;
  |  |  ------------------
  |  |   27|    149|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    149|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 149, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    149|        return #name;
  |  |  ------------------
  |  |   28|    802|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    802|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 802, False: 79.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    802|        return #name;
  |  |  ------------------
  |  |   29|    895|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|    895|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 895, False: 79.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|    895|        return #name;
  |  |  ------------------
  |  |   30|  3.10k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.10k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.10k, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.10k|        return #name;
  |  |  ------------------
  |  |   31|  3.10k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 26, False: 80.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     26|        return #name;
  |  |  ------------------
  |  |   32|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.53k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.53k, False: 79.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.53k|        return #name;
  |  |  ------------------
  |  |   33|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|     80|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 80, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     80|        return #name;
  |  |  ------------------
  |  |   34|     80|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|     78|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 78, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     78|        return #name;
  |  |  ------------------
  |  |   35|    758|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|    758|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 758, False: 79.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    758|        return #name;
  |  |  ------------------
  |  |   36|  1.14k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.14k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.14k, False: 79.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.14k|        return #name;
  |  |  ------------------
  |  |   37|  1.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.38k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.38k, False: 79.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.38k|        return #name;
  |  |  ------------------
  |  |   38|  1.38k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    914|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 914, False: 79.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|    914|        return #name;
  |  |  ------------------
  |  |   39|    914|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     22|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 22, False: 80.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     22|        return #name;
  |  |  ------------------
  |  |   40|  1.70k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.70k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.70k, False: 78.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.70k|        return #name;
  |  |  ------------------
  |  |   41|  1.70k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.17k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.17k, False: 79.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.17k|        return #name;
  |  |  ------------------
  |  |   42|  1.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    102|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 102, False: 80.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    102|        return #name;
  |  |  ------------------
  |  |   43|    818|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    818|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 818, False: 79.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    818|        return #name;
  |  |  ------------------
  |  |   44|  7.81k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  7.81k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7.81k, False: 72.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  7.81k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 80.5k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  80.5k|        }
  109|  80.5k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  14.8k|    {
  131|  14.8k|        switch (value)
  132|  14.8k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.66k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.66k, False: 11.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.66k|        return #name;
  |  |  ------------------
  |  |   48|  3.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.14k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.14k, False: 13.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.14k|        return #name;
  |  |  ------------------
  |  |   49|  1.14k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|    899|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 899, False: 13.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    899|        return #name;
  |  |  ------------------
  |  |   50|    899|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 39, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     39|        return #name;
  |  |  ------------------
  |  |   51|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   52|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   53|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   54|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   55|    224|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    224|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 224, False: 14.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    224|        return #name;
  |  |  ------------------
  |  |   56|    224|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 39, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     39|        return #name;
  |  |  ------------------
  |  |   57|  2.71k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  2.71k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.71k, False: 12.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.71k|        return #name;
  |  |  ------------------
  |  |   58|  2.71k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|     46|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 46, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     46|        return #name;
  |  |  ------------------
  |  |   59|     46|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|     37|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 37, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     37|        return #name;
  |  |  ------------------
  |  |   60|     37|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   61|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   62|     46|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     46|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 46, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     46|        return #name;
  |  |  ------------------
  |  |   63|     46|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 14, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     14|        return #name;
  |  |  ------------------
  |  |   64|     14|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   67|     16|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     16|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 16, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     16|        return #name;
  |  |  ------------------
  |  |   68|     16|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|    422|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|    422|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 422, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    422|        return #name;
  |  |  ------------------
  |  |   71|    422|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   72|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   73|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   74|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     36|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 36, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     36|        return #name;
  |  |  ------------------
  |  |   75|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 14.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|    429|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|    429|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 429, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    429|        return #name;
  |  |  ------------------
  |  |   77|  4.69k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.69k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.69k, False: 10.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.69k|        return #name;
  |  |  ------------------
  |  |   78|  4.69k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    355|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 355, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    355|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 14.8k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  14.8k|        }
  144|  14.8k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  19.4k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  19.4k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 448k, False: 0]
  ------------------
   64|   448k|            {
   65|   448k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 19.4k, False: 428k]
  ------------------
   66|  19.4k|                {
   67|  19.4k|                    return &token;
   68|  19.4k|                }
   69|   448k|            }
   70|       |
   71|      0|            return nullptr;
   72|  19.4k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   788k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   788k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   788k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   822k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   822k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   822k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  98.9k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  98.9k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  98.9k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|  89.8k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  14.0k|    {
   24|  14.0k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  14.0k|        switch (argument_number.unsafe())
   27|  14.0k|        {
   28|  9.81k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 9.81k, False: 4.22k]
  ------------------
   29|  9.81k|                m_Arg1 = argument;
   30|  9.81k|                break;
   31|  3.31k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 3.31k, False: 10.7k]
  ------------------
   32|  3.31k|                m_Arg2 = argument;
   33|  3.31k|                break;
   34|    906|            case 2u:
  ------------------
  |  Branch (34:13): [True: 906, False: 13.1k]
  ------------------
   35|    906|                m_Arg3 = argument;
   36|    906|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 14.0k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  14.0k|#endif
   41|  14.0k|        }
   42|  14.0k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   283k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  9.79k|    {
  174|  9.79k|        InstructionArgument arg;
  175|  9.79k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  9.79k|        arg.register_int.register_id = id;
  177|  9.79k|        return arg;
  178|  9.79k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    311|    {
  183|    311|        InstructionArgument arg;
  184|    311|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    311|        arg.register_float.register_id = id;
  186|    311|        return arg;
  187|    311|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|    617|    {
  192|    617|        InstructionArgument arg;
  193|    617|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|    617|        arg.immediate_value.signed_value = value;
  195|    617|        return arg;
  196|    617|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  3.32k|    {
  211|  3.32k|        InstructionArgument arg;
  212|  3.32k|        arg.m_Type           = ArgumentType::Label;
  213|  3.32k|        arg.label.label_name = label_name;
  214|  3.32k|        return arg;
  215|  3.32k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  89.8k|    {
  453|  89.8k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  89.8k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   573k|    {
   24|   573k|        switch (token.length())
   25|   573k|        {
   26|       |            // 1 character OpCodes
   27|  21.8k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 21.8k, False: 552k]
  ------------------
   28|  21.8k|                char c1 = token[0];
   29|  21.8k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 3.75k, False: 18.0k]
  ------------------
   30|  3.75k|                {
   31|  3.75k|                    return OpCode::J;
   32|  3.75k|                }
   33|  18.0k|                break;
   34|  21.8k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  65.8k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 65.8k, False: 508k]
  ------------------
   38|  65.8k|                char c1 = token[0];
   39|  65.8k|                char c2 = token[1];
   40|       |
   41|  65.8k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 32.0k, False: 33.8k]
  ------------------
   42|  65.8k|                {
   43|    465|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 465, False: 65.3k]
  ------------------
   44|  1.43k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 972, False: 64.8k]
  ------------------
   45|  1.43k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 535, False: 902]
  ------------------
   46|    535|                        {
   47|    535|                            return OpCode::JR;
   48|    535|                        }
   49|    902|                        break;
   50|       |
   51|  5.74k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 5.74k, False: 60.0k]
  ------------------
   52|  13.9k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 8.16k, False: 57.6k]
  ------------------
   53|  13.9k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 262, False: 13.6k]
  ------------------
   54|  13.9k|                        {
   55|  2.06k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 2.06k, False: 11.8k]
  ------------------
   56|  4.56k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 2.49k, False: 11.4k]
  ------------------
   57|  4.56k|                                return OpCode::LB;
   58|  2.15k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 2.15k, False: 11.7k]
  ------------------
   59|  2.66k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 509, False: 13.4k]
  ------------------
   60|  2.66k|                                return OpCode::LD;
   61|     66|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 66, False: 13.8k]
  ------------------
   62|    244|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 178, False: 13.7k]
  ------------------
   63|    244|                                return OpCode::LF;
   64|    690|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 690, False: 13.2k]
  ------------------
   65|  1.23k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 547, False: 13.3k]
  ------------------
   66|  1.23k|                                return OpCode::LH;
   67|     73|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 73, False: 13.8k]
  ------------------
   68|  4.93k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 4.86k, False: 9.04k]
  ------------------
   69|  4.93k|                                return OpCode::LW;
   70|  13.9k|                        }
   71|    262|                        break;
   72|  5.21k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 5.21k, False: 60.6k]
  ------------------
   73|  5.35k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 135, False: 65.7k]
  ------------------
   74|  5.35k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 2.45k, False: 2.89k]
  ------------------
   75|  2.45k|                        {
   76|  2.45k|                            return OpCode::OR;
   77|  2.45k|                        }
   78|  2.89k|                        break;
   79|  5.54k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 5.54k, False: 60.3k]
  ------------------
   80|  13.1k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 7.57k, False: 58.2k]
  ------------------
   81|  13.1k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 8.16k, False: 4.94k]
  ------------------
   82|  13.1k|                        {
   83|    125|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 125, False: 12.9k]
  ------------------
   84|    192|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 67, False: 13.0k]
  ------------------
   85|    192|                                return OpCode::SB;
   86|    252|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 252, False: 12.8k]
  ------------------
   87|    435|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 183, False: 12.9k]
  ------------------
   88|    435|                                return OpCode::SD;
   89|    216|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 216, False: 12.8k]
  ------------------
   90|  2.44k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 2.22k, False: 10.8k]
  ------------------
   91|  2.44k|                                return OpCode::SF;
   92|    970|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 970, False: 12.1k]
  ------------------
   93|  1.55k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 586, False: 12.5k]
  ------------------
   94|  1.55k|                                return OpCode::SH;
   95|    202|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 202, False: 12.9k]
  ------------------
   96|    319|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 117, False: 12.9k]
  ------------------
   97|    319|                                return OpCode::SW;
   98|  13.1k|                        }
   99|  8.16k|                        break;
  100|  65.8k|                }
  101|  44.2k|                break;
  102|  65.8k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   283k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 283k, False: 290k]
  ------------------
  106|   283k|                char c1 = token[0];
  107|   283k|                char c2 = token[1];
  108|   283k|                char c3 = token[2];
  109|       |
  110|   283k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 21.3k, False: 262k]
  ------------------
  111|   283k|                {
  112|   168k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 168k, False: 115k]
  ------------------
  113|   171k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 2.77k, False: 280k]
  ------------------
  114|   171k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 164k, False: 6.45k]
  |  Branch (114:29): [True: 164k, False: 6.50k]
  |  Branch (114:45): [True: 164k, False: 47]
  ------------------
  115|   164k|                        {
  116|   164k|                            return OpCode::ADD;
  117|   164k|                        }
  118|  6.50k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 5.55k, False: 949]
  |  Branch (118:34): [True: 4.37k, False: 2.12k]
  |  Branch (118:50): [True: 4.37k, False: 1.17k]
  ------------------
  119|  4.37k|                        {
  120|  4.37k|                            return OpCode::AND;
  121|  4.37k|                        }
  122|  2.12k|                        break;
  123|       |
  124|  2.12k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 1.42k, False: 282k]
  ------------------
  125|  1.61k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 199, False: 283k]
  ------------------
  126|  1.61k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 1.37k, False: 243]
  |  Branch (126:29): [True: 1.15k, False: 462]
  |  Branch (126:45): [True: 1.15k, False: 219]
  ------------------
  127|  1.15k|                        {
  128|  1.15k|                            return OpCode::DIV;
  129|  1.15k|                        }
  130|    462|                        break;
  131|       |
  132|  2.79k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.79k, False: 280k]
  ------------------
  133|  3.13k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 334, False: 283k]
  ------------------
  134|  3.13k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 2.93k, False: 200]
  ------------------
  135|  2.93k|                        {
  136|  2.93k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 563, False: 2.36k]
  ------------------
  137|    563|                            {
  138|    563|                                return OpCode::EQD;
  139|    563|                            }
  140|  2.36k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 2.08k, False: 281]
  ------------------
  141|  2.08k|                            {
  142|  2.08k|                                return OpCode::EQF;
  143|  2.08k|                            }
  144|  2.93k|                        }
  145|    481|                        break;
  146|       |
  147|  12.7k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 12.7k, False: 270k]
  ------------------
  148|  15.1k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 2.30k, False: 281k]
  ------------------
  149|  15.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 4.12k, False: 10.9k]
  ------------------
  150|  4.12k|                        {
  151|  4.12k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.56k, False: 2.56k]
  ------------------
  152|  1.56k|                            {
  153|  1.56k|                                return OpCode::GED;
  154|  1.56k|                            }
  155|  2.56k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.43k, False: 128]
  ------------------
  156|  2.43k|                            {
  157|  2.43k|                                return OpCode::GEF;
  158|  2.43k|                            }
  159|  4.12k|                        }
  160|  10.9k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 10.6k, False: 296]
  ------------------
  161|  10.6k|                        {
  162|  10.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.86k, False: 5.81k]
  ------------------
  163|  4.86k|                            {
  164|  4.86k|                                return OpCode::GTD;
  165|  4.86k|                            }
  166|  5.81k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 4.94k, False: 867]
  ------------------
  167|  4.94k|                            {
  168|  4.94k|                                return OpCode::GTF;
  169|  4.94k|                            }
  170|  5.81k|                        }
  171|  1.29k|                        break;
  172|       |
  173|  1.29k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 669, False: 282k]
  ------------------
  174|  1.32k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 660, False: 282k]
  ------------------
  175|  1.32k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.07k, False: 250]
  |  Branch (175:29): [True: 738, False: 591]
  |  Branch (175:45): [True: 738, False: 341]
  ------------------
  176|    738|                        {
  177|    738|                            return OpCode::JAL;
  178|    738|                        }
  179|    591|                        break;
  180|       |
  181|  11.1k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 11.1k, False: 272k]
  ------------------
  182|  16.6k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 5.50k, False: 277k]
  ------------------
  183|  16.6k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 222, False: 16.4k]
  ------------------
  184|  16.6k|                        {
  185|    134|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 134, False: 16.5k]
  ------------------
  186|  1.69k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.55k, False: 15.0k]
  ------------------
  187|  1.69k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 200, False: 1.49k]
  ------------------
  188|    200|                                {
  189|    200|                                    return OpCode::LBU;
  190|    200|                                }
  191|  1.49k|                                break;
  192|       |
  193|  6.54k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 6.54k, False: 10.1k]
  ------------------
  194|  7.22k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 679, False: 15.9k]
  ------------------
  195|  7.22k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 3.87k, False: 3.35k]
  ------------------
  196|  3.87k|                                {
  197|  3.87k|                                    return OpCode::LED;
  198|  3.87k|                                }
  199|  3.35k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 2.84k, False: 512]
  ------------------
  200|  2.84k|                                {
  201|  2.84k|                                    return OpCode::LEF;
  202|  2.84k|                                }
  203|    512|                                break;
  204|       |
  205|  1.15k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.15k, False: 15.4k]
  ------------------
  206|  2.18k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.03k, False: 15.6k]
  ------------------
  207|  2.18k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.12k, False: 1.06k]
  ------------------
  208|  1.12k|                                {
  209|  1.12k|                                    return OpCode::LHI;
  210|  1.12k|                                }
  211|  1.06k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.00k, False: 58]
  ------------------
  212|  1.00k|                                {
  213|  1.00k|                                    return OpCode::LHU;
  214|  1.00k|                                }
  215|     58|                                break;
  216|       |
  217|  2.35k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 2.35k, False: 14.2k]
  ------------------
  218|  2.92k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 570, False: 16.0k]
  ------------------
  219|  2.92k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.75k, False: 1.16k]
  ------------------
  220|  1.75k|                                {
  221|  1.75k|                                    return OpCode::LTD;
  222|  1.75k|                                }
  223|  1.16k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.00k, False: 162]
  ------------------
  224|  1.00k|                                {
  225|  1.00k|                                    return OpCode::LTF;
  226|  1.00k|                                }
  227|    162|                                break;
  228|       |
  229|    771|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 771, False: 15.8k]
  ------------------
  230|  2.40k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 1.62k, False: 15.0k]
  ------------------
  231|  2.40k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 1.16k, False: 1.23k]
  ------------------
  232|  1.16k|                                {
  233|  1.16k|                                    return OpCode::LWU;
  234|  1.16k|                                }
  235|  1.23k|                                break;
  236|  16.6k|                        }
  237|  3.68k|                        break;
  238|       |
  239|  5.53k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 5.53k, False: 277k]
  ------------------
  240|  9.75k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 4.21k, False: 279k]
  ------------------
  241|  9.75k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 3.95k, False: 5.79k]
  ------------------
  242|  3.95k|                        {
  243|  3.95k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 197, False: 3.75k]
  ------------------
  244|    197|                            {
  245|    197|                                return OpCode::NED;
  246|    197|                            }
  247|  3.75k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 745, False: 3.01k]
  ------------------
  248|    745|                            {
  249|    745|                                return OpCode::NEF;
  250|    745|                            }
  251|  3.95k|                        }
  252|  5.79k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 3.22k, False: 2.57k]
  |  Branch (252:34): [True: 1.75k, False: 4.03k]
  |  Branch (252:50): [True: 1.75k, False: 1.46k]
  ------------------
  253|  1.75k|                        {
  254|  1.75k|                            return OpCode::NOP;
  255|  1.75k|                        }
  256|       |
  257|  7.05k|                        break;
  258|       |
  259|  7.05k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 1.42k, False: 281k]
  ------------------
  260|  1.51k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 94, False: 283k]
  ------------------
  261|  1.51k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.39k, False: 124]
  |  Branch (261:29): [True: 1.35k, False: 161]
  |  Branch (261:45): [True: 1.35k, False: 37]
  ------------------
  262|  1.35k|                        {
  263|  1.35k|                            return OpCode::ORI;
  264|  1.35k|                        }
  265|    161|                        break;
  266|       |
  267|  29.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 29.8k, False: 253k]
  ------------------
  268|  32.8k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 3.07k, False: 280k]
  ------------------
  269|  32.8k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 670, False: 32.2k]
  ------------------
  270|  32.8k|                        {
  271|  2.22k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 2.22k, False: 30.6k]
  ------------------
  272|  2.69k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 470, False: 32.4k]
  ------------------
  273|  2.69k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 2.59k, False: 100]
  ------------------
  274|  2.59k|                                {
  275|  2.59k|                                    return OpCode::SBU;
  276|  2.59k|                                }
  277|    100|                                break;
  278|       |
  279|  1.24k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.24k, False: 31.6k]
  ------------------
  280|  3.67k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 2.42k, False: 30.4k]
  ------------------
  281|  3.67k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 2.63k, False: 1.04k]
  ------------------
  282|  2.63k|                                {
  283|  2.63k|                                    return OpCode::SEQ;
  284|  2.63k|                                }
  285|  1.04k|                                break;
  286|       |
  287|  1.28k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 1.28k, False: 31.5k]
  ------------------
  288|  3.85k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.57k, False: 30.3k]
  ------------------
  289|  3.85k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.22k, False: 1.63k]
  ------------------
  290|  2.22k|                                {
  291|  2.22k|                                    return OpCode::SGE;
  292|  2.22k|                                }
  293|  1.63k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 574, False: 1.06k]
  ------------------
  294|    574|                                {
  295|    574|                                    return OpCode::SGT;
  296|    574|                                }
  297|  1.06k|                                break;
  298|       |
  299|  1.35k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.35k, False: 31.5k]
  ------------------
  300|  1.64k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 290, False: 32.5k]
  ------------------
  301|  1.64k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.55k, False: 99]
  ------------------
  302|  1.55k|                                {
  303|  1.55k|                                    return OpCode::SHU;
  304|  1.55k|                                }
  305|     99|                                break;
  306|       |
  307|  7.06k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 7.06k, False: 25.8k]
  ------------------
  308|  8.72k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.66k, False: 31.2k]
  ------------------
  309|  8.72k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 95, False: 8.62k]
  ------------------
  310|  8.72k|                                {
  311|  1.07k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.07k, False: 7.64k]
  ------------------
  312|  1.18k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 108, False: 8.61k]
  ------------------
  313|  1.18k|                                        return OpCode::SLA;
  314|       |
  315|  2.21k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.21k, False: 6.50k]
  ------------------
  316|  2.28k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 71, False: 8.65k]
  ------------------
  317|  2.28k|                                        return OpCode::SLE;
  318|       |
  319|  3.44k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.44k, False: 5.28k]
  ------------------
  320|  3.99k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 558, False: 8.16k]
  ------------------
  321|  3.99k|                                        return OpCode::SLL;
  322|       |
  323|    238|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 238, False: 8.48k]
  ------------------
  324|  1.15k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 919, False: 7.80k]
  ------------------
  325|  1.15k|                                        return OpCode::SLT;
  326|  8.72k|                                }
  327|     95|                                break;
  328|       |
  329|    180|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 180, False: 32.7k]
  ------------------
  330|  1.17k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 997, False: 31.8k]
  ------------------
  331|  1.17k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 893, False: 284]
  ------------------
  332|    893|                                {
  333|    893|                                    return OpCode::SNE;
  334|    893|                                }
  335|    284|                                break;
  336|       |
  337|  2.41k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 2.41k, False: 30.4k]
  ------------------
  338|  4.93k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 2.51k, False: 30.3k]
  ------------------
  339|  4.93k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 1.85k, False: 3.08k]
  ------------------
  340|  1.85k|                                {
  341|  1.85k|                                    return OpCode::SRA;
  342|  1.85k|                                }
  343|  3.08k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.38k, False: 1.69k]
  ------------------
  344|  1.38k|                                {
  345|  1.38k|                                    return OpCode::SRL;
  346|  1.38k|                                }
  347|  1.69k|                                break;
  348|       |
  349|  2.62k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 2.62k, False: 30.2k]
  ------------------
  350|  3.81k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.19k, False: 31.6k]
  ------------------
  351|  3.81k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 2.83k, False: 981]
  ------------------
  352|  2.83k|                                {
  353|  2.83k|                                    return OpCode::SUB;
  354|  2.83k|                                }
  355|    981|                                break;
  356|       |
  357|    981|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 948, False: 31.9k]
  ------------------
  358|  1.68k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 741, False: 32.1k]
  ------------------
  359|  1.68k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 955, False: 734]
  ------------------
  360|    955|                                {
  361|    955|                                    return OpCode::SWU;
  362|    955|                                }
  363|    734|                                break;
  364|  32.8k|                        }
  365|       |
  366|  7.73k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 967, False: 282k]
  ------------------
  367|  15.8k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 8.12k, False: 275k]
  ------------------
  368|  15.8k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 1.52k, False: 14.3k]
  |  Branch (368:29): [True: 1.22k, False: 14.6k]
  |  Branch (368:45): [True: 1.22k, False: 301]
  ------------------
  369|  1.22k|                        {
  370|  1.22k|                            return OpCode::XOR;
  371|  1.22k|                        }
  372|  14.6k|                        break;
  373|   283k|                }
  374|  51.8k|                break;
  375|   283k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   130k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 130k, False: 443k]
  ------------------
  379|   130k|                char c1 = token[0];
  380|   130k|                char c2 = token[1];
  381|   130k|                char c3 = token[2];
  382|   130k|                char c4 = token[3];
  383|       |
  384|   130k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 12.2k, False: 118k]
  ------------------
  385|   130k|                {
  386|  17.3k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 17.3k, False: 113k]
  ------------------
  387|  18.8k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.49k, False: 128k]
  ------------------
  388|  18.8k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 145, False: 18.6k]
  ------------------
  389|  18.8k|                        {
  390|  16.8k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 16.8k, False: 2.01k]
  ------------------
  391|  17.0k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 199, False: 18.6k]
  ------------------
  392|  17.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 15.6k, False: 1.36k]
  ------------------
  393|  15.6k|                                {
  394|  15.6k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 73, False: 15.5k]
  ------------------
  395|  15.6k|                                    {
  396|  2.07k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.07k, False: 13.5k]
  ------------------
  397|  2.17k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 103, False: 15.5k]
  ------------------
  398|  2.17k|                                            return OpCode::ADDD;
  399|       |
  400|  4.07k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 4.07k, False: 11.5k]
  ------------------
  401|  4.15k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 82, False: 15.5k]
  ------------------
  402|  4.15k|                                            return OpCode::ADDF;
  403|       |
  404|  6.42k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 6.42k, False: 9.23k]
  ------------------
  405|  6.48k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 15.5k]
  ------------------
  406|  6.48k|                                            return OpCode::ADDI;
  407|       |
  408|  2.57k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 2.57k, False: 13.0k]
  ------------------
  409|  2.76k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 194, False: 15.4k]
  ------------------
  410|  2.76k|                                            return OpCode::ADDU;
  411|  15.6k|                                    }
  412|  15.6k|                                }
  413|  1.43k|                                break;
  414|       |
  415|  1.43k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.21k, False: 17.6k]
  ------------------
  416|  1.66k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 449, False: 18.3k]
  ------------------
  417|  1.66k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.56k, False: 99]
  |  Branch (417:37): [True: 1.24k, False: 419]
  |  Branch (417:53): [True: 1.24k, False: 320]
  ------------------
  418|  1.24k|                                {
  419|  1.24k|                                    return OpCode::ANDI;
  420|  1.24k|                                }
  421|       |
  422|    419|                                break;
  423|  18.8k|                        }
  424|  2.00k|                        break;
  425|       |
  426|  18.0k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 18.0k, False: 112k]
  ------------------
  427|  21.6k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 3.65k, False: 126k]
  ------------------
  428|  21.6k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 620, False: 21.0k]
  ------------------
  429|  21.6k|                        {
  430|    313|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 313, False: 21.3k]
  ------------------
  431|  2.52k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 2.21k, False: 19.4k]
  ------------------
  432|  2.52k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.57k, False: 954]
  |  Branch (432:37): [True: 1.49k, False: 1.03k]
  |  Branch (432:53): [True: 1.49k, False: 81]
  ------------------
  433|  1.49k|                                {
  434|  1.49k|                                    return OpCode::BEQZ;
  435|  1.49k|                                }
  436|  1.03k|                                break;
  437|       |
  438|  14.0k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 14.0k, False: 7.60k]
  ------------------
  439|  14.7k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 734, False: 20.9k]
  ------------------
  440|  14.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 14.4k, False: 382]
  ------------------
  441|  14.4k|                                {
  442|  14.4k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 11.1k, False: 3.29k]
  ------------------
  443|  11.1k|                                    {
  444|  11.1k|                                        return OpCode::BFPF;
  445|  11.1k|                                    }
  446|  3.29k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 3.16k, False: 130]
  ------------------
  447|  3.16k|                                    {
  448|  3.16k|                                        return OpCode::BFPT;
  449|  3.16k|                                    }
  450|  14.4k|                                }
  451|    512|                                break;
  452|       |
  453|  3.25k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 3.25k, False: 18.4k]
  ------------------
  454|  3.73k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 478, False: 21.1k]
  ------------------
  455|  3.73k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 3.60k, False: 130]
  |  Branch (455:37): [True: 3.52k, False: 204]
  |  Branch (455:53): [True: 3.52k, False: 74]
  ------------------
  456|  3.52k|                                {
  457|  3.52k|                                    return OpCode::BNEZ;
  458|  3.52k|                                }
  459|  21.6k|                        }
  460|  2.37k|                        break;
  461|       |
  462|  4.64k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 4.64k, False: 125k]
  ------------------
  463|  4.87k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 225, False: 130k]
  ------------------
  464|  4.87k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 4.64k, False: 229]
  |  Branch (464:29): [True: 4.52k, False: 353]
  |  Branch (464:45): [True: 4.52k, False: 124]
  ------------------
  465|  4.52k|                        {
  466|  4.52k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 201, False: 4.31k]
  ------------------
  467|  4.52k|                            {
  468|  1.22k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.22k, False: 3.29k]
  ------------------
  469|  1.29k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 4.45k]
  ------------------
  470|  1.29k|                                    return OpCode::DIVD;
  471|       |
  472|    182|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 182, False: 4.33k]
  ------------------
  473|    392|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 210, False: 4.31k]
  ------------------
  474|    392|                                    return OpCode::DIVF;
  475|       |
  476|    365|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 365, False: 4.15k]
  ------------------
  477|    431|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 4.45k]
  ------------------
  478|    431|                                    return OpCode::DIVI;
  479|       |
  480|  1.36k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 1.36k, False: 3.15k]
  ------------------
  481|  2.20k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 833, False: 3.68k]
  ------------------
  482|  2.20k|                                    return OpCode::DIVU;
  483|  4.52k|                            }
  484|  4.52k|                        }
  485|    554|                        break;
  486|       |
  487|    663|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 663, False: 129k]
  ------------------
  488|  3.37k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 2.71k, False: 127k]
  ------------------
  489|  3.37k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.40k, False: 969]
  |  Branch (489:29): [True: 189, False: 3.18k]
  |  Branch (489:45): [True: 2.34k, False: 66]
  |  Branch (489:61): [True: 189, False: 2.15k]
  ------------------
  490|    189|                        {
  491|    189|                            return OpCode::HALT;
  492|    189|                        }
  493|  3.18k|                        break;
  494|       |
  495|  3.18k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 296, False: 130k]
  ------------------
  496|  4.32k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 4.03k, False: 126k]
  ------------------
  497|  4.32k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 3.19k, False: 1.13k]
  |  Branch (497:29): [True: 134, False: 4.19k]
  |  Branch (497:45): [True: 232, False: 2.96k]
  |  Branch (497:61): [True: 134, False: 98]
  ------------------
  498|    134|                        {
  499|    134|                            return OpCode::JALR;
  500|    134|                        }
  501|  4.19k|                        break;
  502|       |
  503|  5.65k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 5.65k, False: 124k]
  ------------------
  504|  10.0k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 4.42k, False: 126k]
  ------------------
  505|  10.0k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 3.71k, False: 6.36k]
  |  Branch (505:29): [True: 3.62k, False: 6.45k]
  |  Branch (505:45): [True: 3.62k, False: 96]
  ------------------
  506|  3.62k|                        {
  507|  3.62k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 2.11k, False: 1.50k]
  ------------------
  508|  2.11k|                            {
  509|  2.11k|                                return OpCode::MOVD;
  510|  2.11k|                            }
  511|  1.50k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.17k, False: 331]
  ------------------
  512|  1.17k|                            {
  513|  1.17k|                                return OpCode::MOVF;
  514|  1.17k|                            }
  515|  3.62k|                        }
  516|  6.45k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 6.35k, False: 98]
  |  Branch (516:34): [True: 920, False: 5.53k]
  |  Branch (516:50): [True: 4.85k, False: 1.49k]
  |  Branch (516:66): [True: 920, False: 3.93k]
  ------------------
  517|    920|                        {
  518|    920|                            return OpCode::MULT;
  519|    920|                        }
  520|  5.86k|                        break;
  521|       |
  522|  43.3k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 43.3k, False: 87.1k]
  ------------------
  523|  50.4k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 7.17k, False: 123k]
  ------------------
  524|  50.4k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 481, False: 49.9k]
  ------------------
  525|  50.4k|                        {
  526|  2.56k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 2.56k, False: 47.9k]
  ------------------
  527|  6.06k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 3.50k, False: 46.9k]
  ------------------
  528|  6.06k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 4.92k, False: 1.14k]
  ------------------
  529|  4.92k|                                {
  530|  4.92k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 3.00k, False: 1.92k]
  ------------------
  531|  3.00k|                                    {
  532|  3.00k|                                        return OpCode::SEQI;
  533|  3.00k|                                    }
  534|  1.92k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.82k, False: 99]
  ------------------
  535|  1.82k|                                    {
  536|  1.82k|                                        return OpCode::SEQU;
  537|  1.82k|                                    }
  538|  4.92k|                                }
  539|  1.23k|                                break;
  540|       |
  541|  4.37k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 4.37k, False: 46.0k]
  ------------------
  542|  6.61k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 2.23k, False: 48.2k]
  ------------------
  543|  6.61k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 3.73k, False: 2.87k]
  ------------------
  544|  3.73k|                                {
  545|  3.73k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 302, False: 3.43k]
  ------------------
  546|    302|                                    {
  547|    302|                                        return OpCode::SGEI;
  548|    302|                                    }
  549|  3.43k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 3.06k, False: 371]
  ------------------
  550|  3.06k|                                    {
  551|  3.06k|                                        return OpCode::SGEU;
  552|  3.06k|                                    }
  553|  3.73k|                                }
  554|  2.87k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 2.59k, False: 282]
  ------------------
  555|  2.59k|                                {
  556|  2.59k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.04k, False: 1.55k]
  ------------------
  557|  1.04k|                                    {
  558|  1.04k|                                        return OpCode::SGTI;
  559|  1.04k|                                    }
  560|  1.55k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.07k, False: 474]
  ------------------
  561|  1.07k|                                    {
  562|  1.07k|                                        return OpCode::SGTU;
  563|  1.07k|                                    }
  564|  2.59k|                                }
  565|  1.12k|                                break;
  566|       |
  567|  13.0k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 13.0k, False: 37.4k]
  ------------------
  568|  14.2k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 1.18k, False: 49.2k]
  ------------------
  569|  14.2k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 66, False: 14.1k]
  ------------------
  570|  14.2k|                                {
  571|  1.84k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 1.84k, False: 12.3k]
  ------------------
  572|  2.08k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 241, False: 13.9k]
  ------------------
  573|  2.08k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.88k, False: 194]
  ------------------
  574|  1.88k|                                        {
  575|  1.88k|                                            return OpCode::SLAI;
  576|  1.88k|                                        }
  577|    194|                                        break;
  578|       |
  579|  7.66k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 7.66k, False: 6.53k]
  ------------------
  580|  7.98k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 313, False: 13.8k]
  ------------------
  581|  7.98k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 6.63k, False: 1.35k]
  ------------------
  582|  6.63k|                                        {
  583|  6.63k|                                            return OpCode::SLEI;
  584|  6.63k|                                        }
  585|  1.35k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.26k, False: 87]
  ------------------
  586|  1.26k|                                        {
  587|  1.26k|                                            return OpCode::SLEU;
  588|  1.26k|                                        }
  589|     87|                                        break;
  590|       |
  591|  1.37k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.37k, False: 12.8k]
  ------------------
  592|  1.80k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 424, False: 13.7k]
  ------------------
  593|  1.80k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.59k, False: 210]
  ------------------
  594|  1.59k|                                        {
  595|  1.59k|                                            return OpCode::SLLI;
  596|  1.59k|                                        }
  597|    210|                                        break;
  598|       |
  599|  2.03k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.03k, False: 12.1k]
  ------------------
  600|  2.27k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 237, False: 13.9k]
  ------------------
  601|  2.27k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.94k, False: 328]
  ------------------
  602|  1.94k|                                        {
  603|  1.94k|                                            return OpCode::SLTI;
  604|  1.94k|                                        }
  605|    328|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 262, False: 66]
  ------------------
  606|    262|                                        {
  607|    262|                                            return OpCode::SLTU;
  608|    262|                                        }
  609|     66|                                        break;
  610|  14.2k|                                }
  611|       |
  612|  2.45k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.82k, False: 48.6k]
  ------------------
  613|  4.12k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 1.67k, False: 48.7k]
  ------------------
  614|  4.12k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 3.58k, False: 545]
  ------------------
  615|  3.58k|                                {
  616|  3.58k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 436, False: 3.14k]
  ------------------
  617|    436|                                    {
  618|    436|                                        return OpCode::SNEI;
  619|    436|                                    }
  620|  3.14k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 3.03k, False: 116]
  ------------------
  621|  3.03k|                                    {
  622|  3.03k|                                        return OpCode::SNEU;
  623|  3.03k|                                    }
  624|  3.58k|                                }
  625|    661|                                break;
  626|       |
  627|  2.34k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 2.34k, False: 48.1k]
  ------------------
  628|  3.24k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 900, False: 49.5k]
  ------------------
  629|  3.24k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.59k, False: 1.65k]
  |  Branch (629:37): [True: 1.01k, False: 2.23k]
  |  Branch (629:53): [True: 1.01k, False: 579]
  ------------------
  630|  1.01k|                                {
  631|  1.01k|                                    return OpCode::SRAI;
  632|  1.01k|                                }
  633|  2.23k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.63k, False: 598]
  |  Branch (633:42): [True: 1.15k, False: 1.07k]
  |  Branch (633:58): [True: 1.15k, False: 479]
  ------------------
  634|  1.15k|                                {
  635|  1.15k|                                    return OpCode::SRLI;
  636|  1.15k|                                }
  637|  1.07k|                                break;
  638|       |
  639|  9.51k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 9.51k, False: 40.9k]
  ------------------
  640|  16.3k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 6.84k, False: 43.6k]
  ------------------
  641|  16.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 15.1k, False: 1.19k]
  ------------------
  642|  15.1k|                                {
  643|  15.1k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 4.65k, False: 10.5k]
  ------------------
  644|  15.1k|                                    {
  645|    213|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 213, False: 14.9k]
  ------------------
  646|    375|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 162, False: 15.0k]
  ------------------
  647|    375|                                            return OpCode::SUBD;
  648|       |
  649|  4.32k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 4.32k, False: 10.8k]
  ------------------
  650|  4.45k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 130, False: 15.0k]
  ------------------
  651|  4.45k|                                            return OpCode::SUBF;
  652|       |
  653|  1.97k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 1.97k, False: 13.1k]
  ------------------
  654|  2.62k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 648, False: 14.5k]
  ------------------
  655|  2.62k|                                            return OpCode::SUBI;
  656|       |
  657|  2.99k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 2.99k, False: 12.1k]
  ------------------
  658|  3.06k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 70, False: 15.0k]
  ------------------
  659|  3.06k|                                            return OpCode::SUBU;
  660|  15.1k|                                    }
  661|  15.1k|                                }
  662|  5.84k|                                break;
  663|  50.4k|                        }
  664|  10.4k|                        break;
  665|       |
  666|  10.4k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 3.56k, False: 126k]
  ------------------
  667|  3.86k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 300, False: 130k]
  ------------------
  668|  3.86k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 3.73k, False: 124]
  |  Branch (668:29): [True: 3.18k, False: 681]
  |  Branch (668:45): [True: 3.32k, False: 418]
  |  Branch (668:61): [True: 3.18k, False: 139]
  ------------------
  669|  3.18k|                        {
  670|  3.18k|                            return OpCode::TRAP;
  671|  3.18k|                        }
  672|    681|                        break;
  673|    681|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 354, False: 130k]
  ------------------
  674|    740|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 386, False: 130k]
  ------------------
  675|    740|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 498, False: 242]
  |  Branch (675:29): [True: 299, False: 441]
  |  Branch (675:45): [True: 397, False: 101]
  |  Branch (675:61): [True: 299, False: 98]
  ------------------
  676|    299|                        {
  677|    299|                            return OpCode::XORI;
  678|    299|                        }
  679|    441|                        break;
  680|   130k|                }
  681|  41.9k|                break;
  682|   130k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  41.9k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 35.9k, False: 538k]
  ------------------
  686|  35.9k|                char c1 = token[0];
  687|  35.9k|                char c2 = token[1];
  688|  35.9k|                char c3 = token[2];
  689|  35.9k|                char c4 = token[3];
  690|  35.9k|                char c5 = token[4];
  691|       |
  692|  35.9k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 5.82k, False: 30.0k]
  ------------------
  693|  35.9k|                {
  694|  7.46k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 7.46k, False: 28.4k]
  ------------------
  695|  7.46k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 35.9k]
  ------------------
  696|  7.46k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 7.46k, False: 0]
  |  Branch (696:29): [True: 7.46k, False: 0]
  |  Branch (696:45): [True: 7.46k, False: 0]
  |  Branch (696:61): [True: 7.46k, False: 0]
  |  Branch (696:77): [True: 7.46k, False: 0]
  ------------------
  697|  7.46k|                        {
  698|  7.46k|                            return OpCode::ADDUI;
  699|  7.46k|                        }
  700|      0|                        break;
  701|       |
  702|    693|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 693, False: 35.2k]
  ------------------
  703|    693|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 35.9k]
  ------------------
  704|    693|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 693, False: 0]
  |  Branch (704:29): [True: 693, False: 0]
  |  Branch (704:45): [True: 693, False: 0]
  |  Branch (704:61): [True: 693, False: 0]
  |  Branch (704:77): [True: 693, False: 0]
  ------------------
  705|    693|                        {
  706|    693|                            return OpCode::DIVUI;
  707|    693|                        }
  708|      0|                        break;
  709|       |
  710|  4.92k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 4.92k, False: 30.9k]
  ------------------
  711|  4.92k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 35.9k]
  ------------------
  712|  4.92k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 4.92k, False: 0]
  |  Branch (712:29): [True: 4.92k, False: 0]
  |  Branch (712:45): [True: 4.92k, False: 0]
  |  Branch (712:61): [True: 4.92k, False: 0]
  ------------------
  713|  4.92k|                        {
  714|  4.92k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 4.92k]
  ------------------
  715|  4.92k|                            {
  716|    515|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 515, False: 4.40k]
  ------------------
  717|    515|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 4.92k]
  ------------------
  718|    515|                                    return OpCode::MULTD;
  719|       |
  720|  2.85k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 2.85k, False: 2.07k]
  ------------------
  721|  2.85k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 4.92k]
  ------------------
  722|  2.85k|                                    return OpCode::MULTF;
  723|       |
  724|    393|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 393, False: 4.52k]
  ------------------
  725|    393|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 4.92k]
  ------------------
  726|    393|                                    return OpCode::MULTI;
  727|       |
  728|  1.16k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.16k, False: 3.75k]
  ------------------
  729|  1.16k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 4.92k]
  ------------------
  730|  1.16k|                                    return OpCode::MULTU;
  731|  4.92k|                            }
  732|  4.92k|                        }
  733|      0|                        break;
  734|       |
  735|  17.0k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 17.0k, False: 18.9k]
  ------------------
  736|  17.0k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 35.9k]
  ------------------
  737|  17.0k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 17.0k]
  ------------------
  738|  17.0k|                        {
  739|  2.64k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 2.64k, False: 14.3k]
  ------------------
  740|  2.64k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 17.0k]
  ------------------
  741|  2.64k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 2.64k, False: 0]
  |  Branch (741:37): [True: 2.64k, False: 0]
  |  Branch (741:53): [True: 2.64k, False: 0]
  |  Branch (741:69): [True: 2.64k, False: 0]
  ------------------
  742|  2.64k|                                {
  743|  2.64k|                                    return OpCode::SEQUI;
  744|  2.64k|                                }
  745|      0|                                break;
  746|       |
  747|  7.93k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 7.93k, False: 9.06k]
  ------------------
  748|  7.93k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 17.0k]
  ------------------
  749|  7.93k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 3.52k, False: 4.40k]
  |  Branch (749:37): [True: 3.52k, False: 4.40k]
  |  Branch (749:53): [True: 3.52k, False: 0]
  |  Branch (749:69): [True: 3.52k, False: 0]
  ------------------
  750|  3.52k|                                {
  751|  3.52k|                                    return OpCode::SGEUI;
  752|  3.52k|                                }
  753|  4.40k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 4.40k, False: 0]
  |  Branch (753:42): [True: 4.40k, False: 0]
  |  Branch (753:58): [True: 4.40k, False: 0]
  |  Branch (753:74): [True: 4.40k, False: 0]
  ------------------
  754|  4.40k|                                {
  755|  4.40k|                                    return OpCode::SGTUI;
  756|  4.40k|                                }
  757|      0|                                break;
  758|       |
  759|  2.76k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.76k, False: 14.2k]
  ------------------
  760|  2.76k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 17.0k]
  ------------------
  761|  2.76k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 2.16k, False: 598]
  |  Branch (761:37): [True: 2.16k, False: 598]
  |  Branch (761:53): [True: 2.16k, False: 0]
  |  Branch (761:69): [True: 2.16k, False: 0]
  ------------------
  762|  2.16k|                                {
  763|  2.16k|                                    return OpCode::SLEUI;
  764|  2.16k|                                }
  765|    598|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 598, False: 0]
  |  Branch (765:42): [True: 598, False: 0]
  |  Branch (765:58): [True: 598, False: 0]
  |  Branch (765:74): [True: 598, False: 0]
  ------------------
  766|    598|                                {
  767|    598|                                    return OpCode::SLTUI;
  768|    598|                                }
  769|      0|                                break;
  770|       |
  771|    129|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 129, False: 16.8k]
  ------------------
  772|    129|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 17.0k]
  ------------------
  773|    129|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 129, False: 0]
  |  Branch (773:37): [True: 129, False: 0]
  |  Branch (773:53): [True: 129, False: 0]
  |  Branch (773:69): [True: 129, False: 0]
  ------------------
  774|    129|                                {
  775|    129|                                    return OpCode::SNEUI;
  776|    129|                                }
  777|      0|                                break;
  778|       |
  779|  3.53k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 3.53k, False: 13.4k]
  ------------------
  780|  3.53k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 17.0k]
  ------------------
  781|  3.53k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 3.53k, False: 0]
  |  Branch (781:37): [True: 3.53k, False: 0]
  |  Branch (781:53): [True: 3.53k, False: 0]
  |  Branch (781:69): [True: 3.53k, False: 0]
  ------------------
  782|  3.53k|                                {
  783|  3.53k|                                    return OpCode::SUBUI;
  784|  3.53k|                                }
  785|      0|                                break;
  786|  17.0k|                        }
  787|       |
  788|      0|                        break;
  789|  35.9k|                }
  790|       |
  791|  5.82k|                break;
  792|  35.9k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  10.5k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 10.5k, False: 563k]
  ------------------
  796|  10.5k|                char c1 = token[0];
  797|  10.5k|                char c2 = token[1];
  798|  10.5k|                char c3 = token[2];
  799|  10.5k|                char c4 = token[3];
  800|  10.5k|                char c5 = token[4];
  801|  10.5k|                char c6 = token[5];
  802|       |
  803|  10.5k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 5.60k, False: 4.97k]
  |  Branch (803:21): [True: 5.60k, False: 4.97k]
  |  Branch (803:37): [True: 5.60k, False: 0]
  |  Branch (803:53): [True: 5.60k, False: 0]
  ------------------
  804|  5.60k|                {
  805|  5.60k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 5.60k]
  ------------------
  806|  5.60k|                    {
  807|  1.78k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.78k, False: 3.81k]
  ------------------
  808|  1.78k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 5.60k]
  ------------------
  809|  1.78k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 1.78k, False: 0]
  ------------------
  810|  1.78k|                            {
  811|  1.78k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 1.23k, False: 554]
  ------------------
  812|  1.23k|                                {
  813|  1.23k|                                    return OpCode::CVTD2F;
  814|  1.23k|                                }
  815|    554|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 554, False: 0]
  ------------------
  816|    554|                                {
  817|    554|                                    return OpCode::CVTD2I;
  818|    554|                                }
  819|  1.78k|                            }
  820|      0|                            break;
  821|       |
  822|  2.79k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.79k, False: 2.80k]
  ------------------
  823|  2.79k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 5.60k]
  ------------------
  824|  2.79k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 2.79k, False: 0]
  ------------------
  825|  2.79k|                            {
  826|  2.79k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 1.64k, False: 1.15k]
  ------------------
  827|  1.64k|                                {
  828|  1.64k|                                    return OpCode::CVTF2D;
  829|  1.64k|                                }
  830|  1.15k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.15k, False: 0]
  ------------------
  831|  1.15k|                                {
  832|  1.15k|                                    return OpCode::CVTF2I;
  833|  1.15k|                                }
  834|  2.79k|                            }
  835|      0|                            break;
  836|       |
  837|  1.02k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.02k, False: 4.58k]
  ------------------
  838|  1.02k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 5.60k]
  ------------------
  839|  1.02k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.02k, False: 0]
  ------------------
  840|  1.02k|                            {
  841|  1.02k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 950, False: 71]
  ------------------
  842|    950|                                {
  843|    950|                                    return OpCode::CVTI2D;
  844|    950|                                }
  845|     71|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 71, False: 0]
  ------------------
  846|     71|                                {
  847|     71|                                    return OpCode::CVTI2F;
  848|     71|                                }
  849|  1.02k|                            }
  850|  5.60k|                    }
  851|  5.60k|                }
  852|  4.97k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 1.45k, False: 3.52k]
  |  Branch (852:26): [True: 1.45k, False: 3.52k]
  |  Branch (852:42): [True: 1.45k, False: 0]
  |  Branch (852:58): [True: 1.45k, False: 0]
  |  Branch (852:74): [True: 1.45k, False: 0]
  ------------------
  853|  4.97k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.45k, False: 0]
  |  Branch (853:42): [True: 1.45k, False: 0]
  ------------------
  854|  1.45k|                {
  855|  1.45k|                    return OpCode::MULTUI;
  856|  1.45k|                }
  857|  3.52k|                break;
  858|  10.5k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  3.52k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 1.87k, False: 572k]
  ------------------
  862|  1.87k|                char c1 = token[0];
  863|  1.87k|                char c2 = token[1];
  864|  1.87k|                char c3 = token[2];
  865|  1.87k|                char c4 = token[3];
  866|  1.87k|                char c5 = token[4];
  867|  1.87k|                char c6 = token[5];
  868|  1.87k|                char c7 = token[6];
  869|       |
  870|  1.87k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 859, False: 1.01k]
  |  Branch (870:21): [True: 859, False: 1.01k]
  |  Branch (870:37): [True: 859, False: 0]
  |  Branch (870:53): [True: 859, False: 0]
  ------------------
  871|    859|                {
  872|    859|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 164, False: 695]
  |  Branch (872:25): [True: 164, False: 695]
  |  Branch (872:41): [True: 164, False: 0]
  |  Branch (872:54): [True: 164, False: 0]
  |  Branch (872:70): [True: 164, False: 0]
  ------------------
  873|    164|                    {
  874|    164|                        return OpCode::MOVI2FP;
  875|    164|                    }
  876|    695|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 695, False: 0]
  |  Branch (876:30): [True: 695, False: 0]
  |  Branch (876:46): [True: 695, False: 0]
  |  Branch (876:62): [True: 695, False: 0]
  |  Branch (876:75): [True: 695, False: 0]
  ------------------
  877|    695|                    {
  878|    695|                        return OpCode::MOVFP2I;
  879|    695|                    }
  880|    859|                }
  881|  1.01k|                break;
  882|  1.87k|            }
  883|       |
  884|  23.9k|            default: {
  ------------------
  |  Branch (884:13): [True: 23.9k, False: 549k]
  ------------------
  885|  23.9k|                break;
  886|  1.87k|            }
  887|   573k|        }
  888|       |
  889|       |        // None found
  890|   190k|        return OpCode::NONE;
  891|   573k|    }
_ZN3dlx3iceEcc:
   17|   912k|    {
   18|   912k|        constexpr const char diff = 'a' - 'A';
   19|   912k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 661k, False: 250k]
  |  Branch (19:28): [True: 75.5k, False: 175k]
  ------------------
   20|   912k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   675k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  9.58k|    {
  193|  9.58k|        ParseError err;
  194|       |
  195|  9.58k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  9.58k|        err.m_LineNumber                           = line_number;
  197|  9.58k|        err.m_Column                               = column;
  198|  9.58k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  9.58k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  9.58k|        return err;
  202|  9.58k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  9.58k|    {
  207|  9.58k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  9.58k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  9.58k|                                                         actual_type);
  210|  9.58k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    277|    {
  216|    277|        ParseError err;
  217|       |
  218|    277|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    277|        err.m_LineNumber        = line_number;
  220|    277|        err.m_Column            = column;
  221|    277|        err.invalid_number.text = text;
  222|       |
  223|    277|        return err;
  224|    277|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    277|    {
  228|    277|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    277|                                                token.GetColumn().unsafe(), token.GetText());
  230|    277|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   215k|    {
  255|   215k|        ParseError err;
  256|       |
  257|   215k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   215k|        err.m_LineNumber                   = line_number;
  259|   215k|        err.m_Column                       = column;
  260|   215k|        err.unexpected_token.expected_type = expected_type;
  261|   215k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   215k|        return err;
  264|   215k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   215k|    {
  269|   215k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   215k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   215k|                                                  token.GetType());
  272|   215k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  6.23k|    {
  277|  6.23k|        ParseError err;
  278|       |
  279|  6.23k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  6.23k|        err.m_LineNumber                   = line_number;
  281|  6.23k|        err.m_Column                       = column;
  282|  6.23k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  6.23k|        return err;
  285|  6.23k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  1.54k|    {
  289|  1.54k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  1.54k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  1.54k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  97.8k|    {
  296|  97.8k|        ParseError err;
  297|       |
  298|  97.8k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  97.8k|        err.m_LineNumber                       = line_number;
  300|  97.8k|        err.m_Column                           = column;
  301|  97.8k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  97.8k|        return err;
  304|  97.8k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  97.8k|    {
  309|  97.8k|        return ConstructInvalidLabelIdentifierParseError(
  310|  97.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  97.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  19.4k|    {
  317|  19.4k|        ParseError err;
  318|       |
  319|  19.4k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  19.4k|        err.m_LineNumber                     = line_number;
  321|  19.4k|        err.m_Column                         = column;
  322|  19.4k|        err.label_already_defined.label_name = label_name;
  323|  19.4k|        err.label_already_defined.at_line    = at_line;
  324|  19.4k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  19.4k|        return err;
  327|  19.4k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  19.4k|    {
  332|  19.4k|        return ConstructLabelAlreadyDefinedParseError(
  333|  19.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  19.4k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  19.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   277k|    {
  340|   277k|        ParseError err;
  341|       |
  342|   277k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   277k|        err.m_LineNumber = line_number;
  344|   277k|        err.m_Column     = column;
  345|       |
  346|   277k|        return err;
  347|   277k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   277k|    {
  352|   277k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   277k|                                                        token.GetColumn().unsafe());
  354|   277k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  46.9k|    {
  360|  46.9k|        ParseError err;
  361|       |
  362|  46.9k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  46.9k|        err.m_LineNumber               = line_number;
  364|  46.9k|        err.m_Column                   = column;
  365|  46.9k|        err.too_few_arguments.required = required;
  366|  46.9k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  46.9k|        return err;
  369|  46.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  46.9k|    {
  374|  46.9k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  46.9k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  46.9k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.47k|    {
  381|  1.47k|        ParseError err;
  382|       |
  383|  1.47k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.47k|        err.m_LineNumber           = line_number;
  385|  1.47k|        err.m_Column               = column;
  386|  1.47k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.47k|        return err;
  389|  1.47k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.47k|    {
  393|  1.47k|        return ConstructEmptyLabelParseError(
  394|  1.47k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.47k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 957, False: 522]
  ------------------
  396|    957|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.47k|                        token.GetText());
  398|  1.47k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    159|    {
  403|    159|        ParseError err;
  404|       |
  405|    159|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    159|        err.m_LineNumber = line_number;
  407|    159|        err.m_Column     = column;
  408|       |
  409|    159|        return err;
  410|    159|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    159|    {
  414|    159|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    159|                                               token.GetColumn().unsafe());
  416|    159|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   675k|    {
   19|   675k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   675k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  6.77k|    {
  182|  6.77k|        ParsedProgram program;
  183|       |
  184|  6.77k|        program.m_Tokens = tokens;
  185|       |
  186|  6.77k|        phi::boolean line_has_instruction{false};
  187|  6.77k|        phi::usize   label_count{0u};
  188|       |
  189|  1.59M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 1.58M, False: 6.77k]
  ------------------
  190|  1.58M|        {
  191|  1.58M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  1.58M|            switch (current_token.GetType())
  196|  1.58M|            {
  197|       |                // Ignore comments
  198|   171k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 171k, False: 1.41M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   171k|                    break;
  201|       |
  202|   732k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 732k, False: 854k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   732k|                    line_has_instruction = false;
  205|   732k|                    break;
  206|       |
  207|   128k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 128k, False: 1.45M]
  ------------------
  208|   128k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 9.05k, False: 119k]
  ------------------
  209|  9.05k|                    {
  210|  9.05k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  9.05k|                                current_token, Token::Type::NewLine));
  212|  9.05k|                        break;
  213|  9.05k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   119k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 74.5k, False: 44.9k]
  ------------------
  218|  74.5k|                    {
  219|  74.5k|                        program.AddParseError(
  220|  74.5k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  74.5k|                        break;
  222|  74.5k|                    }
  223|       |
  224|  44.9k|                    std::string_view label_name = current_token.GetText();
  225|  44.9k|                    label_name.remove_suffix(1);
  226|       |
  227|  44.9k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 4.69k, False: 40.2k]
  ------------------
  228|  4.69k|                    {
  229|  4.69k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  4.69k|                                current_token.GetLineNumber().unsafe(),
  231|  4.69k|                                current_token.GetColumn().unsafe(), label_name));
  232|  4.69k|                        break;
  233|  4.69k|                    }
  234|       |
  235|  40.2k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 17.0k, False: 23.2k]
  ------------------
  236|  17.0k|                    {
  237|  17.0k|                        program.AddParseError(
  238|  17.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  17.0k|                        break;
  240|  17.0k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  23.2k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 19.4k, False: 3.81k]
  ------------------
  244|  19.4k|                    {
  245|       |                        // Find first defintions of label
  246|  19.4k|                        const Token* first_label_definition =
  247|  19.4k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  19.4k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  19.4k|                                    {
  250|  19.4k|                                        std::string_view token_label_name = t.GetText();
  251|  19.4k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  19.4k|                                        if (token_label_name == label_name)
  254|  19.4k|                                        {
  255|  19.4k|                                            return true;
  256|  19.4k|                                        }
  257|  19.4k|                                    }
  258|       |
  259|  19.4k|                                    return false;
  260|  19.4k|                                });
  261|       |
  262|  19.4k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  19.4k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  19.4k|                                current_token, *first_label_definition));
  266|  19.4k|                        break;
  267|  19.4k|                    }
  268|       |
  269|  3.81k|                    program.m_JumpData[label_name] =
  270|  3.81k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  3.81k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  3.81k|                    break;
  277|  23.2k|                }
  278|       |
  279|   367k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 367k, False: 1.21M]
  ------------------
  280|   367k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 277k, False: 89.8k]
  ------------------
  281|   277k|                    {
  282|   277k|                        program.AddParseError(
  283|   277k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   277k|                        break;
  285|   277k|                    }
  286|       |
  287|  89.8k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  89.8k|                    PHI_ASSERT(current_token.HasHint());
  291|  89.8k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  89.8k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  89.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  89.8k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  89.8k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  89.8k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  89.8k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  89.8k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  89.8k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   125k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 120k, False: 4.59k]
  ------------------
  313|   120k|                    {
  314|       |                        // Get next token
  315|   120k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 356, False: 120k]
  ------------------
  316|    356|                        {
  317|    356|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    356|                                    current_token, number_of_argument_required.unsafe(),
  319|    356|                                    argument_num.unsafe()));
  320|    356|                            break;
  321|    356|                        }
  322|       |
  323|   120k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   120k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 21.5k, False: 98.9k]
  ------------------
  327|  21.5k|                        {
  328|  21.5k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 159, False: 21.4k]
  ------------------
  329|    159|                            {
  330|    159|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    159|                            }
  332|       |
  333|  21.5k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  21.5k|                            continue;
  336|  21.5k|                        }
  337|       |
  338|  98.9k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 46.5k, False: 52.3k]
  ------------------
  339|  46.5k|                        {
  340|  46.5k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  46.5k|                                    token, number_of_argument_required.unsafe(),
  342|  46.5k|                                    argument_num.unsafe()));
  343|  46.5k|                            break;
  344|  46.5k|                        }
  345|       |
  346|  52.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  52.3k|                                parse_instruction_argument(
  348|  52.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  52.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 38.2k, False: 14.0k]
  ------------------
  350|  38.2k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  38.2k|                            break;
  353|  38.2k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  14.0k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  14.0k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  14.0k|                        argument_num++;
  360|  14.0k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  14.0k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  89.8k|                    program.m_Instructions.emplace_back(instruction);
  368|  89.8k|                    line_has_instruction = true;
  369|  89.8k|                    break;
  370|   367k|                }
  371|       |
  372|   186k|                default:
  ------------------
  |  Branch (372:17): [True: 186k, False: 1.40M]
  ------------------
  373|   186k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   186k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 132k, False: 53.7k]
  ------------------
  375|   132k|                    {
  376|   132k|                        expected_token_type = Token::Type::NewLine;
  377|   132k|                    }
  378|       |
  379|   186k|                    program.AddParseError(
  380|   186k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   186k|                    break;
  382|  1.58M|            }
  383|  1.58M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  6.77k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 567, False: 6.20k]
  ------------------
  387|    567|        {
  388|  6.78k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 6.21k, False: 567]
  ------------------
  389|  6.21k|            {
  390|  6.21k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  6.21k|                const Token& token = *it;
  393|  6.21k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.47k, False: 4.73k]
  ------------------
  394|  1.47k|                {
  395|  1.47k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.47k|                    --label_count;
  397|  1.47k|                }
  398|  6.21k|            }
  399|    567|        }
  400|       |
  401|  6.77k|        return program;
  402|  6.77k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  6.77k|    {
  406|  6.77k|        TokenStream tokens = Tokenize(source);
  407|  6.77k|        return Parse(tokens);
  408|  6.77k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  52.3k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  52.3k|        switch (token.GetType())
   38|  52.3k|        {
   39|  4.29k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 4.29k, False: 48.0k]
  ------------------
   40|  4.29k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 3.03k, False: 1.26k]
  ------------------
   41|  4.29k|                                          ArgumentType::AddressDisplacement))
   42|  3.03k|                {
   43|  3.03k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  3.03k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  3.03k|                    return {};
   47|  3.03k|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.26k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.26k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.26k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 1.26k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  1.26k|                auto         it           = tokens.current_position();
   62|  1.26k|                const Token& first_token  = tokens.consume();
   63|  1.26k|                const Token& second_token = tokens.consume();
   64|  1.26k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.26k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.26k, False: 0]
  ------------------
   67|  1.26k|                {
   68|  1.26k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.26k|                            first_token, Token::Type::OpenBracket));
   70|  1.26k|                    return {};
   71|  1.26k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  12.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 12.2k, False: 40.0k]
  ------------------
   98|  12.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.45k, False: 9.79k]
  ------------------
   99|  2.45k|                {
  100|  2.45k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.45k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.45k|                    return {};
  103|  2.45k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  9.79k|                return ConstructInstructionArgumentRegisterInt(
  109|  9.79k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  12.2k|            }
  111|  1.23k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 1.23k, False: 51.0k]
  ------------------
  112|  1.23k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 927, False: 311]
  ------------------
  113|    927|                {
  114|    927|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    927|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    927|                    return {};
  117|    927|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    311|                return ConstructInstructionArgumentRegisterFloat(
  123|    311|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  1.23k|            }
  125|  1.54k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 1.54k, False: 50.7k]
  ------------------
  126|  1.54k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  1.54k|                return {};
  129|  1.23k|            }
  130|  11.4k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 11.4k, False: 40.8k]
  ------------------
  131|       |                // Parse as Label
  132|  11.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.83k, False: 9.60k]
  ------------------
  133|  1.83k|                {
  134|  1.83k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.83k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.83k|                    return {};
  137|  1.83k|                }
  138|       |
  139|  9.60k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 9.60k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  9.60k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 6.27k, False: 3.32k]
  ------------------
  146|  6.27k|                {
  147|  6.27k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  6.27k|                    return {};
  149|  6.27k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  3.32k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  9.60k|            }
  155|  2.22k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.22k, False: 50.0k]
  ------------------
  156|  2.22k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.33k, False: 894]
  ------------------
  157|  1.33k|                {
  158|  1.33k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.33k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.33k|                    return {};
  161|  1.33k|                }
  162|       |
  163|    894|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 617, False: 277]
  ------------------
  164|    617|                {
  165|    617|                    return ConstructInstructionArgumentImmediateValue(
  166|    617|                            static_cast<std::int16_t>(token.GetHint()));
  167|    617|                }
  168|       |
  169|    277|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    277|                return {};
  171|    894|            }
  172|       |
  173|  19.3k|            default:
  ------------------
  |  Branch (173:13): [True: 19.3k, False: 32.9k]
  ------------------
  174|  19.3k|                program.AddParseError(
  175|  19.3k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  19.3k|                return {};
  177|  52.3k|        }
  178|  52.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   448k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   448k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 84.4k, False: 363k]
  ------------------
  249|  84.4k|                                    {
  250|  84.4k|                                        std::string_view token_label_name = t.GetText();
  251|  84.4k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  84.4k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 19.4k, False: 65.0k]
  ------------------
  254|  19.4k|                                        {
  255|  19.4k|                                            return true;
  256|  19.4k|                                        }
  257|  84.4k|                                    }
  258|       |
  259|   428k|                                    return false;
  260|   448k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|    164|    {
  353|    164|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 0, False: 164]
  ------------------
  354|      0|        {
  355|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|      0|            return false;
  357|      0|        }
  358|       |
  359|    164|        m_CurrentProgram = &program;
  360|       |
  361|    164|        m_ProgramCounter               = 0u;
  362|    164|        m_Halted                       = false;
  363|    164|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    164|        m_LastRaisedException          = Exception::None;
  365|    164|        m_CurrentStepCount             = 0u;
  366|       |
  367|    164|        return true;
  368|    164|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   660k|    {
   14|   660k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 126k, False: 533k]
  ------------------
   15|   126k|        {
   16|   126k|            char first_char = token[0];
   17|   126k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 54.0k, False: 72.6k]
  |  Branch (17:38): [True: 4.32k, False: 68.3k]
  ------------------
   18|  58.3k|            {
   19|  58.3k|                char second_char = token[1];
   20|  58.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 57.3k, False: 954]
  |  Branch (20:43): [True: 55.2k, False: 2.10k]
  ------------------
   21|  55.2k|                {
   22|  55.2k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  55.2k|                }
   24|  58.3k|            }
   25|   126k|        }
   26|   533k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 309k, False: 224k]
  ------------------
   27|   309k|        {
   28|   309k|            char first_char = token[0];
   29|   309k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 17.3k, False: 291k]
  |  Branch (29:38): [True: 3.52k, False: 288k]
  ------------------
   30|  20.8k|            {
   31|  20.8k|                char second_char = token[1];
   32|  20.8k|                char third_char  = token[2];
   33|       |
   34|  20.8k|                switch (second_char)
   35|  20.8k|                {
   36|  7.45k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 7.45k, False: 13.3k]
  ------------------
   37|  7.45k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 7.27k, False: 175]
  |  Branch (37:50): [True: 7.09k, False: 186]
  ------------------
   38|  7.09k|                        {
   39|  7.09k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  7.09k|                        }
   41|    361|                        break;
   42|  7.45k|                    }
   43|  9.30k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 9.30k, False: 11.5k]
  ------------------
   44|  9.30k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 8.86k, False: 442]
  |  Branch (44:50): [True: 7.32k, False: 1.53k]
  ------------------
   45|  7.32k|                        {
   46|  7.32k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  7.32k|                        }
   48|  1.97k|                        break;
   49|  9.30k|                    }
   50|  3.06k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 3.06k, False: 17.7k]
  ------------------
   51|  3.06k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 818, False: 2.24k]
  |  Branch (51:50): [True: 2.03k, False: 216]
  ------------------
   52|  2.84k|                        {
   53|  2.84k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  2.84k|                        }
   55|    216|                        break;
   56|  3.06k|                    }
   57|  1.02k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.02k, False: 19.8k]
  ------------------
   58|  1.02k|                        break;
   59|  3.06k|                    }
   60|  20.8k|                }
   61|  20.8k|            }
   62|   309k|        }
   63|       |
   64|   587k|        return IntRegisterID::None;
   65|   660k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   587k|    {
   69|   587k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 71.4k, False: 516k]
  ------------------
   70|  71.4k|        {
   71|  71.4k|            char first_char = token[0];
   72|  71.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 5.29k, False: 66.1k]
  |  Branch (72:38): [True: 3.24k, False: 62.8k]
  ------------------
   73|  8.54k|            {
   74|  8.54k|                char second_char = token[1];
   75|  8.54k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 8.36k, False: 178]
  |  Branch (75:43): [True: 5.55k, False: 2.80k]
  ------------------
   76|  5.55k|                {
   77|  5.55k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  5.55k|                }
   79|  8.54k|            }
   80|  71.4k|        }
   81|   516k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 291k, False: 224k]
  ------------------
   82|   291k|        {
   83|   291k|            char first_char = token[0];
   84|   291k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 8.45k, False: 283k]
  |  Branch (84:38): [True: 4.14k, False: 279k]
  ------------------
   85|  12.6k|            {
   86|  12.6k|                char second_char = token[1];
   87|  12.6k|                char third_char  = token[2];
   88|       |
   89|  12.6k|                switch (second_char)
   90|  12.6k|                {
   91|  4.09k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 4.09k, False: 8.50k]
  ------------------
   92|  4.09k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.71k, False: 1.38k]
  |  Branch (92:50): [True: 2.46k, False: 248]
  ------------------
   93|  2.46k|                        {
   94|  2.46k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  2.46k|                        }
   96|  1.63k|                        break;
   97|  4.09k|                    }
   98|  2.56k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 2.56k, False: 10.0k]
  ------------------
   99|  2.56k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 1.27k, False: 1.28k]
  |  Branch (99:50): [True: 912, False: 365]
  ------------------
  100|    912|                        {
  101|    912|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|    912|                        }
  103|  1.65k|                        break;
  104|  2.56k|                    }
  105|  5.35k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 5.35k, False: 7.24k]
  ------------------
  106|  5.35k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 4.69k, False: 658]
  |  Branch (106:50): [True: 353, False: 305]
  ------------------
  107|  5.04k|                        {
  108|  5.04k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  5.04k|                        }
  110|    305|                        break;
  111|  5.35k|                    }
  112|    587|                    default: {
  ------------------
  |  Branch (112:21): [True: 587, False: 12.0k]
  ------------------
  113|    587|                        break;
  114|  5.35k|                    }
  115|  12.6k|                }
  116|  12.6k|            }
  117|   291k|        }
  118|       |
  119|   573k|        return FloatRegisterID::None;
  120|   587k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   669k|    {
  124|   669k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 144k, False: 525k]
  ------------------
  125|   144k|        {
  126|   144k|            char c1 = token[0];
  127|   144k|            char c2 = token[1];
  128|   144k|            char c3 = token[2];
  129|   144k|            char c4 = token[3];
  130|       |
  131|   144k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 13.7k, False: 130k]
  |  Branch (131:34): [True: 187, False: 130k]
  |  Branch (131:49): [True: 13.7k, False: 278]
  |  Branch (131:62): [True: 207, False: 71]
  ------------------
  132|   144k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 13.6k, False: 213]
  |  Branch (132:34): [True: 147, False: 66]
  |  Branch (132:49): [True: 13.6k, False: 147]
  |  Branch (132:62): [True: 0, False: 147]
  ------------------
  133|   144k|        }
  134|       |
  135|   525k|        return false;
  136|   669k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.22M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   487k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  4.24M|    {
   41|  4.24M|        return m_Type;
   42|  4.24M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  2.64M|    {
   51|  2.64M|        return m_LineNumber;
   52|  2.64M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  5.18M|    {
   56|  5.18M|        return m_Column;
   57|  5.18M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  3.55M|    {
   61|  3.55M|        return m_Text.length();
   62|  3.55M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   394k|    {
   66|   394k|        return m_Text;
   67|   394k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  91.9k|    {
   80|  91.9k|        return m_HasHint;
   81|  91.9k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   101k|    {
   85|   101k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   101k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   101k|                   m_Type == Type::ImmediateInteger);
   88|   101k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   101k|        return m_Hint;
   91|   101k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  6.77k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  6.77k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  6.77k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.26k|    {
   51|  1.26k|        auto it = m_Iterator;
   52|  5.04k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 3.78k, False: 1.26k]
  ------------------
   53|  3.78k|        {
   54|  3.78k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 3.78k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  3.78k|        }
   59|       |
   60|  1.26k|        return true;
   61|  1.26k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.71M|    {
   65|  1.71M|        return m_Iterator != m_Tokens.end();
   66|  1.71M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.71M|    {
   70|  1.71M|        return m_Iterator == m_Tokens.end();
   71|  1.71M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.71M|    {
   85|  1.71M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.71M|        return *m_Iterator++;
   91|  1.71M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.26k|    {
  164|  1.26k|        return m_Iterator;
  165|  1.26k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  6.77k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  6.77k|        return m_Tokens.begin();
  188|  6.77k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  6.77k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  6.77k|        return m_Tokens.end();
  206|  6.77k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    567|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    567|        return m_Tokens.rbegin();
  224|    567|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  6.21k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  6.21k|        return m_Tokens.rend();
  233|  6.21k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  6.77k|    {
   63|  6.77k|        TokenStream tokens;
   64|       |
   65|  6.77k|        std::string_view current_token;
   66|       |
   67|  6.77k|        phi::u64 current_line_number{1u};
   68|  6.77k|        phi::u64 current_column{1u};
   69|  6.77k|        phi::u64 token_begin{0u};
   70|       |
   71|  6.77k|        phi::boolean parsing_comment{false};
   72|       |
   73|  3.76M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 3.76M, False: 6.77k]
  ------------------
   74|  3.76M|        {
   75|  3.76M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  3.76M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 781k, False: 2.98M]
  ------------------
   78|   781k|            {
   79|   781k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 472k, False: 308k]
  ------------------
   80|   472k|                {
   81|       |                    // Skip empty lines
   82|   472k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   472k|                                        current_line_number, current_column);
   84|       |
   85|   472k|                    parsing_comment = false;
   86|   472k|                    current_line_number += 1u;
   87|   472k|                    current_column = 1u;
   88|   472k|                    continue;
   89|   472k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   308k|                tokens.emplace_back(
   93|   308k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   308k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   308k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   308k|                                    current_line_number, current_column);
   98|       |
   99|   308k|                current_token   = std::string_view{};
  100|   308k|                parsing_comment = false;
  101|   308k|                current_line_number += 1u;
  102|   308k|                current_column = 0u;
  103|   308k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  2.98M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 2.33k, False: 2.97M]
  |  Branch (105:34): [True: 177k, False: 2.80M]
  ------------------
  106|   179k|            {
  107|   179k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 167k, False: 11.9k]
  ------------------
  108|   167k|                {
  109|   167k|                    token_begin = i;
  110|   167k|                }
  111|  11.9k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 10.8k, False: 1.04k]
  ------------------
  112|  10.8k|                {
  113|  10.8k|                    tokens.emplace_back(ParseToken(
  114|  10.8k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  10.8k|                            current_line_number, current_column - current_token.length()));
  116|  10.8k|                    token_begin   = i;
  117|  10.8k|                    current_token = std::string_view{};
  118|  10.8k|                }
  119|       |
  120|   179k|                parsing_comment = true;
  121|   179k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   179k|            }
  123|  2.80M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 207k, False: 2.59M]
  ------------------
  124|   207k|            {
  125|       |                // simply append the character
  126|   207k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   207k|            }
  128|  2.59M|            else
  129|  2.59M|            {
  130|       |                // Not parsing a comment
  131|  2.59M|                switch (c)
  132|  2.59M|                {
  133|   354k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 354k, False: 2.23M]
  ------------------
  134|   355k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 575, False: 2.59M]
  ------------------
  135|   355k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 2.59M]
  ------------------
  136|   355k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 434, False: 354k]
  ------------------
  137|    434|                        {
  138|    434|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    434|                            continue;
  141|    434|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   354k|                        tokens.emplace_back(ParseToken(
  145|   354k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   354k|                                current_line_number, current_column - current_token.length()));
  147|   354k|                        current_token = std::string_view{};
  148|   354k|                        break;
  149|  56.5k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 56.5k, False: 2.53M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  56.5k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 48.8k, False: 7.68k]
  ------------------
  152|  48.8k|                        {
  153|  48.8k|                            current_token =
  154|  48.8k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  48.8k|                            tokens.emplace_back(ParseToken(
  156|  48.8k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  48.8k|                                    current_line_number,
  158|  48.8k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  48.8k|                            current_token = std::string_view{};
  161|  48.8k|                        }
  162|  7.68k|                        else
  163|  7.68k|                        {
  164|       |                            // Orphan colon
  165|  7.68k|                            token_begin = i;
  166|       |
  167|  7.68k|                            tokens.emplace_back(Token::Type::Colon,
  168|  7.68k|                                                source.substr(token_begin.unsafe(), 1),
  169|  7.68k|                                                current_line_number, current_column);
  170|  7.68k|                        }
  171|  56.5k|                        break;
  172|  97.7k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 97.7k, False: 2.49M]
  ------------------
  173|  98.8k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 1.09k, False: 2.59M]
  ------------------
  174|  98.9k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 192, False: 2.59M]
  ------------------
  175|  98.9k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 97.5k, False: 1.45k]
  ------------------
  176|  97.5k|                        {
  177|  97.5k|                            tokens.emplace_back(ParseToken(
  178|  97.5k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  97.5k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  97.5k|                            current_token = std::string_view{};
  182|  97.5k|                        }
  183|       |
  184|  98.9k|                        Token::Type type;
  185|  98.9k|                        switch (c)
  186|  98.9k|                        {
  187|  97.7k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 97.7k, False: 1.28k]
  ------------------
  188|  97.7k|                                type = Token::Type::Comma;
  189|  97.7k|                                break;
  190|  1.09k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 1.09k, False: 97.9k]
  ------------------
  191|  1.09k|                                type = Token::Type::OpenBracket;
  192|  1.09k|                                break;
  193|    192|                            case ')':
  ------------------
  |  Branch (193:29): [True: 192, False: 98.8k]
  ------------------
  194|    192|                                type = Token::Type::ClosingBracket;
  195|    192|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 98.9k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  98.9k|#endif
  201|  98.9k|                        }
  202|       |
  203|  98.9k|                        token_begin = i;
  204|       |
  205|  98.9k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  98.9k|                                            current_line_number, current_column);
  207|  98.9k|                        break;
  208|       |
  209|  2.08M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.08M, False: 510k]
  ------------------
  210|  2.08M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 644k, False: 1.43M]
  ------------------
  211|   644k|                        {
  212|   644k|                            token_begin = i;
  213|   644k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.08M|                        current_token =
  217|  2.08M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  2.59M|                }
  219|  2.59M|            }
  220|       |
  221|  3.28M|            current_column += 1u;
  222|  3.28M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  6.77k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.06k, False: 4.71k]
  ------------------
  226|  2.06k|        {
  227|  2.06k|            tokens.emplace_back(
  228|  2.06k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.06k|                               current_line_number, current_column - current_token.length()));
  230|  2.06k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  6.77k|        tokens.finalize();
  234|       |
  235|  6.77k|        return tokens;
  236|  6.77k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   822k|    {
   11|   822k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 9.08k, False: 813k]
  |  Branch (11:35): [True: 8.91k, False: 174]
  ------------------
   12|  8.91k|        {
   13|  8.91k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  8.91k|            if (number)
  ------------------
  |  Branch (15:17): [True: 6.20k, False: 2.70k]
  ------------------
   16|  6.20k|            {
   17|  6.20k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  6.20k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  6.20k|            }
   20|       |
   21|  2.70k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  8.91k|        }
   23|       |
   24|   813k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.65k, False: 812k]
  |  Branch (24:35): [True: 176k, False: 635k]
  ------------------
   25|   178k|        {
   26|   178k|            return {Token::Type::Comment, token, line_number, column};
   27|   178k|        }
   28|       |
   29|   635k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 15.8k, False: 619k]
  ------------------
   30|  15.8k|        {
   31|  15.8k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  15.8k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  15.8k|        }
   34|       |
   35|   619k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 13.6k, False: 605k]
  ------------------
   36|  13.6k|        {
   37|  13.6k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  13.6k|        }
   39|       |
   40|   605k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 70.7k, False: 535k]
  ------------------
   41|  70.7k|        {
   42|  70.7k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  70.7k|                    static_cast<std::uint32_t>(id)};
   44|  70.7k|        }
   45|       |
   46|   535k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 13.7k, False: 521k]
  ------------------
   47|  13.7k|        {
   48|  13.7k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  13.7k|                    static_cast<std::uint32_t>(id)};
   50|  13.7k|        }
   51|       |
   52|   521k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 380k, False: 140k]
  ------------------
   53|   380k|        {
   54|   380k|            return {Token::Type::OpCode, token, line_number, column,
   55|   380k|                    static_cast<std::uint32_t>(opcode)};
   56|   380k|        }
   57|       |
   58|   140k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   521k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  6.77k|    {
   53|       |        // Constants
   54|  6.77k|        constexpr std::uint8_t number_of_opcodes =
   55|  6.77k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  6.77k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  6.77k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  6.77k|        std::string ret;
   60|       |
   61|  1.16M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.15M, False: 6.73k]
  ------------------
   62|  1.15M|        {
   63|  1.15M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.15M|            switch (current_value)
   66|  1.15M|            {
   67|       |                // OpCode
   68|   346k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 346k, False: 807k]
  ------------------
   69|       |                    // Has one more value
   70|   346k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 346k, False: 655]
  ------------------
   71|   346k|                    {
   72|   346k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   346k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   346k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 15, False: 346k]
  ------------------
   77|     15|                        {
   78|     15|                            return detail::ErrorString;
   79|     15|                        }
   80|   346k|                    }
   81|   346k|                    break;
   82|   346k|                }
   83|       |
   84|       |                // Int Register
   85|   346k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 80.6k, False: 1.07M]
  ------------------
   86|       |                    // Has one more value
   87|  80.6k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 80.5k, False: 48]
  ------------------
   88|  80.5k|                    {
   89|  80.5k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  80.5k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  80.5k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 10, False: 80.5k]
  ------------------
   93|     10|                        {
   94|     10|                            return detail::ErrorString;
   95|     10|                        }
   96|  80.5k|                    }
   97|  80.6k|                    break;
   98|  80.6k|                }
   99|       |
  100|       |                // Float register
  101|  80.6k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 14.9k, False: 1.13M]
  ------------------
  102|       |                    // Has one more value
  103|  14.9k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 14.8k, False: 45]
  ------------------
  104|  14.8k|                    {
  105|  14.8k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  14.8k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  14.8k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 14.8k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  14.8k|                    }
  113|  14.9k|                    break;
  114|  14.9k|                }
  115|       |
  116|       |                // Floating point status register
  117|  15.8k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 15.8k, False: 1.13M]
  ------------------
  118|  15.8k|                    ret += "FPSR";
  119|  15.8k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 1, False: 15.8k]
  ------------------
  120|      1|                    {
  121|      1|                        return detail::ErrorString;
  122|      1|                    }
  123|       |
  124|  15.8k|                    break;
  125|  15.8k|                }
  126|       |
  127|       |                // Immediate integer
  128|  15.8k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 14.0k, False: 1.13M]
  ------------------
  129|  14.0k|                    ret += "#";
  130|  14.0k|                    [[fallthrough]];
  131|  14.0k|                }
  132|       |
  133|       |                // Integer literal
  134|  62.4k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 48.3k, False: 1.10M]
  ------------------
  135|  62.4k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  62.4k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 62.3k, False: 107]
  ------------------
  138|  62.3k|                    {
  139|  62.3k|                        std::int16_t value = 0;
  140|       |
  141|   186k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 124k, False: 62.3k]
  ------------------
  142|   124k|                        {
  143|   124k|                            value <<= 8;
  144|   124k|                            value &= data[index++];
  145|   124k|                        }
  146|       |
  147|  62.3k|                        ret += std::to_string(value);
  148|  62.3k|                    }
  149|  62.4k|                    break;
  150|  14.0k|                }
  151|       |
  152|       |                // Label
  153|  15.4k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 15.4k, False: 1.13M]
  ------------------
  154|  15.4k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  15.4k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 15.4k, False: 10]
  ------------------
  157|  15.4k|                    {
  158|  15.4k|                        std::string label_name = "lbl_";
  159|       |
  160|  92.4k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 76.9k, False: 15.4k]
  ------------------
  161|  76.9k|                        {
  162|  76.9k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  76.9k|                            label_name += c;
  165|  76.9k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  15.4k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 15.3k, False: 138]
  |  Branch (168:45): [True: 12.1k, False: 3.16k]
  ------------------
  169|  12.1k|                        {
  170|  12.1k|                            label_name += ':';
  171|  12.1k|                            ret += label_name;
  172|  12.1k|                        }
  173|  3.30k|                        else
  174|  3.30k|                        {
  175|  3.30k|                            ret += label_name;
  176|  3.30k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 4, False: 3.29k]
  ------------------
  177|      4|                            {
  178|      4|                                return detail::ErrorString;
  179|      4|                            }
  180|  3.30k|                        }
  181|  15.4k|                    }
  182|  15.4k|                    break;
  183|  15.4k|                }
  184|       |
  185|       |                // Newline
  186|   441k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 441k, False: 712k]
  ------------------
  187|   441k|                    ret += '\n';
  188|   441k|                    break;
  189|  15.4k|                }
  190|       |
  191|       |                // Comment
  192|   176k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 176k, False: 977k]
  ------------------
  193|   176k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   176k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 176k, False: 126]
  ------------------
  196|   176k|                    {
  197|   176k|                        std::string comment = "; ";
  198|       |
  199|  1.05M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 879k, False: 176k]
  ------------------
  200|   879k|                        {
  201|   879k|                            comment += static_cast<char>(data[index++]);
  202|   879k|                        }
  203|       |
  204|   176k|                        ret += comment + '\n';
  205|   176k|                    }
  206|   176k|                    break;
  207|  15.4k|                }
  208|       |
  209|       |                // Ignore
  210|      8|                default:
  ------------------
  |  Branch (210:17): [True: 8, False: 1.15M]
  ------------------
  211|      8|                    return detail::ErrorString;
  212|  1.15M|            }
  213|  1.15M|        }
  214|       |
  215|  6.73k|        return ret;
  216|  6.77k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   460k|        {
   20|   460k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 459k, False: 1.74k]
  ------------------
   21|   459k|            {
   22|   459k|                std::uint8_t val = data[index++];
   23|   459k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 359k, False: 99.5k]
  ------------------
   24|   359k|                {
   25|   359k|                    text += ' ';
   26|   359k|                }
   27|  99.5k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 99.5k, False: 31]
  ------------------
   28|  99.5k|                {
   29|  99.5k|                    text += ',';
   30|  99.5k|                }
   31|     31|                else
   32|     31|                {
   33|     31|                    return false;
   34|     31|                }
   35|   459k|            }
   36|       |
   37|   460k|            return true;
   38|   460k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  76.9k|        {
   42|  76.9k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 63.5k, False: 13.3k]
  ------------------
   43|  63.5k|            {
   44|  63.5k|                return '_';
   45|  63.5k|            }
   46|       |
   47|  13.3k|            return c;
   48|  76.9k|        }

LLVMFuzzerTestOneInput:
   12|  6.77k|{
   13|  6.77k|    static dlxemu::Emulator emu;
   14|       |
   15|  6.77k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  6.77k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  6.77k|    editor.SetText(source);
   21|  6.77k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  6.77k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  6.77k|    editor.ColorizeInternal();
   26|       |
   27|  6.77k|    return 0;
   28|  6.77k|}


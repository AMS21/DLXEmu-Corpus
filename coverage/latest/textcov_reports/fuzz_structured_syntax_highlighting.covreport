_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  49.1k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  237|  9.82k|    {
  238|  9.82k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (238:13): [True: 7.16k, False: 2.66k]
  ------------------
  239|  7.16k|        {
  240|  7.16k|            return m_Line < other.m_Line;
  241|  7.16k|        }
  242|       |
  243|  2.66k|        return m_Column <= other.m_Column;
  244|  9.82k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  248|      1|    {
  249|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (249:13): [True: 0, False: 1]
  ------------------
  250|      0|        {
  251|      0|            return m_Line > other.m_Line;
  252|      0|        }
  253|       |
  254|      1|        return m_Column >= other.m_Column;
  255|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  262|  5.73M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  290|      1|    {
  291|      1|        Colorize();
  292|      1|        m_Lines.push_back(Line());
  293|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  296|      1|    {
  297|      1|        VerifyInternalState();
  298|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  346|  9.82k|    {
  347|  9.82k|        m_ErrorMarkers.clear();
  348|  9.82k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  411|  9.82k|    {
  412|  9.82k|        m_Breakpoints.clear();
  413|  9.82k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  508|  9.82k|    {
  509|  9.82k|        m_Lines.clear();
  510|  9.82k|        ResetState();
  511|  9.82k|        m_Lines.emplace_back(Line());
  512|       |
  513|  9.82k|        for (const char character : text)
  ------------------
  |  Branch (513:35): [True: 7.75M, False: 9.82k]
  ------------------
  514|  7.75M|        {
  515|  7.75M|            if (character == '\r' ||
  ------------------
  |  Branch (515:17): [True: 2.38k, False: 7.75M]
  |  Branch (515:17): [True: 441k, False: 7.31M]
  ------------------
  516|  7.75M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (516:18): [True: 2.01M, False: 5.73M]
  |  Branch (516:48): [True: 442k, False: 1.57M]
  |  Branch (516:69): [True: 439k, False: 3.95k]
  ------------------
  517|   441k|            {
  518|       |                // ignore the carriage return character and control characters
  519|   441k|            }
  520|  7.31M|            else if (character == '\n')
  ------------------
  |  Branch (520:22): [True: 1.57M, False: 5.73M]
  ------------------
  521|  1.57M|            {
  522|  1.57M|                m_Lines.emplace_back(Line());
  523|  1.57M|            }
  524|  5.73M|            else
  525|  5.73M|            {
  526|  5.73M|                m_Lines.back().emplace_back(
  527|  5.73M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  528|  5.73M|            }
  529|  7.75M|        }
  530|       |
  531|  9.82k|        m_TextChanged = true;
  532|  9.82k|        m_ScrollToTop = true;
  533|       |
  534|  9.82k|        m_UndoBuffer.clear();
  535|  9.82k|        m_UndoIndex = 0u;
  536|       |
  537|  9.82k|        Colorize();
  538|  9.82k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  541|  9.82k|    {
  542|  9.82k|        const phi::u32 max_line = GetMaxLineNumber();
  543|       |
  544|  9.82k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  545|  9.82k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1505|      1|    {
 1506|       |        // Lines should never be empty
 1507|      1|        PHI_ASSERT(!m_Lines.empty());
 1508|       |
 1509|       |        // Verify Selection is still in a valid state
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1511|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1512|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1513|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1514|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1515|       |
 1516|       |        // Verify cursor position
 1517|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1518|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1519|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1520|       |
 1521|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1522|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1523|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1524|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1525|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1526|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1527|       |#endif
 1528|       |
 1529|       |        // Verify that all breakpoints are on existing lines
 1530|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1530:35): [True: 0, False: 1]
  ------------------
 1531|      0|        {
 1532|      0|            PHI_ASSERT(break_point != 0u);
 1533|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1534|      0|        }
 1535|       |
 1536|       |        // Verify that all error markers are on existing lines
 1537|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1537:34): [True: 0, False: 1]
  ------------------
 1538|      0|        {
 1539|      0|            const phi::u32 line_number = error_marker.first;
 1540|       |
 1541|      0|            PHI_ASSERT(line_number != 0u);
 1542|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1543|      0|        }
 1544|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1547|      1|    {
 1548|      1|        constexpr const static Palette palette = {{
 1549|      1|                0xff7f7f7f, // Default
 1550|      1|                0xffd69c56, // OpCode
 1551|      1|                0xff00ff00, // Register
 1552|      1|                0xff7070e0, // IntegerLiteral
 1553|      1|                0xff206020, // Comment
 1554|      1|                0xff101010, // Background
 1555|      1|                0xffe0e0e0, // Cursor
 1556|      1|                0x80a06020, // Selection
 1557|      1|                0x800020ff, // ErrorMarker
 1558|      1|                0x40f08000, // Breakpoint
 1559|      1|                0xff707000, // Line number
 1560|      1|                0x40000000, // Current line fill
 1561|      1|                0x40808080, // Current line fill (inactive)
 1562|      1|                0x40a0a0a0, // Current line edge
 1563|      1|        }};
 1564|       |
 1565|      1|        return palette;
 1566|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1733|  9.83k|    {
 1734|       |        // TODO: This is quite unreadable
 1735|  9.83k|        const phi::u32 to_line =
 1736|  9.83k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1736:17): [True: 9.83k, False: 0]
  ------------------
 1737|  9.83k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1738|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1739|       |
 1740|  9.83k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1741|  9.83k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1742|  9.83k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1743|  9.83k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1744|  9.83k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1850|  9.82k|    {
 1851|  9.82k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1852|  9.82k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1853|  9.82k|        PHI_ASSERT(start <= end);
 1854|       |
 1855|  9.82k|        std::string result;
 1856|       |
 1857|  9.82k|        phi::u32   lstart = start.m_Line;
 1858|  9.82k|        phi::u32   lend   = end.m_Line;
 1859|  9.82k|        phi::u32   istart = GetCharacterIndex(start);
 1860|  9.82k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1861|  9.82k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1862|  9.82k|        phi::usize size   = 0u;
 1863|       |
 1864|  1.59M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1864:35): [True: 1.58M, False: 9.82k]
  ------------------
 1865|  1.58M|        {
 1866|  1.58M|            PHI_ASSERT(i < m_Lines.size());
 1867|  1.58M|            size += m_Lines[i.unsafe()].size();
 1868|  1.58M|        }
 1869|       |
 1870|  9.82k|        result.reserve((size + size / 8u).unsafe());
 1871|       |
 1872|  7.32M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1872:16): [True: 2.94M, False: 4.38M]
  |  Branch (1872:16): [True: 7.31M, False: 9.82k]
  |  Branch (1872:33): [True: 4.37M, False: 9.82k]
  ------------------
 1873|  7.31M|        {
 1874|  7.31M|            PHI_ASSERT(lstart < m_Lines.size());
 1875|       |
 1876|  7.31M|            const Line& line = m_Lines[lstart.unsafe()];
 1877|  7.31M|            if (istart < line.size())
  ------------------
  |  Branch (1877:17): [True: 5.73M, False: 1.57M]
  ------------------
 1878|  5.73M|            {
 1879|  5.73M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1880|  5.73M|                istart++;
 1881|  5.73M|            }
 1882|  1.57M|            else
 1883|  1.57M|            {
 1884|  1.57M|                istart = 0u;
 1885|  1.57M|                ++lstart;
 1886|       |
 1887|  1.57M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1887:21): [True: 1.57M, False: 0]
  ------------------
 1888|  1.57M|                {
 1889|  1.57M|                    result += '\n';
 1890|  1.57M|                }
 1891|  1.57M|            }
 1892|  7.31M|        }
 1893|       |
 1894|  9.82k|        return result;
 1895|  9.82k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2431|  19.6k|    {
 2432|  19.6k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2433|       |
 2434|  19.6k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2435|  19.6k|        phi::u32    index = 0u;
 2436|  1.38M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2436:35): [True: 1.37M, False: 12.0k]
  |  Branch (2436:35): [True: 1.36M, False: 19.6k]
  |  Branch (2436:58): [True: 1.36M, False: 7.60k]
  ------------------
 2437|  1.36M|        {
 2438|  1.36M|            PHI_ASSERT(index < line.size());
 2439|  1.36M|            const Char character = line[index.unsafe()].m_Char;
 2440|       |
 2441|  1.36M|            if (character == '\t')
  ------------------
  |  Branch (2441:17): [True: 0, False: 1.36M]
  ------------------
 2442|      0|            {
 2443|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2444|      0|            }
 2445|  1.36M|            else
 2446|  1.36M|            {
 2447|  1.36M|                ++column;
 2448|  1.36M|            }
 2449|       |
 2450|  1.36M|            index += UTF8CharLength(character);
 2451|  1.36M|        }
 2452|       |
 2453|  19.6k|        return index;
 2454|  19.6k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2503|  9.82k|    {
 2504|  9.82k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2504:13): [True: 0, False: 9.82k]
  ------------------
 2505|      0|        {
 2506|      0|            return 0u;
 2507|      0|        }
 2508|       |
 2509|  9.82k|        const Line& line = m_Lines[line_number.unsafe()];
 2510|  9.82k|        phi::u32    col  = 0u;
 2511|       |
 2512|  1.37M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2512:32): [True: 1.36M, False: 9.82k]
  ------------------
 2513|  1.36M|        {
 2514|  1.36M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2515|  1.36M|            if (character == '\t')
  ------------------
  |  Branch (2515:17): [True: 0, False: 1.36M]
  ------------------
 2516|      0|            {
 2517|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2518|      0|            }
 2519|  1.36M|            else
 2520|  1.36M|            {
 2521|  1.36M|                col++;
 2522|  1.36M|            }
 2523|       |
 2524|  1.36M|            i += UTF8CharLength(character);
 2525|  1.36M|        }
 2526|       |
 2527|  9.82k|        return col;
 2528|  9.82k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2531|  9.82k|    {
 2532|  9.82k|        PHI_ASSERT(!m_Lines.empty());
 2533|       |
 2534|  9.82k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2535|  9.82k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3663|  3.38M|    {
 3664|  3.38M|        PaletteIndex palette_index{PaletteIndex::Default};
 3665|       |
 3666|       |        // Determine palette color
 3667|  3.38M|        switch (token.GetType())
 3668|  3.38M|        {
 3669|   368k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3669:13): [True: 368k, False: 3.01M]
  ------------------
 3670|   368k|                palette_index = PaletteIndex::Comment;
 3671|   368k|                break;
 3672|  31.3k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3672:13): [True: 31.3k, False: 3.34M]
  ------------------
 3673|  61.1k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3673:13): [True: 29.8k, False: 3.35M]
  ------------------
 3674|  61.1k|                palette_index = PaletteIndex::IntegerLiteral;
 3675|  61.1k|                break;
 3676|   724k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3676:13): [True: 724k, False: 2.65M]
  ------------------
 3677|   724k|                palette_index = PaletteIndex::OpCode;
 3678|   724k|                break;
 3679|  26.7k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3679:13): [True: 26.7k, False: 3.35M]
  ------------------
 3680|   143k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3680:13): [True: 116k, False: 3.26M]
  ------------------
 3681|   178k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3681:13): [True: 34.6k, False: 3.34M]
  ------------------
 3682|   178k|                palette_index = PaletteIndex::Register;
 3683|   178k|                break;
 3684|  1.57M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3684:13): [True: 1.57M, False: 1.80M]
  ------------------
 3685|  1.57M|                return;
 3686|   473k|            default:
  ------------------
  |  Branch (3686:13): [True: 473k, False: 2.90M]
  ------------------
 3687|   473k|                break;
 3688|  3.38M|        }
 3689|       |
 3690|  1.80M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3691|  1.80M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3692|       |
 3693|  1.80M|        for (phi::u64 index{token.GetColumn() - 1u};
 3694|  6.87M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3694:14): [True: 5.07M, False: 1.80M]
  ------------------
 3695|  5.07M|        {
 3696|  5.07M|            PHI_ASSERT(index < line.size());
 3697|  5.07M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3698|  5.07M|        }
 3699|  1.80M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3702|  9.82k|    {
 3703|  9.82k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3704|       |
 3705|  9.82k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3705:38): [True: 3.38M, False: 9.82k]
  ------------------
 3706|  3.38M|        {
 3707|  3.38M|            ColorizeToken(token);
 3708|  3.38M|        }
 3709|  9.82k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3712|  9.82k|    {
 3713|  9.82k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3714|  9.82k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3715|  9.82k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3716|       |
 3717|       |        // Clear breakpoints and markers
 3718|  9.82k|        ClearBreakPoints();
 3719|  9.82k|        ClearErrorMarkers();
 3720|  9.82k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|  1.36M|{
  133|  1.36M|    return UTF8CharLength(static_cast<char>(characater));
  134|  1.36M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  2.73M|{
  103|  2.73M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 2.73M]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|  2.73M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 2.73M]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|  2.73M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 2.73M]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|  2.73M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 2.73M]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|  2.73M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 2.73M]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|  2.73M|    return 1_u8;
  129|  2.73M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  9.82k|    {
  175|  9.82k|        return m_DLXProgram;
  176|  9.82k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  9.82k|    {
  180|  9.82k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  9.82k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 184, False: 9.64k]
  ------------------
  183|    184|        {
  184|    184|            m_Processor.LoadProgram(m_DLXProgram);
  185|    184|        }
  186|  9.82k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  9.82k|    {
  200|  9.82k|        return m_CodeEditor;
  201|  9.82k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|      1|    {
  107|      1|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 1]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 1]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|      1|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 1]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   734k|        {
  169|   734k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   734k|            switch (index.unsafe())
  172|   734k|            {
  173|   303k|                case 0:
  ------------------
  |  Branch (173:17): [True: 303k, False: 431k]
  ------------------
  174|   303k|                    return m_Arg1Type;
  175|       |
  176|   219k|                case 1:
  ------------------
  |  Branch (176:17): [True: 219k, False: 514k]
  ------------------
  177|   219k|                    return m_Arg2Type;
  178|       |
  179|   211k|                case 2:
  ------------------
  |  Branch (179:17): [True: 211k, False: 523k]
  ------------------
  180|   211k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 734k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   734k|#endif
  187|   734k|            }
  188|   734k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   204k|        {
  195|   204k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   204k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 203k, False: 183]
  ------------------
  199|   203k|            {
  200|   203k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   203k|            }
  202|   204k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 166k, False: 37.2k]
  ------------------
  203|   166k|            {
  204|   166k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   166k|            }
  206|   204k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 115k, False: 88.7k]
  ------------------
  207|   115k|            {
  208|   115k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   115k|            }
  210|       |
  211|   204k|            return number_of_argument_required;
  212|   204k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   204k|        {
  221|   204k|            return m_Executor;
  222|   204k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  74.8k|    {
   38|  74.8k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  74.8k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  74.8k|                                         static_cast<underlying_t>(rhs));
   42|  74.8k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  74.8k|    {
   55|  74.8k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  74.8k|        return static_cast<underlying_t>(type & test) != 0;
   58|  74.8k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   643k|    {
  204|   643k|        switch (value)
  205|   643k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   275k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   275k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 275k, False: 368k]
  |  |  |  |  ------------------
  |  |  |  |  208|   275k|        return #name;
  |  |  ------------------
  |  |   16|   275k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  14.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 14.8k, False: 628k]
  |  |  |  |  ------------------
  |  |  |  |  208|  14.8k|        return #name;
  |  |  ------------------
  |  |   17|  14.8k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.26k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.26k|        return #name;
  |  |  ------------------
  |  |   18|  19.7k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  19.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 19.7k, False: 623k]
  |  |  |  |  ------------------
  |  |  |  |  208|  19.7k|        return #name;
  |  |  ------------------
  |  |   19|  19.7k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  8.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.65k, False: 634k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.65k|        return #name;
  |  |  ------------------
  |  |   20|  8.65k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  6.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.43k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.43k|        return #name;
  |  |  ------------------
  |  |   21|  6.43k|                                                                                                   \
  |  |   22|  6.43k|    /* Sub */                                                                                      \
  |  |   23|  6.43k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  6.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.32k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.32k|        return #name;
  |  |  ------------------
  |  |   24|  6.32k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.49k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.49k|        return #name;
  |  |  ------------------
  |  |   25|  5.87k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.87k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.87k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.87k|        return #name;
  |  |  ------------------
  |  |   26|  8.95k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  8.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.95k, False: 634k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.95k|        return #name;
  |  |  ------------------
  |  |   27|  8.95k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  6.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.23k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.23k|        return #name;
  |  |  ------------------
  |  |   28|  6.23k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    171|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 171, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    171|        return #name;
  |  |  ------------------
  |  |   29|    171|                                                                                                   \
  |  |   30|    171|    /* Multiplication */                                                                           \
  |  |   31|  2.42k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.42k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.42k|        return #name;
  |  |  ------------------
  |  |   32|  2.42k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    425|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 425, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    425|        return #name;
  |  |  ------------------
  |  |   33|  1.67k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.67k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.67k|        return #name;
  |  |  ------------------
  |  |   34|  2.43k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.43k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.43k|        return #name;
  |  |  ------------------
  |  |   35|  6.55k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  6.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.55k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.55k|        return #name;
  |  |  ------------------
  |  |   36|  6.55k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    560|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 560, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    560|        return #name;
  |  |  ------------------
  |  |   37|    560|                                                                                                   \
  |  |   38|    560|    /* Division */                                                                                 \
  |  |   39|  1.84k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.84k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.84k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.84k|        return #name;
  |  |  ------------------
  |  |   40|  1.84k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    748|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 748, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|    748|        return #name;
  |  |  ------------------
  |  |   41|  4.48k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.48k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.48k|        return #name;
  |  |  ------------------
  |  |   42|  4.48k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.36k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.36k|        return #name;
  |  |  ------------------
  |  |   43|  1.36k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    193|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 193, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    193|        return #name;
  |  |  ------------------
  |  |   44|  3.98k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.98k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.98k|        return #name;
  |  |  ------------------
  |  |   45|  3.98k|                                                                                                   \
  |  |   46|  3.98k|    /* Shift left (logical) */                                                                     \
  |  |   47|  4.80k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.80k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.80k|        return #name;
  |  |  ------------------
  |  |   48|  4.80k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.96k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.96k|        return #name;
  |  |  ------------------
  |  |   49|  2.96k|                                                                                                   \
  |  |   50|  2.96k|    /* Shift right (logical) */                                                                    \
  |  |   51|  2.96k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 76, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     76|        return #name;
  |  |  ------------------
  |  |   52|  2.13k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.13k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.13k|        return #name;
  |  |  ------------------
  |  |   53|  2.13k|                                                                                                   \
  |  |   54|  2.13k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  3.33k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.33k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.33k|        return #name;
  |  |  ------------------
  |  |   56|  3.51k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.51k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.51k|        return #name;
  |  |  ------------------
  |  |   57|  3.51k|                                                                                                   \
  |  |   58|  3.51k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  3.51k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.26k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.26k|        return #name;
  |  |  ------------------
  |  |   60|  1.26k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    939|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 939, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|    939|        return #name;
  |  |  ------------------
  |  |   61|    939|                                                                                                   \
  |  |   62|    939|    /* Logic */                                                                                    \
  |  |   63|    939|                                                                                                   \
  |  |   64|    939|    /* And */                                                                                      \
  |  |   65|  7.25k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.25k, False: 636k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.25k|        return #name;
  |  |  ------------------
  |  |   66|  7.25k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.36k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.36k|        return #name;
  |  |  ------------------
  |  |   67|  1.36k|                                                                                                   \
  |  |   68|  1.36k|    /* Or */                                                                                       \
  |  |   69|  2.01k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.01k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.01k|        return #name;
  |  |  ------------------
  |  |   70|  2.50k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.50k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.50k|        return #name;
  |  |  ------------------
  |  |   71|  2.50k|                                                                                                   \
  |  |   72|  2.50k|    /* XOR */                                                                                      \
  |  |   73|  4.48k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.48k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.48k|        return #name;
  |  |  ------------------
  |  |   74|  4.48k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 83, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     83|        return #name;
  |  |  ------------------
  |  |   75|     83|                                                                                                   \
  |  |   76|     83|    /* Set conditionals */                                                                         \
  |  |   77|     83|                                                                                                   \
  |  |   78|     83|    /* Less than */                                                                                \
  |  |   79|    433|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    433|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 433, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    433|        return #name;
  |  |  ------------------
  |  |   80|  4.73k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.73k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.73k|        return #name;
  |  |  ------------------
  |  |   81|  4.73k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    148|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 148, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    148|        return #name;
  |  |  ------------------
  |  |   82|  1.67k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.67k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.67k|        return #name;
  |  |  ------------------
  |  |   83|  1.67k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    645|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 645, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|    645|        return #name;
  |  |  ------------------
  |  |   84|  2.73k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.73k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.73k|        return #name;
  |  |  ------------------
  |  |   85|  2.73k|                                                                                                   \
  |  |   86|  2.73k|    /* Greater than */                                                                             \
  |  |   87|  2.73k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    456|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 456, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    456|        return #name;
  |  |  ------------------
  |  |   88|  1.64k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.64k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.64k|        return #name;
  |  |  ------------------
  |  |   89|  1.64k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.29k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.29k|        return #name;
  |  |  ------------------
  |  |   90|  9.32k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  9.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.32k, False: 634k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.32k|        return #name;
  |  |  ------------------
  |  |   91|  12.1k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  12.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12.1k, False: 631k]
  |  |  |  |  ------------------
  |  |  |  |  208|  12.1k|        return #name;
  |  |  ------------------
  |  |   92|  12.1k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.91k, False: 635k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.91k|        return #name;
  |  |  ------------------
  |  |   93|  7.91k|                                                                                                   \
  |  |   94|  7.91k|    /* Less than or equal */                                                                       \
  |  |   95|  7.91k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.29k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.29k|        return #name;
  |  |  ------------------
  |  |   96|  15.0k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  15.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 15.0k, False: 628k]
  |  |  |  |  ------------------
  |  |  |  |  208|  15.0k|        return #name;
  |  |  ------------------
  |  |   97|  15.0k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.45k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.45k|        return #name;
  |  |  ------------------
  |  |   98|  4.44k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.44k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.44k|        return #name;
  |  |  ------------------
  |  |   99|  5.54k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.54k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.54k|        return #name;
  |  |  ------------------
  |  |  100|  5.54k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.85k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.85k|        return #name;
  |  |  ------------------
  |  |  101|  3.85k|                                                                                                   \
  |  |  102|  3.85k|    /* Greater than or equal */                                                                    \
  |  |  103|  3.85k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.39k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.39k|        return #name;
  |  |  ------------------
  |  |  104|  1.39k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    487|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 487, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    487|        return #name;
  |  |  ------------------
  |  |  105|  4.03k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.03k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.03k|        return #name;
  |  |  ------------------
  |  |  106|  8.60k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  8.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.60k, False: 635k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.60k|        return #name;
  |  |  ------------------
  |  |  107|  8.60k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.16k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.16k|        return #name;
  |  |  ------------------
  |  |  108|  5.63k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.63k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.63k|        return #name;
  |  |  ------------------
  |  |  109|  5.63k|                                                                                                   \
  |  |  110|  5.63k|    /* Equal */                                                                                    \
  |  |  111|  5.63k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.97k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.97k|        return #name;
  |  |  ------------------
  |  |  112|  2.97k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  |  |  113|  3.51k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.51k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.51k|        return #name;
  |  |  ------------------
  |  |  114|  4.90k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.90k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.90k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.90k|        return #name;
  |  |  ------------------
  |  |  115|  4.90k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.33k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.33k|        return #name;
  |  |  ------------------
  |  |  116|  2.33k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    159|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 159, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    159|        return #name;
  |  |  ------------------
  |  |  117|    159|                                                                                                   \
  |  |  118|    159|    /* Not equal */                                                                                \
  |  |  119|    161|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    161|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 161, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    161|        return #name;
  |  |  ------------------
  |  |  120|    519|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    519|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 519, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    519|        return #name;
  |  |  ------------------
  |  |  121|  2.65k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.65k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.65k|        return #name;
  |  |  ------------------
  |  |  122|  2.65k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    279|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 279, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    279|        return #name;
  |  |  ------------------
  |  |  123|  1.16k|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.16k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.16k|        return #name;
  |  |  ------------------
  |  |  124|  1.16k|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 69, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     69|        return #name;
  |  |  ------------------
  |  |  125|     69|                                                                                                   \
  |  |  126|     69|    /* Conditional branching */                                                                    \
  |  |  127|    150|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    150|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 150, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    150|        return #name;
  |  |  ------------------
  |  |  128|  5.93k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.93k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.93k|        return #name;
  |  |  ------------------
  |  |  129|  6.05k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  6.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.05k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.05k|        return #name;
  |  |  ------------------
  |  |  130|  29.2k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  29.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 29.2k, False: 614k]
  |  |  |  |  ------------------
  |  |  |  |  208|  29.2k|        return #name;
  |  |  ------------------
  |  |  131|  29.2k|                                                                                                   \
  |  |  132|  29.2k|    /* Unconditional branching */                                                                  \
  |  |  133|  29.2k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     12|        return #name;
  |  |  ------------------
  |  |  134|    573|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    573|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 573, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    573|        return #name;
  |  |  ------------------
  |  |  135|    573|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 101, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    101|        return #name;
  |  |  ------------------
  |  |  136|    101|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 68, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     68|        return #name;
  |  |  ------------------
  |  |  137|     68|                                                                                                   \
  |  |  138|     68|    /* Loading data */                                                                             \
  |  |  139|  1.55k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.55k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.55k|        return #name;
  |  |  ------------------
  |  |  140|  3.54k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.54k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.54k|        return #name;
  |  |  ------------------
  |  |  141|  3.54k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    152|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 152, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    152|        return #name;
  |  |  ------------------
  |  |  142|  1.23k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  |  |  143|  1.23k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 73, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     73|        return #name;
  |  |  ------------------
  |  |  144|     77|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 77, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     77|        return #name;
  |  |  ------------------
  |  |  145|  1.24k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.24k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.24k|        return #name;
  |  |  ------------------
  |  |  146|  1.24k|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 84, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     84|        return #name;
  |  |  ------------------
  |  |  147|  2.76k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.76k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.76k|        return #name;
  |  |  ------------------
  |  |  148|  2.76k|                                                                                                   \
  |  |  149|  2.76k|    /* Storing data */                                                                             \
  |  |  150|  2.76k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 103, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    103|        return #name;
  |  |  ------------------
  |  |  151|  4.19k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.19k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.19k|        return #name;
  |  |  ------------------
  |  |  152|  6.49k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  6.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.49k, False: 637k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.49k|        return #name;
  |  |  ------------------
  |  |  153|  6.49k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.37k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.37k|        return #name;
  |  |  ------------------
  |  |  154|  4.37k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 111, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    111|        return #name;
  |  |  ------------------
  |  |  155|  2.77k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.77k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.77k|        return #name;
  |  |  ------------------
  |  |  156|  2.77k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 81, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     81|        return #name;
  |  |  ------------------
  |  |  157|    227|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    227|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 227, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    227|        return #name;
  |  |  ------------------
  |  |  158|    227|                                                                                                   \
  |  |  159|    227|    /* Moving data */                                                                              \
  |  |  160|  3.56k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.56k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.56k|        return #name;
  |  |  ------------------
  |  |  161|  3.56k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.47k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.47k|        return #name;
  |  |  ------------------
  |  |  162|  2.47k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.73k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.73k|        return #name;
  |  |  ------------------
  |  |  163|  1.73k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 129, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|    129|        return #name;
  |  |  ------------------
  |  |  164|    129|                                                                                                   \
  |  |  165|    129|    /* Converting data */                                                                          \
  |  |  166|  2.66k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.66k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.66k|        return #name;
  |  |  ------------------
  |  |  167|  2.66k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.39k, False: 641k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.39k|        return #name;
  |  |  ------------------
  |  |  168|  3.53k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  3.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.53k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.53k|        return #name;
  |  |  ------------------
  |  |  169|  3.53k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.50k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.50k|        return #name;
  |  |  ------------------
  |  |  170|  1.50k|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 69, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     69|        return #name;
  |  |  ------------------
  |  |  171|  4.48k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  4.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.48k, False: 639k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.48k|        return #name;
  |  |  ------------------
  |  |  172|  4.48k|                                                                                                   \
  |  |  173|  4.48k|    /* Other */                                                                                    \
  |  |  174|  4.48k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.15k, False: 642k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.15k|        return #name;
  |  |  ------------------
  |  |  175|  1.15k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 85, False: 643k]
  |  |  |  |  ------------------
  |  |  |  |  208|     85|        return #name;
  |  |  ------------------
  |  |  176|  3.07k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  3.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.07k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.07k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 643k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   643k|        }
  217|   643k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   105k|    {
   32|   105k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 4.93k, False: 100k]
  ------------------
   33|  4.93k|        {
   34|  4.93k|            return true;
   35|  4.93k|        }
   36|       |
   37|   100k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 578, False: 100k]
  ------------------
   38|    578|        {
   39|    578|            return true;
   40|    578|        }
   41|       |
   42|   100k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 3.87k, False: 96.5k]
  ------------------
   43|  3.87k|        {
   44|  3.87k|            return true;
   45|  3.87k|        }
   46|       |
   47|  96.5k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 96.5k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  96.5k|        return false;
   53|  96.5k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  96.5k|    {
   57|  96.5k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 96.5k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  96.5k|        const char first_char = token.at(0);
   63|       |
   64|  96.5k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 13.0k, False: 83.4k]
  ------------------
   65|  13.0k|        {
   66|  13.0k|            return phi::is_alpha(first_char);
   67|  13.0k|        }
   68|       |
   69|  83.4k|        phi::boolean just_under_scores = (first_char == '_');
   70|  83.4k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 29.9k, False: 53.4k]
  |  Branch (70:15): [True: 53.1k, False: 30.3k]
  |  Branch (70:44): [True: 324, False: 29.9k]
  ------------------
   71|  29.9k|        {
   72|  29.9k|            return false;
   73|  29.9k|        }
   74|       |
   75|   207k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 170k, False: 37.0k]
  ------------------
   76|   170k|        {
   77|   170k|            const char c{token.at(index)};
   78|       |
   79|   170k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 84.7k, False: 86.1k]
  ------------------
   80|  84.7k|            {
   81|  84.7k|                just_under_scores = false;
   82|  84.7k|            }
   83|  86.1k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 69.6k, False: 16.4k]
  ------------------
   84|  69.6k|            {
   85|  69.6k|                continue;
   86|  69.6k|            }
   87|  16.4k|            else
   88|  16.4k|            {
   89|  16.4k|                return false;
   90|  16.4k|            }
   91|   170k|        }
   92|       |
   93|  37.0k|        return !just_under_scores;
   94|  53.4k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.22M|    {
  101|  1.22M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.22M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.22M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 78.9k, False: 1.15M]
  ------------------
  107|  78.9k|        {
  108|  78.9k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 44.8k, False: 34.0k]
  ------------------
  109|  44.8k|            {
  110|  44.8k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  44.8k|            }
  112|       |
  113|  34.0k|            return {};
  114|  78.9k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.15M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 3.97k, False: 1.14M]
  ------------------
  118|  3.97k|        {
  119|  3.97k|            return {};
  120|  3.97k|        }
  121|       |
  122|  1.14M|        std::int32_t number{0};
  123|  1.14M|        phi::boolean is_negative{false};
  124|  1.14M|        phi::boolean starts_with_zero{false};
  125|  1.14M|        phi::boolean parsing_binary{false};
  126|  1.14M|        phi::boolean parsing_octal{false};
  127|  1.14M|        phi::boolean parsing_hexadecimal{false};
  128|  1.14M|        phi::boolean parsed_something{false};
  129|  1.14M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.24M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.23M, False: 11.0k]
  ------------------
  134|  1.23M|        {
  135|  1.23M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.23M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.14M, False: 92.0k]
  ------------------
  139|  1.14M|            {
  140|  1.14M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 4.23k, False: 1.14M]
  ------------------
  141|  4.23k|                {
  142|  4.23k|                    continue;
  143|  4.23k|                }
  144|       |
  145|  1.14M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 4.67k, False: 1.13M]
  ------------------
  146|  4.67k|                {
  147|  4.67k|                    is_negative = true;
  148|  4.67k|                    continue;
  149|  4.67k|                }
  150|       |
  151|  1.13M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 53.4k, False: 1.08M]
  ------------------
  152|  53.4k|                {
  153|  53.4k|                    starts_with_zero = true;
  154|  53.4k|                    continue;
  155|  53.4k|                }
  156|       |
  157|  1.08M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 180, False: 1.08M]
  ------------------
  158|    180|                {
  159|    180|                    return {};
  160|    180|                }
  161|  1.08M|            }
  162|       |
  163|       |            // Second character
  164|  1.17M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 63.7k, False: 1.11M]
  ------------------
  165|  63.7k|            {
  166|  63.7k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 53.4k, False: 10.2k]
  ------------------
  167|  53.4k|                {
  168|       |                    // Binary
  169|  53.4k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 430, False: 53.0k]
  |  Branch (169:37): [True: 2.51k, False: 50.5k]
  ------------------
  170|  2.94k|                    {
  171|  2.94k|                        parsing_binary = true;
  172|  2.94k|                        continue;
  173|  2.94k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  50.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 5.57k, False: 44.9k]
  |  Branch (176:37): [True: 1.99k, False: 42.9k]
  ------------------
  177|  7.56k|                    {
  178|  7.56k|                        parsing_hexadecimal = true;
  179|  7.56k|                        continue;
  180|  7.56k|                    }
  181|       |
  182|       |                    // Octal
  183|  42.9k|                    parsing_octal = true;
  184|  42.9k|                }
  185|  63.7k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.16M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 332, False: 1.16M]
  ------------------
  189|    332|            {
  190|    332|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 100, False: 232]
  ------------------
  191|    100|                {
  192|    100|                    return {};
  193|    100|                }
  194|       |
  195|    232|                parsed_separator = true;
  196|    232|                continue;
  197|    332|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.16M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 4.76k, False: 1.16M]
  |  Branch (200:32): [True: 0, False: 4.76k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|  1.16M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.16M, False: 4.76k]
  |  Branch (205:17): [True: 0, False: 1.16M]
  |  Branch (205:33): [True: 0, False: 1.16M]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|  1.16M|            parsed_separator = false;
  212|  1.16M|            parsed_something = true;
  213|       |
  214|  1.16M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.83k, False: 1.16M]
  ------------------
  215|  2.83k|            {
  216|  2.83k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 2.64k, False: 196]
  ------------------
  217|  2.64k|                {
  218|  2.64k|                    return {};
  219|  2.64k|                }
  220|       |
  221|    196|                number <<= 1;
  222|    196|                number |= (c - '0');
  223|    196|            }
  224|  1.16M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 59.8k, False: 1.10M]
  ------------------
  225|  59.8k|            {
  226|  59.8k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 36.5k, False: 23.3k]
  ------------------
  227|  36.5k|                {
  228|  36.5k|                    return {};
  229|  36.5k|                }
  230|       |
  231|  23.3k|                number <<= 3;
  232|  23.3k|                number |= (c - '0');
  233|  23.3k|            }
  234|  1.10M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 7.74k, False: 1.09M]
  ------------------
  235|  7.74k|            {
  236|  7.74k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 4.16k, False: 3.58k]
  ------------------
  237|  4.16k|                {
  238|  4.16k|                    return {};
  239|  4.16k|                }
  240|       |
  241|  3.58k|                number <<= 4;
  242|  3.58k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.58k|            }
  244|  1.09M|            else
  245|  1.09M|            {
  246|  1.09M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.08M, False: 4.56k]
  ------------------
  247|  1.08M|                {
  248|  1.08M|                    return {};
  249|  1.08M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  4.56k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 3.93k, False: 629]
  |  Branch (252:36): [True: 1.77k, False: 2.15k]
  ------------------
  253|  1.77k|                {
  254|  1.77k|                    return {};
  255|  1.77k|                }
  256|       |
  257|  2.78k|                number *= 10;
  258|  2.78k|                number += (c - '0');
  259|  2.78k|            }
  260|  1.16M|        }
  261|       |
  262|  11.0k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 10.6k, False: 323]
  ------------------
  263|  10.6k|        {
  264|       |            // Check for over/underflow
  265|  10.6k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 745, False: 9.94k]
  |  Branch (265:32): [True: 0, False: 745]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  10.6k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 9.94k, False: 745]
  |  Branch (270:17): [True: 0, False: 10.6k]
  |  Branch (270:33): [True: 0, False: 9.94k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  10.6k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 745, False: 9.94k]
  ------------------
  277|    745|            {
  278|    745|                return static_cast<std::int16_t>(-number);
  279|    745|            }
  280|       |
  281|  9.94k|            return static_cast<std::int16_t>(number);
  282|  10.6k|        }
  283|       |
  284|    323|        return {};
  285|  11.0k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   140k|    {
   96|   140k|        switch (value)
   97|   140k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  36.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  36.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 36.7k, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  100|  36.7k|        return #name;
  |  |  ------------------
  |  |   14|  50.9k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  50.9k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 50.9k, False: 89.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  50.9k|        return #name;
  |  |  ------------------
  |  |   15|  50.9k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    238|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 238, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    238|        return #name;
  |  |  ------------------
  |  |   16|  2.86k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.86k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.86k, False: 137k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.86k|        return #name;
  |  |  ------------------
  |  |   17|  2.86k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|     78|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 78, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|     78|        return #name;
  |  |  ------------------
  |  |   18|    181|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    181|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 181, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    181|        return #name;
  |  |  ------------------
  |  |   19|    688|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    688|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 688, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|    688|        return #name;
  |  |  ------------------
  |  |   20|    688|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    124|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 124, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    124|        return #name;
  |  |  ------------------
  |  |   21|  2.62k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.62k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.62k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.62k|        return #name;
  |  |  ------------------
  |  |   22|  2.62k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    843|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 843, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|    843|        return #name;
  |  |  ------------------
  |  |   23|    843|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    319|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 319, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    319|        return #name;
  |  |  ------------------
  |  |   24|    677|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    677|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 677, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|    677|        return #name;
  |  |  ------------------
  |  |   25|    677|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     14|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 14, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|     14|        return #name;
  |  |  ------------------
  |  |   26|     74|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     74|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 74, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|     74|        return #name;
  |  |  ------------------
  |  |   27|    223|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    223|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 223, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    223|        return #name;
  |  |  ------------------
  |  |   28|    715|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    715|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 715, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|    715|        return #name;
  |  |  ------------------
  |  |   29|  1.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.63k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.63k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.63k|        return #name;
  |  |  ------------------
  |  |   30|  5.77k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.77k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.77k, False: 134k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.77k|        return #name;
  |  |  ------------------
  |  |   31|  5.77k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     67|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 67, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|     67|        return #name;
  |  |  ------------------
  |  |   32|  2.43k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.43k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.43k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.43k|        return #name;
  |  |  ------------------
  |  |   33|  2.43k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    239|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 239, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    239|        return #name;
  |  |  ------------------
  |  |   34|    444|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    444|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 444, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    444|        return #name;
  |  |  ------------------
  |  |   35|  1.37k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.37k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.37k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.37k|        return #name;
  |  |  ------------------
  |  |   36|  1.60k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.60k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.60k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.60k|        return #name;
  |  |  ------------------
  |  |   37|  2.54k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.54k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.54k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.54k|        return #name;
  |  |  ------------------
  |  |   38|  2.54k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.60k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.60k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.60k|        return #name;
  |  |  ------------------
  |  |   39|  1.60k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   40|  3.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.04k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.04k, False: 137k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.04k|        return #name;
  |  |  ------------------
  |  |   41|  3.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.44k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.44k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.44k|        return #name;
  |  |  ------------------
  |  |   42|  1.44k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|    203|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 203, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  100|    203|        return #name;
  |  |  ------------------
  |  |   43|  2.12k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.12k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.12k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.12k|        return #name;
  |  |  ------------------
  |  |   44|  18.6k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  18.6k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 18.6k, False: 121k]
  |  |  |  |  ------------------
  |  |  |  |  100|  18.6k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 140k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   140k|        }
  109|   140k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  29.8k|    {
  131|  29.8k|        switch (value)
  132|  29.8k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  6.56k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  6.56k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.56k, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.56k|        return #name;
  |  |  ------------------
  |  |   48|  6.56k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.10k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.10k, False: 27.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.10k|        return #name;
  |  |  ------------------
  |  |   49|  4.64k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.64k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.64k, False: 25.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.64k|        return #name;
  |  |  ------------------
  |  |   50|  4.64k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|     72|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 72, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     72|        return #name;
  |  |  ------------------
  |  |   51|     72|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 23, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     23|        return #name;
  |  |  ------------------
  |  |   52|     32|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     32|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 32, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     32|        return #name;
  |  |  ------------------
  |  |   53|     32|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   54|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   55|    300|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    300|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 300, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    300|        return #name;
  |  |  ------------------
  |  |   56|    300|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     30|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 30, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     30|        return #name;
  |  |  ------------------
  |  |   57|  4.22k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.22k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.22k, False: 25.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.22k|        return #name;
  |  |  ------------------
  |  |   58|  4.22k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|     36|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 36, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     36|        return #name;
  |  |  ------------------
  |  |   59|    332|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|    332|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 332, False: 29.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    332|        return #name;
  |  |  ------------------
  |  |   60|    332|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   61|     20|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 20, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     20|        return #name;
  |  |  ------------------
  |  |   62|     79|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     79|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 79, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     79|        return #name;
  |  |  ------------------
  |  |   63|     79|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|     33|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 33, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     33|        return #name;
  |  |  ------------------
  |  |   64|     33|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   65|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   66|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   67|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   68|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   69|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|  1.54k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.54k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.54k, False: 28.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.54k|        return #name;
  |  |  ------------------
  |  |   71|  1.54k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 23, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     23|        return #name;
  |  |  ------------------
  |  |   73|     46|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|     46|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 46, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     46|        return #name;
  |  |  ------------------
  |  |   74|     70|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     70|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 70, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     70|        return #name;
  |  |  ------------------
  |  |   75|     70|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   76|    503|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|    503|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 503, False: 29.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    503|        return #name;
  |  |  ------------------
  |  |   77|  8.07k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  8.07k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8.07k, False: 21.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  8.07k|        return #name;
  |  |  ------------------
  |  |   78|  8.07k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|  1.00k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.00k, False: 28.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.00k|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 29.8k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  29.8k|        }
  144|  29.8k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  34.8k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  34.8k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 830k, False: 0]
  ------------------
   64|   830k|            {
   65|   830k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 34.8k, False: 795k]
  ------------------
   66|  34.8k|                {
   67|  34.8k|                    return &token;
   68|  34.8k|                }
   69|   830k|            }
   70|       |
   71|      0|            return nullptr;
   72|  34.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.58M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.58M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.58M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.59M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.59M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.59M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   193k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   193k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   193k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   204k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  34.9k|    {
   24|  34.9k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  34.9k|        switch (argument_number.unsafe())
   27|  34.9k|        {
   28|  25.7k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 25.7k, False: 9.18k]
  ------------------
   29|  25.7k|                m_Arg1 = argument;
   30|  25.7k|                break;
   31|  7.37k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 7.37k, False: 27.6k]
  ------------------
   32|  7.37k|                m_Arg2 = argument;
   33|  7.37k|                break;
   34|  1.80k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 1.80k, False: 33.1k]
  ------------------
   35|  1.80k|                m_Arg3 = argument;
   36|  1.80k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 34.9k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  34.9k|#endif
   41|  34.9k|        }
   42|  34.9k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   647k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  20.6k|    {
  174|  20.6k|        InstructionArgument arg;
  175|  20.6k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  20.6k|        arg.register_int.register_id = id;
  177|  20.6k|        return arg;
  178|  20.6k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    460|    {
  183|    460|        InstructionArgument arg;
  184|    460|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    460|        arg.register_float.register_id = id;
  186|    460|        return arg;
  187|    460|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  4.95k|    {
  192|  4.95k|        InstructionArgument arg;
  193|  4.95k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  4.95k|        arg.immediate_value.signed_value = value;
  195|  4.95k|        return arg;
  196|  4.95k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  8.91k|    {
  211|  8.91k|        InstructionArgument arg;
  212|  8.91k|        arg.m_Type           = ArgumentType::Label;
  213|  8.91k|        arg.label.label_name = label_name;
  214|  8.91k|        return arg;
  215|  8.91k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   204k|    {
  453|   204k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   204k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  1.08M|    {
   24|  1.08M|        switch (token.length())
   25|  1.08M|        {
   26|       |            // 1 character OpCodes
   27|  47.2k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 47.2k, False: 1.04M]
  ------------------
   28|  47.2k|                char c1 = token[0];
   29|  47.2k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 8.45k, False: 38.7k]
  ------------------
   30|  8.45k|                {
   31|  8.45k|                    return OpCode::J;
   32|  8.45k|                }
   33|  38.7k|                break;
   34|  47.2k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   130k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 130k, False: 959k]
  ------------------
   38|   130k|                char c1 = token[0];
   39|   130k|                char c2 = token[1];
   40|       |
   41|   130k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 61.4k, False: 68.6k]
  ------------------
   42|   130k|                {
   43|    646|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 646, False: 129k]
  ------------------
   44|  2.29k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 1.64k, False: 128k]
  ------------------
   45|  2.29k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 770, False: 1.52k]
  ------------------
   46|    770|                        {
   47|    770|                            return OpCode::JR;
   48|    770|                        }
   49|  1.52k|                        break;
   50|       |
   51|  8.51k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 8.51k, False: 121k]
  ------------------
   52|  20.0k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 11.5k, False: 118k]
  ------------------
   53|  20.0k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 299, False: 19.7k]
  ------------------
   54|  20.0k|                        {
   55|  3.54k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 3.54k, False: 16.5k]
  ------------------
   56|  6.51k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 2.96k, False: 17.0k]
  ------------------
   57|  6.51k|                                return OpCode::LB;
   58|  2.76k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 2.76k, False: 17.2k]
  ------------------
   59|  4.06k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 1.29k, False: 18.7k]
  ------------------
   60|  4.06k|                                return OpCode::LD;
   61|     84|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 84, False: 19.9k]
  ------------------
   62|    182|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 98, False: 19.9k]
  ------------------
   63|    182|                                return OpCode::LF;
   64|  1.23k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.23k, False: 18.8k]
  ------------------
   65|  1.90k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 677, False: 19.3k]
  ------------------
   66|  1.90k|                                return OpCode::LH;
   67|     77|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 77, False: 19.9k]
  ------------------
   68|  7.08k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 7.00k, False: 13.0k]
  ------------------
   69|  7.08k|                                return OpCode::LW;
   70|  20.0k|                        }
   71|    299|                        break;
   72|  10.6k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 10.6k, False: 119k]
  ------------------
   73|  10.9k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 293, False: 129k]
  ------------------
   74|  10.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 5.10k, False: 5.87k]
  ------------------
   75|  5.10k|                        {
   76|  5.10k|                            return OpCode::OR;
   77|  5.10k|                        }
   78|  5.87k|                        break;
   79|  15.8k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 15.8k, False: 114k]
  ------------------
   80|  35.3k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 19.5k, False: 110k]
  ------------------
   81|  35.3k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 19.4k, False: 15.8k]
  ------------------
   82|  35.3k|                        {
   83|    102|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 102, False: 35.2k]
  ------------------
   84|    176|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 74, False: 35.2k]
  ------------------
   85|    176|                                return OpCode::SB;
   86|    227|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 227, False: 35.1k]
  ------------------
   87|  3.14k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 2.91k, False: 32.4k]
  ------------------
   88|  3.14k|                                return OpCode::SD;
   89|     81|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 81, False: 35.2k]
  ------------------
   90|  4.77k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 4.69k, False: 30.6k]
  ------------------
   91|  4.77k|                                return OpCode::SF;
   92|  6.23k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 6.23k, False: 29.1k]
  ------------------
   93|  7.14k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 909, False: 34.4k]
  ------------------
   94|  7.14k|                                return OpCode::SH;
   95|    514|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 514, False: 34.8k]
  ------------------
   96|    625|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 111, False: 35.2k]
  ------------------
   97|    625|                                return OpCode::SW;
   98|  35.3k|                        }
   99|  19.4k|                        break;
  100|   130k|                }
  101|  88.6k|                break;
  102|   130k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   499k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 499k, False: 590k]
  ------------------
  106|   499k|                char c1 = token[0];
  107|   499k|                char c2 = token[1];
  108|   499k|                char c3 = token[2];
  109|       |
  110|   499k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 39.7k, False: 459k]
  ------------------
  111|   499k|                {
  112|   273k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 273k, False: 226k]
  ------------------
  113|   280k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 6.75k, False: 492k]
  ------------------
  114|   280k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 265k, False: 14.3k]
  |  Branch (114:29): [True: 265k, False: 14.4k]
  |  Branch (114:45): [True: 265k, False: 70]
  ------------------
  115|   265k|                        {
  116|   265k|                            return OpCode::ADD;
  117|   265k|                        }
  118|  14.4k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 12.8k, False: 1.55k]
  |  Branch (118:34): [True: 10.7k, False: 3.71k]
  |  Branch (118:50): [True: 10.7k, False: 2.15k]
  ------------------
  119|  10.7k|                        {
  120|  10.7k|                            return OpCode::AND;
  121|  10.7k|                        }
  122|  3.71k|                        break;
  123|       |
  124|  3.71k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 2.51k, False: 497k]
  ------------------
  125|  2.97k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 458, False: 499k]
  ------------------
  126|  2.97k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 2.48k, False: 494]
  |  Branch (126:29): [True: 2.28k, False: 689]
  |  Branch (126:45): [True: 2.28k, False: 195]
  ------------------
  127|  2.28k|                        {
  128|  2.28k|                            return OpCode::DIV;
  129|  2.28k|                        }
  130|    689|                        break;
  131|       |
  132|  5.43k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 5.43k, False: 494k]
  ------------------
  133|  5.93k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 501, False: 499k]
  ------------------
  134|  5.93k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 5.60k, False: 337]
  ------------------
  135|  5.60k|                        {
  136|  5.60k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 865, False: 4.73k]
  ------------------
  137|    865|                            {
  138|    865|                                return OpCode::EQD;
  139|    865|                            }
  140|  4.73k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 4.40k, False: 327]
  ------------------
  141|  4.40k|                            {
  142|  4.40k|                                return OpCode::EQF;
  143|  4.40k|                            }
  144|  5.60k|                        }
  145|    664|                        break;
  146|       |
  147|  29.2k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 29.2k, False: 470k]
  ------------------
  148|  33.2k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 4.07k, False: 495k]
  ------------------
  149|  33.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 10.6k, False: 22.6k]
  ------------------
  150|  10.6k|                        {
  151|  10.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 6.17k, False: 4.42k]
  ------------------
  152|  6.17k|                            {
  153|  6.17k|                                return OpCode::GED;
  154|  6.17k|                            }
  155|  4.42k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 4.36k, False: 66]
  ------------------
  156|  4.36k|                            {
  157|  4.36k|                                return OpCode::GEF;
  158|  4.36k|                            }
  159|  10.6k|                        }
  160|  22.6k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 22.4k, False: 282]
  ------------------
  161|  22.4k|                        {
  162|  22.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 9.27k, False: 13.1k]
  ------------------
  163|  9.27k|                            {
  164|  9.27k|                                return OpCode::GTD;
  165|  9.27k|                            }
  166|  13.1k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 12.2k, False: 928]
  ------------------
  167|  12.2k|                            {
  168|  12.2k|                                return OpCode::GTF;
  169|  12.2k|                            }
  170|  13.1k|                        }
  171|  1.27k|                        break;
  172|       |
  173|  1.39k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 1.39k, False: 498k]
  ------------------
  174|  2.31k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 922, False: 498k]
  ------------------
  175|  2.31k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.80k, False: 511]
  |  Branch (175:29): [True: 1.14k, False: 1.17k]
  |  Branch (175:45): [True: 1.14k, False: 664]
  ------------------
  176|  1.14k|                        {
  177|  1.14k|                            return OpCode::JAL;
  178|  1.14k|                        }
  179|  1.17k|                        break;
  180|       |
  181|  16.2k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 16.2k, False: 483k]
  ------------------
  182|  27.4k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 11.1k, False: 488k]
  ------------------
  183|  27.4k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 503, False: 26.9k]
  ------------------
  184|  27.4k|                        {
  185|    152|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 152, False: 27.2k]
  ------------------
  186|  4.38k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 4.23k, False: 23.1k]
  ------------------
  187|  4.38k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 218, False: 4.16k]
  ------------------
  188|    218|                                {
  189|    218|                                    return OpCode::LBU;
  190|    218|                                }
  191|  4.16k|                                break;
  192|       |
  193|  9.36k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 9.36k, False: 18.0k]
  ------------------
  194|  10.4k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.07k, False: 26.3k]
  ------------------
  195|  10.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 3.90k, False: 6.53k]
  ------------------
  196|  3.90k|                                {
  197|  3.90k|                                    return OpCode::LED;
  198|  3.90k|                                }
  199|  6.53k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 5.64k, False: 890]
  ------------------
  200|  5.64k|                                {
  201|  5.64k|                                    return OpCode::LEF;
  202|  5.64k|                                }
  203|    890|                                break;
  204|       |
  205|  1.65k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.65k, False: 25.7k]
  ------------------
  206|  2.66k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.00k, False: 26.4k]
  ------------------
  207|  2.66k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.62k, False: 1.03k]
  ------------------
  208|  1.62k|                                {
  209|  1.62k|                                    return OpCode::LHI;
  210|  1.62k|                                }
  211|  1.03k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.00k, False: 34]
  ------------------
  212|  1.00k|                                {
  213|  1.00k|                                    return OpCode::LHU;
  214|  1.00k|                                }
  215|     34|                                break;
  216|       |
  217|  3.37k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 3.37k, False: 24.0k]
  ------------------
  218|  4.88k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 1.51k, False: 25.9k]
  ------------------
  219|  4.88k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 3.51k, False: 1.37k]
  ------------------
  220|  3.51k|                                {
  221|  3.51k|                                    return OpCode::LTD;
  222|  3.51k|                                }
  223|  1.37k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.20k, False: 162]
  ------------------
  224|  1.20k|                                {
  225|  1.20k|                                    return OpCode::LTF;
  226|  1.20k|                                }
  227|    162|                                break;
  228|       |
  229|  1.25k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.25k, False: 26.1k]
  ------------------
  230|  4.55k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 3.29k, False: 24.1k]
  ------------------
  231|  4.55k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 2.47k, False: 2.07k]
  ------------------
  232|  2.47k|                                {
  233|  2.47k|                                    return OpCode::LWU;
  234|  2.47k|                                }
  235|  2.07k|                                break;
  236|  27.4k|                        }
  237|  7.82k|                        break;
  238|       |
  239|  11.9k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 11.9k, False: 487k]
  ------------------
  240|  20.7k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 8.82k, False: 490k]
  ------------------
  241|  20.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 9.10k, False: 11.6k]
  ------------------
  242|  9.10k|                        {
  243|  9.10k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 278, False: 8.82k]
  ------------------
  244|    278|                            {
  245|    278|                                return OpCode::NED;
  246|    278|                            }
  247|  8.82k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 1.30k, False: 7.52k]
  ------------------
  248|  1.30k|                            {
  249|  1.30k|                                return OpCode::NEF;
  250|  1.30k|                            }
  251|  9.10k|                        }
  252|  11.6k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 6.14k, False: 5.53k]
  |  Branch (252:34): [True: 3.13k, False: 8.54k]
  |  Branch (252:50): [True: 3.13k, False: 3.00k]
  ------------------
  253|  3.13k|                        {
  254|  3.13k|                            return OpCode::NOP;
  255|  3.13k|                        }
  256|       |
  257|  16.0k|                        break;
  258|       |
  259|  16.0k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 2.67k, False: 497k]
  ------------------
  260|  2.88k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 210, False: 499k]
  ------------------
  261|  2.88k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 2.62k, False: 252]
  |  Branch (261:29): [True: 2.58k, False: 292]
  |  Branch (261:45): [True: 2.58k, False: 40]
  ------------------
  262|  2.58k|                        {
  263|  2.58k|                            return OpCode::ORI;
  264|  2.58k|                        }
  265|    292|                        break;
  266|       |
  267|  57.2k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 57.2k, False: 442k]
  ------------------
  268|  66.8k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 9.59k, False: 490k]
  ------------------
  269|  66.8k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 692, False: 66.1k]
  ------------------
  270|  66.8k|                        {
  271|  4.19k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 4.19k, False: 62.6k]
  ------------------
  272|  4.60k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 405, False: 66.4k]
  ------------------
  273|  4.60k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 4.50k, False: 99]
  ------------------
  274|  4.50k|                                {
  275|  4.50k|                                    return OpCode::SBU;
  276|  4.50k|                                }
  277|     99|                                break;
  278|       |
  279|  2.97k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 2.97k, False: 63.8k]
  ------------------
  280|  9.32k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 6.34k, False: 60.5k]
  ------------------
  281|  9.32k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 7.36k, False: 1.95k]
  ------------------
  282|  7.36k|                                {
  283|  7.36k|                                    return OpCode::SEQ;
  284|  7.36k|                                }
  285|  1.95k|                                break;
  286|       |
  287|  1.95k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 1.81k, False: 65.0k]
  ------------------
  288|  6.19k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 4.37k, False: 62.4k]
  ------------------
  289|  6.19k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.33k, False: 1.85k]
  ------------------
  290|  4.33k|                                {
  291|  4.33k|                                    return OpCode::SGE;
  292|  4.33k|                                }
  293|  1.85k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 748, False: 1.10k]
  ------------------
  294|    748|                                {
  295|    748|                                    return OpCode::SGT;
  296|    748|                                }
  297|  1.10k|                                break;
  298|       |
  299|  4.37k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 4.37k, False: 62.4k]
  ------------------
  300|  4.92k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 545, False: 66.2k]
  ------------------
  301|  4.92k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.55k, False: 370]
  ------------------
  302|  4.55k|                                {
  303|  4.55k|                                    return OpCode::SHU;
  304|  4.55k|                                }
  305|    370|                                break;
  306|       |
  307|  11.9k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 11.9k, False: 54.8k]
  ------------------
  308|  14.4k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 2.46k, False: 64.3k]
  ------------------
  309|  14.4k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 193, False: 14.2k]
  ------------------
  310|  14.4k|                                {
  311|  3.31k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 3.31k, False: 11.0k]
  ------------------
  312|  3.43k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 121, False: 14.2k]
  ------------------
  313|  3.43k|                                        return OpCode::SLA;
  314|       |
  315|  3.29k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 3.29k, False: 11.1k]
  ------------------
  316|  3.36k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 71, False: 14.3k]
  ------------------
  317|  3.36k|                                        return OpCode::SLE;
  318|       |
  319|  4.80k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 4.80k, False: 9.60k]
  ------------------
  320|  6.20k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 1.39k, False: 13.0k]
  ------------------
  321|  6.20k|                                        return OpCode::SLL;
  322|       |
  323|    431|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 431, False: 13.9k]
  ------------------
  324|  1.21k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 781, False: 13.6k]
  ------------------
  325|  1.21k|                                        return OpCode::SLT;
  326|  14.4k|                                }
  327|    193|                                break;
  328|       |
  329|    193|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 163, False: 66.6k]
  ------------------
  330|  3.57k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 3.41k, False: 63.4k]
  ------------------
  331|  3.57k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 3.34k, False: 230]
  ------------------
  332|  3.34k|                                {
  333|  3.34k|                                    return OpCode::SNE;
  334|  3.34k|                                }
  335|    230|                                break;
  336|       |
  337|  4.20k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 4.20k, False: 62.6k]
  ------------------
  338|  8.39k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 4.18k, False: 62.6k]
  ------------------
  339|  8.39k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 2.02k, False: 6.36k]
  ------------------
  340|  2.02k|                                {
  341|  2.02k|                                    return OpCode::SRA;
  342|  2.02k|                                }
  343|  6.36k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 3.18k, False: 3.18k]
  ------------------
  344|  3.18k|                                {
  345|  3.18k|                                    return OpCode::SRL;
  346|  3.18k|                                }
  347|  3.18k|                                break;
  348|       |
  349|  4.78k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 4.78k, False: 62.0k]
  ------------------
  350|  6.43k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 1.65k, False: 65.1k]
  ------------------
  351|  6.43k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 5.04k, False: 1.39k]
  ------------------
  352|  5.04k|                                {
  353|  5.04k|                                    return OpCode::SUB;
  354|  5.04k|                                }
  355|  1.39k|                                break;
  356|       |
  357|  6.75k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 6.75k, False: 60.0k]
  ------------------
  358|  8.30k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 1.54k, False: 65.2k]
  ------------------
  359|  8.30k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 6.76k, False: 1.53k]
  ------------------
  360|  6.76k|                                {
  361|  6.76k|                                    return OpCode::SWU;
  362|  6.76k|                                }
  363|  1.53k|                                break;
  364|  66.8k|                        }
  365|       |
  366|  13.2k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.50k, False: 497k]
  ------------------
  367|  28.0k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 14.7k, False: 484k]
  ------------------
  368|  28.0k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 3.03k, False: 25.0k]
  |  Branch (368:29): [True: 2.78k, False: 25.2k]
  |  Branch (368:45): [True: 2.78k, False: 247]
  ------------------
  369|  2.78k|                        {
  370|  2.78k|                            return OpCode::XOR;
  371|  2.78k|                        }
  372|  25.2k|                        break;
  373|   499k|                }
  374|  96.7k|                break;
  375|   499k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   270k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 270k, False: 819k]
  ------------------
  379|   270k|                char c1 = token[0];
  380|   270k|                char c2 = token[1];
  381|   270k|                char c3 = token[2];
  382|   270k|                char c4 = token[3];
  383|       |
  384|   270k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 31.2k, False: 239k]
  ------------------
  385|   270k|                {
  386|  37.0k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 37.0k, False: 233k]
  ------------------
  387|  42.0k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 4.95k, False: 265k]
  ------------------
  388|  42.0k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 187, False: 41.8k]
  ------------------
  389|  42.0k|                        {
  390|  39.6k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 39.6k, False: 2.38k]
  ------------------
  391|  39.8k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 250, False: 41.7k]
  ------------------
  392|  39.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 35.1k, False: 4.76k]
  ------------------
  393|  35.1k|                                {
  394|  35.1k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 146, False: 34.9k]
  ------------------
  395|  35.1k|                                    {
  396|  6.17k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 6.17k, False: 28.9k]
  ------------------
  397|  6.25k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 74, False: 35.0k]
  ------------------
  398|  6.25k|                                            return OpCode::ADDD;
  399|       |
  400|  8.64k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 8.64k, False: 26.4k]
  ------------------
  401|  8.71k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 66, False: 35.0k]
  ------------------
  402|  8.71k|                                            return OpCode::ADDF;
  403|       |
  404|  14.5k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 14.5k, False: 20.5k]
  ------------------
  405|  14.6k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 35.0k]
  ------------------
  406|  14.6k|                                            return OpCode::ADDI;
  407|       |
  408|  4.96k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 4.96k, False: 30.1k]
  ------------------
  409|  5.38k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 418, False: 34.6k]
  ------------------
  410|  5.38k|                                            return OpCode::ADDU;
  411|  35.1k|                                    }
  412|  35.1k|                                }
  413|  4.91k|                                break;
  414|       |
  415|  4.91k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.46k, False: 40.5k]
  ------------------
  416|  1.94k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 479, False: 41.5k]
  ------------------
  417|  1.94k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.84k, False: 99]
  |  Branch (417:37): [True: 1.46k, False: 477]
  |  Branch (417:53): [True: 1.46k, False: 378]
  ------------------
  418|  1.46k|                                {
  419|  1.46k|                                    return OpCode::ANDI;
  420|  1.46k|                                }
  421|       |
  422|    477|                                break;
  423|  42.0k|                        }
  424|  5.57k|                        break;
  425|       |
  426|  38.5k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 38.5k, False: 231k]
  ------------------
  427|  43.7k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 5.18k, False: 265k]
  ------------------
  428|  43.7k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 990, False: 42.7k]
  ------------------
  429|  43.7k|                        {
  430|    282|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 282, False: 43.4k]
  ------------------
  431|  3.86k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 3.58k, False: 40.1k]
  ------------------
  432|  3.86k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.32k, False: 1.54k]
  |  Branch (432:37): [True: 2.23k, False: 1.63k]
  |  Branch (432:53): [True: 2.23k, False: 91]
  ------------------
  433|  2.23k|                                {
  434|  2.23k|                                    return OpCode::BEQZ;
  435|  2.23k|                                }
  436|  1.63k|                                break;
  437|       |
  438|  31.9k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 31.9k, False: 11.8k]
  ------------------
  439|  32.4k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 471, False: 43.2k]
  ------------------
  440|  32.4k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 32.2k, False: 208]
  ------------------
  441|  32.2k|                                {
  442|  32.2k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 26.1k, False: 6.06k]
  ------------------
  443|  26.1k|                                    {
  444|  26.1k|                                        return OpCode::BFPF;
  445|  26.1k|                                    }
  446|  6.06k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 5.96k, False: 98]
  ------------------
  447|  5.96k|                                    {
  448|  5.96k|                                        return OpCode::BFPT;
  449|  5.96k|                                    }
  450|  32.2k|                                }
  451|    306|                                break;
  452|       |
  453|  6.05k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 6.05k, False: 37.7k]
  ------------------
  454|  6.47k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 422, False: 43.3k]
  ------------------
  455|  6.47k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 6.31k, False: 162]
  |  Branch (455:37): [True: 6.24k, False: 228]
  |  Branch (455:53): [True: 6.24k, False: 66]
  ------------------
  456|  6.24k|                                {
  457|  6.24k|                                    return OpCode::BNEZ;
  458|  6.24k|                                }
  459|  43.7k|                        }
  460|  3.16k|                        break;
  461|       |
  462|  11.3k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 11.3k, False: 259k]
  ------------------
  463|  11.8k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 461, False: 270k]
  ------------------
  464|  11.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 11.3k, False: 477]
  |  Branch (464:29): [True: 11.2k, False: 592]
  |  Branch (464:45): [True: 11.2k, False: 115]
  ------------------
  465|  11.2k|                        {
  466|  11.2k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 374, False: 10.8k]
  ------------------
  467|  11.2k|                            {
  468|  3.98k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 3.98k, False: 7.22k]
  ------------------
  469|  4.05k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 11.1k]
  ------------------
  470|  4.05k|                                    return OpCode::DIVD;
  471|       |
  472|    193|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 193, False: 11.0k]
  ------------------
  473|    480|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 287, False: 10.9k]
  ------------------
  474|    480|                                    return OpCode::DIVF;
  475|       |
  476|    747|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 747, False: 10.4k]
  ------------------
  477|    813|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 66, False: 11.1k]
  ------------------
  478|    813|                                    return OpCode::DIVI;
  479|       |
  480|  4.48k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 4.48k, False: 6.72k]
  ------------------
  481|  5.49k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.00k, False: 10.2k]
  ------------------
  482|  5.49k|                                    return OpCode::DIVU;
  483|  11.2k|                            }
  484|  11.2k|                        }
  485|    966|                        break;
  486|       |
  487|  1.86k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.86k, False: 268k]
  ------------------
  488|  6.35k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 4.49k, False: 265k]
  ------------------
  489|  6.35k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 4.29k, False: 2.05k]
  |  Branch (489:29): [True: 151, False: 6.20k]
  |  Branch (489:45): [True: 4.17k, False: 121]
  |  Branch (489:61): [True: 151, False: 4.02k]
  ------------------
  490|    151|                        {
  491|    151|                            return OpCode::HALT;
  492|    151|                        }
  493|  6.20k|                        break;
  494|       |
  495|  6.20k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 417, False: 270k]
  ------------------
  496|  7.88k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 7.46k, False: 263k]
  ------------------
  497|  7.88k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 5.86k, False: 2.01k]
  |  Branch (497:29): [True: 134, False: 7.75k]
  |  Branch (497:45): [True: 232, False: 5.63k]
  |  Branch (497:61): [True: 134, False: 98]
  ------------------
  498|    134|                        {
  499|    134|                            return OpCode::JALR;
  500|    134|                        }
  501|  7.75k|                        break;
  502|       |
  503|  9.71k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 9.71k, False: 260k]
  ------------------
  504|  13.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 4.13k, False: 266k]
  ------------------
  505|  13.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 6.50k, False: 7.34k]
  |  Branch (505:29): [True: 6.44k, False: 7.41k]
  |  Branch (505:45): [True: 6.44k, False: 66]
  ------------------
  506|  6.44k|                        {
  507|  6.44k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 3.61k, False: 2.82k]
  ------------------
  508|  3.61k|                            {
  509|  3.61k|                                return OpCode::MOVD;
  510|  3.61k|                            }
  511|  2.82k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 2.63k, False: 187]
  ------------------
  512|  2.63k|                            {
  513|  2.63k|                                return OpCode::MOVF;
  514|  2.63k|                            }
  515|  6.44k|                        }
  516|  7.41k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 7.33k, False: 79]
  |  Branch (516:34): [True: 2.48k, False: 4.92k]
  |  Branch (516:50): [True: 5.29k, False: 2.03k]
  |  Branch (516:66): [True: 2.48k, False: 2.81k]
  ------------------
  517|  2.48k|                        {
  518|  2.48k|                            return OpCode::MULT;
  519|  2.48k|                        }
  520|  5.11k|                        break;
  521|       |
  522|  96.6k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 96.6k, False: 173k]
  ------------------
  523|   107k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 10.5k, False: 259k]
  ------------------
  524|   107k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 443, False: 106k]
  ------------------
  525|   107k|                        {
  526|  4.50k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 4.50k, False: 102k]
  ------------------
  527|  12.3k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 7.86k, False: 99.3k]
  ------------------
  528|  12.3k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 10.2k, False: 2.14k]
  ------------------
  529|  10.2k|                                {
  530|  10.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 6.64k, False: 3.57k]
  ------------------
  531|  6.64k|                                    {
  532|  6.64k|                                        return OpCode::SEQI;
  533|  6.64k|                                    }
  534|  3.57k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 3.41k, False: 159]
  ------------------
  535|  3.41k|                                    {
  536|  3.41k|                                        return OpCode::SEQU;
  537|  3.41k|                                    }
  538|  10.2k|                                }
  539|  2.30k|                                break;
  540|       |
  541|  7.45k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 7.45k, False: 99.7k]
  ------------------
  542|  10.5k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 3.14k, False: 104k]
  ------------------
  543|  10.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 5.34k, False: 5.24k]
  ------------------
  544|  5.34k|                                {
  545|  5.34k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 553, False: 4.79k]
  ------------------
  546|    553|                                    {
  547|    553|                                        return OpCode::SGEI;
  548|    553|                                    }
  549|  4.79k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 4.08k, False: 706]
  ------------------
  550|  4.08k|                                    {
  551|  4.08k|                                        return OpCode::SGEU;
  552|  4.08k|                                    }
  553|  5.34k|                                }
  554|  5.24k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 4.88k, False: 365]
  ------------------
  555|  4.88k|                                {
  556|  4.88k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 2.01k, False: 2.86k]
  ------------------
  557|  2.01k|                                    {
  558|  2.01k|                                        return OpCode::SGTI;
  559|  2.01k|                                    }
  560|  2.86k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.58k, False: 1.28k]
  ------------------
  561|  1.58k|                                    {
  562|  1.58k|                                        return OpCode::SGTU;
  563|  1.58k|                                    }
  564|  4.88k|                                }
  565|  2.35k|                                break;
  566|       |
  567|  28.9k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 28.9k, False: 78.1k]
  ------------------
  568|  30.4k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 1.46k, False: 105k]
  ------------------
  569|  30.4k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 66, False: 30.3k]
  ------------------
  570|  30.4k|                                {
  571|  3.53k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 3.53k, False: 26.9k]
  ------------------
  572|  3.77k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 241, False: 30.2k]
  ------------------
  573|  3.77k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 3.58k, False: 194]
  ------------------
  574|  3.58k|                                        {
  575|  3.58k|                                            return OpCode::SLAI;
  576|  3.58k|                                        }
  577|    194|                                        break;
  578|       |
  579|  17.5k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 17.5k, False: 12.9k]
  ------------------
  580|  18.0k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 524, False: 29.9k]
  ------------------
  581|  18.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 15.0k, False: 2.97k]
  ------------------
  582|  15.0k|                                        {
  583|  15.0k|                                            return OpCode::SLEI;
  584|  15.0k|                                        }
  585|  2.97k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 2.80k, False: 172]
  ------------------
  586|  2.80k|                                        {
  587|  2.80k|                                            return OpCode::SLEU;
  588|  2.80k|                                        }
  589|    172|                                        break;
  590|       |
  591|  2.96k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 2.96k, False: 27.5k]
  ------------------
  592|  3.44k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 484, False: 29.9k]
  ------------------
  593|  3.44k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 3.07k, False: 370]
  ------------------
  594|  3.07k|                                        {
  595|  3.07k|                                            return OpCode::SLLI;
  596|  3.07k|                                        }
  597|    370|                                        break;
  598|       |
  599|  4.92k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 4.92k, False: 25.5k]
  ------------------
  600|  5.14k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 221, False: 30.2k]
  ------------------
  601|  5.14k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 4.78k, False: 358]
  ------------------
  602|  4.78k|                                        {
  603|  4.78k|                                            return OpCode::SLTI;
  604|  4.78k|                                        }
  605|    358|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 292, False: 66]
  ------------------
  606|    292|                                        {
  607|    292|                                            return OpCode::SLTU;
  608|    292|                                        }
  609|     66|                                        break;
  610|  30.4k|                                }
  611|       |
  612|  4.04k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 3.17k, False: 104k]
  ------------------
  613|  21.8k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 17.7k, False: 89.3k]
  ------------------
  614|  21.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 20.9k, False: 839]
  ------------------
  615|  20.9k|                                {
  616|  20.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 649, False: 20.3k]
  ------------------
  617|    649|                                    {
  618|    649|                                        return OpCode::SNEI;
  619|    649|                                    }
  620|  20.3k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 19.9k, False: 360]
  ------------------
  621|  19.9k|                                    {
  622|  19.9k|                                        return OpCode::SNEU;
  623|  19.9k|                                    }
  624|  20.9k|                                }
  625|  1.19k|                                break;
  626|       |
  627|  3.46k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 3.46k, False: 103k]
  ------------------
  628|  4.54k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 1.08k, False: 106k]
  ------------------
  629|  4.54k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 1.73k, False: 2.81k]
  |  Branch (629:37): [True: 1.01k, False: 3.53k]
  |  Branch (629:53): [True: 1.01k, False: 723]
  ------------------
  630|  1.01k|                                {
  631|  1.01k|                                    return OpCode::SRAI;
  632|  1.01k|                                }
  633|  3.53k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 2.80k, False: 730]
  |  Branch (633:42): [True: 2.21k, False: 1.32k]
  |  Branch (633:58): [True: 2.21k, False: 592]
  ------------------
  634|  2.21k|                                {
  635|  2.21k|                                    return OpCode::SRLI;
  636|  2.21k|                                }
  637|  1.32k|                                break;
  638|       |
  639|  17.5k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 17.5k, False: 89.6k]
  ------------------
  640|  27.8k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 10.2k, False: 96.9k]
  ------------------
  641|  27.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 26.1k, False: 1.66k]
  ------------------
  642|  26.1k|                                {
  643|  26.1k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 6.90k, False: 19.2k]
  ------------------
  644|  26.1k|                                    {
  645|    171|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 171, False: 25.9k]
  ------------------
  646|    269|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 98, False: 26.0k]
  ------------------
  647|    269|                                            return OpCode::SUBD;
  648|       |
  649|  6.22k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 6.22k, False: 19.9k]
  ------------------
  650|  6.40k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 172, False: 25.9k]
  ------------------
  651|  6.40k|                                            return OpCode::SUBF;
  652|       |
  653|  5.21k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 5.21k, False: 20.9k]
  ------------------
  654|  6.62k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.41k, False: 24.7k]
  ------------------
  655|  6.62k|                                            return OpCode::SUBI;
  656|       |
  657|  5.87k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 5.87k, False: 20.2k]
  ------------------
  658|  5.93k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 26.0k]
  ------------------
  659|  5.93k|                                            return OpCode::SUBU;
  660|  26.1k|                                    }
  661|  26.1k|                                }
  662|  8.57k|                                break;
  663|   107k|                        }
  664|  16.1k|                        break;
  665|       |
  666|  16.1k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 5.00k, False: 265k]
  ------------------
  667|  5.48k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 483, False: 269k]
  ------------------
  668|  5.48k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 5.35k, False: 128]
  |  Branch (668:29): [True: 4.43k, False: 1.04k]
  |  Branch (668:45): [True: 4.70k, False: 658]
  |  Branch (668:61): [True: 4.43k, False: 263]
  ------------------
  669|  4.43k|                        {
  670|  4.43k|                            return OpCode::TRAP;
  671|  4.43k|                        }
  672|  1.04k|                        break;
  673|  1.04k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 414, False: 270k]
  ------------------
  674|    904|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 490, False: 269k]
  ------------------
  675|    904|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 565, False: 339]
  |  Branch (675:29): [True: 305, False: 599]
  |  Branch (675:45): [True: 371, False: 194]
  |  Branch (675:61): [True: 305, False: 66]
  ------------------
  676|    305|                        {
  677|    305|                            return OpCode::XORI;
  678|    305|                        }
  679|    599|                        break;
  680|   270k|                }
  681|  77.8k|                break;
  682|   270k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  78.2k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 78.2k, False: 1.01M]
  ------------------
  686|  78.2k|                char c1 = token[0];
  687|  78.2k|                char c2 = token[1];
  688|  78.2k|                char c3 = token[2];
  689|  78.2k|                char c4 = token[3];
  690|  78.2k|                char c5 = token[4];
  691|       |
  692|  78.2k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 13.9k, False: 64.2k]
  ------------------
  693|  78.2k|                {
  694|  16.2k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 16.2k, False: 61.9k]
  ------------------
  695|  16.2k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 78.2k]
  ------------------
  696|  16.2k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 16.2k, False: 0]
  |  Branch (696:29): [True: 16.2k, False: 0]
  |  Branch (696:45): [True: 16.2k, False: 0]
  |  Branch (696:61): [True: 16.2k, False: 0]
  |  Branch (696:77): [True: 16.2k, False: 0]
  ------------------
  697|  16.2k|                        {
  698|  16.2k|                            return OpCode::ADDUI;
  699|  16.2k|                        }
  700|      0|                        break;
  701|       |
  702|  1.34k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.34k, False: 76.8k]
  ------------------
  703|  1.34k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 78.2k]
  ------------------
  704|  1.34k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.34k, False: 0]
  |  Branch (704:29): [True: 1.34k, False: 0]
  |  Branch (704:45): [True: 1.34k, False: 0]
  |  Branch (704:61): [True: 1.34k, False: 0]
  |  Branch (704:77): [True: 1.34k, False: 0]
  ------------------
  705|  1.34k|                        {
  706|  1.34k|                            return OpCode::DIVUI;
  707|  1.34k|                        }
  708|      0|                        break;
  709|       |
  710|  9.19k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 9.19k, False: 69.0k]
  ------------------
  711|  9.19k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 78.2k]
  ------------------
  712|  9.19k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 9.19k, False: 0]
  |  Branch (712:29): [True: 9.19k, False: 0]
  |  Branch (712:45): [True: 9.19k, False: 0]
  |  Branch (712:61): [True: 9.19k, False: 0]
  ------------------
  713|  9.19k|                        {
  714|  9.19k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 9.19k]
  ------------------
  715|  9.19k|                            {
  716|    560|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 560, False: 8.63k]
  ------------------
  717|    560|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 9.19k]
  ------------------
  718|    560|                                    return OpCode::MULTD;
  719|       |
  720|  6.54k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 6.54k, False: 2.65k]
  ------------------
  721|  6.54k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 9.19k]
  ------------------
  722|  6.54k|                                    return OpCode::MULTF;
  723|       |
  724|    425|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 425, False: 8.77k]
  ------------------
  725|    425|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 9.19k]
  ------------------
  726|    425|                                    return OpCode::MULTI;
  727|       |
  728|  1.67k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.67k, False: 7.52k]
  ------------------
  729|  1.67k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 9.19k]
  ------------------
  730|  1.67k|                                    return OpCode::MULTU;
  731|  9.19k|                            }
  732|  9.19k|                        }
  733|      0|                        break;
  734|       |
  735|  37.4k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 37.4k, False: 40.7k]
  ------------------
  736|  37.4k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 78.2k]
  ------------------
  737|  37.4k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 37.4k]
  ------------------
  738|  37.4k|                        {
  739|  4.66k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 4.66k, False: 32.7k]
  ------------------
  740|  4.66k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 37.4k]
  ------------------
  741|  4.66k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 4.66k, False: 0]
  |  Branch (741:37): [True: 4.66k, False: 0]
  |  Branch (741:53): [True: 4.66k, False: 0]
  |  Branch (741:69): [True: 4.66k, False: 0]
  ------------------
  742|  4.66k|                                {
  743|  4.66k|                                    return OpCode::SEQUI;
  744|  4.66k|                                }
  745|      0|                                break;
  746|       |
  747|  17.8k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 17.8k, False: 19.5k]
  ------------------
  748|  17.8k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 37.4k]
  ------------------
  749|  17.8k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 8.56k, False: 9.30k]
  |  Branch (749:37): [True: 8.56k, False: 9.30k]
  |  Branch (749:53): [True: 8.56k, False: 0]
  |  Branch (749:69): [True: 8.56k, False: 0]
  ------------------
  750|  8.56k|                                {
  751|  8.56k|                                    return OpCode::SGEUI;
  752|  8.56k|                                }
  753|  9.30k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 9.30k, False: 0]
  |  Branch (753:42): [True: 9.30k, False: 0]
  |  Branch (753:58): [True: 9.30k, False: 0]
  |  Branch (753:74): [True: 9.30k, False: 0]
  ------------------
  754|  9.30k|                                {
  755|  9.30k|                                    return OpCode::SGTUI;
  756|  9.30k|                                }
  757|      0|                                break;
  758|       |
  759|  6.07k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 6.07k, False: 31.3k]
  ------------------
  760|  6.07k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 37.4k]
  ------------------
  761|  6.07k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 4.43k, False: 1.64k]
  |  Branch (761:37): [True: 4.43k, False: 1.64k]
  |  Branch (761:53): [True: 4.43k, False: 0]
  |  Branch (761:69): [True: 4.43k, False: 0]
  ------------------
  762|  4.43k|                                {
  763|  4.43k|                                    return OpCode::SLEUI;
  764|  4.43k|                                }
  765|  1.64k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.64k, False: 0]
  |  Branch (765:42): [True: 1.64k, False: 0]
  |  Branch (765:58): [True: 1.64k, False: 0]
  |  Branch (765:74): [True: 1.64k, False: 0]
  ------------------
  766|  1.64k|                                {
  767|  1.64k|                                    return OpCode::SLTUI;
  768|  1.64k|                                }
  769|      0|                                break;
  770|       |
  771|    244|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 244, False: 37.1k]
  ------------------
  772|    244|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 37.4k]
  ------------------
  773|    244|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 244, False: 0]
  |  Branch (773:37): [True: 244, False: 0]
  |  Branch (773:53): [True: 244, False: 0]
  |  Branch (773:69): [True: 244, False: 0]
  ------------------
  774|    244|                                {
  775|    244|                                    return OpCode::SNEUI;
  776|    244|                                }
  777|      0|                                break;
  778|       |
  779|  8.57k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 8.57k, False: 28.8k]
  ------------------
  780|  8.57k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 37.4k]
  ------------------
  781|  8.57k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 8.57k, False: 0]
  |  Branch (781:37): [True: 8.57k, False: 0]
  |  Branch (781:53): [True: 8.57k, False: 0]
  |  Branch (781:69): [True: 8.57k, False: 0]
  ------------------
  782|  8.57k|                                {
  783|  8.57k|                                    return OpCode::SUBUI;
  784|  8.57k|                                }
  785|      0|                                break;
  786|  37.4k|                        }
  787|       |
  788|      0|                        break;
  789|  78.2k|                }
  790|       |
  791|  13.9k|                break;
  792|  78.2k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  22.8k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 22.8k, False: 1.06M]
  ------------------
  796|  22.8k|                char c1 = token[0];
  797|  22.8k|                char c2 = token[1];
  798|  22.8k|                char c3 = token[2];
  799|  22.8k|                char c4 = token[3];
  800|  22.8k|                char c5 = token[4];
  801|  22.8k|                char c6 = token[5];
  802|       |
  803|  22.8k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 14.6k, False: 8.21k]
  |  Branch (803:21): [True: 14.6k, False: 8.21k]
  |  Branch (803:37): [True: 14.6k, False: 0]
  |  Branch (803:53): [True: 14.6k, False: 0]
  ------------------
  804|  14.6k|                {
  805|  14.6k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 14.6k]
  ------------------
  806|  14.6k|                    {
  807|  5.03k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 5.03k, False: 9.60k]
  ------------------
  808|  5.03k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 14.6k]
  ------------------
  809|  5.03k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 5.03k, False: 0]
  ------------------
  810|  5.03k|                            {
  811|  5.03k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 3.53k, False: 1.50k]
  ------------------
  812|  3.53k|                                {
  813|  3.53k|                                    return OpCode::CVTD2F;
  814|  3.53k|                                }
  815|  1.50k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.50k, False: 0]
  ------------------
  816|  1.50k|                                {
  817|  1.50k|                                    return OpCode::CVTD2I;
  818|  1.50k|                                }
  819|  5.03k|                            }
  820|      0|                            break;
  821|       |
  822|  5.05k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 5.05k, False: 9.58k]
  ------------------
  823|  5.05k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 14.6k]
  ------------------
  824|  5.05k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 5.05k, False: 0]
  ------------------
  825|  5.05k|                            {
  826|  5.05k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 2.66k, False: 2.39k]
  ------------------
  827|  2.66k|                                {
  828|  2.66k|                                    return OpCode::CVTF2D;
  829|  2.66k|                                }
  830|  2.39k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 2.39k, False: 0]
  ------------------
  831|  2.39k|                                {
  832|  2.39k|                                    return OpCode::CVTF2I;
  833|  2.39k|                                }
  834|  5.05k|                            }
  835|      0|                            break;
  836|       |
  837|  4.55k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 4.55k, False: 10.0k]
  ------------------
  838|  4.55k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 14.6k]
  ------------------
  839|  4.55k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 4.55k, False: 0]
  ------------------
  840|  4.55k|                            {
  841|  4.55k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 4.48k, False: 69]
  ------------------
  842|  4.48k|                                {
  843|  4.48k|                                    return OpCode::CVTI2D;
  844|  4.48k|                                }
  845|     69|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 69, False: 0]
  ------------------
  846|     69|                                {
  847|     69|                                    return OpCode::CVTI2F;
  848|     69|                                }
  849|  4.55k|                            }
  850|  14.6k|                    }
  851|  14.6k|                }
  852|  8.21k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.43k, False: 5.78k]
  |  Branch (852:26): [True: 2.43k, False: 5.78k]
  |  Branch (852:42): [True: 2.43k, False: 0]
  |  Branch (852:58): [True: 2.43k, False: 0]
  |  Branch (852:74): [True: 2.43k, False: 0]
  ------------------
  853|  8.21k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 2.43k, False: 0]
  |  Branch (853:42): [True: 2.43k, False: 0]
  ------------------
  854|  2.43k|                {
  855|  2.43k|                    return OpCode::MULTUI;
  856|  2.43k|                }
  857|  5.78k|                break;
  858|  22.8k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  5.78k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 3.32k, False: 1.08M]
  ------------------
  862|  3.32k|                char c1 = token[0];
  863|  3.32k|                char c2 = token[1];
  864|  3.32k|                char c3 = token[2];
  865|  3.32k|                char c4 = token[3];
  866|  3.32k|                char c5 = token[4];
  867|  3.32k|                char c6 = token[5];
  868|  3.32k|                char c7 = token[6];
  869|       |
  870|  3.32k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 1.86k, False: 1.46k]
  |  Branch (870:21): [True: 1.86k, False: 1.46k]
  |  Branch (870:37): [True: 1.86k, False: 0]
  |  Branch (870:53): [True: 1.86k, False: 0]
  ------------------
  871|  1.86k|                {
  872|  1.86k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 129, False: 1.73k]
  |  Branch (872:25): [True: 129, False: 1.73k]
  |  Branch (872:41): [True: 129, False: 0]
  |  Branch (872:54): [True: 129, False: 0]
  |  Branch (872:70): [True: 129, False: 0]
  ------------------
  873|    129|                    {
  874|    129|                        return OpCode::MOVI2FP;
  875|    129|                    }
  876|  1.73k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.73k, False: 0]
  |  Branch (876:30): [True: 1.73k, False: 0]
  |  Branch (876:46): [True: 1.73k, False: 0]
  |  Branch (876:62): [True: 1.73k, False: 0]
  |  Branch (876:75): [True: 1.73k, False: 0]
  ------------------
  877|  1.73k|                    {
  878|  1.73k|                        return OpCode::MOVFP2I;
  879|  1.73k|                    }
  880|  1.86k|                }
  881|  1.46k|                break;
  882|  3.32k|            }
  883|       |
  884|  38.0k|            default: {
  ------------------
  |  Branch (884:13): [True: 38.0k, False: 1.05M]
  ------------------
  885|  38.0k|                break;
  886|  3.32k|            }
  887|  1.08M|        }
  888|       |
  889|       |        // None found
  890|   361k|        return OpCode::NONE;
  891|  1.08M|    }
_ZN3dlx3iceEcc:
   17|  1.73M|    {
   18|  1.73M|        constexpr const char diff = 'a' - 'A';
   19|  1.73M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.23M, False: 495k]
  |  Branch (19:28): [True: 155k, False: 340k]
  ------------------
   20|  1.73M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.26M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  20.4k|    {
  193|  20.4k|        ParseError err;
  194|       |
  195|  20.4k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  20.4k|        err.m_LineNumber                           = line_number;
  197|  20.4k|        err.m_Column                               = column;
  198|  20.4k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  20.4k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  20.4k|        return err;
  202|  20.4k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  20.4k|    {
  207|  20.4k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  20.4k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  20.4k|                                                         actual_type);
  210|  20.4k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    505|    {
  216|    505|        ParseError err;
  217|       |
  218|    505|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    505|        err.m_LineNumber        = line_number;
  220|    505|        err.m_Column            = column;
  221|    505|        err.invalid_number.text = text;
  222|       |
  223|    505|        return err;
  224|    505|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    505|    {
  228|    505|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    505|                                                token.GetColumn().unsafe(), token.GetText());
  230|    505|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   412k|    {
  255|   412k|        ParseError err;
  256|       |
  257|   412k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   412k|        err.m_LineNumber                   = line_number;
  259|   412k|        err.m_Column                       = column;
  260|   412k|        err.unexpected_token.expected_type = expected_type;
  261|   412k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   412k|        return err;
  264|   412k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   412k|    {
  269|   412k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   412k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   412k|                                                  token.GetType());
  272|   412k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  14.6k|    {
  277|  14.6k|        ParseError err;
  278|       |
  279|  14.6k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  14.6k|        err.m_LineNumber                   = line_number;
  281|  14.6k|        err.m_Column                       = column;
  282|  14.6k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  14.6k|        return err;
  285|  14.6k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  5.26k|    {
  289|  5.26k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  5.26k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  5.26k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   182k|    {
  296|   182k|        ParseError err;
  297|       |
  298|   182k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   182k|        err.m_LineNumber                       = line_number;
  300|   182k|        err.m_Column                           = column;
  301|   182k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   182k|        return err;
  304|   182k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   182k|    {
  309|   182k|        return ConstructInvalidLabelIdentifierParseError(
  310|   182k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   182k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  34.8k|    {
  317|  34.8k|        ParseError err;
  318|       |
  319|  34.8k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  34.8k|        err.m_LineNumber                     = line_number;
  321|  34.8k|        err.m_Column                         = column;
  322|  34.8k|        err.label_already_defined.label_name = label_name;
  323|  34.8k|        err.label_already_defined.at_line    = at_line;
  324|  34.8k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  34.8k|        return err;
  327|  34.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  34.8k|    {
  332|  34.8k|        return ConstructLabelAlreadyDefinedParseError(
  333|  34.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  34.8k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  34.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   494k|    {
  340|   494k|        ParseError err;
  341|       |
  342|   494k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   494k|        err.m_LineNumber = line_number;
  344|   494k|        err.m_Column     = column;
  345|       |
  346|   494k|        return err;
  347|   494k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   494k|    {
  352|   494k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   494k|                                                        token.GetColumn().unsafe());
  354|   494k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|   105k|    {
  360|   105k|        ParseError err;
  361|       |
  362|   105k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|   105k|        err.m_LineNumber               = line_number;
  364|   105k|        err.m_Column                   = column;
  365|   105k|        err.too_few_arguments.required = required;
  366|   105k|        err.too_few_arguments.provided = provided;
  367|       |
  368|   105k|        return err;
  369|   105k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|   105k|    {
  374|   105k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|   105k|                                                  token.GetColumn().unsafe(), required, provided);
  376|   105k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  2.83k|    {
  381|  2.83k|        ParseError err;
  382|       |
  383|  2.83k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  2.83k|        err.m_LineNumber           = line_number;
  385|  2.83k|        err.m_Column               = column;
  386|  2.83k|        err.empty_label.label_name = label_name;
  387|       |
  388|  2.83k|        return err;
  389|  2.83k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  2.83k|    {
  393|  2.83k|        return ConstructEmptyLabelParseError(
  394|  2.83k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  2.83k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 2.23k, False: 600]
  ------------------
  396|  2.23k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  2.83k|                        token.GetText());
  398|  2.83k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    159|    {
  403|    159|        ParseError err;
  404|       |
  405|    159|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    159|        err.m_LineNumber = line_number;
  407|    159|        err.m_Column     = column;
  408|       |
  409|    159|        return err;
  410|    159|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    159|    {
  414|    159|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    159|                                               token.GetColumn().unsafe());
  416|    159|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.26M|    {
   19|  1.26M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.26M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  9.82k|    {
  182|  9.82k|        ParsedProgram program;
  183|       |
  184|  9.82k|        program.m_Tokens = tokens;
  185|       |
  186|  9.82k|        phi::boolean line_has_instruction{false};
  187|  9.82k|        phi::usize   label_count{0u};
  188|       |
  189|  3.10M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 3.09M, False: 9.82k]
  ------------------
  190|  3.09M|        {
  191|  3.09M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  3.09M|            switch (current_token.GetType())
  196|  3.09M|            {
  197|       |                // Ignore comments
  198|   349k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 349k, False: 2.74M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   349k|                    break;
  201|       |
  202|  1.46M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.46M, False: 1.63M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.46M|                    line_has_instruction = false;
  205|  1.46M|                    break;
  206|       |
  207|   234k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 234k, False: 2.85M]
  ------------------
  208|   234k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 18.1k, False: 216k]
  ------------------
  209|  18.1k|                    {
  210|  18.1k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  18.1k|                                current_token, Token::Type::NewLine));
  212|  18.1k|                        break;
  213|  18.1k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   216k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 134k, False: 82.2k]
  ------------------
  218|   134k|                    {
  219|   134k|                        program.AddParseError(
  220|   134k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   134k|                        break;
  222|   134k|                    }
  223|       |
  224|  82.2k|                    std::string_view label_name = current_token.GetText();
  225|  82.2k|                    label_name.remove_suffix(1);
  226|       |
  227|  82.2k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 9.38k, False: 72.8k]
  ------------------
  228|  9.38k|                    {
  229|  9.38k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  9.38k|                                current_token.GetLineNumber().unsafe(),
  231|  9.38k|                                current_token.GetColumn().unsafe(), label_name));
  232|  9.38k|                        break;
  233|  9.38k|                    }
  234|       |
  235|  72.8k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 33.1k, False: 39.6k]
  ------------------
  236|  33.1k|                    {
  237|  33.1k|                        program.AddParseError(
  238|  33.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  33.1k|                        break;
  240|  33.1k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  39.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 34.8k, False: 4.81k]
  ------------------
  244|  34.8k|                    {
  245|       |                        // Find first defintions of label
  246|  34.8k|                        const Token* first_label_definition =
  247|  34.8k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  34.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  34.8k|                                    {
  250|  34.8k|                                        std::string_view token_label_name = t.GetText();
  251|  34.8k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  34.8k|                                        if (token_label_name == label_name)
  254|  34.8k|                                        {
  255|  34.8k|                                            return true;
  256|  34.8k|                                        }
  257|  34.8k|                                    }
  258|       |
  259|  34.8k|                                    return false;
  260|  34.8k|                                });
  261|       |
  262|  34.8k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  34.8k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  34.8k|                                current_token, *first_label_definition));
  266|  34.8k|                        break;
  267|  34.8k|                    }
  268|       |
  269|  4.81k|                    program.m_JumpData[label_name] =
  270|  4.81k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  4.81k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  4.81k|                    break;
  277|  39.6k|                }
  278|       |
  279|   698k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 698k, False: 2.39M]
  ------------------
  280|   698k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 494k, False: 204k]
  ------------------
  281|   494k|                    {
  282|   494k|                        program.AddParseError(
  283|   494k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   494k|                        break;
  285|   494k|                    }
  286|       |
  287|   204k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   204k|                    PHI_ASSERT(current_token.HasHint());
  291|   204k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   204k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   204k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   204k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   204k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   204k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   204k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   204k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   204k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   287k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 276k, False: 11.0k]
  ------------------
  313|   276k|                    {
  314|       |                        // Get next token
  315|   276k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 468, False: 275k]
  ------------------
  316|    468|                        {
  317|    468|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    468|                                    current_token, number_of_argument_required.unsafe(),
  319|    468|                                    argument_num.unsafe()));
  320|    468|                            break;
  321|    468|                        }
  322|       |
  323|   275k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   275k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 48.2k, False: 227k]
  ------------------
  327|  48.2k|                        {
  328|  48.2k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 159, False: 48.1k]
  ------------------
  329|    159|                            {
  330|    159|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    159|                            }
  332|       |
  333|  48.2k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  48.2k|                            continue;
  336|  48.2k|                        }
  337|       |
  338|   227k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 104k, False: 122k]
  ------------------
  339|   104k|                        {
  340|   104k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|   104k|                                    token, number_of_argument_required.unsafe(),
  342|   104k|                                    argument_num.unsafe()));
  343|   104k|                            break;
  344|   104k|                        }
  345|       |
  346|   122k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   122k|                                parse_instruction_argument(
  348|   122k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   122k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 87.7k, False: 34.9k]
  ------------------
  350|  87.7k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  87.7k|                            break;
  353|  87.7k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  34.9k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  34.9k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  34.9k|                        argument_num++;
  360|  34.9k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  34.9k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   204k|                    program.m_Instructions.emplace_back(instruction);
  368|   204k|                    line_has_instruction = true;
  369|   204k|                    break;
  370|   698k|                }
  371|       |
  372|   347k|                default:
  ------------------
  |  Branch (372:17): [True: 347k, False: 2.74M]
  ------------------
  373|   347k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   347k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 234k, False: 112k]
  ------------------
  375|   234k|                    {
  376|   234k|                        expected_token_type = Token::Type::NewLine;
  377|   234k|                    }
  378|       |
  379|   347k|                    program.AddParseError(
  380|   347k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   347k|                    break;
  382|  3.09M|            }
  383|  3.09M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  9.82k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 712, False: 9.11k]
  ------------------
  387|    712|        {
  388|  8.76k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 8.05k, False: 712]
  ------------------
  389|  8.05k|            {
  390|  8.05k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  8.05k|                const Token& token = *it;
  393|  8.05k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 2.83k, False: 5.22k]
  ------------------
  394|  2.83k|                {
  395|  2.83k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  2.83k|                    --label_count;
  397|  2.83k|                }
  398|  8.05k|            }
  399|    712|        }
  400|       |
  401|  9.82k|        return program;
  402|  9.82k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  9.82k|    {
  406|  9.82k|        TokenStream tokens = Tokenize(source);
  407|  9.82k|        return Parse(tokens);
  408|  9.82k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   122k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   122k|        switch (token.GetType())
   38|   122k|        {
   39|  9.40k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 9.40k, False: 113k]
  ------------------
   40|  9.40k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 5.20k, False: 4.19k]
  ------------------
   41|  9.40k|                                          ArgumentType::AddressDisplacement))
   42|  5.20k|                {
   43|  5.20k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  5.20k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  5.20k|                    return {};
   47|  5.20k|                }
   48|       |
   49|       |                // Get address displacement
   50|  4.19k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  4.19k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  4.19k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 4.19k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  4.19k|                auto         it           = tokens.current_position();
   62|  4.19k|                const Token& first_token  = tokens.consume();
   63|  4.19k|                const Token& second_token = tokens.consume();
   64|  4.19k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  4.19k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 4.19k, False: 0]
  ------------------
   67|  4.19k|                {
   68|  4.19k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  4.19k|                            first_token, Token::Type::OpenBracket));
   70|  4.19k|                    return {};
   71|  4.19k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  25.8k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 25.8k, False: 96.8k]
  ------------------
   98|  25.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 5.24k, False: 20.6k]
  ------------------
   99|  5.24k|                {
  100|  5.24k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  5.24k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  5.24k|                    return {};
  103|  5.24k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  20.6k|                return ConstructInstructionArgumentRegisterInt(
  109|  20.6k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  25.8k|            }
  111|  2.37k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 2.37k, False: 120k]
  ------------------
  112|  2.37k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.91k, False: 460]
  ------------------
  113|  1.91k|                {
  114|  1.91k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.91k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.91k|                    return {};
  117|  1.91k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    460|                return ConstructInstructionArgumentRegisterFloat(
  123|    460|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  2.37k|            }
  125|  5.26k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 5.26k, False: 117k]
  ------------------
  126|  5.26k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  5.26k|                return {};
  129|  2.37k|            }
  130|  28.3k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 28.3k, False: 94.4k]
  ------------------
  131|       |                // Parse as Label
  132|  28.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 4.65k, False: 23.6k]
  ------------------
  133|  4.65k|                {
  134|  4.65k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  4.65k|                            token, expected_argument_type, ArgumentType::Label));
  136|  4.65k|                    return {};
  137|  4.65k|                }
  138|       |
  139|  23.6k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 23.6k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  23.6k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 14.7k, False: 8.91k]
  ------------------
  146|  14.7k|                {
  147|  14.7k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  14.7k|                    return {};
  149|  14.7k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  8.91k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  23.6k|            }
  155|  8.83k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 8.83k, False: 113k]
  ------------------
  156|  8.83k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.38k, False: 5.45k]
  ------------------
  157|  3.38k|                {
  158|  3.38k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.38k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.38k|                    return {};
  161|  3.38k|                }
  162|       |
  163|  5.45k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 4.95k, False: 505]
  ------------------
  164|  4.95k|                {
  165|  4.95k|                    return ConstructInstructionArgumentImmediateValue(
  166|  4.95k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  4.95k|                }
  168|       |
  169|    505|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    505|                return {};
  171|  5.45k|            }
  172|       |
  173|  42.6k|            default:
  ------------------
  |  Branch (173:13): [True: 42.6k, False: 80.0k]
  ------------------
  174|  42.6k|                program.AddParseError(
  175|  42.6k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  42.6k|                return {};
  177|   122k|        }
  178|   122k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   830k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   830k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 148k, False: 682k]
  ------------------
  249|   148k|                                    {
  250|   148k|                                        std::string_view token_label_name = t.GetText();
  251|   148k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   148k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 34.8k, False: 113k]
  ------------------
  254|  34.8k|                                        {
  255|  34.8k|                                            return true;
  256|  34.8k|                                        }
  257|   148k|                                    }
  258|       |
  259|   795k|                                    return false;
  260|   830k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|    184|    {
  353|    184|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 0, False: 184]
  ------------------
  354|      0|        {
  355|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|      0|            return false;
  357|      0|        }
  358|       |
  359|    184|        m_CurrentProgram = &program;
  360|       |
  361|    184|        m_ProgramCounter               = 0u;
  362|    184|        m_Halted                       = false;
  363|    184|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    184|        m_LastRaisedException          = Exception::None;
  365|    184|        m_CurrentStepCount             = 0u;
  366|       |
  367|    184|        return true;
  368|    184|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.23M|    {
   14|  1.23M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 233k, False: 1.00M]
  ------------------
   15|   233k|        {
   16|   233k|            char first_char = token[0];
   17|   233k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 87.4k, False: 146k]
  |  Branch (17:38): [True: 10.4k, False: 136k]
  ------------------
   18|  97.8k|            {
   19|  97.8k|                char second_char = token[1];
   20|  97.8k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 95.4k, False: 2.41k]
  |  Branch (20:43): [True: 91.2k, False: 4.20k]
  ------------------
   21|  91.2k|                {
   22|  91.2k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  91.2k|                }
   24|  97.8k|            }
   25|   233k|        }
   26|  1.00M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 545k, False: 460k]
  ------------------
   27|   545k|        {
   28|   545k|            char first_char = token[0];
   29|   545k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 30.6k, False: 514k]
  |  Branch (29:38): [True: 8.21k, False: 506k]
  ------------------
   30|  38.8k|            {
   31|  38.8k|                char second_char = token[1];
   32|  38.8k|                char third_char  = token[2];
   33|       |
   34|  38.8k|                switch (second_char)
   35|  38.8k|                {
   36|  12.5k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 12.5k, False: 26.3k]
  ------------------
   37|  12.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 12.4k, False: 129]
  |  Branch (37:50): [True: 11.9k, False: 535]
  ------------------
   38|  11.9k|                        {
   39|  11.9k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  11.9k|                        }
   41|    664|                        break;
   42|  12.5k|                    }
   43|  16.9k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 16.9k, False: 21.8k]
  ------------------
   44|  16.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 16.4k, False: 591]
  |  Branch (44:50): [True: 12.3k, False: 4.07k]
  ------------------
   45|  12.3k|                        {
   46|  12.3k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  12.3k|                        }
   48|  4.66k|                        break;
   49|  16.9k|                    }
   50|  6.62k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 6.62k, False: 32.2k]
  ------------------
   51|  6.62k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 2.12k, False: 4.50k]
  |  Branch (51:50): [True: 4.26k, False: 246]
  ------------------
   52|  6.38k|                        {
   53|  6.38k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  6.38k|                        }
   55|    246|                        break;
   56|  6.62k|                    }
   57|  2.68k|                    default: {
  ------------------
  |  Branch (57:21): [True: 2.68k, False: 36.1k]
  ------------------
   58|  2.68k|                        break;
   59|  6.62k|                    }
   60|  38.8k|                }
   61|  38.8k|            }
   62|   545k|        }
   63|       |
   64|  1.11M|        return IntRegisterID::None;
   65|  1.23M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.11M|    {
   69|  1.11M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 142k, False: 974k]
  ------------------
   70|   142k|        {
   71|   142k|            char first_char = token[0];
   72|   142k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 11.9k, False: 130k]
  |  Branch (72:38): [True: 7.57k, False: 123k]
  ------------------
   73|  19.5k|            {
   74|  19.5k|                char second_char = token[1];
   75|  19.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 19.3k, False: 274]
  |  Branch (75:43): [True: 12.5k, False: 6.73k]
  ------------------
   76|  12.5k|                {
   77|  12.5k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  12.5k|                }
   79|  19.5k|            }
   80|   142k|        }
   81|   974k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 514k, False: 460k]
  ------------------
   82|   514k|        {
   83|   514k|            char first_char = token[0];
   84|   514k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 14.7k, False: 499k]
  |  Branch (84:38): [True: 5.55k, False: 494k]
  ------------------
   85|  20.3k|            {
   86|  20.3k|                char second_char = token[1];
   87|  20.3k|                char third_char  = token[2];
   88|       |
   89|  20.3k|                switch (second_char)
   90|  20.3k|                {
   91|  5.23k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 5.23k, False: 15.1k]
  ------------------
   92|  5.23k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 4.11k, False: 1.12k]
  |  Branch (92:50): [True: 3.50k, False: 605]
  ------------------
   93|  3.50k|                        {
   94|  3.50k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  3.50k|                        }
   96|  1.73k|                        break;
   97|  5.23k|                    }
   98|  4.90k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 4.90k, False: 15.4k]
  ------------------
   99|  4.90k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 2.68k, False: 2.22k]
  |  Branch (99:50): [True: 2.19k, False: 489]
  ------------------
  100|  2.19k|                        {
  101|  2.19k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  2.19k|                        }
  103|  2.71k|                        break;
  104|  4.90k|                    }
  105|  9.53k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 9.53k, False: 10.8k]
  ------------------
  106|  9.53k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 8.07k, False: 1.46k]
  |  Branch (106:50): [True: 985, False: 476]
  ------------------
  107|  9.06k|                        {
  108|  9.06k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  9.06k|                        }
  110|    476|                        break;
  111|  9.53k|                    }
  112|    659|                    default: {
  ------------------
  |  Branch (112:21): [True: 659, False: 19.6k]
  ------------------
  113|    659|                        break;
  114|  9.53k|                    }
  115|  20.3k|                }
  116|  20.3k|            }
  117|   514k|        }
  118|       |
  119|  1.08M|        return FloatRegisterID::None;
  120|  1.11M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.26M|    {
  124|  1.26M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 305k, False: 959k]
  ------------------
  125|   305k|        {
  126|   305k|            char c1 = token[0];
  127|   305k|            char c2 = token[1];
  128|   305k|            char c3 = token[2];
  129|   305k|            char c4 = token[3];
  130|       |
  131|   305k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 34.9k, False: 270k]
  |  Branch (131:34): [True: 201, False: 269k]
  |  Branch (131:49): [True: 34.6k, False: 517]
  |  Branch (131:62): [True: 415, False: 102]
  ------------------
  132|   305k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 34.6k, False: 420]
  |  Branch (132:34): [True: 354, False: 66]
  |  Branch (132:49): [True: 34.6k, False: 354]
  |  Branch (132:62): [True: 0, False: 354]
  ------------------
  133|   305k|        }
  134|       |
  135|   959k|        return false;
  136|  1.26M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  2.45M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   923k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  8.35M|    {
   41|  8.35M|        return m_Type;
   42|  8.35M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  5.12M|    {
   51|  5.12M|        return m_LineNumber;
   52|  5.12M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  9.98M|    {
   56|  9.98M|        return m_Column;
   57|  9.98M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  6.87M|    {
   61|  6.87M|        return m_Text.length();
   62|  6.87M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   734k|    {
   66|   734k|        return m_Text;
   67|   734k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   213k|    {
   80|   213k|        return m_HasHint;
   81|   213k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   234k|    {
   85|   234k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   234k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   234k|                   m_Type == Type::ImmediateInteger);
   88|   234k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   234k|        return m_Hint;
   91|   234k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  9.82k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  9.82k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  9.82k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  4.19k|    {
   51|  4.19k|        auto it = m_Iterator;
   52|  16.7k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 12.5k, False: 4.19k]
  ------------------
   53|  12.5k|        {
   54|  12.5k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 12.5k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  12.5k|        }
   59|       |
   60|  4.19k|        return true;
   61|  4.19k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  3.37M|    {
   65|  3.37M|        return m_Iterator != m_Tokens.end();
   66|  3.37M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  3.38M|    {
   70|  3.38M|        return m_Iterator == m_Tokens.end();
   71|  3.38M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  3.38M|    {
   85|  3.38M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  3.38M|        return *m_Iterator++;
   91|  3.38M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  4.19k|    {
  164|  4.19k|        return m_Iterator;
  165|  4.19k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  9.82k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  9.82k|        return m_Tokens.begin();
  188|  9.82k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  9.82k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  9.82k|        return m_Tokens.end();
  206|  9.82k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    712|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    712|        return m_Tokens.rbegin();
  224|    712|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  8.05k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  8.05k|        return m_Tokens.rend();
  233|  8.05k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  9.82k|    {
   63|  9.82k|        TokenStream tokens;
   64|       |
   65|  9.82k|        std::string_view current_token;
   66|       |
   67|  9.82k|        phi::u64 current_line_number{1u};
   68|  9.82k|        phi::u64 current_column{1u};
   69|  9.82k|        phi::u64 token_begin{0u};
   70|       |
   71|  9.82k|        phi::boolean parsing_comment{false};
   72|       |
   73|  7.32M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 7.31M, False: 9.82k]
  ------------------
   74|  7.31M|        {
   75|  7.31M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  7.31M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.57M, False: 5.73M]
  ------------------
   78|  1.57M|            {
   79|  1.57M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 944k, False: 630k]
  ------------------
   80|   944k|                {
   81|       |                    // Skip empty lines
   82|   944k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   944k|                                        current_line_number, current_column);
   84|       |
   85|   944k|                    parsing_comment = false;
   86|   944k|                    current_line_number += 1u;
   87|   944k|                    current_column = 1u;
   88|   944k|                    continue;
   89|   944k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   630k|                tokens.emplace_back(
   93|   630k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   630k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   630k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   630k|                                    current_line_number, current_column);
   98|       |
   99|   630k|                current_token   = std::string_view{};
  100|   630k|                parsing_comment = false;
  101|   630k|                current_line_number += 1u;
  102|   630k|                current_column = 0u;
  103|   630k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  5.73M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 12.0k, False: 5.72M]
  |  Branch (105:34): [True: 362k, False: 5.36M]
  ------------------
  106|   375k|            {
  107|   375k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 339k, False: 35.4k]
  ------------------
  108|   339k|                {
  109|   339k|                    token_begin = i;
  110|   339k|                }
  111|  35.4k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 28.8k, False: 6.55k]
  ------------------
  112|  28.8k|                {
  113|  28.8k|                    tokens.emplace_back(ParseToken(
  114|  28.8k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  28.8k|                            current_line_number, current_column - current_token.length()));
  116|  28.8k|                    token_begin   = i;
  117|  28.8k|                    current_token = std::string_view{};
  118|  28.8k|                }
  119|       |
  120|   375k|                parsing_comment = true;
  121|   375k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   375k|            }
  123|  5.36M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 427k, False: 4.93M]
  ------------------
  124|   427k|            {
  125|       |                // simply append the character
  126|   427k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   427k|            }
  128|  4.93M|            else
  129|  4.93M|            {
  130|       |                // Not parsing a comment
  131|  4.93M|                switch (c)
  132|  4.93M|                {
  133|   662k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 662k, False: 4.27M]
  ------------------
  134|   663k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 782, False: 4.93M]
  ------------------
  135|   663k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 4.93M]
  ------------------
  136|   663k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 679, False: 662k]
  ------------------
  137|    679|                        {
  138|    679|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    679|                            continue;
  141|    679|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   662k|                        tokens.emplace_back(ParseToken(
  145|   662k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   662k|                                current_line_number, current_column - current_token.length()));
  147|   662k|                        current_token = std::string_view{};
  148|   662k|                        break;
  149|   103k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 103k, False: 4.83M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   103k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 88.1k, False: 15.2k]
  ------------------
  152|  88.1k|                        {
  153|  88.1k|                            current_token =
  154|  88.1k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  88.1k|                            tokens.emplace_back(ParseToken(
  156|  88.1k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  88.1k|                                    current_line_number,
  158|  88.1k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  88.1k|                            current_token = std::string_view{};
  161|  88.1k|                        }
  162|  15.2k|                        else
  163|  15.2k|                        {
  164|       |                            // Orphan colon
  165|  15.2k|                            token_begin = i;
  166|       |
  167|  15.2k|                            tokens.emplace_back(Token::Type::Colon,
  168|  15.2k|                                                source.substr(token_begin.unsafe(), 1),
  169|  15.2k|                                                current_line_number, current_column);
  170|  15.2k|                        }
  171|   103k|                        break;
  172|   184k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 184k, False: 4.75M]
  ------------------
  173|   193k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 9.32k, False: 4.92M]
  ------------------
  174|   193k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 242, False: 4.93M]
  ------------------
  175|   193k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 184k, False: 9.57k]
  ------------------
  176|   184k|                        {
  177|   184k|                            tokens.emplace_back(ParseToken(
  178|   184k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   184k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   184k|                            current_token = std::string_view{};
  182|   184k|                        }
  183|       |
  184|   193k|                        Token::Type type;
  185|   193k|                        switch (c)
  186|   193k|                        {
  187|   184k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 184k, False: 9.56k]
  ------------------
  188|   184k|                                type = Token::Type::Comma;
  189|   184k|                                break;
  190|  9.32k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 9.32k, False: 184k]
  ------------------
  191|  9.32k|                                type = Token::Type::OpenBracket;
  192|  9.32k|                                break;
  193|    242|                            case ')':
  ------------------
  |  Branch (193:29): [True: 242, False: 193k]
  ------------------
  194|    242|                                type = Token::Type::ClosingBracket;
  195|    242|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 193k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   193k|#endif
  201|   193k|                        }
  202|       |
  203|   193k|                        token_begin = i;
  204|       |
  205|   193k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   193k|                                            current_line_number, current_column);
  207|   193k|                        break;
  208|       |
  209|  3.97M|                    default:
  ------------------
  |  Branch (209:21): [True: 3.97M, False: 960k]
  ------------------
  210|  3.97M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.22M, False: 2.74M]
  ------------------
  211|  1.22M|                        {
  212|  1.22M|                            token_begin = i;
  213|  1.22M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  3.97M|                        current_token =
  217|  3.97M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  4.93M|                }
  219|  4.93M|            }
  220|       |
  221|  6.36M|            current_column += 1u;
  222|  6.36M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  9.82k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 3.15k, False: 6.67k]
  ------------------
  226|  3.15k|        {
  227|  3.15k|            tokens.emplace_back(
  228|  3.15k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  3.15k|                               current_line_number, current_column - current_token.length()));
  230|  3.15k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  9.82k|        tokens.finalize();
  234|       |
  235|  9.82k|        return tokens;
  236|  9.82k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.59M|    {
   11|  1.59M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 31.5k, False: 1.56M]
  |  Branch (11:35): [True: 31.3k, False: 223]
  ------------------
   12|  31.3k|        {
   13|  31.3k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  31.3k|            if (number)
  ------------------
  |  Branch (15:17): [True: 25.7k, False: 5.59k]
  ------------------
   16|  25.7k|            {
   17|  25.7k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  25.7k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  25.7k|            }
   20|       |
   21|  5.59k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  31.3k|        }
   23|       |
   24|  1.56M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 6.12k, False: 1.56M]
  |  Branch (24:35): [True: 362k, False: 1.19M]
  ------------------
   25|   368k|        {
   26|   368k|            return {Token::Type::Comment, token, line_number, column};
   27|   368k|        }
   28|       |
   29|  1.19M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 29.8k, False: 1.16M]
  ------------------
   30|  29.8k|        {
   31|  29.8k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  29.8k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  29.8k|        }
   34|       |
   35|  1.16M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 34.6k, False: 1.13M]
  ------------------
   36|  34.6k|        {
   37|  34.6k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  34.6k|        }
   39|       |
   40|  1.13M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 116k, False: 1.01M]
  ------------------
   41|   116k|        {
   42|   116k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|   116k|                    static_cast<std::uint32_t>(id)};
   44|   116k|        }
   45|       |
   46|  1.01M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 26.7k, False: 989k]
  ------------------
   47|  26.7k|        {
   48|  26.7k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  26.7k|                    static_cast<std::uint32_t>(id)};
   50|  26.7k|        }
   51|       |
   52|   989k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 724k, False: 264k]
  ------------------
   53|   724k|        {
   54|   724k|            return {Token::Type::OpCode, token, line_number, column,
   55|   724k|                    static_cast<std::uint32_t>(opcode)};
   56|   724k|        }
   57|       |
   58|   264k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   989k|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  9.82k|    {
   53|       |        // Constants
   54|  9.82k|        constexpr std::uint8_t number_of_opcodes =
   55|  9.82k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  9.82k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  9.82k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  9.82k|        std::string ret;
   60|       |
   61|  2.25M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 2.24M, False: 9.77k]
  ------------------
   62|  2.24M|        {
   63|  2.24M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  2.24M|            switch (current_value)
   66|  2.24M|            {
   67|       |                // OpCode
   68|   644k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 644k, False: 1.59M]
  ------------------
   69|       |                    // Has one more value
   70|   644k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 643k, False: 929]
  ------------------
   71|   643k|                    {
   72|   643k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   643k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   643k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 11, False: 643k]
  ------------------
   77|     11|                        {
   78|     11|                            return detail::ErrorString;
   79|     11|                        }
   80|   643k|                    }
   81|   644k|                    break;
   82|   644k|                }
   83|       |
   84|       |                // Int Register
   85|   644k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 140k, False: 2.10M]
  ------------------
   86|       |                    // Has one more value
   87|   140k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 140k, False: 81]
  ------------------
   88|   140k|                    {
   89|   140k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   140k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   140k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 12, False: 140k]
  ------------------
   93|     12|                        {
   94|     12|                            return detail::ErrorString;
   95|     12|                        }
   96|   140k|                    }
   97|   140k|                    break;
   98|   140k|                }
   99|       |
  100|       |                // Float register
  101|   140k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 29.8k, False: 2.21M]
  ------------------
  102|       |                    // Has one more value
  103|  29.8k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 29.8k, False: 49]
  ------------------
  104|  29.8k|                    {
  105|  29.8k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  29.8k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  29.8k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 9, False: 29.8k]
  ------------------
  109|      9|                        {
  110|      9|                            return detail::ErrorString;
  111|      9|                        }
  112|  29.8k|                    }
  113|  29.8k|                    break;
  114|  29.8k|                }
  115|       |
  116|       |                // Floating point status register
  117|  36.2k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 36.2k, False: 2.20M]
  ------------------
  118|  36.2k|                    ret += "FPSR";
  119|  36.2k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 1, False: 36.2k]
  ------------------
  120|      1|                    {
  121|      1|                        return detail::ErrorString;
  122|      1|                    }
  123|       |
  124|  36.2k|                    break;
  125|  36.2k|                }
  126|       |
  127|       |                // Immediate integer
  128|  37.9k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 37.9k, False: 2.20M]
  ------------------
  129|  37.9k|                    ret += "#";
  130|  37.9k|                    [[fallthrough]];
  131|  37.9k|                }
  132|       |
  133|       |                // Integer literal
  134|   121k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 83.7k, False: 2.15M]
  ------------------
  135|   121k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   121k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 121k, False: 178]
  ------------------
  138|   121k|                    {
  139|   121k|                        std::int16_t value = 0;
  140|       |
  141|   364k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 242k, False: 121k]
  ------------------
  142|   242k|                        {
  143|   242k|                            value <<= 8;
  144|   242k|                            value &= data[index++];
  145|   242k|                        }
  146|       |
  147|   121k|                        ret += std::to_string(value);
  148|   121k|                    }
  149|   121k|                    break;
  150|  37.9k|                }
  151|       |
  152|       |                // Label
  153|  24.4k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 24.4k, False: 2.21M]
  ------------------
  154|  24.4k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  24.4k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 24.4k, False: 6]
  ------------------
  157|  24.4k|                    {
  158|  24.4k|                        std::string label_name = "lbl_";
  159|       |
  160|   145k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 121k, False: 24.4k]
  ------------------
  161|   121k|                        {
  162|   121k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   121k|                            label_name += c;
  165|   121k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  24.4k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 24.2k, False: 194]
  |  Branch (168:45): [True: 17.1k, False: 7.09k]
  ------------------
  169|  17.1k|                        {
  170|  17.1k|                            label_name += ':';
  171|  17.1k|                            ret += label_name;
  172|  17.1k|                        }
  173|  7.28k|                        else
  174|  7.28k|                        {
  175|  7.28k|                            ret += label_name;
  176|  7.28k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 13, False: 7.27k]
  ------------------
  177|     13|                            {
  178|     13|                                return detail::ErrorString;
  179|     13|                            }
  180|  7.28k|                        }
  181|  24.4k|                    }
  182|  24.3k|                    break;
  183|  24.4k|                }
  184|       |
  185|       |                // Newline
  186|   882k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 882k, False: 1.35M]
  ------------------
  187|   882k|                    ret += '\n';
  188|   882k|                    break;
  189|  24.4k|                }
  190|       |
  191|       |                // Comment
  192|   360k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 360k, False: 1.87M]
  ------------------
  193|   360k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   360k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 360k, False: 238]
  ------------------
  196|   360k|                    {
  197|   360k|                        std::string comment = "; ";
  198|       |
  199|  2.16M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 1.79M, False: 360k]
  ------------------
  200|  1.79M|                        {
  201|  1.79M|                            comment += static_cast<char>(data[index++]);
  202|  1.79M|                        }
  203|       |
  204|   360k|                        ret += comment + '\n';
  205|   360k|                    }
  206|   360k|                    break;
  207|  24.4k|                }
  208|       |
  209|       |                // Ignore
  210|      7|                default:
  ------------------
  |  Branch (210:17): [True: 7, False: 2.24M]
  ------------------
  211|      7|                    return detail::ErrorString;
  212|  2.24M|            }
  213|  2.24M|        }
  214|       |
  215|  9.77k|        return ret;
  216|  9.82k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   857k|        {
   20|   857k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 854k, False: 2.72k]
  ------------------
   21|   854k|            {
   22|   854k|                std::uint8_t val = data[index++];
   23|   854k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 670k, False: 184k]
  ------------------
   24|   670k|                {
   25|   670k|                    text += ' ';
   26|   670k|                }
   27|   184k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 184k, False: 46]
  ------------------
   28|   184k|                {
   29|   184k|                    text += ',';
   30|   184k|                }
   31|     46|                else
   32|     46|                {
   33|     46|                    return false;
   34|     46|                }
   35|   854k|            }
   36|       |
   37|   857k|            return true;
   38|   857k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   121k|        {
   42|   121k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 97.3k, False: 24.2k]
  ------------------
   43|  97.3k|            {
   44|  97.3k|                return '_';
   45|  97.3k|            }
   46|       |
   47|  24.2k|            return c;
   48|   121k|        }

LLVMFuzzerTestOneInput:
   12|  9.82k|{
   13|  9.82k|    static dlxemu::Emulator emu;
   14|       |
   15|  9.82k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  9.82k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  9.82k|    editor.SetText(source);
   21|  9.82k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  9.82k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  9.82k|    editor.ColorizeInternal();
   26|       |
   27|  9.82k|    return 0;
   28|  9.82k|}


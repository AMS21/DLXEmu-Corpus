_ZN6dlxemu6WindowC2Ev:
   13|      1|        Window() = default;

_ZN6dlxemu10CodeEditor11CoordinatesC2Ev:
  194|      5|    {}
_ZN6dlxemu10CodeEditor11CoordinatesC2EN3phi7integerIjEES4_:
  199|  90.0k|    {}
_ZNK6dlxemu10CodeEditor11CoordinatesleERKS1_:
  237|  18.0k|    {
  238|  18.0k|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (238:13): [True: 12.8k, False: 5.19k]
  ------------------
  239|  12.8k|        {
  240|  12.8k|            return m_Line < other.m_Line;
  241|  12.8k|        }
  242|       |
  243|  5.19k|        return m_Column <= other.m_Column;
  244|  18.0k|    }
_ZNK6dlxemu10CodeEditor11CoordinatesgeERKS1_:
  248|      1|    {
  249|      1|        if (m_Line != other.m_Line)
  ------------------
  |  Branch (249:13): [True: 0, False: 1]
  ------------------
  250|      0|        {
  251|      0|            return m_Line > other.m_Line;
  252|      0|        }
  253|       |
  254|      1|        return m_Column >= other.m_Column;
  255|      1|    }
_ZN6dlxemu10CodeEditor5GlyphC2EhNS0_12PaletteIndexE:
  262|  7.20M|    {}
_ZN6dlxemu10CodeEditorC2EPNS_8EmulatorE:
  290|      1|    {
  291|      1|        Colorize();
  292|      1|        m_Lines.push_back(Line());
  293|      1|    }
_ZN6dlxemu10CodeEditorD2Ev:
  296|      1|    {
  297|      1|        VerifyInternalState();
  298|      1|    }
_ZN6dlxemu10CodeEditor17ClearErrorMarkersEv:
  346|  18.0k|    {
  347|  18.0k|        m_ErrorMarkers.clear();
  348|  18.0k|    }
_ZN6dlxemu10CodeEditor16ClearBreakPointsEv:
  411|  18.0k|    {
  412|  18.0k|        m_Breakpoints.clear();
  413|  18.0k|    }
_ZN6dlxemu10CodeEditor7SetTextERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE:
  508|  18.0k|    {
  509|  18.0k|        m_Lines.clear();
  510|  18.0k|        ResetState();
  511|  18.0k|        m_Lines.emplace_back(Line());
  512|       |
  513|  18.0k|        for (const char character : text)
  ------------------
  |  Branch (513:35): [True: 9.82M, False: 18.0k]
  ------------------
  514|  9.82M|        {
  515|  9.82M|            if (character == '\r' ||
  ------------------
  |  Branch (515:17): [True: 929, False: 9.82M]
  |  Branch (515:17): [True: 533k, False: 9.29M]
  ------------------
  516|  9.82M|                (phi::is_control(character) && character != '\n' && character != '\t'))
  ------------------
  |  Branch (516:18): [True: 2.62M, False: 7.20M]
  |  Branch (516:48): [True: 537k, False: 2.08M]
  |  Branch (516:69): [True: 532k, False: 5.48k]
  ------------------
  517|   533k|            {
  518|       |                // ignore the carriage return character and control characters
  519|   533k|            }
  520|  9.29M|            else if (character == '\n')
  ------------------
  |  Branch (520:22): [True: 2.08M, False: 7.20M]
  ------------------
  521|  2.08M|            {
  522|  2.08M|                m_Lines.emplace_back(Line());
  523|  2.08M|            }
  524|  7.20M|            else
  525|  7.20M|            {
  526|  7.20M|                m_Lines.back().emplace_back(
  527|  7.20M|                        Glyph(static_cast<Char>(character), PaletteIndex::Default));
  528|  7.20M|            }
  529|  9.82M|        }
  530|       |
  531|  18.0k|        m_TextChanged = true;
  532|  18.0k|        m_ScrollToTop = true;
  533|       |
  534|  18.0k|        m_UndoBuffer.clear();
  535|  18.0k|        m_UndoIndex = 0u;
  536|       |
  537|  18.0k|        Colorize();
  538|  18.0k|    }
_ZNK6dlxemu10CodeEditor7GetTextEv:
  541|  18.0k|    {
  542|  18.0k|        const phi::u32 max_line = GetMaxLineNumber();
  543|       |
  544|  18.0k|        return GetText(Coordinates(0u, 0u), Coordinates(max_line, GetLineMaxColumn(max_line)));
  545|  18.0k|    }
_ZNK6dlxemu10CodeEditor19VerifyInternalStateEv:
 1505|      1|    {
 1506|       |        // Lines should never be empty
 1507|      1|        PHI_ASSERT(!m_Lines.empty());
 1508|       |
 1509|       |        // Verify Selection is still in a valid state
 1510|      1|        PHI_ASSERT(m_State.m_SelectionEnd >= m_State.m_SelectionStart);
 1511|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Line < m_Lines.size());
 1512|      1|        PHI_ASSERT(m_State.m_SelectionStart.m_Column >= 0u);
 1513|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Line < m_Lines.size());
 1514|      1|        PHI_ASSERT(m_State.m_SelectionEnd.m_Column >= 0u);
 1515|       |
 1516|       |        // Verify cursor position
 1517|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line >= 0u);
 1518|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Line < m_Lines.size());
 1519|      1|        PHI_ASSERT(m_State.m_CursorPosition.m_Column >= 0u);
 1520|       |
 1521|       |        // This should also always be true. But its implementation is way to slow when fuzzing
 1522|       |#if defined(DLXEMU_VERIFY_COLUMN)
 1523|       |        PHI_ASSERT(m_State.m_SelectionStart.m_Column <=
 1524|       |                   GetLineMaxColumn(m_State.m_SelectionStart.m_Line));
 1525|       |        PHI_ASSERT(m_State.m_SelectionEnd.m_Column <=
 1526|       |                   GetLineMaxColumn(m_State.m_SelectionEnd.m_Line));
 1527|       |#endif
 1528|       |
 1529|       |        // Verify that all breakpoints are on existing lines
 1530|      1|        for (phi::u32 break_point : m_Breakpoints)
  ------------------
  |  Branch (1530:35): [True: 0, False: 1]
  ------------------
 1531|      0|        {
 1532|      0|            PHI_ASSERT(break_point != 0u);
 1533|      0|            PHI_ASSERT(break_point <= m_Lines.size());
 1534|      0|        }
 1535|       |
 1536|       |        // Verify that all error markers are on existing lines
 1537|      1|        for (auto&& error_marker : m_ErrorMarkers)
  ------------------
  |  Branch (1537:34): [True: 0, False: 1]
  ------------------
 1538|      0|        {
 1539|      0|            const phi::u32 line_number = error_marker.first;
 1540|       |
 1541|      0|            PHI_ASSERT(line_number != 0u);
 1542|      0|            PHI_ASSERT(line_number <= m_Lines.size());
 1543|      0|        }
 1544|      1|    }
_ZN6dlxemu10CodeEditor14GetDarkPaletteEv:
 1547|      1|    {
 1548|      1|        constexpr const static Palette palette = {{
 1549|      1|                0xff7f7f7f, // Default
 1550|      1|                0xffd69c56, // OpCode
 1551|      1|                0xff00ff00, // Register
 1552|      1|                0xff7070e0, // IntegerLiteral
 1553|      1|                0xff206020, // Comment
 1554|      1|                0xff101010, // Background
 1555|      1|                0xffe0e0e0, // Cursor
 1556|      1|                0x80a06020, // Selection
 1557|      1|                0x800020ff, // ErrorMarker
 1558|      1|                0x40f08000, // Breakpoint
 1559|      1|                0xff707000, // Line number
 1560|      1|                0x40000000, // Current line fill
 1561|      1|                0x40808080, // Current line fill (inactive)
 1562|      1|                0x40a0a0a0, // Current line edge
 1563|      1|        }};
 1564|       |
 1565|      1|        return palette;
 1566|      1|    }
_ZN6dlxemu10CodeEditor8ColorizeEN3phi7integerIjEENS2_IlEE:
 1733|  18.0k|    {
 1734|       |        // TODO: This is quite unreadable
 1735|  18.0k|        const phi::u32 to_line =
 1736|  18.0k|                count == -1 ? static_cast<phi::uint32_t>(m_Lines.size()) :
  ------------------
  |  Branch (1736:17): [True: 18.0k, False: 0]
  ------------------
 1737|  18.0k|                              phi::min(static_cast<phi::uint32_t>(m_Lines.size()),
 1738|      0|                                       from_line + static_cast<phi::uint32_t>(count.unsafe()));
 1739|       |
 1740|  18.0k|        m_ColorRangeMin = phi::min(m_ColorRangeMin, from_line);
 1741|  18.0k|        m_ColorRangeMax = phi::max(m_ColorRangeMax, to_line);
 1742|  18.0k|        m_ColorRangeMin = phi::max(0u, m_ColorRangeMin);
 1743|  18.0k|        m_ColorRangeMax = phi::max(m_ColorRangeMin, m_ColorRangeMax);
 1744|  18.0k|    }
_ZNK6dlxemu10CodeEditor7GetTextERKNS0_11CoordinatesES3_:
 1850|  18.0k|    {
 1851|  18.0k|        PHI_ASSERT(start.m_Line < m_Lines.size());
 1852|  18.0k|        PHI_ASSERT(end.m_Line < m_Lines.size());
 1853|  18.0k|        PHI_ASSERT(start <= end);
 1854|       |
 1855|  18.0k|        std::string result;
 1856|       |
 1857|  18.0k|        phi::u32   lstart = start.m_Line;
 1858|  18.0k|        phi::u32   lend   = end.m_Line;
 1859|  18.0k|        phi::u32   istart = GetCharacterIndex(start);
 1860|  18.0k|        phi::u32   iend   = phi::min(GetCharacterIndex(end),
 1861|  18.0k|                                     static_cast<phi::uint32_t>(m_Lines[end.m_Line.unsafe()].size()));
 1862|  18.0k|        phi::usize size   = 0u;
 1863|       |
 1864|  2.12M|        for (phi::u32 i = lstart; i <= lend; ++i)
  ------------------
  |  Branch (1864:35): [True: 2.10M, False: 18.0k]
  ------------------
 1865|  2.10M|        {
 1866|  2.10M|            PHI_ASSERT(i < m_Lines.size());
 1867|  2.10M|            size += m_Lines[i.unsafe()].size();
 1868|  2.10M|        }
 1869|       |
 1870|  18.0k|        result.reserve((size + size / 8u).unsafe());
 1871|       |
 1872|  9.31M|        while (istart < iend || lstart < lend)
  ------------------
  |  Branch (1872:16): [True: 4.09M, False: 5.21M]
  |  Branch (1872:16): [True: 9.29M, False: 18.0k]
  |  Branch (1872:33): [True: 5.19M, False: 18.0k]
  ------------------
 1873|  9.29M|        {
 1874|  9.29M|            PHI_ASSERT(lstart < m_Lines.size());
 1875|       |
 1876|  9.29M|            const Line& line = m_Lines[lstart.unsafe()];
 1877|  9.29M|            if (istart < line.size())
  ------------------
  |  Branch (1877:17): [True: 7.20M, False: 2.08M]
  ------------------
 1878|  7.20M|            {
 1879|  7.20M|                result += static_cast<char>(line[istart.unsafe()].m_Char);
 1880|  7.20M|                istart++;
 1881|  7.20M|            }
 1882|  2.08M|            else
 1883|  2.08M|            {
 1884|  2.08M|                istart = 0u;
 1885|  2.08M|                ++lstart;
 1886|       |
 1887|  2.08M|                if (lstart != m_Lines.size())
  ------------------
  |  Branch (1887:21): [True: 2.08M, False: 0]
  ------------------
 1888|  2.08M|                {
 1889|  2.08M|                    result += '\n';
 1890|  2.08M|                }
 1891|  2.08M|            }
 1892|  9.29M|        }
 1893|       |
 1894|  18.0k|        return result;
 1895|  18.0k|    }
_ZNK6dlxemu10CodeEditor17GetCharacterIndexERKNS0_11CoordinatesE:
 2431|  36.0k|    {
 2432|  36.0k|        PHI_ASSERT(coordinates.m_Line < m_Lines.size());
 2433|       |
 2434|  36.0k|        const Line& line  = m_Lines[coordinates.m_Line.unsafe()];
 2435|  36.0k|        phi::u32    index = 0u;
 2436|  2.15M|        for (phi::u32 column{0u}; index < line.size() && column < coordinates.m_Column;)
  ------------------
  |  Branch (2436:35): [True: 2.13M, False: 21.9k]
  |  Branch (2436:35): [True: 2.12M, False: 36.0k]
  |  Branch (2436:58): [True: 2.12M, False: 14.0k]
  ------------------
 2437|  2.12M|        {
 2438|  2.12M|            PHI_ASSERT(index < line.size());
 2439|  2.12M|            const Char character = line[index.unsafe()].m_Char;
 2440|       |
 2441|  2.12M|            if (character == '\t')
  ------------------
  |  Branch (2441:17): [True: 0, False: 2.12M]
  ------------------
 2442|      0|            {
 2443|      0|                column = (column / m_TabSize) * m_TabSize + m_TabSize;
 2444|      0|            }
 2445|  2.12M|            else
 2446|  2.12M|            {
 2447|  2.12M|                ++column;
 2448|  2.12M|            }
 2449|       |
 2450|  2.12M|            index += UTF8CharLength(character);
 2451|  2.12M|        }
 2452|       |
 2453|  36.0k|        return index;
 2454|  36.0k|    }
_ZNK6dlxemu10CodeEditor16GetLineMaxColumnEN3phi7integerIjEE:
 2503|  18.0k|    {
 2504|  18.0k|        if (line_number >= m_Lines.size())
  ------------------
  |  Branch (2504:13): [True: 0, False: 18.0k]
  ------------------
 2505|      0|        {
 2506|      0|            return 0u;
 2507|      0|        }
 2508|       |
 2509|  18.0k|        const Line& line = m_Lines[line_number.unsafe()];
 2510|  18.0k|        phi::u32    col  = 0u;
 2511|       |
 2512|  2.14M|        for (phi::usize i{0u}; i < line.size();)
  ------------------
  |  Branch (2512:32): [True: 2.12M, False: 18.0k]
  ------------------
 2513|  2.12M|        {
 2514|  2.12M|            char character = static_cast<char>(line[i.unsafe()].m_Char);
 2515|  2.12M|            if (character == '\t')
  ------------------
  |  Branch (2515:17): [True: 0, False: 2.12M]
  ------------------
 2516|      0|            {
 2517|      0|                col = (col / m_TabSize) * m_TabSize + m_TabSize;
 2518|      0|            }
 2519|  2.12M|            else
 2520|  2.12M|            {
 2521|  2.12M|                col++;
 2522|  2.12M|            }
 2523|       |
 2524|  2.12M|            i += UTF8CharLength(character);
 2525|  2.12M|        }
 2526|       |
 2527|  18.0k|        return col;
 2528|  18.0k|    }
_ZNK6dlxemu10CodeEditor16GetMaxLineNumberEv:
 2531|  18.0k|    {
 2532|  18.0k|        PHI_ASSERT(!m_Lines.empty());
 2533|       |
 2534|  18.0k|        return static_cast<phi::uint32_t>(m_Lines.size() - 1u);
 2535|  18.0k|    }
_ZN6dlxemu10CodeEditor13ColorizeTokenERKN3dlx5TokenE:
 3663|  4.36M|    {
 3664|  4.36M|        PaletteIndex palette_index{PaletteIndex::Default};
 3665|       |
 3666|       |        // Determine palette color
 3667|  4.36M|        switch (token.GetType())
 3668|  4.36M|        {
 3669|   409k|            case dlx::Token::Type::Comment:
  ------------------
  |  Branch (3669:13): [True: 409k, False: 3.95M]
  ------------------
 3670|   409k|                palette_index = PaletteIndex::Comment;
 3671|   409k|                break;
 3672|  37.1k|            case dlx::Token::Type::ImmediateInteger:
  ------------------
  |  Branch (3672:13): [True: 37.1k, False: 4.32M]
  ------------------
 3673|  85.3k|            case dlx::Token::Type::IntegerLiteral:
  ------------------
  |  Branch (3673:13): [True: 48.2k, False: 4.31M]
  ------------------
 3674|  85.3k|                palette_index = PaletteIndex::IntegerLiteral;
 3675|  85.3k|                break;
 3676|   925k|            case dlx::Token::Type::OpCode:
  ------------------
  |  Branch (3676:13): [True: 925k, False: 3.43M]
  ------------------
 3677|   925k|                palette_index = PaletteIndex::OpCode;
 3678|   925k|                break;
 3679|  33.6k|            case dlx::Token::Type::RegisterFloat:
  ------------------
  |  Branch (3679:13): [True: 33.6k, False: 4.32M]
  ------------------
 3680|   216k|            case dlx::Token::Type::RegisterInt:
  ------------------
  |  Branch (3680:13): [True: 182k, False: 4.17M]
  ------------------
 3681|   251k|            case dlx::Token::Type::RegisterStatus:
  ------------------
  |  Branch (3681:13): [True: 35.9k, False: 4.32M]
  ------------------
 3682|   251k|                palette_index = PaletteIndex::Register;
 3683|   251k|                break;
 3684|  2.08M|            case dlx::Token::Type::NewLine:
  ------------------
  |  Branch (3684:13): [True: 2.08M, False: 2.27M]
  ------------------
 3685|  2.08M|                return;
 3686|   601k|            default:
  ------------------
  |  Branch (3686:13): [True: 601k, False: 3.75M]
  ------------------
 3687|   601k|                break;
 3688|  4.36M|        }
 3689|       |
 3690|  2.27M|        PHI_ASSERT(token.GetLineNumber() - 1u < m_Lines.size());
 3691|  2.27M|        Line& line = m_Lines[(token.GetLineNumber() - 1u).unsafe()];
 3692|       |
 3693|  2.27M|        for (phi::u64 index{token.GetColumn() - 1u};
 3694|  8.59M|             index < token.GetColumn() + token.GetLength() - 1u; ++index)
  ------------------
  |  Branch (3694:14): [True: 6.32M, False: 2.27M]
  ------------------
 3695|  6.32M|        {
 3696|  6.32M|            PHI_ASSERT(index < line.size());
 3697|  6.32M|            line[index.unsafe()].m_ColorIndex = palette_index;
 3698|  6.32M|        }
 3699|  2.27M|    }
_ZN6dlxemu10CodeEditor16ColorizeInternalEv:
 3702|  18.0k|    {
 3703|  18.0k|        const dlx::ParsedProgram& program = m_Emulator->GetProgram();
 3704|       |
 3705|  18.0k|        for (const dlx::Token& token : program.m_Tokens)
  ------------------
  |  Branch (3705:38): [True: 4.36M, False: 18.0k]
  ------------------
 3706|  4.36M|        {
 3707|  4.36M|            ColorizeToken(token);
 3708|  4.36M|        }
 3709|  18.0k|    }
_ZN6dlxemu10CodeEditor10ResetStateEv:
 3712|  18.0k|    {
 3713|  18.0k|        m_State.m_CursorPosition = Coordinates(0u, 0u);
 3714|  18.0k|        m_State.m_SelectionStart = Coordinates(0u, 0u);
 3715|  18.0k|        m_State.m_SelectionEnd   = Coordinates(0u, 0u);
 3716|       |
 3717|       |        // Clear breakpoints and markers
 3718|  18.0k|        ClearBreakPoints();
 3719|  18.0k|        ClearErrorMarkers();
 3720|  18.0k|    }
CodeEditor.cpp:_ZL14UTF8CharLengthh:
  132|  2.12M|{
  133|  2.12M|    return UTF8CharLength(static_cast<char>(characater));
  134|  2.12M|}
CodeEditor.cpp:_ZL14UTF8CharLengthc:
  102|  4.24M|{
  103|  4.24M|    if ((characater & 0xFE) == 0xFC)
  ------------------
  |  Branch (103:9): [True: 0, False: 4.24M]
  ------------------
  104|      0|    {
  105|      0|        return 6_u8;
  106|      0|    }
  107|       |
  108|  4.24M|    if ((characater & 0xFC) == 0xF8)
  ------------------
  |  Branch (108:9): [True: 0, False: 4.24M]
  ------------------
  109|      0|    {
  110|      0|        return 5_u8;
  111|      0|    }
  112|       |
  113|  4.24M|    if ((characater & 0xF8) == 0xF0)
  ------------------
  |  Branch (113:9): [True: 0, False: 4.24M]
  ------------------
  114|      0|    {
  115|      0|        return 4_u8;
  116|      0|    }
  117|       |
  118|  4.24M|    if ((characater & 0xF0) == 0xE0)
  ------------------
  |  Branch (118:9): [True: 0, False: 4.24M]
  ------------------
  119|      0|    {
  120|      0|        return 3_u8;
  121|      0|    }
  122|       |
  123|  4.24M|    if ((characater & 0xE0) == 0xC0)
  ------------------
  |  Branch (123:9): [True: 0, False: 4.24M]
  ------------------
  124|      0|    {
  125|      0|        return 2_u8;
  126|      0|    }
  127|       |
  128|  4.24M|    return 1_u8;
  129|  4.24M|}

_ZN6dlxemu8EmulatorC2Ev:
   43|      1|    {}
_ZNK6dlxemu8Emulator10GetProgramEv:
  174|  18.0k|    {
  175|  18.0k|        return m_DLXProgram;
  176|  18.0k|    }
_ZN6dlxemu8Emulator12ParseProgramENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  179|  18.0k|    {
  180|  18.0k|        m_DLXProgram = dlx::Parser::Parse(source);
  181|       |
  182|  18.0k|        if (m_DLXProgram.m_ParseErrors.empty())
  ------------------
  |  Branch (182:13): [True: 435, False: 17.5k]
  ------------------
  183|    435|        {
  184|    435|            m_Processor.LoadProgram(m_DLXProgram);
  185|    435|        }
  186|  18.0k|    }
_ZN6dlxemu8Emulator9GetEditorEv:
  199|  18.0k|    {
  200|  18.0k|        return m_CodeEditor;
  201|  18.0k|    }

_ZN6dlxemu12MemoryViewerC2EPNS_8EmulatorE:
   13|      1|    {}

_ZN6dlxemu14RegisterViewerC2EPNS_8EmulatorE:
   19|      1|    {}

_ZN6dlxemu6WindowD2Ev:
   37|      1|    {
   38|      1|        Shutdown();
   39|      1|    }
_ZN6dlxemu6Window8ShutdownEv:
  106|      1|    {
  107|      1|        if (imgui_initialized)
  ------------------
  |  Branch (107:13): [True: 0, False: 1]
  ------------------
  108|      0|        {
  109|      0|            ShutdownImGui();
  110|      0|        }
  111|       |
  112|      1|        if (m_Window != nullptr)
  ------------------
  |  Branch (112:13): [True: 0, False: 1]
  ------------------
  113|      0|        {
  114|      0|            glfwDestroyWindow(m_Window);
  115|      0|        }
  116|       |
  117|      1|        if (glfw_initialized)
  ------------------
  |  Branch (117:13): [True: 0, False: 1]
  ------------------
  118|      0|        {
  119|      0|            glfwTerminate();
  120|      0|        }
  121|      1|    }

_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   758k|        {
  169|   758k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   758k|            switch (index.unsafe())
  172|   758k|            {
  173|   321k|                case 0:
  ------------------
  |  Branch (173:17): [True: 321k, False: 436k]
  ------------------
  174|   321k|                    return m_Arg1Type;
  175|       |
  176|   221k|                case 1:
  ------------------
  |  Branch (176:17): [True: 221k, False: 536k]
  ------------------
  177|   221k|                    return m_Arg2Type;
  178|       |
  179|   215k|                case 2:
  ------------------
  |  Branch (179:17): [True: 215k, False: 543k]
  ------------------
  180|   215k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 758k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   758k|#endif
  187|   758k|            }
  188|   758k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   209k|        {
  195|   209k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   209k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 208k, False: 1.07k]
  ------------------
  199|   208k|            {
  200|   208k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   208k|            }
  202|   209k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 163k, False: 45.6k]
  ------------------
  203|   163k|            {
  204|   163k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   163k|            }
  206|   209k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 116k, False: 92.7k]
  ------------------
  207|   116k|            {
  208|   116k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   116k|            }
  210|       |
  211|   209k|            return number_of_argument_required;
  212|   209k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   209k|        {
  221|   209k|            return m_Executor;
  222|   209k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  74.2k|    {
   38|  74.2k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  74.2k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  74.2k|                                         static_cast<underlying_t>(rhs));
   42|  74.2k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  74.2k|    {
   55|  74.2k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  74.2k|        return static_cast<underlying_t>(type & test) != 0;
   58|  74.2k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   857k|    {
  204|   857k|        switch (value)
  205|   857k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   477k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   477k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 477k, False: 379k]
  |  |  |  |  ------------------
  |  |  |  |  208|   477k|        return #name;
  |  |  ------------------
  |  |   16|   477k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  20.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 20.4k, False: 837k]
  |  |  |  |  ------------------
  |  |  |  |  208|  20.4k|        return #name;
  |  |  ------------------
  |  |   17|  20.4k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  8.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.33k, False: 849k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.33k|        return #name;
  |  |  ------------------
  |  |   18|  21.0k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  21.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 21.0k, False: 836k]
  |  |  |  |  ------------------
  |  |  |  |  208|  21.0k|        return #name;
  |  |  ------------------
  |  |   19|  21.0k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  12.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12.5k, False: 845k]
  |  |  |  |  ------------------
  |  |  |  |  208|  12.5k|        return #name;
  |  |  ------------------
  |  |   20|  12.5k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.57k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.57k|        return #name;
  |  |  ------------------
  |  |   21|  4.57k|                                                                                                   \
  |  |   22|  4.57k|    /* Sub */                                                                                      \
  |  |   23|  9.15k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  9.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.15k, False: 848k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.15k|        return #name;
  |  |  ------------------
  |  |   24|  9.15k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  6.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.25k, False: 851k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.25k|        return #name;
  |  |  ------------------
  |  |   25|  7.51k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.51k, False: 850k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.51k|        return #name;
  |  |  ------------------
  |  |   26|  7.96k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  7.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.96k, False: 849k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.96k|        return #name;
  |  |  ------------------
  |  |   27|  9.58k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  9.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.58k, False: 848k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.58k|        return #name;
  |  |  ------------------
  |  |   28|  9.58k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    346|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 346, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    346|        return #name;
  |  |  ------------------
  |  |   29|    346|                                                                                                   \
  |  |   30|    346|    /* Multiplication */                                                                           \
  |  |   31|  1.42k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.42k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.42k|        return #name;
  |  |  ------------------
  |  |   32|  1.42k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.13k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.13k|        return #name;
  |  |  ------------------
  |  |   33|  1.46k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.46k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.46k|        return #name;
  |  |  ------------------
  |  |   34|  2.50k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.50k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.50k|        return #name;
  |  |  ------------------
  |  |   35|  4.57k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.57k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.57k|        return #name;
  |  |  ------------------
  |  |   36|  4.57k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    992|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 992, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|    992|        return #name;
  |  |  ------------------
  |  |   37|    992|                                                                                                   \
  |  |   38|    992|    /* Division */                                                                                 \
  |  |   39|  1.56k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.56k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.56k|        return #name;
  |  |  ------------------
  |  |   40|  1.56k|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.03k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.03k|        return #name;
  |  |  ------------------
  |  |   41|  5.75k|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.75k, False: 852k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.75k|        return #name;
  |  |  ------------------
  |  |   42|  5.75k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.58k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.58k|        return #name;
  |  |  ------------------
  |  |   43|  2.58k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    547|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 547, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    547|        return #name;
  |  |  ------------------
  |  |   44|  4.28k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.28k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.28k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.28k|        return #name;
  |  |  ------------------
  |  |   45|  4.28k|                                                                                                   \
  |  |   46|  4.28k|    /* Shift left (logical) */                                                                     \
  |  |   47|  5.58k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.58k, False: 852k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.58k|        return #name;
  |  |  ------------------
  |  |   48|  5.58k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.37k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.37k|        return #name;
  |  |  ------------------
  |  |   49|  2.37k|                                                                                                   \
  |  |   50|  2.37k|    /* Shift right (logical) */                                                                    \
  |  |   51|  2.37k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    613|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 613, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    613|        return #name;
  |  |  ------------------
  |  |   52|  2.16k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.16k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.16k|        return #name;
  |  |  ------------------
  |  |   53|  2.16k|                                                                                                   \
  |  |   54|  2.16k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  2.16k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.60k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.60k|        return #name;
  |  |  ------------------
  |  |   56|  3.23k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.23k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.23k|        return #name;
  |  |  ------------------
  |  |   57|  3.23k|                                                                                                   \
  |  |   58|  3.23k|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|  3.23k|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.69k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.69k|        return #name;
  |  |  ------------------
  |  |   60|  2.08k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.08k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.08k|        return #name;
  |  |  ------------------
  |  |   61|  2.08k|                                                                                                   \
  |  |   62|  2.08k|    /* Logic */                                                                                    \
  |  |   63|  2.08k|                                                                                                   \
  |  |   64|  2.08k|    /* And */                                                                                      \
  |  |   65|  6.42k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  6.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.42k, False: 851k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.42k|        return #name;
  |  |  ------------------
  |  |   66|  6.42k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.76k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.76k|        return #name;
  |  |  ------------------
  |  |   67|  2.76k|                                                                                                   \
  |  |   68|  2.76k|    /* Or */                                                                                       \
  |  |   69|  2.76k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.07k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.07k|        return #name;
  |  |  ------------------
  |  |   70|  2.15k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.15k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.15k|        return #name;
  |  |  ------------------
  |  |   71|  2.15k|                                                                                                   \
  |  |   72|  2.15k|    /* XOR */                                                                                      \
  |  |   73|  3.66k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.66k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.66k|        return #name;
  |  |  ------------------
  |  |   74|  3.66k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 156, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    156|        return #name;
  |  |  ------------------
  |  |   75|    156|                                                                                                   \
  |  |   76|    156|    /* Set conditionals */                                                                         \
  |  |   77|    156|                                                                                                   \
  |  |   78|    156|    /* Less than */                                                                                \
  |  |   79|    879|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    879|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 879, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|    879|        return #name;
  |  |  ------------------
  |  |   80|  1.82k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.82k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.82k|        return #name;
  |  |  ------------------
  |  |   81|  1.82k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    225|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 225, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    225|        return #name;
  |  |  ------------------
  |  |   82|  1.70k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.70k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.70k|        return #name;
  |  |  ------------------
  |  |   83|  1.70k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.30k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.30k|        return #name;
  |  |  ------------------
  |  |   84|  2.62k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.62k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.62k|        return #name;
  |  |  ------------------
  |  |   85|  2.62k|                                                                                                   \
  |  |   86|  2.62k|    /* Greater than */                                                                             \
  |  |   87|  2.62k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.13k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.13k|        return #name;
  |  |  ------------------
  |  |   88|  2.94k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.94k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.94k|        return #name;
  |  |  ------------------
  |  |   89|  2.94k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.17k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.17k|        return #name;
  |  |  ------------------
  |  |   90|  8.81k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  8.81k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.81k, False: 849k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.81k|        return #name;
  |  |  ------------------
  |  |   91|  12.6k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  12.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12.6k, False: 845k]
  |  |  |  |  ------------------
  |  |  |  |  208|  12.6k|        return #name;
  |  |  ------------------
  |  |   92|  12.6k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.81k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.81k, False: 852k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.81k|        return #name;
  |  |  ------------------
  |  |   93|  5.81k|                                                                                                   \
  |  |   94|  5.81k|    /* Less than or equal */                                                                       \
  |  |   95|  5.81k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.52k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.52k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.52k|        return #name;
  |  |  ------------------
  |  |   96|  14.1k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  14.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 14.1k, False: 843k]
  |  |  |  |  ------------------
  |  |  |  |  208|  14.1k|        return #name;
  |  |  ------------------
  |  |   97|  14.1k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.87k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.87k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.87k|        return #name;
  |  |  ------------------
  |  |   98|  4.37k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.37k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.37k|        return #name;
  |  |  ------------------
  |  |   99|  4.37k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.98k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.98k|        return #name;
  |  |  ------------------
  |  |  100|  9.06k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  9.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.06k, False: 848k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.06k|        return #name;
  |  |  ------------------
  |  |  101|  9.06k|                                                                                                   \
  |  |  102|  9.06k|    /* Greater than or equal */                                                                    \
  |  |  103|  9.06k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.36k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.36k|        return #name;
  |  |  ------------------
  |  |  104|  2.36k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    688|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 688, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    688|        return #name;
  |  |  ------------------
  |  |  105|  4.46k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.46k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.46k|        return #name;
  |  |  ------------------
  |  |  106|  8.50k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  8.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.50k, False: 849k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.50k|        return #name;
  |  |  ------------------
  |  |  107|  8.50k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.13k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.13k|        return #name;
  |  |  ------------------
  |  |  108|  2.28k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.28k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.28k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.28k|        return #name;
  |  |  ------------------
  |  |  109|  2.28k|                                                                                                   \
  |  |  110|  2.28k|    /* Equal */                                                                                    \
  |  |  111|  2.28k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.56k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.56k|        return #name;
  |  |  ------------------
  |  |  112|  4.38k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.38k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.38k|        return #name;
  |  |  ------------------
  |  |  113|  4.38k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.09k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.09k|        return #name;
  |  |  ------------------
  |  |  114|  4.78k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.78k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.78k|        return #name;
  |  |  ------------------
  |  |  115|  4.78k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    844|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 844, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|    844|        return #name;
  |  |  ------------------
  |  |  116|    844|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 107, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    107|        return #name;
  |  |  ------------------
  |  |  117|    107|                                                                                                   \
  |  |  118|    107|    /* Not equal */                                                                                \
  |  |  119|    543|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    543|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 543, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    543|        return #name;
  |  |  ------------------
  |  |  120|    543|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    453|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 453, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    453|        return #name;
  |  |  ------------------
  |  |  121|  1.56k|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.56k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.56k|        return #name;
  |  |  ------------------
  |  |  122|  1.56k|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    405|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 405, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    405|        return #name;
  |  |  ------------------
  |  |  123|  1.39k|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.39k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.39k|        return #name;
  |  |  ------------------
  |  |  124|  1.39k|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    127|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 127, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    127|        return #name;
  |  |  ------------------
  |  |  125|    127|                                                                                                   \
  |  |  126|    127|    /* Conditional branching */                                                                    \
  |  |  127|    255|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    255|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 255, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    255|        return #name;
  |  |  ------------------
  |  |  128|  2.95k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.95k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.95k|        return #name;
  |  |  ------------------
  |  |  129|  7.30k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.30k, False: 850k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.30k|        return #name;
  |  |  ------------------
  |  |  130|  30.2k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  30.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 30.2k, False: 827k]
  |  |  |  |  ------------------
  |  |  |  |  208|  30.2k|        return #name;
  |  |  ------------------
  |  |  131|  30.2k|                                                                                                   \
  |  |  132|  30.2k|    /* Unconditional branching */                                                                  \
  |  |  133|  30.2k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |  134|    443|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    443|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 443, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    443|        return #name;
  |  |  ------------------
  |  |  135|    443|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    203|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 203, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    203|        return #name;
  |  |  ------------------
  |  |  136|    203|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    149|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 149, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    149|        return #name;
  |  |  ------------------
  |  |  137|    149|                                                                                                   \
  |  |  138|    149|    /* Loading data */                                                                             \
  |  |  139|  2.31k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.31k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.31k|        return #name;
  |  |  ------------------
  |  |  140|  4.15k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  4.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.15k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.15k|        return #name;
  |  |  ------------------
  |  |  141|  4.15k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    371|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 371, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    371|        return #name;
  |  |  ------------------
  |  |  142|    778|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    778|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 778, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    778|        return #name;
  |  |  ------------------
  |  |  143|    778|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    605|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 605, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    605|        return #name;
  |  |  ------------------
  |  |  144|    605|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    374|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 374, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    374|        return #name;
  |  |  ------------------
  |  |  145|  2.15k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.15k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.15k|        return #name;
  |  |  ------------------
  |  |  146|  2.15k|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    356|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 356, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    356|        return #name;
  |  |  ------------------
  |  |  147|  3.14k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.14k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.14k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.14k|        return #name;
  |  |  ------------------
  |  |  148|  3.14k|                                                                                                   \
  |  |  149|  3.14k|    /* Storing data */                                                                             \
  |  |  150|  3.14k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    126|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 126, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    126|        return #name;
  |  |  ------------------
  |  |  151|  2.24k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.24k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.24k|        return #name;
  |  |  ------------------
  |  |  152|  2.82k|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.82k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.82k|        return #name;
  |  |  ------------------
  |  |  153|  2.82k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.33k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.33k|        return #name;
  |  |  ------------------
  |  |  154|  2.33k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    309|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 309, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    309|        return #name;
  |  |  ------------------
  |  |  155|  2.96k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.96k, False: 854k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.96k|        return #name;
  |  |  ------------------
  |  |  156|  2.96k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    356|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 356, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    356|        return #name;
  |  |  ------------------
  |  |  157|    587|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    587|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 587, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    587|        return #name;
  |  |  ------------------
  |  |  158|    587|                                                                                                   \
  |  |  159|    587|    /* Moving data */                                                                              \
  |  |  160|  2.39k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.39k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.39k|        return #name;
  |  |  ------------------
  |  |  161|  2.39k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.16k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.16k|        return #name;
  |  |  ------------------
  |  |  162|  1.20k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  1.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.20k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.20k|        return #name;
  |  |  ------------------
  |  |  163|  1.20k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    147|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 147, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    147|        return #name;
  |  |  ------------------
  |  |  164|    147|                                                                                                   \
  |  |  165|    147|    /* Converting data */                                                                          \
  |  |  166|  2.64k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.64k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.64k|        return #name;
  |  |  ------------------
  |  |  167|  2.64k|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  2.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.17k, False: 855k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.17k|        return #name;
  |  |  ------------------
  |  |  168|  3.97k|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  3.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.97k, False: 853k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.97k|        return #name;
  |  |  ------------------
  |  |  169|  3.97k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.20k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.20k|        return #name;
  |  |  ------------------
  |  |  170|  1.20k|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    246|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 246, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    246|        return #name;
  |  |  ------------------
  |  |  171|  1.68k|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.68k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.68k|        return #name;
  |  |  ------------------
  |  |  172|  1.68k|                                                                                                   \
  |  |  173|  1.68k|    /* Other */                                                                                    \
  |  |  174|  1.68k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.59k, False: 856k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.59k|        return #name;
  |  |  ------------------
  |  |  175|  1.59k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    521|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 521, False: 857k]
  |  |  |  |  ------------------
  |  |  |  |  208|    521|        return #name;
  |  |  ------------------
  |  |  176|  6.29k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  6.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.29k, False: 851k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.29k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 857k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   857k|        }
  217|   857k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   132k|    {
   32|   132k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 2.30k, False: 130k]
  ------------------
   33|  2.30k|        {
   34|  2.30k|            return true;
   35|  2.30k|        }
   36|       |
   37|   130k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 106, False: 130k]
  ------------------
   38|    106|        {
   39|    106|            return true;
   40|    106|        }
   41|       |
   42|   130k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 6.24k, False: 123k]
  ------------------
   43|  6.24k|        {
   44|  6.24k|            return true;
   45|  6.24k|        }
   46|       |
   47|   123k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 123k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|   123k|        return false;
   53|   123k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   123k|    {
   57|   123k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 123k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   123k|        const char first_char = token.at(0);
   63|       |
   64|   123k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 18.2k, False: 105k]
  ------------------
   65|  18.2k|        {
   66|  18.2k|            return phi::is_alpha(first_char);
   67|  18.2k|        }
   68|       |
   69|   105k|        phi::boolean just_under_scores = (first_char == '_');
   70|   105k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 32.9k, False: 72.5k]
  |  Branch (70:15): [True: 72.3k, False: 33.1k]
  |  Branch (70:44): [True: 169, False: 32.9k]
  ------------------
   71|  32.9k|        {
   72|  32.9k|            return false;
   73|  32.9k|        }
   74|       |
   75|   267k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 215k, False: 51.4k]
  ------------------
   76|   215k|        {
   77|   215k|            const char c{token.at(index)};
   78|       |
   79|   215k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 106k, False: 109k]
  ------------------
   80|   106k|            {
   81|   106k|                just_under_scores = false;
   82|   106k|            }
   83|   109k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 88.4k, False: 21.1k]
  ------------------
   84|  88.4k|            {
   85|  88.4k|                continue;
   86|  88.4k|            }
   87|  21.1k|            else
   88|  21.1k|            {
   89|  21.1k|                return false;
   90|  21.1k|            }
   91|   215k|        }
   92|       |
   93|  51.4k|        return !just_under_scores;
   94|  72.5k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.57M|    {
  101|  1.57M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.57M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.57M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 88.3k, False: 1.48M]
  ------------------
  107|  88.3k|        {
  108|  88.3k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 52.1k, False: 36.1k]
  ------------------
  109|  52.1k|            {
  110|  52.1k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  52.1k|            }
  112|       |
  113|  36.1k|            return {};
  114|  88.3k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.48M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 2.78k, False: 1.48M]
  ------------------
  118|  2.78k|        {
  119|  2.78k|            return {};
  120|  2.78k|        }
  121|       |
  122|  1.48M|        std::int32_t number{0};
  123|  1.48M|        phi::boolean is_negative{false};
  124|  1.48M|        phi::boolean starts_with_zero{false};
  125|  1.48M|        phi::boolean parsing_binary{false};
  126|  1.48M|        phi::boolean parsing_octal{false};
  127|  1.48M|        phi::boolean parsing_hexadecimal{false};
  128|  1.48M|        phi::boolean parsed_something{false};
  129|  1.48M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.65M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.62M, False: 25.0k]
  ------------------
  134|  1.62M|        {
  135|  1.62M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.62M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.48M, False: 145k]
  ------------------
  139|  1.48M|            {
  140|  1.48M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.93k, False: 1.48M]
  ------------------
  141|  2.93k|                {
  142|  2.93k|                    continue;
  143|  2.93k|                }
  144|       |
  145|  1.48M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 4.54k, False: 1.47M]
  ------------------
  146|  4.54k|                {
  147|  4.54k|                    is_negative = true;
  148|  4.54k|                    continue;
  149|  4.54k|                }
  150|       |
  151|  1.47M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 74.9k, False: 1.40M]
  ------------------
  152|  74.9k|                {
  153|  74.9k|                    starts_with_zero = true;
  154|  74.9k|                    continue;
  155|  74.9k|                }
  156|       |
  157|  1.40M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 440, False: 1.40M]
  ------------------
  158|    440|                {
  159|    440|                    return {};
  160|    440|                }
  161|  1.40M|            }
  162|       |
  163|       |            // Second character
  164|  1.54M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 84.3k, False: 1.46M]
  ------------------
  165|  84.3k|            {
  166|  84.3k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 74.9k, False: 9.41k]
  ------------------
  167|  74.9k|                {
  168|       |                    // Binary
  169|  74.9k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.17k, False: 73.8k]
  |  Branch (169:37): [True: 1.58k, False: 72.2k]
  ------------------
  170|  2.75k|                    {
  171|  2.75k|                        parsing_binary = true;
  172|  2.75k|                        continue;
  173|  2.75k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  72.2k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 4.02k, False: 68.2k]
  |  Branch (176:37): [True: 1.69k, False: 66.5k]
  ------------------
  177|  5.71k|                    {
  178|  5.71k|                        parsing_hexadecimal = true;
  179|  5.71k|                        continue;
  180|  5.71k|                    }
  181|       |
  182|       |                    // Octal
  183|  66.5k|                    parsing_octal = true;
  184|  66.5k|                }
  185|  84.3k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.53M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 2.00k, False: 1.53M]
  ------------------
  189|  2.00k|            {
  190|  2.00k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 104, False: 1.90k]
  ------------------
  191|    104|                {
  192|    104|                    return {};
  193|    104|                }
  194|       |
  195|  1.90k|                parsed_separator = true;
  196|  1.90k|                continue;
  197|  2.00k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.53M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 4.68k, False: 1.53M]
  |  Branch (200:32): [True: 0, False: 4.68k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|  1.53M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.53M, False: 4.68k]
  |  Branch (205:17): [True: 0, False: 1.53M]
  |  Branch (205:33): [True: 0, False: 1.53M]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|  1.53M|            parsed_separator = false;
  212|  1.53M|            parsed_something = true;
  213|       |
  214|  1.53M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.86k, False: 1.53M]
  ------------------
  215|  2.86k|            {
  216|  2.86k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.82k, False: 1.04k]
  ------------------
  217|  1.82k|                {
  218|  1.82k|                    return {};
  219|  1.82k|                }
  220|       |
  221|  1.04k|                number <<= 1;
  222|  1.04k|                number |= (c - '0');
  223|  1.04k|            }
  224|  1.53M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 114k, False: 1.41M]
  ------------------
  225|   114k|            {
  226|   114k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 46.1k, False: 68.2k]
  ------------------
  227|  46.1k|                {
  228|  46.1k|                    return {};
  229|  46.1k|                }
  230|       |
  231|  68.2k|                number <<= 3;
  232|  68.2k|                number |= (c - '0');
  233|  68.2k|            }
  234|  1.41M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 6.39k, False: 1.41M]
  ------------------
  235|  6.39k|            {
  236|  6.39k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 3.47k, False: 2.91k]
  ------------------
  237|  3.47k|                {
  238|  3.47k|                    return {};
  239|  3.47k|                }
  240|       |
  241|  2.91k|                number <<= 4;
  242|  2.91k|                number |= phi::hex_digit_value(c).unsafe();
  243|  2.91k|            }
  244|  1.41M|            else
  245|  1.41M|            {
  246|  1.41M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.40M, False: 6.85k]
  ------------------
  247|  1.40M|                {
  248|  1.40M|                    return {};
  249|  1.40M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  6.85k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 4.09k, False: 2.76k]
  |  Branch (252:36): [True: 1.39k, False: 2.70k]
  ------------------
  253|  1.39k|                {
  254|  1.39k|                    return {};
  255|  1.39k|                }
  256|       |
  257|  5.46k|                number *= 10;
  258|  5.46k|                number += (c - '0');
  259|  5.46k|            }
  260|  1.53M|        }
  261|       |
  262|  25.0k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 24.7k, False: 360]
  ------------------
  263|  24.7k|        {
  264|       |            // Check for over/underflow
  265|  24.7k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 740, False: 23.9k]
  |  Branch (265:32): [True: 0, False: 740]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  24.7k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 23.9k, False: 740]
  |  Branch (270:17): [True: 0, False: 24.7k]
  |  Branch (270:33): [True: 0, False: 23.9k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  24.7k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 740, False: 23.9k]
  ------------------
  277|    740|            {
  278|    740|                return static_cast<std::int16_t>(-number);
  279|    740|            }
  280|       |
  281|  23.9k|            return static_cast<std::int16_t>(number);
  282|  24.7k|        }
  283|       |
  284|    360|        return {};
  285|  25.0k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   202k|    {
   96|   202k|        switch (value)
   97|   202k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  41.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  41.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 41.5k, False: 161k]
  |  |  |  |  ------------------
  |  |  |  |  100|  41.5k|        return #name;
  |  |  ------------------
  |  |   14|   107k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|   107k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 107k, False: 95.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|   107k|        return #name;
  |  |  ------------------
  |  |   15|   107k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    389|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 389, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    389|        return #name;
  |  |  ------------------
  |  |   16|  6.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.24k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.24k, False: 196k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.24k|        return #name;
  |  |  ------------------
  |  |   17|  6.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    183|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 183, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    183|        return #name;
  |  |  ------------------
  |  |   18|    196|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    196|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 196, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    196|        return #name;
  |  |  ------------------
  |  |   19|    934|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    934|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 934, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    934|        return #name;
  |  |  ------------------
  |  |   20|    934|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|    164|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 164, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    164|        return #name;
  |  |  ------------------
  |  |   21|  1.99k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.99k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.99k, False: 200k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.99k|        return #name;
  |  |  ------------------
  |  |   22|  1.99k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    959|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 959, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    959|        return #name;
  |  |  ------------------
  |  |   23|    959|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    335|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 335, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    335|        return #name;
  |  |  ------------------
  |  |   24|    473|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    473|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 473, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    473|        return #name;
  |  |  ------------------
  |  |   25|    473|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 26, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     26|        return #name;
  |  |  ------------------
  |  |   26|     32|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     32|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 32, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     32|        return #name;
  |  |  ------------------
  |  |   27|    359|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    359|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 359, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    359|        return #name;
  |  |  ------------------
  |  |   28|  1.50k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.50k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.50k, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.50k|        return #name;
  |  |  ------------------
  |  |   29|  1.50k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.00k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.00k, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.00k|        return #name;
  |  |  ------------------
  |  |   30|  5.35k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.35k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.35k, False: 197k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.35k|        return #name;
  |  |  ------------------
  |  |   31|  5.35k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     86|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 86, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     86|        return #name;
  |  |  ------------------
  |  |   32|  2.70k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.70k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.70k, False: 199k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.70k|        return #name;
  |  |  ------------------
  |  |   33|  2.70k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 57, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     57|        return #name;
  |  |  ------------------
  |  |   34|    124|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    124|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 124, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|    124|        return #name;
  |  |  ------------------
  |  |   35|  1.02k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.02k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.02k, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.02k|        return #name;
  |  |  ------------------
  |  |   36|  1.67k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.67k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.67k, False: 200k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.67k|        return #name;
  |  |  ------------------
  |  |   37|  1.84k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.84k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.84k, False: 200k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.84k|        return #name;
  |  |  ------------------
  |  |   38|  1.84k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|    995|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 995, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    995|        return #name;
  |  |  ------------------
  |  |   39|    995|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   40|  2.28k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.28k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.28k, False: 200k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.28k|        return #name;
  |  |  ------------------
  |  |   41|  2.28k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.07k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.07k, False: 200k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.07k|        return #name;
  |  |  ------------------
  |  |   42|  2.07k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     61|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 61, False: 202k]
  |  |  |  |  ------------------
  |  |  |  |  100|     61|        return #name;
  |  |  ------------------
  |  |   43|    900|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    900|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 900, False: 201k]
  |  |  |  |  ------------------
  |  |  |  |  100|    900|        return #name;
  |  |  ------------------
  |  |   44|  19.9k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  19.9k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 19.9k, False: 182k]
  |  |  |  |  ------------------
  |  |  |  |  100|  19.9k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 202k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   202k|        }
  109|   202k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  34.8k|    {
  131|  34.8k|        switch (value)
  132|  34.8k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  12.1k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  12.1k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12.1k, False: 22.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  12.1k|        return #name;
  |  |  ------------------
  |  |   48|  12.1k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.82k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.82k, False: 32.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.82k|        return #name;
  |  |  ------------------
  |  |   49|  2.82k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.21k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.21k, False: 32.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.21k|        return #name;
  |  |  ------------------
  |  |   50|  2.21k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|    167|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 167, False: 34.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    167|        return #name;
  |  |  ------------------
  |  |   51|    167|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   52|     75|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     75|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 75, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     75|        return #name;
  |  |  ------------------
  |  |   53|     75|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     27|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 27, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     27|        return #name;
  |  |  ------------------
  |  |   54|     63|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     63|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 63, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     63|        return #name;
  |  |  ------------------
  |  |   55|    587|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    587|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 587, False: 34.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    587|        return #name;
  |  |  ------------------
  |  |   56|    587|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|    105|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 105, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    105|        return #name;
  |  |  ------------------
  |  |   57|  6.09k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|  6.09k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.09k, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.09k|        return #name;
  |  |  ------------------
  |  |   58|  6.09k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|    137|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 137, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    137|        return #name;
  |  |  ------------------
  |  |   59|    137|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   60|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 17, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     17|        return #name;
  |  |  ------------------
  |  |   61|    126|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|    126|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 126, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    126|        return #name;
  |  |  ------------------
  |  |   62|    156|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|    156|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 156, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    156|        return #name;
  |  |  ------------------
  |  |   63|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    166|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 166, False: 34.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    166|        return #name;
  |  |  ------------------
  |  |   64|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   65|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   66|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   67|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   68|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   69|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   70|  1.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.01k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.01k, False: 33.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.01k|        return #name;
  |  |  ------------------
  |  |   71|  1.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   72|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   73|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   74|    102|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|    102|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 102, False: 34.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    102|        return #name;
  |  |  ------------------
  |  |   75|    102|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   76|  1.46k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.46k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.46k, False: 33.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.46k|        return #name;
  |  |  ------------------
  |  |   77|  6.13k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|  6.13k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.13k, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.13k|        return #name;
  |  |  ------------------
  |  |   78|  6.13k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|  1.12k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.12k, False: 33.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.12k|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 34.8k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  34.8k|        }
  144|  34.8k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  47.0k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  47.0k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 1.64M, False: 0]
  ------------------
   64|  1.64M|            {
   65|  1.64M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 47.0k, False: 1.59M]
  ------------------
   66|  47.0k|                {
   67|  47.0k|                    return &token;
   68|  47.0k|                }
   69|  1.64M|            }
   70|       |
   71|      0|            return nullptr;
   72|  47.0k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  2.10M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.10M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.10M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.98M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.98M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.98M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   266k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   266k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   266k|        }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   209k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  32.8k|    {
   24|  32.8k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  32.8k|        switch (argument_number.unsafe())
   27|  32.8k|        {
   28|  24.3k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 24.3k, False: 8.52k]
  ------------------
   29|  24.3k|                m_Arg1 = argument;
   30|  24.3k|                break;
   31|  6.57k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 6.57k, False: 26.2k]
  ------------------
   32|  6.57k|                m_Arg2 = argument;
   33|  6.57k|                break;
   34|  1.95k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 1.95k, False: 30.8k]
  ------------------
   35|  1.95k|                m_Arg3 = argument;
   36|  1.95k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 32.8k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  32.8k|#endif
   41|  32.8k|        }
   42|  32.8k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   660k|    {}
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  19.3k|    {
  174|  19.3k|        InstructionArgument arg;
  175|  19.3k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  19.3k|        arg.register_int.register_id = id;
  177|  19.3k|        return arg;
  178|  19.3k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    806|    {
  183|    806|        InstructionArgument arg;
  184|    806|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    806|        arg.register_float.register_id = id;
  186|    806|        return arg;
  187|    806|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  2.05k|    {
  192|  2.05k|        InstructionArgument arg;
  193|  2.05k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  2.05k|        arg.immediate_value.signed_value = value;
  195|  2.05k|        return arg;
  196|  2.05k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  10.5k|    {
  211|  10.5k|        InstructionArgument arg;
  212|  10.5k|        arg.m_Type           = ArgumentType::Label;
  213|  10.5k|        arg.label.label_name = label_name;
  214|  10.5k|        return arg;
  215|  10.5k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   209k|    {
  453|   209k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   209k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  1.36M|    {
   24|  1.36M|        switch (token.length())
   25|  1.36M|        {
   26|       |            // 1 character OpCodes
   27|  54.7k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 54.7k, False: 1.31M]
  ------------------
   28|  54.7k|                char c1 = token[0];
   29|  54.7k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 12.1k, False: 42.5k]
  ------------------
   30|  12.1k|                {
   31|  12.1k|                    return OpCode::J;
   32|  12.1k|                }
   33|  42.5k|                break;
   34|  54.7k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   151k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 151k, False: 1.21M]
  ------------------
   38|   151k|                char c1 = token[0];
   39|   151k|                char c2 = token[1];
   40|       |
   41|   151k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 82.6k, False: 68.9k]
  ------------------
   42|   151k|                {
   43|    523|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 523, False: 151k]
  ------------------
   44|  2.82k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 2.29k, False: 149k]
  ------------------
   45|  2.82k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 784, False: 2.03k]
  ------------------
   46|    784|                        {
   47|    784|                            return OpCode::JR;
   48|    784|                        }
   49|  2.03k|                        break;
   50|       |
   51|  10.6k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 10.6k, False: 140k]
  ------------------
   52|  26.6k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 16.0k, False: 135k]
  ------------------
   53|  26.6k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 348, False: 26.3k]
  ------------------
   54|  26.6k|                        {
   55|  4.15k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 4.15k, False: 22.5k]
  ------------------
   56|  8.28k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 4.12k, False: 22.5k]
  ------------------
   57|  8.28k|                                return OpCode::LB;
   58|  3.14k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 3.14k, False: 23.5k]
  ------------------
   59|  5.25k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 2.11k, False: 24.5k]
  ------------------
   60|  5.25k|                                return OpCode::LD;
   61|    356|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 356, False: 26.3k]
  ------------------
   62|  2.05k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 1.69k, False: 24.9k]
  ------------------
   63|  2.05k|                                return OpCode::LF;
   64|    777|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 777, False: 25.8k]
  ------------------
   65|  2.48k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 1.70k, False: 24.9k]
  ------------------
   66|  2.48k|                                return OpCode::LH;
   67|    374|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 374, False: 26.3k]
  ------------------
   68|  8.25k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 7.87k, False: 18.7k]
  ------------------
   69|  8.25k|                                return OpCode::LW;
   70|  26.6k|                        }
   71|    348|                        break;
   72|  9.19k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 9.19k, False: 142k]
  ------------------
   73|  9.61k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 425, False: 151k]
  ------------------
   74|  9.61k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 4.86k, False: 4.75k]
  ------------------
   75|  4.86k|                        {
   76|  4.86k|                            return OpCode::OR;
   77|  4.86k|                        }
   78|  4.75k|                        break;
   79|  10.4k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 10.4k, False: 141k]
  ------------------
   80|  29.7k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 19.3k, False: 132k]
  ------------------
   81|  29.7k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 20.8k, False: 8.92k]
  ------------------
   82|  29.7k|                        {
   83|    126|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 126, False: 29.6k]
  ------------------
   84|    251|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 125, False: 29.6k]
  ------------------
   85|    251|                                return OpCode::SB;
   86|    587|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 587, False: 29.2k]
  ------------------
   87|    971|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 384, False: 29.4k]
  ------------------
   88|    971|                                return OpCode::SD;
   89|    355|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 355, False: 29.4k]
  ------------------
   90|  2.45k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 2.09k, False: 27.7k]
  ------------------
   91|  2.45k|                                return OpCode::SF;
   92|  2.78k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.78k, False: 27.0k]
  ------------------
   93|  4.33k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 1.54k, False: 28.2k]
  ------------------
   94|  4.33k|                                return OpCode::SH;
   95|    601|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 601, False: 29.1k]
  ------------------
   96|    910|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 309, False: 29.4k]
  ------------------
   97|    910|                                return OpCode::SW;
   98|  29.7k|                        }
   99|  20.8k|                        break;
  100|   151k|                }
  101|   110k|                break;
  102|   151k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   714k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 714k, False: 653k]
  ------------------
  106|   714k|                char c1 = token[0];
  107|   714k|                char c2 = token[1];
  108|   714k|                char c3 = token[2];
  109|       |
  110|   714k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 45.0k, False: 669k]
  ------------------
  111|   714k|                {
  112|   471k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 471k, False: 243k]
  ------------------
  113|   479k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 8.07k, False: 706k]
  ------------------
  114|   479k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 464k, False: 14.8k]
  |  Branch (114:29): [True: 464k, False: 14.9k]
  |  Branch (114:45): [True: 464k, False: 59]
  ------------------
  115|   464k|                        {
  116|   464k|                            return OpCode::ADD;
  117|   464k|                        }
  118|  14.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 11.5k, False: 3.31k]
  |  Branch (118:34): [True: 7.80k, False: 7.10k]
  |  Branch (118:50): [True: 7.80k, False: 3.78k]
  ------------------
  119|  7.80k|                        {
  120|  7.80k|                            return OpCode::AND;
  121|  7.80k|                        }
  122|  7.10k|                        break;
  123|       |
  124|  7.10k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 3.24k, False: 711k]
  ------------------
  125|  4.03k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 783, False: 713k]
  ------------------
  126|  4.03k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 3.08k, False: 948]
  |  Branch (126:29): [True: 2.26k, False: 1.76k]
  |  Branch (126:45): [True: 2.26k, False: 818]
  ------------------
  127|  2.26k|                        {
  128|  2.26k|                            return OpCode::DIV;
  129|  2.26k|                        }
  130|  1.76k|                        break;
  131|       |
  132|  2.59k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.59k, False: 711k]
  ------------------
  133|  3.26k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 670, False: 713k]
  ------------------
  134|  3.26k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 2.93k, False: 328]
  ------------------
  135|  2.93k|                        {
  136|  2.93k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 756, False: 2.17k]
  ------------------
  137|    756|                            {
  138|    756|                                return OpCode::EQD;
  139|    756|                            }
  140|  2.17k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 1.49k, False: 683]
  ------------------
  141|  1.49k|                            {
  142|  1.49k|                                return OpCode::EQF;
  143|  1.49k|                            }
  144|  2.93k|                        }
  145|  1.01k|                        break;
  146|       |
  147|  24.4k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 24.4k, False: 689k]
  ------------------
  148|  29.6k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 5.13k, False: 709k]
  ------------------
  149|  29.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 7.13k, False: 22.4k]
  ------------------
  150|  7.13k|                        {
  151|  7.13k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 2.59k, False: 4.53k]
  ------------------
  152|  2.59k|                            {
  153|  2.59k|                                return OpCode::GED;
  154|  2.59k|                            }
  155|  4.53k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 3.79k, False: 742]
  ------------------
  156|  3.79k|                            {
  157|  3.79k|                                return OpCode::GEF;
  158|  3.79k|                            }
  159|  7.13k|                        }
  160|  22.4k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 20.1k, False: 2.31k]
  ------------------
  161|  20.1k|                        {
  162|  20.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 7.25k, False: 12.9k]
  ------------------
  163|  7.25k|                            {
  164|  7.25k|                                return OpCode::GTD;
  165|  7.25k|                            }
  166|  12.9k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 12.0k, False: 895]
  ------------------
  167|  12.0k|                            {
  168|  12.0k|                                return OpCode::GTF;
  169|  12.0k|                            }
  170|  12.9k|                        }
  171|  3.95k|                        break;
  172|       |
  173|  3.95k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 2.80k, False: 711k]
  ------------------
  174|  4.89k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 2.09k, False: 712k]
  ------------------
  175|  4.89k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 4.21k, False: 684]
  |  Branch (175:29): [True: 2.67k, False: 2.22k]
  |  Branch (175:45): [True: 2.67k, False: 1.53k]
  ------------------
  176|  2.67k|                        {
  177|  2.67k|                            return OpCode::JAL;
  178|  2.67k|                        }
  179|  2.22k|                        break;
  180|       |
  181|  21.3k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 21.3k, False: 693k]
  ------------------
  182|  29.7k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 8.35k, False: 706k]
  ------------------
  183|  29.7k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.01k, False: 28.7k]
  ------------------
  184|  29.7k|                        {
  185|    371|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 371, False: 29.3k]
  ------------------
  186|  2.75k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 2.38k, False: 27.3k]
  ------------------
  187|  2.75k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 464, False: 2.29k]
  ------------------
  188|    464|                                {
  189|    464|                                    return OpCode::LBU;
  190|    464|                                }
  191|  2.29k|                                break;
  192|       |
  193|  11.1k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 11.1k, False: 18.6k]
  ------------------
  194|  11.4k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 314, False: 29.4k]
  ------------------
  195|  11.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 9.20k, False: 2.23k]
  ------------------
  196|  9.20k|                                {
  197|  9.20k|                                    return OpCode::LED;
  198|  9.20k|                                }
  199|  2.23k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 2.05k, False: 180]
  ------------------
  200|  2.05k|                                {
  201|  2.05k|                                    return OpCode::LEF;
  202|  2.05k|                                }
  203|    180|                                break;
  204|       |
  205|  2.97k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 2.97k, False: 26.7k]
  ------------------
  206|  4.34k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.37k, False: 28.3k]
  ------------------
  207|  4.34k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.41k, False: 1.92k]
  ------------------
  208|  2.41k|                                {
  209|  2.41k|                                    return OpCode::LHI;
  210|  2.41k|                                }
  211|  1.92k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.79k, False: 130]
  ------------------
  212|  1.79k|                                {
  213|  1.79k|                                    return OpCode::LHU;
  214|  1.79k|                                }
  215|    130|                                break;
  216|       |
  217|  3.95k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 3.95k, False: 25.7k]
  ------------------
  218|  5.46k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 1.51k, False: 28.2k]
  ------------------
  219|  5.46k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 2.65k, False: 2.80k]
  ------------------
  220|  2.65k|                                {
  221|  2.65k|                                    return OpCode::LTD;
  222|  2.65k|                                }
  223|  2.80k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.35k, False: 451]
  ------------------
  224|  2.35k|                                {
  225|  2.35k|                                    return OpCode::LTF;
  226|  2.35k|                                }
  227|    451|                                break;
  228|       |
  229|  2.17k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 2.17k, False: 27.5k]
  ------------------
  230|  4.72k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 2.54k, False: 27.1k]
  ------------------
  231|  4.72k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 3.04k, False: 1.67k]
  ------------------
  232|  3.04k|                                {
  233|  3.04k|                                    return OpCode::LWU;
  234|  3.04k|                                }
  235|  1.67k|                                break;
  236|  29.7k|                        }
  237|  5.74k|                        break;
  238|       |
  239|  10.8k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 10.8k, False: 703k]
  ------------------
  240|  20.1k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 9.27k, False: 705k]
  ------------------
  241|  20.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 5.80k, False: 14.3k]
  ------------------
  242|  5.80k|                        {
  243|  5.80k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 1.29k, False: 4.50k]
  ------------------
  244|  1.29k|                            {
  245|  1.29k|                                return OpCode::NED;
  246|  1.29k|                            }
  247|  4.50k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 1.52k, False: 2.98k]
  ------------------
  248|  1.52k|                            {
  249|  1.52k|                                return OpCode::NEF;
  250|  1.52k|                            }
  251|  5.80k|                        }
  252|  14.3k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 9.57k, False: 4.77k]
  |  Branch (252:34): [True: 6.36k, False: 7.98k]
  |  Branch (252:50): [True: 6.36k, False: 3.21k]
  ------------------
  253|  6.36k|                        {
  254|  6.36k|                            return OpCode::NOP;
  255|  6.36k|                        }
  256|       |
  257|  10.9k|                        break;
  258|       |
  259|  10.9k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 2.41k, False: 712k]
  ------------------
  260|  2.70k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 294, False: 714k]
  ------------------
  261|  2.70k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 2.34k, False: 363]
  |  Branch (261:29): [True: 2.28k, False: 421]
  |  Branch (261:45): [True: 2.28k, False: 58]
  ------------------
  262|  2.28k|                        {
  263|  2.28k|                            return OpCode::ORI;
  264|  2.28k|                        }
  265|    421|                        break;
  266|       |
  267|  58.6k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 58.6k, False: 655k]
  ------------------
  268|  67.5k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 8.92k, False: 705k]
  ------------------
  269|  67.5k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 1.79k, False: 65.7k]
  ------------------
  270|  67.5k|                        {
  271|  2.24k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 2.24k, False: 65.3k]
  ------------------
  272|  2.67k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 424, False: 67.1k]
  ------------------
  273|  2.67k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 2.44k, False: 231]
  ------------------
  274|  2.44k|                                {
  275|  2.44k|                                    return OpCode::SBU;
  276|  2.44k|                                }
  277|    231|                                break;
  278|       |
  279|  1.57k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.57k, False: 66.0k]
  ------------------
  280|  6.08k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 4.51k, False: 63.0k]
  ------------------
  281|  6.08k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 3.00k, False: 3.08k]
  ------------------
  282|  3.00k|                                {
  283|  3.00k|                                    return OpCode::SEQ;
  284|  3.00k|                                }
  285|  3.08k|                                break;
  286|       |
  287|  3.49k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.49k, False: 64.0k]
  ------------------
  288|  8.07k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 4.58k, False: 62.9k]
  ------------------
  289|  8.07k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.82k, False: 3.25k]
  ------------------
  290|  4.82k|                                {
  291|  4.82k|                                    return OpCode::SGE;
  292|  4.82k|                                }
  293|  3.25k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 1.30k, False: 1.94k]
  ------------------
  294|  1.30k|                                {
  295|  1.30k|                                    return OpCode::SGT;
  296|  1.30k|                                }
  297|  1.94k|                                break;
  298|       |
  299|  2.35k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 2.35k, False: 65.2k]
  ------------------
  300|  2.89k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 539, False: 67.0k]
  ------------------
  301|  2.89k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.36k, False: 534]
  ------------------
  302|  2.36k|                                {
  303|  2.36k|                                    return OpCode::SHU;
  304|  2.36k|                                }
  305|    534|                                break;
  306|       |
  307|  10.7k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 10.7k, False: 56.8k]
  ------------------
  308|  16.1k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 5.40k, False: 62.1k]
  ------------------
  309|  16.1k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 159, False: 15.9k]
  ------------------
  310|  16.1k|                                {
  311|  1.60k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.60k, False: 14.4k]
  ------------------
  312|  1.74k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 139, False: 15.9k]
  ------------------
  313|  1.74k|                                        return OpCode::SLA;
  314|       |
  315|  2.52k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.52k, False: 13.5k]
  ------------------
  316|  2.66k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 143, False: 15.9k]
  ------------------
  317|  2.66k|                                        return OpCode::SLE;
  318|       |
  319|  5.58k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 5.58k, False: 10.5k]
  ------------------
  320|  7.36k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 1.78k, False: 14.3k]
  ------------------
  321|  7.36k|                                        return OpCode::SLL;
  322|       |
  323|    878|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 878, False: 15.2k]
  ------------------
  324|  4.17k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 3.29k, False: 12.8k]
  ------------------
  325|  4.17k|                                        return OpCode::SLT;
  326|  16.1k|                                }
  327|    159|                                break;
  328|       |
  329|    564|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 564, False: 67.0k]
  ------------------
  330|  4.14k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 3.57k, False: 63.9k]
  ------------------
  331|  4.14k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 3.13k, False: 1.00k]
  ------------------
  332|  3.13k|                                {
  333|  3.13k|                                    return OpCode::SNE;
  334|  3.13k|                                }
  335|  1.00k|                                break;
  336|       |
  337|  4.01k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 4.01k, False: 63.5k]
  ------------------
  338|  11.0k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 7.01k, False: 60.5k]
  ------------------
  339|  11.0k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 3.19k, False: 7.84k]
  ------------------
  340|  3.19k|                                {
  341|  3.19k|                                    return OpCode::SRA;
  342|  3.19k|                                }
  343|  7.84k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 5.39k, False: 2.44k]
  ------------------
  344|  5.39k|                                {
  345|  5.39k|                                    return OpCode::SRL;
  346|  5.39k|                                }
  347|  2.44k|                                break;
  348|       |
  349|  8.58k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 8.58k, False: 58.9k]
  ------------------
  350|  10.9k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 2.38k, False: 65.1k]
  ------------------
  351|  10.9k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 9.29k, False: 1.67k]
  ------------------
  352|  9.29k|                                {
  353|  9.29k|                                    return OpCode::SUB;
  354|  9.29k|                                }
  355|  1.67k|                                break;
  356|       |
  357|  3.11k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 3.11k, False: 64.4k]
  ------------------
  358|  3.79k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 682, False: 66.8k]
  ------------------
  359|  3.79k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 3.12k, False: 669]
  ------------------
  360|  3.12k|                                {
  361|  3.12k|                                    return OpCode::SWU;
  362|  3.12k|                                }
  363|    669|                                break;
  364|  67.5k|                        }
  365|       |
  366|  15.5k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.01k, False: 712k]
  ------------------
  367|  41.8k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 26.2k, False: 688k]
  ------------------
  368|  41.8k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 3.57k, False: 38.2k]
  |  Branch (368:29): [True: 2.19k, False: 39.6k]
  |  Branch (368:45): [True: 2.19k, False: 1.38k]
  ------------------
  369|  2.19k|                        {
  370|  2.19k|                            return OpCode::XOR;
  371|  2.19k|                        }
  372|  39.6k|                        break;
  373|   714k|                }
  374|   117k|                break;
  375|   714k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   292k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 292k, False: 1.07M]
  ------------------
  379|   292k|                char c1 = token[0];
  380|   292k|                char c2 = token[1];
  381|   292k|                char c3 = token[2];
  382|   292k|                char c4 = token[3];
  383|       |
  384|   292k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 29.6k, False: 262k]
  ------------------
  385|   292k|                {
  386|  49.5k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 49.5k, False: 242k]
  ------------------
  387|  51.8k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.32k, False: 289k]
  ------------------
  388|  51.8k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 264, False: 51.5k]
  ------------------
  389|  51.8k|                        {
  390|  46.5k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 46.5k, False: 5.31k]
  ------------------
  391|  46.8k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 324, False: 51.5k]
  ------------------
  392|  46.8k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 44.8k, False: 1.97k]
  ------------------
  393|  44.8k|                                {
  394|  44.8k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 234, False: 44.6k]
  ------------------
  395|  44.8k|                                    {
  396|  4.38k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.38k, False: 40.4k]
  ------------------
  397|  4.44k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 58, False: 44.8k]
  ------------------
  398|  4.44k|                                            return OpCode::ADDD;
  399|       |
  400|  12.3k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 12.3k, False: 32.5k]
  ------------------
  401|  12.4k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 180, False: 44.7k]
  ------------------
  402|  12.4k|                                            return OpCode::ADDF;
  403|       |
  404|  18.9k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 18.9k, False: 25.9k]
  ------------------
  405|  19.0k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 116, False: 44.7k]
  ------------------
  406|  19.0k|                                            return OpCode::ADDI;
  407|       |
  408|  8.26k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 8.26k, False: 36.6k]
  ------------------
  409|  8.70k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 438, False: 44.4k]
  ------------------
  410|  8.70k|                                            return OpCode::ADDU;
  411|  44.8k|                                    }
  412|  44.8k|                                }
  413|  2.20k|                                break;
  414|       |
  415|  2.91k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 2.91k, False: 48.9k]
  ------------------
  416|  4.72k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 1.81k, False: 50.0k]
  ------------------
  417|  4.72k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 4.48k, False: 240]
  |  Branch (417:37): [True: 2.80k, False: 1.92k]
  |  Branch (417:53): [True: 2.80k, False: 1.68k]
  ------------------
  418|  2.80k|                                {
  419|  2.80k|                                    return OpCode::ANDI;
  420|  2.80k|                                }
  421|       |
  422|  1.92k|                                break;
  423|  51.8k|                        }
  424|  4.39k|                        break;
  425|       |
  426|  41.0k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 41.0k, False: 250k]
  ------------------
  427|  51.0k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 9.93k, False: 282k]
  ------------------
  428|  51.0k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 1.04k, False: 49.9k]
  ------------------
  429|  51.0k|                        {
  430|    533|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 533, False: 50.4k]
  ------------------
  431|  6.58k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 6.04k, False: 44.9k]
  ------------------
  432|  6.58k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 4.08k, False: 2.49k]
  |  Branch (432:37): [True: 3.88k, False: 2.69k]
  |  Branch (432:53): [True: 3.88k, False: 202]
  ------------------
  433|  3.88k|                                {
  434|  3.88k|                                    return OpCode::BEQZ;
  435|  3.88k|                                }
  436|  2.69k|                                break;
  437|       |
  438|  35.9k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 35.9k, False: 15.0k]
  ------------------
  439|  38.4k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 2.53k, False: 48.4k]
  ------------------
  440|  38.4k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 36.7k, False: 1.77k]
  ------------------
  441|  36.7k|                                {
  442|  36.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 28.7k, False: 8.00k]
  ------------------
  443|  28.7k|                                    {
  444|  28.7k|                                        return OpCode::BFPF;
  445|  28.7k|                                    }
  446|  8.00k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 7.75k, False: 248]
  ------------------
  447|  7.75k|                                    {
  448|  7.75k|                                        return OpCode::BFPT;
  449|  7.75k|                                    }
  450|  36.7k|                                }
  451|  2.02k|                                break;
  452|       |
  453|  3.47k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 3.47k, False: 47.5k]
  ------------------
  454|  4.89k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 1.41k, False: 49.5k]
  ------------------
  455|  4.89k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 4.28k, False: 609]
  |  Branch (455:37): [True: 4.20k, False: 689]
  |  Branch (455:53): [True: 4.20k, False: 80]
  ------------------
  456|  4.20k|                                {
  457|  4.20k|                                    return OpCode::BNEZ;
  458|  4.20k|                                }
  459|  51.0k|                        }
  460|  6.45k|                        break;
  461|       |
  462|  15.7k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 15.7k, False: 276k]
  ------------------
  463|  16.6k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 882, False: 291k]
  ------------------
  464|  16.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 15.7k, False: 883]
  |  Branch (464:29): [True: 15.1k, False: 1.51k]
  |  Branch (464:45): [True: 15.1k, False: 636]
  ------------------
  465|  15.1k|                        {
  466|  15.1k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 525, False: 14.6k]
  ------------------
  467|  15.1k|                            {
  468|  4.28k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 4.28k, False: 10.8k]
  ------------------
  469|  4.40k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 116, False: 15.0k]
  ------------------
  470|  4.40k|                                    return OpCode::DIVD;
  471|       |
  472|    483|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 483, False: 14.6k]
  ------------------
  473|    914|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 431, False: 14.7k]
  ------------------
  474|    914|                                    return OpCode::DIVF;
  475|       |
  476|  1.02k|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 1.02k, False: 14.1k]
  ------------------
  477|  1.08k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 59, False: 15.1k]
  ------------------
  478|  1.08k|                                    return OpCode::DIVI;
  479|       |
  480|  5.75k|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 5.75k, False: 9.41k]
  ------------------
  481|  8.24k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 2.49k, False: 12.6k]
  ------------------
  482|  8.24k|                                    return OpCode::DIVU;
  483|  15.1k|                            }
  484|  15.1k|                        }
  485|  2.04k|                        break;
  486|       |
  487|  2.04k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.10k, False: 290k]
  ------------------
  488|  7.66k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 6.56k, False: 285k]
  ------------------
  489|  7.66k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 6.65k, False: 1.00k]
  |  Branch (489:29): [True: 785, False: 6.87k]
  |  Branch (489:45): [True: 6.49k, False: 155]
  |  Branch (489:61): [True: 785, False: 5.71k]
  ------------------
  490|    785|                        {
  491|    785|                            return OpCode::HALT;
  492|    785|                        }
  493|  6.87k|                        break;
  494|       |
  495|  6.87k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 988, False: 291k]
  ------------------
  496|  5.31k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 4.32k, False: 287k]
  ------------------
  497|  5.31k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 3.69k, False: 1.61k]
  |  Branch (497:29): [True: 217, False: 5.09k]
  |  Branch (497:45): [True: 427, False: 3.26k]
  |  Branch (497:61): [True: 217, False: 210]
  ------------------
  498|    217|                        {
  499|    217|                            return OpCode::JALR;
  500|    217|                        }
  501|  5.09k|                        break;
  502|       |
  503|  7.63k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 7.63k, False: 284k]
  ------------------
  504|  12.9k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 5.30k, False: 286k]
  ------------------
  505|  12.9k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 6.73k, False: 6.21k]
  |  Branch (505:29): [True: 6.61k, False: 6.33k]
  |  Branch (505:45): [True: 6.61k, False: 121]
  ------------------
  506|  6.61k|                        {
  507|  6.61k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 2.45k, False: 4.15k]
  ------------------
  508|  2.45k|                            {
  509|  2.45k|                                return OpCode::MOVD;
  510|  2.45k|                            }
  511|  4.15k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.93k, False: 2.22k]
  ------------------
  512|  1.93k|                            {
  513|  1.93k|                                return OpCode::MOVF;
  514|  1.93k|                            }
  515|  6.61k|                        }
  516|  6.33k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 6.12k, False: 215]
  |  Branch (516:34): [True: 1.47k, False: 4.85k]
  |  Branch (516:50): [True: 3.44k, False: 2.67k]
  |  Branch (516:66): [True: 1.47k, False: 1.96k]
  ------------------
  517|  1.47k|                        {
  518|  1.47k|                            return OpCode::MULT;
  519|  1.47k|                        }
  520|  7.08k|                        break;
  521|       |
  522|  94.0k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 94.0k, False: 198k]
  ------------------
  523|   103k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 9.81k, False: 282k]
  ------------------
  524|   103k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 897, False: 102k]
  ------------------
  525|   103k|                        {
  526|  7.45k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 7.45k, False: 96.3k]
  ------------------
  527|  14.5k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 7.13k, False: 96.6k]
  ------------------
  528|  14.5k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 12.0k, False: 2.51k]
  ------------------
  529|  12.0k|                                {
  530|  12.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 8.55k, False: 3.51k]
  ------------------
  531|  8.55k|                                    {
  532|  8.55k|                                        return OpCode::SEQI;
  533|  8.55k|                                    }
  534|  3.51k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 3.12k, False: 396]
  ------------------
  535|  3.12k|                                    {
  536|  3.12k|                                        return OpCode::SEQU;
  537|  3.12k|                                    }
  538|  12.0k|                                }
  539|  2.90k|                                break;
  540|       |
  541|  9.24k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 9.24k, False: 94.5k]
  ------------------
  542|  13.9k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 4.70k, False: 99.1k]
  ------------------
  543|  13.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 6.00k, False: 7.94k]
  ------------------
  544|  6.00k|                                {
  545|  6.00k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 741, False: 5.26k]
  ------------------
  546|    741|                                    {
  547|    741|                                        return OpCode::SGEI;
  548|    741|                                    }
  549|  5.26k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 4.57k, False: 689]
  ------------------
  550|  4.57k|                                    {
  551|  4.57k|                                        return OpCode::SGEU;
  552|  4.57k|                                    }
  553|  6.00k|                                }
  554|  7.94k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 7.20k, False: 745]
  ------------------
  555|  7.20k|                                {
  556|  7.20k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 3.32k, False: 3.87k]
  ------------------
  557|  3.32k|                                    {
  558|  3.32k|                                        return OpCode::SGTI;
  559|  3.32k|                                    }
  560|  3.87k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.50k, False: 2.37k]
  ------------------
  561|  1.50k|                                    {
  562|  1.50k|                                        return OpCode::SGTU;
  563|  1.50k|                                    }
  564|  7.20k|                                }
  565|  3.80k|                                break;
  566|       |
  567|  23.6k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 23.6k, False: 80.1k]
  ------------------
  568|  26.9k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 3.30k, False: 100k]
  ------------------
  569|  26.9k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 74, False: 26.9k]
  ------------------
  570|  26.9k|                                {
  571|  3.32k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 3.32k, False: 23.6k]
  ------------------
  572|  3.83k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 508, False: 26.4k]
  ------------------
  573|  3.83k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 3.34k, False: 491]
  ------------------
  574|  3.34k|                                        {
  575|  3.34k|                                            return OpCode::SLAI;
  576|  3.34k|                                        }
  577|    491|                                        break;
  578|       |
  579|  15.4k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 15.4k, False: 11.5k]
  ------------------
  580|  16.9k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.57k, False: 25.4k]
  ------------------
  581|  16.9k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 13.5k, False: 3.43k]
  ------------------
  582|  13.5k|                                        {
  583|  13.5k|                                            return OpCode::SLEI;
  584|  13.5k|                                        }
  585|  3.43k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 2.87k, False: 565]
  ------------------
  586|  2.87k|                                        {
  587|  2.87k|                                            return OpCode::SLEU;
  588|  2.87k|                                        }
  589|    565|                                        break;
  590|       |
  591|  2.38k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 2.38k, False: 24.6k]
  ------------------
  592|  3.29k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 908, False: 26.0k]
  ------------------
  593|  3.29k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.47k, False: 816]
  ------------------
  594|  2.47k|                                        {
  595|  2.47k|                                            return OpCode::SLLI;
  596|  2.47k|                                        }
  597|    816|                                        break;
  598|       |
  599|  2.13k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.13k, False: 24.8k]
  ------------------
  600|  2.79k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 661, False: 26.3k]
  ------------------
  601|  2.79k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.96k, False: 832]
  ------------------
  602|  1.96k|                                        {
  603|  1.96k|                                            return OpCode::SLTI;
  604|  1.96k|                                        }
  605|    832|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 776, False: 56]
  ------------------
  606|    776|                                        {
  607|    776|                                            return OpCode::SLTU;
  608|    776|                                        }
  609|     56|                                        break;
  610|  26.9k|                                }
  611|       |
  612|  4.01k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.01k, False: 101k]
  ------------------
  613|  7.22k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 3.21k, False: 100k]
  ------------------
  614|  7.22k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 5.71k, False: 1.51k]
  ------------------
  615|  5.71k|                                {
  616|  5.71k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 531, False: 5.18k]
  ------------------
  617|    531|                                    {
  618|    531|                                        return OpCode::SNEI;
  619|    531|                                    }
  620|  5.18k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 4.30k, False: 882]
  ------------------
  621|  4.30k|                                    {
  622|  4.30k|                                        return OpCode::SNEU;
  623|  4.30k|                                    }
  624|  5.71k|                                }
  625|  2.39k|                                break;
  626|       |
  627|  5.10k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 5.10k, False: 98.7k]
  ------------------
  628|  8.33k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 3.23k, False: 100k]
  ------------------
  629|  8.33k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 3.05k, False: 5.28k]
  |  Branch (629:37): [True: 2.06k, False: 6.27k]
  |  Branch (629:53): [True: 2.06k, False: 989]
  ------------------
  630|  2.06k|                                {
  631|  2.06k|                                    return OpCode::SRAI;
  632|  2.06k|                                }
  633|  6.27k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 5.25k, False: 1.02k]
  |  Branch (633:42): [True: 2.60k, False: 3.66k]
  |  Branch (633:58): [True: 2.60k, False: 2.64k]
  ------------------
  634|  2.60k|                                {
  635|  2.60k|                                    return OpCode::SRLI;
  636|  2.60k|                                }
  637|  3.66k|                                break;
  638|       |
  639|  23.4k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 23.4k, False: 80.4k]
  ------------------
  640|  33.8k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 10.4k, False: 93.3k]
  ------------------
  641|  33.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 29.2k, False: 4.57k]
  ------------------
  642|  29.2k|                                {
  643|  29.2k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 3.30k, False: 25.9k]
  ------------------
  644|  29.2k|                                    {
  645|    329|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 329, False: 28.9k]
  ------------------
  646|    820|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 491, False: 28.7k]
  ------------------
  647|    820|                                            return OpCode::SUBD;
  648|       |
  649|  9.55k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 9.55k, False: 19.7k]
  ------------------
  650|  9.71k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 164, False: 29.0k]
  ------------------
  651|  9.71k|                                            return OpCode::SUBF;
  652|       |
  653|  6.03k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 6.03k, False: 23.2k]
  ------------------
  654|  7.90k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.87k, False: 27.3k]
  ------------------
  655|  7.90k|                                            return OpCode::SUBI;
  656|       |
  657|  7.47k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 7.47k, False: 21.7k]
  ------------------
  658|  7.51k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 44, False: 29.2k]
  ------------------
  659|  7.51k|                                            return OpCode::SUBU;
  660|  29.2k|                                    }
  661|  29.2k|                                }
  662|  7.87k|                                break;
  663|   103k|                        }
  664|  21.5k|                        break;
  665|       |
  666|  21.5k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 8.83k, False: 283k]
  ------------------
  667|  10.5k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 1.67k, False: 290k]
  ------------------
  668|  10.5k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 9.73k, False: 775]
  |  Branch (668:29): [True: 5.80k, False: 4.70k]
  |  Branch (668:45): [True: 6.44k, False: 3.29k]
  |  Branch (668:61): [True: 5.80k, False: 641]
  ------------------
  669|  5.80k|                        {
  670|  5.80k|                            return OpCode::TRAP;
  671|  5.80k|                        }
  672|  4.70k|                        break;
  673|  4.70k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 1.06k, False: 290k]
  ------------------
  674|  2.56k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.50k, False: 290k]
  ------------------
  675|  2.56k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.50k, False: 1.06k]
  |  Branch (675:29): [True: 764, False: 1.79k]
  |  Branch (675:45): [True: 938, False: 564]
  |  Branch (675:61): [True: 764, False: 174]
  ------------------
  676|    764|                        {
  677|    764|                            return OpCode::XORI;
  678|    764|                        }
  679|  1.79k|                        break;
  680|   292k|                }
  681|  89.6k|                break;
  682|   292k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  89.6k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 77.4k, False: 1.29M]
  ------------------
  686|  77.4k|                char c1 = token[0];
  687|  77.4k|                char c2 = token[1];
  688|  77.4k|                char c3 = token[2];
  689|  77.4k|                char c4 = token[3];
  690|  77.4k|                char c5 = token[4];
  691|       |
  692|  77.4k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 13.5k, False: 63.8k]
  ------------------
  693|  77.4k|                {
  694|  17.3k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 17.3k, False: 60.1k]
  ------------------
  695|  17.3k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 77.4k]
  ------------------
  696|  17.3k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 17.3k, False: 0]
  |  Branch (696:29): [True: 17.3k, False: 0]
  |  Branch (696:45): [True: 17.3k, False: 0]
  |  Branch (696:61): [True: 17.3k, False: 0]
  |  Branch (696:77): [True: 17.3k, False: 0]
  ------------------
  697|  17.3k|                        {
  698|  17.3k|                            return OpCode::ADDUI;
  699|  17.3k|                        }
  700|      0|                        break;
  701|       |
  702|  2.39k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.39k, False: 75.0k]
  ------------------
  703|  2.39k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 77.4k]
  ------------------
  704|  2.39k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 2.39k, False: 0]
  |  Branch (704:29): [True: 2.39k, False: 0]
  |  Branch (704:45): [True: 2.39k, False: 0]
  |  Branch (704:61): [True: 2.39k, False: 0]
  |  Branch (704:77): [True: 2.39k, False: 0]
  ------------------
  705|  2.39k|                        {
  706|  2.39k|                            return OpCode::DIVUI;
  707|  2.39k|                        }
  708|      0|                        break;
  709|       |
  710|  8.15k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 8.15k, False: 69.3k]
  ------------------
  711|  8.15k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 77.4k]
  ------------------
  712|  8.15k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 8.15k, False: 0]
  |  Branch (712:29): [True: 8.15k, False: 0]
  |  Branch (712:45): [True: 8.15k, False: 0]
  |  Branch (712:61): [True: 8.15k, False: 0]
  ------------------
  713|  8.15k|                        {
  714|  8.15k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 8.15k]
  ------------------
  715|  8.15k|                            {
  716|    990|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 990, False: 7.16k]
  ------------------
  717|    990|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 8.15k]
  ------------------
  718|    990|                                    return OpCode::MULTD;
  719|       |
  720|  4.56k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 4.56k, False: 3.59k]
  ------------------
  721|  4.56k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 8.15k]
  ------------------
  722|  4.56k|                                    return OpCode::MULTF;
  723|       |
  724|  1.13k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 1.13k, False: 7.01k]
  ------------------
  725|  1.13k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 8.15k]
  ------------------
  726|  1.13k|                                    return OpCode::MULTI;
  727|       |
  728|  1.46k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.46k, False: 6.68k]
  ------------------
  729|  1.46k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 8.15k]
  ------------------
  730|  1.46k|                                    return OpCode::MULTU;
  731|  8.15k|                            }
  732|  8.15k|                        }
  733|      0|                        break;
  734|       |
  735|  35.9k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 35.9k, False: 41.4k]
  ------------------
  736|  35.9k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 77.4k]
  ------------------
  737|  35.9k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 35.9k]
  ------------------
  738|  35.9k|                        {
  739|  4.68k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 4.68k, False: 31.3k]
  ------------------
  740|  4.68k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 35.9k]
  ------------------
  741|  4.68k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 4.68k, False: 0]
  |  Branch (741:37): [True: 4.68k, False: 0]
  |  Branch (741:53): [True: 4.68k, False: 0]
  |  Branch (741:69): [True: 4.68k, False: 0]
  ------------------
  742|  4.68k|                                {
  743|  4.68k|                                    return OpCode::SEQUI;
  744|  4.68k|                                }
  745|      0|                                break;
  746|       |
  747|  17.2k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 17.2k, False: 18.7k]
  ------------------
  748|  17.2k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 35.9k]
  ------------------
  749|  17.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 8.43k, False: 8.81k]
  |  Branch (749:37): [True: 8.43k, False: 8.81k]
  |  Branch (749:53): [True: 8.43k, False: 0]
  |  Branch (749:69): [True: 8.43k, False: 0]
  ------------------
  750|  8.43k|                                {
  751|  8.43k|                                    return OpCode::SGEUI;
  752|  8.43k|                                }
  753|  8.81k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 8.81k, False: 0]
  |  Branch (753:42): [True: 8.81k, False: 0]
  |  Branch (753:58): [True: 8.81k, False: 0]
  |  Branch (753:74): [True: 8.81k, False: 0]
  ------------------
  754|  8.81k|                                {
  755|  8.81k|                                    return OpCode::SGTUI;
  756|  8.81k|                                }
  757|      0|                                break;
  758|       |
  759|  5.86k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 5.86k, False: 30.1k]
  ------------------
  760|  5.86k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 35.9k]
  ------------------
  761|  5.86k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 4.16k, False: 1.69k]
  |  Branch (761:37): [True: 4.16k, False: 1.69k]
  |  Branch (761:53): [True: 4.16k, False: 0]
  |  Branch (761:69): [True: 4.16k, False: 0]
  ------------------
  762|  4.16k|                                {
  763|  4.16k|                                    return OpCode::SLEUI;
  764|  4.16k|                                }
  765|  1.69k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.69k, False: 0]
  |  Branch (765:42): [True: 1.69k, False: 0]
  |  Branch (765:58): [True: 1.69k, False: 0]
  |  Branch (765:74): [True: 1.69k, False: 0]
  ------------------
  766|  1.69k|                                {
  767|  1.69k|                                    return OpCode::SLTUI;
  768|  1.69k|                                }
  769|      0|                                break;
  770|       |
  771|    405|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 405, False: 35.5k]
  ------------------
  772|    405|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 35.9k]
  ------------------
  773|    405|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 405, False: 0]
  |  Branch (773:37): [True: 405, False: 0]
  |  Branch (773:53): [True: 405, False: 0]
  |  Branch (773:69): [True: 405, False: 0]
  ------------------
  774|    405|                                {
  775|    405|                                    return OpCode::SNEUI;
  776|    405|                                }
  777|      0|                                break;
  778|       |
  779|  7.79k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 7.79k, False: 28.1k]
  ------------------
  780|  7.79k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 35.9k]
  ------------------
  781|  7.79k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 7.79k, False: 0]
  |  Branch (781:37): [True: 7.79k, False: 0]
  |  Branch (781:53): [True: 7.79k, False: 0]
  |  Branch (781:69): [True: 7.79k, False: 0]
  ------------------
  782|  7.79k|                                {
  783|  7.79k|                                    return OpCode::SUBUI;
  784|  7.79k|                                }
  785|      0|                                break;
  786|  35.9k|                        }
  787|       |
  788|      0|                        break;
  789|  77.4k|                }
  790|       |
  791|  13.5k|                break;
  792|  77.4k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  20.4k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 20.4k, False: 1.34M]
  ------------------
  796|  20.4k|                char c1 = token[0];
  797|  20.4k|                char c2 = token[1];
  798|  20.4k|                char c3 = token[2];
  799|  20.4k|                char c4 = token[3];
  800|  20.4k|                char c5 = token[4];
  801|  20.4k|                char c6 = token[5];
  802|       |
  803|  20.4k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 11.9k, False: 8.50k]
  |  Branch (803:21): [True: 11.9k, False: 8.50k]
  |  Branch (803:37): [True: 11.9k, False: 0]
  |  Branch (803:53): [True: 11.9k, False: 0]
  ------------------
  804|  11.9k|                {
  805|  11.9k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 11.9k]
  ------------------
  806|  11.9k|                    {
  807|  5.18k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 5.18k, False: 6.73k]
  ------------------
  808|  5.18k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 11.9k]
  ------------------
  809|  5.18k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 5.18k, False: 0]
  ------------------
  810|  5.18k|                            {
  811|  5.18k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 3.97k, False: 1.20k]
  ------------------
  812|  3.97k|                                {
  813|  3.97k|                                    return OpCode::CVTD2F;
  814|  3.97k|                                }
  815|  1.20k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.20k, False: 0]
  ------------------
  816|  1.20k|                                {
  817|  1.20k|                                    return OpCode::CVTD2I;
  818|  1.20k|                                }
  819|  5.18k|                            }
  820|      0|                            break;
  821|       |
  822|  4.80k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 4.80k, False: 7.11k]
  ------------------
  823|  4.80k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 11.9k]
  ------------------
  824|  4.80k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 4.80k, False: 0]
  ------------------
  825|  4.80k|                            {
  826|  4.80k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 2.64k, False: 2.16k]
  ------------------
  827|  2.64k|                                {
  828|  2.64k|                                    return OpCode::CVTF2D;
  829|  2.64k|                                }
  830|  2.16k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 2.16k, False: 0]
  ------------------
  831|  2.16k|                                {
  832|  2.16k|                                    return OpCode::CVTF2I;
  833|  2.16k|                                }
  834|  4.80k|                            }
  835|      0|                            break;
  836|       |
  837|  1.92k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 1.92k, False: 9.99k]
  ------------------
  838|  1.92k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 11.9k]
  ------------------
  839|  1.92k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 1.92k, False: 0]
  ------------------
  840|  1.92k|                            {
  841|  1.92k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.68k, False: 246]
  ------------------
  842|  1.68k|                                {
  843|  1.68k|                                    return OpCode::CVTI2D;
  844|  1.68k|                                }
  845|    246|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 246, False: 0]
  ------------------
  846|    246|                                {
  847|    246|                                    return OpCode::CVTI2F;
  848|    246|                                }
  849|  1.92k|                            }
  850|  11.9k|                    }
  851|  11.9k|                }
  852|  8.50k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 2.50k, False: 6.00k]
  |  Branch (852:26): [True: 2.50k, False: 6.00k]
  |  Branch (852:42): [True: 2.50k, False: 0]
  |  Branch (852:58): [True: 2.50k, False: 0]
  |  Branch (852:74): [True: 2.50k, False: 0]
  ------------------
  853|  8.50k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 2.50k, False: 0]
  |  Branch (853:42): [True: 2.50k, False: 0]
  ------------------
  854|  2.50k|                {
  855|  2.50k|                    return OpCode::MULTUI;
  856|  2.50k|                }
  857|  6.00k|                break;
  858|  20.4k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  6.00k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 3.91k, False: 1.36M]
  ------------------
  862|  3.91k|                char c1 = token[0];
  863|  3.91k|                char c2 = token[1];
  864|  3.91k|                char c3 = token[2];
  865|  3.91k|                char c4 = token[3];
  866|  3.91k|                char c5 = token[4];
  867|  3.91k|                char c6 = token[5];
  868|  3.91k|                char c7 = token[6];
  869|       |
  870|  3.91k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 1.35k, False: 2.56k]
  |  Branch (870:21): [True: 1.35k, False: 2.56k]
  |  Branch (870:37): [True: 1.35k, False: 0]
  |  Branch (870:53): [True: 1.35k, False: 0]
  ------------------
  871|  1.35k|                {
  872|  1.35k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 147, False: 1.20k]
  |  Branch (872:25): [True: 147, False: 1.20k]
  |  Branch (872:41): [True: 147, False: 0]
  |  Branch (872:54): [True: 147, False: 0]
  |  Branch (872:70): [True: 147, False: 0]
  ------------------
  873|    147|                    {
  874|    147|                        return OpCode::MOVI2FP;
  875|    147|                    }
  876|  1.20k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.20k, False: 0]
  |  Branch (876:30): [True: 1.20k, False: 0]
  |  Branch (876:46): [True: 1.20k, False: 0]
  |  Branch (876:62): [True: 1.20k, False: 0]
  |  Branch (876:75): [True: 1.20k, False: 0]
  ------------------
  877|  1.20k|                    {
  878|  1.20k|                        return OpCode::MOVFP2I;
  879|  1.20k|                    }
  880|  1.35k|                }
  881|  2.56k|                break;
  882|  3.91k|            }
  883|       |
  884|  53.7k|            default: {
  ------------------
  |  Branch (884:13): [True: 53.7k, False: 1.31M]
  ------------------
  885|  53.7k|                break;
  886|  3.91k|            }
  887|  1.36M|        }
  888|       |
  889|       |        // None found
  890|   436k|        return OpCode::NONE;
  891|  1.36M|    }
_ZN3dlx3iceEcc:
   17|  2.15M|    {
   18|  2.15M|        constexpr const char diff = 'a' - 'A';
   19|  2.15M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.64M, False: 511k]
  |  Branch (19:28): [True: 141k, False: 369k]
  ------------------
   20|  2.15M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.67M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  24.5k|    {
  193|  24.5k|        ParseError err;
  194|       |
  195|  24.5k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  24.5k|        err.m_LineNumber                           = line_number;
  197|  24.5k|        err.m_Column                               = column;
  198|  24.5k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  24.5k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  24.5k|        return err;
  202|  24.5k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  24.5k|    {
  207|  24.5k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  24.5k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  24.5k|                                                         actual_type);
  210|  24.5k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    462|    {
  216|    462|        ParseError err;
  217|       |
  218|    462|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    462|        err.m_LineNumber        = line_number;
  220|    462|        err.m_Column            = column;
  221|    462|        err.invalid_number.text = text;
  222|       |
  223|    462|        return err;
  224|    462|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    462|    {
  228|    462|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    462|                                                token.GetColumn().unsafe(), token.GetText());
  230|    462|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      8|    {
  235|      8|        ParseError err;
  236|       |
  237|      8|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      8|        err.m_LineNumber = line_number;
  239|      8|        err.m_Column     = column;
  240|       |
  241|      8|        return err;
  242|      8|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      8|    {
  247|      8|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      8|                                                                     token.GetColumn().unsafe());
  249|      8|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   600k|    {
  255|   600k|        ParseError err;
  256|       |
  257|   600k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   600k|        err.m_LineNumber                   = line_number;
  259|   600k|        err.m_Column                       = column;
  260|   600k|        err.unexpected_token.expected_type = expected_type;
  261|   600k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   600k|        return err;
  264|   600k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   600k|    {
  269|   600k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   600k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   600k|                                                  token.GetType());
  272|   600k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  13.0k|    {
  277|  13.0k|        ParseError err;
  278|       |
  279|  13.0k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  13.0k|        err.m_LineNumber                   = line_number;
  281|  13.0k|        err.m_Column                       = column;
  282|  13.0k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  13.0k|        return err;
  285|  13.0k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  4.40k|    {
  289|  4.40k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  4.40k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  4.40k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   205k|    {
  296|   205k|        ParseError err;
  297|       |
  298|   205k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   205k|        err.m_LineNumber                       = line_number;
  300|   205k|        err.m_Column                           = column;
  301|   205k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   205k|        return err;
  304|   205k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   205k|    {
  309|   205k|        return ConstructInvalidLabelIdentifierParseError(
  310|   205k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   205k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  47.0k|    {
  317|  47.0k|        ParseError err;
  318|       |
  319|  47.0k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  47.0k|        err.m_LineNumber                     = line_number;
  321|  47.0k|        err.m_Column                         = column;
  322|  47.0k|        err.label_already_defined.label_name = label_name;
  323|  47.0k|        err.label_already_defined.at_line    = at_line;
  324|  47.0k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  47.0k|        return err;
  327|  47.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  47.0k|    {
  332|  47.0k|        return ConstructLabelAlreadyDefinedParseError(
  333|  47.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  47.0k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  47.0k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   678k|    {
  340|   678k|        ParseError err;
  341|       |
  342|   678k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   678k|        err.m_LineNumber = line_number;
  344|   678k|        err.m_Column     = column;
  345|       |
  346|   678k|        return err;
  347|   678k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   678k|    {
  352|   678k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   678k|                                                        token.GetColumn().unsafe());
  354|   678k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  97.0k|    {
  360|  97.0k|        ParseError err;
  361|       |
  362|  97.0k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  97.0k|        err.m_LineNumber               = line_number;
  364|  97.0k|        err.m_Column                   = column;
  365|  97.0k|        err.too_few_arguments.required = required;
  366|  97.0k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  97.0k|        return err;
  369|  97.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  97.0k|    {
  374|  97.0k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  97.0k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  97.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  3.85k|    {
  381|  3.85k|        ParseError err;
  382|       |
  383|  3.85k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  3.85k|        err.m_LineNumber           = line_number;
  385|  3.85k|        err.m_Column               = column;
  386|  3.85k|        err.empty_label.label_name = label_name;
  387|       |
  388|  3.85k|        return err;
  389|  3.85k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  3.85k|    {
  393|  3.85k|        return ConstructEmptyLabelParseError(
  394|  3.85k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  3.85k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 2.93k, False: 924]
  ------------------
  396|  2.93k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  3.85k|                        token.GetText());
  398|  3.85k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  3.09k|    {
  403|  3.09k|        ParseError err;
  404|       |
  405|  3.09k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  3.09k|        err.m_LineNumber = line_number;
  407|  3.09k|        err.m_Column     = column;
  408|       |
  409|  3.09k|        return err;
  410|  3.09k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  3.09k|    {
  414|  3.09k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  3.09k|                                               token.GetColumn().unsafe());
  416|  3.09k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.67M|    {
   19|  1.67M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.67M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  18.0k|    {
  182|  18.0k|        ParsedProgram program;
  183|       |
  184|  18.0k|        program.m_Tokens = tokens;
  185|       |
  186|  18.0k|        phi::boolean line_has_instruction{false};
  187|  18.0k|        phi::usize   label_count{0u};
  188|       |
  189|  4.08M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 4.07M, False: 18.0k]
  ------------------
  190|  4.07M|        {
  191|  4.07M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  4.07M|            switch (current_token.GetType())
  196|  4.07M|            {
  197|       |                // Ignore comments
  198|   394k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 394k, False: 3.67M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   394k|                    break;
  201|       |
  202|  1.98M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.98M, False: 2.08M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.98M|                    line_has_instruction = false;
  205|  1.98M|                    break;
  206|       |
  207|   281k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 281k, False: 3.78M]
  ------------------
  208|   281k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 26.2k, False: 255k]
  ------------------
  209|  26.2k|                    {
  210|  26.2k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  26.2k|                                current_token, Token::Type::NewLine));
  212|  26.2k|                        break;
  213|  26.2k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   255k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 147k, False: 107k]
  ------------------
  218|   147k|                    {
  219|   147k|                        program.AddParseError(
  220|   147k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   147k|                        break;
  222|   147k|                    }
  223|       |
  224|   107k|                    std::string_view label_name = current_token.GetText();
  225|   107k|                    label_name.remove_suffix(1);
  226|       |
  227|   107k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 8.64k, False: 98.6k]
  ------------------
  228|  8.64k|                    {
  229|  8.64k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  8.64k|                                current_token.GetLineNumber().unsafe(),
  231|  8.64k|                                current_token.GetColumn().unsafe(), label_name));
  232|  8.64k|                        break;
  233|  8.64k|                    }
  234|       |
  235|  98.6k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 43.5k, False: 55.0k]
  ------------------
  236|  43.5k|                    {
  237|  43.5k|                        program.AddParseError(
  238|  43.5k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  43.5k|                        break;
  240|  43.5k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  55.0k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 47.0k, False: 8.06k]
  ------------------
  244|  47.0k|                    {
  245|       |                        // Find first defintions of label
  246|  47.0k|                        const Token* first_label_definition =
  247|  47.0k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  47.0k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  47.0k|                                    {
  250|  47.0k|                                        std::string_view token_label_name = t.GetText();
  251|  47.0k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  47.0k|                                        if (token_label_name == label_name)
  254|  47.0k|                                        {
  255|  47.0k|                                            return true;
  256|  47.0k|                                        }
  257|  47.0k|                                    }
  258|       |
  259|  47.0k|                                    return false;
  260|  47.0k|                                });
  261|       |
  262|  47.0k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  47.0k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  47.0k|                                current_token, *first_label_definition));
  266|  47.0k|                        break;
  267|  47.0k|                    }
  268|       |
  269|  8.06k|                    program.m_JumpData[label_name] =
  270|  8.06k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  8.06k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  8.06k|                    break;
  277|  55.0k|                }
  278|       |
  279|   887k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 887k, False: 3.18M]
  ------------------
  280|   887k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 678k, False: 209k]
  ------------------
  281|   678k|                    {
  282|   678k|                        program.AddParseError(
  283|   678k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   678k|                        break;
  285|   678k|                    }
  286|       |
  287|   209k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   209k|                    PHI_ASSERT(current_token.HasHint());
  291|   209k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   209k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   209k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   209k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   209k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   209k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   209k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   209k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   209k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   299k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 285k, False: 13.9k]
  ------------------
  313|   285k|                    {
  314|       |                        // Get next token
  315|   285k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 665, False: 284k]
  ------------------
  316|    665|                        {
  317|    665|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    665|                                    current_token, number_of_argument_required.unsafe(),
  319|    665|                                    argument_num.unsafe()));
  320|    665|                            break;
  321|    665|                        }
  322|       |
  323|   284k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   284k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 57.0k, False: 227k]
  ------------------
  327|  57.0k|                        {
  328|  57.0k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 3.09k, False: 53.9k]
  ------------------
  329|  3.09k|                            {
  330|  3.09k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  3.09k|                            }
  332|       |
  333|  57.0k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  57.0k|                            continue;
  336|  57.0k|                        }
  337|       |
  338|   227k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 96.3k, False: 130k]
  ------------------
  339|  96.3k|                        {
  340|  96.3k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  96.3k|                                    token, number_of_argument_required.unsafe(),
  342|  96.3k|                                    argument_num.unsafe()));
  343|  96.3k|                            break;
  344|  96.3k|                        }
  345|       |
  346|   130k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   130k|                                parse_instruction_argument(
  348|   130k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   130k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 98.1k, False: 32.8k]
  ------------------
  350|  98.1k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  98.1k|                            break;
  353|  98.1k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  32.8k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  32.8k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  32.8k|                        argument_num++;
  360|  32.8k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  32.8k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   209k|                    program.m_Instructions.emplace_back(instruction);
  368|   209k|                    line_has_instruction = true;
  369|   209k|                    break;
  370|   887k|                }
  371|       |
  372|   520k|                default:
  ------------------
  |  Branch (372:17): [True: 520k, False: 3.54M]
  ------------------
  373|   520k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   520k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 359k, False: 160k]
  ------------------
  375|   359k|                    {
  376|   359k|                        expected_token_type = Token::Type::NewLine;
  377|   359k|                    }
  378|       |
  379|   520k|                    program.AddParseError(
  380|   520k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   520k|                    break;
  382|  4.07M|            }
  383|  4.07M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  18.0k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 1.66k, False: 16.3k]
  ------------------
  387|  1.66k|        {
  388|  20.5k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 18.8k, False: 1.66k]
  ------------------
  389|  18.8k|            {
  390|  18.8k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  18.8k|                const Token& token = *it;
  393|  18.8k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 3.85k, False: 15.0k]
  ------------------
  394|  3.85k|                {
  395|  3.85k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  3.85k|                    --label_count;
  397|  3.85k|                }
  398|  18.8k|            }
  399|  1.66k|        }
  400|       |
  401|  18.0k|        return program;
  402|  18.0k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  18.0k|    {
  406|  18.0k|        TokenStream tokens = Tokenize(source);
  407|  18.0k|        return Parse(tokens);
  408|  18.0k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   130k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   130k|        switch (token.GetType())
   38|   130k|        {
   39|  8.14k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 8.14k, False: 122k]
  ------------------
   40|  8.14k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 6.30k, False: 1.83k]
  ------------------
   41|  8.14k|                                          ArgumentType::AddressDisplacement))
   42|  6.30k|                {
   43|  6.30k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  6.30k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  6.30k|                    return {};
   47|  6.30k|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.83k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.83k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.83k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 8, False: 1.82k]
  ------------------
   55|      8|                {
   56|      8|                    program.AddParseError(
   57|      8|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      8|                    return {};
   59|      8|                }
   60|       |
   61|  1.82k|                auto         it           = tokens.current_position();
   62|  1.82k|                const Token& first_token  = tokens.consume();
   63|  1.82k|                const Token& second_token = tokens.consume();
   64|  1.82k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.82k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.82k, False: 0]
  ------------------
   67|  1.82k|                {
   68|  1.82k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.82k|                            first_token, Token::Type::OpenBracket));
   70|  1.82k|                    return {};
   71|  1.82k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  24.0k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 24.0k, False: 106k]
  ------------------
   98|  24.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 4.65k, False: 19.3k]
  ------------------
   99|  4.65k|                {
  100|  4.65k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  4.65k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  4.65k|                    return {};
  103|  4.65k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  19.3k|                return ConstructInstructionArgumentRegisterInt(
  109|  19.3k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  24.0k|            }
  111|  2.07k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 2.07k, False: 128k]
  ------------------
  112|  2.07k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.26k, False: 806]
  ------------------
  113|  1.26k|                {
  114|  1.26k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.26k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.26k|                    return {};
  117|  1.26k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    806|                return ConstructInstructionArgumentRegisterFloat(
  123|    806|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  2.07k|            }
  125|  4.40k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 4.40k, False: 126k]
  ------------------
  126|  4.40k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  4.40k|                return {};
  129|  2.07k|            }
  130|  30.6k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 30.6k, False: 100k]
  ------------------
  131|       |                // Parse as Label
  132|  30.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 5.49k, False: 25.1k]
  ------------------
  133|  5.49k|                {
  134|  5.49k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  5.49k|                            token, expected_argument_type, ArgumentType::Label));
  136|  5.49k|                    return {};
  137|  5.49k|                }
  138|       |
  139|  25.1k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 25.1k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  25.1k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 14.5k, False: 10.5k]
  ------------------
  146|  14.5k|                {
  147|  14.5k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  14.5k|                    return {};
  149|  14.5k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  10.5k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  25.1k|            }
  155|  9.35k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 9.35k, False: 121k]
  ------------------
  156|  9.35k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 6.84k, False: 2.51k]
  ------------------
  157|  6.84k|                {
  158|  6.84k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  6.84k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  6.84k|                    return {};
  161|  6.84k|                }
  162|       |
  163|  2.51k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.05k, False: 462]
  ------------------
  164|  2.05k|                {
  165|  2.05k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.05k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.05k|                }
  168|       |
  169|    462|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    462|                return {};
  171|  2.51k|            }
  172|       |
  173|  52.2k|            default:
  ------------------
  |  Branch (173:13): [True: 52.2k, False: 78.6k]
  ------------------
  174|  52.2k|                program.AddParseError(
  175|  52.2k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  52.2k|                return {};
  177|   130k|        }
  178|   130k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  1.64M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.64M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 178k, False: 1.46M]
  ------------------
  249|   178k|                                    {
  250|   178k|                                        std::string_view token_label_name = t.GetText();
  251|   178k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   178k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 47.0k, False: 131k]
  ------------------
  254|  47.0k|                                        {
  255|  47.0k|                                            return true;
  256|  47.0k|                                        }
  257|   178k|                                    }
  258|       |
  259|  1.59M|                                    return false;
  260|  1.64M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|    435|    {
  353|    435|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 0, False: 435]
  ------------------
  354|      0|        {
  355|      0|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|      0|            return false;
  357|      0|        }
  358|       |
  359|    435|        m_CurrentProgram = &program;
  360|       |
  361|    435|        m_ProgramCounter               = 0u;
  362|    435|        m_Halted                       = false;
  363|    435|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|    435|        m_LastRaisedException          = Exception::None;
  365|    435|        m_CurrentStepCount             = 0u;
  366|       |
  367|    435|        return true;
  368|    435|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.58M|    {
   14|  1.58M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 326k, False: 1.26M]
  ------------------
   15|   326k|        {
   16|   326k|            char first_char = token[0];
   17|   326k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 156k, False: 169k]
  |  Branch (17:38): [True: 5.37k, False: 164k]
  ------------------
   18|   162k|            {
   19|   162k|                char second_char = token[1];
   20|   162k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 161k, False: 762]
  |  Branch (20:43): [True: 157k, False: 4.27k]
  ------------------
   21|   157k|                {
   22|   157k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|   157k|                }
   24|   162k|            }
   25|   326k|        }
   26|  1.26M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 758k, False: 502k]
  ------------------
   27|   758k|        {
   28|   758k|            char first_char = token[0];
   29|   758k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 27.8k, False: 730k]
  |  Branch (29:38): [True: 4.40k, False: 725k]
  ------------------
   30|  32.2k|            {
   31|  32.2k|                char second_char = token[1];
   32|  32.2k|                char third_char  = token[2];
   33|       |
   34|  32.2k|                switch (second_char)
   35|  32.2k|                {
   36|  12.7k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 12.7k, False: 19.5k]
  ------------------
   37|  12.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 12.0k, False: 707]
  |  Branch (37:50): [True: 11.8k, False: 195]
  ------------------
   38|  11.8k|                        {
   39|  11.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  11.8k|                        }
   41|    902|                        break;
   42|  12.7k|                    }
   43|  12.8k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 12.8k, False: 19.4k]
  ------------------
   44|  12.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 12.1k, False: 677]
  |  Branch (44:50): [True: 10.1k, False: 2.08k]
  ------------------
   45|  10.1k|                        {
   46|  10.1k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  10.1k|                        }
   48|  2.76k|                        break;
   49|  12.8k|                    }
   50|  5.84k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 5.84k, False: 26.4k]
  ------------------
   51|  5.84k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 882, False: 4.95k]
  |  Branch (51:50): [True: 4.82k, False: 139]
  ------------------
   52|  5.70k|                        {
   53|  5.70k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  5.70k|                        }
   55|    139|                        break;
   56|  5.84k|                    }
   57|    827|                    default: {
  ------------------
  |  Branch (57:21): [True: 827, False: 31.4k]
  ------------------
   58|    827|                        break;
   59|  5.84k|                    }
   60|  32.2k|                }
   61|  32.2k|            }
   62|   758k|        }
   63|       |
   64|  1.40M|        return IntRegisterID::None;
   65|  1.58M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.40M|    {
   69|  1.40M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 169k, False: 1.23M]
  ------------------
   70|   169k|        {
   71|   169k|            char first_char = token[0];
   72|   169k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 17.5k, False: 151k]
  |  Branch (72:38): [True: 3.86k, False: 147k]
  ------------------
   73|  21.3k|            {
   74|  21.3k|                char second_char = token[1];
   75|  21.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 20.9k, False: 402]
  |  Branch (75:43): [True: 17.5k, False: 3.38k]
  ------------------
   76|  17.5k|                {
   77|  17.5k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  17.5k|                }
   79|  21.3k|            }
   80|   169k|        }
   81|  1.23M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 730k, False: 502k]
  ------------------
   82|   730k|        {
   83|   730k|            char first_char = token[0];
   84|   730k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 16.2k, False: 714k]
  |  Branch (84:38): [True: 4.95k, False: 709k]
  ------------------
   85|  21.2k|            {
   86|  21.2k|                char second_char = token[1];
   87|  21.2k|                char third_char  = token[2];
   88|       |
   89|  21.2k|                switch (second_char)
   90|  21.2k|                {
   91|  8.34k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 8.34k, False: 12.8k]
  ------------------
   92|  8.34k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 6.74k, False: 1.59k]
  |  Branch (92:50): [True: 6.60k, False: 143]
  ------------------
   93|  6.60k|                        {
   94|  6.60k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  6.60k|                        }
   96|  1.74k|                        break;
   97|  8.34k|                    }
   98|  3.63k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 3.63k, False: 17.5k]
  ------------------
   99|  3.63k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 2.87k, False: 758]
  |  Branch (99:50): [True: 2.63k, False: 241]
  ------------------
  100|  2.63k|                        {
  101|  2.63k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  2.63k|                        }
  103|    999|                        break;
  104|  3.63k|                    }
  105|  8.02k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 8.02k, False: 13.2k]
  ------------------
  106|  8.02k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 5.83k, False: 2.18k]
  |  Branch (106:50): [True: 1.11k, False: 1.06k]
  ------------------
  107|  6.95k|                        {
  108|  6.95k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  6.95k|                        }
  110|  1.06k|                        break;
  111|  8.02k|                    }
  112|  1.23k|                    default: {
  ------------------
  |  Branch (112:21): [True: 1.23k, False: 20.0k]
  ------------------
  113|  1.23k|                        break;
  114|  8.02k|                    }
  115|  21.2k|                }
  116|  21.2k|            }
  117|   730k|        }
  118|       |
  119|  1.36M|        return FloatRegisterID::None;
  120|  1.40M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.61M|    {
  124|  1.61M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 327k, False: 1.28M]
  ------------------
  125|   327k|        {
  126|   327k|            char c1 = token[0];
  127|   327k|            char c2 = token[1];
  128|   327k|            char c3 = token[2];
  129|   327k|            char c4 = token[3];
  130|       |
  131|   327k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 36.3k, False: 291k]
  |  Branch (131:34): [True: 1.04k, False: 290k]
  |  Branch (131:49): [True: 36.0k, False: 1.36k]
  |  Branch (131:62): [True: 497, False: 864]
  ------------------
  132|   327k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 35.9k, False: 579]
  |  Branch (132:34): [True: 406, False: 173]
  |  Branch (132:49): [True: 35.9k, False: 410]
  |  Branch (132:62): [True: 3, False: 407]
  ------------------
  133|   327k|        }
  134|       |
  135|  1.28M|        return false;
  136|  1.61M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  3.14M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|  1.21M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  11.3M|    {
   41|  11.3M|        return m_Type;
   42|  11.3M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  6.47M|    {
   51|  6.47M|        return m_LineNumber;
   52|  6.47M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  12.5M|    {
   56|  12.5M|        return m_Column;
   57|  12.5M|    }
_ZNK3dlx5Token9GetLengthEv:
   60|  8.59M|    {
   61|  8.59M|        return m_Text.length();
   62|  8.59M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   870k|    {
   66|   870k|        return m_Text;
   67|   870k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   213k|    {
   80|   213k|        return m_HasHint;
   81|   213k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   233k|    {
   85|   233k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   233k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   233k|                   m_Type == Type::ImmediateInteger);
   88|   233k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   233k|        return m_Hint;
   91|   233k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  18.0k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  18.0k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  18.0k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.83k|    {
   51|  1.83k|        auto it = m_Iterator;
   52|  7.31k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 5.48k, False: 1.82k]
  ------------------
   53|  5.48k|        {
   54|  5.48k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 8, False: 5.48k]
  ------------------
   55|      8|            {
   56|      8|                return false;
   57|      8|            }
   58|  5.48k|        }
   59|       |
   60|  1.82k|        return true;
   61|  1.83k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.37M|    {
   65|  4.37M|        return m_Iterator != m_Tokens.end();
   66|  4.37M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.36M|    {
   70|  4.36M|        return m_Iterator == m_Tokens.end();
   71|  4.36M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.36M|    {
   85|  4.36M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.36M|        return *m_Iterator++;
   91|  4.36M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.82k|    {
  164|  1.82k|        return m_Iterator;
  165|  1.82k|    }
_ZNK3dlx11TokenStream5beginEv:
  182|  18.0k|    {
  183|       |#if defined(PHI_DEBUG)
  184|       |        //PHI_ASSERT(m_Finialized);
  185|       |#endif
  186|       |
  187|  18.0k|        return m_Tokens.begin();
  188|  18.0k|    }
_ZNK3dlx11TokenStream3endEv:
  200|  18.0k|    {
  201|       |#if defined(PHI_DEBUG)
  202|       |        //PHI_ASSERT(m_Finialized);
  203|       |#endif
  204|       |
  205|  18.0k|        return m_Tokens.end();
  206|  18.0k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  1.66k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  1.66k|        return m_Tokens.rbegin();
  224|  1.66k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  18.8k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  18.8k|        return m_Tokens.rend();
  233|  18.8k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  18.0k|    {
   63|  18.0k|        TokenStream tokens;
   64|       |
   65|  18.0k|        std::string_view current_token;
   66|       |
   67|  18.0k|        phi::u64 current_line_number{1u};
   68|  18.0k|        phi::u64 current_column{1u};
   69|  18.0k|        phi::u64 token_begin{0u};
   70|       |
   71|  18.0k|        phi::boolean parsing_comment{false};
   72|       |
   73|  9.31M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 9.29M, False: 18.0k]
  ------------------
   74|  9.29M|        {
   75|  9.29M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  9.29M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 2.08M, False: 7.20M]
  ------------------
   78|  2.08M|            {
   79|  2.08M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 1.39M, False: 689k]
  ------------------
   80|  1.39M|                {
   81|       |                    // Skip empty lines
   82|  1.39M|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  1.39M|                                        current_line_number, current_column);
   84|       |
   85|  1.39M|                    parsing_comment = false;
   86|  1.39M|                    current_line_number += 1u;
   87|  1.39M|                    current_column = 1u;
   88|  1.39M|                    continue;
   89|  1.39M|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   689k|                tokens.emplace_back(
   93|   689k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   689k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   689k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   689k|                                    current_line_number, current_column);
   98|       |
   99|   689k|                current_token   = std::string_view{};
  100|   689k|                parsing_comment = false;
  101|   689k|                current_line_number += 1u;
  102|   689k|                current_column = 0u;
  103|   689k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  7.20M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 9.57k, False: 7.19M]
  |  Branch (105:34): [True: 405k, False: 6.79M]
  ------------------
  106|   415k|            {
  107|   415k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 377k, False: 37.5k]
  ------------------
  108|   377k|                {
  109|   377k|                    token_begin = i;
  110|   377k|                }
  111|  37.5k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 31.7k, False: 5.73k]
  ------------------
  112|  31.7k|                {
  113|  31.7k|                    tokens.emplace_back(ParseToken(
  114|  31.7k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  31.7k|                            current_line_number, current_column - current_token.length()));
  116|  31.7k|                    token_begin   = i;
  117|  31.7k|                    current_token = std::string_view{};
  118|  31.7k|                }
  119|       |
  120|   415k|                parsing_comment = true;
  121|   415k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   415k|            }
  123|  6.79M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 491k, False: 6.29M]
  ------------------
  124|   491k|            {
  125|       |                // simply append the character
  126|   491k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   491k|            }
  128|  6.29M|            else
  129|  6.29M|            {
  130|       |                // Not parsing a comment
  131|  6.29M|                switch (c)
  132|  6.29M|                {
  133|   880k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 880k, False: 5.41M]
  ------------------
  134|   882k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 1.72k, False: 6.29M]
  ------------------
  135|   882k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 0, False: 6.29M]
  ------------------
  136|   882k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 1.24k, False: 880k]
  ------------------
  137|  1.24k|                        {
  138|  1.24k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  1.24k|                            continue;
  141|  1.24k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   880k|                        tokens.emplace_back(ParseToken(
  145|   880k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   880k|                                current_line_number, current_column - current_token.length()));
  147|   880k|                        current_token = std::string_view{};
  148|   880k|                        break;
  149|   141k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 141k, False: 6.15M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   141k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 119k, False: 22.0k]
  ------------------
  152|   119k|                        {
  153|   119k|                            current_token =
  154|   119k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   119k|                            tokens.emplace_back(ParseToken(
  156|   119k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   119k|                                    current_line_number,
  158|   119k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   119k|                            current_token = std::string_view{};
  161|   119k|                        }
  162|  22.0k|                        else
  163|  22.0k|                        {
  164|       |                            // Orphan colon
  165|  22.0k|                            token_begin = i;
  166|       |
  167|  22.0k|                            tokens.emplace_back(Token::Type::Colon,
  168|  22.0k|                                                source.substr(token_begin.unsafe(), 1),
  169|  22.0k|                                                current_line_number, current_column);
  170|  22.0k|                        }
  171|   141k|                        break;
  172|   261k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 261k, False: 6.03M]
  ------------------
  173|   265k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 4.45k, False: 6.29M]
  ------------------
  174|   266k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 696, False: 6.29M]
  ------------------
  175|   266k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 258k, False: 8.29k]
  ------------------
  176|   258k|                        {
  177|   258k|                            tokens.emplace_back(ParseToken(
  178|   258k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   258k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   258k|                            current_token = std::string_view{};
  182|   258k|                        }
  183|       |
  184|   266k|                        Token::Type type;
  185|   266k|                        switch (c)
  186|   266k|                        {
  187|   261k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 261k, False: 5.15k]
  ------------------
  188|   261k|                                type = Token::Type::Comma;
  189|   261k|                                break;
  190|  4.45k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 4.45k, False: 262k]
  ------------------
  191|  4.45k|                                type = Token::Type::OpenBracket;
  192|  4.45k|                                break;
  193|    696|                            case ')':
  ------------------
  |  Branch (193:29): [True: 696, False: 265k]
  ------------------
  194|    696|                                type = Token::Type::ClosingBracket;
  195|    696|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 266k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   266k|#endif
  201|   266k|                        }
  202|       |
  203|   266k|                        token_begin = i;
  204|       |
  205|   266k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   266k|                                            current_line_number, current_column);
  207|   266k|                        break;
  208|       |
  209|  5.00M|                    default:
  ------------------
  |  Branch (209:21): [True: 5.00M, False: 1.28M]
  ------------------
  210|  5.00M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.57M, False: 3.43M]
  ------------------
  211|  1.57M|                        {
  212|  1.57M|                            token_begin = i;
  213|  1.57M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  5.00M|                        current_token =
  217|  5.00M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  6.29M|                }
  219|  6.29M|            }
  220|       |
  221|  7.89M|            current_column += 1u;
  222|  7.89M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  18.0k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 5.23k, False: 12.7k]
  ------------------
  226|  5.23k|        {
  227|  5.23k|            tokens.emplace_back(
  228|  5.23k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  5.23k|                               current_line_number, current_column - current_token.length()));
  230|  5.23k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  18.0k|        tokens.finalize();
  234|       |
  235|  18.0k|        return tokens;
  236|  18.0k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.98M|    {
   11|  1.98M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 37.2k, False: 1.94M]
  |  Branch (11:35): [True: 37.1k, False: 155]
  ------------------
   12|  37.1k|        {
   13|  37.1k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  37.1k|            if (number)
  ------------------
  |  Branch (15:17): [True: 28.6k, False: 8.47k]
  ------------------
   16|  28.6k|            {
   17|  28.6k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  28.6k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  28.6k|            }
   20|       |
   21|  8.47k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  37.1k|        }
   23|       |
   24|  1.94M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 5.42k, False: 1.94M]
  |  Branch (24:35): [True: 403k, False: 1.53M]
  ------------------
   25|   409k|        {
   26|   409k|            return {Token::Type::Comment, token, line_number, column};
   27|   409k|        }
   28|       |
   29|  1.53M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 48.2k, False: 1.49M]
  ------------------
   30|  48.2k|        {
   31|  48.2k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  48.2k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  48.2k|        }
   34|       |
   35|  1.49M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 35.9k, False: 1.45M]
  ------------------
   36|  35.9k|        {
   37|  35.9k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  35.9k|        }
   39|       |
   40|  1.45M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 182k, False: 1.27M]
  ------------------
   41|   182k|        {
   42|   182k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|   182k|                    static_cast<std::uint32_t>(id)};
   44|   182k|        }
   45|       |
   46|  1.27M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 33.6k, False: 1.23M]
  ------------------
   47|  33.6k|        {
   48|  33.6k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  33.6k|                    static_cast<std::uint32_t>(id)};
   50|  33.6k|        }
   51|       |
   52|  1.23M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 925k, False: 312k]
  ------------------
   53|   925k|        {
   54|   925k|            return {Token::Type::OpCode, token, line_number, column,
   55|   925k|                    static_cast<std::uint32_t>(opcode)};
   56|   925k|        }
   57|       |
   58|   312k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  1.23M|    }

_ZN6ImVec2C2Ev:
  263|      1|    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  18.0k|    {
   53|       |        // Constants
   54|  18.0k|        constexpr std::uint8_t number_of_opcodes =
   55|  18.0k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  18.0k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  18.0k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  18.0k|        std::string ret;
   60|       |
   61|  3.13M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 3.11M, False: 17.8k]
  ------------------
   62|  3.11M|        {
   63|  3.11M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  3.11M|            switch (current_value)
   66|  3.11M|            {
   67|       |                // OpCode
   68|   859k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 859k, False: 2.25M]
  ------------------
   69|       |                    // Has one more value
   70|   859k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 857k, False: 2.03k]
  ------------------
   71|   857k|                    {
   72|   857k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   857k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   857k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 46, False: 857k]
  ------------------
   77|     46|                        {
   78|     46|                            return detail::ErrorString;
   79|     46|                        }
   80|   857k|                    }
   81|   859k|                    break;
   82|   859k|                }
   83|       |
   84|       |                // Int Register
   85|   859k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 202k, False: 2.90M]
  ------------------
   86|       |                    // Has one more value
   87|   202k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 202k, False: 319]
  ------------------
   88|   202k|                    {
   89|   202k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   202k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   202k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 14, False: 202k]
  ------------------
   93|     14|                        {
   94|     14|                            return detail::ErrorString;
   95|     14|                        }
   96|   202k|                    }
   97|   202k|                    break;
   98|   202k|                }
   99|       |
  100|       |                // Float register
  101|   202k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 34.9k, False: 3.07M]
  ------------------
  102|       |                    // Has one more value
  103|  34.9k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 34.8k, False: 133]
  ------------------
  104|  34.8k|                    {
  105|  34.8k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  34.8k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  34.8k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 4, False: 34.8k]
  ------------------
  109|      4|                        {
  110|      4|                            return detail::ErrorString;
  111|      4|                        }
  112|  34.8k|                    }
  113|  34.9k|                    break;
  114|  34.9k|                }
  115|       |
  116|       |                // Floating point status register
  117|  38.6k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 38.6k, False: 3.07M]
  ------------------
  118|  38.6k|                    ret += "FPSR";
  119|  38.6k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 14, False: 38.5k]
  ------------------
  120|     14|                    {
  121|     14|                        return detail::ErrorString;
  122|     14|                    }
  123|       |
  124|  38.5k|                    break;
  125|  38.6k|                }
  126|       |
  127|       |                // Immediate integer
  128|  48.9k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 48.9k, False: 3.06M]
  ------------------
  129|  48.9k|                    ret += "#";
  130|  48.9k|                    [[fallthrough]];
  131|  48.9k|                }
  132|       |
  133|       |                // Integer literal
  134|   203k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 154k, False: 2.95M]
  ------------------
  135|   203k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   203k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 202k, False: 356]
  ------------------
  138|   202k|                    {
  139|   202k|                        std::int16_t value = 0;
  140|       |
  141|   607k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 405k, False: 202k]
  ------------------
  142|   405k|                        {
  143|   405k|                            value <<= 8;
  144|   405k|                            value &= data[index++];
  145|   405k|                        }
  146|       |
  147|   202k|                        ret += std::to_string(value);
  148|   202k|                    }
  149|   203k|                    break;
  150|  48.9k|                }
  151|       |
  152|       |                // Label
  153|  38.0k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 38.0k, False: 3.07M]
  ------------------
  154|  38.0k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  38.0k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 37.9k, False: 28]
  ------------------
  157|  37.9k|                    {
  158|  37.9k|                        std::string label_name = "lbl_";
  159|       |
  160|   226k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 188k, False: 37.9k]
  ------------------
  161|   188k|                        {
  162|   188k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   188k|                            label_name += c;
  165|   188k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  37.9k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 37.4k, False: 554]
  |  Branch (168:45): [True: 27.6k, False: 9.77k]
  ------------------
  169|  27.6k|                        {
  170|  27.6k|                            label_name += ':';
  171|  27.6k|                            ret += label_name;
  172|  27.6k|                        }
  173|  10.3k|                        else
  174|  10.3k|                        {
  175|  10.3k|                            ret += label_name;
  176|  10.3k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 22, False: 10.3k]
  ------------------
  177|     22|                            {
  178|     22|                                return detail::ErrorString;
  179|     22|                            }
  180|  10.3k|                        }
  181|  37.9k|                    }
  182|  37.9k|                    break;
  183|  38.0k|                }
  184|       |
  185|       |                // Newline
  186|  1.33M|                case 7: {
  ------------------
  |  Branch (186:17): [True: 1.33M, False: 1.78M]
  ------------------
  187|  1.33M|                    ret += '\n';
  188|  1.33M|                    break;
  189|  38.0k|                }
  190|       |
  191|       |                // Comment
  192|   403k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 403k, False: 2.70M]
  ------------------
  193|   403k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   403k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 403k, False: 245]
  ------------------
  196|   403k|                    {
  197|   403k|                        std::string comment = "; ";
  198|       |
  199|  2.41M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 2.00M, False: 403k]
  ------------------
  200|  2.00M|                        {
  201|  2.00M|                            comment += static_cast<char>(data[index++]);
  202|  2.00M|                        }
  203|       |
  204|   403k|                        ret += comment + '\n';
  205|   403k|                    }
  206|   403k|                    break;
  207|  38.0k|                }
  208|       |
  209|       |                // Ignore
  210|     61|                default:
  ------------------
  |  Branch (210:17): [True: 61, False: 3.11M]
  ------------------
  211|     61|                    return detail::ErrorString;
  212|  3.11M|            }
  213|  3.11M|        }
  214|       |
  215|  17.8k|        return ret;
  216|  18.0k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|  1.14M|        {
   20|  1.14M|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 1.14M, False: 4.21k]
  ------------------
   21|  1.14M|            {
   22|  1.14M|                std::uint8_t val = data[index++];
   23|  1.14M|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 888k, False: 251k]
  ------------------
   24|   888k|                {
   25|   888k|                    text += ' ';
   26|   888k|                }
   27|   251k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 251k, False: 100]
  ------------------
   28|   251k|                {
   29|   251k|                    text += ',';
   30|   251k|                }
   31|    100|                else
   32|    100|                {
   33|    100|                    return false;
   34|    100|                }
   35|  1.14M|            }
   36|       |
   37|  1.14M|            return true;
   38|  1.14M|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   188k|        {
   42|   188k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 157k, False: 30.8k]
  ------------------
   43|   157k|            {
   44|   157k|                return '_';
   45|   157k|            }
   46|       |
   47|  30.8k|            return c;
   48|   188k|        }

LLVMFuzzerTestOneInput:
   12|  18.0k|{
   13|  18.0k|    static dlxemu::Emulator emu;
   14|       |
   15|  18.0k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|  18.0k|    dlxemu::CodeEditor& editor = emu.GetEditor();
   18|       |
   19|       |    // Parse it
   20|  18.0k|    editor.SetText(source);
   21|  18.0k|    editor.m_FullText = editor.GetText();
   22|       |
   23|  18.0k|    emu.ParseProgram(editor.m_FullText);
   24|       |
   25|  18.0k|    editor.ColorizeInternal();
   26|       |
   27|  18.0k|    return 0;
   28|  18.0k|}


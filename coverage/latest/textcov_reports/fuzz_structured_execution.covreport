_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  75.1k|        {
  173|  75.1k|            PHI_ASSERT(index < 3u);
  174|       |
  175|  75.1k|            switch (index.unsafe())
  176|  75.1k|            {
  177|  29.3k|                case 0:
  ------------------
  |  Branch (177:17): [True: 29.3k, False: 45.7k]
  ------------------
  178|  29.3k|                    return m_Arg1Type;
  179|       |
  180|  23.4k|                case 1:
  ------------------
  |  Branch (180:17): [True: 23.4k, False: 51.6k]
  ------------------
  181|  23.4k|                    return m_Arg2Type;
  182|       |
  183|  22.3k|                case 2:
  ------------------
  |  Branch (183:17): [True: 22.3k, False: 52.7k]
  ------------------
  184|  22.3k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 75.1k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  75.1k|#endif
  191|  75.1k|            }
  192|  75.1k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  19.2k|        {
  199|  19.2k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  19.2k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 18.2k, False: 956]
  ------------------
  203|  18.2k|            {
  204|  18.2k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  18.2k|            }
  206|  19.2k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 14.4k, False: 4.79k]
  ------------------
  207|  14.4k|            {
  208|  14.4k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  14.4k|            }
  210|  19.2k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 9.51k, False: 9.72k]
  ------------------
  211|  9.51k|            {
  212|  9.51k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  9.51k|            }
  214|       |
  215|  19.2k|            return number_of_argument_required;
  216|  19.2k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  219|  4.74M|        {
  220|  4.74M|            return m_RegisterAccessType;
  221|  4.74M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  19.2k|        {
  225|  19.2k|            return m_Executor;
  226|  19.2k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  14.2M|    {
   38|  14.2M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  14.2M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  14.2M|                                         static_cast<underlying_t>(rhs));
   42|  14.2M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  14.2M|    {
   55|  14.2M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  14.2M|        return static_cast<underlying_t>(type & test) != 0;
   58|  14.2M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  23.5k|    {
  206|  23.5k|        switch (value)
  207|  23.5k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|    953|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    953|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 953, False: 22.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    953|        return #name;
  |  |  ------------------
  |  |   16|  1.05k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.05k, False: 22.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.05k|        return #name;
  |  |  ------------------
  |  |   17|  1.05k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    251|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 251, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    251|        return #name;
  |  |  ------------------
  |  |   18|    251|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    238|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 238, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    238|        return #name;
  |  |  ------------------
  |  |   19|    238|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    225|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 225, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    225|        return #name;
  |  |  ------------------
  |  |   20|    283|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    283|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 283, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    283|        return #name;
  |  |  ------------------
  |  |   21|    283|                                                                                                   \
  |  |   22|    283|    /* Sub */                                                                                      \
  |  |   23|    283|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    260|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 260, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    260|        return #name;
  |  |  ------------------
  |  |   24|    260|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    105|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 105, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    105|        return #name;
  |  |  ------------------
  |  |   25|    309|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    309|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 309, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    309|        return #name;
  |  |  ------------------
  |  |   26|    309|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |   27|    220|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    220|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 220, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    220|        return #name;
  |  |  ------------------
  |  |   28|    221|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    221|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 221, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    221|        return #name;
  |  |  ------------------
  |  |   29|    221|                                                                                                   \
  |  |   30|    221|    /* Multiplication */                                                                           \
  |  |   31|    356|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    356|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 356, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    356|        return #name;
  |  |  ------------------
  |  |   32|    356|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 92, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     92|        return #name;
  |  |  ------------------
  |  |   33|    234|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    234|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 234, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    234|        return #name;
  |  |  ------------------
  |  |   34|    234|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    134|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 134, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    134|        return #name;
  |  |  ------------------
  |  |   35|    242|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    242|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 242, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    242|        return #name;
  |  |  ------------------
  |  |   36|    242|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 101, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    101|        return #name;
  |  |  ------------------
  |  |   37|    101|                                                                                                   \
  |  |   38|    101|    /* Division */                                                                                 \
  |  |   39|    101|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |   40|     82|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   41|     79|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |   42|    195|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 195, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    195|        return #name;
  |  |  ------------------
  |  |   43|    195|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   44|     69|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |   45|     69|                                                                                                   \
  |  |   46|     69|    /* Shift left (logical) */                                                                     \
  |  |   47|    261|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    261|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 261, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    261|        return #name;
  |  |  ------------------
  |  |   48|    261|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   49|    208|                                                                                                   \
  |  |   50|    208|    /* Shift right (logical) */                                                                    \
  |  |   51|    284|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    284|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 284, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    284|        return #name;
  |  |  ------------------
  |  |   52|    553|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    553|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 553, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    553|        return #name;
  |  |  ------------------
  |  |   53|    553|                                                                                                   \
  |  |   54|    553|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    553|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    261|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 261, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    261|        return #name;
  |  |  ------------------
  |  |   56|    261|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |   57|     86|                                                                                                   \
  |  |   58|     86|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    113|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    113|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 113, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    113|        return #name;
  |  |  ------------------
  |  |   60|    122|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 122, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    122|        return #name;
  |  |  ------------------
  |  |   61|    122|                                                                                                   \
  |  |   62|    122|    /* Logic */                                                                                    \
  |  |   63|    122|                                                                                                   \
  |  |   64|    122|    /* And */                                                                                      \
  |  |   65|    122|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 84, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     84|        return #name;
  |  |  ------------------
  |  |   66|    459|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    459|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 459, False: 23.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    459|        return #name;
  |  |  ------------------
  |  |   67|    459|                                                                                                   \
  |  |   68|    459|    /* Or */                                                                                       \
  |  |   69|    459|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  |  |   70|    206|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 84, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     84|        return #name;
  |  |  ------------------
  |  |   71|     84|                                                                                                   \
  |  |   72|     84|    /* XOR */                                                                                      \
  |  |   73|     85|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |   74|    526|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    526|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 526, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    526|        return #name;
  |  |  ------------------
  |  |   75|    526|                                                                                                   \
  |  |   76|    526|    /* Set conditionals */                                                                         \
  |  |   77|    526|                                                                                                   \
  |  |   78|    526|    /* Less than */                                                                                \
  |  |   79|    526|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |   80|    218|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 218, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    218|        return #name;
  |  |  ------------------
  |  |   81|    218|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 78, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     78|        return #name;
  |  |  ------------------
  |  |   82|    101|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 101, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    101|        return #name;
  |  |  ------------------
  |  |   83|    101|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 84, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     84|        return #name;
  |  |  ------------------
  |  |   84|    104|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    104|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 104, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    104|        return #name;
  |  |  ------------------
  |  |   85|    104|                                                                                                   \
  |  |   86|    104|    /* Greater than */                                                                             \
  |  |   87|    208|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   88|    208|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |   89|    206|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  |  |   90|    206|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |   91|    418|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    418|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 418, False: 23.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    418|        return #name;
  |  |  ------------------
  |  |   92|    540|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    540|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 540, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    540|        return #name;
  |  |  ------------------
  |  |   93|    540|                                                                                                   \
  |  |   94|    540|    /* Less than or equal */                                                                       \
  |  |   95|    540|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |   96|    210|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |   97|    210|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |   98|    288|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    288|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 288, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    288|        return #name;
  |  |  ------------------
  |  |   99|    288|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 93, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     93|        return #name;
  |  |  ------------------
  |  |  100|    244|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    244|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 244, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    244|        return #name;
  |  |  ------------------
  |  |  101|    244|                                                                                                   \
  |  |  102|    244|    /* Greater than or equal */                                                                    \
  |  |  103|    303|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    303|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 303, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    303|        return #name;
  |  |  ------------------
  |  |  104|    540|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    540|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 540, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    540|        return #name;
  |  |  ------------------
  |  |  105|    540|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    118|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 118, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    118|        return #name;
  |  |  ------------------
  |  |  106|    226|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    226|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 226, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    226|        return #name;
  |  |  ------------------
  |  |  107|    226|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  108|    101|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 101, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    101|        return #name;
  |  |  ------------------
  |  |  109|    101|                                                                                                   \
  |  |  110|    101|    /* Equal */                                                                                    \
  |  |  111|    101|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  112|     90|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 90, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     90|        return #name;
  |  |  ------------------
  |  |  113|    314|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    314|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 314, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    314|        return #name;
  |  |  ------------------
  |  |  114|    314|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    282|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 282, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    282|        return #name;
  |  |  ------------------
  |  |  115|    282|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    275|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 275, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    275|        return #name;
  |  |  ------------------
  |  |  116|    275|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |  117|     81|                                                                                                   \
  |  |  118|     81|    /* Not equal */                                                                                \
  |  |  119|    208|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |  120|    208|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 89, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     89|        return #name;
  |  |  ------------------
  |  |  121|     89|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  122|    147|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    147|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 147, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    147|        return #name;
  |  |  ------------------
  |  |  123|    147|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |  124|     82|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |  125|     82|                                                                                                   \
  |  |  126|     82|    /* Conditional branching */                                                                    \
  |  |  127|    102|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 102, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    102|        return #name;
  |  |  ------------------
  |  |  128|    102|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 102, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    102|        return #name;
  |  |  ------------------
  |  |  129|    102|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 92, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     92|        return #name;
  |  |  ------------------
  |  |  130|    918|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    918|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 918, False: 22.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    918|        return #name;
  |  |  ------------------
  |  |  131|    918|                                                                                                   \
  |  |  132|    918|    /* Unconditional branching */                                                                  \
  |  |  133|    918|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|    547|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 547, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    547|        return #name;
  |  |  ------------------
  |  |  134|    547|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |  135|    216|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    216|        return #name;
  |  |  ------------------
  |  |  136|    423|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    423|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 423, False: 23.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    423|        return #name;
  |  |  ------------------
  |  |  137|    423|                                                                                                   \
  |  |  138|    423|    /* Loading data */                                                                             \
  |  |  139|    597|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    597|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 597, False: 22.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    597|        return #name;
  |  |  ------------------
  |  |  140|    597|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  141|     68|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  142|     81|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |  143|    285|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    285|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 285, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    285|        return #name;
  |  |  ------------------
  |  |  144|    348|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    348|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 348, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    348|        return #name;
  |  |  ------------------
  |  |  145|    348|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  146|     67|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  147|     67|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  148|     67|                                                                                                   \
  |  |  149|     67|    /* Storing data */                                                                             \
  |  |  150|    205|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 205, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    205|        return #name;
  |  |  ------------------
  |  |  151|    205|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |  152|     71|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  153|    194|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  154|    194|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  155|    292|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    292|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 292, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    292|        return #name;
  |  |  ------------------
  |  |  156|    407|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    407|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 407, False: 23.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    407|        return #name;
  |  |  ------------------
  |  |  157|    407|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 69, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     69|        return #name;
  |  |  ------------------
  |  |  158|     69|                                                                                                   \
  |  |  159|     69|    /* Moving data */                                                                              \
  |  |  160|    222|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    222|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 222, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    222|        return #name;
  |  |  ------------------
  |  |  161|    222|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |  162|    240|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|    240|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 240, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    240|        return #name;
  |  |  ------------------
  |  |  163|    240|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|    214|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 214, False: 23.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|    214|        return #name;
  |  |  ------------------
  |  |  164|    214|                                                                                                   \
  |  |  165|    214|    /* Converting data */                                                                          \
  |  |  166|    214|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |  167|     96|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 96, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     96|        return #name;
  |  |  ------------------
  |  |  168|     96|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |  169|     86|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  170|     86|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  171|     86|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |  172|     80|                                                                                                   \
  |  |  173|     80|    /* Other */                                                                                    \
  |  |  174|    135|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    135|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 135, False: 23.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    135|        return #name;
  |  |  ------------------
  |  |  175|    135|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 76, False: 23.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|     76|        return #name;
  |  |  ------------------
  |  |  176|    865|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|    865|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 865, False: 22.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    865|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 23.5k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  23.5k|        }
  219|  23.5k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  6.77k|    {
   31|  6.77k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 127, False: 6.65k]
  ------------------
   32|    127|        {
   33|    127|            return true;
   34|    127|        }
   35|       |
   36|  6.65k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 71, False: 6.57k]
  ------------------
   37|     71|        {
   38|     71|            return true;
   39|     71|        }
   40|       |
   41|  6.57k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 470, False: 6.10k]
  ------------------
   42|    470|        {
   43|    470|            return true;
   44|    470|        }
   45|       |
   46|  6.10k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 6.10k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  6.10k|        return false;
   52|  6.10k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  6.10k|    {
   56|  6.10k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 6.10k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  6.10k|        const char first_char = token.at(0u);
   62|       |
   63|  6.10k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 1.26k, False: 4.84k]
  ------------------
   64|  1.26k|        {
   65|  1.26k|            return phi::is_alpha(first_char);
   66|  1.26k|        }
   67|       |
   68|  4.84k|        phi::boolean just_under_scores = (first_char == '_');
   69|  4.84k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 864, False: 3.98k]
  |  Branch (69:13): [True: 700, False: 4.14k]
  |  Branch (69:43): [True: 700, False: 164]
  ------------------
   70|    700|        {
   71|    700|            return false;
   72|    700|        }
   73|       |
   74|  23.5k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 20.9k, False: 2.61k]
  ------------------
   75|  20.9k|        {
   76|  20.9k|            const char c{token.at(index)};
   77|       |
   78|  20.9k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 8.90k, False: 12.0k]
  ------------------
   79|  8.90k|            {
   80|  8.90k|                just_under_scores = false;
   81|  8.90k|            }
   82|  12.0k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 10.5k, False: 1.53k]
  ------------------
   83|  10.5k|            {
   84|  10.5k|                continue;
   85|  10.5k|            }
   86|  1.53k|            else
   87|  1.53k|            {
   88|  1.53k|                return false;
   89|  1.53k|            }
   90|  20.9k|        }
   91|       |
   92|  2.61k|        return !just_under_scores;
   93|  4.14k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|  73.9k|    {
   99|  73.9k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 73.9k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|  73.9k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 8.04k, False: 65.9k]
  ------------------
  105|  8.04k|        {
  106|  8.04k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 2.68k, False: 5.35k]
  ------------------
  107|  2.68k|            {
  108|  2.68k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  2.68k|            }
  110|       |
  111|  5.35k|            return {};
  112|  8.04k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  65.9k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 79, False: 65.8k]
  ------------------
  116|     79|        {
  117|     79|            return {};
  118|     79|        }
  119|       |
  120|  65.8k|        phi::int32_t number{0};
  121|  65.8k|        phi::boolean is_negative{false};
  122|  65.8k|        phi::boolean starts_with_zero{false};
  123|  65.8k|        phi::boolean parsing_binary{false};
  124|  65.8k|        phi::boolean parsing_octal{false};
  125|  65.8k|        phi::boolean parsing_hexadecimal{false};
  126|  65.8k|        phi::boolean parsed_something{false};
  127|  65.8k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|  73.0k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 72.1k, False: 862]
  ------------------
  132|  72.1k|        {
  133|  72.1k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|  72.1k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 65.8k, False: 6.29k]
  ------------------
  137|  65.8k|            {
  138|  65.8k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 66, False: 65.7k]
  ------------------
  139|     66|                {
  140|     66|                    continue;
  141|     66|                }
  142|       |
  143|  65.7k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 173, False: 65.6k]
  ------------------
  144|    173|                {
  145|    173|                    is_negative = true;
  146|    173|                    continue;
  147|    173|                }
  148|       |
  149|  65.6k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 2.48k, False: 63.1k]
  ------------------
  150|  2.48k|                {
  151|  2.48k|                    starts_with_zero = true;
  152|  2.48k|                    continue;
  153|  2.48k|                }
  154|       |
  155|  63.1k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 66, False: 63.0k]
  ------------------
  156|     66|                {
  157|     66|                    return {};
  158|     66|                }
  159|  63.1k|            }
  160|       |
  161|       |            // Second character
  162|  69.3k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 3.04k, False: 66.3k]
  ------------------
  163|  3.04k|            {
  164|  3.04k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 2.48k, False: 556]
  ------------------
  165|  2.48k|                {
  166|       |                    // Binary
  167|  2.48k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 341, False: 2.14k]
  |  Branch (167:37): [True: 232, False: 1.91k]
  ------------------
  168|    573|                    {
  169|    573|                        parsing_binary = true;
  170|    573|                        continue;
  171|    573|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  1.91k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 664, False: 1.25k]
  |  Branch (174:37): [True: 72, False: 1.17k]
  ------------------
  175|    736|                    {
  176|    736|                        parsing_hexadecimal = true;
  177|    736|                        continue;
  178|    736|                    }
  179|       |
  180|       |                    // Octal
  181|  1.17k|                    parsing_octal = true;
  182|  1.17k|                }
  183|  3.04k|            }
  184|       |
  185|       |            // Handle separators
  186|  68.0k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 138, False: 67.9k]
  ------------------
  187|    138|            {
  188|    138|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 66, False: 72]
  ------------------
  189|     66|                {
  190|     66|                    return {};
  191|     66|                }
  192|       |
  193|     72|                parsed_separator = true;
  194|     72|                continue;
  195|    138|            }
  196|       |
  197|       |            // Check for over/underflow
  198|  67.9k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 183, False: 67.7k]
  |  Branch (198:32): [True: 0, False: 183]
  ------------------
  199|      0|            {
  200|       |                // Would underflow
  201|      0|                return {};
  202|      0|            }
  203|  67.9k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 67.7k, False: 183]
  |  Branch (203:17): [True: 0, False: 67.9k]
  |  Branch (203:33): [True: 0, False: 67.7k]
  ------------------
  204|      0|            {
  205|       |                // Would overflow
  206|      0|                return {};
  207|      0|            }
  208|       |
  209|  67.9k|            parsed_separator = false;
  210|  67.9k|            parsed_something = true;
  211|       |
  212|  67.9k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 720, False: 67.1k]
  ------------------
  213|    720|            {
  214|    720|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 242, False: 478]
  ------------------
  215|    242|                {
  216|    242|                    return {};
  217|    242|                }
  218|       |
  219|    478|                number <<= 1;
  220|    478|                number |= (c - '0');
  221|    478|            }
  222|  67.1k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 1.95k, False: 65.2k]
  ------------------
  223|  1.95k|            {
  224|  1.95k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 1.15k, False: 806]
  ------------------
  225|  1.15k|                {
  226|  1.15k|                    return {};
  227|  1.15k|                }
  228|       |
  229|    806|                number <<= 3;
  230|    806|                number |= (c - '0');
  231|    806|            }
  232|  65.2k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 1.21k, False: 64.0k]
  ------------------
  233|  1.21k|            {
  234|  1.21k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 536, False: 674]
  ------------------
  235|    536|                {
  236|    536|                    return {};
  237|    536|                }
  238|       |
  239|    674|                number <<= 4;
  240|    674|                number |= phi::hex_digit_value(c).unsafe();
  241|    674|            }
  242|  64.0k|            else
  243|  64.0k|            {
  244|  64.0k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 62.8k, False: 1.15k]
  ------------------
  245|  62.8k|                {
  246|  62.8k|                    return {};
  247|  62.8k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  1.15k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 457, False: 696]
  |  Branch (250:36): [True: 66, False: 391]
  ------------------
  251|     66|                {
  252|     66|                    return {};
  253|     66|                }
  254|       |
  255|  1.08k|                number *= 10;
  256|  1.08k|                number += (c - '0');
  257|  1.08k|            }
  258|  67.9k|        }
  259|       |
  260|    862|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 754, False: 108]
  ------------------
  261|    754|        {
  262|       |            // Check for over/underflow
  263|    754|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 68, False: 686]
  |  Branch (263:32): [True: 0, False: 68]
  ------------------
  264|      0|            {
  265|       |                // Would underflow
  266|      0|                return {};
  267|      0|            }
  268|    754|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 686, False: 68]
  |  Branch (268:17): [True: 0, False: 754]
  |  Branch (268:33): [True: 0, False: 686]
  ------------------
  269|      0|            {
  270|       |                // Would overflow
  271|      0|                return {};
  272|      0|            }
  273|       |
  274|    754|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 68, False: 686]
  ------------------
  275|     68|            {
  276|     68|                return static_cast<phi::int16_t>(-number);
  277|     68|            }
  278|       |
  279|    686|            return static_cast<phi::int16_t>(number);
  280|    754|        }
  281|       |
  282|    108|        return {};
  283|    862|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  9.26k|    {
   97|  9.26k|        switch (value)
   98|  9.26k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  1.44k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.44k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.44k, False: 7.82k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.44k|        return #name;
  |  |  ------------------
  |  |   14|  3.95k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|  3.95k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3.95k, False: 5.31k]
  |  |  |  |  ------------------
  |  |  |  |  101|  3.95k|        return #name;
  |  |  ------------------
  |  |   15|  3.95k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|     23|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 23, False: 9.24k]
  |  |  |  |  ------------------
  |  |  |  |  101|     23|        return #name;
  |  |  ------------------
  |  |   16|  1.21k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.21k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.21k, False: 8.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.21k|        return #name;
  |  |  ------------------
  |  |   17|  1.21k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|    393|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 393, False: 8.87k]
  |  |  |  |  ------------------
  |  |  |  |  101|    393|        return #name;
  |  |  ------------------
  |  |   18|    393|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|     33|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 33, False: 9.23k]
  |  |  |  |  ------------------
  |  |  |  |  101|     33|        return #name;
  |  |  ------------------
  |  |   19|     33|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|     29|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 29, False: 9.24k]
  |  |  |  |  ------------------
  |  |  |  |  101|     29|        return #name;
  |  |  ------------------
  |  |   20|     29|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|     21|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 21, False: 9.24k]
  |  |  |  |  ------------------
  |  |  |  |  101|     21|        return #name;
  |  |  ------------------
  |  |   21|     66|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|     66|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 66, False: 9.20k]
  |  |  |  |  ------------------
  |  |  |  |  101|     66|        return #name;
  |  |  ------------------
  |  |   22|     78|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|     78|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 78, False: 9.19k]
  |  |  |  |  ------------------
  |  |  |  |  101|     78|        return #name;
  |  |  ------------------
  |  |   23|     78|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     23|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 23, False: 9.24k]
  |  |  |  |  ------------------
  |  |  |  |  101|     23|        return #name;
  |  |  ------------------
  |  |   24|     67|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|     67|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 67, False: 9.20k]
  |  |  |  |  ------------------
  |  |  |  |  101|     67|        return #name;
  |  |  ------------------
  |  |   25|     67|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 5, False: 9.26k]
  |  |  |  |  ------------------
  |  |  |  |  101|      5|        return #name;
  |  |  ------------------
  |  |   26|     50|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|     50|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 50, False: 9.21k]
  |  |  |  |  ------------------
  |  |  |  |  101|     50|        return #name;
  |  |  ------------------
  |  |   27|     50|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 5, False: 9.26k]
  |  |  |  |  ------------------
  |  |  |  |  101|      5|        return #name;
  |  |  ------------------
  |  |   28|     57|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 57, False: 9.21k]
  |  |  |  |  ------------------
  |  |  |  |  101|     57|        return #name;
  |  |  ------------------
  |  |   29|    191|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|    191|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 191, False: 9.07k]
  |  |  |  |  ------------------
  |  |  |  |  101|    191|        return #name;
  |  |  ------------------
  |  |   30|    191|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|     23|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 23, False: 9.24k]
  |  |  |  |  ------------------
  |  |  |  |  101|     23|        return #name;
  |  |  ------------------
  |  |   31|     39|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     39|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 39, False: 9.23k]
  |  |  |  |  ------------------
  |  |  |  |  101|     39|        return #name;
  |  |  ------------------
  |  |   32|     39|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 9, False: 9.26k]
  |  |  |  |  ------------------
  |  |  |  |  101|      9|        return #name;
  |  |  ------------------
  |  |   33|    238|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    238|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 238, False: 9.03k]
  |  |  |  |  ------------------
  |  |  |  |  101|    238|        return #name;
  |  |  ------------------
  |  |   34|    238|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|    207|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 207, False: 9.06k]
  |  |  |  |  ------------------
  |  |  |  |  101|    207|        return #name;
  |  |  ------------------
  |  |   35|    207|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 9.26k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   36|     27|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     27|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 27, False: 9.24k]
  |  |  |  |  ------------------
  |  |  |  |  101|     27|        return #name;
  |  |  ------------------
  |  |   37|     40|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|     40|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 40, False: 9.22k]
  |  |  |  |  ------------------
  |  |  |  |  101|     40|        return #name;
  |  |  ------------------
  |  |   38|     40|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 19, False: 9.25k]
  |  |  |  |  ------------------
  |  |  |  |  101|     19|        return #name;
  |  |  ------------------
  |  |   39|    252|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|    252|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 252, False: 9.01k]
  |  |  |  |  ------------------
  |  |  |  |  101|    252|        return #name;
  |  |  ------------------
  |  |   40|    252|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    187|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 187, False: 9.08k]
  |  |  |  |  ------------------
  |  |  |  |  101|    187|        return #name;
  |  |  ------------------
  |  |   41|    187|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 9, False: 9.26k]
  |  |  |  |  ------------------
  |  |  |  |  101|      9|        return #name;
  |  |  ------------------
  |  |   42|      9|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7, False: 9.26k]
  |  |  |  |  ------------------
  |  |  |  |  101|      7|        return #name;
  |  |  ------------------
  |  |   43|    285|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|    285|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 285, False: 8.98k]
  |  |  |  |  ------------------
  |  |  |  |  101|    285|        return #name;
  |  |  ------------------
  |  |   44|    285|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    268|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 268, False: 9.00k]
  |  |  |  |  ------------------
  |  |  |  |  101|    268|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 9.26k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  9.26k|        }
  110|  9.26k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  3.77k|    {
  134|  3.77k|        switch (value)
  135|  3.77k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    152|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|    152|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 152, False: 3.62k]
  |  |  |  |  ------------------
  |  |  |  |  138|    152|        return #name;
  |  |  ------------------
  |  |   48|    175|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    175|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 175, False: 3.60k]
  |  |  |  |  ------------------
  |  |  |  |  138|    175|        return #name;
  |  |  ------------------
  |  |   49|    175|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 17, False: 3.76k]
  |  |  |  |  ------------------
  |  |  |  |  138|     17|        return #name;
  |  |  ------------------
  |  |   50|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   51|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   52|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   53|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 12, False: 3.76k]
  |  |  |  |  ------------------
  |  |  |  |  138|     12|        return #name;
  |  |  ------------------
  |  |   54|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   55|    117|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|    117|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 117, False: 3.66k]
  |  |  |  |  ------------------
  |  |  |  |  138|    117|        return #name;
  |  |  ------------------
  |  |   56|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|    118|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 118, False: 3.66k]
  |  |  |  |  ------------------
  |  |  |  |  138|    118|        return #name;
  |  |  ------------------
  |  |   57|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   58|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   59|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   60|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   61|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   62|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   63|    193|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|    193|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 193, False: 3.58k]
  |  |  |  |  ------------------
  |  |  |  |  138|    193|        return #name;
  |  |  ------------------
  |  |   64|    193|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|     87|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 87, False: 3.69k]
  |  |  |  |  ------------------
  |  |  |  |  138|     87|        return #name;
  |  |  ------------------
  |  |   65|    101|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|    101|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 101, False: 3.67k]
  |  |  |  |  ------------------
  |  |  |  |  138|    101|        return #name;
  |  |  ------------------
  |  |   66|    101|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   67|  1.89k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.89k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.89k, False: 1.88k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.89k|        return #name;
  |  |  ------------------
  |  |   68|  1.89k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 23, False: 3.75k]
  |  |  |  |  ------------------
  |  |  |  |  138|     23|        return #name;
  |  |  ------------------
  |  |   69|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   70|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   71|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 23, False: 3.75k]
  |  |  |  |  ------------------
  |  |  |  |  138|     23|        return #name;
  |  |  ------------------
  |  |   72|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|    648|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|    648|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 648, False: 3.13k]
  |  |  |  |  ------------------
  |  |  |  |  138|    648|        return #name;
  |  |  ------------------
  |  |   74|    648|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   75|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   76|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 3.77k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   77|     89|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|     89|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 89, False: 3.68k]
  |  |  |  |  ------------------
  |  |  |  |  138|     89|        return #name;
  |  |  ------------------
  |  |   78|     89|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|     72|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 72, False: 3.70k]
  |  |  |  |  ------------------
  |  |  |  |  138|     72|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 3.77k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  3.77k|        }
  147|  3.77k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   479k|        {
   12|   479k|            m_Value = value;
   13|   479k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   673k|        {
   17|   673k|            return m_Value;
   18|   673k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|    974|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|    974|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 11.2k, False: 0]
  ------------------
   64|  11.2k|            {
   65|  11.2k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 974, False: 10.2k]
  ------------------
   66|    974|                {
   67|    974|                    return &token;
   68|    974|                }
   69|  11.2k|            }
   70|       |
   71|      0|            return nullptr;
   72|    974|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  65.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  65.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  65.5k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   103k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   103k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   103k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  11.0k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  11.0k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  11.0k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
    8|   476k|    {
    9|   476k|        m_Value = val;
   10|   476k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   13|  2.02M|    {
   14|  2.02M|        return m_Value;
   15|  2.02M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  19.2k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  12.3k|    {
   22|  12.3k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  12.3k|        switch (argument_number.unsafe())
   25|  12.3k|        {
   26|  5.31k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 5.31k, False: 7.05k]
  ------------------
   27|  5.31k|                m_Arg1 = argument;
   28|  5.31k|                break;
   29|  4.18k|            case 1u:
  ------------------
  |  Branch (29:13): [True: 4.18k, False: 8.18k]
  ------------------
   30|  4.18k|                m_Arg2 = argument;
   31|  4.18k|                break;
   32|  2.87k|            case 2u:
  ------------------
  |  Branch (32:13): [True: 2.87k, False: 9.49k]
  ------------------
   33|  2.87k|                m_Arg3 = argument;
   34|  2.87k|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 12.3k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  12.3k|#endif
   39|  12.3k|        }
   40|  12.3k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   79|  4.74M|    {
   80|  4.74M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   81|  4.74M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   84|  4.74M|    {
   85|  4.74M|        return m_Info;
   86|  4.74M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  70.0k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   24|  28.4M|    {
   25|  28.4M|        return m_Type;
   26|  28.4M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   73|  6.07M|    {
   74|  6.07M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   75|       |
   76|  6.07M|        return register_int;
   77|  6.07M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   80|  1.57M|    {
   81|  1.57M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   82|       |
   83|  1.57M|        return register_float;
   84|  1.57M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   88|  1.03M|    {
   89|  1.03M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   90|       |
   91|  1.03M|        return immediate_value;
   92|  1.03M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  103|   867k|    {
  104|   867k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  105|       |
  106|   867k|        return label;
  107|   867k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  7.55k|    {
  167|  7.55k|        InstructionArgument arg;
  168|  7.55k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  7.55k|        arg.register_int.register_id = id;
  170|  7.55k|        return arg;
  171|  7.55k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|  2.29k|    {
  175|  2.29k|        InstructionArgument arg;
  176|  2.29k|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|  2.29k|        arg.register_float.register_id = id;
  178|  2.29k|        return arg;
  179|  2.29k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|  1.62k|    {
  183|  1.62k|        InstructionArgument arg;
  184|  1.62k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|  1.62k|        arg.immediate_value.signed_value = value;
  186|  1.62k|        return arg;
  187|  1.62k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|    899|    {
  201|    899|        InstructionArgument arg;
  202|    899|        arg.m_Type           = ArgumentType::Label;
  203|    899|        arg.label.label_name = label_name;
  204|    899|        return arg;
  205|    899|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|   240k|        {
  351|   240k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|   240k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|   240k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|   240k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|   240k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|   240k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|   240k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  28.5k|        {
  364|  28.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  28.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  28.5k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  28.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  28.5k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  28.5k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  47.3k|        {
  376|  47.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  47.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  47.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  47.3k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  47.3k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  47.3k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  47.3k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  18.7k|        {
  389|  18.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  18.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  18.7k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  18.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  18.7k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  18.7k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  16.9k|        {
  401|  16.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  16.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  16.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  16.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  16.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  16.9k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  16.9k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  16.9k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  9.37k|        {
  416|  9.37k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  9.37k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  9.37k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  9.37k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  9.37k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  9.37k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  9.37k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  9.37k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|  45.9k|        {
  431|  45.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|  45.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|  45.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|  45.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|  45.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|  45.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|  45.9k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|  15.7k|        {
  444|  15.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|  15.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|  15.7k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|  15.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|  15.7k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|  15.7k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|   114k|        {
  456|   114k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|   114k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|   114k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|   114k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|   114k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|   114k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|   114k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  19.0k|        {
  469|  19.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  19.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  19.0k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  19.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  19.0k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  19.0k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  22.7k|        {
  481|  22.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  22.7k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  22.7k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  22.7k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  15.6k|        {
  496|  15.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  15.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  15.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  15.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  15.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  15.6k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  15.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  15.6k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  48.7k|        {
  511|  48.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  48.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  48.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  48.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  48.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  48.7k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  48.7k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|  25.2k|        {
  524|  25.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|  25.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|  25.2k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|  25.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|  25.2k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|  25.2k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  24.6k|        {
  536|  24.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  24.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  24.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  24.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  24.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  24.6k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  24.6k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  31.6k|        {
  549|  31.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  31.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  31.6k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  31.6k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  31.6k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  31.6k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  19.0k|        {
  561|  19.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  19.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  19.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  19.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  19.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  19.0k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  19.0k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  19.0k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  21.1k|        {
  576|  21.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  21.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  21.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  21.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  21.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  21.1k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  21.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  21.1k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  6.17k|        {
  591|  6.17k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  6.17k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  6.17k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  6.17k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  6.17k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  6.17k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  6.17k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|      1|        {
  604|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  606|      1|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  9.50k|        {
  616|  9.50k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  9.50k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  9.50k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  9.50k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  9.50k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  9.50k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  9.50k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|      1|        {
  629|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  631|      1|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  55.0k|        {
  683|  55.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  55.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  55.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  55.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  55.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  55.0k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  55.0k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  22.7k|        {
  696|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  22.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  22.7k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  22.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  22.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  59.2k|        {
  709|  59.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  59.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  59.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  59.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  59.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  59.2k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  59.2k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  28.1k|        {
  722|  28.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  28.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  28.1k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  28.1k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  28.1k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  28.1k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  28.1k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|  71.5k|        {
  735|  71.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|  71.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|  71.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|  71.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|  71.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|  71.5k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|  71.5k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  27.9k|        {
  748|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  58.9k|        {
  761|  58.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  58.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  58.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  58.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  58.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  58.9k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  58.9k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  25.0k|        {
  774|  25.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  25.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  25.0k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  25.0k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  25.0k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  25.0k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  25.0k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  22.7k|        {
  787|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  22.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  22.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  22.7k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  22.7k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|  60.0k|        {
  801|  60.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|  60.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|  60.0k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|  60.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|  60.0k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|  60.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|  60.0k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  13.5k|        {
  814|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  19.1k|        {
  828|  19.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  19.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  19.1k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  19.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  19.1k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  19.1k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  20.8k|        {
  841|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|   188k|        {
  855|   188k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|   188k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|   188k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|   188k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|   188k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|   188k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|   188k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  11.7k|        {
  868|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  11.7k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 1, False: 11.7k]
  ------------------
  876|       |
  877|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  11.7k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  24.9k|        {
  883|  24.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  24.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  24.9k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  24.9k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  24.9k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 0, False: 24.9k]
  ------------------
  890|       |
  891|  24.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  24.9k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  11.7k|        {
  897|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  11.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  11.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  11.7k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 1, False: 11.7k]
  ------------------
  905|       |
  906|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  11.7k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|  41.4k|        {
  912|  41.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|  41.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|  41.4k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|  41.4k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|  41.4k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 0, False: 41.4k]
  ------------------
  919|       |
  920|  41.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|  41.4k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  14.0k|        {
  926|  14.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  14.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  14.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  14.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  14.0k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  14.0k|            processor.SetFPSRValue(new_value);
  935|  14.0k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  22.7k|        {
  940|  22.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  22.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  22.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  22.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  22.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  22.7k|            processor.SetFPSRValue(new_value);
  949|  22.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  11.7k|        {
  954|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 0, False: 11.7k]
  ------------------
  962|       |
  963|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  29.4k|        {
  969|  29.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  29.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  29.4k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  29.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  29.4k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 1.00k, False: 28.4k]
  ------------------
  976|       |
  977|  29.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  29.4k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  10.2k|        {
  983|  10.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  10.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  10.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  10.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  10.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  10.2k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 0, False: 10.2k]
  ------------------
  991|       |
  992|  10.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  10.2k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  21.5k|        {
  998|  21.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  21.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  21.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  21.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  21.5k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 21.5k]
  ------------------
 1005|       |
 1006|  21.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  21.5k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|  90.0k|        {
 1012|  90.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|  90.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|  90.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|  90.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|  90.0k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|  90.0k|            processor.SetFPSRValue(new_value);
 1021|  90.0k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|   191k|        {
 1026|   191k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|   191k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|   191k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|   191k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|   191k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|   191k|            processor.SetFPSRValue(new_value);
 1035|   191k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|  11.7k|        {
 1040|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 11.7k, False: 1]
  ------------------
 1048|       |
 1049|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  22.7k|        {
 1055|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  22.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  22.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 22.7k, False: 0]
  ------------------
 1062|       |
 1063|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  22.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  16.4k|        {
 1069|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  16.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  16.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  16.4k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 16.4k, False: 0]
  ------------------
 1077|       |
 1078|  16.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  16.4k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|  81.1k|        {
 1084|  81.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|  81.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|  81.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|  81.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|  81.1k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 68.4k, False: 12.6k]
  ------------------
 1091|       |
 1092|  81.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|  81.1k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  18.8k|        {
 1098|  18.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  18.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  18.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  18.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  18.8k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  18.8k|            processor.SetFPSRValue(new_value);
 1107|  18.8k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  21.3k|        {
 1112|  21.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  21.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  21.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  21.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  21.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  21.3k|            processor.SetFPSRValue(new_value);
 1121|  21.3k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  14.4k|        {
 1126|  14.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  14.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  14.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  14.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  14.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  14.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 14.4k, False: 0]
  ------------------
 1134|       |
 1135|  14.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  14.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|   165k|        {
 1141|   165k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|   165k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|   165k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|   165k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|   165k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 162k, False: 2.08k]
  ------------------
 1148|       |
 1149|   165k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|   165k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  11.9k|        {
 1155|  11.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  11.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  11.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  11.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  11.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  11.9k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 11.9k, False: 0]
  ------------------
 1163|       |
 1164|  11.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  11.9k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  25.7k|        {
 1170|  25.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  25.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  25.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  25.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  25.7k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 25.7k, False: 0]
  ------------------
 1177|       |
 1178|  25.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  25.7k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  17.9k|        {
 1184|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  17.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  17.9k|            processor.SetFPSRValue(new_value);
 1193|  17.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  23.7k|        {
 1198|  23.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  23.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  23.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  23.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  23.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  23.7k|            processor.SetFPSRValue(new_value);
 1207|  23.7k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  16.4k|        {
 1212|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  16.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  16.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  16.4k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 14.9k, False: 1.42k]
  ------------------
 1220|       |
 1221|  16.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  16.4k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  19.5k|        {
 1227|  19.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  19.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  19.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  19.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  19.5k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 19.5k, False: 0]
  ------------------
 1234|       |
 1235|  19.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  19.5k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|  86.3k|        {
 1241|  86.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|  86.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|  86.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|  86.3k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|  86.3k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|  86.3k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 79.7k, False: 6.56k]
  ------------------
 1249|       |
 1250|  86.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|  86.3k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  28.1k|        {
 1256|  28.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  28.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  28.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  28.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  28.1k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 28.1k, False: 0]
  ------------------
 1263|       |
 1264|  28.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  28.1k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  26.9k|        {
 1270|  26.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  26.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  26.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  26.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  26.9k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  26.9k|            processor.SetFPSRValue(new_value);
 1279|  26.9k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  14.1k|        {
 1284|  14.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  14.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  14.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  14.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  14.1k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  14.1k|            processor.SetFPSRValue(new_value);
 1293|  14.1k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  18.6k|        {
 1298|  18.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  18.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  18.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  18.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  18.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  18.6k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 5.00k, False: 13.6k]
  ------------------
 1306|       |
 1307|  18.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  18.6k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  26.3k|        {
 1313|  26.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  26.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  26.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  26.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  26.3k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 0, False: 26.3k]
  ------------------
 1320|       |
 1321|  26.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  26.3k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  22.7k|        {
 1327|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  22.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  22.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  22.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 1, False: 22.7k]
  ------------------
 1335|       |
 1336|  22.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  22.7k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  25.4k|        {
 1342|  25.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  25.4k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  25.4k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  25.4k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  25.4k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 3.56k, False: 21.8k]
  ------------------
 1349|       |
 1350|  25.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  25.4k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  18.1k|        {
 1356|  18.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  18.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  18.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  18.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  18.1k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  18.1k|            processor.SetFPSRValue(new_value);
 1365|  18.1k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  17.0k|        {
 1370|  17.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  17.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  17.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  17.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  17.0k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  17.0k|            processor.SetFPSRValue(new_value);
 1379|  17.0k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  56.4k|        {
 1384|  56.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  56.4k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  56.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  56.4k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 36.1k, False: 20.3k]
  ------------------
 1390|  36.1k|            {
 1391|  36.1k|                JumpToLabel(processor, jump_label.label_name);
 1392|  36.1k|            }
 1393|  56.4k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  50.4k|        {
 1398|  50.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  50.4k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  50.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  50.4k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 26.1k, False: 24.3k]
  ------------------
 1404|  26.1k|            {
 1405|  26.1k|                JumpToLabel(processor, jump_label.label_name);
 1406|  26.1k|            }
 1407|  50.4k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  36.1k|        {
 1412|  36.1k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  36.1k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  36.1k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 23.0k, False: 13.0k]
  ------------------
 1417|  23.0k|            {
 1418|  23.0k|                JumpToLabel(processor, jump_label.label_name);
 1419|  23.0k|            }
 1420|  36.1k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   637k|        {
 1425|   637k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   637k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   637k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 620k, False: 16.9k]
  ------------------
 1430|   620k|            {
 1431|   620k|                JumpToLabel(processor, jump_label.label_name);
 1432|   620k|            }
 1433|   637k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|  52.5k|        {
 1438|  52.5k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|  52.5k|            JumpToLabel(processor, jump_label.label_name);
 1441|  52.5k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  70.6k|        {
 1446|  70.6k|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  70.6k|            JumpToRegister(processor, jump_register.register_id);
 1449|  70.6k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  34.4k|        {
 1454|  34.4k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  34.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  34.4k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  34.4k|            JumpToLabel(processor, jump_label.label_name);
 1460|  34.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|   561k|        {
 1465|   561k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|   561k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|   561k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|   561k|            JumpToRegister(processor, jump_register.register_id);
 1471|   561k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  13.2k|        {
 1476|  13.2k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  13.2k|            phi::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  13.2k|            imm_value = static_cast<phi::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  13.2k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  13.2k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|      1|        {
 1487|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 0, False: 1]
  ------------------
 1492|      0|            {
 1493|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      0|                return;
 1495|      0|            }
 1496|       |
 1497|      1|            phi::i32 address = optional_address.value();
 1498|       |
 1499|      1|            auto optional_value =
 1500|      1|                    processor.GetMemory().LoadByte(static_cast<phi::size_t>(address.unsafe()));
 1501|       |
 1502|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 1, False: 0]
  ------------------
 1503|      1|            {
 1504|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      1|                return;
 1507|      1|            }
 1508|       |
 1509|      0|            phi::i32 value = optional_value.value();
 1510|       |
 1511|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|      1|        {
 1517|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 0, False: 1]
  ------------------
 1522|      0|            {
 1523|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      0|                return;
 1525|      0|            }
 1526|       |
 1527|      1|            phi::i32 address = optional_address.value();
 1528|       |
 1529|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|      1|                    static_cast<phi::size_t>(address.unsafe()));
 1531|       |
 1532|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 1, False: 0]
  ------------------
 1533|      1|            {
 1534|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      1|                return;
 1537|      1|            }
 1538|       |
 1539|      0|            phi::u32 value = optional_value.value();
 1540|       |
 1541|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|      1|        {
 1547|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 0, False: 1]
  ------------------
 1552|      0|            {
 1553|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      0|                return;
 1555|      0|            }
 1556|       |
 1557|      1|            phi::i32 address = optional_address.value();
 1558|       |
 1559|      1|            auto optional_value =
 1560|      1|                    processor.GetMemory().LoadHalfWord(static_cast<phi::size_t>(address.unsafe()));
 1561|       |
 1562|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 1, False: 0]
  ------------------
 1563|      1|            {
 1564|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      1|                return;
 1567|      1|            }
 1568|       |
 1569|      0|            phi::i32 value = optional_value.value();
 1570|       |
 1571|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|      3|        {
 1577|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 0, False: 3]
  ------------------
 1582|      0|            {
 1583|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      0|                return;
 1585|      0|            }
 1586|       |
 1587|      3|            phi::i32 address = optional_address.value();
 1588|       |
 1589|      3|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|      3|                    static_cast<phi::size_t>(address.unsafe()));
 1591|       |
 1592|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 3, False: 0]
  ------------------
 1593|      3|            {
 1594|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      3|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      3|                return;
 1597|      3|            }
 1598|       |
 1599|      0|            phi::u32 value = optional_value.value();
 1600|       |
 1601|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|      1|        {
 1607|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 0, False: 1]
  ------------------
 1612|      0|            {
 1613|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      0|                return;
 1615|      0|            }
 1616|       |
 1617|      1|            phi::i32 address = optional_address.value();
 1618|       |
 1619|      1|            auto optional_value =
 1620|      1|                    processor.GetMemory().LoadWord(static_cast<phi::size_t>(address.unsafe()));
 1621|       |
 1622|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 1, False: 0]
  ------------------
 1623|      1|            {
 1624|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      1|                return;
 1627|      1|            }
 1628|       |
 1629|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|      1|        {
 1635|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 0, False: 1]
  ------------------
 1640|      0|            {
 1641|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      0|                return;
 1643|      0|            }
 1644|       |
 1645|      1|            phi::i32 address = optional_address.value();
 1646|       |
 1647|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|      1|                    static_cast<phi::size_t>(address.unsafe()));
 1649|       |
 1650|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 1, False: 0]
  ------------------
 1651|      1|            {
 1652|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      1|                return;
 1655|      1|            }
 1656|       |
 1657|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|      1|        {
 1663|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 0, False: 1]
  ------------------
 1668|      0|            {
 1669|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      0|                return;
 1671|      0|            }
 1672|       |
 1673|      1|            phi::i32 address = optional_address.value();
 1674|       |
 1675|      1|            auto optional_value =
 1676|      1|                    processor.GetMemory().LoadFloat(static_cast<phi::size_t>(address.unsafe()));
 1677|       |
 1678|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 1, False: 0]
  ------------------
 1679|      1|            {
 1680|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      1|                return;
 1683|      1|            }
 1684|       |
 1685|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|      1|        {
 1691|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 0, False: 1]
  ------------------
 1696|      0|            {
 1697|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      0|                return;
 1699|      0|            }
 1700|       |
 1701|      1|            phi::i32 address = optional_address.value();
 1702|       |
 1703|      1|            auto optional_value =
 1704|      1|                    processor.GetMemory().LoadDouble(static_cast<phi::size_t>(address.unsafe()));
 1705|       |
 1706|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 1, False: 0]
  ------------------
 1707|      1|            {
 1708|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      1|                return;
 1711|      1|            }
 1712|       |
 1713|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  26.6k|        {
 1939|  26.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  26.6k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  26.6k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  26.6k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  26.6k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  12.1k|        {
 1950|  12.1k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  12.1k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  12.1k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  12.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  12.1k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1960|  10.2k|        {
 1961|  10.2k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1962|  10.2k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1963|       |
 1964|  10.2k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1965|       |
 1966|  10.2k|            const phi::int32_t moved_value = *reinterpret_cast<const phi::int32_t*>(&source_value);
 1967|       |
 1968|  10.2k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1969|  10.2k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1973|  19.6k|        {
 1974|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1975|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1976|       |
 1977|  19.6k|            const phi::int32_t source_value =
 1978|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1979|       |
 1980|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1981|       |
 1982|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1983|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  14.2k|        {
 1988|  14.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  14.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  14.2k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  14.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  14.2k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  27.5k|        {
 1999|  27.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  27.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  27.5k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  27.5k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2004|  27.5k|            const float        converted_value_float =
 2005|  27.5k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  27.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  27.5k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  10.2k|        {
 2013|  10.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  10.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  10.2k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  10.2k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  10.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  10.2k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  15.3k|        {
 2025|  15.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  15.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  15.3k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  15.3k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2030|  15.3k|            const float        converted_value_float =
 2031|  15.3k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  15.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  15.3k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  20.2k|        {
 2039|  20.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  20.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  20.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  20.2k|            const phi::int32_t converted_value_int =
 2044|  20.2k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2045|  20.2k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  20.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  20.2k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  11.7k|        {
 2053|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  11.7k|            const phi::int32_t converted_value_int =
 2058|  11.7k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2059|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      8|        {
 2073|      8|            processor.Raise(Exception::Halt);
 2074|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|   374k|        {
 2079|       |            /* Do nothing */
 2080|   374k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   268k|    {
  169|   268k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   268k|        SafeWriteInteger(processor, dest_reg, res);
  172|   268k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|   410k|    {
  124|   410k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|   410k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|   410k|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 24.6k, False: 386k]
  ------------------
  129|  24.6k|        {
  130|  24.6k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  24.6k|            value = max + (value % (min - 1));
  133|  24.6k|        }
  134|       |        // Check for overflow
  135|   386k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 21.0k, False: 365k]
  ------------------
  136|  21.0k|        {
  137|  21.0k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  21.0k|            value = min + (value % (max + 1));
  140|  21.0k|        }
  141|       |
  142|   410k|        PHI_ASSERT(value >= min);
  143|   410k|        PHI_ASSERT(value <= max);
  144|       |
  145|   410k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<phi::int32_t>(value.unsafe()));
  146|   410k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  66.1k|    {
  177|  66.1k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  66.1k|        SafeWriteInteger(processor, dest_reg, res);
  180|  66.1k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   265k|    {
  151|   265k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   265k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 26.6k, False: 238k]
  ------------------
  155|  26.6k|        {
  156|  26.6k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  26.6k|            value %= max + 1u;
  159|  26.6k|        }
  160|       |
  161|   265k|        PHI_ASSERT(value <= max);
  162|       |
  163|   265k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<phi::uint32_t>(value.unsafe()));
  164|   265k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|  61.7k|    {
  185|  61.7k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|  61.7k|        SafeWriteInteger(processor, dest_reg, res);
  188|  61.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|   133k|    {
  193|   133k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|   133k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 38.4k, False: 95.0k]
  ------------------
  196|  38.4k|        {
  197|  38.4k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  38.4k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  38.4k|            SafeWriteInteger(processor, dest_reg, res);
  201|  38.4k|            return;
  202|  38.4k|        }
  203|       |
  204|  95.0k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|  95.0k|        SafeWriteInteger(processor, dest_reg, res);
  207|  95.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|  74.0k|    {
  212|  74.0k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|  74.0k|        SafeWriteInteger(processor, dest_reg, res);
  215|  74.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  56.3k|    {
  220|  56.3k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  56.3k|        SafeWriteInteger(processor, dest_reg, res);
  223|  56.3k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  6.18k|    {
  228|  6.18k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 6.17k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  6.17k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  6.17k|        SafeWriteInteger(processor, dest_reg, res);
  237|  6.17k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  9.50k|    {
  242|  9.50k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 2, False: 9.50k]
  ------------------
  243|      2|        {
  244|      2|            processor.Raise(Exception::DivideByZero);
  245|      2|            return;
  246|      2|        }
  247|       |
  248|  9.50k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  9.50k|        SafeWriteInteger(processor, dest_reg, res);
  251|  9.50k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   177k|    {
  325|   177k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 9.49k, False: 167k]
  ------------------
  326|  9.49k|        {
  327|  9.49k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  9.49k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  9.49k|            return;
  332|  9.49k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   167k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 18.4k, False: 149k]
  ------------------
  336|  18.4k|        {
  337|  18.4k|            processor.Raise(Exception::BadShift);
  338|  18.4k|            return;
  339|  18.4k|        }
  340|       |
  341|   149k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   149k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   149k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|  87.4k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|  87.4k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 6.76k, False: 80.6k]
  ------------------
  258|  6.76k|        {
  259|  6.76k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  6.76k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  6.76k|            return;
  264|  6.76k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|  80.6k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 48.4k, False: 32.2k]
  ------------------
  268|  48.4k|        {
  269|  48.4k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  48.4k|            return;
  271|  48.4k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  32.2k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 5.95k, False: 26.2k]
  ------------------
  275|  5.95k|        {
  276|  5.95k|            processor.Raise(Exception::BadShift);
  277|  5.95k|            return;
  278|  5.95k|        }
  279|       |
  280|  26.2k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  26.2k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  26.2k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  26.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  26.2k|    {
   29|  26.2k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  26.2k|        return value & ~(-1 << (32 - n));
   32|  26.2k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|  83.9k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|  83.9k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 8.08k, False: 75.9k]
  ------------------
  292|  8.08k|        {
  293|  8.08k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  8.08k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 3.18k, False: 4.89k]
  ------------------
  297|  3.18k|            {
  298|       |                // Set every byte to 1
  299|  3.18k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  3.18k|            }
  301|  4.89k|            else
  302|  4.89k|            {
  303|       |                // Set every byte to 0
  304|  4.89k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  4.89k|            }
  306|  8.08k|            return;
  307|  8.08k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|  75.9k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 20.6k, False: 55.2k]
  ------------------
  311|  20.6k|        {
  312|  20.6k|            processor.Raise(Exception::BadShift);
  313|  20.6k|            return;
  314|  20.6k|        }
  315|       |
  316|  55.2k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  55.2k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  55.2k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|   792k|    {
   38|       |        // Lookup the label
   39|   792k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgram();
   40|   792k|        PHI_ASSERT(program != nullptr);
   41|   792k|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|   792k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 48, False: 792k]
  ------------------
   44|     48|        {
   45|     48|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     48|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|     48|            processor.Raise(Exception::UnknownLabel);
   47|     48|            return;
   48|     48|        }
   49|       |
   50|   792k|        const phi::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|   792k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|   792k|        processor.SetNextProgramCounter(jump_point);
   55|   792k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|   632k|    {
   59|   632k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|   632k|        phi::u32 max_address =
   62|   632k|                static_cast<phi::uint32_t>(processor.GetCurrentProgram()->m_Instructions.size());
   63|   632k|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 10, False: 632k]
  ------------------
   64|     10|        {
   65|     10|            processor.Raise(Exception::AddressOutOfBounds);
   66|     10|            return;
   67|     10|        }
   68|       |
   69|   632k|        processor.SetNextProgramCounter(address.unsafe());
   70|   632k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|     10|    {
  100|     10|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 10, False: 0]
  ------------------
  101|     10|        {
  102|     10|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|     10|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 0, False: 10]
  ------------------
  105|      0|            {
  106|      0|                return {};
  107|      0|            }
  108|       |
  109|     10|            return imm_value.signed_value;
  110|     10|        }
  111|       |
  112|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|     10|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  4.74M|    {
   12|  4.74M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  4.74M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  4.74M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  4.74M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  4.74M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  4.74M|                   "Unexpected argument type for arg1");
   22|  4.74M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  4.74M|                   "Unexpected argument type for arg2");
   24|  4.74M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  4.74M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  4.74M|        m_Executor(processor, arg1, arg2, arg3);
   29|  4.74M|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  19.2k|    {
  450|  19.2k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  19.2k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   15|  1.21M|    {
   16|  1.21M|        m_ValueSigned = val;
   17|  1.21M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   20|  1.08M|    {
   21|  1.08M|        m_ValueUnsigned = val;
   22|  1.08M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   25|  2.31M|    {
   26|  2.31M|        return m_ValueSigned;
   27|  2.31M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   30|  1.63M|    {
   31|  1.63M|        return m_ValueUnsigned;
   32|  1.63M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   35|  2.68M|    {
   36|  2.68M|        return m_IsReadOnly;
   37|  2.68M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|      1|    {
   18|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 1, False: 0]
  ------------------
   19|      1|        {
   20|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|      1|            return {};
   22|      1|        }
   23|       |
   24|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|      0|        return m_Values[raw_address].signed_value;
   27|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|      1|    {
   31|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 1, False: 0]
  ------------------
   32|      1|        {
   33|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|      1|            return {};
   35|      1|        }
   36|       |
   37|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|      0|        return m_Values[raw_address].unsigned_value;
   39|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|      1|    {
   43|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 1, False: 0]
  ------------------
   44|      1|        {
   45|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|      1|            return {};
   47|      1|        }
   48|       |
   49|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|        {
   53|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|      0|            return {};
   55|      0|        }
   56|       |
   57|      0|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|      3|    {
   62|      3|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 3, False: 0]
  ------------------
   63|      3|        {
   64|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|      3|            return {};
   66|      3|        }
   67|       |
   68|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 0, False: 0]
  ------------------
   71|      0|        {
   72|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|      0|            return {};
   74|      0|        }
   75|       |
   76|      0|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|      1|    {
   81|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 1, False: 0]
  ------------------
   82|      1|        {
   83|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|      1|            return {};
   85|      1|        }
   86|       |
   87|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 0, False: 0]
  ------------------
   90|      0|        {
   91|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|      0|            return {};
   93|      0|        }
   94|       |
   95|      0|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|      1|    {
  100|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 1, False: 0]
  ------------------
  101|      1|        {
  102|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      1|            return {};
  104|      1|        }
  105|       |
  106|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 0, False: 0]
  ------------------
  109|      0|        {
  110|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|      0|            return {};
  112|      0|        }
  113|       |
  114|      0|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|      1|    {
  119|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 1, False: 0]
  ------------------
  120|      1|        {
  121|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|      1|            return {};
  123|      1|        }
  124|       |
  125|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 0, False: 0]
  ------------------
  128|      0|        {
  129|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|      0|            return {};
  131|      0|        }
  132|       |
  133|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|      1|    {
  138|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 1, False: 0]
  ------------------
  139|      1|        {
  140|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|      1|            return {};
  142|      1|        }
  143|       |
  144|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 0, False: 0]
  ------------------
  147|      0|        {
  148|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|      0|            return {};
  150|      0|        }
  151|       |
  152|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|     10|    {
  265|       |        // Cannot access anything before the starting address
  266|     10|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 10, False: 0]
  ------------------
  267|     10|        {
  268|     10|            return false;
  269|     10|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 0, False: 0]
  ------------------
  273|      0|                                             address.unsafe(), size.unsafe()))
  274|      0|        {
  275|      0|            return false;
  276|      0|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 0, False: 0]
  ------------------
  280|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|      0|        {
  282|      0|            return false;
  283|      0|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 0, False: 0]
  ------------------
  287|      0|        {
  288|      0|            return false;
  289|      0|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|      0|        return true;
  293|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  4.04k|    {
  303|  4.04k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 4.04M, False: 4.04k]
  ------------------
  304|  4.04M|        {
  305|  4.04M|            val.signed_value = 0;
  306|  4.04M|        }
  307|  4.04k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|  62.3k|    {
   22|  62.3k|        switch (token.length().unsafe())
   23|  62.3k|        {
   24|       |            // 1 character OpCodes
   25|  6.77k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 6.77k, False: 55.5k]
  ------------------
   26|  6.77k|                const char c1 = token[0u];
   27|       |
   28|  6.77k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 2.92k, False: 3.85k]
  ------------------
   29|  2.92k|                {
   30|  2.92k|                    return OpCode::J;
   31|  2.92k|                }
   32|  3.85k|                break;
   33|  6.77k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  7.45k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 7.45k, False: 54.9k]
  ------------------
   37|  7.45k|                const char c1 = token[0u];
   38|  7.45k|                const char c2 = token[1u];
   39|       |
   40|  7.45k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 3.26k, False: 4.18k]
  ------------------
   41|  7.45k|                {
   42|    171|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 171, False: 7.28k]
  ------------------
   43|    345|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 174, False: 7.27k]
  ------------------
   44|    345|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 157, False: 188]
  ------------------
   45|    157|                        {
   46|    157|                            return OpCode::JR;
   47|    157|                        }
   48|    188|                        break;
   49|       |
   50|    852|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 852, False: 6.59k]
  ------------------
   51|  1.24k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 388, False: 7.06k]
  ------------------
   52|  1.24k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 71, False: 1.16k]
  ------------------
   53|  1.24k|                        {
   54|     67|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 67, False: 1.17k]
  ------------------
   55|    144|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 77, False: 1.16k]
  ------------------
   56|    144|                                return OpCode::LB;
   57|     67|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 67, False: 1.17k]
  ------------------
   58|    133|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 66, False: 1.17k]
  ------------------
   59|    133|                                return OpCode::LD;
   60|     67|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 67, False: 1.17k]
  ------------------
   61|    306|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 239, False: 1.00k]
  ------------------
   62|    306|                                return OpCode::LF;
   63|     81|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 81, False: 1.15k]
  ------------------
   64|    172|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 91, False: 1.14k]
  ------------------
   65|    172|                                return OpCode::LH;
   66|    348|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 348, False: 892]
  ------------------
   67|    414|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 66, False: 1.17k]
  ------------------
   68|    414|                                return OpCode::LW;
   69|  1.24k|                        }
   70|     71|                        break;
   71|    206|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 206, False: 7.24k]
  ------------------
   72|  1.08k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 877, False: 6.57k]
  ------------------
   73|  1.08k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 280, False: 803]
  ------------------
   74|    280|                        {
   75|    280|                            return OpCode::OR;
   76|    280|                        }
   77|    803|                        break;
   78|    955|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 955, False: 6.49k]
  ------------------
   79|  1.52k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 565, False: 6.88k]
  ------------------
   80|  1.52k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 72, False: 1.44k]
  ------------------
   81|  1.52k|                        {
   82|    205|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 205, False: 1.31k]
  ------------------
   83|    272|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 67, False: 1.45k]
  ------------------
   84|    272|                                return OpCode::SB;
   85|     69|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 69, False: 1.45k]
  ------------------
   86|    390|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 321, False: 1.19k]
  ------------------
   87|    390|                                return OpCode::SD;
   88|    407|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 407, False: 1.11k]
  ------------------
   89|    473|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 66, False: 1.45k]
  ------------------
   90|    473|                                return OpCode::SF;
   91|     66|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 66, False: 1.45k]
  ------------------
   92|    178|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 112, False: 1.40k]
  ------------------
   93|    178|                                return OpCode::SH;
   94|     68|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 68, False: 1.45k]
  ------------------
   95|    135|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 67, False: 1.45k]
  ------------------
   96|    135|                                return OpCode::SW;
   97|  1.52k|                        }
   98|     72|                        break;
   99|  7.45k|                }
  100|  4.39k|                break;
  101|  7.45k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  17.2k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 17.2k, False: 45.1k]
  ------------------
  105|  17.2k|                const char c1 = token[0u];
  106|  17.2k|                const char c2 = token[1u];
  107|  17.2k|                const char c3 = token[2u];
  108|       |
  109|  17.2k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 2.44k, False: 14.7k]
  ------------------
  110|  17.2k|                {
  111|  1.13k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 1.13k, False: 16.0k]
  ------------------
  112|  1.23k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 101, False: 17.1k]
  ------------------
  113|  1.23k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 1.00k, False: 231]
  |  Branch (113:29): [True: 896, False: 338]
  |  Branch (113:45): [True: 896, False: 107]
  ------------------
  114|    896|                        {
  115|    896|                            return OpCode::ADD;
  116|    896|                        }
  117|    338|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 216, False: 122]
  |  Branch (117:34): [True: 150, False: 188]
  |  Branch (117:50): [True: 150, False: 66]
  ------------------
  118|    150|                        {
  119|    150|                            return OpCode::AND;
  120|    150|                        }
  121|    188|                        break;
  122|       |
  123|    188|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 142, False: 17.0k]
  ------------------
  124|    280|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 138, False: 17.0k]
  ------------------
  125|    280|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 214, False: 66]
  |  Branch (125:29): [True: 148, False: 132]
  |  Branch (125:45): [True: 148, False: 66]
  ------------------
  126|    148|                        {
  127|    148|                            return OpCode::DIV;
  128|    148|                        }
  129|    132|                        break;
  130|       |
  131|    489|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 489, False: 16.7k]
  ------------------
  132|    566|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 77, False: 17.1k]
  ------------------
  133|    566|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 500, False: 66]
  ------------------
  134|    500|                        {
  135|    500|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 147, False: 353]
  ------------------
  136|    147|                            {
  137|    147|                                return OpCode::EQD;
  138|    147|                            }
  139|    353|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 287, False: 66]
  ------------------
  140|    287|                            {
  141|    287|                                return OpCode::EQF;
  142|    287|                            }
  143|    500|                        }
  144|    132|                        break;
  145|       |
  146|  1.14k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.14k, False: 16.0k]
  ------------------
  147|  1.60k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 454, False: 16.7k]
  ------------------
  148|  1.60k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 378, False: 1.22k]
  ------------------
  149|    378|                        {
  150|    378|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 167, False: 211]
  ------------------
  151|    167|                            {
  152|    167|                                return OpCode::GED;
  153|    167|                            }
  154|    211|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 145, False: 66]
  ------------------
  155|    145|                            {
  156|    145|                                return OpCode::GEF;
  157|    145|                            }
  158|    378|                        }
  159|  1.22k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 1.15k, False: 66]
  ------------------
  160|  1.15k|                        {
  161|  1.15k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 606, False: 550]
  ------------------
  162|    606|                            {
  163|    606|                                return OpCode::GTD;
  164|    606|                            }
  165|    550|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 484, False: 66]
  ------------------
  166|    484|                            {
  167|    484|                                return OpCode::GTF;
  168|    484|                            }
  169|    550|                        }
  170|    198|                        break;
  171|       |
  172|    266|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 266, False: 16.9k]
  ------------------
  173|    572|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 306, False: 16.9k]
  ------------------
  174|    572|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 505, False: 67]
  |  Branch (174:29): [True: 309, False: 263]
  |  Branch (174:45): [True: 309, False: 196]
  ------------------
  175|    309|                        {
  176|    309|                            return OpCode::JAL;
  177|    309|                        }
  178|    263|                        break;
  179|       |
  180|  2.35k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 2.35k, False: 14.8k]
  ------------------
  181|  3.27k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 915, False: 16.3k]
  ------------------
  182|  3.27k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 203, False: 3.06k]
  ------------------
  183|  3.27k|                        {
  184|     67|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 67, False: 3.20k]
  ------------------
  185|    594|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 527, False: 2.74k]
  ------------------
  186|    594|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 389, False: 205]
  ------------------
  187|    389|                                {
  188|    389|                                    return OpCode::LBU;
  189|    389|                                }
  190|    205|                                break;
  191|       |
  192|    338|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 338, False: 2.93k]
  ------------------
  193|    693|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 355, False: 2.91k]
  ------------------
  194|    693|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 310, False: 383]
  ------------------
  195|    310|                                {
  196|    310|                                    return OpCode::LED;
  197|    310|                                }
  198|    383|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 188, False: 195]
  ------------------
  199|    188|                                {
  200|    188|                                    return OpCode::LEF;
  201|    188|                                }
  202|    195|                                break;
  203|       |
  204|    870|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 870, False: 2.40k]
  ------------------
  205|  1.19k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 327, False: 2.94k]
  ------------------
  206|  1.19k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 663, False: 534]
  ------------------
  207|    663|                                {
  208|    663|                                    return OpCode::LHI;
  209|    663|                                }
  210|    534|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 339, False: 195]
  ------------------
  211|    339|                                {
  212|    339|                                    return OpCode::LHU;
  213|    339|                                }
  214|    195|                                break;
  215|       |
  216|    317|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 317, False: 2.95k]
  ------------------
  217|    386|                            case 't':
  ------------------
  |  Branch (217:29): [True: 69, False: 3.20k]
  ------------------
  218|    386|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 170, False: 216]
  ------------------
  219|    170|                                {
  220|    170|                                    return OpCode::LTD;
  221|    170|                                }
  222|    216|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 150, False: 66]
  ------------------
  223|    150|                                {
  224|    150|                                    return OpCode::LTF;
  225|    150|                                }
  226|     66|                                break;
  227|       |
  228|     70|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 70, False: 3.20k]
  ------------------
  229|    199|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 129, False: 3.14k]
  ------------------
  230|    199|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 133, False: 66]
  ------------------
  231|    133|                                {
  232|    133|                                    return OpCode::LWU;
  233|    133|                                }
  234|     66|                                break;
  235|  3.27k|                        }
  236|    930|                        break;
  237|       |
  238|  1.47k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 1.47k, False: 15.7k]
  ------------------
  239|  1.68k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 208, False: 17.0k]
  ------------------
  240|  1.68k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 361, False: 1.32k]
  ------------------
  241|    361|                        {
  242|    361|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 148, False: 213]
  ------------------
  243|    148|                            {
  244|    148|                                return OpCode::NED;
  245|    148|                            }
  246|    213|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 147, False: 66]
  ------------------
  247|    147|                            {
  248|    147|                                return OpCode::NEF;
  249|    147|                            }
  250|    361|                        }
  251|  1.32k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 1.25k, False: 70]
  |  Branch (251:34): [True: 1.06k, False: 264]
  |  Branch (251:50): [True: 1.06k, False: 194]
  ------------------
  252|  1.06k|                        {
  253|  1.06k|                            return OpCode::NOP;
  254|  1.06k|                        }
  255|       |
  256|    330|                        break;
  257|       |
  258|    330|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 83, False: 17.1k]
  ------------------
  259|    808|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 725, False: 16.5k]
  ------------------
  260|    808|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 599, False: 209]
  |  Branch (260:29): [True: 405, False: 403]
  |  Branch (260:45): [True: 405, False: 194]
  ------------------
  261|    405|                        {
  262|    405|                            return OpCode::ORI;
  263|    405|                        }
  264|    403|                        break;
  265|       |
  266|  3.82k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 3.82k, False: 13.4k]
  ------------------
  267|  4.53k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 717, False: 16.5k]
  ------------------
  268|  4.53k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 67, False: 4.47k]
  ------------------
  269|  4.53k|                        {
  270|     71|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 71, False: 4.46k]
  ------------------
  271|    203|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 132, False: 4.40k]
  ------------------
  272|    203|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 137, False: 66]
  ------------------
  273|    137|                                {
  274|    137|                                    return OpCode::SBU;
  275|    137|                                }
  276|     66|                                break;
  277|       |
  278|     86|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 86, False: 4.45k]
  ------------------
  279|    218|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 132, False: 4.40k]
  ------------------
  280|    218|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 152, False: 66]
  ------------------
  281|    152|                                {
  282|    152|                                    return OpCode::SEQ;
  283|    152|                                }
  284|     66|                                break;
  285|       |
  286|    572|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 572, False: 3.96k]
  ------------------
  287|    834|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 262, False: 4.27k]
  ------------------
  288|    834|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 366, False: 468]
  ------------------
  289|    366|                                {
  290|    366|                                    return OpCode::SGE;
  291|    366|                                }
  292|    468|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 274, False: 194]
  ------------------
  293|    274|                                {
  294|    274|                                    return OpCode::SGT;
  295|    274|                                }
  296|    194|                                break;
  297|       |
  298|    195|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 195, False: 4.34k]
  ------------------
  299|    329|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 134, False: 4.40k]
  ------------------
  300|    329|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 260, False: 69]
  ------------------
  301|    260|                                {
  302|    260|                                    return OpCode::SHU;
  303|    260|                                }
  304|     69|                                break;
  305|       |
  306|    755|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 755, False: 3.78k]
  ------------------
  307|  1.07k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 318, False: 4.22k]
  ------------------
  308|  1.07k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 66, False: 1.00k]
  ------------------
  309|  1.07k|                                {
  310|    261|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 261, False: 812]
  ------------------
  311|    327|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 66, False: 1.00k]
  ------------------
  312|    327|                                        return OpCode::SLA;
  313|       |
  314|     85|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 85, False: 988]
  ------------------
  315|    151|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 66, False: 1.00k]
  ------------------
  316|    151|                                        return OpCode::SLE;
  317|       |
  318|    261|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 261, False: 812]
  ------------------
  319|    329|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 68, False: 1.00k]
  ------------------
  320|    329|                                        return OpCode::SLL;
  321|       |
  322|     81|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 81, False: 992]
  ------------------
  323|    200|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 119, False: 954]
  ------------------
  324|    200|                                        return OpCode::SLT;
  325|  1.07k|                                }
  326|     66|                                break;
  327|       |
  328|    208|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 208, False: 4.33k]
  ------------------
  329|    340|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 132, False: 4.40k]
  ------------------
  330|    340|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 274, False: 66]
  ------------------
  331|    274|                                {
  332|    274|                                    return OpCode::SNE;
  333|    274|                                }
  334|     66|                                break;
  335|       |
  336|    466|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 466, False: 4.07k]
  ------------------
  337|    595|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 129, False: 4.40k]
  ------------------
  338|    595|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 179, False: 416]
  ------------------
  339|    179|                                {
  340|    179|                                    return OpCode::SRA;
  341|    179|                                }
  342|    416|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 350, False: 66]
  ------------------
  343|    350|                                {
  344|    350|                                    return OpCode::SRL;
  345|    350|                                }
  346|     66|                                break;
  347|       |
  348|    318|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 318, False: 4.22k]
  ------------------
  349|    528|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 210, False: 4.32k]
  ------------------
  350|    528|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 334, False: 194]
  ------------------
  351|    334|                                {
  352|    334|                                    return OpCode::SUB;
  353|    334|                                }
  354|    194|                                break;
  355|       |
  356|    197|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 197, False: 4.34k]
  ------------------
  357|    351|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 154, False: 4.38k]
  ------------------
  358|    351|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 263, False: 88]
  ------------------
  359|    263|                                {
  360|    263|                                    return OpCode::SWU;
  361|    263|                                }
  362|     88|                                break;
  363|  4.53k|                        }
  364|       |
  365|  1.02k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 84, False: 17.1k]
  ------------------
  366|  1.17k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 146, False: 17.0k]
  ------------------
  367|  1.17k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 216, False: 956]
  |  Branch (367:29): [True: 150, False: 1.02k]
  |  Branch (367:45): [True: 150, False: 66]
  ------------------
  368|    150|                        {
  369|    150|                            return OpCode::XOR;
  370|    150|                        }
  371|  1.02k|                        break;
  372|  17.2k|                }
  373|  6.03k|                break;
  374|  17.2k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  21.5k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 21.5k, False: 40.7k]
  ------------------
  378|  21.5k|                const char c1 = token[0u];
  379|  21.5k|                const char c2 = token[1u];
  380|  21.5k|                const char c3 = token[2u];
  381|  21.5k|                const char c4 = token[3u];
  382|       |
  383|  21.5k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 1.58k, False: 19.9k]
  ------------------
  384|  21.5k|                {
  385|  2.37k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 2.37k, False: 19.2k]
  ------------------
  386|  3.05k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 674, False: 20.9k]
  ------------------
  387|  3.05k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 194, False: 2.85k]
  ------------------
  388|  3.05k|                        {
  389|  1.79k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.79k, False: 1.25k]
  ------------------
  390|  2.20k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 416, False: 2.63k]
  ------------------
  391|  2.20k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 2.14k, False: 66]
  ------------------
  392|  2.14k|                                {
  393|  2.14k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 194, False: 1.94k]
  ------------------
  394|  2.14k|                                    {
  395|    223|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 223, False: 1.91k]
  ------------------
  396|    289|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 66, False: 2.07k]
  ------------------
  397|    289|                                            return OpCode::ADDD;
  398|       |
  399|    218|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 218, False: 1.92k]
  ------------------
  400|    284|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 66, False: 2.07k]
  ------------------
  401|    284|                                            return OpCode::ADDF;
  402|       |
  403|    992|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 992, False: 1.15k]
  ------------------
  404|  1.05k|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 66, False: 2.07k]
  ------------------
  405|  1.05k|                                            return OpCode::ADDI;
  406|       |
  407|    251|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 251, False: 1.89k]
  ------------------
  408|    317|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 66, False: 2.07k]
  ------------------
  409|    317|                                            return OpCode::ADDU;
  410|  2.14k|                                    }
  411|  2.14k|                                }
  412|    260|                                break;
  413|       |
  414|    546|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 546, False: 2.50k]
  ------------------
  415|    648|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 102, False: 2.94k]
  ------------------
  416|    648|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 582, False: 66]
  |  Branch (416:37): [True: 516, False: 132]
  |  Branch (416:53): [True: 516, False: 66]
  ------------------
  417|    516|                                {
  418|    516|                                    return OpCode::ANDI;
  419|    516|                                }
  420|       |
  421|    132|                                break;
  422|  3.05k|                        }
  423|    586|                        break;
  424|       |
  425|  1.01k|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 1.01k, False: 20.5k]
  ------------------
  426|  2.71k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 1.69k, False: 19.8k]
  ------------------
  427|  2.71k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 84, False: 2.63k]
  ------------------
  428|  2.71k|                        {
  429|     89|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 89, False: 2.62k]
  ------------------
  430|    287|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 198, False: 2.51k]
  ------------------
  431|    287|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 221, False: 66]
  |  Branch (431:37): [True: 155, False: 132]
  |  Branch (431:53): [True: 155, False: 66]
  ------------------
  432|    155|                                {
  433|    155|                                    return OpCode::BEQZ;
  434|    155|                                }
  435|    132|                                break;
  436|       |
  437|    831|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 831, False: 1.88k]
  ------------------
  438|  1.46k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 631, False: 2.08k]
  ------------------
  439|  1.46k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.39k, False: 66]
  ------------------
  440|  1.39k|                                {
  441|  1.39k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 788, False: 608]
  ------------------
  442|    788|                                    {
  443|    788|                                        return OpCode::BFPF;
  444|    788|                                    }
  445|    608|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 537, False: 71]
  ------------------
  446|    537|                                    {
  447|    537|                                        return OpCode::BFPT;
  448|    537|                                    }
  449|  1.39k|                                }
  450|    137|                                break;
  451|       |
  452|    797|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 797, False: 1.92k]
  ------------------
  453|    884|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 87, False: 2.63k]
  ------------------
  454|    884|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 777, False: 107]
  |  Branch (454:37): [True: 401, False: 483]
  |  Branch (454:53): [True: 401, False: 376]
  ------------------
  455|    401|                                {
  456|    401|                                    return OpCode::BNEZ;
  457|    401|                                }
  458|  2.71k|                        }
  459|    836|                        break;
  460|       |
  461|    836|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 317, False: 21.2k]
  ------------------
  462|  1.63k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 1.32k, False: 20.2k]
  ------------------
  463|  1.63k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 1.36k, False: 271]
  |  Branch (463:29): [True: 1.15k, False: 484]
  |  Branch (463:45): [True: 1.15k, False: 213]
  ------------------
  464|  1.15k|                        {
  465|  1.15k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 226, False: 928]
  ------------------
  466|  1.15k|                            {
  467|     67|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 67, False: 1.08k]
  ------------------
  468|    133|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 66, False: 1.08k]
  ------------------
  469|    133|                                    return OpCode::DIVD;
  470|       |
  471|     67|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 67, False: 1.08k]
  ------------------
  472|    133|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 66, False: 1.08k]
  ------------------
  473|    133|                                    return OpCode::DIVF;
  474|       |
  475|     67|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 67, False: 1.08k]
  ------------------
  476|    389|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 322, False: 832]
  ------------------
  477|    389|                                    return OpCode::DIVI;
  478|       |
  479|     79|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 79, False: 1.07k]
  ------------------
  480|    273|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 194, False: 960]
  ------------------
  481|    273|                                    return OpCode::DIVU;
  482|  1.15k|                            }
  483|  1.15k|                        }
  484|    710|                        break;
  485|       |
  486|    710|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 76, False: 21.5k]
  ------------------
  487|    340|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 264, False: 21.3k]
  ------------------
  488|    340|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 274, False: 66]
  |  Branch (488:29): [True: 142, False: 198]
  |  Branch (488:45): [True: 208, False: 66]
  |  Branch (488:61): [True: 142, False: 66]
  ------------------
  489|    142|                        {
  490|    142|                            return OpCode::HALT;
  491|    142|                        }
  492|    198|                        break;
  493|       |
  494|    422|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 422, False: 21.1k]
  ------------------
  495|  1.02k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 600, False: 20.9k]
  ------------------
  496|  1.02k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 904, False: 118]
  |  Branch (496:29): [True: 487, False: 535]
  |  Branch (496:45): [True: 709, False: 195]
  |  Branch (496:61): [True: 487, False: 222]
  ------------------
  497|    487|                        {
  498|    487|                            return OpCode::JALR;
  499|    487|                        }
  500|    535|                        break;
  501|       |
  502|  2.31k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 2.31k, False: 19.2k]
  ------------------
  503|  2.64k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 327, False: 21.2k]
  ------------------
  504|  2.64k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.45k, False: 1.18k]
  |  Branch (504:29): [True: 1.18k, False: 1.45k]
  |  Branch (504:45): [True: 1.18k, False: 267]
  ------------------
  505|  1.18k|                        {
  506|  1.18k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 288, False: 897]
  ------------------
  507|    288|                            {
  508|    288|                                return OpCode::MOVD;
  509|    288|                            }
  510|    897|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 151, False: 746]
  ------------------
  511|    151|                            {
  512|    151|                                return OpCode::MOVF;
  513|    151|                            }
  514|  1.18k|                        }
  515|  1.45k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 1.06k, False: 387]
  |  Branch (515:34): [True: 422, False: 1.03k]
  |  Branch (515:50): [True: 1.00k, False: 66]
  |  Branch (515:66): [True: 422, False: 580]
  ------------------
  516|    422|                        {
  517|    422|                            return OpCode::MULT;
  518|    422|                        }
  519|  1.77k|                        break;
  520|       |
  521|  6.14k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 6.14k, False: 15.4k]
  ------------------
  522|  7.17k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 1.02k, False: 20.5k]
  ------------------
  523|  7.17k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 72, False: 7.09k]
  ------------------
  524|  7.17k|                        {
  525|    398|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 398, False: 6.77k]
  ------------------
  526|    788|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 390, False: 6.78k]
  ------------------
  527|    788|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 593, False: 195]
  ------------------
  528|    593|                                {
  529|    593|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 147, False: 446]
  ------------------
  530|    147|                                    {
  531|    147|                                        return OpCode::SEQI;
  532|    147|                                    }
  533|    446|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 380, False: 66]
  ------------------
  534|    380|                                    {
  535|    380|                                        return OpCode::SEQU;
  536|    380|                                    }
  537|    593|                                }
  538|    261|                                break;
  539|       |
  540|  1.01k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 1.01k, False: 6.15k]
  ------------------
  541|  1.53k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 523, False: 6.64k]
  ------------------
  542|  1.53k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 856, False: 683]
  ------------------
  543|    856|                                {
  544|    856|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 606, False: 250]
  ------------------
  545|    606|                                    {
  546|    606|                                        return OpCode::SGEI;
  547|    606|                                    }
  548|    250|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 184, False: 66]
  ------------------
  549|    184|                                    {
  550|    184|                                        return OpCode::SGEU;
  551|    184|                                    }
  552|    856|                                }
  553|    683|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 617, False: 66]
  ------------------
  554|    617|                                {
  555|    617|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 151, False: 466]
  ------------------
  556|    151|                                    {
  557|    151|                                        return OpCode::SGTI;
  558|    151|                                    }
  559|    466|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 272, False: 194]
  ------------------
  560|    272|                                    {
  561|    272|                                        return OpCode::SGTU;
  562|    272|                                    }
  563|    617|                                }
  564|    326|                                break;
  565|       |
  566|    927|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 927, False: 6.24k]
  ------------------
  567|  2.13k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 1.20k, False: 5.96k]
  ------------------
  568|  2.13k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 67, False: 2.06k]
  ------------------
  569|  2.13k|                                {
  570|     87|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 87, False: 2.04k]
  ------------------
  571|    219|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 132, False: 1.99k]
  ------------------
  572|    219|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 152, False: 67]
  ------------------
  573|    152|                                        {
  574|    152|                                            return OpCode::SLAI;
  575|    152|                                        }
  576|     67|                                        break;
  577|       |
  578|    291|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 291, False: 1.83k]
  ------------------
  579|    617|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 326, False: 1.80k]
  ------------------
  580|    617|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 276, False: 341]
  ------------------
  581|    276|                                        {
  582|    276|                                            return OpCode::SLEI;
  583|    276|                                        }
  584|    341|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 147, False: 194]
  ------------------
  585|    147|                                        {
  586|    147|                                            return OpCode::SLEU;
  587|    147|                                        }
  588|    194|                                        break;
  589|       |
  590|    208|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 208, False: 1.92k]
  ------------------
  591|    726|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 518, False: 1.61k]
  ------------------
  592|    726|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 471, False: 255]
  ------------------
  593|    471|                                        {
  594|    471|                                            return OpCode::SLLI;
  595|    471|                                        }
  596|    255|                                        break;
  597|       |
  598|    369|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 369, False: 1.76k]
  ------------------
  599|    501|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 132, False: 1.99k]
  ------------------
  600|    501|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 284, False: 217]
  ------------------
  601|    284|                                        {
  602|    284|                                            return OpCode::SLTI;
  603|    284|                                        }
  604|    217|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 144, False: 73]
  ------------------
  605|    144|                                        {
  606|    144|                                            return OpCode::SLTU;
  607|    144|                                        }
  608|     73|                                        break;
  609|  2.13k|                                }
  610|       |
  611|    824|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 168, False: 7.00k]
  ------------------
  612|  1.01k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 188, False: 6.98k]
  ------------------
  613|  1.01k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 550, False: 462]
  ------------------
  614|    550|                                {
  615|    550|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 155, False: 395]
  ------------------
  616|    155|                                    {
  617|    155|                                        return OpCode::SNEI;
  618|    155|                                    }
  619|    395|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 145, False: 250]
  ------------------
  620|    145|                                    {
  621|    145|                                        return OpCode::SNEU;
  622|    145|                                    }
  623|    550|                                }
  624|    712|                                break;
  625|       |
  626|    756|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 756, False: 6.41k]
  ------------------
  627|    911|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 155, False: 7.01k]
  ------------------
  628|    911|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 250, False: 661]
  |  Branch (628:37): [True: 177, False: 734]
  |  Branch (628:53): [True: 177, False: 73]
  ------------------
  629|    177|                                {
  630|    177|                                    return OpCode::SRAI;
  631|    177|                                }
  632|    734|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 661, False: 73]
  |  Branch (632:42): [True: 595, False: 139]
  |  Branch (632:58): [True: 595, False: 66]
  ------------------
  633|    595|                                {
  634|    595|                                    return OpCode::SRLI;
  635|    595|                                }
  636|    139|                                break;
  637|       |
  638|  1.05k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 1.05k, False: 6.11k]
  ------------------
  639|  1.37k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 316, False: 6.85k]
  ------------------
  640|  1.37k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 1.18k, False: 194]
  ------------------
  641|  1.18k|                                {
  642|  1.18k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 66, False: 1.11k]
  ------------------
  643|  1.18k|                                    {
  644|    221|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 221, False: 959]
  ------------------
  645|    287|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 66, False: 1.11k]
  ------------------
  646|    287|                                            return OpCode::SUBD;
  647|       |
  648|    220|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 220, False: 960]
  ------------------
  649|    286|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 66, False: 1.11k]
  ------------------
  650|    286|                                            return OpCode::SUBF;
  651|       |
  652|    103|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 103, False: 1.07k]
  ------------------
  653|    169|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 66, False: 1.11k]
  ------------------
  654|    169|                                            return OpCode::SUBI;
  655|       |
  656|    306|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 306, False: 874]
  ------------------
  657|    372|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 66, False: 1.11k]
  ------------------
  658|    372|                                            return OpCode::SUBU;
  659|  1.18k|                                    }
  660|  1.18k|                                }
  661|    260|                                break;
  662|  7.17k|                        }
  663|  1.77k|                        break;
  664|       |
  665|  1.77k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 94, False: 21.4k]
  ------------------
  666|    340|                    case 't':
  ------------------
  |  Branch (666:21): [True: 246, False: 21.3k]
  ------------------
  667|    340|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 274, False: 66]
  |  Branch (667:29): [True: 142, False: 198]
  |  Branch (667:45): [True: 208, False: 66]
  |  Branch (667:61): [True: 142, False: 66]
  ------------------
  668|    142|                        {
  669|    142|                            return OpCode::TRAP;
  670|    142|                        }
  671|    198|                        break;
  672|    525|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 525, False: 21.0k]
  ------------------
  673|  1.07k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 551, False: 21.0k]
  ------------------
  674|  1.07k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 999, False: 77]
  |  Branch (674:29): [True: 809, False: 267]
  |  Branch (674:45): [True: 913, False: 86]
  |  Branch (674:61): [True: 809, False: 104]
  ------------------
  675|    809|                        {
  676|    809|                            return OpCode::XORI;
  677|    809|                        }
  678|    267|                        break;
  679|  21.5k|                }
  680|  8.46k|                break;
  681|  21.5k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  8.46k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 2.82k, False: 59.5k]
  ------------------
  685|  2.82k|                const char c1 = token[0u];
  686|  2.82k|                const char c2 = token[1u];
  687|  2.82k|                const char c3 = token[2u];
  688|  2.82k|                const char c4 = token[3u];
  689|  2.82k|                const char c5 = token[4u];
  690|       |
  691|  2.82k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 535, False: 2.29k]
  ------------------
  692|  2.82k|                {
  693|    235|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 235, False: 2.59k]
  ------------------
  694|    235|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 0, False: 2.82k]
  ------------------
  695|    235|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 235, False: 0]
  |  Branch (695:29): [True: 235, False: 0]
  |  Branch (695:45): [True: 235, False: 0]
  |  Branch (695:61): [True: 235, False: 0]
  |  Branch (695:77): [True: 235, False: 0]
  ------------------
  696|    235|                        {
  697|    235|                            return OpCode::ADDUI;
  698|    235|                        }
  699|      0|                        break;
  700|       |
  701|    195|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 195, False: 2.63k]
  ------------------
  702|    195|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 0, False: 2.82k]
  ------------------
  703|    195|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 195, False: 0]
  |  Branch (703:29): [True: 195, False: 0]
  |  Branch (703:45): [True: 195, False: 0]
  |  Branch (703:61): [True: 195, False: 0]
  |  Branch (703:77): [True: 195, False: 0]
  ------------------
  704|    195|                        {
  705|    195|                            return OpCode::DIVUI;
  706|    195|                        }
  707|      0|                        break;
  708|       |
  709|    663|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 663, False: 2.16k]
  ------------------
  710|    663|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 0, False: 2.82k]
  ------------------
  711|    663|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 663, False: 0]
  |  Branch (711:29): [True: 663, False: 0]
  |  Branch (711:45): [True: 663, False: 0]
  |  Branch (711:61): [True: 663, False: 0]
  ------------------
  712|    663|                        {
  713|    663|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 0, False: 663]
  ------------------
  714|    663|                            {
  715|     99|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 99, False: 564]
  ------------------
  716|     99|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 0, False: 663]
  ------------------
  717|     99|                                    return OpCode::MULTD;
  718|       |
  719|    240|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 240, False: 423]
  ------------------
  720|    240|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 0, False: 663]
  ------------------
  721|    240|                                    return OpCode::MULTF;
  722|       |
  723|     91|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 91, False: 572]
  ------------------
  724|     91|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 0, False: 663]
  ------------------
  725|     91|                                    return OpCode::MULTI;
  726|       |
  727|    233|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 233, False: 430]
  ------------------
  728|    233|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 0, False: 663]
  ------------------
  729|    233|                                    return OpCode::MULTU;
  730|    663|                            }
  731|    663|                        }
  732|      0|                        break;
  733|       |
  734|  1.19k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 1.19k, False: 1.62k]
  ------------------
  735|  1.19k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 0, False: 2.82k]
  ------------------
  736|  1.19k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 0, False: 1.19k]
  ------------------
  737|  1.19k|                        {
  738|    278|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 278, False: 919]
  ------------------
  739|    278|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 0, False: 1.19k]
  ------------------
  740|    278|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 278, False: 0]
  |  Branch (740:37): [True: 278, False: 0]
  |  Branch (740:53): [True: 278, False: 0]
  |  Branch (740:69): [True: 278, False: 0]
  ------------------
  741|    278|                                {
  742|    278|                                    return OpCode::SEQUI;
  743|    278|                                }
  744|      0|                                break;
  745|       |
  746|    309|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 309, False: 888]
  ------------------
  747|    309|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 0, False: 1.19k]
  ------------------
  748|    309|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 226, False: 83]
  |  Branch (748:37): [True: 226, False: 83]
  |  Branch (748:53): [True: 226, False: 0]
  |  Branch (748:69): [True: 226, False: 0]
  ------------------
  749|    226|                                {
  750|    226|                                    return OpCode::SGEUI;
  751|    226|                                }
  752|     83|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 83, False: 0]
  |  Branch (752:42): [True: 83, False: 0]
  |  Branch (752:58): [True: 83, False: 0]
  |  Branch (752:74): [True: 83, False: 0]
  ------------------
  753|     83|                                {
  754|     83|                                    return OpCode::SGTUI;
  755|     83|                                }
  756|      0|                                break;
  757|       |
  758|    381|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 381, False: 816]
  ------------------
  759|    381|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 0, False: 1.19k]
  ------------------
  760|    381|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 288, False: 93]
  |  Branch (760:37): [True: 288, False: 93]
  |  Branch (760:53): [True: 288, False: 0]
  |  Branch (760:69): [True: 288, False: 0]
  ------------------
  761|    288|                                {
  762|    288|                                    return OpCode::SLEUI;
  763|    288|                                }
  764|     93|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 93, False: 0]
  |  Branch (764:42): [True: 93, False: 0]
  |  Branch (764:58): [True: 93, False: 0]
  |  Branch (764:74): [True: 93, False: 0]
  ------------------
  765|     93|                                {
  766|     93|                                    return OpCode::SLTUI;
  767|     93|                                }
  768|      0|                                break;
  769|       |
  770|    145|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 145, False: 1.05k]
  ------------------
  771|    145|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 0, False: 1.19k]
  ------------------
  772|    145|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 145, False: 0]
  |  Branch (772:37): [True: 145, False: 0]
  |  Branch (772:53): [True: 145, False: 0]
  |  Branch (772:69): [True: 145, False: 0]
  ------------------
  773|    145|                                {
  774|    145|                                    return OpCode::SNEUI;
  775|    145|                                }
  776|      0|                                break;
  777|       |
  778|     84|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 84, False: 1.11k]
  ------------------
  779|     84|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 0, False: 1.19k]
  ------------------
  780|     84|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 84, False: 0]
  |  Branch (780:37): [True: 84, False: 0]
  |  Branch (780:53): [True: 84, False: 0]
  |  Branch (780:69): [True: 84, False: 0]
  ------------------
  781|     84|                                {
  782|     84|                                    return OpCode::SUBUI;
  783|     84|                                }
  784|      0|                                break;
  785|  1.19k|                        }
  786|       |
  787|      0|                        break;
  788|  2.82k|                }
  789|       |
  790|    535|                break;
  791|  2.82k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|    846|            case 6: {
  ------------------
  |  Branch (794:13): [True: 846, False: 61.5k]
  ------------------
  795|    846|                const char c1 = token[0u];
  796|    846|                const char c2 = token[1u];
  797|    846|                const char c3 = token[2u];
  798|    846|                const char c4 = token[3u];
  799|    846|                const char c5 = token[4u];
  800|    846|                const char c6 = token[5u];
  801|       |
  802|    846|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 509, False: 337]
  |  Branch (802:21): [True: 509, False: 337]
  |  Branch (802:37): [True: 509, False: 0]
  |  Branch (802:53): [True: 509, False: 0]
  ------------------
  803|    509|                {
  804|    509|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 0, False: 509]
  ------------------
  805|    509|                    {
  806|    166|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 166, False: 343]
  ------------------
  807|    166|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 0, False: 509]
  ------------------
  808|    166|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 166, False: 0]
  ------------------
  809|    166|                            {
  810|    166|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 80, False: 86]
  ------------------
  811|     80|                                {
  812|     80|                                    return OpCode::CVTD2F;
  813|     80|                                }
  814|     86|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 86, False: 0]
  ------------------
  815|     86|                                {
  816|     86|                                    return OpCode::CVTD2I;
  817|     86|                                }
  818|    166|                            }
  819|      0|                            break;
  820|       |
  821|    178|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 178, False: 331]
  ------------------
  822|    178|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 0, False: 509]
  ------------------
  823|    178|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 178, False: 0]
  ------------------
  824|    178|                            {
  825|    178|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 82, False: 96]
  ------------------
  826|     82|                                {
  827|     82|                                    return OpCode::CVTF2D;
  828|     82|                                }
  829|     96|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 96, False: 0]
  ------------------
  830|     96|                                {
  831|     96|                                    return OpCode::CVTF2I;
  832|     96|                                }
  833|    178|                            }
  834|      0|                            break;
  835|       |
  836|    165|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 165, False: 344]
  ------------------
  837|    165|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 0, False: 509]
  ------------------
  838|    165|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 165, False: 0]
  ------------------
  839|    165|                            {
  840|    165|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 80, False: 85]
  ------------------
  841|     80|                                {
  842|     80|                                    return OpCode::CVTI2D;
  843|     80|                                }
  844|     85|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 85, False: 0]
  ------------------
  845|     85|                                {
  846|     85|                                    return OpCode::CVTI2F;
  847|     85|                                }
  848|    165|                            }
  849|    509|                    }
  850|    509|                }
  851|    337|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 132, False: 205]
  |  Branch (851:26): [True: 132, False: 205]
  |  Branch (851:42): [True: 132, False: 0]
  |  Branch (851:58): [True: 132, False: 0]
  |  Branch (851:74): [True: 132, False: 0]
  ------------------
  852|    337|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 132, False: 0]
  |  Branch (852:42): [True: 132, False: 0]
  ------------------
  853|    132|                {
  854|    132|                    return OpCode::MULTUI;
  855|    132|                }
  856|    205|                break;
  857|    846|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|    527|            case 7: {
  ------------------
  |  Branch (860:13): [True: 527, False: 61.8k]
  ------------------
  861|    527|                const char c1 = token[0u];
  862|    527|                const char c2 = token[1u];
  863|    527|                const char c3 = token[2u];
  864|    527|                const char c4 = token[3u];
  865|    527|                const char c5 = token[4u];
  866|    527|                const char c6 = token[5u];
  867|    527|                const char c7 = token[6u];
  868|       |
  869|    527|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 454, False: 73]
  |  Branch (869:21): [True: 454, False: 73]
  |  Branch (869:37): [True: 454, False: 0]
  |  Branch (869:53): [True: 454, False: 0]
  ------------------
  870|    454|                {
  871|    454|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 214, False: 240]
  |  Branch (871:25): [True: 214, False: 240]
  |  Branch (871:41): [True: 214, False: 0]
  |  Branch (871:54): [True: 214, False: 0]
  |  Branch (871:70): [True: 214, False: 0]
  ------------------
  872|    214|                    {
  873|    214|                        return OpCode::MOVI2FP;
  874|    214|                    }
  875|    240|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 240, False: 0]
  |  Branch (875:25): [True: 240, False: 0]
  |  Branch (875:41): [True: 240, False: 0]
  |  Branch (875:57): [True: 240, False: 0]
  |  Branch (875:70): [True: 240, False: 0]
  ------------------
  876|    240|                    {
  877|    240|                        return OpCode::MOVFP2I;
  878|    240|                    }
  879|    240|                }
  880|     73|                break;
  881|    527|            }
  882|       |
  883|  5.14k|            default: {
  ------------------
  |  Branch (883:13): [True: 5.14k, False: 57.2k]
  ------------------
  884|  5.14k|                break;
  885|    527|            }
  886|  62.3k|        }
  887|       |
  888|       |        // None found
  889|  28.7k|        return OpCode::NONE;
  890|  62.3k|    }
_ZN3dlx3iceEcc:
   15|  93.1k|    {
   16|  93.1k|        constexpr const char diff = 'a' - 'A';
   17|  93.1k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 42.5k, False: 50.6k]
  |  Branch (17:28): [True: 20.9k, False: 29.7k]
  ------------------
   18|  93.1k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|  57.9k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.27k|    {
  187|  1.27k|        ParseError err;
  188|       |
  189|  1.27k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.27k|        err.m_LineNumber                           = line_number;
  191|  1.27k|        err.m_Column                               = column;
  192|  1.27k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.27k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.27k|        return err;
  196|  1.27k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.27k|    {
  202|  1.27k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.27k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.27k|                                                         actual_type);
  205|  1.27k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|     66|    {
  210|     66|        ParseError err;
  211|       |
  212|     66|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|     66|        err.m_LineNumber        = line_number;
  214|     66|        err.m_Column            = column;
  215|     66|        err.invalid_number.text = text;
  216|       |
  217|     66|        return err;
  218|     66|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|     66|    {
  222|     66|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|     66|                                                token.GetColumn().unsafe(), token.GetText());
  224|     66|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  13.8k|    {
  248|  13.8k|        ParseError err;
  249|       |
  250|  13.8k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  13.8k|        err.m_LineNumber                   = line_number;
  252|  13.8k|        err.m_Column                       = column;
  253|  13.8k|        err.unexpected_token.expected_type = expected_type;
  254|  13.8k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  13.8k|        return err;
  257|  13.8k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  13.8k|    {
  262|  13.8k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  13.8k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  13.8k|                                                  token.GetType());
  265|  13.8k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|    870|    {
  271|    870|        ParseError err;
  272|       |
  273|    870|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|    870|        err.m_LineNumber                   = line_number;
  275|    870|        err.m_Column                       = column;
  276|    870|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|    870|        return err;
  279|    870|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    202|    {
  283|    202|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    202|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    202|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  18.0k|    {
  291|  18.0k|        ParseError err;
  292|       |
  293|  18.0k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  18.0k|        err.m_LineNumber                        = line_number;
  295|  18.0k|        err.m_Column                            = column;
  296|  18.0k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  18.0k|        return err;
  299|  18.0k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  18.0k|    {
  303|  18.0k|        return ConstructInvalidLabelIdentifierParseError(
  304|  18.0k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  18.0k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|    974|    {
  313|    974|        ParseError err;
  314|       |
  315|    974|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|    974|        err.m_LineNumber                     = line_number;
  317|    974|        err.m_Column                         = column;
  318|    974|        err.label_already_defined.label_name = label_name;
  319|    974|        err.label_already_defined.at_line    = at_line;
  320|    974|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|    974|        return err;
  323|    974|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|    974|    {
  328|    974|        return ConstructLabelAlreadyDefinedParseError(
  329|    974|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|    974|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|    974|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  13.2k|    {
  336|  13.2k|        ParseError err;
  337|       |
  338|  13.2k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  13.2k|        err.m_LineNumber = line_number;
  340|  13.2k|        err.m_Column     = column;
  341|       |
  342|  13.2k|        return err;
  343|  13.2k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  13.2k|    {
  347|  13.2k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  13.2k|                                                        token.GetColumn().unsafe());
  349|  13.2k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  8.27k|    {
  355|  8.27k|        ParseError err;
  356|       |
  357|  8.27k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  8.27k|        err.m_LineNumber               = line_number;
  359|  8.27k|        err.m_Column                   = column;
  360|  8.27k|        err.too_few_arguments.required = required;
  361|  8.27k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  8.27k|        return err;
  364|  8.27k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  8.27k|    {
  369|  8.27k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  8.27k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  8.27k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|    988|    {
  376|    988|        ParseError err;
  377|       |
  378|    988|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|    988|        err.m_LineNumber           = line_number;
  380|    988|        err.m_Column               = column;
  381|    988|        err.empty_label.label_name = label_name;
  382|       |
  383|    988|        return err;
  384|    988|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|    988|    {
  388|    988|        return ConstructEmptyLabelParseError(
  389|    988|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|    988|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 876, False: 112]
  ------------------
  391|    876|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|    988|                        token.GetText());
  393|    988|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    379|    {
  398|    379|        ParseError err;
  399|       |
  400|    379|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    379|        err.m_LineNumber = line_number;
  402|    379|        err.m_Column     = column;
  403|       |
  404|    379|        return err;
  405|    379|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    379|    {
  409|    379|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    379|                                               token.GetColumn().unsafe());
  411|    379|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|  57.9k|    {
   17|  57.9k|        m_ParseErrors.emplace_back(phi::move(error));
   18|  57.9k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.04k|    {
  181|  4.04k|        ParsedProgram program;
  182|       |
  183|  4.04k|        program.m_Tokens = tokens;
  184|       |
  185|  4.04k|        phi::boolean line_has_instruction{false};
  186|  4.04k|        phi::usize   label_count{0u};
  187|       |
  188|   152k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 148k, False: 4.04k]
  ------------------
  189|   148k|        {
  190|   148k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   148k|            switch (current_token.GetType())
  195|   148k|            {
  196|       |                // Ignore comments
  197|  28.6k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 28.6k, False: 119k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  28.6k|                    break;
  200|       |
  201|  55.7k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 55.7k, False: 92.5k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  55.7k|                    line_has_instruction = false;
  204|  55.7k|                    break;
  205|       |
  206|  19.7k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 19.7k, False: 128k]
  ------------------
  207|  19.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 560, False: 19.2k]
  ------------------
  208|    560|                    {
  209|    560|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|    560|                                current_token, Token::Type::NewLine));
  211|    560|                        break;
  212|    560|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  19.2k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 15.1k, False: 4.06k]
  ------------------
  217|  15.1k|                    {
  218|  15.1k|                        program.AddParseError(
  219|  15.1k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  15.1k|                        break;
  221|  15.1k|                    }
  222|       |
  223|  4.06k|                    phi::string_view label_name = current_token.GetText();
  224|  4.06k|                    label_name.remove_suffix(1u);
  225|       |
  226|  4.06k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 668, False: 3.39k]
  ------------------
  227|    668|                    {
  228|    668|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|    668|                                current_token.GetLineNumber().unsafe(),
  230|    668|                                current_token.GetColumn().unsafe(), label_name));
  231|    668|                        break;
  232|    668|                    }
  233|       |
  234|  3.39k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 1.11k, False: 2.27k]
  ------------------
  235|  1.11k|                    {
  236|  1.11k|                        program.AddParseError(
  237|  1.11k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  1.11k|                        break;
  239|  1.11k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  2.27k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 974, False: 1.30k]
  ------------------
  243|    974|                    {
  244|       |                        // Find first defintions of label
  245|    974|                        const Token* first_label_definition =
  246|    974|                                tokens.find_first_token_if([&](const Token& t) {
  247|    974|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|    974|                                    {
  249|    974|                                        phi::string_view token_label_name = t.GetText();
  250|    974|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|    974|                                        if (token_label_name == label_name)
  253|    974|                                        {
  254|    974|                                            return true;
  255|    974|                                        }
  256|    974|                                    }
  257|       |
  258|    974|                                    return false;
  259|    974|                                });
  260|       |
  261|    974|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|    974|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|    974|                                current_token, *first_label_definition));
  265|    974|                        break;
  266|    974|                    }
  267|       |
  268|  1.30k|                    program.m_JumpData[label_name] =
  269|  1.30k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  1.30k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  1.30k|                    break;
  276|  2.27k|                }
  277|       |
  278|  32.4k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 32.4k, False: 115k]
  ------------------
  279|  32.4k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 13.2k, False: 19.2k]
  ------------------
  280|  13.2k|                    {
  281|  13.2k|                        program.AddParseError(
  282|  13.2k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  13.2k|                        break;
  284|  13.2k|                    }
  285|       |
  286|  19.2k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  19.2k|                    PHI_ASSERT(current_token.HasHint());
  290|  19.2k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  19.2k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  19.2k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  19.2k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  19.2k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  19.2k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  19.2k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  19.2k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  19.2k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  36.7k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 30.8k, False: 5.94k]
  ------------------
  312|  30.8k|                    {
  313|       |                        // Get next token
  314|  30.8k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 134, False: 30.7k]
  ------------------
  315|    134|                        {
  316|    134|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    134|                                    current_token, number_of_argument_required.unsafe(),
  318|    134|                                    argument_num.unsafe()));
  319|    134|                            break;
  320|    134|                        }
  321|       |
  322|  30.7k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  30.7k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 5.18k, False: 25.5k]
  ------------------
  326|  5.18k|                        {
  327|  5.18k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 379, False: 4.80k]
  ------------------
  328|    379|                            {
  329|    379|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    379|                            }
  331|       |
  332|  5.18k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  5.18k|                            continue;
  335|  5.18k|                        }
  336|       |
  337|  25.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 8.13k, False: 17.3k]
  ------------------
  338|  8.13k|                        {
  339|  8.13k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  8.13k|                                    token, number_of_argument_required.unsafe(),
  341|  8.13k|                                    argument_num.unsafe()));
  342|  8.13k|                            break;
  343|  8.13k|                        }
  344|       |
  345|  17.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  17.3k|                                parse_instruction_argument(
  347|  17.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  17.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 5.02k, False: 12.3k]
  ------------------
  349|  5.02k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  5.02k|                            break;
  352|  5.02k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  12.3k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  12.3k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  12.3k|                        argument_num++;
  359|  12.3k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  12.3k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  19.2k|                    program.m_Instructions.emplace_back(instruction);
  367|  19.2k|                    line_has_instruction = true;
  368|  19.2k|                    break;
  369|  32.4k|                }
  370|       |
  371|  11.6k|                default:
  ------------------
  |  Branch (371:17): [True: 11.6k, False: 136k]
  ------------------
  372|  11.6k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  11.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 3.35k, False: 8.26k]
  ------------------
  374|  3.35k|                    {
  375|  3.35k|                        expected_token_type = Token::Type::NewLine;
  376|  3.35k|                    }
  377|       |
  378|  11.6k|                    program.AddParseError(
  379|  11.6k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  11.6k|                    break;
  381|   148k|            }
  382|   148k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.04k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 177, False: 3.87k]
  ------------------
  386|    177|        {
  387|  1.77k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 1.59k, False: 177]
  ------------------
  388|  1.59k|            {
  389|  1.59k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  1.59k|                const Token& token = *it;
  392|  1.59k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 988, False: 611]
  ------------------
  393|    988|                {
  394|    988|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|    988|                    --label_count;
  396|    988|                }
  397|  1.59k|            }
  398|    177|        }
  399|       |
  400|  4.04k|        return program;
  401|  4.04k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.04k|    {
  405|  4.04k|        TokenStream tokens = Tokenize(source);
  406|  4.04k|        return Parse(tokens);
  407|  4.04k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  17.3k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  17.3k|        switch (token.GetType())
   37|  17.3k|        {
   38|    264|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 264, False: 17.1k]
  ------------------
   39|    264|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 67, False: 197]
  ------------------
   40|    264|                                          ArgumentType::AddressDisplacement))
   41|     67|                {
   42|     67|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|     67|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|     67|                    return {};
   46|     67|                }
   47|       |
   48|       |                // Get address displacement
   49|    197|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    197|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    197|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 195]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    195|                auto         it           = tokens.current_position();
   61|    195|                const Token& first_token  = tokens.consume();
   62|    195|                const Token& second_token = tokens.consume();
   63|    195|                const Token& third_token  = tokens.consume();
   64|       |
   65|    195|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 195, False: 0]
  ------------------
   66|    195|                {
   67|    195|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    195|                            first_token, Token::Type::OpenBracket));
   69|    195|                    return {};
   70|    195|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  7.74k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 7.74k, False: 9.65k]
  ------------------
   97|  7.74k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 7.55k]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  7.55k|                return ConstructInstructionArgumentRegisterInt(
  108|  7.55k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  7.74k|            }
  110|  2.87k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 2.87k, False: 14.5k]
  ------------------
  111|  2.87k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 579, False: 2.29k]
  ------------------
  112|    579|                {
  113|    579|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    579|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    579|                    return {};
  116|    579|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  2.29k|                return ConstructInstructionArgumentRegisterFloat(
  122|  2.29k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  2.87k|            }
  124|    202|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 202, False: 17.1k]
  ------------------
  125|    202|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    202|                return {};
  128|  2.87k|            }
  129|  2.82k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 2.82k, False: 14.5k]
  ------------------
  130|       |                // Parse as Label
  131|  2.82k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 108, False: 2.71k]
  ------------------
  132|    108|                {
  133|    108|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    108|                            token, expected_argument_type, ArgumentType::Label));
  135|    108|                    return {};
  136|    108|                }
  137|       |
  138|  2.71k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 2.71k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  2.71k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 1.81k, False: 899]
  ------------------
  145|  1.81k|                {
  146|  1.81k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  1.81k|                    return {};
  148|  1.81k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|    899|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  2.71k|            }
  154|  2.01k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 2.01k, False: 15.3k]
  ------------------
  155|  2.01k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 322, False: 1.69k]
  ------------------
  156|    322|                {
  157|    322|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    322|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    322|                    return {};
  160|    322|                }
  161|       |
  162|  1.69k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 1.62k, False: 66]
  ------------------
  163|  1.62k|                {
  164|  1.62k|                    return ConstructInstructionArgumentImmediateValue(
  165|  1.62k|                            static_cast<phi::int16_t>(token.GetHint()));
  166|  1.62k|                }
  167|       |
  168|     66|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|     66|                return {};
  170|  1.69k|            }
  171|       |
  172|  1.47k|            default:
  ------------------
  |  Branch (172:13): [True: 1.47k, False: 15.9k]
  ------------------
  173|  1.47k|                program.AddParseError(
  174|  1.47k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  1.47k|                return {};
  176|  17.3k|        }
  177|  17.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  11.2k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  11.2k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 4.82k, False: 6.43k]
  ------------------
  248|  4.82k|                                    {
  249|  4.82k|                                        phi::string_view token_label_name = t.GetText();
  250|  4.82k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  4.82k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 974, False: 3.84k]
  ------------------
  253|    974|                                        {
  254|    974|                                            return true;
  255|    974|                                        }
  256|  4.82k|                                    }
  257|       |
  258|  10.2k|                                    return false;
  259|  11.2k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   68|  2.68M|    {
   69|  2.68M|        PHI_ASSERT(id != IntRegisterID::None);
   70|  2.68M|        phi::size_t id_value = phi::to_underlying(id);
   71|       |
   72|  2.68M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   73|       |
   74|  2.68M|        return m_IntRegisters[id_value];
   75|  2.68M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   78|  3.94M|    {
   79|  3.94M|        PHI_ASSERT(id != IntRegisterID::None);
   80|  3.94M|        phi::size_t id_value = phi::to_underlying(id);
   81|       |
   82|  3.94M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   83|       |
   84|  3.94M|        return m_IntRegisters[id_value];
   85|  3.94M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   88|  2.31M|    {
   89|  2.31M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   90|  2.31M|                                             RegisterAccessType::Signed),
   91|  2.31M|                   "Mismatch for instruction access type");
   92|       |
   93|  2.31M|        const phi::size_t id_value = phi::to_underlying(id);
   94|       |
   95|  2.31M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   96|  2.31M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   97|  2.31M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (97:13): [True: 1.57M, False: 732k]
  ------------------
   98|  2.31M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (98:13): [True: 656k, False: 923k]
  ------------------
   99|   656k|        {
  100|   656k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   656k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  101|   656k|        }
  102|       |
  103|  2.31M|        return GetIntRegister(id).GetSignedValue();
  104|  2.31M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  107|  1.63M|    {
  108|  1.63M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  109|  1.63M|                                             RegisterAccessType::Unsigned),
  110|  1.63M|                   "Mismatch for instruction access type");
  111|       |
  112|  1.63M|        const phi::size_t id_value = phi::to_underlying(id);
  113|       |
  114|  1.63M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  115|  1.63M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  116|  1.63M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (116:13): [True: 835k, False: 800k]
  ------------------
  117|  1.63M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (117:13): [True: 520k, False: 315k]
  ------------------
  118|   520k|        {
  119|   520k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   520k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  120|   520k|        }
  121|       |
  122|  1.63M|        return GetIntRegister(id).GetUnsignedValue();
  123|  1.63M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  126|  1.43M|    {
  127|  1.43M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  128|  1.43M|                                             RegisterAccessType::Signed),
  129|  1.43M|                   "Mismatch for instruction access type");
  130|       |
  131|  1.43M|        IntRegister& reg = GetIntRegister(id);
  132|       |
  133|  1.43M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (133:13): [True: 351k, False: 1.08M]
  ------------------
  134|   351k|        {
  135|   351k|            return;
  136|   351k|        }
  137|       |
  138|  1.08M|        reg.SetSignedValue(value);
  139|       |
  140|  1.08M|        const phi::size_t id_value = phi::to_underlying(id);
  141|       |
  142|  1.08M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  143|  1.08M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  144|  1.08M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  147|  1.24M|    {
  148|  1.24M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  149|  1.24M|                                             RegisterAccessType::Unsigned),
  150|  1.24M|                   "Mismatch for instruction access type");
  151|       |
  152|  1.24M|        IntRegister& reg = GetIntRegister(id);
  153|       |
  154|  1.24M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (154:13): [True: 162k, False: 1.08M]
  ------------------
  155|   162k|        {
  156|   162k|            return;
  157|   162k|        }
  158|       |
  159|  1.08M|        reg.SetUnsignedValue(value);
  160|       |
  161|  1.08M|        const phi::size_t id_value = phi::to_underlying(id);
  162|       |
  163|  1.08M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  164|  1.08M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  165|  1.08M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  168|  1.76M|    {
  169|  1.76M|        PHI_ASSERT(id != FloatRegisterID::None);
  170|  1.76M|        const phi::size_t id_value = phi::to_underlying(id);
  171|       |
  172|  1.76M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  173|       |
  174|  1.76M|        return m_FloatRegisters[id_value];
  175|  1.76M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  178|   600k|    {
  179|   600k|        PHI_ASSERT(id != FloatRegisterID::None);
  180|   600k|        const phi::size_t id_value = phi::to_underlying(id);
  181|       |
  182|   600k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  183|       |
  184|   600k|        return m_FloatRegisters[id_value];
  185|   600k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  188|   600k|    {
  189|   600k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  190|   600k|                                             RegisterAccessType::Float),
  191|   600k|                   "Mismatch for instruction access type");
  192|       |
  193|   600k|        const phi::size_t id_value = phi::to_underlying(id);
  194|       |
  195|   600k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  196|   600k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  197|   600k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (197:13): [True: 578k, False: 21.1k]
  ------------------
  198|   600k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (198:13): [True: 208k, False: 370k]
  ------------------
  199|   208k|        {
  200|       |            /*
  201|       |            DLX_WARN("Mismatch for register value type");
  202|       |            */
  203|   208k|        }
  204|       |
  205|   600k|        const FloatRegister& reg = GetFloatRegister(id);
  206|       |
  207|   600k|        return reg.GetValue();
  208|   600k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  211|   710k|    {
  212|   710k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  213|   710k|                                             RegisterAccessType::Double),
  214|   710k|                   "Mismatch for instruction access type");
  215|       |
  216|   710k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (216:13): [True: 13, False: 710k]
  ------------------
  217|     13|        {
  218|     13|            Raise(Exception::MisalignedRegisterAccess);
  219|     13|            return {0.0};
  220|     13|        }
  221|       |
  222|   710k|        const phi::size_t id_value = phi::to_underlying(id);
  223|       |
  224|   710k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  225|   710k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  226|   710k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (226:13): [True: 694k, False: 15.9k]
  ------------------
  227|   710k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (227:13): [True: 446k, False: 248k]
  ------------------
  228|   446k|        {
  229|   446k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   446k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  230|   446k|        }
  231|       |
  232|   710k|        const FloatRegisterValueType register_value_type_high =
  233|   710k|                m_FloatRegistersValueTypes[id_value + 1u];
  234|   710k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (234:13): [True: 696k, False: 13.4k]
  ------------------
  235|   710k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (235:13): [True: 3.54k, False: 693k]
  ------------------
  236|  3.54k|        {
  237|  3.54k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  3.54k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  238|  3.54k|        }
  239|       |
  240|   710k|        const FloatRegister& first_reg = GetFloatRegister(id);
  241|   710k|        const FloatRegister& second_reg =
  242|   710k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  243|       |
  244|   710k|        const float first_value  = first_reg.GetValue().unsafe();
  245|   710k|        const float second_value = second_reg.GetValue().unsafe();
  246|       |
  247|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  248|   710k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  249|       |
  250|   710k|        const phi::uint32_t first_value_bits =
  251|   710k|                *reinterpret_cast<const phi::uint32_t*>(&first_value);
  252|   710k|        const phi::uint32_t second_value_bits =
  253|   710k|                *reinterpret_cast<const phi::uint32_t*>(&second_value);
  254|       |
  255|   710k|        phi::uint64_t final_value_bits =
  256|   710k|                static_cast<phi::uint64_t>(second_value_bits) << 32u | first_value_bits;
  257|       |
  258|   710k|        return *reinterpret_cast<double*>(&final_value_bits);
  259|       |
  260|   710k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  261|   710k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  264|   178k|    {
  265|   178k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  266|   178k|                                             RegisterAccessType::Float),
  267|   178k|                   "Mismatch for instruction access type");
  268|       |
  269|   178k|        FloatRegister& reg = GetFloatRegister(id);
  270|       |
  271|   178k|        reg.SetValue(value);
  272|       |
  273|   178k|        const phi::size_t id_value = phi::to_underlying(id);
  274|       |
  275|   178k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  276|   178k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  277|   178k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  280|  84.4k|    {
  281|  84.4k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  282|  84.4k|                                             RegisterAccessType::Double),
  283|  84.4k|                   "Mismatch for instruction access type");
  284|       |
  285|  84.4k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (285:13): [True: 2, False: 84.4k]
  ------------------
  286|      2|        {
  287|      2|            Raise(Exception::MisalignedRegisterAccess);
  288|      2|            return;
  289|      2|        }
  290|       |
  291|  84.4k|        const constexpr phi::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  292|  84.4k|        const constexpr phi::uint64_t second_32_bits = first_32_bits << 32u;
  293|       |
  294|  84.4k|        double              value_raw  = value.unsafe();
  295|  84.4k|        const phi::uint64_t value_bits = *reinterpret_cast<phi::uint64_t*>(&value_raw);
  296|       |
  297|  84.4k|        const phi::uint32_t first_bits  = value_bits & first_32_bits;
  298|  84.4k|        const phi::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  299|       |
  300|  84.4k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  301|  84.4k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  302|       |
  303|  84.4k|        FloatRegister& first_reg = GetFloatRegister(id);
  304|  84.4k|        FloatRegister& second_reg =
  305|  84.4k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  306|       |
  307|  84.4k|        first_reg.SetValue(first_value);
  308|  84.4k|        second_reg.SetValue(second_value);
  309|       |
  310|  84.4k|        const phi::size_t id_value = phi::to_underlying(id);
  311|       |
  312|  84.4k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  313|  84.4k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  314|  84.4k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  315|  84.4k|    }
_ZN3dlx9Processor7GetFPSREv:
  318|   475k|    {
  319|   475k|        return m_FPSR;
  320|   475k|    }
_ZNK3dlx9Processor7GetFPSREv:
  323|   673k|    {
  324|   673k|        return m_FPSR;
  325|   673k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  328|   673k|    {
  329|   673k|        const StatusRegister& status_reg = GetFPSR();
  330|       |
  331|   673k|        return status_reg.Get();
  332|   673k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  335|   475k|    {
  336|   475k|        StatusRegister& status_reg = GetFPSR();
  337|       |
  338|   475k|        status_reg.SetStatus(value);
  339|   475k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  342|  4.74M|    {
  343|  4.74M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  344|       |
  345|  4.74M|        inst.Execute(*this);
  346|  4.74M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|  4.04k|    {
  350|  4.04k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 3.07k, False: 974]
  ------------------
  351|  3.07k|        {
  352|  3.07k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.07k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|  3.07k|            return false;
  354|  3.07k|        }
  355|       |
  356|    974|        m_CurrentProgram = &program;
  357|       |
  358|    974|        m_ProgramCounter               = 0u;
  359|    974|        m_Halted                       = false;
  360|    974|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|    974|        m_LastRaisedException          = Exception::None;
  362|    974|        m_CurrentStepCount             = 0u;
  363|       |
  364|    974|        return true;
  365|  4.04k|    }
_ZNK3dlx9Processor17GetCurrentProgramEv:
  368|  1.42M|    {
  369|  1.42M|        return m_CurrentProgram;
  370|  1.42M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  373|  4.74M|    {
  374|       |        // No nothing when no program is loaded
  375|  4.74M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (375:13): [True: 0, False: 4.74M]
  ------------------
  376|      0|        {
  377|      0|            return;
  378|      0|        }
  379|       |
  380|       |        // Halt if there are no instruction to execute
  381|  4.74M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (381:13): [True: 74, False: 4.74M]
  ------------------
  382|     74|        {
  383|     74|            m_Halted                       = true;
  384|     74|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  385|     74|        }
  386|       |
  387|       |        // Do nothing when processor is halted
  388|  4.74M|        if (m_Halted)
  ------------------
  |  Branch (388:13): [True: 74, False: 4.74M]
  ------------------
  389|     74|        {
  390|     74|            return;
  391|     74|        }
  392|       |
  393|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  394|  4.74M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  395|       |
  396|       |        // Get current instruction pointed to by the program counter
  397|  4.74M|        const auto& current_instruction =
  398|  4.74M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  399|       |
  400|       |        // Execute current instruction
  401|  4.74M|        ExecuteInstruction(current_instruction);
  402|       |
  403|       |        // Stop executing if the last instruction halted the processor
  404|  4.74M|        if (m_Halted)
  ------------------
  |  Branch (404:13): [True: 96, False: 4.74M]
  ------------------
  405|     96|        {
  406|     96|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  407|     96|            return;
  408|     96|        }
  409|       |
  410|  4.74M|        m_ProgramCounter = m_NextProgramCounter;
  411|       |
  412|  4.74M|        ++m_CurrentStepCount;
  413|       |
  414|  4.74M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (414:13): [True: 804, False: 4.74M]
  |  Branch (414:14): [True: 4.74M, False: 0]
  |  Branch (414:42): [True: 474, False: 4.74M]
  ------------------
  415|  4.74M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (415:13): [True: 330, False: 4.74M]
  ------------------
  416|    804|        {
  417|    804|            m_Halted                       = true;
  418|    804|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  419|    804|        }
  420|  4.74M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  423|    974|    {
  424|       |        // Do nothing when no program is loaded
  425|    974|        if (!m_CurrentProgram)
  ------------------
  |  Branch (425:13): [True: 0, False: 974]
  ------------------
  426|      0|        {
  427|      0|            return;
  428|      0|        }
  429|       |
  430|    974|        m_ProgramCounter               = 0u;
  431|    974|        m_Halted                       = false;
  432|    974|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  433|    974|        m_LastRaisedException          = Exception::None;
  434|    974|        m_CurrentStepCount             = 0u;
  435|       |
  436|  4.74M|        while (!m_Halted)
  ------------------
  |  Branch (436:16): [True: 4.74M, False: 974]
  ------------------
  437|  4.74M|        {
  438|  4.74M|            ExecuteStep();
  439|  4.74M|        }
  440|       |
  441|    974|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  442|    974|                   "RegisterAccessType was not reset correctly");
  443|    974|    }
_ZN3dlx9Processor14ClearRegistersEv:
  459|  4.04k|    {
  460|  4.04k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (460:24): [True: 129k, False: 4.04k]
  ------------------
  461|   129k|        {
  462|   129k|            reg.SetSignedValue(0);
  463|   129k|        }
  464|       |
  465|  4.04k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (465:24): [True: 129k, False: 4.04k]
  ------------------
  466|   129k|        {
  467|   129k|            reg.SetValue(0.0f);
  468|   129k|        }
  469|       |
  470|  4.04k|        m_FPSR.SetStatus(false);
  471|  4.04k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  474|  4.04k|    {
  475|  4.04k|        m_MemoryBlock.Clear();
  476|  4.04k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  483|   180k|    {
  484|   180k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  485|       |
  486|   180k|        m_LastRaisedException = exception;
  487|       |
  488|   180k|        switch (exception)
  489|   180k|        {
  490|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (490:13): [True: 6, False: 180k]
  ------------------
  491|      6|                m_Halted = true;
  492|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  493|      6|                return;
  494|  47.7k|            case Exception::Overflow:
  ------------------
  |  Branch (494:13): [True: 47.7k, False: 132k]
  ------------------
  495|  47.7k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  47.7k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  496|  47.7k|                return;
  497|  63.1k|            case Exception::Underflow:
  ------------------
  |  Branch (497:13): [True: 63.1k, False: 117k]
  ------------------
  498|  63.1k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  63.1k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  499|  63.1k|                return;
  500|      1|            case Exception::Trap:
  ------------------
  |  Branch (500:13): [True: 1, False: 180k]
  ------------------
  501|      1|                m_Halted = true;
  502|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  503|      1|                return;
  504|      8|            case Exception::Halt:
  ------------------
  |  Branch (504:13): [True: 8, False: 180k]
  ------------------
  505|      8|                m_Halted = true;
  506|      8|                return;
  507|     48|            case Exception::UnknownLabel:
  ------------------
  |  Branch (507:13): [True: 48, False: 180k]
  ------------------
  508|     48|                m_Halted = true;
  509|     48|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     48|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  510|     48|                return;
  511|  69.4k|            case Exception::BadShift:
  ------------------
  |  Branch (511:13): [True: 69.4k, False: 110k]
  ------------------
  512|  69.4k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  69.4k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  513|  69.4k|                return;
  514|     20|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (514:13): [True: 20, False: 180k]
  ------------------
  515|     20|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     20|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  516|     20|                m_Halted = true;
  517|     20|                return;
  518|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (518:13): [True: 15, False: 180k]
  ------------------
  519|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     15|                m_Halted = true;
  521|     15|                return;
  522|       |
  523|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  524|      0|            default:
  ------------------
  |  Branch (524:13): [True: 0, False: 180k]
  ------------------
  525|      0|                PHI_ASSERT_NOT_REACHED();
  526|   180k|#endif
  527|   180k|        }
  528|       |
  529|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  530|      0|        PHI_ASSERT_NOT_REACHED();
  531|      0|#endif
  532|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  553|     10|    {
  554|     10|        return m_MemoryBlock;
  555|     10|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  568|   596k|    {
  569|   596k|        return m_NextProgramCounter;
  570|   596k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  573|  1.42M|    {
  574|  1.42M|        m_NextProgramCounter = new_npc;
  575|  1.42M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   34|  8.20M|    {
   35|  8.20M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   36|  8.20M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   37|       |
   38|  8.20M|        switch (expected_access)
   39|  8.20M|        {
   40|  1.71M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (40:13): [True: 1.71M, False: 6.49M]
  ------------------
   41|  1.71M|                return true;
   42|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (42:13): [True: 0, False: 8.20M]
  ------------------
   43|      0|                return false;
   44|   103k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (44:13): [True: 103k, False: 8.09M]
  ------------------
   45|   103k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (45:24): [True: 51.6k, False: 51.6k]
  |  Branch (45:63): [True: 51.6k, False: 0]
  ------------------
   46|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (46:13): [True: 0, False: 8.20M]
  ------------------
   47|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (47:24): [True: 0, False: 0]
  ------------------
   48|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|  59.8k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (49:13): [True: 59.8k, False: 8.14M]
  ------------------
   50|  59.8k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (50:24): [True: 29.9k, False: 29.9k]
  |  Branch (50:63): [True: 29.9k, False: 0]
  ------------------
   51|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (51:13): [True: 0, False: 8.20M]
  ------------------
   52|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 0, False: 0]
  |  Branch (52:64): [True: 0, False: 0]
  ------------------
   53|  6.32M|            default:
  ------------------
  |  Branch (53:13): [True: 6.32M, False: 1.87M]
  ------------------
   54|  6.32M|                return expected_access == access;
   55|  8.20M|        }
   56|  8.20M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|  75.5k|    {
   11|  75.5k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 15.4k, False: 60.0k]
  ------------------
   12|  15.4k|        {
   13|  15.4k|            const char first_char = token[0u];
   14|  15.4k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 7.22k, False: 8.20k]
  |  Branch (14:38): [True: 725, False: 7.47k]
  ------------------
   15|  7.95k|            {
   16|  7.95k|                const char second_char = token[1u];
   17|  7.95k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 7.44k, False: 509]
  |  Branch (17:43): [True: 7.34k, False: 95]
  ------------------
   18|  7.34k|                {
   19|  7.34k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  7.34k|                }
   21|  7.95k|            }
   22|  15.4k|        }
   23|  60.0k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 22.4k, False: 37.6k]
  ------------------
   24|  22.4k|        {
   25|  22.4k|            const char first_char = token[0u];
   26|  22.4k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 2.07k, False: 20.3k]
  |  Branch (26:38): [True: 1.01k, False: 19.3k]
  ------------------
   27|  3.08k|            {
   28|  3.08k|                const char second_char = token[1u];
   29|  3.08k|                const char third_char  = token[2u];
   30|       |
   31|  3.08k|                switch (second_char)
   32|  3.08k|                {
   33|    729|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 729, False: 2.35k]
  ------------------
   34|    729|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 535, False: 194]
  |  Branch (34:50): [True: 468, False: 67]
  ------------------
   35|    468|                        {
   36|    468|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    468|                        }
   38|    261|                        break;
   39|    729|                    }
   40|  1.24k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 1.24k, False: 1.83k]
  ------------------
   41|  1.24k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 1.05k, False: 194]
  |  Branch (41:50): [True: 988, False: 66]
  ------------------
   42|    988|                        {
   43|    988|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|    988|                        }
   45|    260|                        break;
   46|  1.24k|                    }
   47|    620|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 620, False: 2.46k]
  ------------------
   48|    620|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 285, False: 335]
  |  Branch (48:50): [True: 266, False: 69]
  ------------------
   49|    551|                        {
   50|    551|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    551|                        }
   52|     69|                        break;
   53|    620|                    }
   54|    490|                    default: {
  ------------------
  |  Branch (54:21): [True: 490, False: 2.59k]
  ------------------
   55|    490|                        break;
   56|    620|                    }
   57|  3.08k|                }
   58|  3.08k|            }
   59|  22.4k|        }
   60|       |
   61|  66.1k|        return IntRegisterID::None;
   62|  75.5k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  66.1k|    {
   66|  66.1k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 8.07k, False: 58.0k]
  ------------------
   67|  8.07k|        {
   68|  8.07k|            const char first_char = token[0u];
   69|  8.07k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 625, False: 7.45k]
  |  Branch (69:38): [True: 522, False: 6.93k]
  ------------------
   70|  1.14k|            {
   71|  1.14k|                const char second_char = token[1u];
   72|  1.14k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 695, False: 452]
  |  Branch (72:43): [True: 628, False: 67]
  ------------------
   73|    628|                {
   74|    628|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|    628|                }
   76|  1.14k|            }
   77|  8.07k|        }
   78|  58.0k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 20.4k, False: 37.6k]
  ------------------
   79|  20.4k|        {
   80|  20.4k|            const char first_char = token[0u];
   81|  20.4k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 3.34k, False: 17.0k]
  |  Branch (81:38): [True: 492, False: 16.5k]
  ------------------
   82|  3.83k|            {
   83|  3.83k|                const char second_char = token[1u];
   84|  3.83k|                const char third_char  = token[2u];
   85|       |
   86|  3.83k|                switch (second_char)
   87|  3.83k|                {
   88|    670|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 670, False: 3.16k]
  ------------------
   89|    670|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 469, False: 201]
  |  Branch (89:50): [True: 403, False: 66]
  ------------------
   90|    403|                        {
   91|    403|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|    403|                        }
   93|    267|                        break;
   94|    670|                    }
   95|  2.74k|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 2.74k, False: 1.09k]
  ------------------
   96|  2.74k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 2.67k, False: 68]
  |  Branch (96:50): [True: 2.60k, False: 66]
  ------------------
   97|  2.60k|                        {
   98|  2.60k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|  2.60k|                        }
  100|    134|                        break;
  101|  2.74k|                    }
  102|    229|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 229, False: 3.60k]
  ------------------
  103|    229|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 89, False: 140]
  |  Branch (103:50): [True: 72, False: 68]
  ------------------
  104|    161|                        {
  105|    161|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    161|                        }
  107|     68|                        break;
  108|    229|                    }
  109|    196|                    default: {
  ------------------
  |  Branch (109:21): [True: 196, False: 3.64k]
  ------------------
  110|    196|                        break;
  111|    229|                    }
  112|  3.83k|                }
  113|  3.83k|            }
  114|  20.4k|        }
  115|       |
  116|  62.3k|        return FloatRegisterID::None;
  117|  66.1k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|  76.1k|    {
  121|  76.1k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 22.8k, False: 53.2k]
  ------------------
  122|  22.8k|        {
  123|  22.8k|            const char c1 = token[0u];
  124|  22.8k|            const char c2 = token[1u];
  125|  22.8k|            const char c3 = token[2u];
  126|  22.8k|            const char c4 = token[3u];
  127|       |
  128|  22.8k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 1.38k, False: 21.5k]
  |  Branch (128:34): [True: 269, False: 21.2k]
  |  Branch (128:49): [True: 1.44k, False: 207]
  |  Branch (128:62): [True: 139, False: 68]
  ------------------
  129|  22.8k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 1.32k, False: 263]
  |  Branch (129:34): [True: 194, False: 69]
  |  Branch (129:49): [True: 1.32k, False: 194]
  |  Branch (129:62): [True: 0, False: 194]
  ------------------
  130|  22.8k|        }
  131|       |
  132|  53.2k|        return false;
  133|  76.1k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   130k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  49.5k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   248k|    {
   40|   248k|        return m_Type;
   41|   248k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|  78.1k|    {
   50|  78.1k|        return m_LineNumber;
   51|  78.1k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|  58.9k|    {
   55|  58.9k|        return m_Column;
   56|  58.9k|    }
_ZNK3dlx5Token7GetTextEv:
   64|  56.6k|    {
   65|  56.6k|        return m_Text;
   66|  56.6k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  21.1k|    {
   79|  21.1k|        return m_HasHint;
   80|  21.1k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  30.9k|    {
   84|  30.9k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  30.9k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  30.9k|                   m_Type == Type::ImmediateInteger);
   87|  30.9k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  30.9k|        return m_Hint;
   90|  30.9k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.04k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.04k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.04k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    197|    {
   50|    197|        return x + m_Iterator <= m_Tokens.size();
   51|    197|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   183k|    {
   55|   183k|        return m_Iterator < m_Tokens.size();
   56|   183k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   179k|    {
   60|   179k|        return m_Iterator >= m_Tokens.size();
   61|   179k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   179k|    {
   75|   179k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   179k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   179k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    195|    {
  155|    195|        return m_Iterator;
  156|    195|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    177|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    177|        return m_Tokens.rbegin();
  210|    177|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  1.59k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  1.59k|        return m_Tokens.rend();
  219|  1.59k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.04k|    {
   66|  4.04k|        TokenStream tokens;
   67|       |
   68|  4.04k|        phi::string_view current_token;
   69|       |
   70|  4.04k|        phi::u64 current_line_number{1u};
   71|  4.04k|        phi::u64 current_column{1u};
   72|  4.04k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.04k|        phi::boolean parsing_comment{false};
   75|       |
   76|   435k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 431k, False: 4.04k]
  ------------------
   77|   431k|        {
   78|   431k|            const char c{source.at(i)};
   79|       |
   80|   431k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 64.5k, False: 366k]
  ------------------
   81|  64.5k|            {
   82|  64.5k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 8.94k, False: 55.5k]
  ------------------
   83|  8.94k|                {
   84|       |                    // Skip empty lines
   85|  8.94k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  8.94k|                                        current_line_number, current_column);
   87|       |
   88|  8.94k|                    parsing_comment = false;
   89|  8.94k|                    current_line_number += 1u;
   90|  8.94k|                    current_column = 1u;
   91|  8.94k|                    continue;
   92|  8.94k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  55.5k|                tokens.emplace_back(ParseToken(
   96|  55.5k|                        source.substring_view(
   97|  55.5k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  55.5k|                                current_token.length()),
   99|  55.5k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  55.5k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  55.5k|                                    current_line_number, current_column);
  103|       |
  104|  55.5k|                current_token   = phi::string_view{};
  105|  55.5k|                parsing_comment = false;
  106|  55.5k|                current_line_number += 1u;
  107|  55.5k|                current_column = 0u;
  108|  55.5k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   366k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 542, False: 365k]
  |  Branch (110:34): [True: 28.8k, False: 337k]
  ------------------
  111|  29.3k|            {
  112|  29.3k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 28.1k, False: 1.21k]
  ------------------
  113|  28.1k|                {
  114|  28.1k|                    token_begin = i;
  115|  28.1k|                }
  116|  1.21k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 889, False: 322]
  ------------------
  117|    889|                {
  118|    889|                    tokens.emplace_back(ParseToken(
  119|    889|                            source.substring_view(
  120|    889|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|    889|                                    current_token.length()),
  122|    889|                            current_line_number, current_column - current_token.length()));
  123|    889|                    token_begin   = i;
  124|    889|                    current_token = phi::string_view{};
  125|    889|                }
  126|       |
  127|  29.3k|                parsing_comment = true;
  128|  29.3k|                current_token   = source.substring_view(
  129|  29.3k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  29.3k|                        current_token.length() + 1u);
  131|  29.3k|            }
  132|   337k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 45.4k, False: 291k]
  ------------------
  133|  45.4k|            {
  134|       |                // simply append the character
  135|  45.4k|                current_token = source.substring_view(
  136|  45.4k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  45.4k|                        current_token.length() + 1u);
  138|  45.4k|            }
  139|   291k|            else
  140|   291k|            {
  141|       |                // Not parsing a comment
  142|   291k|                switch (c)
  143|   291k|                {
  144|  28.9k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 28.9k, False: 262k]
  ------------------
  145|  29.7k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 861, False: 290k]
  ------------------
  146|  31.0k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 1.26k, False: 290k]
  ------------------
  147|  31.0k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 475, False: 30.5k]
  ------------------
  148|    475|                        {
  149|    475|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    475|                            continue;
  152|    475|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  30.5k|                        tokens.emplace_back(ParseToken(
  156|  30.5k|                                source.substring_view(
  157|  30.5k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  30.5k|                                        current_token.length()),
  159|  30.5k|                                current_line_number, current_column - current_token.length()));
  160|  30.5k|                        current_token = phi::string_view{};
  161|  30.5k|                        break;
  162|  5.33k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 5.33k, False: 286k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  5.33k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 4.32k, False: 1.01k]
  ------------------
  165|  4.32k|                        {
  166|  4.32k|                            current_token = source.substring_view(
  167|  4.32k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  4.32k|                                    current_token.length() + 1u);
  169|  4.32k|                            tokens.emplace_back(ParseToken(
  170|  4.32k|                                    source.substring_view(
  171|  4.32k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  4.32k|                                                    token_begin),
  173|  4.32k|                                            current_token.length()),
  174|  4.32k|                                    current_line_number,
  175|  4.32k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  4.32k|                            current_token = phi::string_view{};
  178|  4.32k|                        }
  179|  1.01k|                        else
  180|  1.01k|                        {
  181|       |                            // Orphan colon
  182|  1.01k|                            token_begin = i;
  183|       |
  184|  1.01k|                            tokens.emplace_back(
  185|  1.01k|                                    Token::Type::Colon,
  186|  1.01k|                                    source.substring_view(
  187|  1.01k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  1.01k|                                                    token_begin),
  189|  1.01k|                                            1u),
  190|  1.01k|                                    current_line_number, current_column);
  191|  1.01k|                        }
  192|  5.33k|                        break;
  193|  9.54k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 9.54k, False: 282k]
  ------------------
  194|  10.4k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 866, False: 290k]
  ------------------
  195|  11.0k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 689, False: 290k]
  ------------------
  196|  11.0k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 9.69k, False: 1.40k]
  ------------------
  197|  9.69k|                        {
  198|  9.69k|                            tokens.emplace_back(ParseToken(
  199|  9.69k|                                    source.substring_view(
  200|  9.69k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  9.69k|                                                    token_begin),
  202|  9.69k|                                            current_token.length()),
  203|  9.69k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  9.69k|                            current_token = phi::string_view{};
  206|  9.69k|                        }
  207|       |
  208|  11.0k|                        Token::Type type;
  209|  11.0k|                        switch (c)
  210|  11.0k|                        {
  211|  9.54k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 9.54k, False: 1.55k]
  ------------------
  212|  9.54k|                                type = Token::Type::Comma;
  213|  9.54k|                                break;
  214|    866|                            case '(':
  ------------------
  |  Branch (214:29): [True: 866, False: 10.2k]
  ------------------
  215|    866|                                type = Token::Type::OpenBracket;
  216|    866|                                break;
  217|    689|                            case ')':
  ------------------
  |  Branch (217:29): [True: 689, False: 10.4k]
  ------------------
  218|    689|                                type = Token::Type::ClosingBracket;
  219|    689|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 11.0k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  11.0k|#endif
  225|  11.0k|                        }
  226|       |
  227|  11.0k|                        token_begin = i;
  228|       |
  229|  11.0k|                        tokens.emplace_back(
  230|  11.0k|                                type,
  231|  11.0k|                                source.substring_view(
  232|  11.0k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  11.0k|                                        1u),
  234|  11.0k|                                current_line_number, current_column);
  235|  11.0k|                        break;
  236|       |
  237|   244k|                    default:
  ------------------
  |  Branch (237:21): [True: 244k, False: 47.4k]
  ------------------
  238|   244k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 73.9k, False: 170k]
  ------------------
  239|  73.9k|                        {
  240|  73.9k|                            token_begin = i;
  241|  73.9k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   244k|                        current_token = source.substring_view(
  245|   244k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   244k|                                current_token.length() + 1u);
  247|   291k|                }
  248|   291k|            }
  249|       |
  250|   421k|            current_column += 1u;
  251|   421k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.04k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 1.96k, False: 2.08k]
  ------------------
  255|  1.96k|        {
  256|  1.96k|            tokens.emplace_back(
  257|  1.96k|                    ParseToken(source.substring_view(
  258|  1.96k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  1.96k|                                       current_token.length()),
  260|  1.96k|                               current_line_number, current_column - current_token.length()));
  261|  1.96k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.04k|        tokens.finalize();
  265|       |
  266|  4.04k|        return tokens;
  267|  4.04k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   103k|    {
   14|   103k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 2.32k, False: 100k]
  |  Branch (14:13): [True: 2.23k, False: 100k]
  |  Branch (14:36): [True: 2.23k, False: 82]
  ------------------
   15|  2.23k|        {
   16|  2.23k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  2.23k|            if (number)
  ------------------
  |  Branch (18:17): [True: 1.76k, False: 470]
  ------------------
   19|  1.76k|            {
   20|  1.76k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  1.76k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  1.76k|            }
   23|       |
   24|    470|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  2.23k|        }
   26|       |
   27|   100k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 277, False: 100k]
  |  Branch (27:13): [True: 29.0k, False: 71.7k]
  |  Branch (27:36): [True: 28.7k, False: 71.7k]
  ------------------
   28|  29.0k|        {
   29|  29.0k|            return {Token::Type::Comment, token, line_number, column};
   30|  29.0k|        }
   31|       |
   32|  71.7k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 1.67k, False: 70.0k]
  ------------------
   33|  1.67k|        {
   34|  1.67k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  1.67k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  1.67k|        }
   37|       |
   38|  70.0k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 1.32k, False: 68.7k]
  ------------------
   39|  1.32k|        {
   40|  1.32k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  1.32k|        }
   42|       |
   43|  68.7k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 9.22k, False: 59.5k]
  ------------------
   44|  9.22k|        {
   45|  9.22k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  9.22k|                    static_cast<phi::uint32_t>(id)};
   47|  9.22k|        }
   48|       |
   49|  59.5k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 3.73k, False: 55.7k]
  ------------------
   50|  3.73k|        {
   51|  3.73k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  3.73k|                    static_cast<phi::uint32_t>(id)};
   53|  3.73k|        }
   54|       |
   55|  55.7k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 33.1k, False: 22.5k]
  ------------------
   56|  33.1k|        {
   57|  33.1k|            return {Token::Type::OpCode, token, line_number, column,
   58|  33.1k|                    static_cast<phi::uint32_t>(opcode)};
   59|  33.1k|        }
   60|       |
   61|  22.5k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  55.7k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   58|  4.04k|    {
   59|       |        // Constants
   60|  4.04k|        constexpr phi::uint8_t number_of_opcodes =
   61|  4.04k|                static_cast<phi::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   62|  4.04k|        constexpr phi::uint8_t number_of_int_registers   = 32;
   63|  4.04k|        constexpr phi::uint8_t number_of_float_registers = 32;
   64|       |
   65|  4.04k|        std::string ret;
   66|       |
   67|  86.2k|        for (phi::size_t index{0}; index < size;)
  ------------------
  |  Branch (67:36): [True: 82.1k, False: 4.04k]
  ------------------
   68|  82.1k|        {
   69|  82.1k|            phi::uint8_t current_value = data[index++];
   70|       |
   71|  82.1k|            switch (current_value)
   72|  82.1k|            {
   73|       |                // OpCode
   74|  23.5k|                case 0: {
  ------------------
  |  Branch (74:17): [True: 23.5k, False: 58.6k]
  ------------------
   75|       |                    // Has one more value
   76|  23.5k|                    if (index < size)
  ------------------
  |  Branch (76:25): [True: 23.5k, False: 2]
  ------------------
   77|  23.5k|                    {
   78|  23.5k|                        phi::uint8_t opcode_value = data[index++] % number_of_opcodes;
   79|       |
   80|  23.5k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   81|       |
   82|  23.5k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (82:29): [True: 1, False: 23.4k]
  ------------------
   83|      1|                        {
   84|      1|                            return detail::ErrorString;
   85|      1|                        }
   86|  23.5k|                    }
   87|  23.5k|                    break;
   88|  23.5k|                }
   89|       |
   90|       |                // Int Register
   91|  23.5k|                case 1: {
  ------------------
  |  Branch (91:17): [True: 9.27k, False: 72.9k]
  ------------------
   92|       |                    // Has one more value
   93|  9.27k|                    if (index < size)
  ------------------
  |  Branch (93:25): [True: 9.26k, False: 2]
  ------------------
   94|  9.26k|                    {
   95|  9.26k|                        phi::uint8_t opcode_value = data[index++] % number_of_int_registers;
   96|       |
   97|  9.26k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   98|  9.26k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (98:29): [True: 1, False: 9.26k]
  ------------------
   99|      1|                        {
  100|      1|                            return detail::ErrorString;
  101|      1|                        }
  102|  9.26k|                    }
  103|  9.27k|                    break;
  104|  9.27k|                }
  105|       |
  106|       |                // Float register
  107|  9.27k|                case 2: {
  ------------------
  |  Branch (107:17): [True: 3.77k, False: 78.4k]
  ------------------
  108|       |                    // Has one more value
  109|  3.77k|                    if (index < size)
  ------------------
  |  Branch (109:25): [True: 3.77k, False: 1]
  ------------------
  110|  3.77k|                    {
  111|  3.77k|                        phi::uint8_t opcode_value = data[index++] % number_of_float_registers;
  112|       |
  113|  3.77k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  114|  3.77k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (114:29): [True: 1, False: 3.77k]
  ------------------
  115|      1|                        {
  116|      1|                            return detail::ErrorString;
  117|      1|                        }
  118|  3.77k|                    }
  119|  3.77k|                    break;
  120|  3.77k|                }
  121|       |
  122|       |                // Floating point status register
  123|  3.77k|                case 3: {
  ------------------
  |  Branch (123:17): [True: 1.46k, False: 80.7k]
  ------------------
  124|  1.46k|                    ret += "FPSR";
  125|  1.46k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (125:25): [True: 2, False: 1.46k]
  ------------------
  126|      2|                    {
  127|      2|                        return detail::ErrorString;
  128|      2|                    }
  129|       |
  130|  1.46k|                    break;
  131|  1.46k|                }
  132|       |
  133|       |                // Immediate integer
  134|  2.87k|                case 4: {
  ------------------
  |  Branch (134:17): [True: 2.87k, False: 79.3k]
  ------------------
  135|  2.87k|                    ret += "#";
  136|  2.87k|                    [[fallthrough]];
  137|  2.87k|                }
  138|       |
  139|       |                // Integer literal
  140|  5.49k|                case 5: {
  ------------------
  |  Branch (140:17): [True: 2.61k, False: 79.5k]
  ------------------
  141|  5.49k|                    phi::size_t size_of_int = std::min(2ul, size - index);
  142|       |
  143|  5.49k|                    if (size_of_int > 0)
  ------------------
  |  Branch (143:25): [True: 5.45k, False: 36]
  ------------------
  144|  5.45k|                    {
  145|  5.45k|                        phi::int16_t value = 0;
  146|       |
  147|  16.2k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (147:32): [True: 10.7k, False: 5.45k]
  ------------------
  148|  10.7k|                        {
  149|  10.7k|                            value <<= 8;
  150|  10.7k|                            value &= data[index++];
  151|  10.7k|                        }
  152|       |
  153|  5.45k|                        ret += std::to_string(value);
  154|  5.45k|                    }
  155|  5.49k|                    break;
  156|  2.87k|                }
  157|       |
  158|       |                // Label
  159|  2.87k|                case 6: {
  ------------------
  |  Branch (159:17): [True: 2.87k, False: 79.3k]
  ------------------
  160|  2.87k|                    phi::size_t label_length = std::min(5ul, size - index);
  161|       |
  162|  2.87k|                    if (label_length > 0)
  ------------------
  |  Branch (162:25): [True: 2.86k, False: 2]
  ------------------
  163|  2.86k|                    {
  164|  2.86k|                        std::string label_name = "lbl_";
  165|       |
  166|  16.9k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (166:32): [True: 14.0k, False: 2.86k]
  ------------------
  167|  14.0k|                        {
  168|  14.0k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  169|       |
  170|  14.0k|                            label_name += c;
  171|  14.0k|                        }
  172|       |
  173|       |                        // Add 1 in 10 chance to add a colon
  174|  2.86k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (174:29): [True: 2.52k, False: 339]
  |  Branch (174:45): [True: 2.04k, False: 485]
  ------------------
  175|  2.04k|                        {
  176|  2.04k|                            label_name += ':';
  177|  2.04k|                            ret += label_name;
  178|  2.04k|                        }
  179|    824|                        else
  180|    824|                        {
  181|    824|                            ret += label_name;
  182|    824|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (182:33): [True: 1, False: 823]
  ------------------
  183|      1|                            {
  184|      1|                                return detail::ErrorString;
  185|      1|                            }
  186|    824|                        }
  187|  2.86k|                    }
  188|  2.86k|                    break;
  189|  2.87k|                }
  190|       |
  191|       |                // Newline
  192|  7.07k|                case 7: {
  ------------------
  |  Branch (192:17): [True: 7.07k, False: 75.1k]
  ------------------
  193|  7.07k|                    ret += '\n';
  194|  7.07k|                    break;
  195|  2.87k|                }
  196|       |
  197|       |                // Comment
  198|  28.7k|                case 8: {
  ------------------
  |  Branch (198:17): [True: 28.7k, False: 53.4k]
  ------------------
  199|  28.7k|                    phi::size_t comment_length = std::min(5ul, size - index);
  200|       |
  201|  28.7k|                    if (comment_length > 0)
  ------------------
  |  Branch (201:25): [True: 28.7k, False: 5]
  ------------------
  202|  28.7k|                    {
  203|  28.7k|                        std::string comment = "; ";
  204|       |
  205|   170k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (205:32): [True: 142k, False: 28.7k]
  ------------------
  206|   142k|                        {
  207|   142k|                            comment += static_cast<char>(data[index++]);
  208|   142k|                        }
  209|       |
  210|  28.7k|                        ret += comment + '\n';
  211|  28.7k|                    }
  212|  28.7k|                    break;
  213|  2.87k|                }
  214|       |
  215|       |                // Ignore
  216|      2|                default:
  ------------------
  |  Branch (216:17): [True: 2, False: 82.1k]
  ------------------
  217|      2|                    return detail::ErrorString;
  218|  82.1k|            }
  219|  82.1k|        }
  220|       |
  221|  4.04k|        return ret;
  222|  4.04k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   23|  38.8k|        {
   24|  38.8k|            if (index < size)
  ------------------
  |  Branch (24:17): [True: 37.0k, False: 1.78k]
  ------------------
   25|  37.0k|            {
   26|  37.0k|                phi::uint8_t val = data[index++];
   27|  37.0k|                if (val == 0)
  ------------------
  |  Branch (27:21): [True: 28.7k, False: 8.25k]
  ------------------
   28|  28.7k|                {
   29|  28.7k|                    text += ' ';
   30|  28.7k|                }
   31|  8.25k|                else if (val == 1)
  ------------------
  |  Branch (31:26): [True: 8.24k, False: 6]
  ------------------
   32|  8.24k|                {
   33|  8.24k|                    text += ',';
   34|  8.24k|                }
   35|      6|                else
   36|      6|                {
   37|      6|                    return false;
   38|      6|                }
   39|  37.0k|            }
   40|       |
   41|  38.8k|            return true;
   42|  38.8k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   47|  14.0k|        {
   48|  14.0k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (48:17): [True: 10.1k, False: 3.90k]
  ------------------
   49|  10.1k|            {
   50|  10.1k|                return '_';
   51|  10.1k|            }
   52|       |
   53|  3.90k|            return c;
   54|  14.0k|        }

LLVMFuzzerTestOneInput:
   11|  4.04k|{
   12|  4.04k|    static dlx::Processor processor;
   13|       |
   14|  4.04k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|       |    // Parse it
   17|  4.04k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   18|       |
   19|       |    // Clear registers and memory
   20|  4.04k|    processor.ClearRegisters();
   21|  4.04k|    processor.ClearMemory();
   22|       |
   23|       |    // Execute
   24|  4.04k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (24:9): [True: 974, False: 3.07k]
  ------------------
   25|    974|    {
   26|    974|        processor.ExecuteCurrentProgram();
   27|    974|    }
   28|       |
   29|  4.04k|    return 0;
   30|  4.04k|}


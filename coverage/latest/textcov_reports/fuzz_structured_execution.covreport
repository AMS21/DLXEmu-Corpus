_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   125k|        {
  169|   125k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   125k|            switch (index.unsafe())
  172|   125k|            {
  173|  51.0k|                case 0:
  ------------------
  |  Branch (173:17): [True: 51.0k, False: 74.5k]
  ------------------
  174|  51.0k|                    return m_Arg1Type;
  175|       |
  176|  38.2k|                case 1:
  ------------------
  |  Branch (176:17): [True: 38.2k, False: 87.3k]
  ------------------
  177|  38.2k|                    return m_Arg2Type;
  178|       |
  179|  36.3k|                case 2:
  ------------------
  |  Branch (179:17): [True: 36.3k, False: 89.2k]
  ------------------
  180|  36.3k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 125k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   125k|#endif
  187|   125k|            }
  188|   125k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  32.4k|        {
  195|  32.4k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  32.4k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 31.0k, False: 1.40k]
  ------------------
  199|  31.0k|            {
  200|  31.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  31.0k|            }
  202|  32.4k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 24.0k, False: 8.43k]
  ------------------
  203|  24.0k|            {
  204|  24.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  24.0k|            }
  206|  32.4k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 15.8k, False: 16.6k]
  ------------------
  207|  15.8k|            {
  208|  15.8k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  15.8k|            }
  210|       |
  211|  32.4k|            return number_of_argument_required;
  212|  32.4k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  4.79M|        {
  216|  4.79M|            return m_RegisterAccessType;
  217|  4.79M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  32.4k|        {
  221|  32.4k|            return m_Executor;
  222|  32.4k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  14.3M|    {
   38|  14.3M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  14.3M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  14.3M|                                         static_cast<underlying_t>(rhs));
   42|  14.3M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  14.3M|    {
   55|  14.3M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  14.3M|        return static_cast<underlying_t>(type & test) != 0;
   58|  14.3M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|  74.4k|    {
  205|  74.4k|        switch (value)
  206|  74.4k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  17.3k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  17.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.3k, False: 57.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.3k|        return #name;
  |  |  ------------------
  |  |   16|  17.3k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.01k, False: 72.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.01k|        return #name;
  |  |  ------------------
  |  |   17|  2.01k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    494|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 494, False: 73.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    494|        return #name;
  |  |  ------------------
  |  |   18|    533|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    533|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 533, False: 73.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    533|        return #name;
  |  |  ------------------
  |  |   19|  1.82k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.82k, False: 72.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.82k|        return #name;
  |  |  ------------------
  |  |   20|  1.82k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    850|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 850, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    850|        return #name;
  |  |  ------------------
  |  |   21|    850|                                                                                                   \
  |  |   22|    850|    /* Sub */                                                                                      \
  |  |   23|  1.60k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.60k, False: 72.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.60k|        return #name;
  |  |  ------------------
  |  |   24|  1.60k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    247|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 247, False: 74.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    247|        return #name;
  |  |  ------------------
  |  |   25|  1.35k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.35k, False: 73.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.35k|        return #name;
  |  |  ------------------
  |  |   26|  1.35k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    117|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 117, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    117|        return #name;
  |  |  ------------------
  |  |   27|    706|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    706|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 706, False: 73.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    706|        return #name;
  |  |  ------------------
  |  |   28|    706|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    358|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 358, False: 74.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    358|        return #name;
  |  |  ------------------
  |  |   29|    358|                                                                                                   \
  |  |   30|    358|    /* Multiplication */                                                                           \
  |  |   31|  2.59k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.59k, False: 71.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.59k|        return #name;
  |  |  ------------------
  |  |   32|  2.59k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 229, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    229|        return #name;
  |  |  ------------------
  |  |   33|    637|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    637|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 637, False: 73.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    637|        return #name;
  |  |  ------------------
  |  |   34|    637|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    171|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 171, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    171|        return #name;
  |  |  ------------------
  |  |   35|    959|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    959|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 959, False: 73.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    959|        return #name;
  |  |  ------------------
  |  |   36|    959|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |   37|    111|                                                                                                   \
  |  |   38|    111|    /* Division */                                                                                 \
  |  |   39|    111|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   40|     86|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |   41|    120|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    120|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 120, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    120|        return #name;
  |  |  ------------------
  |  |   42|    567|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    567|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 567, False: 73.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    567|        return #name;
  |  |  ------------------
  |  |   43|    567|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 87, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     87|        return #name;
  |  |  ------------------
  |  |   44|    112|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    112|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 112, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    112|        return #name;
  |  |  ------------------
  |  |   45|    112|                                                                                                   \
  |  |   46|    112|    /* Shift left (logical) */                                                                     \
  |  |   47|    405|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    405|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 405, False: 74.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    405|        return #name;
  |  |  ------------------
  |  |   48|    405|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 224, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    224|        return #name;
  |  |  ------------------
  |  |   49|    224|                                                                                                   \
  |  |   50|    224|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.37k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.37k, False: 73.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.37k|        return #name;
  |  |  ------------------
  |  |   52|  1.72k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.72k, False: 72.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.72k|        return #name;
  |  |  ------------------
  |  |   53|  1.72k|                                                                                                   \
  |  |   54|  1.72k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.72k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    267|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 267, False: 74.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    267|        return #name;
  |  |  ------------------
  |  |   56|    267|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |   57|     98|                                                                                                   \
  |  |   58|     98|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    116|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    116|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 116, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    116|        return #name;
  |  |  ------------------
  |  |   60|    227|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    227|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 227, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    227|        return #name;
  |  |  ------------------
  |  |   61|    227|                                                                                                   \
  |  |   62|    227|    /* Logic */                                                                                    \
  |  |   63|    227|                                                                                                   \
  |  |   64|    227|    /* And */                                                                                      \
  |  |   65|    227|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 87, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     87|        return #name;
  |  |  ------------------
  |  |   66|    741|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    741|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 741, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    741|        return #name;
  |  |  ------------------
  |  |   67|    741|                                                                                                   \
  |  |   68|    741|    /* Or */                                                                                       \
  |  |   69|    741|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |   70|     85|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |   71|     85|                                                                                                   \
  |  |   72|     85|    /* XOR */                                                                                      \
  |  |   73|    318|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    318|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 318, False: 74.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    318|        return #name;
  |  |  ------------------
  |  |   74|    774|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    774|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 774, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    774|        return #name;
  |  |  ------------------
  |  |   75|    774|                                                                                                   \
  |  |   76|    774|    /* Set conditionals */                                                                         \
  |  |   77|    774|                                                                                                   \
  |  |   78|    774|    /* Less than */                                                                                \
  |  |   79|    774|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |   80|    862|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    862|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 862, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    862|        return #name;
  |  |  ------------------
  |  |   81|    862|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |   82|    108|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 108, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    108|        return #name;
  |  |  ------------------
  |  |   83|    108|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |   84|    126|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    126|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 126, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    126|        return #name;
  |  |  ------------------
  |  |   85|    126|                                                                                                   \
  |  |   86|    126|    /* Greater than */                                                                             \
  |  |   87|    210|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 210, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    210|        return #name;
  |  |  ------------------
  |  |   88|    210|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 91, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     91|        return #name;
  |  |  ------------------
  |  |   89|  1.89k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.89k, False: 72.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.89k|        return #name;
  |  |  ------------------
  |  |   90|  1.89k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   91|    526|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    526|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 526, False: 73.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    526|        return #name;
  |  |  ------------------
  |  |   92|  2.24k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.24k, False: 72.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.24k|        return #name;
  |  |  ------------------
  |  |   93|  2.24k|                                                                                                   \
  |  |   94|  2.24k|    /* Less than or equal */                                                                       \
  |  |   95|  2.24k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    190|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 190, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    190|        return #name;
  |  |  ------------------
  |  |   96|    215|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    215|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 215, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    215|        return #name;
  |  |  ------------------
  |  |   97|    215|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    115|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 115, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    115|        return #name;
  |  |  ------------------
  |  |   98|    384|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    384|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 384, False: 74.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    384|        return #name;
  |  |  ------------------
  |  |   99|    384|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    104|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 104, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    104|        return #name;
  |  |  ------------------
  |  |  100|    915|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    915|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 915, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    915|        return #name;
  |  |  ------------------
  |  |  101|    915|                                                                                                   \
  |  |  102|    915|    /* Greater than or equal */                                                                    \
  |  |  103|    915|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    800|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 800, False: 73.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    800|        return #name;
  |  |  ------------------
  |  |  104|  1.49k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.49k, False: 72.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.49k|        return #name;
  |  |  ------------------
  |  |  105|  1.49k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    133|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 133, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    133|        return #name;
  |  |  ------------------
  |  |  106|    615|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    615|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 615, False: 73.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    615|        return #name;
  |  |  ------------------
  |  |  107|    615|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  108|     97|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |  109|     97|                                                                                                   \
  |  |  110|     97|    /* Equal */                                                                                    \
  |  |  111|     97|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 87, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     87|        return #name;
  |  |  ------------------
  |  |  112|    552|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    552|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 552, False: 73.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    552|        return #name;
  |  |  ------------------
  |  |  113|  1.98k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.98k, False: 72.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.98k|        return #name;
  |  |  ------------------
  |  |  114|  1.98k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    482|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 482, False: 73.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    482|        return #name;
  |  |  ------------------
  |  |  115|  1.03k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.03k, False: 73.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.03k|        return #name;
  |  |  ------------------
  |  |  116|  1.03k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  117|     79|                                                                                                   \
  |  |  118|     79|    /* Not equal */                                                                                \
  |  |  119|  1.80k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.80k, False: 72.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.80k|        return #name;
  |  |  ------------------
  |  |  120|  1.80k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 91, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     91|        return #name;
  |  |  ------------------
  |  |  121|    103|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |  122|    191|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    191|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 191, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    191|        return #name;
  |  |  ------------------
  |  |  123|    191|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |  124|    102|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  125|     83|                                                                                                   \
  |  |  126|     83|    /* Conditional branching */                                                                    \
  |  |  127|    102|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |  128|    102|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |  129|    114|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 114, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    114|        return #name;
  |  |  ------------------
  |  |  130|  3.18k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.18k, False: 71.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.18k|        return #name;
  |  |  ------------------
  |  |  131|  3.18k|                                                                                                   \
  |  |  132|  3.18k|    /* Unconditional branching */                                                                  \
  |  |  133|  3.18k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|    559|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 559, False: 73.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    559|        return #name;
  |  |  ------------------
  |  |  134|    559|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |  135|  1.06k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.06k, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.06k|        return #name;
  |  |  ------------------
  |  |  136|  1.06k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    575|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 575, False: 73.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    575|        return #name;
  |  |  ------------------
  |  |  137|    575|                                                                                                   \
  |  |  138|    575|    /* Loading data */                                                                             \
  |  |  139|    860|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    860|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 860, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    860|        return #name;
  |  |  ------------------
  |  |  140|    860|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 73, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     73|        return #name;
  |  |  ------------------
  |  |  141|     73|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  142|     70|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  143|    507|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    507|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 507, False: 73.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    507|        return #name;
  |  |  ------------------
  |  |  144|  1.57k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.57k, False: 72.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.57k|        return #name;
  |  |  ------------------
  |  |  145|  1.57k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  146|     67|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  147|    195|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 195, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    195|        return #name;
  |  |  ------------------
  |  |  148|    195|                                                                                                   \
  |  |  149|    195|    /* Storing data */                                                                             \
  |  |  150|    709|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    709|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 709, False: 73.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    709|        return #name;
  |  |  ------------------
  |  |  151|    709|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  152|     71|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 68, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     68|        return #name;
  |  |  ------------------
  |  |  153|    450|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    450|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 450, False: 73.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    450|        return #name;
  |  |  ------------------
  |  |  154|    450|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  155|    879|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    879|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 879, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    879|        return #name;
  |  |  ------------------
  |  |  156|  1.06k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.06k, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.06k|        return #name;
  |  |  ------------------
  |  |  157|  1.06k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  158|     70|                                                                                                   \
  |  |  159|     70|    /* Moving data */                                                                              \
  |  |  160|    219|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    219|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 219, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    219|        return #name;
  |  |  ------------------
  |  |  161|    219|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 92, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     92|        return #name;
  |  |  ------------------
  |  |  162|    390|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    390|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 390, False: 74.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    390|        return #name;
  |  |  ------------------
  |  |  163|  1.12k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|  1.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.12k, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.12k|        return #name;
  |  |  ------------------
  |  |  164|  1.12k|                                                                                                   \
  |  |  165|  1.12k|    /* Converting data */                                                                          \
  |  |  166|  1.12k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  167|     95|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     95|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 95, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     95|        return #name;
  |  |  ------------------
  |  |  168|     95|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |  169|    154|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    154|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 154, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    154|        return #name;
  |  |  ------------------
  |  |  170|    154|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  171|    122|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 122, False: 74.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    122|        return #name;
  |  |  ------------------
  |  |  172|    122|                                                                                                   \
  |  |  173|    122|    /* Other */                                                                                    \
  |  |  174|    382|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    382|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 382, False: 74.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    382|        return #name;
  |  |  ------------------
  |  |  175|    382|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 198, False: 74.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    198|        return #name;
  |  |  ------------------
  |  |  176|    900|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|    900|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 900, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    900|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 74.4k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|  74.4k|        }
  218|  74.4k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  10.3k|    {
   32|  10.3k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 131, False: 10.1k]
  ------------------
   33|    131|        {
   34|    131|            return true;
   35|    131|        }
   36|       |
   37|  10.1k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 71, False: 10.1k]
  ------------------
   38|     71|        {
   39|     71|            return true;
   40|     71|        }
   41|       |
   42|  10.1k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 533, False: 9.57k]
  ------------------
   43|    533|        {
   44|    533|            return true;
   45|    533|        }
   46|       |
   47|  9.57k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 9.57k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  9.57k|        return false;
   53|  9.57k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  9.57k|    {
   57|  9.57k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 9.57k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  9.57k|        const char first_char = token.at(0);
   63|       |
   64|  9.57k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 925, False: 8.64k]
  ------------------
   65|    925|        {
   66|    925|            return phi::is_alpha(first_char);
   67|    925|        }
   68|       |
   69|  8.64k|        phi::boolean just_under_scores = (first_char == '_');
   70|  8.64k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 1.01k, False: 7.63k]
  |  Branch (70:15): [True: 7.46k, False: 1.17k]
  |  Branch (70:44): [True: 164, False: 1.01k]
  ------------------
   71|  1.01k|        {
   72|  1.01k|            return false;
   73|  1.01k|        }
   74|       |
   75|  51.8k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 46.4k, False: 5.40k]
  ------------------
   76|  46.4k|        {
   77|  46.4k|            const char c{token.at(index)};
   78|       |
   79|  46.4k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 18.1k, False: 28.3k]
  ------------------
   80|  18.1k|            {
   81|  18.1k|                just_under_scores = false;
   82|  18.1k|            }
   83|  28.3k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 26.1k, False: 2.23k]
  ------------------
   84|  26.1k|            {
   85|  26.1k|                continue;
   86|  26.1k|            }
   87|  2.23k|            else
   88|  2.23k|            {
   89|  2.23k|                return false;
   90|  2.23k|            }
   91|  46.4k|        }
   92|       |
   93|  5.40k|        return !just_under_scores;
   94|  7.63k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   171k|    {
  101|   171k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 171k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   171k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 11.3k, False: 160k]
  ------------------
  107|  11.3k|        {
  108|  11.3k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 5.36k, False: 5.96k]
  ------------------
  109|  5.36k|            {
  110|  5.36k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  5.36k|            }
  112|       |
  113|  5.96k|            return {};
  114|  11.3k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   160k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 101, False: 160k]
  ------------------
  118|    101|        {
  119|    101|            return {};
  120|    101|        }
  121|       |
  122|   160k|        std::int32_t number{0};
  123|   160k|        phi::boolean is_negative{false};
  124|   160k|        phi::boolean starts_with_zero{false};
  125|   160k|        phi::boolean parsing_binary{false};
  126|   160k|        phi::boolean parsing_octal{false};
  127|   160k|        phi::boolean parsing_hexadecimal{false};
  128|   160k|        phi::boolean parsed_something{false};
  129|   160k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   179k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 177k, False: 1.85k]
  ------------------
  134|   177k|        {
  135|   177k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   177k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 160k, False: 17.3k]
  ------------------
  139|   160k|            {
  140|   160k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 66, False: 160k]
  ------------------
  141|     66|                {
  142|     66|                    continue;
  143|     66|                }
  144|       |
  145|   160k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 235, False: 160k]
  ------------------
  146|    235|                {
  147|    235|                    is_negative = true;
  148|    235|                    continue;
  149|    235|                }
  150|       |
  151|   160k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 8.22k, False: 151k]
  ------------------
  152|  8.22k|                {
  153|  8.22k|                    starts_with_zero = true;
  154|  8.22k|                    continue;
  155|  8.22k|                }
  156|       |
  157|   151k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 66, False: 151k]
  ------------------
  158|     66|                {
  159|     66|                    return {};
  160|     66|                }
  161|   151k|            }
  162|       |
  163|       |            // Second character
  164|   169k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 8.79k, False: 160k]
  ------------------
  165|  8.79k|            {
  166|  8.79k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 8.22k, False: 566]
  ------------------
  167|  8.22k|                {
  168|       |                    // Binary
  169|  8.22k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 862, False: 7.36k]
  |  Branch (169:37): [True: 549, False: 6.81k]
  ------------------
  170|  1.41k|                    {
  171|  1.41k|                        parsing_binary = true;
  172|  1.41k|                        continue;
  173|  1.41k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  6.81k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.20k, False: 4.60k]
  |  Branch (176:37): [True: 285, False: 4.31k]
  ------------------
  177|  2.49k|                    {
  178|  2.49k|                        parsing_hexadecimal = true;
  179|  2.49k|                        continue;
  180|  2.49k|                    }
  181|       |
  182|       |                    // Octal
  183|  4.31k|                    parsing_octal = true;
  184|  4.31k|                }
  185|  8.79k|            }
  186|       |
  187|       |            // Handle seperators
  188|   165k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 139, False: 165k]
  ------------------
  189|    139|            {
  190|    139|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 73]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     73|                parsed_separator = true;
  196|     73|                continue;
  197|    139|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   165k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 245, False: 164k]
  |  Branch (200:32): [True: 0, False: 245]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   165k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 164k, False: 245]
  |  Branch (205:17): [True: 0, False: 165k]
  |  Branch (205:33): [True: 0, False: 164k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   165k|            parsed_separator = false;
  212|   165k|            parsed_something = true;
  213|       |
  214|   165k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 1.95k, False: 163k]
  ------------------
  215|  1.95k|            {
  216|  1.95k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 617, False: 1.33k]
  ------------------
  217|    617|                {
  218|    617|                    return {};
  219|    617|                }
  220|       |
  221|  1.33k|                number <<= 1;
  222|  1.33k|                number |= (c - '0');
  223|  1.33k|            }
  224|   163k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 6.31k, False: 156k]
  ------------------
  225|  6.31k|            {
  226|  6.31k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 3.96k, False: 2.34k]
  ------------------
  227|  3.96k|                {
  228|  3.96k|                    return {};
  229|  3.96k|                }
  230|       |
  231|  2.34k|                number <<= 3;
  232|  2.34k|                number |= (c - '0');
  233|  2.34k|            }
  234|   156k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 4.33k, False: 152k]
  ------------------
  235|  4.33k|            {
  236|  4.33k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.96k, False: 2.37k]
  ------------------
  237|  1.96k|                {
  238|  1.96k|                    return {};
  239|  1.96k|                }
  240|       |
  241|  2.37k|                number <<= 4;
  242|  2.37k|                number |= phi::hex_digit_value(c).unsafe();
  243|  2.37k|            }
  244|   152k|            else
  245|   152k|            {
  246|   152k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 151k, False: 749]
  ------------------
  247|   151k|                {
  248|   151k|                    return {};
  249|   151k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|    749|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 403, False: 346]
  |  Branch (252:36): [True: 66, False: 337]
  ------------------
  253|     66|                {
  254|     66|                    return {};
  255|     66|                }
  256|       |
  257|    683|                number *= 10;
  258|    683|                number += (c - '0');
  259|    683|            }
  260|   165k|        }
  261|       |
  262|  1.85k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.60k, False: 248]
  ------------------
  263|  1.60k|        {
  264|       |            // Check for over/underflow
  265|  1.60k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 66, False: 1.53k]
  |  Branch (265:32): [True: 0, False: 66]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  1.60k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 1.53k, False: 66]
  |  Branch (270:17): [True: 0, False: 1.60k]
  |  Branch (270:33): [True: 0, False: 1.53k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  1.60k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 66, False: 1.53k]
  ------------------
  277|     66|            {
  278|     66|                return static_cast<std::int16_t>(-number);
  279|     66|            }
  280|       |
  281|  1.53k|            return static_cast<std::int16_t>(number);
  282|  1.60k|        }
  283|       |
  284|    248|        return {};
  285|  1.85k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  16.6k|    {
   96|  16.6k|        switch (value)
   97|  16.6k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  2.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.31k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.31k, False: 14.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.31k|        return #name;
  |  |  ------------------
  |  |   14|  6.87k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.87k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.87k, False: 9.81k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.87k|        return #name;
  |  |  ------------------
  |  |   15|  6.87k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     57|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 57, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     57|        return #name;
  |  |  ------------------
  |  |   16|  1.97k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.97k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.97k, False: 14.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.97k|        return #name;
  |  |  ------------------
  |  |   17|  1.97k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    398|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 398, False: 16.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    398|        return #name;
  |  |  ------------------
  |  |   18|    418|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    418|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 418, False: 16.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    418|        return #name;
  |  |  ------------------
  |  |   19|    418|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|     27|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 27, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     27|        return #name;
  |  |  ------------------
  |  |   20|     46|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     46|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 46, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     46|        return #name;
  |  |  ------------------
  |  |   21|    115|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    115|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 115, False: 16.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    115|        return #name;
  |  |  ------------------
  |  |   22|    120|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    120|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 120, False: 16.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    120|        return #name;
  |  |  ------------------
  |  |   23|    120|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   24|     58|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|     58|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 58, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     58|        return #name;
  |  |  ------------------
  |  |   25|     58|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      9|        return #name;
  |  |  ------------------
  |  |   26|    111|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    111|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 111, False: 16.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    111|        return #name;
  |  |  ------------------
  |  |   27|    111|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   28|    233|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    233|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 233, False: 16.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    233|        return #name;
  |  |  ------------------
  |  |   29|  1.11k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.11k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.11k, False: 15.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.11k|        return #name;
  |  |  ------------------
  |  |   30|  1.11k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 20, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     20|        return #name;
  |  |  ------------------
  |  |   31|     46|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     46|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 46, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     46|        return #name;
  |  |  ------------------
  |  |   32|     46|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      8|        return #name;
  |  |  ------------------
  |  |   33|    312|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    312|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 312, False: 16.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    312|        return #name;
  |  |  ------------------
  |  |   34|    312|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    266|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 266, False: 16.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    266|        return #name;
  |  |  ------------------
  |  |   35|    266|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   36|    565|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    565|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 565, False: 16.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    565|        return #name;
  |  |  ------------------
  |  |   37|    565|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     39|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 39, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     39|        return #name;
  |  |  ------------------
  |  |   38|     39|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 20, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|     20|        return #name;
  |  |  ------------------
  |  |   39|    366|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|    366|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 366, False: 16.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    366|        return #name;
  |  |  ------------------
  |  |   40|    376|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|    376|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 376, False: 16.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    376|        return #name;
  |  |  ------------------
  |  |   41|    376|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      8|        return #name;
  |  |  ------------------
  |  |   42|      8|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 16.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   43|    512|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    512|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 512, False: 16.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    512|        return #name;
  |  |  ------------------
  |  |   44|    512|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    244|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 244, False: 16.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    244|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 16.6k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  16.6k|        }
  109|  16.6k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  11.3k|    {
  131|  11.3k|        switch (value)
  132|  11.3k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  2.04k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.04k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.04k, False: 9.33k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.04k|        return #name;
  |  |  ------------------
  |  |   48|  2.04k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.10k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.10k, False: 10.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.10k|        return #name;
  |  |  ------------------
  |  |   49|  1.10k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   50|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   52|     20|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 20, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|     20|        return #name;
  |  |  ------------------
  |  |   53|     20|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   54|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   55|    128|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    128|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 128, False: 11.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    128|        return #name;
  |  |  ------------------
  |  |   56|  1.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.01k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.01k, False: 10.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.01k|        return #name;
  |  |  ------------------
  |  |   57|  1.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   58|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   60|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   61|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   62|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   63|    876|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    876|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 876, False: 10.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    876|        return #name;
  |  |  ------------------
  |  |   64|    876|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    118|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 118, False: 11.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    118|        return #name;
  |  |  ------------------
  |  |   65|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|     86|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 86, False: 11.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     86|        return #name;
  |  |  ------------------
  |  |   66|     86|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   67|  4.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.66k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.66k, False: 6.71k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.66k|        return #name;
  |  |  ------------------
  |  |   68|  4.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|    138|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 138, False: 11.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    138|        return #name;
  |  |  ------------------
  |  |   69|    138|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   70|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   71|    191|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    191|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 191, False: 11.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    191|        return #name;
  |  |  ------------------
  |  |   72|    191|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|    724|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|    724|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 724, False: 10.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    724|        return #name;
  |  |  ------------------
  |  |   74|    724|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   75|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   76|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   77|     96|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|     96|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 96, False: 11.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|     96|        return #name;
  |  |  ------------------
  |  |   78|     96|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|     70|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 70, False: 11.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|     70|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 11.3k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  11.3k|        }
  144|  11.3k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   504k|        {
   12|   504k|            m_Value = value;
   13|   504k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   865k|        {
   17|   865k|            return m_Value;
   18|   865k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  3.04k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  3.04k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 34.8k, False: 0]
  ------------------
   64|  34.8k|            {
   65|  34.8k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 3.04k, False: 31.7k]
  ------------------
   66|  3.04k|                {
   67|  3.04k|                    return &token;
   68|  3.04k|                }
   69|  34.8k|            }
   70|       |
   71|      0|            return nullptr;
   72|  3.04k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   144k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   144k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   144k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   228k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   228k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   228k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  23.6k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  23.6k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  23.6k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   494k|    {
   11|   494k|        m_Value = val;
   12|   494k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.14M|    {
   16|  2.14M|        return m_Value;
   17|  2.14M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  32.4k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  16.4k|    {
   25|  16.4k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  16.4k|        switch (argument_number.unsafe())
   28|  16.4k|        {
   29|  7.19k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 7.19k, False: 9.25k]
  ------------------
   30|  7.19k|                m_Arg1 = argument;
   31|  7.19k|                break;
   32|  5.53k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 5.53k, False: 10.9k]
  ------------------
   33|  5.53k|                m_Arg2 = argument;
   34|  5.53k|                break;
   35|  3.71k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 3.71k, False: 12.7k]
  ------------------
   36|  3.71k|                m_Arg3 = argument;
   37|  3.71k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 16.4k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  16.4k|#endif
   42|  16.4k|        }
   43|  16.4k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  4.79M|    {
   84|  4.79M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  4.79M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  4.79M|    {
   89|  4.79M|        return m_Info;
   90|  4.79M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   113k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  28.7M|    {
   28|  28.7M|        return m_Type;
   29|  28.7M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  6.21M|    {
   78|  6.21M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  6.21M|        return register_int;
   81|  6.21M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.64M|    {
   85|  1.64M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.64M|        return register_float;
   88|  1.64M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.23M|    {
   93|  1.23M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.23M|        return immediate_value;
   96|  1.23M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|  1.09M|    {
  108|  1.09M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|  1.09M|        return label;
  111|  1.09M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  9.18k|    {
  171|  9.18k|        InstructionArgument arg;
  172|  9.18k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  9.18k|        arg.register_int.register_id = id;
  174|  9.18k|        return arg;
  175|  9.18k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  3.67k|    {
  179|  3.67k|        InstructionArgument arg;
  180|  3.67k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  3.67k|        arg.register_float.register_id = id;
  182|  3.67k|        return arg;
  183|  3.67k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.35k|    {
  187|  2.35k|        InstructionArgument arg;
  188|  2.35k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.35k|        arg.immediate_value.signed_value = value;
  190|  2.35k|        return arg;
  191|  2.35k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  1.23k|    {
  205|  1.23k|        InstructionArgument arg;
  206|  1.23k|        arg.m_Type           = ArgumentType::Label;
  207|  1.23k|        arg.label.label_name = label_name;
  208|  1.23k|        return arg;
  209|  1.23k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|   234k|        {
  352|   234k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|   234k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|   234k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|   234k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|   234k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|   234k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|   234k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  44.2k|        {
  365|  44.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  44.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  44.2k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  44.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  44.2k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  44.2k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  43.2k|        {
  377|  43.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  43.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  43.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  43.2k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  43.2k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  43.2k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  43.2k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  19.0k|        {
  390|  19.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  19.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  19.0k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  19.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  19.0k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  19.0k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  18.6k|        {
  402|  18.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  18.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  18.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  18.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  18.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  18.6k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  18.6k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  18.6k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  10.2k|        {
  417|  10.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  10.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  10.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  10.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  10.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  10.2k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  10.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  10.2k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  45.9k|        {
  432|  45.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  45.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  45.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  45.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  45.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  45.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  45.9k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  11.1k|        {
  445|  11.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  11.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  11.1k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  11.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  11.1k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  11.1k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  99.7k|        {
  457|  99.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  99.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  99.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  99.7k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  99.7k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  99.7k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  99.7k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  19.0k|        {
  470|  19.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  19.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  19.0k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  19.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  19.0k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  19.0k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  23.0k|        {
  482|  23.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  23.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  23.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  23.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  23.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  23.0k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  23.0k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  23.0k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  21.8k|        {
  497|  21.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  21.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  21.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  21.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  21.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  21.8k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  21.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  21.8k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  46.5k|        {
  512|  46.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  46.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  46.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  46.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  46.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  46.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  46.5k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  27.7k|        {
  525|  27.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  27.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  27.7k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  27.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  27.7k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  27.7k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  21.7k|        {
  537|  21.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  21.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  21.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  21.7k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  21.7k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  21.7k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  21.7k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  35.7k|        {
  550|  35.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  35.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  35.7k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  35.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  35.7k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  35.7k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  25.8k|        {
  562|  25.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  25.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  25.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  25.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  25.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  25.8k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  25.8k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  25.8k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  19.5k|        {
  577|  19.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  19.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  19.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  19.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  19.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  19.5k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  19.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  19.5k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|  4.43k|        {
  592|  4.43k|            const auto& dest_reg = arg1.AsRegisterInt();
  593|  4.43k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|  4.43k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|  4.43k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|  4.43k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|  4.43k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|  4.43k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|      1|        {
  605|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  607|      1|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|  9.50k|        {
  617|  9.50k|            const auto& dest_reg = arg1.AsRegisterInt();
  618|  9.50k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|  9.50k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|  9.50k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|  9.50k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|  9.50k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|  9.50k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|      1|        {
  630|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  632|      1|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  74.3k|        {
  684|  74.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  74.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  74.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  74.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  74.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  74.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  74.3k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  22.7k|        {
  697|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  22.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  22.7k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  22.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  22.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  59.9k|        {
  710|  59.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  59.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  59.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  59.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  59.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  59.9k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  59.9k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  33.9k|        {
  723|  33.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  33.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  33.9k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  33.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  33.9k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  33.9k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  33.9k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  73.3k|        {
  736|  73.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  73.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  73.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  73.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  73.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  73.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  73.3k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  27.9k|        {
  749|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  51.6k|        {
  762|  51.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  51.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  51.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  51.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  51.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  51.6k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  51.6k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  25.6k|        {
  775|  25.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  25.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  25.6k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  25.6k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  25.6k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  25.6k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  25.6k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  22.7k|        {
  788|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  22.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  22.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  22.7k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  22.7k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  69.7k|        {
  802|  69.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  69.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  69.7k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  69.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  69.7k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  69.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  69.7k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  13.5k|        {
  815|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  19.1k|        {
  829|  19.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  19.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  19.1k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  19.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  19.1k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  19.1k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  20.8k|        {
  842|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|   232k|        {
  856|   232k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|   232k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|   232k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|   232k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|   232k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|   232k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|   232k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  11.7k|        {
  869|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  11.7k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 1, False: 11.7k]
  ------------------
  877|       |
  878|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  11.7k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  25.5k|        {
  884|  25.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  25.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  25.5k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  25.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  25.5k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 0, False: 25.5k]
  ------------------
  891|       |
  892|  25.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  25.5k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  11.7k|        {
  898|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  11.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  11.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  11.7k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 1, False: 11.7k]
  ------------------
  906|       |
  907|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  11.7k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  94.7k|        {
  913|  94.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  94.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  94.7k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  94.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  94.7k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 0, False: 94.7k]
  ------------------
  920|       |
  921|  94.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  94.7k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  11.7k|        {
  927|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  11.7k|            processor.SetFPSRValue(new_value);
  936|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  24.7k|        {
  941|  24.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  24.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  24.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  24.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  24.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  24.7k|            processor.SetFPSRValue(new_value);
  950|  24.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  11.7k|        {
  955|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 11.7k]
  ------------------
  963|       |
  964|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  30.8k|        {
  970|  30.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  30.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  30.8k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  30.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  30.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 1.00k, False: 29.8k]
  ------------------
  977|       |
  978|  30.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  30.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  10.2k|        {
  984|  10.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  10.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  10.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  10.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  10.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  10.2k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 10.2k]
  ------------------
  992|       |
  993|  10.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  10.2k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  24.7k|        {
  999|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  24.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  24.7k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 24.7k]
  ------------------
 1006|       |
 1007|  24.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  24.7k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|  97.4k|        {
 1013|  97.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|  97.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|  97.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|  97.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|  97.4k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|  97.4k|            processor.SetFPSRValue(new_value);
 1022|  97.4k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|   221k|        {
 1027|   221k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|   221k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|   221k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|   221k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|   221k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|   221k|            processor.SetFPSRValue(new_value);
 1036|   221k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  11.7k|        {
 1041|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 11.7k, False: 1]
  ------------------
 1049|       |
 1050|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  22.7k|        {
 1056|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  22.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  22.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 22.7k, False: 0]
  ------------------
 1063|       |
 1064|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  22.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  16.6k|        {
 1070|  16.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  16.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  16.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  16.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  16.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  16.6k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 16.6k, False: 0]
  ------------------
 1078|       |
 1079|  16.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  16.6k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|  95.0k|        {
 1085|  95.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|  95.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|  95.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|  95.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|  95.0k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 81.2k, False: 13.7k]
  ------------------
 1092|       |
 1093|  95.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|  95.0k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  15.3k|        {
 1099|  15.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  15.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  15.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  15.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  15.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  15.3k|            processor.SetFPSRValue(new_value);
 1108|  15.3k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  16.2k|        {
 1113|  16.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  16.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  16.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  16.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  16.2k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  16.2k|            processor.SetFPSRValue(new_value);
 1122|  16.2k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  11.1k|        {
 1127|  11.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  11.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  11.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  11.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  11.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  11.1k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 11.1k, False: 0]
  ------------------
 1135|       |
 1136|  11.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  11.1k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|   203k|        {
 1142|   203k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|   203k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|   203k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|   203k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|   203k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 201k, False: 2.08k]
  ------------------
 1149|       |
 1150|   203k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|   203k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  10.6k|        {
 1156|  10.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  10.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  10.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  10.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  10.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  10.6k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 10.6k, False: 0]
  ------------------
 1164|       |
 1165|  10.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  10.6k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  21.3k|        {
 1171|  21.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  21.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  21.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  21.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  21.3k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 21.3k, False: 0]
  ------------------
 1178|       |
 1179|  21.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  21.3k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  19.7k|        {
 1185|  19.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  19.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  19.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  19.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  19.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  19.7k|            processor.SetFPSRValue(new_value);
 1194|  19.7k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  24.1k|        {
 1199|  24.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  24.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  24.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  24.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  24.1k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  24.1k|            processor.SetFPSRValue(new_value);
 1208|  24.1k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  16.7k|        {
 1213|  16.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  16.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  16.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  16.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  16.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  16.7k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 15.2k, False: 1.42k]
  ------------------
 1221|       |
 1222|  16.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  16.7k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  20.1k|        {
 1228|  20.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  20.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  20.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  20.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  20.1k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 20.1k, False: 0]
  ------------------
 1235|       |
 1236|  20.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  20.1k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  83.2k|        {
 1242|  83.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  83.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  83.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  83.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  83.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  83.2k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 76.9k, False: 6.37k]
  ------------------
 1250|       |
 1251|  83.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  83.2k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  36.4k|        {
 1257|  36.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  36.4k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  36.4k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  36.4k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  36.4k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 36.4k, False: 0]
  ------------------
 1264|       |
 1265|  36.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  36.4k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  29.9k|        {
 1271|  29.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  29.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  29.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  29.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  29.9k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  29.9k|            processor.SetFPSRValue(new_value);
 1280|  29.9k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  12.5k|        {
 1285|  12.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  12.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  12.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  12.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  12.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  12.5k|            processor.SetFPSRValue(new_value);
 1294|  12.5k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  16.9k|        {
 1299|  16.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  16.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  16.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  16.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  16.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  16.9k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 1, False: 16.9k]
  ------------------
 1307|       |
 1308|  16.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  16.9k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  26.3k|        {
 1314|  26.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  26.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  26.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  26.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  26.3k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 0, False: 26.3k]
  ------------------
 1321|       |
 1322|  26.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  26.3k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  22.7k|        {
 1328|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  22.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  22.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  22.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 1, False: 22.7k]
  ------------------
 1336|       |
 1337|  22.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  22.7k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  31.8k|        {
 1343|  31.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  31.8k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  31.8k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  31.8k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  31.8k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 3.56k, False: 28.3k]
  ------------------
 1350|       |
 1351|  31.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  31.8k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  13.5k|        {
 1357|  13.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  13.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  13.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  13.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  13.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  13.5k|            processor.SetFPSRValue(new_value);
 1366|  13.5k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  13.6k|        {
 1371|  13.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  13.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  13.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  13.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  13.6k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  13.6k|            processor.SetFPSRValue(new_value);
 1380|  13.6k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  63.0k|        {
 1385|  63.0k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  63.0k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  63.0k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  63.0k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 42.7k, False: 20.3k]
  ------------------
 1391|  42.7k|            {
 1392|  42.7k|                JumpToLabel(processor, jump_label.label_name);
 1393|  42.7k|            }
 1394|  63.0k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  54.3k|        {
 1399|  54.3k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  54.3k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  54.3k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  54.3k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 29.9k, False: 24.3k]
  ------------------
 1405|  29.9k|            {
 1406|  29.9k|                JumpToLabel(processor, jump_label.label_name);
 1407|  29.9k|            }
 1408|  54.3k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  35.8k|        {
 1413|  35.8k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  35.8k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  35.8k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 22.7k, False: 13.0k]
  ------------------
 1418|  22.7k|            {
 1419|  22.7k|                JumpToLabel(processor, jump_label.label_name);
 1420|  22.7k|            }
 1421|  35.8k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   830k|        {
 1426|   830k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   830k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   830k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 813k, False: 16.9k]
  ------------------
 1431|   813k|            {
 1432|   813k|                JumpToLabel(processor, jump_label.label_name);
 1433|   813k|            }
 1434|   830k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|  64.1k|        {
 1439|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1442|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  34.9k|        {
 1447|  34.9k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  34.9k|            JumpToRegister(processor, jump_register.register_id);
 1450|  34.9k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  44.4k|        {
 1455|  44.4k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  44.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  44.4k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  44.4k|            JumpToLabel(processor, jump_label.label_name);
 1461|  44.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|   399k|        {
 1466|   399k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|   399k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|   399k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|   399k|            JumpToRegister(processor, jump_register.register_id);
 1472|   399k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  12.3k|        {
 1477|  12.3k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  12.3k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  12.3k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  12.3k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  12.3k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|      1|        {
 1488|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 0, False: 1]
  ------------------
 1493|      0|            {
 1494|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      0|                return;
 1496|      0|            }
 1497|       |
 1498|      1|            phi::i32 address = optional_address.value();
 1499|       |
 1500|      1|            auto optional_value =
 1501|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 1, False: 0]
  ------------------
 1504|      1|            {
 1505|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      1|                return;
 1508|      1|            }
 1509|       |
 1510|      0|            phi::i32 value = optional_value.value();
 1511|       |
 1512|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|      1|        {
 1518|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 0, False: 1]
  ------------------
 1523|      0|            {
 1524|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      0|                return;
 1526|      0|            }
 1527|       |
 1528|      1|            phi::i32 address = optional_address.value();
 1529|       |
 1530|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|      1|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 1, False: 0]
  ------------------
 1534|      1|            {
 1535|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      1|                return;
 1538|      1|            }
 1539|       |
 1540|      0|            phi::u32 value = optional_value.value();
 1541|       |
 1542|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|      1|        {
 1548|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 0, False: 1]
  ------------------
 1553|      0|            {
 1554|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      0|                return;
 1556|      0|            }
 1557|       |
 1558|      1|            phi::i32 address = optional_address.value();
 1559|       |
 1560|      1|            auto optional_value =
 1561|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 1, False: 0]
  ------------------
 1564|      1|            {
 1565|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      1|                return;
 1568|      1|            }
 1569|       |
 1570|      0|            phi::i32 value = optional_value.value();
 1571|       |
 1572|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|      1|        {
 1578|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 0, False: 1]
  ------------------
 1583|      0|            {
 1584|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      0|                return;
 1586|      0|            }
 1587|       |
 1588|      1|            phi::i32 address = optional_address.value();
 1589|       |
 1590|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|      1|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 1, False: 0]
  ------------------
 1594|      1|            {
 1595|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      1|                return;
 1598|      1|            }
 1599|       |
 1600|      0|            phi::u32 value = optional_value.value();
 1601|       |
 1602|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|      1|        {
 1608|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 0, False: 1]
  ------------------
 1613|      0|            {
 1614|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      0|                return;
 1616|      0|            }
 1617|       |
 1618|      1|            phi::i32 address = optional_address.value();
 1619|       |
 1620|      1|            auto optional_value =
 1621|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 1, False: 0]
  ------------------
 1624|      1|            {
 1625|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      1|                return;
 1628|      1|            }
 1629|       |
 1630|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|      1|        {
 1636|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 0, False: 1]
  ------------------
 1641|      0|            {
 1642|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      0|                return;
 1644|      0|            }
 1645|       |
 1646|      1|            phi::i32 address = optional_address.value();
 1647|       |
 1648|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|      1|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 1, False: 0]
  ------------------
 1652|      1|            {
 1653|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      1|                return;
 1656|      1|            }
 1657|       |
 1658|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|      1|        {
 1664|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 0, False: 1]
  ------------------
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|       |
 1674|      1|            phi::i32 address = optional_address.value();
 1675|       |
 1676|      1|            auto optional_value =
 1677|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 1, False: 0]
  ------------------
 1680|      1|            {
 1681|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      1|                return;
 1684|      1|            }
 1685|       |
 1686|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|      1|        {
 1692|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 0, False: 1]
  ------------------
 1697|      0|            {
 1698|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      0|                return;
 1700|      0|            }
 1701|       |
 1702|      1|            phi::i32 address = optional_address.value();
 1703|       |
 1704|      1|            auto optional_value =
 1705|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 1, False: 0]
  ------------------
 1708|      1|            {
 1709|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      1|                return;
 1712|      1|            }
 1713|       |
 1714|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  24.3k|        {
 1940|  24.3k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  24.3k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  24.3k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  24.3k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  7.94k|        {
 1951|  7.94k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  7.94k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  7.94k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  7.94k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  7.94k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1961|  10.2k|        {
 1962|  10.2k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1963|  10.2k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1964|       |
 1965|  10.2k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1966|       |
 1967|  10.2k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1968|       |
 1969|  10.2k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1970|  10.2k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1974|  19.6k|        {
 1975|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1976|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1977|       |
 1978|  19.6k|            const std::int32_t source_value =
 1979|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1980|       |
 1981|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1982|       |
 1983|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1984|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  13.6k|        {
 1989|  13.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  13.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  13.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  13.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  13.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  24.2k|        {
 2000|  24.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  24.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  24.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  24.2k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  24.2k|            const float        converted_value_float =
 2006|  24.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  24.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  24.2k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  9.37k|        {
 2014|  9.37k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  9.37k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  9.37k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  9.37k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  9.37k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  9.37k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  19.9k|        {
 2026|  19.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  19.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  19.9k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  19.9k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  19.9k|            const float        converted_value_float =
 2032|  19.9k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  19.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  19.9k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  18.4k|        {
 2040|  18.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  18.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  18.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  18.4k|            const std::int32_t converted_value_int =
 2045|  18.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  18.4k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  18.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  18.4k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  11.7k|        {
 2054|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  11.7k|            const std::int32_t converted_value_int =
 2059|  11.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      8|        {
 2074|      8|            processor.Raise(Exception::Halt);
 2075|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|   193k|        {
 2080|       |            /* Do nothing */
 2081|   193k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|   278k|    {
  170|   278k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|   278k|        SafeWriteInteger(processor, dest_reg, res);
  173|   278k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   414k|    {
  125|   414k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   414k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   414k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 20.5k, False: 394k]
  ------------------
  130|  20.5k|        {
  131|  20.5k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  20.5k|            value = max + (value % (min - 1));
  134|  20.5k|        }
  135|       |        // Check for overflow
  136|   394k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 18.7k, False: 375k]
  ------------------
  137|  18.7k|        {
  138|  18.7k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  18.7k|            value = min + (value % (max + 1));
  141|  18.7k|        }
  142|       |
  143|   414k|        PHI_ASSERT(value >= min);
  144|   414k|        PHI_ASSERT(value <= max);
  145|       |
  146|   414k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   414k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  62.2k|    {
  178|  62.2k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  62.2k|        SafeWriteInteger(processor, dest_reg, res);
  181|  62.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   248k|    {
  152|   248k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   248k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 26.0k, False: 222k]
  ------------------
  156|  26.0k|        {
  157|  26.0k|            processor.Raise(Exception::Overflow);
  158|       |
  159|  26.0k|            value %= max + 1u;
  160|  26.0k|        }
  161|       |
  162|   248k|        PHI_ASSERT(value <= max);
  163|       |
  164|   248k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   248k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  57.0k|    {
  186|  57.0k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  57.0k|        SafeWriteInteger(processor, dest_reg, res);
  189|  57.0k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   118k|    {
  194|   118k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   118k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 27.0k, False: 91.7k]
  ------------------
  197|  27.0k|        {
  198|  27.0k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  27.0k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  27.0k|            SafeWriteInteger(processor, dest_reg, res);
  202|  27.0k|            return;
  203|  27.0k|        }
  204|       |
  205|  91.7k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  91.7k|        SafeWriteInteger(processor, dest_reg, res);
  208|  91.7k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  74.3k|    {
  213|  74.3k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  74.3k|        SafeWriteInteger(processor, dest_reg, res);
  216|  74.3k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  57.5k|    {
  221|  57.5k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  57.5k|        SafeWriteInteger(processor, dest_reg, res);
  224|  57.5k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  4.43k|    {
  229|  4.43k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 4.43k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  4.43k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  4.43k|        SafeWriteInteger(processor, dest_reg, res);
  238|  4.43k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  9.50k|    {
  243|  9.50k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 2, False: 9.50k]
  ------------------
  244|      2|        {
  245|      2|            processor.Raise(Exception::DivideByZero);
  246|      2|            return;
  247|      2|        }
  248|       |
  249|  9.50k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  9.50k|        SafeWriteInteger(processor, dest_reg, res);
  252|  9.50k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   198k|    {
  326|   198k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 7.68k, False: 190k]
  ------------------
  327|  7.68k|        {
  328|  7.68k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  7.68k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  7.68k|            return;
  333|  7.68k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   190k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 17.5k, False: 173k]
  ------------------
  337|  17.5k|        {
  338|  17.5k|            processor.Raise(Exception::BadShift);
  339|  17.5k|            return;
  340|  17.5k|        }
  341|       |
  342|   173k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   173k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   173k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  93.9k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  93.9k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 8.57k, False: 85.3k]
  ------------------
  259|  8.57k|        {
  260|  8.57k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  8.57k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  8.57k|            return;
  265|  8.57k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  85.3k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 54.2k, False: 31.1k]
  ------------------
  269|  54.2k|        {
  270|  54.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  54.2k|            return;
  272|  54.2k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  31.1k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 4.80k, False: 26.3k]
  ------------------
  276|  4.80k|        {
  277|  4.80k|            processor.Raise(Exception::BadShift);
  278|  4.80k|            return;
  279|  4.80k|        }
  280|       |
  281|  26.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  26.3k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  26.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  26.3k|    {
   30|  26.3k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  26.3k|        return value & ~(-1 << (32 - n));
   33|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  77.3k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  77.3k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 6.76k, False: 70.5k]
  ------------------
  293|  6.76k|        {
  294|  6.76k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  6.76k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 3.18k, False: 3.57k]
  ------------------
  298|  3.18k|            {
  299|       |                // Set every byte to 1
  300|  3.18k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  3.18k|            }
  302|  3.57k|            else
  303|  3.57k|            {
  304|       |                // Set every byte to 0
  305|  3.57k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  3.57k|            }
  307|  6.76k|            return;
  308|  6.76k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  70.5k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 16.2k, False: 54.2k]
  ------------------
  312|  16.2k|        {
  313|  16.2k|            processor.Raise(Exception::BadShift);
  314|  16.2k|            return;
  315|  16.2k|        }
  316|       |
  317|  54.2k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  54.2k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  54.2k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.01M|    {
   39|       |        // Lookup the label
   40|  1.01M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.01M|        PHI_ASSERT(program != nullptr);
   42|  1.01M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.01M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 45, False: 1.01M]
  ------------------
   45|     45|        {
   46|     45|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     45|            processor.Raise(Exception::UnknownLabel);
   48|     45|            return;
   49|     45|        }
   50|       |
   51|  1.01M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.01M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.01M|        processor.SetNextProgramCounter(jump_point);
   56|  1.01M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   434k|    {
   60|   434k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   434k|        phi::u32 max_address =
   63|   434k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   434k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 10, False: 434k]
  ------------------
   65|     10|        {
   66|     10|            processor.Raise(Exception::AddressOutOfBounds);
   67|     10|            return;
   68|     10|        }
   69|       |
   70|   434k|        processor.SetNextProgramCounter(address.unsafe());
   71|   434k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  4.79M|    {
   12|  4.79M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  4.79M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  4.79M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  4.79M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  4.79M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  4.79M|                   "Unexpected argument type for arg1");
   22|  4.79M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  4.79M|                   "Unexpected argument type for arg2");
   24|  4.79M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  4.79M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  4.79M|        m_Executor(processor, arg1, arg2, arg3);
   29|  4.79M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  32.4k|    {
  453|  32.4k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  32.4k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.31M|    {
   17|  1.31M|        m_ValueSigned = val;
   18|  1.31M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   931k|    {
   22|   931k|        m_ValueUnsigned = val;
   23|   931k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  2.43M|    {
   27|  2.43M|        return m_ValueSigned;
   28|  2.43M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.47M|    {
   32|  1.47M|        return m_ValueUnsigned;
   33|  1.47M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.70M|    {
   37|  2.70M|        return m_IsReadOnly;
   38|  2.70M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|      1|    {
   22|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1, False: 0]
  ------------------
   23|      1|        {
   24|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      1|            return {};
   26|      1|        }
   27|       |
   28|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|      0|        return m_Values[raw_address].signed_value;
   31|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|      1|    {
   35|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 1, False: 0]
  ------------------
   36|      1|        {
   37|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      1|            return {};
   39|      1|        }
   40|       |
   41|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|      0|        return m_Values[raw_address].unsigned_value;
   43|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|      1|    {
   47|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1, False: 0]
  ------------------
   48|      1|        {
   49|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      1|            return {};
   51|      1|        }
   52|       |
   53|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  ------------------
   56|      0|        {
   57|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      0|            return {};
   59|      0|        }
   60|       |
   61|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|      1|    {
   66|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1, False: 0]
  ------------------
   67|      1|        {
   68|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      1|            return {};
   70|      1|        }
   71|       |
   72|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 0, False: 0]
  ------------------
   75|      0|        {
   76|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      0|            return {};
   78|      0|        }
   79|       |
   80|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|      1|    {
   85|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 1, False: 0]
  ------------------
   86|      1|        {
   87|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      1|            return {};
   89|      1|        }
   90|       |
   91|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 0, False: 0]
  ------------------
   94|      0|        {
   95|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      0|            return {};
   97|      0|        }
   98|       |
   99|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|      1|    {
  104|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 1, False: 0]
  ------------------
  105|      1|        {
  106|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      1|            return {};
  108|      1|        }
  109|       |
  110|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 0, False: 0]
  ------------------
  113|      0|        {
  114|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      0|            return {};
  116|      0|        }
  117|       |
  118|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|      1|    {
  123|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1, False: 0]
  ------------------
  124|      1|        {
  125|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      1|            return {};
  127|      1|        }
  128|       |
  129|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 0, False: 0]
  ------------------
  132|      0|        {
  133|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      0|            return {};
  135|      0|        }
  136|       |
  137|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|      1|    {
  142|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1, False: 0]
  ------------------
  143|      1|        {
  144|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      1|            return {};
  146|      1|        }
  147|       |
  148|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|        {
  152|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      0|            return {};
  154|      0|        }
  155|       |
  156|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|      8|    {
  269|       |        // Cannot access anything before the starting address
  270|      8|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 8, False: 0]
  ------------------
  271|      8|        {
  272|      8|            return false;
  273|      8|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 0]
  ------------------
  277|      0|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 0]
  ------------------
  284|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 0, False: 0]
  ------------------
  291|      0|        {
  292|      0|            return false;
  293|      0|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|      0|        return true;
  297|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  4.41k|    {
  307|  4.41k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 4.41M, False: 4.41k]
  ------------------
  308|  4.41M|        {
  309|  4.41M|            val.signed_value = 0;
  310|  4.41M|        }
  311|  4.41k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   143k|    {
   24|   143k|        switch (token.length())
   25|   143k|        {
   26|       |            // 1 character OpCodes
   27|  7.04k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 7.04k, False: 136k]
  ------------------
   28|  7.04k|                char c1 = token[0];
   29|  7.04k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 3.45k, False: 3.59k]
  ------------------
   30|  3.45k|                {
   31|  3.45k|                    return OpCode::J;
   32|  3.45k|                }
   33|  3.59k|                break;
   34|  7.04k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  12.1k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 12.1k, False: 130k]
  ------------------
   38|  12.1k|                char c1 = token[0];
   39|  12.1k|                char c2 = token[1];
   40|       |
   41|  12.1k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 5.43k, False: 6.74k]
  ------------------
   42|  12.1k|                {
   43|    174|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 174, False: 11.9k]
  ------------------
   44|    335|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 161, False: 12.0k]
  ------------------
   45|    335|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 144, False: 191]
  ------------------
   46|    144|                        {
   47|    144|                            return OpCode::JR;
   48|    144|                        }
   49|    191|                        break;
   50|       |
   51|  2.19k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 2.19k, False: 9.97k]
  ------------------
   52|  2.45k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 261, False: 11.9k]
  ------------------
   53|  2.45k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 80, False: 2.37k]
  ------------------
   54|  2.45k|                        {
   55|     67|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 67, False: 2.38k]
  ------------------
   56|    144|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 77, False: 2.37k]
  ------------------
   57|    144|                                return OpCode::LB;
   58|    195|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 195, False: 2.26k]
  ------------------
   59|    261|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 66, False: 2.39k]
  ------------------
   60|    261|                                return OpCode::LD;
   61|     67|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 67, False: 2.38k]
  ------------------
   62|    168|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 101, False: 2.35k]
  ------------------
   63|    168|                                return OpCode::LF;
   64|     69|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 69, False: 2.38k]
  ------------------
   65|    165|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 96, False: 2.36k]
  ------------------
   66|    165|                                return OpCode::LH;
   67|  1.57k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.57k, False: 884]
  ------------------
   68|  1.63k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 66, False: 2.39k]
  ------------------
   69|  1.63k|                                return OpCode::LW;
   70|  2.45k|                        }
   71|     80|                        break;
   72|     80|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 78, False: 12.0k]
  ------------------
   73|  1.43k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 1.35k, False: 10.8k]
  ------------------
   74|  1.43k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 164, False: 1.26k]
  ------------------
   75|    164|                        {
   76|    164|                            return OpCode::OR;
   77|    164|                        }
   78|  1.26k|                        break;
   79|  2.12k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 2.12k, False: 10.0k]
  ------------------
   80|  2.51k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 390, False: 11.7k]
  ------------------
   81|  2.51k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 85, False: 2.43k]
  ------------------
   82|  2.51k|                        {
   83|    709|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 709, False: 1.81k]
  ------------------
   84|    776|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 67, False: 2.45k]
  ------------------
   85|    776|                                return OpCode::SB;
   86|     70|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 70, False: 2.44k]
  ------------------
   87|    214|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 144, False: 2.37k]
  ------------------
   88|    214|                                return OpCode::SD;
   89|  1.06k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 1.06k, False: 1.45k]
  ------------------
   90|  1.12k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 66, False: 2.45k]
  ------------------
   91|  1.12k|                                return OpCode::SF;
   92|     68|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 68, False: 2.45k]
  ------------------
   93|    180|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 112, False: 2.40k]
  ------------------
   94|    180|                                return OpCode::SH;
   95|     69|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 69, False: 2.45k]
  ------------------
   96|    135|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 66, False: 2.45k]
  ------------------
   97|    135|                                return OpCode::SW;
   98|  2.51k|                        }
   99|     85|                        break;
  100|  12.1k|                }
  101|  7.05k|                break;
  102|  12.1k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  53.5k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 53.5k, False: 89.6k]
  ------------------
  106|  53.5k|                char c1 = token[0];
  107|  53.5k|                char c2 = token[1];
  108|  53.5k|                char c3 = token[2];
  109|       |
  110|  53.5k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 6.13k, False: 47.3k]
  ------------------
  111|  53.5k|                {
  112|  16.5k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 16.5k, False: 37.0k]
  ------------------
  113|  16.6k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 101, False: 53.4k]
  ------------------
  114|  16.6k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 16.3k, False: 234]
  |  Branch (114:29): [True: 16.2k, False: 341]
  |  Branch (114:45): [True: 16.2k, False: 107]
  ------------------
  115|  16.2k|                        {
  116|  16.2k|                            return OpCode::ADD;
  117|  16.2k|                        }
  118|    341|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 219, False: 122]
  |  Branch (118:34): [True: 153, False: 188]
  |  Branch (118:50): [True: 153, False: 66]
  ------------------
  119|    153|                        {
  120|    153|                            return OpCode::AND;
  121|    153|                        }
  122|    188|                        break;
  123|       |
  124|    188|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 146, False: 53.3k]
  ------------------
  125|    294|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 148, False: 53.3k]
  ------------------
  126|    294|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 218, False: 76]
  |  Branch (126:29): [True: 152, False: 142]
  |  Branch (126:45): [True: 152, False: 66]
  ------------------
  127|    152|                        {
  128|    152|                            return OpCode::DIV;
  129|    152|                        }
  130|    142|                        break;
  131|       |
  132|  1.27k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.27k, False: 52.2k]
  ------------------
  133|  1.36k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 90, False: 53.4k]
  ------------------
  134|  1.36k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.28k, False: 79]
  ------------------
  135|  1.28k|                        {
  136|  1.28k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 145, False: 1.14k]
  ------------------
  137|    145|                            {
  138|    145|                                return OpCode::EQD;
  139|    145|                            }
  140|  1.14k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 1.07k, False: 66]
  ------------------
  141|  1.07k|                            {
  142|  1.07k|                                return OpCode::EQF;
  143|  1.07k|                            }
  144|  1.28k|                        }
  145|    145|                        break;
  146|       |
  147|  2.95k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 2.95k, False: 50.5k]
  ------------------
  148|  3.41k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 454, False: 53.0k]
  ------------------
  149|  3.41k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 378, False: 3.03k]
  ------------------
  150|    378|                        {
  151|    378|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 163, False: 215]
  ------------------
  152|    163|                            {
  153|    163|                                return OpCode::GED;
  154|    163|                            }
  155|    215|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 149, False: 66]
  ------------------
  156|    149|                            {
  157|    149|                                return OpCode::GEF;
  158|    149|                            }
  159|    378|                        }
  160|  3.03k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 2.96k, False: 66]
  ------------------
  161|  2.96k|                        {
  162|  2.96k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 2.31k, False: 658]
  ------------------
  163|  2.31k|                            {
  164|  2.31k|                                return OpCode::GTD;
  165|  2.31k|                            }
  166|    658|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 592, False: 66]
  ------------------
  167|    592|                            {
  168|    592|                                return OpCode::GTF;
  169|    592|                            }
  170|    658|                        }
  171|    198|                        break;
  172|       |
  173|  1.11k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 1.11k, False: 52.4k]
  ------------------
  174|  1.60k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 491, False: 53.0k]
  ------------------
  175|  1.60k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.54k, False: 66]
  |  Branch (175:29): [True: 1.22k, False: 388]
  |  Branch (175:45): [True: 1.22k, False: 322]
  ------------------
  176|  1.22k|                        {
  177|  1.22k|                            return OpCode::JAL;
  178|  1.22k|                        }
  179|    388|                        break;
  180|       |
  181|  5.18k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 5.18k, False: 48.3k]
  ------------------
  182|  8.27k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 3.09k, False: 50.4k]
  ------------------
  183|  8.27k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.16k, False: 7.11k]
  ------------------
  184|  8.27k|                        {
  185|     69|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 69, False: 8.20k]
  ------------------
  186|  2.27k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 2.20k, False: 6.07k]
  ------------------
  187|  2.27k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 911, False: 1.36k]
  ------------------
  188|    911|                                {
  189|    911|                                    return OpCode::LBU;
  190|    911|                                }
  191|  1.36k|                                break;
  192|       |
  193|  1.36k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.02k, False: 7.25k]
  ------------------
  194|  2.09k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.07k, False: 7.19k]
  ------------------
  195|  2.09k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 996, False: 1.10k]
  ------------------
  196|    996|                                {
  197|    996|                                    return OpCode::LED;
  198|    996|                                }
  199|  1.10k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 268, False: 835]
  ------------------
  200|    268|                                {
  201|    268|                                    return OpCode::LEF;
  202|    268|                                }
  203|    835|                                break;
  204|       |
  205|  1.35k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.35k, False: 6.92k]
  ------------------
  206|  2.17k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 824, False: 7.45k]
  ------------------
  207|  2.17k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 926, False: 1.24k]
  ------------------
  208|    926|                                {
  209|    926|                                    return OpCode::LHI;
  210|    926|                                }
  211|  1.24k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 509, False: 740]
  ------------------
  212|    509|                                {
  213|    509|                                    return OpCode::LHU;
  214|    509|                                }
  215|    740|                                break;
  216|       |
  217|    740|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 334, False: 7.94k]
  ------------------
  218|    403|                            case 't':
  ------------------
  |  Branch (218:29): [True: 69, False: 8.20k]
  ------------------
  219|    403|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 192, False: 211]
  ------------------
  220|    192|                                {
  221|    192|                                    return OpCode::LTD;
  222|    192|                                }
  223|    211|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 145, False: 66]
  ------------------
  224|    145|                                {
  225|    145|                                    return OpCode::LTF;
  226|    145|                                }
  227|     66|                                break;
  228|       |
  229|     70|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 70, False: 8.20k]
  ------------------
  230|    167|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 97, False: 8.17k]
  ------------------
  231|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 133, False: 34]
  ------------------
  232|    133|                                {
  233|    133|                                    return OpCode::LWU;
  234|    133|                                }
  235|     34|                                break;
  236|  8.27k|                        }
  237|  4.19k|                        break;
  238|       |
  239|  4.19k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 2.26k, False: 51.2k]
  ------------------
  240|  2.49k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 234, False: 53.2k]
  ------------------
  241|  2.49k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 383, False: 2.11k]
  ------------------
  242|    383|                        {
  243|    383|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 149, False: 234]
  ------------------
  244|    149|                            {
  245|    149|                                return OpCode::NED;
  246|    149|                            }
  247|    234|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 168, False: 66]
  ------------------
  248|    168|                            {
  249|    168|                                return OpCode::NEF;
  250|    168|                            }
  251|    383|                        }
  252|  2.11k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.96k, False: 144]
  |  Branch (252:34): [True: 1.53k, False: 577]
  |  Branch (252:50): [True: 1.53k, False: 433]
  ------------------
  253|  1.53k|                        {
  254|  1.53k|                            return OpCode::NOP;
  255|  1.53k|                        }
  256|       |
  257|    643|                        break;
  258|       |
  259|    643|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 83, False: 53.4k]
  ------------------
  260|  2.48k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 2.40k, False: 51.1k]
  ------------------
  261|  2.48k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 2.17k, False: 307]
  |  Branch (261:29): [True: 1.06k, False: 1.42k]
  |  Branch (261:45): [True: 1.06k, False: 1.11k]
  ------------------
  262|  1.06k|                        {
  263|  1.06k|                            return OpCode::ORI;
  264|  1.06k|                        }
  265|  1.42k|                        break;
  266|       |
  267|  9.67k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 9.67k, False: 43.8k]
  ------------------
  268|  10.3k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 717, False: 52.8k]
  ------------------
  269|  10.3k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 189, False: 10.2k]
  ------------------
  270|  10.3k|                        {
  271|     71|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 71, False: 10.3k]
  ------------------
  272|    204|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 133, False: 10.2k]
  ------------------
  273|    204|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 137, False: 67]
  ------------------
  274|    137|                                {
  275|    137|                                    return OpCode::SBU;
  276|    137|                                }
  277|     67|                                break;
  278|       |
  279|     87|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 87, False: 10.3k]
  ------------------
  280|    251|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 164, False: 10.2k]
  ------------------
  281|    251|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 153, False: 98]
  ------------------
  282|    153|                                {
  283|    153|                                    return OpCode::SEQ;
  284|    153|                                }
  285|     98|                                break;
  286|       |
  287|  1.07k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 1.07k, False: 9.32k]
  ------------------
  288|  1.58k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 518, False: 9.87k]
  ------------------
  289|  1.58k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 863, False: 726]
  ------------------
  290|    863|                                {
  291|    863|                                    return OpCode::SGE;
  292|    863|                                }
  293|    726|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 276, False: 450]
  ------------------
  294|    276|                                {
  295|    276|                                    return OpCode::SGT;
  296|    276|                                }
  297|    450|                                break;
  298|       |
  299|    451|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 451, False: 9.94k]
  ------------------
  300|    585|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 134, False: 10.2k]
  ------------------
  301|    585|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 516, False: 69]
  ------------------
  302|    516|                                {
  303|    516|                                    return OpCode::SHU;
  304|    516|                                }
  305|     69|                                break;
  306|       |
  307|  1.03k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.03k, False: 9.36k]
  ------------------
  308|  1.35k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 323, False: 10.0k]
  ------------------
  309|  1.35k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 67, False: 1.28k]
  ------------------
  310|  1.35k|                                {
  311|    267|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 267, False: 1.08k]
  ------------------
  312|    333|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 1.28k]
  ------------------
  313|    333|                                        return OpCode::SLA;
  314|       |
  315|    190|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 190, False: 1.16k]
  ------------------
  316|    256|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 66, False: 1.28k]
  ------------------
  317|    256|                                        return OpCode::SLE;
  318|       |
  319|    405|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 405, False: 948]
  ------------------
  320|    471|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 66, False: 1.28k]
  ------------------
  321|    471|                                        return OpCode::SLL;
  322|       |
  323|    101|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 101, False: 1.25k]
  ------------------
  324|    226|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 125, False: 1.22k]
  ------------------
  325|    226|                                        return OpCode::SLT;
  326|  1.35k|                                }
  327|     67|                                break;
  328|       |
  329|  1.80k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.80k, False: 8.59k]
  ------------------
  330|  1.93k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 132, False: 10.2k]
  ------------------
  331|  1.93k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.87k, False: 66]
  ------------------
  332|  1.87k|                                {
  333|  1.87k|                                    return OpCode::SNE;
  334|  1.87k|                                }
  335|     66|                                break;
  336|       |
  337|  1.49k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.49k, False: 8.90k]
  ------------------
  338|  1.62k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 129, False: 10.2k]
  ------------------
  339|  1.62k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 182, False: 1.43k]
  ------------------
  340|    182|                                {
  341|    182|                                    return OpCode::SRA;
  342|    182|                                }
  343|  1.43k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.37k, False: 66]
  ------------------
  344|  1.37k|                                {
  345|  1.37k|                                    return OpCode::SRL;
  346|  1.37k|                                }
  347|     66|                                break;
  348|       |
  349|  1.66k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.66k, False: 8.73k]
  ------------------
  350|  1.74k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 81, False: 10.3k]
  ------------------
  351|  1.74k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.68k, False: 66]
  ------------------
  352|  1.68k|                                {
  353|  1.68k|                                    return OpCode::SUB;
  354|  1.68k|                                }
  355|     66|                                break;
  356|       |
  357|    760|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 760, False: 9.63k]
  ------------------
  358|    920|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 160, False: 10.2k]
  ------------------
  359|    920|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 826, False: 94]
  ------------------
  360|    826|                                {
  361|    826|                                    return OpCode::SWU;
  362|    826|                                }
  363|     94|                                break;
  364|  10.3k|                        }
  365|       |
  366|  1.53k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 302, False: 53.2k]
  ------------------
  367|  1.68k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 153, False: 53.3k]
  ------------------
  368|  1.68k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 423, False: 1.26k]
  |  Branch (368:29): [True: 353, False: 1.33k]
  |  Branch (368:45): [True: 353, False: 70]
  ------------------
  369|    353|                        {
  370|    353|                            return OpCode::XOR;
  371|    353|                        }
  372|  1.33k|                        break;
  373|  53.5k|                }
  374|  14.7k|                break;
  375|  53.5k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  49.7k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 49.7k, False: 93.4k]
  ------------------
  379|  49.7k|                char c1 = token[0];
  380|  49.7k|                char c2 = token[1];
  381|  49.7k|                char c3 = token[2];
  382|  49.7k|                char c4 = token[3];
  383|       |
  384|  49.7k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 5.08k, False: 44.6k]
  ------------------
  385|  49.7k|                {
  386|  5.81k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 5.81k, False: 43.9k]
  ------------------
  387|  6.50k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 690, False: 49.0k]
  ------------------
  388|  6.50k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 196, False: 6.30k]
  ------------------
  389|  6.50k|                        {
  390|  4.94k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 4.94k, False: 1.55k]
  ------------------
  391|  5.37k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 430, False: 6.07k]
  ------------------
  392|  5.37k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 5.31k, False: 66]
  ------------------
  393|  5.31k|                                {
  394|  5.31k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 194, False: 5.11k]
  ------------------
  395|  5.31k|                                    {
  396|    792|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 792, False: 4.51k]
  ------------------
  397|    858|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 5.24k]
  ------------------
  398|    858|                                            return OpCode::ADDD;
  399|       |
  400|  1.76k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 1.76k, False: 3.54k]
  ------------------
  401|  1.84k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 80, False: 5.23k]
  ------------------
  402|  1.84k|                                            return OpCode::ADDF;
  403|       |
  404|  1.80k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 1.80k, False: 3.51k]
  ------------------
  405|  1.86k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 5.24k]
  ------------------
  406|  1.86k|                                            return OpCode::ADDI;
  407|       |
  408|    481|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 481, False: 4.83k]
  ------------------
  409|    547|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 66, False: 5.24k]
  ------------------
  410|    547|                                            return OpCode::ADDU;
  411|  5.31k|                                    }
  412|  5.31k|                                }
  413|    260|                                break;
  414|       |
  415|    828|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 828, False: 5.67k]
  ------------------
  416|    930|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 102, False: 6.40k]
  ------------------
  417|    930|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 864, False: 66]
  |  Branch (417:37): [True: 798, False: 132]
  |  Branch (417:53): [True: 798, False: 66]
  ------------------
  418|    798|                                {
  419|    798|                                    return OpCode::ANDI;
  420|    798|                                }
  421|       |
  422|    132|                                break;
  423|  6.50k|                        }
  424|    588|                        break;
  425|       |
  426|  2.99k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 2.99k, False: 46.7k]
  ------------------
  427|  6.65k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 3.66k, False: 46.0k]
  ------------------
  428|  6.65k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 541, False: 6.11k]
  ------------------
  429|  6.65k|                        {
  430|     89|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 89, False: 6.56k]
  ------------------
  431|    321|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 232, False: 6.42k]
  ------------------
  432|    321|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 253, False: 68]
  |  Branch (432:37): [True: 155, False: 166]
  |  Branch (432:53): [True: 155, False: 98]
  ------------------
  433|    155|                                {
  434|    155|                                    return OpCode::BEQZ;
  435|    155|                                }
  436|    166|                                break;
  437|       |
  438|  2.80k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 2.80k, False: 3.85k]
  ------------------
  439|  4.45k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.65k, False: 5.00k]
  ------------------
  440|  4.45k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 4.34k, False: 116]
  ------------------
  441|  4.34k|                                {
  442|  4.34k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 2.73k, False: 1.60k]
  ------------------
  443|  2.73k|                                    {
  444|  2.73k|                                        return OpCode::BFPF;
  445|  2.73k|                                    }
  446|  1.60k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.45k, False: 146]
  ------------------
  447|  1.45k|                                    {
  448|  1.45k|                                        return OpCode::BFPT;
  449|  1.45k|                                    }
  450|  4.34k|                                }
  451|    262|                                break;
  452|       |
  453|  1.24k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.24k, False: 5.40k]
  ------------------
  454|  1.33k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 6.56k]
  ------------------
  455|  1.33k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.17k, False: 157]
  |  Branch (455:37): [True: 585, False: 751]
  |  Branch (455:53): [True: 585, False: 594]
  ------------------
  456|    585|                                {
  457|    585|                                    return OpCode::BNEZ;
  458|    585|                                }
  459|  6.65k|                        }
  460|  1.72k|                        break;
  461|       |
  462|  1.72k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 435, False: 49.2k]
  ------------------
  463|  4.33k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 3.90k, False: 45.8k]
  ------------------
  464|  4.33k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 3.18k, False: 1.15k]
  |  Branch (464:29): [True: 2.13k, False: 2.20k]
  |  Branch (464:45): [True: 2.13k, False: 1.05k]
  ------------------
  465|  2.13k|                        {
  466|  2.13k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 951, False: 1.17k]
  ------------------
  467|  2.13k|                            {
  468|    112|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 112, False: 2.01k]
  ------------------
  469|    178|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 2.06k]
  ------------------
  470|    178|                                    return OpCode::DIVD;
  471|       |
  472|     83|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 83, False: 2.04k]
  ------------------
  473|    149|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 2.06k]
  ------------------
  474|    149|                                    return OpCode::DIVF;
  475|       |
  476|     84|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 84, False: 2.04k]
  ------------------
  477|    534|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 450, False: 1.68k]
  ------------------
  478|    534|                                    return OpCode::DIVI;
  479|       |
  480|    120|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 120, False: 2.01k]
  ------------------
  481|    318|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 198, False: 1.93k]
  ------------------
  482|    318|                                    return OpCode::DIVU;
  483|  2.13k|                            }
  484|  2.13k|                        }
  485|  3.15k|                        break;
  486|       |
  487|  3.15k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 198, False: 49.5k]
  ------------------
  488|    464|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 266, False: 49.4k]
  ------------------
  489|    464|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 396, False: 68]
  |  Branch (489:29): [True: 264, False: 200]
  |  Branch (489:45): [True: 330, False: 66]
  |  Branch (489:61): [True: 264, False: 66]
  ------------------
  490|    264|                        {
  491|    264|                            return OpCode::HALT;
  492|    264|                        }
  493|    200|                        break;
  494|       |
  495|    576|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 576, False: 49.1k]
  ------------------
  496|  1.95k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 1.37k, False: 48.3k]
  ------------------
  497|  1.95k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 1.81k, False: 134]
  |  Branch (497:29): [True: 641, False: 1.31k]
  |  Branch (497:45): [True: 1.29k, False: 521]
  |  Branch (497:61): [True: 641, False: 657]
  ------------------
  498|    641|                        {
  499|    641|                            return OpCode::JALR;
  500|    641|                        }
  501|  1.31k|                        break;
  502|       |
  503|  5.17k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 5.17k, False: 44.5k]
  ------------------
  504|  5.49k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 324, False: 49.3k]
  ------------------
  505|  5.49k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.55k, False: 2.94k]
  |  Branch (505:29): [True: 1.58k, False: 3.90k]
  |  Branch (505:45): [True: 1.58k, False: 967]
  ------------------
  506|  1.58k|                        {
  507|  1.58k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 285, False: 1.30k]
  ------------------
  508|    285|                            {
  509|    285|                                return OpCode::MOVD;
  510|    285|                            }
  511|  1.30k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 158, False: 1.14k]
  ------------------
  512|    158|                            {
  513|    158|                                return OpCode::MOVF;
  514|    158|                            }
  515|  1.58k|                        }
  516|  3.90k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.80k, False: 1.10k]
  |  Branch (516:34): [True: 2.66k, False: 1.24k]
  |  Branch (516:50): [True: 2.73k, False: 66]
  |  Branch (516:66): [True: 2.66k, False: 72]
  ------------------
  517|  2.66k|                        {
  518|  2.66k|                            return OpCode::MULT;
  519|  2.66k|                        }
  520|  2.38k|                        break;
  521|       |
  522|  15.7k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 15.7k, False: 33.9k]
  ------------------
  523|  16.8k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 1.05k, False: 48.6k]
  ------------------
  524|  16.8k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 203, False: 16.6k]
  ------------------
  525|  16.8k|                        {
  526|  2.51k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 2.51k, False: 14.3k]
  ------------------
  527|  2.77k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 261, False: 16.5k]
  ------------------
  528|  2.77k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 2.70k, False: 66]
  ------------------
  529|  2.70k|                                {
  530|  2.70k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 606, False: 2.10k]
  ------------------
  531|    606|                                    {
  532|    606|                                        return OpCode::SEQI;
  533|    606|                                    }
  534|  2.10k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 2.03k, False: 66]
  ------------------
  535|  2.03k|                                    {
  536|  2.03k|                                        return OpCode::SEQU;
  537|  2.03k|                                    }
  538|  2.70k|                                }
  539|    132|                                break;
  540|       |
  541|  3.70k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 3.70k, False: 13.1k]
  ------------------
  542|  4.75k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.04k, False: 15.7k]
  ------------------
  543|  4.75k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.82k, False: 2.93k]
  ------------------
  544|  1.82k|                                {
  545|  1.82k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.55k, False: 263]
  ------------------
  546|  1.55k|                                    {
  547|  1.55k|                                        return OpCode::SGEI;
  548|  1.55k|                                    }
  549|    263|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 197, False: 66]
  ------------------
  550|    197|                                    {
  551|    197|                                        return OpCode::SGEU;
  552|    197|                                    }
  553|  1.82k|                                }
  554|  2.93k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 2.86k, False: 67]
  ------------------
  555|  2.86k|                                {
  556|  2.86k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 157, False: 2.71k]
  ------------------
  557|    157|                                    {
  558|    157|                                        return OpCode::SGTI;
  559|    157|                                    }
  560|  2.71k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.99k, False: 715]
  ------------------
  561|  1.99k|                                    {
  562|  1.99k|                                        return OpCode::SGTU;
  563|  1.99k|                                    }
  564|  2.86k|                                }
  565|    848|                                break;
  566|       |
  567|  1.65k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 1.65k, False: 15.1k]
  ------------------
  568|  3.44k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 1.78k, False: 15.0k]
  ------------------
  569|  3.44k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 84, False: 3.36k]
  ------------------
  570|  3.44k|                                {
  571|     98|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 98, False: 3.34k]
  ------------------
  572|    230|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 132, False: 3.31k]
  ------------------
  573|    230|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 163, False: 67]
  ------------------
  574|    163|                                        {
  575|    163|                                            return OpCode::SLAI;
  576|    163|                                        }
  577|     67|                                        break;
  578|       |
  579|    330|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 330, False: 3.11k]
  ------------------
  580|    656|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 326, False: 3.12k]
  ------------------
  581|    656|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 281, False: 375]
  ------------------
  582|    281|                                        {
  583|    281|                                            return OpCode::SLEI;
  584|    281|                                        }
  585|    375|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 181, False: 194]
  ------------------
  586|    181|                                        {
  587|    181|                                            return OpCode::SLEU;
  588|    181|                                        }
  589|    194|                                        break;
  590|       |
  591|    224|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 224, False: 3.22k]
  ------------------
  592|  1.30k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.07k, False: 2.36k]
  ------------------
  593|  1.30k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 695, False: 608]
  ------------------
  594|    695|                                        {
  595|    695|                                            return OpCode::SLLI;
  596|    695|                                        }
  597|    608|                                        break;
  598|       |
  599|  1.03k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.03k, False: 2.41k]
  ------------------
  600|  1.17k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 138, False: 3.30k]
  ------------------
  601|  1.17k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 928, False: 246]
  ------------------
  602|    928|                                        {
  603|    928|                                            return OpCode::SLTI;
  604|    928|                                        }
  605|    246|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 167, False: 79]
  ------------------
  606|    167|                                        {
  607|    167|                                            return OpCode::SLTU;
  608|    167|                                        }
  609|     79|                                        break;
  610|  3.44k|                                }
  611|       |
  612|  1.21k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 182, False: 16.6k]
  ------------------
  613|  1.40k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 188, False: 16.6k]
  ------------------
  614|  1.40k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 564, False: 838]
  ------------------
  615|    564|                                {
  616|    564|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 157, False: 407]
  ------------------
  617|    157|                                    {
  618|    157|                                        return OpCode::SNEI;
  619|    157|                                    }
  620|    407|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 157, False: 250]
  ------------------
  621|    157|                                    {
  622|    157|                                        return OpCode::SNEU;
  623|    157|                                    }
  624|    564|                                }
  625|  1.08k|                                break;
  626|       |
  627|  2.04k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 2.04k, False: 14.7k]
  ------------------
  628|  2.20k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 155, False: 16.6k]
  ------------------
  629|  2.20k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 357, False: 1.84k]
  |  Branch (629:37): [True: 272, False: 1.92k]
  |  Branch (629:53): [True: 272, False: 85]
  ------------------
  630|    272|                                {
  631|    272|                                    return OpCode::SRAI;
  632|    272|                                }
  633|  1.92k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.84k, False: 85]
  |  Branch (633:42): [True: 1.77k, False: 151]
  |  Branch (633:58): [True: 1.77k, False: 66]
  ------------------
  634|  1.77k|                                {
  635|  1.77k|                                    return OpCode::SRLI;
  636|  1.77k|                                }
  637|    151|                                break;
  638|       |
  639|  2.85k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 2.85k, False: 13.9k]
  ------------------
  640|  3.07k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 220, False: 16.6k]
  ------------------
  641|  3.07k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 3.00k, False: 66]
  ------------------
  642|  3.00k|                                {
  643|  3.00k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 66, False: 2.94k]
  ------------------
  644|  3.00k|                                    {
  645|    358|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 358, False: 2.64k]
  ------------------
  646|    424|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 2.94k]
  ------------------
  647|    424|                                            return OpCode::SUBD;
  648|       |
  649|    705|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 705, False: 2.30k]
  ------------------
  650|    803|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 98, False: 2.90k]
  ------------------
  651|    803|                                            return OpCode::SUBF;
  652|       |
  653|    234|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 234, False: 2.77k]
  ------------------
  654|    300|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 2.94k]
  ------------------
  655|    300|                                            return OpCode::SUBI;
  656|       |
  657|  1.34k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 1.34k, False: 1.65k]
  ------------------
  658|  1.41k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 2.94k]
  ------------------
  659|  1.41k|                                            return OpCode::SUBU;
  660|  3.00k|                                    }
  661|  3.00k|                                }
  662|    132|                                break;
  663|  16.8k|                        }
  664|  2.55k|                        break;
  665|       |
  666|  2.55k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 172, False: 49.5k]
  ------------------
  667|    447|                    case 't':
  ------------------
  |  Branch (667:21): [True: 275, False: 49.4k]
  ------------------
  668|    447|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 352, False: 95]
  |  Branch (668:29): [True: 220, False: 227]
  |  Branch (668:45): [True: 286, False: 66]
  |  Branch (668:61): [True: 220, False: 66]
  ------------------
  669|    220|                        {
  670|    220|                            return OpCode::TRAP;
  671|    220|                        }
  672|    227|                        break;
  673|    774|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 774, False: 48.9k]
  ------------------
  674|  1.95k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.18k, False: 48.5k]
  ------------------
  675|  1.95k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.42k, False: 529]
  |  Branch (675:29): [True: 1.18k, False: 775]
  |  Branch (675:45): [True: 1.33k, False: 98]
  |  Branch (675:61): [True: 1.18k, False: 148]
  ------------------
  676|  1.18k|                        {
  677|  1.18k|                            return OpCode::XORI;
  678|  1.18k|                        }
  679|    775|                        break;
  680|  49.7k|                }
  681|  18.0k|                break;
  682|  49.7k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  18.0k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 6.08k, False: 137k]
  ------------------
  686|  6.08k|                char c1 = token[0];
  687|  6.08k|                char c2 = token[1];
  688|  6.08k|                char c3 = token[2];
  689|  6.08k|                char c4 = token[3];
  690|  6.08k|                char c5 = token[4];
  691|       |
  692|  6.08k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 1.17k, False: 4.90k]
  ------------------
  693|  6.08k|                {
  694|    529|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 529, False: 5.55k]
  ------------------
  695|    529|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 6.08k]
  ------------------
  696|    529|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 529, False: 0]
  |  Branch (696:29): [True: 529, False: 0]
  |  Branch (696:45): [True: 529, False: 0]
  |  Branch (696:61): [True: 529, False: 0]
  |  Branch (696:77): [True: 529, False: 0]
  ------------------
  697|    529|                        {
  698|    529|                            return OpCode::ADDUI;
  699|    529|                        }
  700|      0|                        break;
  701|       |
  702|    464|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 464, False: 5.61k]
  ------------------
  703|    464|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 6.08k]
  ------------------
  704|    464|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 464, False: 0]
  |  Branch (704:29): [True: 464, False: 0]
  |  Branch (704:45): [True: 464, False: 0]
  |  Branch (704:61): [True: 464, False: 0]
  |  Branch (704:77): [True: 464, False: 0]
  ------------------
  705|    464|                        {
  706|    464|                            return OpCode::DIVUI;
  707|    464|                        }
  708|      0|                        break;
  709|       |
  710|  1.93k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 1.93k, False: 4.14k]
  ------------------
  711|  1.93k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 6.08k]
  ------------------
  712|  1.93k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 1.93k, False: 0]
  |  Branch (712:29): [True: 1.93k, False: 0]
  |  Branch (712:45): [True: 1.93k, False: 0]
  |  Branch (712:61): [True: 1.93k, False: 0]
  ------------------
  713|  1.93k|                        {
  714|  1.93k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 1.93k]
  ------------------
  715|  1.93k|                            {
  716|    111|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 111, False: 1.82k]
  ------------------
  717|    111|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 1.93k]
  ------------------
  718|    111|                                    return OpCode::MULTD;
  719|       |
  720|    959|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 959, False: 976]
  ------------------
  721|    959|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 1.93k]
  ------------------
  722|    959|                                    return OpCode::MULTF;
  723|       |
  724|    228|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 228, False: 1.70k]
  ------------------
  725|    228|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 1.93k]
  ------------------
  726|    228|                                    return OpCode::MULTI;
  727|       |
  728|    637|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 637, False: 1.29k]
  ------------------
  729|    637|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 1.93k]
  ------------------
  730|    637|                                    return OpCode::MULTU;
  731|  1.93k|                            }
  732|  1.93k|                        }
  733|      0|                        break;
  734|       |
  735|  1.97k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 1.97k, False: 4.10k]
  ------------------
  736|  1.97k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 6.08k]
  ------------------
  737|  1.97k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 1.97k]
  ------------------
  738|  1.97k|                        {
  739|    480|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 480, False: 1.49k]
  ------------------
  740|    480|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 1.97k]
  ------------------
  741|    480|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 480, False: 0]
  |  Branch (741:37): [True: 480, False: 0]
  |  Branch (741:53): [True: 480, False: 0]
  |  Branch (741:69): [True: 480, False: 0]
  ------------------
  742|    480|                                {
  743|    480|                                    return OpCode::SEQUI;
  744|    480|                                }
  745|      0|                                break;
  746|       |
  747|    701|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 701, False: 1.27k]
  ------------------
  748|    701|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 1.97k]
  ------------------
  749|    701|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 615, False: 86]
  |  Branch (749:37): [True: 615, False: 86]
  |  Branch (749:53): [True: 615, False: 0]
  |  Branch (749:69): [True: 615, False: 0]
  ------------------
  750|    615|                                {
  751|    615|                                    return OpCode::SGEUI;
  752|    615|                                }
  753|     86|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:58): [True: 86, False: 0]
  |  Branch (753:74): [True: 86, False: 0]
  ------------------
  754|     86|                                {
  755|     86|                                    return OpCode::SGTUI;
  756|     86|                                }
  757|      0|                                break;
  758|       |
  759|    488|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 488, False: 1.48k]
  ------------------
  760|    488|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 1.97k]
  ------------------
  761|    488|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 384, False: 104]
  |  Branch (761:37): [True: 384, False: 104]
  |  Branch (761:53): [True: 384, False: 0]
  |  Branch (761:69): [True: 384, False: 0]
  ------------------
  762|    384|                                {
  763|    384|                                    return OpCode::SLEUI;
  764|    384|                                }
  765|    104|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 104, False: 0]
  |  Branch (765:42): [True: 104, False: 0]
  |  Branch (765:58): [True: 104, False: 0]
  |  Branch (765:74): [True: 104, False: 0]
  ------------------
  766|    104|                                {
  767|    104|                                    return OpCode::SLTUI;
  768|    104|                                }
  769|      0|                                break;
  770|       |
  771|    190|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 190, False: 1.78k]
  ------------------
  772|    190|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 1.97k]
  ------------------
  773|    190|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 190, False: 0]
  |  Branch (773:37): [True: 190, False: 0]
  |  Branch (773:53): [True: 190, False: 0]
  |  Branch (773:69): [True: 190, False: 0]
  ------------------
  774|    190|                                {
  775|    190|                                    return OpCode::SNEUI;
  776|    190|                                }
  777|      0|                                break;
  778|       |
  779|    116|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 116, False: 1.85k]
  ------------------
  780|    116|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 1.97k]
  ------------------
  781|    116|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 116, False: 0]
  |  Branch (781:37): [True: 116, False: 0]
  |  Branch (781:53): [True: 116, False: 0]
  |  Branch (781:69): [True: 116, False: 0]
  ------------------
  782|    116|                                {
  783|    116|                                    return OpCode::SUBUI;
  784|    116|                                }
  785|      0|                                break;
  786|  1.97k|                        }
  787|       |
  788|      0|                        break;
  789|  6.08k|                }
  790|       |
  791|  1.17k|                break;
  792|  6.08k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  1.17k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 1.07k, False: 142k]
  ------------------
  796|  1.07k|                char c1 = token[0];
  797|  1.07k|                char c2 = token[1];
  798|  1.07k|                char c3 = token[2];
  799|  1.07k|                char c4 = token[3];
  800|  1.07k|                char c5 = token[4];
  801|  1.07k|                char c6 = token[5];
  802|       |
  803|  1.07k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 613, False: 461]
  |  Branch (803:21): [True: 613, False: 461]
  |  Branch (803:37): [True: 613, False: 0]
  |  Branch (803:53): [True: 613, False: 0]
  ------------------
  804|    613|                {
  805|    613|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 613]
  ------------------
  806|    613|                    {
  807|    234|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 234, False: 379]
  ------------------
  808|    234|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 613]
  ------------------
  809|    234|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 234, False: 0]
  ------------------
  810|    234|                            {
  811|    234|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 80, False: 154]
  ------------------
  812|     80|                                {
  813|     80|                                    return OpCode::CVTD2F;
  814|     80|                                }
  815|    154|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 154, False: 0]
  ------------------
  816|    154|                                {
  817|    154|                                    return OpCode::CVTD2I;
  818|    154|                                }
  819|    234|                            }
  820|      0|                            break;
  821|       |
  822|    176|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 176, False: 437]
  ------------------
  823|    176|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 613]
  ------------------
  824|    176|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 176, False: 0]
  ------------------
  825|    176|                            {
  826|    176|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 81, False: 95]
  ------------------
  827|     81|                                {
  828|     81|                                    return OpCode::CVTF2D;
  829|     81|                                }
  830|     95|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 95, False: 0]
  ------------------
  831|     95|                                {
  832|     95|                                    return OpCode::CVTF2I;
  833|     95|                                }
  834|    176|                            }
  835|      0|                            break;
  836|       |
  837|    203|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 203, False: 410]
  ------------------
  838|    203|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 613]
  ------------------
  839|    203|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 203, False: 0]
  ------------------
  840|    203|                            {
  841|    203|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 122, False: 81]
  ------------------
  842|    122|                                {
  843|    122|                                    return OpCode::CVTI2D;
  844|    122|                                }
  845|     81|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 81, False: 0]
  ------------------
  846|     81|                                {
  847|     81|                                    return OpCode::CVTI2F;
  848|     81|                                }
  849|    203|                            }
  850|    613|                    }
  851|    613|                }
  852|    461|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 171, False: 290]
  |  Branch (852:26): [True: 171, False: 290]
  |  Branch (852:42): [True: 171, False: 0]
  |  Branch (852:58): [True: 171, False: 0]
  |  Branch (852:74): [True: 171, False: 0]
  ------------------
  853|    461|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 171, False: 0]
  |  Branch (853:42): [True: 171, False: 0]
  ------------------
  854|    171|                {
  855|    171|                    return OpCode::MULTUI;
  856|    171|                }
  857|    290|                break;
  858|  1.07k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  1.66k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 1.66k, False: 141k]
  ------------------
  862|  1.66k|                char c1 = token[0];
  863|  1.66k|                char c2 = token[1];
  864|  1.66k|                char c3 = token[2];
  865|  1.66k|                char c4 = token[3];
  866|  1.66k|                char c5 = token[4];
  867|  1.66k|                char c6 = token[5];
  868|  1.66k|                char c7 = token[6];
  869|       |
  870|  1.66k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 1.50k, False: 157]
  |  Branch (870:21): [True: 1.50k, False: 157]
  |  Branch (870:37): [True: 1.50k, False: 0]
  |  Branch (870:53): [True: 1.50k, False: 0]
  ------------------
  871|  1.50k|                {
  872|  1.50k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.12k, False: 380]
  |  Branch (872:25): [True: 1.12k, False: 380]
  |  Branch (872:41): [True: 1.12k, False: 0]
  |  Branch (872:54): [True: 1.12k, False: 0]
  |  Branch (872:70): [True: 1.12k, False: 0]
  ------------------
  873|  1.12k|                    {
  874|  1.12k|                        return OpCode::MOVI2FP;
  875|  1.12k|                    }
  876|    380|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 380, False: 0]
  |  Branch (876:30): [True: 380, False: 0]
  |  Branch (876:46): [True: 380, False: 0]
  |  Branch (876:62): [True: 380, False: 0]
  |  Branch (876:75): [True: 380, False: 0]
  ------------------
  877|    380|                    {
  878|    380|                        return OpCode::MOVFP2I;
  879|    380|                    }
  880|  1.50k|                }
  881|    157|                break;
  882|  1.66k|            }
  883|       |
  884|  11.8k|            default: {
  ------------------
  |  Branch (884:13): [True: 11.8k, False: 131k]
  ------------------
  885|  11.8k|                break;
  886|  1.66k|            }
  887|   143k|        }
  888|       |
  889|       |        // None found
  890|  56.9k|        return OpCode::NONE;
  891|   143k|    }
_ZN3dlx3iceEcc:
   17|   224k|    {
   18|   224k|        constexpr const char diff = 'a' - 'A';
   19|   224k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 134k, False: 89.6k]
  |  Branch (19:28): [True: 32.3k, False: 57.2k]
  ------------------
   20|   224k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   156k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  1.53k|    {
  193|  1.53k|        ParseError err;
  194|       |
  195|  1.53k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  1.53k|        err.m_LineNumber                           = line_number;
  197|  1.53k|        err.m_Column                               = column;
  198|  1.53k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  1.53k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  1.53k|        return err;
  202|  1.53k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  1.53k|    {
  207|  1.53k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  1.53k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  1.53k|                                                         actual_type);
  210|  1.53k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    102|    {
  216|    102|        ParseError err;
  217|       |
  218|    102|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    102|        err.m_LineNumber        = line_number;
  220|    102|        err.m_Column            = column;
  221|    102|        err.invalid_number.text = text;
  222|       |
  223|    102|        return err;
  224|    102|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    102|    {
  228|    102|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    102|                                                token.GetColumn().unsafe(), token.GetText());
  230|    102|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      5|    {
  235|      5|        ParseError err;
  236|       |
  237|      5|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      5|        err.m_LineNumber = line_number;
  239|      5|        err.m_Column     = column;
  240|       |
  241|      5|        return err;
  242|      5|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      5|    {
  247|      5|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      5|                                                                     token.GetColumn().unsafe());
  249|      5|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  49.0k|    {
  255|  49.0k|        ParseError err;
  256|       |
  257|  49.0k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  49.0k|        err.m_LineNumber                   = line_number;
  259|  49.0k|        err.m_Column                       = column;
  260|  49.0k|        err.unexpected_token.expected_type = expected_type;
  261|  49.0k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  49.0k|        return err;
  264|  49.0k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  49.0k|    {
  269|  49.0k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  49.0k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  49.0k|                                                  token.GetType());
  272|  49.0k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  1.60k|    {
  277|  1.60k|        ParseError err;
  278|       |
  279|  1.60k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  1.60k|        err.m_LineNumber                   = line_number;
  281|  1.60k|        err.m_Column                       = column;
  282|  1.60k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  1.60k|        return err;
  285|  1.60k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    874|    {
  289|    874|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    874|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    874|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  37.9k|    {
  296|  37.9k|        ParseError err;
  297|       |
  298|  37.9k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  37.9k|        err.m_LineNumber                       = line_number;
  300|  37.9k|        err.m_Column                           = column;
  301|  37.9k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  37.9k|        return err;
  304|  37.9k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  37.9k|    {
  309|  37.9k|        return ConstructInvalidLabelIdentifierParseError(
  310|  37.9k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  37.9k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  3.04k|    {
  317|  3.04k|        ParseError err;
  318|       |
  319|  3.04k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  3.04k|        err.m_LineNumber                     = line_number;
  321|  3.04k|        err.m_Column                         = column;
  322|  3.04k|        err.label_already_defined.label_name = label_name;
  323|  3.04k|        err.label_already_defined.at_line    = at_line;
  324|  3.04k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  3.04k|        return err;
  327|  3.04k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  3.04k|    {
  332|  3.04k|        return ConstructLabelAlreadyDefinedParseError(
  333|  3.04k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  3.04k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  3.04k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  49.7k|    {
  340|  49.7k|        ParseError err;
  341|       |
  342|  49.7k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  49.7k|        err.m_LineNumber = line_number;
  344|  49.7k|        err.m_Column     = column;
  345|       |
  346|  49.7k|        return err;
  347|  49.7k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  49.7k|    {
  352|  49.7k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  49.7k|                                                        token.GetColumn().unsafe());
  354|  49.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  12.5k|    {
  360|  12.5k|        ParseError err;
  361|       |
  362|  12.5k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  12.5k|        err.m_LineNumber               = line_number;
  364|  12.5k|        err.m_Column                   = column;
  365|  12.5k|        err.too_few_arguments.required = required;
  366|  12.5k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  12.5k|        return err;
  369|  12.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  12.5k|    {
  374|  12.5k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  12.5k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  12.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.10k|    {
  381|  1.10k|        ParseError err;
  382|       |
  383|  1.10k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.10k|        err.m_LineNumber           = line_number;
  385|  1.10k|        err.m_Column               = column;
  386|  1.10k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.10k|        return err;
  389|  1.10k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.10k|    {
  393|  1.10k|        return ConstructEmptyLabelParseError(
  394|  1.10k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.10k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 996, False: 113]
  ------------------
  396|    996|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.10k|                        token.GetText());
  398|  1.10k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    153|    {
  403|    153|        ParseError err;
  404|       |
  405|    153|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    153|        err.m_LineNumber = line_number;
  407|    153|        err.m_Column     = column;
  408|       |
  409|    153|        return err;
  410|    153|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    153|    {
  414|    153|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    153|                                               token.GetColumn().unsafe());
  416|    153|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   156k|    {
   19|   156k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   156k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.41k|    {
  182|  4.41k|        ParsedProgram program;
  183|       |
  184|  4.41k|        program.m_Tokens = tokens;
  185|       |
  186|  4.41k|        phi::boolean line_has_instruction{false};
  187|  4.41k|        phi::usize   label_count{0u};
  188|       |
  189|   352k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 348k, False: 4.41k]
  ------------------
  190|   348k|        {
  191|   348k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   348k|            switch (current_token.GetType())
  196|   348k|            {
  197|       |                // Ignore comments
  198|  54.6k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 54.6k, False: 293k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  54.6k|                    break;
  201|       |
  202|   128k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 128k, False: 220k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   128k|                    line_has_instruction = false;
  205|   128k|                    break;
  206|       |
  207|  43.3k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 43.3k, False: 304k]
  ------------------
  208|  43.3k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 2.52k, False: 40.8k]
  ------------------
  209|  2.52k|                    {
  210|  2.52k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  2.52k|                                current_token, Token::Type::NewLine));
  212|  2.52k|                        break;
  213|  2.52k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  40.8k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 34.2k, False: 6.54k]
  ------------------
  218|  34.2k|                    {
  219|  34.2k|                        program.AddParseError(
  220|  34.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  34.2k|                        break;
  222|  34.2k|                    }
  223|       |
  224|  6.54k|                    std::string_view label_name = current_token.GetText();
  225|  6.54k|                    label_name.remove_suffix(1);
  226|       |
  227|  6.54k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 735, False: 5.81k]
  ------------------
  228|    735|                    {
  229|    735|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|    735|                                current_token.GetLineNumber().unsafe(),
  231|    735|                                current_token.GetColumn().unsafe(), label_name));
  232|    735|                        break;
  233|    735|                    }
  234|       |
  235|  5.81k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 1.13k, False: 4.68k]
  ------------------
  236|  1.13k|                    {
  237|  1.13k|                        program.AddParseError(
  238|  1.13k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  1.13k|                        break;
  240|  1.13k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  4.68k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 3.04k, False: 1.63k]
  ------------------
  244|  3.04k|                    {
  245|       |                        // Find first defintions of label
  246|  3.04k|                        const Token* first_label_definition =
  247|  3.04k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  3.04k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  3.04k|                                    {
  250|  3.04k|                                        std::string_view token_label_name = t.GetText();
  251|  3.04k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  3.04k|                                        if (token_label_name == label_name)
  254|  3.04k|                                        {
  255|  3.04k|                                            return true;
  256|  3.04k|                                        }
  257|  3.04k|                                    }
  258|       |
  259|  3.04k|                                    return false;
  260|  3.04k|                                });
  261|       |
  262|  3.04k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  3.04k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  3.04k|                                current_token, *first_label_definition));
  266|  3.04k|                        break;
  267|  3.04k|                    }
  268|       |
  269|  1.63k|                    program.m_JumpData[label_name] =
  270|  1.63k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  1.63k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  1.63k|                    break;
  277|  4.68k|                }
  278|       |
  279|  82.2k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 82.2k, False: 266k]
  ------------------
  280|  82.2k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 49.7k, False: 32.4k]
  ------------------
  281|  49.7k|                    {
  282|  49.7k|                        program.AddParseError(
  283|  49.7k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  49.7k|                        break;
  285|  49.7k|                    }
  286|       |
  287|  32.4k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  32.4k|                    PHI_ASSERT(current_token.HasHint());
  291|  32.4k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  32.4k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  32.4k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  32.4k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  32.4k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  32.4k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  32.4k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  32.4k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  32.4k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  54.5k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 46.4k, False: 8.09k]
  ------------------
  313|  46.4k|                    {
  314|       |                        // Get next token
  315|  46.4k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 173, False: 46.2k]
  ------------------
  316|    173|                        {
  317|    173|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    173|                                    current_token, number_of_argument_required.unsafe(),
  319|    173|                                    argument_num.unsafe()));
  320|    173|                            break;
  321|    173|                        }
  322|       |
  323|  46.2k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  46.2k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 5.66k, False: 40.6k]
  ------------------
  327|  5.66k|                        {
  328|  5.66k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 153, False: 5.50k]
  ------------------
  329|    153|                            {
  330|    153|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    153|                            }
  332|       |
  333|  5.66k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  5.66k|                            continue;
  336|  5.66k|                        }
  337|       |
  338|  40.6k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 12.4k, False: 28.2k]
  ------------------
  339|  12.4k|                        {
  340|  12.4k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  12.4k|                                    token, number_of_argument_required.unsafe(),
  342|  12.4k|                                    argument_num.unsafe()));
  343|  12.4k|                            break;
  344|  12.4k|                        }
  345|       |
  346|  28.2k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  28.2k|                                parse_instruction_argument(
  348|  28.2k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  28.2k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 11.7k, False: 16.4k]
  ------------------
  350|  11.7k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  11.7k|                            break;
  353|  11.7k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  16.4k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  16.4k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  16.4k|                        argument_num++;
  360|  16.4k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  16.4k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  32.4k|                    program.m_Instructions.emplace_back(instruction);
  368|  32.4k|                    line_has_instruction = true;
  369|  32.4k|                    break;
  370|  82.2k|                }
  371|       |
  372|  39.8k|                default:
  ------------------
  |  Branch (372:17): [True: 39.8k, False: 308k]
  ------------------
  373|  39.8k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  39.8k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 24.6k, False: 15.1k]
  ------------------
  375|  24.6k|                    {
  376|  24.6k|                        expected_token_type = Token::Type::NewLine;
  377|  24.6k|                    }
  378|       |
  379|  39.8k|                    program.AddParseError(
  380|  39.8k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  39.8k|                    break;
  382|   348k|            }
  383|   348k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.41k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 181, False: 4.23k]
  ------------------
  387|    181|        {
  388|  1.89k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 1.71k, False: 181]
  ------------------
  389|  1.71k|            {
  390|  1.71k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  1.71k|                const Token& token = *it;
  393|  1.71k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.10k, False: 605]
  ------------------
  394|  1.10k|                {
  395|  1.10k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.10k|                    --label_count;
  397|  1.10k|                }
  398|  1.71k|            }
  399|    181|        }
  400|       |
  401|  4.41k|        return program;
  402|  4.41k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.41k|    {
  406|  4.41k|        TokenStream tokens = Tokenize(source);
  407|  4.41k|        return Parse(tokens);
  408|  4.41k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  28.2k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  28.2k|        switch (token.GetType())
   38|  28.2k|        {
   39|    846|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 846, False: 27.3k]
  ------------------
   40|    846|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 88, False: 758]
  ------------------
   41|    846|                                          ArgumentType::AddressDisplacement))
   42|     88|                {
   43|     88|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|     88|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|     88|                    return {};
   47|     88|                }
   48|       |
   49|       |                // Get address displacement
   50|    758|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    758|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    758|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 5, False: 753]
  ------------------
   55|      5|                {
   56|      5|                    program.AddParseError(
   57|      5|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      5|                    return {};
   59|      5|                }
   60|       |
   61|    753|                auto         it           = tokens.current_position();
   62|    753|                const Token& first_token  = tokens.consume();
   63|    753|                const Token& second_token = tokens.consume();
   64|    753|                const Token& third_token  = tokens.consume();
   65|       |
   66|    753|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 753, False: 0]
  ------------------
   67|    753|                {
   68|    753|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    753|                            first_token, Token::Type::OpenBracket));
   70|    753|                    return {};
   71|    753|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  9.26k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 9.26k, False: 18.9k]
  ------------------
   98|  9.26k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 80, False: 9.18k]
  ------------------
   99|     80|                {
  100|     80|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|     80|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|     80|                    return {};
  103|     80|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  9.18k|                return ConstructInstructionArgumentRegisterInt(
  109|  9.18k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  9.26k|            }
  111|  4.28k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 4.28k, False: 23.9k]
  ------------------
  112|  4.28k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 607, False: 3.67k]
  ------------------
  113|    607|                {
  114|    607|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    607|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    607|                    return {};
  117|    607|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  3.67k|                return ConstructInstructionArgumentRegisterFloat(
  123|  3.67k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  4.28k|            }
  125|    874|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 874, False: 27.3k]
  ------------------
  126|    874|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    874|                return {};
  129|  4.28k|            }
  130|  3.97k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 3.97k, False: 24.2k]
  ------------------
  131|       |                // Parse as Label
  132|  3.97k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 219, False: 3.75k]
  ------------------
  133|    219|                {
  134|    219|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|    219|                            token, expected_argument_type, ArgumentType::Label));
  136|    219|                    return {};
  137|    219|                }
  138|       |
  139|  3.75k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 3.75k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  3.75k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 2.52k, False: 1.23k]
  ------------------
  146|  2.52k|                {
  147|  2.52k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  2.52k|                    return {};
  149|  2.52k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  1.23k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  3.75k|            }
  155|  2.99k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.99k, False: 25.2k]
  ------------------
  156|  2.99k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 538, False: 2.45k]
  ------------------
  157|    538|                {
  158|    538|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    538|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    538|                    return {};
  161|    538|                }
  162|       |
  163|  2.45k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.35k, False: 102]
  ------------------
  164|  2.35k|                {
  165|  2.35k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.35k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.35k|                }
  168|       |
  169|    102|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    102|                return {};
  171|  2.45k|            }
  172|       |
  173|  5.99k|            default:
  ------------------
  |  Branch (173:13): [True: 5.99k, False: 22.2k]
  ------------------
  174|  5.99k|                program.AddParseError(
  175|  5.99k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  5.99k|                return {};
  177|  28.2k|        }
  178|  28.2k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  34.8k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  34.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 13.1k, False: 21.6k]
  ------------------
  249|  13.1k|                                    {
  250|  13.1k|                                        std::string_view token_label_name = t.GetText();
  251|  13.1k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  13.1k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 3.04k, False: 10.1k]
  ------------------
  254|  3.04k|                                        {
  255|  3.04k|                                            return true;
  256|  3.04k|                                        }
  257|  13.1k|                                    }
  258|       |
  259|  31.7k|                                    return false;
  260|  34.8k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.70M|    {
   71|  2.70M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.70M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.70M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.70M|        return m_IntRegisters[id_value];
   77|  2.70M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  3.90M|    {
   82|  3.90M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  3.90M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  3.90M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  3.90M|        return m_IntRegisters[id_value];
   88|  3.90M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  2.43M|    {
   92|  2.43M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  2.43M|                                             RegisterAccessType::Signed),
   94|  2.43M|                   "Mismatch for instruction access type");
   95|       |
   96|  2.43M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  2.43M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  2.43M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  2.43M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 1.67M, False: 759k]
  ------------------
  101|  2.43M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 631k, False: 1.04M]
  ------------------
  102|   631k|        {
  103|   631k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   631k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   631k|        }
  105|       |
  106|  2.43M|        return GetIntRegister(id).GetSignedValue();
  107|  2.43M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  1.47M|    {
  111|  1.47M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  1.47M|                                             RegisterAccessType::Unsigned),
  113|  1.47M|                   "Mismatch for instruction access type");
  114|       |
  115|  1.47M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  1.47M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  1.47M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  1.47M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 780k, False: 691k]
  ------------------
  120|  1.47M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 463k, False: 317k]
  ------------------
  121|   463k|        {
  122|   463k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   463k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   463k|        }
  124|       |
  125|  1.47M|        return GetIntRegister(id).GetUnsignedValue();
  126|  1.47M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  1.55M|    {
  130|  1.55M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  1.55M|                                             RegisterAccessType::Signed),
  132|  1.55M|                   "Mismatch for instruction access type");
  133|       |
  134|  1.55M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  1.55M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 383k, False: 1.17M]
  ------------------
  137|   383k|        {
  138|   383k|            return;
  139|   383k|        }
  140|       |
  141|  1.17M|        reg.SetSignedValue(value);
  142|       |
  143|  1.17M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.17M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.17M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.17M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.15M|    {
  151|  1.15M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.15M|                                             RegisterAccessType::Unsigned),
  153|  1.15M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.15M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.15M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 220k, False: 931k]
  ------------------
  158|   220k|        {
  159|   220k|            return;
  160|   220k|        }
  161|       |
  162|   931k|        reg.SetUnsignedValue(value);
  163|       |
  164|   931k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   931k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   931k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   931k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.88M|    {
  172|  1.88M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.88M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.88M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.88M|        return m_FloatRegisters[id_value];
  178|  1.88M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   613k|    {
  183|   613k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   613k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   613k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   613k|        return m_FloatRegisters[id_value];
  189|   613k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   613k|    {
  193|   613k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   613k|                                             RegisterAccessType::Float),
  195|   613k|                   "Mismatch for instruction access type");
  196|       |
  197|   613k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   613k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   613k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   613k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 595k, False: 17.8k]
  ------------------
  202|   613k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 217k, False: 378k]
  ------------------
  203|   217k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   217k|        }
  208|       |
  209|   613k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   613k|        return reg.GetValue();
  212|   613k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   765k|    {
  216|   765k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   765k|                                             RegisterAccessType::Double),
  218|   765k|                   "Mismatch for instruction access type");
  219|       |
  220|   765k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 13, False: 765k]
  ------------------
  221|     13|        {
  222|     13|            Raise(Exception::MisalignedRegisterAccess);
  223|     13|            return {0.0};
  224|     13|        }
  225|       |
  226|   765k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   765k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   765k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   765k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 750k, False: 15.1k]
  ------------------
  231|   765k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 538k, False: 211k]
  ------------------
  232|   538k|        {
  233|   538k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   538k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   538k|        }
  235|       |
  236|   765k|        const FloatRegisterValueType register_value_type_high =
  237|   765k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   765k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 750k, False: 15.1k]
  ------------------
  239|   765k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 258, False: 749k]
  ------------------
  240|    258|        {
  241|    258|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|    258|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|    258|        }
  243|       |
  244|   765k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   765k|        const FloatRegister& second_reg =
  246|   765k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   765k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   765k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   765k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   765k|        const std::uint32_t first_value_bits =
  255|   765k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   765k|        const std::uint32_t second_value_bits =
  257|   765k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   765k|        std::uint64_t final_value_bits =
  260|   765k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   765k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   765k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   765k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   183k|    {
  269|   183k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   183k|                                             RegisterAccessType::Float),
  271|   183k|                   "Mismatch for instruction access type");
  272|       |
  273|   183k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   183k|        reg.SetValue(value);
  276|       |
  277|   183k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   183k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   183k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   183k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|  85.1k|    {
  285|  85.1k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|  85.1k|                                             RegisterAccessType::Double),
  287|  85.1k|                   "Mismatch for instruction access type");
  288|       |
  289|  85.1k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 85.1k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|  85.1k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|  85.1k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|  85.1k|        double              value_raw  = value.unsafe();
  299|  85.1k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|  85.1k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|  85.1k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|  85.1k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|  85.1k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|  85.1k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|  85.1k|        FloatRegister& second_reg =
  309|  85.1k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|  85.1k|        first_reg.SetValue(first_value);
  312|  85.1k|        second_reg.SetValue(second_value);
  313|       |
  314|  85.1k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|  85.1k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|  85.1k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|  85.1k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|  85.1k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   500k|    {
  323|   500k|        return m_FPSR;
  324|   500k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   865k|    {
  328|   865k|        return m_FPSR;
  329|   865k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   865k|    {
  333|   865k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   865k|        return status_reg.Get();
  336|   865k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   500k|    {
  340|   500k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   500k|        status_reg.SetStatus(value);
  343|   500k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  4.79M|    {
  347|  4.79M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  4.79M|        inst.Execute(*this);
  350|  4.79M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  4.41k|    {
  354|  4.41k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 3.43k, False: 978]
  ------------------
  355|  3.43k|        {
  356|  3.43k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.43k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  3.43k|            return false;
  358|  3.43k|        }
  359|       |
  360|    978|        m_CurrentProgram = &program;
  361|       |
  362|    978|        m_ProgramCounter               = 0u;
  363|    978|        m_Halted                       = false;
  364|    978|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    978|        m_LastRaisedException          = Exception::None;
  366|    978|        m_CurrentStepCount             = 0u;
  367|       |
  368|    978|        return true;
  369|  4.41k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.45M|    {
  374|  1.45M|        return m_CurrentProgram;
  375|  1.45M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  4.79M|    {
  379|       |        // No nothing when no program is loaded
  380|  4.79M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 4.79M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  4.79M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 78, False: 4.79M]
  ------------------
  387|     78|        {
  388|     78|            m_Halted                       = true;
  389|     78|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     78|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  4.79M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 78, False: 4.79M]
  ------------------
  394|     78|        {
  395|     78|            return;
  396|     78|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  4.79M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  4.79M|        const auto& current_instruction =
  403|  4.79M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  4.79M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  4.79M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 91, False: 4.79M]
  ------------------
  410|     91|        {
  411|     91|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|     91|            return;
  413|     91|        }
  414|       |
  415|  4.79M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  4.79M|        ++m_CurrentStepCount;
  418|       |
  419|  4.79M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 809, False: 4.79M]
  |  Branch (419:14): [True: 4.79M, False: 0]
  |  Branch (419:42): [True: 479, False: 4.79M]
  ------------------
  420|  4.79M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 330, False: 4.79M]
  ------------------
  421|    809|        {
  422|    809|            m_Halted                       = true;
  423|    809|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|    809|        }
  425|  4.79M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|    978|    {
  429|       |        // Do nothing when no program is loaded
  430|    978|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 978]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|    978|        m_ProgramCounter               = 0u;
  436|    978|        m_Halted                       = false;
  437|    978|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|    978|        m_LastRaisedException          = Exception::None;
  439|    978|        m_CurrentStepCount             = 0u;
  440|       |
  441|  4.79M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 4.79M, False: 978]
  ------------------
  442|  4.79M|        {
  443|  4.79M|            ExecuteStep();
  444|  4.79M|        }
  445|       |
  446|    978|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|    978|                   "RegisterAccessType was not reset correctly");
  448|    978|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  4.41k|    {
  465|  4.41k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 141k, False: 4.41k]
  ------------------
  466|   141k|        {
  467|   141k|            reg.SetSignedValue(0);
  468|   141k|        }
  469|       |
  470|  4.41k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 141k, False: 4.41k]
  ------------------
  471|   141k|        {
  472|   141k|            reg.SetValue(0.0f);
  473|   141k|        }
  474|       |
  475|  4.41k|        m_FPSR.SetStatus(false);
  476|  4.41k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  4.41k|    {
  480|  4.41k|        m_MemoryBlock.Clear();
  481|  4.41k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   154k|    {
  489|   154k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   154k|        m_LastRaisedException = exception;
  492|       |
  493|   154k|        switch (exception)
  494|   154k|        {
  495|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 6, False: 154k]
  ------------------
  496|      6|                m_Halted = true;
  497|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      6|                return;
  499|  44.8k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 44.8k, False: 109k]
  ------------------
  500|  44.8k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  44.8k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  44.8k|                return;
  502|  47.6k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 47.6k, False: 106k]
  ------------------
  503|  47.6k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  47.6k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  47.6k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 154k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      8|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 8, False: 154k]
  ------------------
  510|      8|                m_Halted = true;
  511|      8|                return;
  512|     45|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 45, False: 154k]
  ------------------
  513|     45|                m_Halted = true;
  514|     45|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|     45|                return;
  516|  61.6k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 61.6k, False: 92.5k]
  ------------------
  517|  61.6k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  61.6k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|  61.6k|                return;
  519|     18|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 18, False: 154k]
  ------------------
  520|     18|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     18|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     18|                m_Halted = true;
  522|     18|                return;
  523|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 15, False: 154k]
  ------------------
  524|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     15|                m_Halted = true;
  526|     15|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 154k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   154k|#endif
  532|   154k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|      8|    {
  559|      8|        return m_MemoryBlock;
  560|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|   444k|    {
  574|   444k|        return m_NextProgramCounter;
  575|   444k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.45M|    {
  579|  1.45M|        m_NextProgramCounter = new_npc;
  580|  1.45M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  8.26M|    {
   37|  8.26M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  8.26M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  8.26M|        switch (expected_access)
   41|  8.26M|        {
   42|  1.89M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.89M, False: 6.37M]
  ------------------
   43|  1.89M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 8.26M]
  ------------------
   45|      0|                return false;
   46|   109k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 109k, False: 8.15M]
  ------------------
   47|   109k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 54.6k, False: 54.6k]
  |  Branch (47:63): [True: 54.6k, False: 0]
  ------------------
   48|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 0, False: 8.26M]
  ------------------
   49|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 0, False: 0]
  ------------------
   51|  59.8k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 59.8k, False: 8.20M]
  ------------------
   52|  59.8k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 29.9k, False: 29.9k]
  |  Branch (52:63): [True: 29.9k, False: 0]
  ------------------
   53|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 0, False: 8.26M]
  ------------------
   54|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 0, False: 0]
  |  Branch (54:64): [True: 0, False: 0]
  ------------------
   55|  6.20M|            default:
  ------------------
  |  Branch (55:13): [True: 6.20M, False: 2.06M]
  ------------------
   56|  6.20M|                return expected_access == access;
   57|  8.26M|        }
   58|  8.26M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   170k|    {
   14|   170k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 28.0k, False: 142k]
  ------------------
   15|  28.0k|        {
   16|  28.0k|            char first_char = token[0];
   17|  28.0k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 12.0k, False: 15.9k]
  |  Branch (17:38): [True: 799, False: 15.1k]
  ------------------
   18|  12.8k|            {
   19|  12.8k|                char second_char = token[1];
   20|  12.8k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 12.2k, False: 578]
  |  Branch (20:43): [True: 12.2k, False: 96]
  ------------------
   21|  12.2k|                {
   22|  12.2k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  12.2k|                }
   24|  12.8k|            }
   25|  28.0k|        }
   26|   142k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 64.7k, False: 77.4k]
  ------------------
   27|  64.7k|        {
   28|  64.7k|            char first_char = token[0];
   29|  64.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 4.44k, False: 60.2k]
  |  Branch (29:38): [True: 1.82k, False: 58.4k]
  ------------------
   30|  6.26k|            {
   31|  6.26k|                char second_char = token[1];
   32|  6.26k|                char third_char  = token[2];
   33|       |
   34|  6.26k|                switch (second_char)
   35|  6.26k|                {
   36|  2.15k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.15k, False: 4.11k]
  ------------------
   37|  2.15k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 1.64k, False: 516]
  |  Branch (37:50): [True: 1.57k, False: 67]
  ------------------
   38|  1.57k|                        {
   39|  1.57k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.57k|                        }
   41|    583|                        break;
   42|  2.15k|                    }
   43|  2.61k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.61k, False: 3.65k]
  ------------------
   44|  2.61k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 1.93k, False: 684]
  |  Branch (44:50): [True: 1.86k, False: 69]
  ------------------
   45|  1.86k|                        {
   46|  1.86k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  1.86k|                        }
   48|    753|                        break;
   49|  2.61k|                    }
   50|    856|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 856, False: 5.41k]
  ------------------
   51|    856|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 512, False: 344]
  |  Branch (51:50): [True: 241, False: 103]
  ------------------
   52|    753|                        {
   53|    753|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|    753|                        }
   55|    103|                        break;
   56|    856|                    }
   57|    639|                    default: {
  ------------------
  |  Branch (57:21): [True: 639, False: 5.62k]
  ------------------
   58|    639|                        break;
   59|    856|                    }
   60|  6.26k|                }
   61|  6.26k|            }
   62|  64.7k|        }
   63|       |
   64|   153k|        return IntRegisterID::None;
   65|   170k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   153k|    {
   69|   153k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 15.8k, False: 137k]
  ------------------
   70|  15.8k|        {
   71|  15.8k|            char first_char = token[0];
   72|  15.8k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 3.60k, False: 12.1k]
  |  Branch (72:38): [True: 738, False: 11.4k]
  ------------------
   73|  4.34k|            {
   74|  4.34k|                char second_char = token[1];
   75|  4.34k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 3.70k, False: 643]
  |  Branch (75:43): [True: 3.63k, False: 68]
  ------------------
   76|  3.63k|                {
   77|  3.63k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  3.63k|                }
   79|  4.34k|            }
   80|  15.8k|        }
   81|   137k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 60.5k, False: 77.4k]
  ------------------
   82|  60.5k|        {
   83|  60.5k|            char first_char = token[0];
   84|  60.5k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 7.19k, False: 53.3k]
  |  Branch (84:38): [True: 1.92k, False: 51.4k]
  ------------------
   85|  9.12k|            {
   86|  9.12k|                char second_char = token[1];
   87|  9.12k|                char third_char  = token[2];
   88|       |
   89|  9.12k|                switch (second_char)
   90|  9.12k|                {
   91|  2.15k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.15k, False: 6.97k]
  ------------------
   92|  2.15k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.18k, False: 969]
  |  Branch (92:50): [True: 1.11k, False: 70]
  ------------------
   93|  1.11k|                        {
   94|  1.11k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.11k|                        }
   96|  1.03k|                        break;
   97|  2.15k|                    }
   98|  5.90k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 5.90k, False: 3.22k]
  ------------------
   99|  5.90k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 5.81k, False: 85]
  |  Branch (99:50): [True: 5.75k, False: 66]
  ------------------
  100|  5.75k|                        {
  101|  5.75k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  5.75k|                        }
  103|    151|                        break;
  104|  5.90k|                    }
  105|    234|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 234, False: 8.89k]
  ------------------
  106|    234|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 96, False: 138]
  |  Branch (106:50): [True: 70, False: 68]
  ------------------
  107|    166|                        {
  108|    166|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    166|                        }
  110|     68|                        break;
  111|    234|                    }
  112|    840|                    default: {
  ------------------
  |  Branch (112:21): [True: 840, False: 8.28k]
  ------------------
  113|    840|                        break;
  114|    234|                    }
  115|  9.12k|                }
  116|  9.12k|            }
  117|  60.5k|        }
  118|       |
  119|   143k|        return FloatRegisterID::None;
  120|   153k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   172k|    {
  124|   172k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 52.9k, False: 119k]
  ------------------
  125|  52.9k|        {
  126|  52.9k|            char c1 = token[0];
  127|  52.9k|            char c2 = token[1];
  128|  52.9k|            char c3 = token[2];
  129|  52.9k|            char c4 = token[3];
  130|       |
  131|  52.9k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 3.25k, False: 49.6k]
  |  Branch (131:34): [True: 433, False: 49.2k]
  |  Branch (131:49): [True: 3.39k, False: 285]
  |  Branch (131:62): [True: 181, False: 104]
  ------------------
  132|  52.9k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 3.18k, False: 392]
  |  Branch (132:34): [True: 322, False: 70]
  |  Branch (132:49): [True: 3.18k, False: 322]
  |  Branch (132:62): [True: 0, False: 322]
  ------------------
  133|  52.9k|        }
  134|       |
  135|   119k|        return false;
  136|   172k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   277k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   119k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   549k|    {
   41|   549k|        return m_Type;
   42|   549k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   192k|    {
   51|   192k|        return m_LineNumber;
   52|   192k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   159k|    {
   56|   159k|        return m_Column;
   57|   159k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   114k|    {
   66|   114k|        return m_Text;
   67|   114k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  35.6k|    {
   80|  35.6k|        return m_HasHint;
   81|  35.6k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  48.4k|    {
   85|  48.4k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  48.4k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  48.4k|                   m_Type == Type::ImmediateInteger);
   88|  48.4k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  48.4k|        return m_Hint;
   91|  48.4k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.41k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.41k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.41k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    758|    {
   51|    758|        auto it = m_Iterator;
   52|  3.02k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 2.27k, False: 753]
  ------------------
   53|  2.27k|        {
   54|  2.27k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 5, False: 2.26k]
  ------------------
   55|      5|            {
   56|      5|                return false;
   57|      5|            }
   58|  2.27k|        }
   59|       |
   60|    753|        return true;
   61|    758|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   399k|    {
   65|   399k|        return m_Iterator != m_Tokens.end();
   66|   399k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   396k|    {
   70|   396k|        return m_Iterator == m_Tokens.end();
   71|   396k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   396k|    {
   85|   396k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   396k|        return *m_Iterator++;
   91|   396k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    753|    {
  164|    753|        return m_Iterator;
  165|    753|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    181|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    181|        return m_Tokens.rbegin();
  224|    181|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  1.71k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  1.71k|        return m_Tokens.rend();
  233|  1.71k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.41k|    {
   63|  4.41k|        TokenStream tokens;
   64|       |
   65|  4.41k|        std::string_view current_token;
   66|       |
   67|  4.41k|        phi::u64 current_line_number{1u};
   68|  4.41k|        phi::u64 current_column{1u};
   69|  4.41k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.41k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.02M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.01M, False: 4.41k]
  ------------------
   74|  1.01M|        {
   75|  1.01M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.01M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 142k, False: 875k]
  ------------------
   78|   142k|            {
   79|   142k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 35.4k, False: 107k]
  ------------------
   80|  35.4k|                {
   81|       |                    // Skip empty lines
   82|  35.4k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  35.4k|                                        current_line_number, current_column);
   84|       |
   85|  35.4k|                    parsing_comment = false;
   86|  35.4k|                    current_line_number += 1u;
   87|  35.4k|                    current_column = 1u;
   88|  35.4k|                    continue;
   89|  35.4k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   107k|                tokens.emplace_back(
   93|   107k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   107k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   107k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   107k|                                    current_line_number, current_column);
   98|       |
   99|   107k|                current_token   = std::string_view{};
  100|   107k|                parsing_comment = false;
  101|   107k|                current_line_number += 1u;
  102|   107k|                current_column = 0u;
  103|   107k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|   875k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.71k, False: 873k]
  |  Branch (105:34): [True: 56.6k, False: 816k]
  ------------------
  106|  58.3k|            {
  107|  58.3k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 54.6k, False: 3.72k]
  ------------------
  108|  54.6k|                {
  109|  54.6k|                    token_begin = i;
  110|  54.6k|                }
  111|  3.72k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 2.24k, False: 1.48k]
  ------------------
  112|  2.24k|                {
  113|  2.24k|                    tokens.emplace_back(ParseToken(
  114|  2.24k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  2.24k|                            current_line_number, current_column - current_token.length()));
  116|  2.24k|                    token_begin   = i;
  117|  2.24k|                    current_token = std::string_view{};
  118|  2.24k|                }
  119|       |
  120|  58.3k|                parsing_comment = true;
  121|  58.3k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  58.3k|            }
  123|   816k|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 102k, False: 713k]
  ------------------
  124|   102k|            {
  125|       |                // simply append the character
  126|   102k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   102k|            }
  128|   713k|            else
  129|   713k|            {
  130|       |                // Not parsing a comment
  131|   713k|                switch (c)
  132|   713k|                {
  133|  86.5k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 86.5k, False: 627k]
  ------------------
  134|  88.0k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 1.55k, False: 712k]
  ------------------
  135|  90.3k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 2.30k, False: 711k]
  ------------------
  136|  90.3k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 777, False: 89.5k]
  ------------------
  137|    777|                        {
  138|    777|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    777|                            continue;
  141|    777|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  89.5k|                        tokens.emplace_back(ParseToken(
  145|  89.5k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  89.5k|                                current_line_number, current_column - current_token.length()));
  147|  89.5k|                        current_token = std::string_view{};
  148|  89.5k|                        break;
  149|  9.17k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 9.17k, False: 704k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  9.17k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 7.49k, False: 1.67k]
  ------------------
  152|  7.49k|                        {
  153|  7.49k|                            current_token =
  154|  7.49k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  7.49k|                            tokens.emplace_back(ParseToken(
  156|  7.49k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  7.49k|                                    current_line_number,
  158|  7.49k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  7.49k|                            current_token = std::string_view{};
  161|  7.49k|                        }
  162|  1.67k|                        else
  163|  1.67k|                        {
  164|       |                            // Orphan colon
  165|  1.67k|                            token_begin = i;
  166|       |
  167|  1.67k|                            tokens.emplace_back(Token::Type::Colon,
  168|  1.67k|                                                source.substr(token_begin.unsafe(), 1),
  169|  1.67k|                                                current_line_number, current_column);
  170|  1.67k|                        }
  171|  9.17k|                        break;
  172|  19.5k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 19.5k, False: 694k]
  ------------------
  173|  22.2k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 2.76k, False: 711k]
  ------------------
  174|  23.6k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 1.40k, False: 712k]
  ------------------
  175|  23.6k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 20.0k, False: 3.62k]
  ------------------
  176|  20.0k|                        {
  177|  20.0k|                            tokens.emplace_back(ParseToken(
  178|  20.0k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  20.0k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  20.0k|                            current_token = std::string_view{};
  182|  20.0k|                        }
  183|       |
  184|  23.6k|                        Token::Type type;
  185|  23.6k|                        switch (c)
  186|  23.6k|                        {
  187|  19.5k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 19.5k, False: 4.17k]
  ------------------
  188|  19.5k|                                type = Token::Type::Comma;
  189|  19.5k|                                break;
  190|  2.76k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 2.76k, False: 20.9k]
  ------------------
  191|  2.76k|                                type = Token::Type::OpenBracket;
  192|  2.76k|                                break;
  193|  1.40k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 1.40k, False: 22.2k]
  ------------------
  194|  1.40k|                                type = Token::Type::ClosingBracket;
  195|  1.40k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 23.6k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  23.6k|#endif
  201|  23.6k|                        }
  202|       |
  203|  23.6k|                        token_begin = i;
  204|       |
  205|  23.6k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  23.6k|                                            current_line_number, current_column);
  207|  23.6k|                        break;
  208|       |
  209|   590k|                    default:
  ------------------
  |  Branch (209:21): [True: 590k, False: 123k]
  ------------------
  210|   590k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 171k, False: 418k]
  ------------------
  211|   171k|                        {
  212|   171k|                            token_begin = i;
  213|   171k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   590k|                        current_token =
  217|   590k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   713k|                }
  219|   713k|            }
  220|       |
  221|   981k|            current_column += 1u;
  222|   981k|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.41k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.05k, False: 2.36k]
  ------------------
  226|  2.05k|        {
  227|  2.05k|            tokens.emplace_back(
  228|  2.05k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.05k|                               current_line_number, current_column - current_token.length()));
  230|  2.05k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.41k|        tokens.finalize();
  234|       |
  235|  4.41k|        return tokens;
  236|  4.41k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   228k|    {
   11|   228k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 4.61k, False: 224k]
  |  Branch (11:35): [True: 4.53k, False: 82]
  ------------------
   12|  4.53k|        {
   13|  4.53k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  4.53k|            if (number)
  ------------------
  |  Branch (15:17): [True: 2.70k, False: 1.83k]
  ------------------
   16|  2.70k|            {
   17|  2.70k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  2.70k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  2.70k|            }
   20|       |
   21|  1.83k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  4.53k|        }
   23|       |
   24|   224k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 333, False: 223k]
  |  Branch (24:35): [True: 56.5k, False: 167k]
  ------------------
   25|  56.8k|        {
   26|  56.8k|            return {Token::Type::Comment, token, line_number, column};
   27|  56.8k|        }
   28|       |
   29|   167k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 4.26k, False: 163k]
  ------------------
   30|  4.26k|        {
   31|  4.26k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  4.26k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  4.26k|        }
   34|       |
   35|   163k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 3.18k, False: 159k]
  ------------------
   36|  3.18k|        {
   37|  3.18k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  3.18k|        }
   39|       |
   40|   159k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 16.2k, False: 143k]
  ------------------
   41|  16.2k|        {
   42|  16.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  16.2k|                    static_cast<std::uint32_t>(id)};
   44|  16.2k|        }
   45|       |
   46|   143k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 10.5k, False: 133k]
  ------------------
   47|  10.5k|        {
   48|  10.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  10.5k|                    static_cast<std::uint32_t>(id)};
   50|  10.5k|        }
   51|       |
   52|   133k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 85.6k, False: 47.3k]
  ------------------
   53|  85.6k|        {
   54|  85.6k|            return {Token::Type::OpCode, token, line_number, column,
   55|  85.6k|                    static_cast<std::uint32_t>(opcode)};
   56|  85.6k|        }
   57|       |
   58|  47.3k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   133k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  4.41k|    {
   53|       |        // Constants
   54|  4.41k|        constexpr std::uint8_t number_of_opcodes =
   55|  4.41k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  4.41k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  4.41k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  4.41k|        std::string ret;
   60|       |
   61|   222k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 217k, False: 4.40k]
  ------------------
   62|   217k|        {
   63|   217k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   217k|            switch (current_value)
   66|   217k|            {
   67|       |                // OpCode
   68|  74.5k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 74.5k, False: 143k]
  ------------------
   69|       |                    // Has one more value
   70|  74.5k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 74.4k, False: 64]
  ------------------
   71|  74.4k|                    {
   72|  74.4k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|  74.4k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|  74.4k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1, False: 74.4k]
  ------------------
   77|      1|                        {
   78|      1|                            return detail::ErrorString;
   79|      1|                        }
   80|  74.4k|                    }
   81|  74.5k|                    break;
   82|  74.5k|                }
   83|       |
   84|       |                // Int Register
   85|  74.5k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 16.7k, False: 201k]
  ------------------
   86|       |                    // Has one more value
   87|  16.7k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 16.6k, False: 14]
  ------------------
   88|  16.6k|                    {
   89|  16.6k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  16.6k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  16.6k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 16.6k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  16.6k|                    }
   97|  16.7k|                    break;
   98|  16.7k|                }
   99|       |
  100|       |                // Float register
  101|  16.7k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 11.3k, False: 206k]
  ------------------
  102|       |                    // Has one more value
  103|  11.3k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 11.3k, False: 6]
  ------------------
  104|  11.3k|                    {
  105|  11.3k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  11.3k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  11.3k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 11.3k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  11.3k|                    }
  113|  11.3k|                    break;
  114|  11.3k|                }
  115|       |
  116|       |                // Floating point status register
  117|  11.3k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 3.23k, False: 214k]
  ------------------
  118|  3.23k|                    ret += "FPSR";
  119|  3.23k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 3.23k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  3.23k|                    break;
  125|  3.23k|                }
  126|       |
  127|       |                // Immediate integer
  128|  7.32k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 7.32k, False: 210k]
  ------------------
  129|  7.32k|                    ret += "#";
  130|  7.32k|                    [[fallthrough]];
  131|  7.32k|                }
  132|       |
  133|       |                // Integer literal
  134|  15.2k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 7.92k, False: 209k]
  ------------------
  135|  15.2k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  15.2k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 15.2k, False: 37]
  ------------------
  138|  15.2k|                    {
  139|  15.2k|                        std::int16_t value = 0;
  140|       |
  141|  45.5k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 30.2k, False: 15.2k]
  ------------------
  142|  30.2k|                        {
  143|  30.2k|                            value <<= 8;
  144|  30.2k|                            value &= data[index++];
  145|  30.2k|                        }
  146|       |
  147|  15.2k|                        ret += std::to_string(value);
  148|  15.2k|                    }
  149|  15.2k|                    break;
  150|  7.32k|                }
  151|       |
  152|       |                // Label
  153|  6.82k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 6.82k, False: 211k]
  ------------------
  154|  6.82k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  6.82k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 6.82k, False: 3]
  ------------------
  157|  6.82k|                    {
  158|  6.82k|                        std::string label_name = "lbl_";
  159|       |
  160|  40.6k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 33.8k, False: 6.82k]
  ------------------
  161|  33.8k|                        {
  162|  33.8k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  33.8k|                            label_name += c;
  165|  33.8k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  6.82k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 6.43k, False: 386]
  |  Branch (168:45): [True: 5.54k, False: 895]
  ------------------
  169|  5.54k|                        {
  170|  5.54k|                            label_name += ':';
  171|  5.54k|                            ret += label_name;
  172|  5.54k|                        }
  173|  1.28k|                        else
  174|  1.28k|                        {
  175|  1.28k|                            ret += label_name;
  176|  1.28k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 1.28k]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|  1.28k|                        }
  181|  6.82k|                    }
  182|  6.82k|                    break;
  183|  6.82k|                }
  184|       |
  185|       |                // Newline
  186|  33.3k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 33.3k, False: 184k]
  ------------------
  187|  33.3k|                    ret += '\n';
  188|  33.3k|                    break;
  189|  6.82k|                }
  190|       |
  191|       |                // Comment
  192|  56.6k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 56.6k, False: 161k]
  ------------------
  193|  56.6k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  56.6k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 56.6k, False: 17]
  ------------------
  196|  56.6k|                    {
  197|  56.6k|                        std::string comment = "; ";
  198|       |
  199|   338k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 281k, False: 56.6k]
  ------------------
  200|   281k|                        {
  201|   281k|                            comment += static_cast<char>(data[index++]);
  202|   281k|                        }
  203|       |
  204|  56.6k|                        ret += comment + '\n';
  205|  56.6k|                    }
  206|  56.6k|                    break;
  207|  6.82k|                }
  208|       |
  209|       |                // Ignore
  210|      6|                default:
  ------------------
  |  Branch (210:17): [True: 6, False: 217k]
  ------------------
  211|      6|                    return detail::ErrorString;
  212|   217k|            }
  213|   217k|        }
  214|       |
  215|  4.40k|        return ret;
  216|  4.41k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   107k|        {
   20|   107k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 105k, False: 1.86k]
  ------------------
   21|   105k|            {
   22|   105k|                std::uint8_t val = data[index++];
   23|   105k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 86.4k, False: 18.6k]
  ------------------
   24|  86.4k|                {
   25|  86.4k|                    text += ' ';
   26|  86.4k|                }
   27|  18.6k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 18.6k, False: 6]
  ------------------
   28|  18.6k|                {
   29|  18.6k|                    text += ',';
   30|  18.6k|                }
   31|      6|                else
   32|      6|                {
   33|      6|                    return false;
   34|      6|                }
   35|   105k|            }
   36|       |
   37|   107k|            return true;
   38|   107k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  33.8k|        {
   42|  33.8k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 26.5k, False: 7.33k]
  ------------------
   43|  26.5k|            {
   44|  26.5k|                return '_';
   45|  26.5k|            }
   46|       |
   47|  7.33k|            return c;
   48|  33.8k|        }

LLVMFuzzerTestOneInput:
   12|  4.41k|{
   13|  4.41k|    static dlx::Processor processor;
   14|       |
   15|  4.41k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  4.41k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  4.41k|    processor.ClearRegisters();
   22|  4.41k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  4.41k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 978, False: 3.43k]
  ------------------
   26|    978|    {
   27|    978|        processor.ExecuteCurrentProgram();
   28|    978|    }
   29|       |
   30|  4.41k|    return 0;
   31|  4.41k|}


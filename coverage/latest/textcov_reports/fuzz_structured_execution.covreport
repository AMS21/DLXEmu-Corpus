_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   813k|        {
  169|   813k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   813k|            switch (index.unsafe())
  172|   813k|            {
  173|   345k|                case 0:
  ------------------
  |  Branch (173:17): [True: 345k, False: 468k]
  ------------------
  174|   345k|                    return m_Arg1Type;
  175|       |
  176|   236k|                case 1:
  ------------------
  |  Branch (176:17): [True: 236k, False: 577k]
  ------------------
  177|   236k|                    return m_Arg2Type;
  178|       |
  179|   231k|                case 2:
  ------------------
  |  Branch (179:17): [True: 231k, False: 581k]
  ------------------
  180|   231k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 813k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   813k|#endif
  187|   813k|            }
  188|   813k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   220k|        {
  195|   220k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   220k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 208k, False: 12.2k]
  ------------------
  199|   208k|            {
  200|   208k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   208k|            }
  202|   220k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 158k, False: 62.3k]
  ------------------
  203|   158k|            {
  204|   158k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   158k|            }
  206|   220k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 101k, False: 118k]
  ------------------
  207|   101k|            {
  208|   101k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   101k|            }
  210|       |
  211|   220k|            return number_of_argument_required;
  212|   220k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  6.32M|        {
  216|  6.32M|            return m_RegisterAccessType;
  217|  6.32M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   220k|        {
  221|   220k|            return m_Executor;
  222|   220k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  19.0M|    {
   38|  19.0M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  19.0M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  19.0M|                                         static_cast<underlying_t>(rhs));
   42|  19.0M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  19.0M|    {
   55|  19.0M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  19.0M|        return static_cast<underlying_t>(type & test) != 0;
   58|  19.0M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  204|   732k|    {
  205|   732k|        switch (value)
  206|   732k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   184k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|   184k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 184k, False: 547k]
  |  |  |  |  ------------------
  |  |  |  |  209|   184k|        return #name;
  |  |  ------------------
  |  |   16|   184k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  12.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.7k, False: 719k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.7k|        return #name;
  |  |  ------------------
  |  |   17|  12.7k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  4.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.41k, False: 728k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.41k|        return #name;
  |  |  ------------------
  |  |   18|  4.54k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  4.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.54k, False: 727k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.54k|        return #name;
  |  |  ------------------
  |  |   19|  20.2k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  20.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 20.2k, False: 712k]
  |  |  |  |  ------------------
  |  |  |  |  209|  20.2k|        return #name;
  |  |  ------------------
  |  |   20|  20.2k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  18.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 18.1k, False: 714k]
  |  |  |  |  ------------------
  |  |  |  |  209|  18.1k|        return #name;
  |  |  ------------------
  |  |   21|  18.1k|                                                                                                   \
  |  |   22|  18.1k|    /* Sub */                                                                                      \
  |  |   23|  21.2k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  21.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 21.2k, False: 711k]
  |  |  |  |  ------------------
  |  |  |  |  209|  21.2k|        return #name;
  |  |  ------------------
  |  |   24|  21.2k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.21k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.21k|        return #name;
  |  |  ------------------
  |  |   25|  11.7k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  11.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.7k, False: 720k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.7k|        return #name;
  |  |  ------------------
  |  |   26|  11.7k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    302|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 302, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    302|        return #name;
  |  |  ------------------
  |  |   27|  16.2k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  16.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 16.2k, False: 716k]
  |  |  |  |  ------------------
  |  |  |  |  209|  16.2k|        return #name;
  |  |  ------------------
  |  |   28|  16.2k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.31k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.31k|        return #name;
  |  |  ------------------
  |  |   29|  2.31k|                                                                                                   \
  |  |   30|  2.31k|    /* Multiplication */                                                                           \
  |  |   31|  2.31k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.07k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.07k|        return #name;
  |  |  ------------------
  |  |   32|  2.07k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    897|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 897, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    897|        return #name;
  |  |  ------------------
  |  |   33|  10.7k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  10.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 10.7k, False: 721k]
  |  |  |  |  ------------------
  |  |  |  |  209|  10.7k|        return #name;
  |  |  ------------------
  |  |   34|  10.7k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    485|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 485, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    485|        return #name;
  |  |  ------------------
  |  |   35|  4.42k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  4.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.42k, False: 727k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.42k|        return #name;
  |  |  ------------------
  |  |   36|  4.42k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    232|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 232, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    232|        return #name;
  |  |  ------------------
  |  |   37|    232|                                                                                                   \
  |  |   38|    232|    /* Division */                                                                                 \
  |  |   39|    232|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    130|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 130, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    130|        return #name;
  |  |  ------------------
  |  |   40|    229|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 229, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    229|        return #name;
  |  |  ------------------
  |  |   41|    229|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    171|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 171, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    171|        return #name;
  |  |  ------------------
  |  |   42|  14.2k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  14.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.2k, False: 718k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.2k|        return #name;
  |  |  ------------------
  |  |   43|  14.2k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 114, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    114|        return #name;
  |  |  ------------------
  |  |   44|    415|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    415|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 415, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    415|        return #name;
  |  |  ------------------
  |  |   45|    415|                                                                                                   \
  |  |   46|    415|    /* Shift left (logical) */                                                                     \
  |  |   47|  1.07k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.07k, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.07k|        return #name;
  |  |  ------------------
  |  |   48|  1.07k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    541|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 541, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    541|        return #name;
  |  |  ------------------
  |  |   49|    541|                                                                                                   \
  |  |   50|    541|    /* Shift right (logical) */                                                                    \
  |  |   51|  13.9k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  13.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 13.9k, False: 718k]
  |  |  |  |  ------------------
  |  |  |  |  209|  13.9k|        return #name;
  |  |  ------------------
  |  |   52|  19.0k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  19.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 19.0k, False: 713k]
  |  |  |  |  ------------------
  |  |  |  |  209|  19.0k|        return #name;
  |  |  ------------------
  |  |   53|  19.0k|                                                                                                   \
  |  |   54|  19.0k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  19.0k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  8.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.85k, False: 723k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.85k|        return #name;
  |  |  ------------------
  |  |   56|  8.85k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    155|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 155, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    155|        return #name;
  |  |  ------------------
  |  |   57|    155|                                                                                                   \
  |  |   58|    155|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    179|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    179|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 179, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    179|        return #name;
  |  |  ------------------
  |  |   60|  1.67k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.67k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.67k|        return #name;
  |  |  ------------------
  |  |   61|  1.67k|                                                                                                   \
  |  |   62|  1.67k|    /* Logic */                                                                                    \
  |  |   63|  1.67k|                                                                                                   \
  |  |   64|  1.67k|    /* And */                                                                                      \
  |  |   65|  1.67k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 108, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    108|        return #name;
  |  |  ------------------
  |  |   66|  6.59k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.59k, False: 725k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.59k|        return #name;
  |  |  ------------------
  |  |   67|  6.59k|                                                                                                   \
  |  |   68|  6.59k|    /* Or */                                                                                       \
  |  |   69|  6.59k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    718|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 718, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    718|        return #name;
  |  |  ------------------
  |  |   70|    718|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    127|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 127, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    127|        return #name;
  |  |  ------------------
  |  |   71|    127|                                                                                                   \
  |  |   72|    127|    /* XOR */                                                                                      \
  |  |   73|  2.03k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.03k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.03k|        return #name;
  |  |  ------------------
  |  |   74|  2.78k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.78k, False: 729k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.78k|        return #name;
  |  |  ------------------
  |  |   75|  2.78k|                                                                                                   \
  |  |   76|  2.78k|    /* Set conditionals */                                                                         \
  |  |   77|  2.78k|                                                                                                   \
  |  |   78|  2.78k|    /* Less than */                                                                                \
  |  |   79|  2.78k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    694|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 694, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    694|        return #name;
  |  |  ------------------
  |  |   80|  12.6k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  12.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.6k, False: 719k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.6k|        return #name;
  |  |  ------------------
  |  |   81|  12.6k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.18k, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.18k|        return #name;
  |  |  ------------------
  |  |   82|  1.18k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 205, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    205|        return #name;
  |  |  ------------------
  |  |   83|    205|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |   84|    437|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    437|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 437, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    437|        return #name;
  |  |  ------------------
  |  |   85|    437|                                                                                                   \
  |  |   86|    437|    /* Greater than */                                                                             \
  |  |   87|  8.73k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  8.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.73k, False: 723k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.73k|        return #name;
  |  |  ------------------
  |  |   88|  8.73k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    284|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 284, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    284|        return #name;
  |  |  ------------------
  |  |   89|  3.62k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.62k, False: 728k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.62k|        return #name;
  |  |  ------------------
  |  |   90|  3.62k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    121|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 121, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    121|        return #name;
  |  |  ------------------
  |  |   91|  1.68k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.68k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.68k|        return #name;
  |  |  ------------------
  |  |   92|  14.4k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  14.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 14.4k, False: 718k]
  |  |  |  |  ------------------
  |  |  |  |  209|  14.4k|        return #name;
  |  |  ------------------
  |  |   93|  14.4k|                                                                                                   \
  |  |   94|  14.4k|    /* Less than or equal */                                                                       \
  |  |   95|  14.4k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.37k, False: 730k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.37k|        return #name;
  |  |  ------------------
  |  |   96|  2.37k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    643|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 643, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    643|        return #name;
  |  |  ------------------
  |  |   97|  2.76k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.76k, False: 729k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.76k|        return #name;
  |  |  ------------------
  |  |   98|  2.76k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.31k, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.31k|        return #name;
  |  |  ------------------
  |  |   99|  1.31k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    764|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 764, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    764|        return #name;
  |  |  ------------------
  |  |  100|  7.94k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  7.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.94k, False: 724k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.94k|        return #name;
  |  |  ------------------
  |  |  101|  7.94k|                                                                                                   \
  |  |  102|  7.94k|    /* Greater than or equal */                                                                    \
  |  |  103|  24.0k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  24.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 24.0k, False: 708k]
  |  |  |  |  ------------------
  |  |  |  |  209|  24.0k|        return #name;
  |  |  ------------------
  |  |  104|  24.0k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  8.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 8.37k, False: 724k]
  |  |  |  |  ------------------
  |  |  |  |  209|  8.37k|        return #name;
  |  |  ------------------
  |  |  105|  8.37k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    383|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 383, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    383|        return #name;
  |  |  ------------------
  |  |  106|  17.5k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  17.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.5k, False: 714k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.5k|        return #name;
  |  |  ------------------
  |  |  107|  17.5k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 87, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     87|        return #name;
  |  |  ------------------
  |  |  108|    132|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    132|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 132, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    132|        return #name;
  |  |  ------------------
  |  |  109|    132|                                                                                                   \
  |  |  110|    132|    /* Equal */                                                                                    \
  |  |  111|    132|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |  112|  5.30k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.30k, False: 727k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.30k|        return #name;
  |  |  ------------------
  |  |  113|  29.3k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  29.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 29.3k, False: 703k]
  |  |  |  |  ------------------
  |  |  |  |  209|  29.3k|        return #name;
  |  |  ------------------
  |  |  114|  29.3k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  15.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 15.1k, False: 717k]
  |  |  |  |  ------------------
  |  |  |  |  209|  15.1k|        return #name;
  |  |  ------------------
  |  |  115|  15.1k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  12.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 12.7k, False: 719k]
  |  |  |  |  ------------------
  |  |  |  |  209|  12.7k|        return #name;
  |  |  ------------------
  |  |  116|  12.7k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    115|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 115, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    115|        return #name;
  |  |  ------------------
  |  |  117|    115|                                                                                                   \
  |  |  118|    115|    /* Not equal */                                                                                \
  |  |  119|  17.7k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  17.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.7k, False: 714k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.7k|        return #name;
  |  |  ------------------
  |  |  120|  17.7k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    133|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 133, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    133|        return #name;
  |  |  ------------------
  |  |  121|    275|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    275|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 275, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    275|        return #name;
  |  |  ------------------
  |  |  122|    633|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    633|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 633, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    633|        return #name;
  |  |  ------------------
  |  |  123|    633|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    145|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 145, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    145|        return #name;
  |  |  ------------------
  |  |  124|    145|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |  125|    103|                                                                                                   \
  |  |  126|    103|    /* Conditional branching */                                                                    \
  |  |  127|    125|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    125|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 125, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    125|        return #name;
  |  |  ------------------
  |  |  128|    125|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 109, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    109|        return #name;
  |  |  ------------------
  |  |  129|    109|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |  130|  32.8k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  32.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 32.8k, False: 699k]
  |  |  |  |  ------------------
  |  |  |  |  209|  32.8k|        return #name;
  |  |  ------------------
  |  |  131|  32.8k|                                                                                                   \
  |  |  132|  32.8k|    /* Unconditional branching */                                                                  \
  |  |  133|  32.8k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|  6.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.07k, False: 726k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.07k|        return #name;
  |  |  ------------------
  |  |  134|  6.07k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  135|  6.26k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  6.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.26k, False: 726k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.26k|        return #name;
  |  |  ------------------
  |  |  136|  6.26k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.36k, False: 727k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.36k|        return #name;
  |  |  ------------------
  |  |  137|  5.36k|                                                                                                   \
  |  |  138|  5.36k|    /* Loading data */                                                                             \
  |  |  139|  5.55k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  5.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.55k, False: 726k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.55k|        return #name;
  |  |  ------------------
  |  |  140|  5.55k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |  141|     97|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |  142|     97|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  143|  9.85k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  9.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.85k, False: 722k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.85k|        return #name;
  |  |  ------------------
  |  |  144|  17.4k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  17.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 17.4k, False: 714k]
  |  |  |  |  ------------------
  |  |  |  |  209|  17.4k|        return #name;
  |  |  ------------------
  |  |  145|  17.4k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  146|    122|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 122, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    122|        return #name;
  |  |  ------------------
  |  |  147|    720|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    720|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 720, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    720|        return #name;
  |  |  ------------------
  |  |  148|    720|                                                                                                   \
  |  |  149|    720|    /* Storing data */                                                                             \
  |  |  150|  2.67k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  2.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.67k, False: 729k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.67k|        return #name;
  |  |  ------------------
  |  |  151|  2.67k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |  152|     94|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  153|  9.03k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  9.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 9.03k, False: 723k]
  |  |  |  |  ------------------
  |  |  |  |  209|  9.03k|        return #name;
  |  |  ------------------
  |  |  154|  9.03k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  155|  4.74k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.74k, False: 727k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.74k|        return #name;
  |  |  ------------------
  |  |  156|  11.2k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  11.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 11.2k, False: 721k]
  |  |  |  |  ------------------
  |  |  |  |  209|  11.2k|        return #name;
  |  |  ------------------
  |  |  157|  11.2k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  158|    101|                                                                                                   \
  |  |  159|    101|    /* Moving data */                                                                              \
  |  |  160|    512|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    512|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 512, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    512|        return #name;
  |  |  ------------------
  |  |  161|    512|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    428|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 428, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    428|        return #name;
  |  |  ------------------
  |  |  162|  1.11k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|  1.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.11k, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.11k|        return #name;
  |  |  ------------------
  |  |  163|  18.4k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|  18.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 18.4k, False: 713k]
  |  |  |  |  ------------------
  |  |  |  |  209|  18.4k|        return #name;
  |  |  ------------------
  |  |  164|  18.4k|                                                                                                   \
  |  |  165|  18.4k|    /* Converting data */                                                                          \
  |  |  166|  18.4k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  167|     99|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  168|     99|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  169|    721|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    721|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 721, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    721|        return #name;
  |  |  ------------------
  |  |  170|    721|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 732k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  171|    458|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    458|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 458, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    458|        return #name;
  |  |  ------------------
  |  |  172|    458|                                                                                                   \
  |  |  173|    458|    /* Other */                                                                                    \
  |  |  174|  6.44k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  6.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 6.44k, False: 725k]
  |  |  |  |  ------------------
  |  |  |  |  209|  6.44k|        return #name;
  |  |  ------------------
  |  |  175|  6.44k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    587|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 587, False: 731k]
  |  |  |  |  ------------------
  |  |  |  |  209|    587|        return #name;
  |  |  ------------------
  |  |  176|  7.09k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  7.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 7.09k, False: 725k]
  |  |  |  |  ------------------
  |  |  |  |  209|  7.09k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 732k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   732k|        }
  218|   732k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  45.5k|    {
   31|  45.5k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 323, False: 45.2k]
  ------------------
   32|    323|        {
   33|    323|            return true;
   34|    323|        }
   35|       |
   36|  45.2k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 103, False: 45.0k]
  ------------------
   37|    103|        {
   38|    103|            return true;
   39|    103|        }
   40|       |
   41|  45.0k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 916, False: 44.1k]
  ------------------
   42|    916|        {
   43|    916|            return true;
   44|    916|        }
   45|       |
   46|  44.1k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 44.1k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  44.1k|        return false;
   52|  44.1k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  44.1k|    {
   56|  44.1k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 44.1k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  44.1k|        const char first_char = token.at(0u);
   62|       |
   63|  44.1k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 1.37k, False: 42.8k]
  ------------------
   64|  1.37k|        {
   65|  1.37k|            return phi::is_alpha(first_char);
   66|  1.37k|        }
   67|       |
   68|  42.8k|        phi::boolean just_under_scores = (first_char == '_');
   69|  42.8k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 11.2k, False: 31.5k]
  |  Branch (69:13): [True: 11.0k, False: 31.7k]
  |  Branch (69:43): [True: 11.0k, False: 196]
  ------------------
   70|  11.0k|        {
   71|  11.0k|            return false;
   72|  11.0k|        }
   73|       |
   74|   186k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 168k, False: 17.8k]
  ------------------
   75|   168k|        {
   76|   168k|            const char c{token.at(index)};
   77|       |
   78|   168k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 65.6k, False: 103k]
  ------------------
   79|  65.6k|            {
   80|  65.6k|                just_under_scores = false;
   81|  65.6k|            }
   82|   103k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 89.3k, False: 13.9k]
  ------------------
   83|  89.3k|            {
   84|  89.3k|                continue;
   85|  89.3k|            }
   86|  13.9k|            else
   87|  13.9k|            {
   88|  13.9k|                return false;
   89|  13.9k|            }
   90|   168k|        }
   91|       |
   92|  17.8k|        return !just_under_scores;
   93|  31.7k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  1.36M|    {
  100|  1.36M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 1.36M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  1.36M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 75.7k, False: 1.28M]
  ------------------
  106|  75.7k|        {
  107|  75.7k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 39.1k, False: 36.5k]
  ------------------
  108|  39.1k|            {
  109|  39.1k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  39.1k|            }
  111|       |
  112|  36.5k|            return {};
  113|  75.7k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  1.28M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 344, False: 1.28M]
  ------------------
  117|    344|        {
  118|    344|            return {};
  119|    344|        }
  120|       |
  121|  1.28M|        std::int32_t number{0};
  122|  1.28M|        phi::boolean is_negative{false};
  123|  1.28M|        phi::boolean starts_with_zero{false};
  124|  1.28M|        phi::boolean parsing_binary{false};
  125|  1.28M|        phi::boolean parsing_octal{false};
  126|  1.28M|        phi::boolean parsing_hexadecimal{false};
  127|  1.28M|        phi::boolean parsed_something{false};
  128|  1.28M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  1.46M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 1.45M, False: 18.0k]
  ------------------
  133|  1.45M|        {
  134|  1.45M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  1.45M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 1.28M, False: 163k]
  ------------------
  138|  1.28M|            {
  139|  1.28M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 68, False: 1.28M]
  ------------------
  140|     68|                {
  141|     68|                    continue;
  142|     68|                }
  143|       |
  144|  1.28M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 1.99k, False: 1.28M]
  ------------------
  145|  1.99k|                {
  146|  1.99k|                    is_negative = true;
  147|  1.99k|                    continue;
  148|  1.99k|                }
  149|       |
  150|  1.28M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 80.2k, False: 1.20M]
  ------------------
  151|  80.2k|                {
  152|  80.2k|                    starts_with_zero = true;
  153|  80.2k|                    continue;
  154|  80.2k|                }
  155|       |
  156|  1.20M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 67, False: 1.20M]
  ------------------
  157|     67|                {
  158|     67|                    return {};
  159|     67|                }
  160|  1.20M|            }
  161|       |
  162|       |            // Second character
  163|  1.36M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 83.2k, False: 1.28M]
  ------------------
  164|  83.2k|            {
  165|  83.2k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 80.2k, False: 2.96k]
  ------------------
  166|  80.2k|                {
  167|       |                    // Binary
  168|  80.2k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 8.40k, False: 71.8k]
  |  Branch (168:37): [True: 7.94k, False: 63.9k]
  ------------------
  169|  16.3k|                    {
  170|  16.3k|                        parsing_binary = true;
  171|  16.3k|                        continue;
  172|  16.3k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  63.9k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 25.8k, False: 38.1k]
  |  Branch (175:37): [True: 1.89k, False: 36.2k]
  ------------------
  176|  27.7k|                    {
  177|  27.7k|                        parsing_hexadecimal = true;
  178|  27.7k|                        continue;
  179|  27.7k|                    }
  180|       |
  181|       |                    // Octal
  182|  36.2k|                    parsing_octal = true;
  183|  36.2k|                }
  184|  83.2k|            }
  185|       |
  186|       |            // Handle seperators
  187|  1.32M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 139, False: 1.32M]
  ------------------
  188|    139|            {
  189|    139|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 66, False: 73]
  ------------------
  190|     66|                {
  191|     66|                    return {};
  192|     66|                }
  193|       |
  194|     73|                parsed_separator = true;
  195|     73|                continue;
  196|    139|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  1.32M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 2.00k, False: 1.32M]
  |  Branch (199:32): [True: 0, False: 2.00k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  1.32M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 1.32M, False: 2.00k]
  |  Branch (204:17): [True: 0, False: 1.32M]
  |  Branch (204:33): [True: 0, False: 1.32M]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  1.32M|            parsed_separator = false;
  211|  1.32M|            parsed_something = true;
  212|       |
  213|  1.32M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 22.7k, False: 1.30M]
  ------------------
  214|  22.7k|            {
  215|  22.7k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 8.53k, False: 14.1k]
  ------------------
  216|  8.53k|                {
  217|  8.53k|                    return {};
  218|  8.53k|                }
  219|       |
  220|  14.1k|                number <<= 1;
  221|  14.1k|                number |= (c - '0');
  222|  14.1k|            }
  223|  1.30M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 44.5k, False: 1.25M]
  ------------------
  224|  44.5k|            {
  225|  44.5k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 33.5k, False: 10.9k]
  ------------------
  226|  33.5k|                {
  227|  33.5k|                    return {};
  228|  33.5k|                }
  229|       |
  230|  10.9k|                number <<= 3;
  231|  10.9k|                number |= (c - '0');
  232|  10.9k|            }
  233|  1.25M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 48.8k, False: 1.20M]
  ------------------
  234|  48.8k|            {
  235|  48.8k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 20.4k, False: 28.4k]
  ------------------
  236|  20.4k|                {
  237|  20.4k|                    return {};
  238|  20.4k|                }
  239|       |
  240|  28.4k|                number <<= 4;
  241|  28.4k|                number |= phi::hex_digit_value(c).unsafe();
  242|  28.4k|            }
  243|  1.20M|            else
  244|  1.20M|            {
  245|  1.20M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 1.20M, False: 1.59k]
  ------------------
  246|  1.20M|                {
  247|  1.20M|                    return {};
  248|  1.20M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  1.59k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 1.08k, False: 512]
  |  Branch (251:36): [True: 68, False: 1.01k]
  ------------------
  252|     68|                {
  253|     68|                    return {};
  254|     68|                }
  255|       |
  256|  1.53k|                number *= 10;
  257|  1.53k|                number += (c - '0');
  258|  1.53k|            }
  259|  1.32M|        }
  260|       |
  261|  18.0k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 16.7k, False: 1.27k]
  ------------------
  262|  16.7k|        {
  263|       |            // Check for over/underflow
  264|  16.7k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 104, False: 16.6k]
  |  Branch (264:32): [True: 0, False: 104]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  16.7k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 16.6k, False: 104]
  |  Branch (269:17): [True: 0, False: 16.7k]
  |  Branch (269:33): [True: 0, False: 16.6k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  16.7k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 104, False: 16.6k]
  ------------------
  276|    104|            {
  277|    104|                return static_cast<std::int16_t>(-number);
  278|    104|            }
  279|       |
  280|  16.6k|            return static_cast<std::int16_t>(number);
  281|  16.7k|        }
  282|       |
  283|  1.27k|        return {};
  284|  18.0k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   95|   102k|    {
   96|   102k|        switch (value)
   97|   102k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  11.2k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  11.2k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11.2k, False: 91.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|  11.2k|        return #name;
  |  |  ------------------
  |  |   14|  29.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  29.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 29.7k, False: 72.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  29.7k|        return #name;
  |  |  ------------------
  |  |   15|  29.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    413|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 413, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    413|        return #name;
  |  |  ------------------
  |  |   16|  7.79k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  7.79k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7.79k, False: 94.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  7.79k|        return #name;
  |  |  ------------------
  |  |   17|  7.79k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    677|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 677, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  100|    677|        return #name;
  |  |  ------------------
  |  |   18|  5.46k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|  5.46k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.46k, False: 97.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.46k|        return #name;
  |  |  ------------------
  |  |   19|  5.46k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    279|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 279, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    279|        return #name;
  |  |  ------------------
  |  |   20|    279|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     90|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 90, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     90|        return #name;
  |  |  ------------------
  |  |   21|    628|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    628|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 628, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  100|    628|        return #name;
  |  |  ------------------
  |  |   22|    628|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    547|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 547, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  100|    547|        return #name;
  |  |  ------------------
  |  |   23|    547|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     69|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 69, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     69|        return #name;
  |  |  ------------------
  |  |   24|    161|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    161|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 161, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    161|        return #name;
  |  |  ------------------
  |  |   25|    161|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     77|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 77, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     77|        return #name;
  |  |  ------------------
  |  |   26|    739|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    739|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 739, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  100|    739|        return #name;
  |  |  ------------------
  |  |   27|    739|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|    312|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 312, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    312|        return #name;
  |  |  ------------------
  |  |   28|  2.58k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.58k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.58k, False: 99.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.58k|        return #name;
  |  |  ------------------
  |  |   29|  20.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  20.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 20.7k, False: 81.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  20.7k|        return #name;
  |  |  ------------------
  |  |   30|  20.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    131|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 131, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    131|        return #name;
  |  |  ------------------
  |  |   31|    131|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    123|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 123, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    123|        return #name;
  |  |  ------------------
  |  |   32|    123|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     13|        return #name;
  |  |  ------------------
  |  |   33|    892|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    892|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 892, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  100|    892|        return #name;
  |  |  ------------------
  |  |   34|  2.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.31k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.31k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.31k|        return #name;
  |  |  ------------------
  |  |   35|  2.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   36|  4.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  4.17k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4.17k, False: 98.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|  4.17k|        return #name;
  |  |  ------------------
  |  |   37|  4.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     72|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 72, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     72|        return #name;
  |  |  ------------------
  |  |   38|     72|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     30|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 30, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     30|        return #name;
  |  |  ------------------
  |  |   39|  3.20k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.20k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.20k, False: 99.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.20k|        return #name;
  |  |  ------------------
  |  |   40|  3.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.71k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.71k, False: 98.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.71k|        return #name;
  |  |  ------------------
  |  |   41|  3.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     34|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 34, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     34|        return #name;
  |  |  ------------------
  |  |   42|     34|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   43|  5.86k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.86k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.86k, False: 96.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.86k|        return #name;
  |  |  ------------------
  |  |   44|  5.86k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    333|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 333, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  100|    333|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 102k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   102k|        }
  109|   102k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  130|  52.6k|    {
  131|  52.6k|        switch (value)
  132|  52.6k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  14.7k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  14.7k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 14.7k, False: 37.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  14.7k|        return #name;
  |  |  ------------------
  |  |   48|  14.7k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  6.36k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.36k, False: 46.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.36k|        return #name;
  |  |  ------------------
  |  |   49|  6.36k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 14, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     14|        return #name;
  |  |  ------------------
  |  |   50|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 23, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     23|        return #name;
  |  |  ------------------
  |  |   51|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   52|    162|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|    162|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 162, False: 52.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    162|        return #name;
  |  |  ------------------
  |  |   53|    162|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     19|        return #name;
  |  |  ------------------
  |  |   54|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   55|    159|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    159|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 159, False: 52.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    159|        return #name;
  |  |  ------------------
  |  |   56|  5.29k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  5.29k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5.29k, False: 47.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  5.29k|        return #name;
  |  |  ------------------
  |  |   57|  5.29k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   58|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   59|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   60|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   61|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   62|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   63|  4.80k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.80k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.80k, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.80k|        return #name;
  |  |  ------------------
  |  |   64|  4.80k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    910|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 910, False: 51.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    910|        return #name;
  |  |  ------------------
  |  |   65|    910|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|    290|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 290, False: 52.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    290|        return #name;
  |  |  ------------------
  |  |   66|    290|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|     36|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 36, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     36|        return #name;
  |  |  ------------------
  |  |   67|  10.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  10.5k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10.5k, False: 42.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  10.5k|        return #name;
  |  |  ------------------
  |  |   68|  10.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|    861|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 861, False: 51.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    861|        return #name;
  |  |  ------------------
  |  |   69|    861|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 20, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     20|        return #name;
  |  |  ------------------
  |  |   70|     21|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     21|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 21, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     21|        return #name;
  |  |  ------------------
  |  |   71|    835|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    835|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 835, False: 51.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|    835|        return #name;
  |  |  ------------------
  |  |   72|    835|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 20, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     20|        return #name;
  |  |  ------------------
  |  |   73|  6.95k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  6.95k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6.95k, False: 45.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  6.95k|        return #name;
  |  |  ------------------
  |  |   74|  6.95k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|    272|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 272, False: 52.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    272|        return #name;
  |  |  ------------------
  |  |   75|    272|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     19|        return #name;
  |  |  ------------------
  |  |   76|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 52.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   77|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    166|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 166, False: 52.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    166|        return #name;
  |  |  ------------------
  |  |   78|    166|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|     86|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 86, False: 52.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     86|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 52.6k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  52.6k|        }
  144|  52.6k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   643k|        {
   12|   643k|            m_Value = value;
   13|   643k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   959k|        {
   17|   959k|            return m_Value;
   18|   959k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  10.4k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  10.4k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 105k, False: 0]
  ------------------
   64|   105k|            {
   65|   105k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 10.4k, False: 94.8k]
  ------------------
   66|  10.4k|                {
   67|  10.4k|                    return &token;
   68|  10.4k|                }
   69|   105k|            }
   70|       |
   71|      0|            return nullptr;
   72|  10.4k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.09M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.09M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.09M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.77M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.77M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.77M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   154k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   154k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   154k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   760k|    {
   11|   760k|        m_Value = val;
   12|   760k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.74M|    {
   16|  2.74M|        return m_Value;
   17|  2.74M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   220k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  44.0k|    {
   25|  44.0k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  44.0k|        switch (argument_number.unsafe())
   28|  44.0k|        {
   29|  21.1k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 21.1k, False: 22.9k]
  ------------------
   30|  21.1k|                m_Arg1 = argument;
   31|  21.1k|                break;
   32|  13.2k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 13.2k, False: 30.8k]
  ------------------
   33|  13.2k|                m_Arg2 = argument;
   34|  13.2k|                break;
   35|  9.71k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 9.71k, False: 34.3k]
  ------------------
   36|  9.71k|                m_Arg3 = argument;
   37|  9.71k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 44.0k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  44.0k|#endif
   42|  44.0k|        }
   43|  44.0k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  6.32M|    {
   84|  6.32M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  6.32M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  6.32M|    {
   89|  6.32M|        return m_Info;
   90|  6.32M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   706k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  37.9M|    {
   28|  37.9M|        return m_Type;
   29|  37.9M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  8.43M|    {
   78|  8.43M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  8.43M|        return register_int;
   81|  8.43M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  2.08M|    {
   85|  2.08M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  2.08M|        return register_float;
   88|  2.08M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.79M|    {
   93|  1.79M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.79M|        return immediate_value;
   96|  1.79M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|  1.20M|    {
  108|  1.20M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|  1.20M|        return label;
  111|  1.20M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  25.9k|    {
  171|  25.9k|        InstructionArgument arg;
  172|  25.9k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  25.9k|        arg.register_int.register_id = id;
  174|  25.9k|        return arg;
  175|  25.9k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  5.43k|    {
  179|  5.43k|        InstructionArgument arg;
  180|  5.43k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  5.43k|        arg.register_float.register_id = id;
  182|  5.43k|        return arg;
  183|  5.43k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  7.64k|    {
  187|  7.64k|        InstructionArgument arg;
  188|  7.64k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  7.64k|        arg.immediate_value.signed_value = value;
  190|  7.64k|        return arg;
  191|  7.64k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  204|  5.08k|    {
  205|  5.08k|        InstructionArgument arg;
  206|  5.08k|        arg.m_Type           = ArgumentType::Label;
  207|  5.08k|        arg.label.label_name = label_name;
  208|  5.08k|        return arg;
  209|  5.08k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|   313k|        {
  351|   313k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|   313k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|   313k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|   313k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|   313k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|   313k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|   313k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  47.0k|        {
  364|  47.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  47.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  47.0k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  47.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  47.0k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  47.0k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  48.0k|        {
  376|  48.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  48.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  48.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  48.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  48.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  48.0k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  48.0k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  20.7k|        {
  389|  20.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  20.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  20.7k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  20.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  20.7k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  20.7k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  39.6k|        {
  401|  39.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  39.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  39.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  39.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  39.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  39.6k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  39.6k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  39.6k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  23.8k|        {
  416|  23.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  23.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  23.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  23.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  23.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  23.8k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  23.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  23.8k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|  56.7k|        {
  431|  56.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|  56.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|  56.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|  56.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|  56.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|  56.7k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|  56.7k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|  11.6k|        {
  444|  11.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|  11.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|  11.6k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|  11.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|  11.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|  11.6k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|   162k|        {
  456|   162k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|   162k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|   162k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|   162k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|   162k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|   162k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|   162k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  19.6k|        {
  469|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  19.6k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  19.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  19.6k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  23.6k|        {
  481|  23.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  23.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  23.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  23.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  23.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  23.6k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  23.6k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  23.6k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  23.3k|        {
  496|  23.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  23.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  23.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  23.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  23.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  23.3k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  23.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  23.3k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  63.8k|        {
  511|  63.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  63.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  63.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  63.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  63.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  63.8k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  63.8k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|  32.0k|        {
  524|  32.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|  32.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|  32.0k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|  32.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|  32.0k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|  32.0k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  30.3k|        {
  536|  30.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  30.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  30.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  30.3k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  30.3k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  30.3k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  30.3k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  67.4k|        {
  549|  67.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  67.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  67.4k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  67.4k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  67.4k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  67.4k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  28.7k|        {
  561|  28.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  28.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  28.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  28.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  28.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  28.7k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  28.7k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  28.7k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  19.5k|        {
  576|  19.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  19.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  19.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  19.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  19.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  19.5k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  19.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  19.5k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  5.01k|        {
  591|  5.01k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  5.01k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  5.01k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  5.01k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  5.01k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  5.01k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  5.01k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|      1|        {
  604|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  606|      1|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  10.0k|        {
  616|  10.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  10.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  10.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  10.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  10.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  10.0k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  10.0k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|      1|        {
  629|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  631|      1|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  86.0k|        {
  683|  86.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  86.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  86.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  86.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  86.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  86.0k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  86.0k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  22.7k|        {
  696|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  22.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  22.7k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  22.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  22.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  68.2k|        {
  709|  68.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  68.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  68.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  68.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  68.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  68.2k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  68.2k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  33.9k|        {
  722|  33.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  33.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  33.9k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  33.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  33.9k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  33.9k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  33.9k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|  81.7k|        {
  735|  81.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|  81.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|  81.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|  81.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|  81.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|  81.7k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|  81.7k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  27.9k|        {
  748|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  73.7k|        {
  761|  73.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  73.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  73.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  73.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  73.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  73.7k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  73.7k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  27.9k|        {
  774|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  27.9k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  27.9k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  33.3k|        {
  787|  33.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  33.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  33.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  33.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  33.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  33.3k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  33.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  33.3k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|   107k|        {
  801|   107k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|   107k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|   107k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|   107k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|   107k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|   107k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|   107k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  13.5k|        {
  814|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  19.1k|        {
  828|  19.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  19.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  19.1k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  19.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  19.1k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  19.1k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  20.8k|        {
  841|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|   431k|        {
  855|   431k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|   431k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|   431k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|   431k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|   431k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|   431k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|   431k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  12.3k|        {
  868|  12.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  12.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  12.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  12.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  12.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  12.3k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 1, False: 12.3k]
  ------------------
  876|       |
  877|  12.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  12.3k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  46.2k|        {
  883|  46.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  46.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  46.2k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  46.2k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  46.2k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 0, False: 46.2k]
  ------------------
  890|       |
  891|  46.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  46.2k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  11.7k|        {
  897|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  11.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  11.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  11.7k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 1, False: 11.7k]
  ------------------
  905|       |
  906|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  11.7k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|   101k|        {
  912|   101k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|   101k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|   101k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|   101k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|   101k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 0, False: 101k]
  ------------------
  919|       |
  920|   101k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|   101k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  11.7k|        {
  926|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  11.7k|            processor.SetFPSRValue(new_value);
  935|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  28.7k|        {
  940|  28.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  28.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  28.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  28.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  28.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  28.7k|            processor.SetFPSRValue(new_value);
  949|  28.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  11.7k|        {
  954|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 0, False: 11.7k]
  ------------------
  962|       |
  963|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  34.2k|        {
  969|  34.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  34.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  34.2k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  34.2k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  34.2k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 1.00k, False: 33.1k]
  ------------------
  976|       |
  977|  34.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  34.2k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  11.4k|        {
  983|  11.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  11.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  11.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  11.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  11.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  11.4k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 0, False: 11.4k]
  ------------------
  991|       |
  992|  11.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  11.4k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  24.7k|        {
  998|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  24.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  24.7k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 24.7k]
  ------------------
 1005|       |
 1006|  24.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  24.7k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|   120k|        {
 1012|   120k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|   120k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|   120k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|   120k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|   120k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|   120k|            processor.SetFPSRValue(new_value);
 1021|   120k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|   265k|        {
 1026|   265k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|   265k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|   265k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|   265k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|   265k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|   265k|            processor.SetFPSRValue(new_value);
 1035|   265k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|  11.8k|        {
 1040|  11.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|  11.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|  11.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|  11.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|  11.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|  11.8k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 11.8k, False: 2]
  ------------------
 1048|       |
 1049|  11.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|  11.8k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  22.7k|        {
 1055|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  22.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  22.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 22.7k, False: 0]
  ------------------
 1062|       |
 1063|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  22.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  17.8k|        {
 1069|  17.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  17.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  17.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  17.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  17.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  17.8k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 17.8k, False: 0]
  ------------------
 1077|       |
 1078|  17.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  17.8k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|   181k|        {
 1084|   181k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|   181k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|   181k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|   181k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|   181k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 148k, False: 33.0k]
  ------------------
 1091|       |
 1092|   181k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|   181k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  20.9k|        {
 1098|  20.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  20.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  20.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  20.9k|            processor.SetFPSRValue(new_value);
 1107|  20.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  45.9k|        {
 1112|  45.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  45.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  45.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  45.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  45.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  45.9k|            processor.SetFPSRValue(new_value);
 1121|  45.9k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  13.4k|        {
 1126|  13.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  13.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  13.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  13.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  13.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  13.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 13.4k, False: 0]
  ------------------
 1134|       |
 1135|  13.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  13.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|   284k|        {
 1141|   284k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|   284k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|   284k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|   284k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|   284k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 282k, False: 2.08k]
  ------------------
 1148|       |
 1149|   284k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|   284k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  14.8k|        {
 1155|  14.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  14.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  14.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  14.8k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 14.8k, False: 0]
  ------------------
 1163|       |
 1164|  14.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  14.8k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  26.4k|        {
 1170|  26.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  26.4k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  26.4k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  26.4k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  26.4k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 26.4k, False: 0]
  ------------------
 1177|       |
 1178|  26.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  26.4k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  32.3k|        {
 1184|  32.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  32.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  32.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  32.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  32.3k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  32.3k|            processor.SetFPSRValue(new_value);
 1193|  32.3k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  28.5k|        {
 1198|  28.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  28.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  28.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  28.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  28.5k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  28.5k|            processor.SetFPSRValue(new_value);
 1207|  28.5k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  21.8k|        {
 1212|  21.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  21.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  21.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  21.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  21.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  21.8k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 20.3k, False: 1.42k]
  ------------------
 1220|       |
 1221|  21.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  21.8k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  20.4k|        {
 1227|  20.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  20.4k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  20.4k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  20.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  20.4k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 20.4k, False: 0]
  ------------------
 1234|       |
 1235|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  20.4k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|   110k|        {
 1241|   110k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|   110k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|   110k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|   110k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|   110k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|   110k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 96.7k, False: 13.6k]
  ------------------
 1249|       |
 1250|   110k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|   110k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  67.1k|        {
 1256|  67.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  67.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  67.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  67.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  67.1k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 67.1k, False: 0]
  ------------------
 1263|       |
 1264|  67.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  67.1k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  29.9k|        {
 1270|  29.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  29.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  29.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  29.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  29.9k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  29.9k|            processor.SetFPSRValue(new_value);
 1279|  29.9k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  17.9k|        {
 1284|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  17.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  17.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  17.9k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  17.9k|            processor.SetFPSRValue(new_value);
 1293|  17.9k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  22.2k|        {
 1298|  22.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  22.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  22.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  22.2k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  22.2k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  22.2k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 1, False: 22.2k]
  ------------------
 1306|       |
 1307|  22.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  22.2k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  35.1k|        {
 1313|  35.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  35.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  35.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  35.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  35.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 0, False: 35.1k]
  ------------------
 1320|       |
 1321|  35.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  35.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  30.8k|        {
 1327|  30.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  30.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  30.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  30.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  30.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  30.8k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 2, False: 30.8k]
  ------------------
 1335|       |
 1336|  30.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  30.8k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  63.6k|        {
 1342|  63.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  63.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  63.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  63.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  63.6k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 11.4k, False: 52.2k]
  ------------------
 1349|       |
 1350|  63.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  63.6k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  13.5k|        {
 1356|  13.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  13.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  13.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  13.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  13.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  13.5k|            processor.SetFPSRValue(new_value);
 1365|  13.5k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  17.5k|        {
 1370|  17.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  17.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  17.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  17.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  17.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  17.5k|            processor.SetFPSRValue(new_value);
 1379|  17.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  69.7k|        {
 1384|  69.7k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  69.7k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  69.7k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  69.7k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 49.4k, False: 20.3k]
  ------------------
 1390|  49.4k|            {
 1391|  49.4k|                JumpToLabel(processor, jump_label.label_name);
 1392|  49.4k|            }
 1393|  69.7k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  65.9k|        {
 1398|  65.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  65.9k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  65.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  65.9k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 36.6k, False: 29.3k]
  ------------------
 1404|  36.6k|            {
 1405|  36.6k|                JumpToLabel(processor, jump_label.label_name);
 1406|  36.6k|            }
 1407|  65.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  38.1k|        {
 1412|  38.1k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  38.1k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  38.1k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 22.7k, False: 15.3k]
  ------------------
 1417|  22.7k|            {
 1418|  22.7k|                JumpToLabel(processor, jump_label.label_name);
 1419|  22.7k|            }
 1420|  38.1k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   921k|        {
 1425|   921k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   921k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   921k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 901k, False: 19.4k]
  ------------------
 1430|   901k|            {
 1431|   901k|                JumpToLabel(processor, jump_label.label_name);
 1432|   901k|            }
 1433|   921k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|  64.1k|        {
 1438|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1441|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  49.6k|        {
 1446|  49.6k|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  49.6k|            JumpToRegister(processor, jump_register.register_id);
 1449|  49.6k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  44.4k|        {
 1454|  44.4k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  44.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  44.4k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  44.4k|            JumpToLabel(processor, jump_label.label_name);
 1460|  44.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|   570k|        {
 1465|   570k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|   570k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|   570k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|   570k|            JumpToRegister(processor, jump_register.register_id);
 1471|   570k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  13.5k|        {
 1476|  13.5k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  13.5k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  13.5k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  13.5k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|      1|        {
 1487|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 0, False: 1]
  ------------------
 1492|      0|            {
 1493|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      0|                return;
 1495|      0|            }
 1496|       |
 1497|      1|            phi::i32 address = optional_address.value();
 1498|       |
 1499|      1|            auto optional_value =
 1500|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1501|       |
 1502|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 1, False: 0]
  ------------------
 1503|      1|            {
 1504|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      1|                return;
 1507|      1|            }
 1508|       |
 1509|      0|            phi::i32 value = optional_value.value();
 1510|       |
 1511|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|      1|        {
 1517|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 0, False: 1]
  ------------------
 1522|      0|            {
 1523|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      0|                return;
 1525|      0|            }
 1526|       |
 1527|      1|            phi::i32 address = optional_address.value();
 1528|       |
 1529|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|      1|                    static_cast<std::size_t>(address.unsafe()));
 1531|       |
 1532|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 1, False: 0]
  ------------------
 1533|      1|            {
 1534|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      1|                return;
 1537|      1|            }
 1538|       |
 1539|      0|            phi::u32 value = optional_value.value();
 1540|       |
 1541|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|      1|        {
 1547|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 0, False: 1]
  ------------------
 1552|      0|            {
 1553|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      0|                return;
 1555|      0|            }
 1556|       |
 1557|      1|            phi::i32 address = optional_address.value();
 1558|       |
 1559|      1|            auto optional_value =
 1560|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1561|       |
 1562|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 1, False: 0]
  ------------------
 1563|      1|            {
 1564|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      1|                return;
 1567|      1|            }
 1568|       |
 1569|      0|            phi::i32 value = optional_value.value();
 1570|       |
 1571|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|      1|        {
 1577|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 0, False: 1]
  ------------------
 1582|      0|            {
 1583|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      0|                return;
 1585|      0|            }
 1586|       |
 1587|      1|            phi::i32 address = optional_address.value();
 1588|       |
 1589|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|      1|                    static_cast<std::size_t>(address.unsafe()));
 1591|       |
 1592|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 1, False: 0]
  ------------------
 1593|      1|            {
 1594|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      1|                return;
 1597|      1|            }
 1598|       |
 1599|      0|            phi::u32 value = optional_value.value();
 1600|       |
 1601|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|      1|        {
 1607|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 0, False: 1]
  ------------------
 1612|      0|            {
 1613|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      0|                return;
 1615|      0|            }
 1616|       |
 1617|      1|            phi::i32 address = optional_address.value();
 1618|       |
 1619|      1|            auto optional_value =
 1620|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1621|       |
 1622|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 1, False: 0]
  ------------------
 1623|      1|            {
 1624|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      1|                return;
 1627|      1|            }
 1628|       |
 1629|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|      1|        {
 1635|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 0, False: 1]
  ------------------
 1640|      0|            {
 1641|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      0|                return;
 1643|      0|            }
 1644|       |
 1645|      1|            phi::i32 address = optional_address.value();
 1646|       |
 1647|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|      1|                    static_cast<std::size_t>(address.unsafe()));
 1649|       |
 1650|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 1, False: 0]
  ------------------
 1651|      1|            {
 1652|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      1|                return;
 1655|      1|            }
 1656|       |
 1657|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|      1|        {
 1663|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 0, False: 1]
  ------------------
 1668|      0|            {
 1669|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      0|                return;
 1671|      0|            }
 1672|       |
 1673|      1|            phi::i32 address = optional_address.value();
 1674|       |
 1675|      1|            auto optional_value =
 1676|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1677|       |
 1678|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 1, False: 0]
  ------------------
 1679|      1|            {
 1680|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      1|                return;
 1683|      1|            }
 1684|       |
 1685|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|      1|        {
 1691|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 0, False: 1]
  ------------------
 1696|      0|            {
 1697|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      0|                return;
 1699|      0|            }
 1700|       |
 1701|      1|            phi::i32 address = optional_address.value();
 1702|       |
 1703|      1|            auto optional_value =
 1704|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1705|       |
 1706|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 1, False: 0]
  ------------------
 1707|      1|            {
 1708|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      1|                return;
 1711|      1|            }
 1712|       |
 1713|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  24.3k|        {
 1939|  24.3k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  24.3k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  24.3k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  24.3k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  24.3k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  7.94k|        {
 1950|  7.94k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  7.94k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  7.94k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  7.94k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  7.94k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1960|  13.3k|        {
 1961|  13.3k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1962|  13.3k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1963|       |
 1964|  13.3k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1965|       |
 1966|  13.3k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1967|       |
 1968|  13.3k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1969|  13.3k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1973|  19.6k|        {
 1974|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1975|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1976|       |
 1977|  19.6k|            const std::int32_t source_value =
 1978|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1979|       |
 1980|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1981|       |
 1982|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1983|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  16.1k|        {
 1988|  16.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  16.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  16.1k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  16.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  16.1k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  31.9k|        {
 1999|  31.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  31.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  31.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  31.9k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2004|  31.9k|            const float        converted_value_float =
 2005|  31.9k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  31.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  31.9k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  19.3k|        {
 2013|  19.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  19.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  19.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  19.3k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  19.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  19.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  23.7k|        {
 2025|  23.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  23.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  23.7k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  23.7k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2030|  23.7k|            const float        converted_value_float =
 2031|  23.7k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  23.7k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  23.7k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  18.4k|        {
 2039|  18.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  18.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  18.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  18.4k|            const std::int32_t converted_value_int =
 2044|  18.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2045|  18.4k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  18.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  18.4k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  11.7k|        {
 2053|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  11.7k|            const std::int32_t converted_value_int =
 2058|  11.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2059|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      9|        {
 2073|      9|            processor.Raise(Exception::Halt);
 2074|      9|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|   369k|        {
 2079|       |            /* Do nothing */
 2080|   369k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   360k|    {
  169|   360k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   360k|        SafeWriteInteger(processor, dest_reg, res);
  172|   360k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|   530k|    {
  124|   530k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|   530k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|   530k|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 22.9k, False: 507k]
  ------------------
  129|  22.9k|        {
  130|  22.9k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  22.9k|            value = max + (value % (min - 1));
  133|  22.9k|        }
  134|       |        // Check for overflow
  135|   507k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 21.5k, False: 485k]
  ------------------
  136|  21.5k|        {
  137|  21.5k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  21.5k|            value = min + (value % (max + 1));
  140|  21.5k|        }
  141|       |
  142|   530k|        PHI_ASSERT(value >= min);
  143|   530k|        PHI_ASSERT(value <= max);
  144|       |
  145|   530k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  146|   530k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  68.8k|    {
  177|  68.8k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  68.8k|        SafeWriteInteger(processor, dest_reg, res);
  180|  68.8k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   359k|    {
  151|   359k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   359k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 29.3k, False: 329k]
  ------------------
  155|  29.3k|        {
  156|  29.3k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  29.3k|            value %= max + 1u;
  159|  29.3k|        }
  160|       |
  161|   359k|        PHI_ASSERT(value <= max);
  162|       |
  163|   359k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  164|   359k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|  68.4k|    {
  185|  68.4k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|  68.4k|        SafeWriteInteger(processor, dest_reg, res);
  188|  68.4k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|   182k|    {
  193|   182k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|   182k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 71.6k, False: 110k]
  ------------------
  196|  71.6k|        {
  197|  71.6k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  71.6k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  71.6k|            SafeWriteInteger(processor, dest_reg, res);
  201|  71.6k|            return;
  202|  71.6k|        }
  203|       |
  204|   110k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|   110k|        SafeWriteInteger(processor, dest_reg, res);
  207|   110k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|  95.9k|    {
  212|  95.9k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|  95.9k|        SafeWriteInteger(processor, dest_reg, res);
  215|  95.9k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  97.8k|    {
  220|  97.8k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  97.8k|        SafeWriteInteger(processor, dest_reg, res);
  223|  97.8k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  5.01k|    {
  228|  5.01k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 5.01k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  5.01k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  5.01k|        SafeWriteInteger(processor, dest_reg, res);
  237|  5.01k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  10.0k|    {
  242|  10.0k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 2, False: 10.0k]
  ------------------
  243|      2|        {
  244|      2|            processor.Raise(Exception::DivideByZero);
  245|      2|            return;
  246|      2|        }
  247|       |
  248|  10.0k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  10.0k|        SafeWriteInteger(processor, dest_reg, res);
  251|  10.0k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   218k|    {
  325|   218k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 9.46k, False: 209k]
  ------------------
  326|  9.46k|        {
  327|  9.46k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  9.46k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  9.46k|            return;
  332|  9.46k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   209k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 18.0k, False: 191k]
  ------------------
  336|  18.0k|        {
  337|  18.0k|            processor.Raise(Exception::BadShift);
  338|  18.0k|            return;
  339|  18.0k|        }
  340|       |
  341|   191k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   191k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   191k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|   102k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|   102k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 9.68k, False: 92.5k]
  ------------------
  258|  9.68k|        {
  259|  9.68k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  9.68k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  9.68k|            return;
  264|  9.68k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|  92.5k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 60.9k, False: 31.6k]
  ------------------
  268|  60.9k|        {
  269|  60.9k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  60.9k|            return;
  271|  60.9k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  31.6k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 4.84k, False: 26.8k]
  ------------------
  275|  4.84k|        {
  276|  4.84k|            processor.Raise(Exception::BadShift);
  277|  4.84k|            return;
  278|  4.84k|        }
  279|       |
  280|  26.8k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  26.8k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  26.8k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  26.8k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  26.8k|    {
   29|  26.8k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  26.8k|        return value & ~(-1 << (32 - n));
   32|  26.8k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   101k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   101k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 9.25k, False: 92.4k]
  ------------------
  292|  9.25k|        {
  293|  9.25k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  9.25k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 3.19k, False: 6.06k]
  ------------------
  297|  3.19k|            {
  298|       |                // Set every byte to 1
  299|  3.19k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  3.19k|            }
  301|  6.06k|            else
  302|  6.06k|            {
  303|       |                // Set every byte to 0
  304|  6.06k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  6.06k|            }
  306|  9.25k|            return;
  307|  9.25k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|  92.4k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 17.9k, False: 74.4k]
  ------------------
  311|  17.9k|        {
  312|  17.9k|            processor.Raise(Exception::BadShift);
  313|  17.9k|            return;
  314|  17.9k|        }
  315|       |
  316|  74.4k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  74.4k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  74.4k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|  1.11M|    {
   38|       |        // Lookup the label
   39|  1.11M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   40|  1.11M|        PHI_ASSERT(program != nullptr);
   41|  1.11M|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|  1.11M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 55, False: 1.11M]
  ------------------
   44|     55|        {
   45|     55|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     55|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|     55|            processor.Raise(Exception::UnknownLabel);
   47|     55|            return;
   48|     55|        }
   49|       |
   50|  1.11M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|  1.11M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|  1.11M|        processor.SetNextProgramCounter(jump_point);
   55|  1.11M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|   620k|    {
   59|   620k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|   620k|        phi::u32 max_address =
   62|   620k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   63|   620k|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 11, False: 620k]
  ------------------
   64|     11|        {
   65|     11|            processor.Raise(Exception::AddressOutOfBounds);
   66|     11|            return;
   67|     11|        }
   68|       |
   69|   620k|        processor.SetNextProgramCounter(address.unsafe());
   70|   620k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|      8|    {
  100|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 8, False: 0]
  ------------------
  101|      8|        {
  102|      8|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 0, False: 8]
  ------------------
  105|      0|            {
  106|      0|                return {};
  107|      0|            }
  108|       |
  109|      8|            return imm_value.signed_value;
  110|      8|        }
  111|       |
  112|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  6.32M|    {
   12|  6.32M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  6.32M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  6.32M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  6.32M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  6.32M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  6.32M|                   "Unexpected argument type for arg1");
   22|  6.32M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  6.32M|                   "Unexpected argument type for arg2");
   24|  6.32M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  6.32M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  6.32M|        m_Executor(processor, arg1, arg2, arg3);
   29|  6.32M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   220k|    {
  453|   220k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   220k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.95M|    {
   17|  1.95M|        m_ValueSigned = val;
   18|  1.95M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  1.35M|    {
   22|  1.35M|        m_ValueUnsigned = val;
   23|  1.35M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  3.18M|    {
   27|  3.18M|        return m_ValueSigned;
   28|  3.18M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  2.09M|    {
   32|  2.09M|        return m_ValueUnsigned;
   33|  2.09M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  3.73M|    {
   37|  3.73M|        return m_IsReadOnly;
   38|  3.73M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|      1|    {
   22|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1, False: 0]
  ------------------
   23|      1|        {
   24|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      1|            return {};
   26|      1|        }
   27|       |
   28|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|      0|        return m_Values[raw_address].signed_value;
   31|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|      1|    {
   35|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 1, False: 0]
  ------------------
   36|      1|        {
   37|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      1|            return {};
   39|      1|        }
   40|       |
   41|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|      0|        return m_Values[raw_address].unsigned_value;
   43|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|      1|    {
   47|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1, False: 0]
  ------------------
   48|      1|        {
   49|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      1|            return {};
   51|      1|        }
   52|       |
   53|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  ------------------
   56|      0|        {
   57|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      0|            return {};
   59|      0|        }
   60|       |
   61|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|      1|    {
   66|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1, False: 0]
  ------------------
   67|      1|        {
   68|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      1|            return {};
   70|      1|        }
   71|       |
   72|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 0, False: 0]
  ------------------
   75|      0|        {
   76|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      0|            return {};
   78|      0|        }
   79|       |
   80|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|      1|    {
   85|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 1, False: 0]
  ------------------
   86|      1|        {
   87|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      1|            return {};
   89|      1|        }
   90|       |
   91|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 0, False: 0]
  ------------------
   94|      0|        {
   95|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      0|            return {};
   97|      0|        }
   98|       |
   99|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|      1|    {
  104|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 1, False: 0]
  ------------------
  105|      1|        {
  106|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      1|            return {};
  108|      1|        }
  109|       |
  110|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 0, False: 0]
  ------------------
  113|      0|        {
  114|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      0|            return {};
  116|      0|        }
  117|       |
  118|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|      1|    {
  123|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1, False: 0]
  ------------------
  124|      1|        {
  125|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      1|            return {};
  127|      1|        }
  128|       |
  129|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 0, False: 0]
  ------------------
  132|      0|        {
  133|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      0|            return {};
  135|      0|        }
  136|       |
  137|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|      1|    {
  142|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1, False: 0]
  ------------------
  143|      1|        {
  144|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      1|            return {};
  146|      1|        }
  147|       |
  148|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|        {
  152|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      0|            return {};
  154|      0|        }
  155|       |
  156|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|      8|    {
  269|       |        // Cannot access anything before the starting address
  270|      8|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 8, False: 0]
  ------------------
  271|      8|        {
  272|      8|            return false;
  273|      8|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 0]
  ------------------
  277|      0|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 0]
  ------------------
  284|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 0, False: 0]
  ------------------
  291|      0|        {
  292|      0|            return false;
  293|      0|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|      0|        return true;
  297|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  10.1k|    {
  307|  10.1k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 10.1M, False: 10.1k]
  ------------------
  308|  10.1M|        {
  309|  10.1M|            val.signed_value = 0;
  310|  10.1M|        }
  311|  10.1k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  1.17M|    {
   24|  1.17M|        switch (token.length().unsafe())
   25|  1.17M|        {
   26|       |            // 1 character OpCodes
   27|  38.1k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 38.1k, False: 1.13M]
  ------------------
   28|  38.1k|                const char c1 = token[0u];
   29|       |
   30|  38.1k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 24.4k, False: 13.7k]
  ------------------
   31|  24.4k|                {
   32|  24.4k|                    return OpCode::J;
   33|  24.4k|                }
   34|  13.7k|                break;
   35|  38.1k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|  85.8k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 85.8k, False: 1.09M]
  ------------------
   39|  85.8k|                const char c1 = token[0u];
   40|  85.8k|                const char c2 = token[1u];
   41|       |
   42|  85.8k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 36.6k, False: 49.2k]
  ------------------
   43|  85.8k|                {
   44|    249|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 249, False: 85.6k]
  ------------------
   45|    488|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 239, False: 85.6k]
  ------------------
   46|    488|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 150, False: 338]
  ------------------
   47|    150|                        {
   48|    150|                            return OpCode::JR;
   49|    150|                        }
   50|    338|                        break;
   51|       |
   52|  18.7k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 18.7k, False: 67.1k]
  ------------------
   53|  19.2k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 474, False: 85.4k]
  ------------------
   54|  19.2k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 184, False: 19.0k]
  ------------------
   55|  19.2k|                        {
   56|     75|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 75, False: 19.1k]
  ------------------
   57|    202|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 127, False: 19.1k]
  ------------------
   58|    202|                                return OpCode::LB;
   59|    720|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 720, False: 18.5k]
  ------------------
   60|    786|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 66, False: 19.1k]
  ------------------
   61|    786|                                return OpCode::LD;
   62|    122|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 122, False: 19.1k]
  ------------------
   63|    320|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 198, False: 19.0k]
  ------------------
   64|    320|                                return OpCode::LF;
   65|     81|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 81, False: 19.1k]
  ------------------
   66|    247|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 166, False: 19.0k]
  ------------------
   67|    247|                                return OpCode::LH;
   68|  17.4k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 17.4k, False: 1.80k]
  ------------------
   69|  17.5k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 66, False: 19.1k]
  ------------------
   70|  17.5k|                                return OpCode::LW;
   71|  19.2k|                        }
   72|    184|                        break;
   73|    718|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 718, False: 85.1k]
  ------------------
   74|  14.1k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 13.4k, False: 72.4k]
  ------------------
   75|  14.1k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 982, False: 13.1k]
  ------------------
   76|    982|                        {
   77|    982|                            return OpCode::OR;
   78|    982|                        }
   79|  13.1k|                        break;
   80|  14.3k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 14.3k, False: 71.5k]
  ------------------
   81|  15.3k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 957, False: 84.9k]
  ------------------
   82|  15.3k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 145, False: 15.1k]
  ------------------
   83|  15.3k|                        {
   84|  2.67k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 2.67k, False: 12.6k]
  ------------------
   85|  2.74k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 69, False: 15.2k]
  ------------------
   86|  2.74k|                                return OpCode::SB;
   87|    101|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 101, False: 15.2k]
  ------------------
   88|    745|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 644, False: 14.6k]
  ------------------
   89|    745|                                return OpCode::SD;
   90|  11.2k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 11.2k, False: 4.09k]
  ------------------
   91|  11.3k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 130, False: 15.2k]
  ------------------
   92|  11.3k|                                return OpCode::SF;
   93|     79|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 79, False: 15.2k]
  ------------------
   94|    191|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 112, False: 15.2k]
  ------------------
   95|    191|                                return OpCode::SH;
   96|     69|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 69, False: 15.2k]
  ------------------
   97|    136|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 67, False: 15.2k]
  ------------------
   98|    136|                                return OpCode::SW;
   99|  15.3k|                        }
  100|    145|                        break;
  101|  85.8k|                }
  102|  50.4k|                break;
  103|  85.8k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   501k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 501k, False: 675k]
  ------------------
  107|   501k|                const char c1 = token[0u];
  108|   501k|                const char c2 = token[1u];
  109|   501k|                const char c3 = token[2u];
  110|       |
  111|   501k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 53.3k, False: 448k]
  ------------------
  112|   501k|                {
  113|   177k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 177k, False: 324k]
  ------------------
  114|   177k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 106, False: 501k]
  ------------------
  115|   177k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 177k, False: 255]
  |  Branch (115:29): [True: 176k, False: 362]
  |  Branch (115:45): [True: 176k, False: 107]
  ------------------
  116|   176k|                        {
  117|   176k|                            return OpCode::ADD;
  118|   176k|                        }
  119|    362|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 240, False: 122]
  |  Branch (119:34): [True: 174, False: 188]
  |  Branch (119:50): [True: 174, False: 66]
  ------------------
  120|    174|                        {
  121|    174|                            return OpCode::AND;
  122|    174|                        }
  123|    188|                        break;
  124|       |
  125|    190|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 190, False: 501k]
  ------------------
  126|    365|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 175, False: 501k]
  ------------------
  127|    365|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 262, False: 103]
  |  Branch (127:29): [True: 196, False: 169]
  |  Branch (127:45): [True: 196, False: 66]
  ------------------
  128|    196|                        {
  129|    196|                            return OpCode::DIV;
  130|    196|                        }
  131|    169|                        break;
  132|       |
  133|  12.9k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 12.9k, False: 489k]
  ------------------
  134|  13.0k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 185, False: 501k]
  ------------------
  135|  13.0k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 12.9k, False: 174]
  ------------------
  136|  12.9k|                        {
  137|  12.9k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 180, False: 12.7k]
  ------------------
  138|    180|                            {
  139|    180|                                return OpCode::EQD;
  140|    180|                            }
  141|  12.7k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 12.6k, False: 66]
  ------------------
  142|  12.6k|                            {
  143|  12.6k|                                return OpCode::EQF;
  144|  12.6k|                            }
  145|  12.9k|                        }
  146|    240|                        break;
  147|       |
  148|  16.2k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 16.2k, False: 485k]
  ------------------
  149|  16.9k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 632, False: 501k]
  ------------------
  150|  16.9k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 448, False: 16.4k]
  ------------------
  151|    448|                        {
  152|    448|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 230, False: 218]
  ------------------
  153|    230|                            {
  154|    230|                                return OpCode::GED;
  155|    230|                            }
  156|    218|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 152, False: 66]
  ------------------
  157|    152|                            {
  158|    152|                                return OpCode::GEF;
  159|    152|                            }
  160|    448|                        }
  161|  16.4k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 16.2k, False: 202]
  ------------------
  162|  16.2k|                        {
  163|  16.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 14.4k, False: 1.82k]
  ------------------
  164|  14.4k|                            {
  165|  14.4k|                                return OpCode::GTD;
  166|  14.4k|                            }
  167|  1.82k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 1.74k, False: 76]
  ------------------
  168|  1.74k|                            {
  169|  1.74k|                                return OpCode::GTF;
  170|  1.74k|                            }
  171|  1.82k|                        }
  172|    344|                        break;
  173|       |
  174|  6.31k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 6.31k, False: 495k]
  ------------------
  175|  9.23k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 2.91k, False: 499k]
  ------------------
  176|  9.23k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 9.16k, False: 67]
  |  Branch (176:29): [True: 6.78k, False: 2.45k]
  |  Branch (176:45): [True: 6.78k, False: 2.38k]
  ------------------
  177|  6.78k|                        {
  178|  6.78k|                            return OpCode::JAL;
  179|  6.78k|                        }
  180|  2.45k|                        break;
  181|       |
  182|  41.5k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 41.5k, False: 460k]
  ------------------
  183|  66.2k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 24.6k, False: 477k]
  ------------------
  184|  66.2k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 8.94k, False: 57.2k]
  ------------------
  185|  66.2k|                        {
  186|     96|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 96, False: 66.1k]
  ------------------
  187|  16.2k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 16.1k, False: 50.0k]
  ------------------
  188|  16.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 7.30k, False: 8.94k]
  ------------------
  189|  7.30k|                                {
  190|  7.30k|                                    return OpCode::LBU;
  191|  7.30k|                                }
  192|  8.94k|                                break;
  193|       |
  194|  8.94k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 8.70k, False: 57.5k]
  ------------------
  195|  16.7k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 7.99k, False: 58.2k]
  ------------------
  196|  16.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 8.08k, False: 8.62k]
  ------------------
  197|  8.08k|                                {
  198|  8.08k|                                    return OpCode::LED;
  199|  8.08k|                                }
  200|  8.62k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 1.44k, False: 7.17k]
  ------------------
  201|  1.44k|                                {
  202|  1.44k|                                    return OpCode::LEF;
  203|  1.44k|                                }
  204|  7.17k|                                break;
  205|       |
  206|  15.3k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 15.3k, False: 50.8k]
  ------------------
  207|  23.3k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 8.00k, False: 58.2k]
  ------------------
  208|  23.3k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 5.61k, False: 17.7k]
  ------------------
  209|  5.61k|                                {
  210|  5.61k|                                    return OpCode::LHI;
  211|  5.61k|                                }
  212|  17.7k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 10.0k, False: 7.75k]
  ------------------
  213|  10.0k|                                {
  214|  10.0k|                                    return OpCode::LHU;
  215|  10.0k|                                }
  216|  7.75k|                                break;
  217|       |
  218|  7.75k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 660, False: 65.5k]
  ------------------
  219|    761|                            case 't':
  ------------------
  |  Branch (219:29): [True: 101, False: 66.1k]
  ------------------
  220|    761|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 503, False: 258]
  ------------------
  221|    503|                                {
  222|    503|                                    return OpCode::LTD;
  223|    503|                                }
  224|    258|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 160, False: 98]
  ------------------
  225|    160|                                {
  226|    160|                                    return OpCode::LTF;
  227|    160|                                }
  228|     98|                                break;
  229|       |
  230|     98|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 70, False: 66.1k]
  ------------------
  231|    167|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 97, False: 66.1k]
  ------------------
  232|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 133, False: 34]
  ------------------
  233|    133|                                {
  234|    133|                                    return OpCode::LWU;
  235|    133|                                }
  236|     34|                                break;
  237|  66.2k|                        }
  238|  32.9k|                        break;
  239|       |
  240|  32.9k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 25.1k, False: 476k]
  ------------------
  241|  25.6k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 563, False: 501k]
  ------------------
  242|  25.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 463, False: 25.2k]
  ------------------
  243|    463|                        {
  244|    463|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 170, False: 293]
  ------------------
  245|    170|                            {
  246|    170|                                return OpCode::NED;
  247|    170|                            }
  248|    293|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 227, False: 66]
  ------------------
  249|    227|                            {
  250|    227|                                return OpCode::NEF;
  251|    227|                            }
  252|    463|                        }
  253|  25.2k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 23.6k, False: 1.58k]
  |  Branch (253:34): [True: 15.4k, False: 9.78k]
  |  Branch (253:50): [True: 15.4k, False: 8.19k]
  ------------------
  254|  15.4k|                        {
  255|  15.4k|                            return OpCode::NOP;
  256|  15.4k|                        }
  257|       |
  258|  9.84k|                        break;
  259|       |
  260|  9.84k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 123, False: 501k]
  ------------------
  261|  17.1k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 17.0k, False: 484k]
  ------------------
  262|  17.1k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 15.0k, False: 2.05k]
  |  Branch (262:29): [True: 6.54k, False: 10.6k]
  |  Branch (262:45): [True: 6.54k, False: 8.55k]
  ------------------
  263|  6.54k|                        {
  264|  6.54k|                            return OpCode::ORI;
  265|  6.54k|                        }
  266|  10.6k|                        break;
  267|       |
  268|   119k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 119k, False: 382k]
  ------------------
  269|   120k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 813, False: 501k]
  ------------------
  270|   120k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 736, False: 119k]
  ------------------
  271|   120k|                        {
  272|     94|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 94, False: 120k]
  ------------------
  273|    247|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 153, False: 120k]
  ------------------
  274|    247|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 160, False: 87]
  ------------------
  275|    160|                                {
  276|    160|                                    return OpCode::SBU;
  277|    160|                                }
  278|     87|                                break;
  279|       |
  280|    103|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 103, False: 120k]
  ------------------
  281|    235|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 132, False: 120k]
  ------------------
  282|    235|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 169, False: 66]
  ------------------
  283|    169|                                {
  284|    169|                                    return OpCode::SEQ;
  285|    169|                                }
  286|     66|                                break;
  287|       |
  288|  32.8k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 32.8k, False: 87.4k]
  ------------------
  289|  39.6k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 6.79k, False: 113k]
  ------------------
  290|  39.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 24.1k, False: 15.5k]
  ------------------
  291|  24.1k|                                {
  292|  24.1k|                                    return OpCode::SGE;
  293|  24.1k|                                }
  294|  15.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 8.83k, False: 6.72k]
  ------------------
  295|  8.83k|                                {
  296|  8.83k|                                    return OpCode::SGT;
  297|  8.83k|                                }
  298|  6.72k|                                break;
  299|       |
  300|  9.03k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 9.03k, False: 111k]
  ------------------
  301|  9.20k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 166, False: 120k]
  ------------------
  302|  9.20k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 9.13k, False: 69]
  ------------------
  303|  9.13k|                                {
  304|  9.13k|                                    return OpCode::SHU;
  305|  9.13k|                                }
  306|     69|                                break;
  307|       |
  308|  13.0k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 13.0k, False: 107k]
  ------------------
  309|  13.3k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 323, False: 119k]
  ------------------
  310|  13.3k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 67, False: 13.3k]
  ------------------
  311|  13.3k|                                {
  312|  8.85k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 8.85k, False: 4.53k]
  ------------------
  313|  8.92k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 66, False: 13.3k]
  ------------------
  314|  8.92k|                                        return OpCode::SLA;
  315|       |
  316|  2.37k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.37k, False: 11.0k]
  ------------------
  317|  2.44k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 66, False: 13.3k]
  ------------------
  318|  2.44k|                                        return OpCode::SLE;
  319|       |
  320|  1.07k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 1.07k, False: 12.3k]
  ------------------
  321|  1.13k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 66, False: 13.3k]
  ------------------
  322|  1.13k|                                        return OpCode::SLL;
  323|       |
  324|    694|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 694, False: 12.6k]
  ------------------
  325|    819|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 125, False: 13.2k]
  ------------------
  326|    819|                                        return OpCode::SLT;
  327|  13.3k|                                }
  328|     67|                                break;
  329|       |
  330|  17.6k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 17.6k, False: 102k]
  ------------------
  331|  17.8k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 132, False: 120k]
  ------------------
  332|  17.8k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 17.7k, False: 66]
  ------------------
  333|  17.7k|                                {
  334|  17.7k|                                    return OpCode::SNE;
  335|  17.7k|                                }
  336|     66|                                break;
  337|       |
  338|  13.8k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 13.8k, False: 106k]
  ------------------
  339|  13.9k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 129, False: 120k]
  ------------------
  340|  13.9k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 245, False: 13.6k]
  ------------------
  341|    245|                                {
  342|    245|                                    return OpCode::SRA;
  343|    245|                                }
  344|  13.6k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 13.6k, False: 66]
  ------------------
  345|  13.6k|                                {
  346|  13.6k|                                    return OpCode::SRL;
  347|  13.6k|                                }
  348|     66|                                break;
  349|       |
  350|  21.1k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 21.1k, False: 99.1k]
  ------------------
  351|  21.2k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 93, False: 120k]
  ------------------
  352|  21.2k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 21.2k, False: 66]
  ------------------
  353|  21.2k|                                {
  354|  21.2k|                                    return OpCode::SUB;
  355|  21.2k|                                }
  356|     66|                                break;
  357|       |
  358|  3.58k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 3.58k, False: 116k]
  ------------------
  359|  3.80k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 220, False: 120k]
  ------------------
  360|  3.80k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 3.68k, False: 122]
  ------------------
  361|  3.68k|                                {
  362|  3.68k|                                    return OpCode::SWU;
  363|  3.68k|                                }
  364|    122|                                break;
  365|   120k|                        }
  366|       |
  367|  10.2k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 2.13k, False: 499k]
  ------------------
  368|  10.4k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 201, False: 501k]
  ------------------
  369|  10.4k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 2.18k, False: 8.22k]
  |  Branch (369:29): [True: 2.02k, False: 8.38k]
  |  Branch (369:45): [True: 2.02k, False: 163]
  ------------------
  370|  2.02k|                        {
  371|  2.02k|                            return OpCode::XOR;
  372|  2.02k|                        }
  373|  8.38k|                        break;
  374|   501k|                }
  375|   118k|                break;
  376|   501k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|   397k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 397k, False: 779k]
  ------------------
  380|   397k|                const char c1 = token[0u];
  381|   397k|                const char c2 = token[1u];
  382|   397k|                const char c3 = token[2u];
  383|   397k|                const char c4 = token[3u];
  384|       |
  385|   397k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 41.4k, False: 355k]
  ------------------
  386|   397k|                {
  387|  59.0k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 59.0k, False: 338k]
  ------------------
  388|  62.9k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 3.83k, False: 393k]
  ------------------
  389|  62.9k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 476, False: 62.4k]
  ------------------
  390|  62.9k|                        {
  391|  52.3k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 52.3k, False: 10.5k]
  ------------------
  392|  55.6k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 3.29k, False: 59.6k]
  ------------------
  393|  55.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 55.6k, False: 70]
  ------------------
  394|  55.6k|                                {
  395|  55.6k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 2.89k, False: 52.7k]
  ------------------
  396|  55.6k|                                    {
  397|  16.1k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 16.1k, False: 39.4k]
  ------------------
  398|  16.2k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 55.5k]
  ------------------
  399|  16.2k|                                            return OpCode::ADDD;
  400|       |
  401|  19.7k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 19.7k, False: 35.8k]
  ------------------
  402|  19.9k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 243, False: 55.3k]
  ------------------
  403|  19.9k|                                            return OpCode::ADDF;
  404|       |
  405|  12.0k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 12.0k, False: 43.5k]
  ------------------
  406|  12.1k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 55.5k]
  ------------------
  407|  12.1k|                                            return OpCode::ADDI;
  408|       |
  409|  4.29k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 4.29k, False: 51.3k]
  ------------------
  410|  4.36k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 55.5k]
  ------------------
  411|  4.36k|                                            return OpCode::ADDU;
  412|  55.6k|                                    }
  413|  55.6k|                                }
  414|  2.96k|                                break;
  415|       |
  416|  6.67k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 6.67k, False: 56.2k]
  ------------------
  417|  6.77k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 102, False: 62.8k]
  ------------------
  418|  6.77k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 6.71k, False: 66]
  |  Branch (418:37): [True: 6.64k, False: 132]
  |  Branch (418:53): [True: 6.64k, False: 66]
  ------------------
  419|  6.64k|                                {
  420|  6.64k|                                    return OpCode::ANDI;
  421|  6.64k|                                }
  422|       |
  423|    132|                                break;
  424|  62.9k|                        }
  425|  3.56k|                        break;
  426|       |
  427|  25.2k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 25.2k, False: 372k]
  ------------------
  428|  68.9k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 43.7k, False: 353k]
  ------------------
  429|  68.9k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 7.22k, False: 61.7k]
  ------------------
  430|  68.9k|                        {
  431|    112|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 112, False: 68.8k]
  ------------------
  432|    898|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 786, False: 68.1k]
  ------------------
  433|    898|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 777, False: 121]
  |  Branch (433:37): [True: 178, False: 720]
  |  Branch (433:53): [True: 178, False: 599]
  ------------------
  434|    178|                                {
  435|    178|                                    return OpCode::BEQZ;
  436|    178|                                }
  437|    720|                                break;
  438|       |
  439|  24.9k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 24.9k, False: 43.9k]
  ------------------
  440|  40.6k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 15.6k, False: 53.3k]
  ------------------
  441|  40.6k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 39.7k, False: 906]
  ------------------
  442|  39.7k|                                {
  443|  39.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 24.9k, False: 14.7k]
  ------------------
  444|  24.9k|                                    {
  445|  24.9k|                                        return OpCode::BFPF;
  446|  24.9k|                                    }
  447|  14.7k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 13.4k, False: 1.32k]
  ------------------
  448|  13.4k|                                    {
  449|  13.4k|                                        return OpCode::BFPT;
  450|  13.4k|                                    }
  451|  39.7k|                                }
  452|  2.23k|                                break;
  453|       |
  454|  20.1k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 20.1k, False: 48.8k]
  ------------------
  455|  20.2k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 87, False: 68.8k]
  ------------------
  456|  20.2k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 19.0k, False: 1.12k]
  |  Branch (456:37): [True: 8.23k, False: 11.9k]
  |  Branch (456:53): [True: 8.23k, False: 10.8k]
  ------------------
  457|  8.23k|                                {
  458|  8.23k|                                    return OpCode::BNEZ;
  459|  8.23k|                                }
  460|  68.9k|                        }
  461|  22.1k|                        break;
  462|       |
  463|  22.1k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 961, False: 396k]
  ------------------
  464|  32.6k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 31.6k, False: 365k]
  ------------------
  465|  32.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 25.4k, False: 7.16k]
  |  Branch (465:29): [True: 17.7k, False: 14.8k]
  |  Branch (465:45): [True: 17.7k, False: 7.69k]
  ------------------
  466|  17.7k|                        {
  467|  17.7k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 5.77k, False: 11.9k]
  ------------------
  468|  17.7k|                            {
  469|    410|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 410, False: 17.3k]
  ------------------
  470|    476|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 17.6k]
  ------------------
  471|    476|                                    return OpCode::DIVD;
  472|       |
  473|    114|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 114, False: 17.6k]
  ------------------
  474|    180|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 17.6k]
  ------------------
  475|    180|                                    return OpCode::DIVF;
  476|       |
  477|    229|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 229, False: 17.5k]
  ------------------
  478|  3.27k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 3.04k, False: 14.7k]
  ------------------
  479|  3.27k|                                    return OpCode::DIVI;
  480|       |
  481|    171|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 171, False: 17.5k]
  ------------------
  482|  8.04k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 7.87k, False: 9.88k]
  ------------------
  483|  8.04k|                                    return OpCode::DIVU;
  484|  17.7k|                            }
  485|  17.7k|                        }
  486|  20.6k|                        break;
  487|       |
  488|  20.6k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 587, False: 396k]
  ------------------
  489|    975|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 388, False: 396k]
  ------------------
  490|    975|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 817, False: 158]
  |  Branch (490:29): [True: 685, False: 290]
  |  Branch (490:45): [True: 751, False: 66]
  |  Branch (490:61): [True: 685, False: 66]
  ------------------
  491|    685|                        {
  492|    685|                            return OpCode::HALT;
  493|    685|                        }
  494|    290|                        break;
  495|       |
  496|  5.36k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 5.36k, False: 391k]
  ------------------
  497|  14.8k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 9.43k, False: 387k]
  ------------------
  498|  14.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 14.0k, False: 708]
  |  Branch (498:29): [True: 5.43k, False: 9.37k]
  |  Branch (498:45): [True: 8.63k, False: 5.46k]
  |  Branch (498:61): [True: 5.43k, False: 3.19k]
  ------------------
  499|  5.43k|                        {
  500|  5.43k|                            return OpCode::JALR;
  501|  5.43k|                        }
  502|  9.37k|                        break;
  503|       |
  504|  20.4k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 20.4k, False: 376k]
  ------------------
  505|  21.0k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 598, False: 396k]
  ------------------
  506|  21.0k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 18.2k, False: 2.77k]
  |  Branch (506:29): [True: 7.93k, False: 13.1k]
  |  Branch (506:45): [True: 7.93k, False: 10.3k]
  ------------------
  507|  7.93k|                        {
  508|  7.93k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 567, False: 7.36k]
  ------------------
  509|    567|                            {
  510|    567|                                return OpCode::MOVD;
  511|    567|                            }
  512|  7.36k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 469, False: 6.89k]
  ------------------
  513|    469|                            {
  514|    469|                                return OpCode::MOVF;
  515|    469|                            }
  516|  7.93k|                        }
  517|  13.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 2.26k, False: 10.8k]
  |  Branch (517:34): [True: 2.13k, False: 10.9k]
  |  Branch (517:50): [True: 2.20k, False: 66]
  |  Branch (517:66): [True: 2.13k, False: 67]
  ------------------
  518|  2.13k|                        {
  519|  2.13k|                            return OpCode::MULT;
  520|  2.13k|                        }
  521|  17.8k|                        break;
  522|       |
  523|   140k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 140k, False: 256k]
  ------------------
  524|   141k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 1.09k, False: 396k]
  ------------------
  525|   141k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 889, False: 140k]
  ------------------
  526|   141k|                        {
  527|  34.4k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 34.4k, False: 107k]
  ------------------
  528|  34.6k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 261, False: 141k]
  ------------------
  529|  34.6k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 34.6k, False: 66]
  ------------------
  530|  34.6k|                                {
  531|  34.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 5.17k, False: 29.4k]
  ------------------
  532|  5.17k|                                    {
  533|  5.17k|                                        return OpCode::SEQI;
  534|  5.17k|                                    }
  535|  29.4k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 29.3k, False: 66]
  ------------------
  536|  29.3k|                                    {
  537|  29.3k|                                        return OpCode::SEQU;
  538|  29.3k|                                    }
  539|  34.6k|                                }
  540|    132|                                break;
  541|       |
  542|  12.7k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 12.7k, False: 129k]
  ------------------
  543|  22.1k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 9.44k, False: 132k]
  ------------------
  544|  22.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 8.95k, False: 13.2k]
  ------------------
  545|  8.95k|                                {
  546|  8.95k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 8.44k, False: 505]
  ------------------
  547|  8.44k|                                    {
  548|  8.44k|                                        return OpCode::SGEI;
  549|  8.44k|                                    }
  550|    505|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 439, False: 66]
  ------------------
  551|    439|                                    {
  552|    439|                                        return OpCode::SGEU;
  553|    439|                                    }
  554|  8.95k|                                }
  555|  13.2k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 13.1k, False: 84]
  ------------------
  556|  13.1k|                                {
  557|  13.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 350, False: 12.7k]
  ------------------
  558|    350|                                    {
  559|    350|                                        return OpCode::SGTI;
  560|    350|                                    }
  561|  12.7k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 3.69k, False: 9.09k]
  ------------------
  562|  3.69k|                                    {
  563|  3.69k|                                        return OpCode::SGTU;
  564|  3.69k|                                    }
  565|  13.1k|                                }
  566|  9.24k|                                break;
  567|       |
  568|  17.9k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 17.9k, False: 123k]
  ------------------
  569|  30.1k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 12.1k, False: 129k]
  ------------------
  570|  30.1k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 144, False: 29.9k]
  ------------------
  571|  30.1k|                                {
  572|    150|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 150, False: 29.9k]
  ------------------
  573|    282|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 132, False: 30.0k]
  ------------------
  574|    282|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 215, False: 67]
  ------------------
  575|    215|                                        {
  576|    215|                                            return OpCode::SLAI;
  577|    215|                                        }
  578|     67|                                        break;
  579|       |
  580|  3.41k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 3.41k, False: 26.7k]
  ------------------
  581|  5.85k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 2.44k, False: 27.6k]
  ------------------
  582|  5.85k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 773, False: 5.07k]
  ------------------
  583|    773|                                        {
  584|    773|                                            return OpCode::SLEI;
  585|    773|                                        }
  586|  5.07k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 2.83k, False: 2.24k]
  ------------------
  587|  2.83k|                                        {
  588|  2.83k|                                            return OpCode::SLEU;
  589|  2.83k|                                        }
  590|  2.24k|                                        break;
  591|       |
  592|  2.24k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 541, False: 29.5k]
  ------------------
  593|  9.82k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 9.28k, False: 20.8k]
  ------------------
  594|  9.82k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 5.76k, False: 4.05k]
  ------------------
  595|  5.76k|                                        {
  596|  5.76k|                                            return OpCode::SLLI;
  597|  5.76k|                                        }
  598|  4.05k|                                        break;
  599|       |
  600|  13.8k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 13.8k, False: 16.2k]
  ------------------
  601|  14.0k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 138, False: 29.9k]
  ------------------
  602|  14.0k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 12.7k, False: 1.33k]
  ------------------
  603|  12.7k|                                        {
  604|  12.7k|                                            return OpCode::SLTI;
  605|  12.7k|                                        }
  606|  1.33k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 1.25k, False: 79]
  ------------------
  607|  1.25k|                                        {
  608|  1.25k|                                            return OpCode::SLTU;
  609|  1.25k|                                        }
  610|     79|                                        break;
  611|  30.1k|                                }
  612|       |
  613|  6.81k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 221, False: 141k]
  ------------------
  614|  7.00k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 191, False: 141k]
  ------------------
  615|  7.00k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 2.65k, False: 4.34k]
  ------------------
  616|  2.65k|                                {
  617|  2.65k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 201, False: 2.45k]
  ------------------
  618|    201|                                    {
  619|    201|                                        return OpCode::SNEI;
  620|    201|                                    }
  621|  2.45k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 155, False: 2.29k]
  ------------------
  622|    155|                                    {
  623|    155|                                        return OpCode::SNEU;
  624|    155|                                    }
  625|  2.65k|                                }
  626|  6.64k|                                break;
  627|       |
  628|  20.7k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 20.7k, False: 121k]
  ------------------
  629|  20.9k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 160, False: 141k]
  ------------------
  630|  20.9k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 1.84k, False: 19.0k]
  |  Branch (630:37): [True: 1.58k, False: 19.3k]
  |  Branch (630:53): [True: 1.58k, False: 260]
  ------------------
  631|  1.58k|                                {
  632|  1.58k|                                    return OpCode::SRAI;
  633|  1.58k|                                }
  634|  19.3k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 19.0k, False: 262]
  |  Branch (634:42): [True: 19.0k, False: 331]
  |  Branch (634:58): [True: 19.0k, False: 69]
  ------------------
  635|  19.0k|                                {
  636|  19.0k|                                    return OpCode::SRLI;
  637|  19.0k|                                }
  638|    331|                                break;
  639|       |
  640|  32.2k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 32.2k, False: 109k]
  ------------------
  641|  32.5k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 284, False: 141k]
  ------------------
  642|  32.5k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 32.4k, False: 66]
  ------------------
  643|  32.4k|                                {
  644|  32.4k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 66, False: 32.4k]
  ------------------
  645|  32.4k|                                    {
  646|  2.31k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 2.31k, False: 30.1k]
  ------------------
  647|  2.38k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 32.4k]
  ------------------
  648|  2.38k|                                            return OpCode::SUBD;
  649|       |
  650|  16.2k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 16.2k, False: 16.2k]
  ------------------
  651|  16.4k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 162, False: 32.3k]
  ------------------
  652|  16.4k|                                            return OpCode::SUBF;
  653|       |
  654|  1.91k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 1.91k, False: 30.5k]
  ------------------
  655|  1.97k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 66, False: 32.4k]
  ------------------
  656|  1.97k|                                            return OpCode::SUBI;
  657|       |
  658|  11.6k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 11.6k, False: 20.8k]
  ------------------
  659|  11.6k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 32.4k]
  ------------------
  660|  11.6k|                                            return OpCode::SUBU;
  661|  32.4k|                                    }
  662|  32.4k|                                }
  663|    132|                                break;
  664|   141k|                        }
  665|  17.3k|                        break;
  666|       |
  667|  17.3k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 2.63k, False: 394k]
  ------------------
  668|  3.33k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 700, False: 396k]
  ------------------
  669|  3.33k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 2.81k, False: 520]
  |  Branch (669:29): [True: 2.68k, False: 652]
  |  Branch (669:45): [True: 2.74k, False: 66]
  |  Branch (669:61): [True: 2.68k, False: 66]
  ------------------
  670|  2.68k|                        {
  671|  2.68k|                            return OpCode::TRAP;
  672|  2.68k|                        }
  673|    652|                        break;
  674|  2.78k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 2.78k, False: 394k]
  ------------------
  675|  9.48k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 6.69k, False: 390k]
  ------------------
  676|  9.48k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 5.08k, False: 4.39k]
  |  Branch (676:29): [True: 4.59k, False: 4.88k]
  |  Branch (676:45): [True: 4.89k, False: 186]
  |  Branch (676:61): [True: 4.59k, False: 299]
  ------------------
  677|  4.59k|                        {
  678|  4.59k|                            return OpCode::XORI;
  679|  4.59k|                        }
  680|  4.88k|                        break;
  681|   397k|                }
  682|   138k|                break;
  683|   397k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   138k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 84.9k, False: 1.09M]
  ------------------
  687|  84.9k|                const char c1 = token[0u];
  688|  84.9k|                const char c2 = token[1u];
  689|  84.9k|                const char c3 = token[2u];
  690|  84.9k|                const char c4 = token[3u];
  691|  84.9k|                const char c5 = token[4u];
  692|       |
  693|  84.9k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 16.3k, False: 68.6k]
  ------------------
  694|  84.9k|                {
  695|  4.53k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 4.53k, False: 80.3k]
  ------------------
  696|  4.53k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 84.9k]
  ------------------
  697|  4.53k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 4.53k, False: 0]
  |  Branch (697:29): [True: 4.53k, False: 0]
  |  Branch (697:45): [True: 4.53k, False: 0]
  |  Branch (697:61): [True: 4.53k, False: 0]
  |  Branch (697:77): [True: 4.53k, False: 0]
  ------------------
  698|  4.53k|                        {
  699|  4.53k|                            return OpCode::ADDUI;
  700|  4.53k|                        }
  701|      0|                        break;
  702|       |
  703|  12.5k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 12.5k, False: 72.3k]
  ------------------
  704|  12.5k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 84.9k]
  ------------------
  705|  12.5k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 12.5k, False: 0]
  |  Branch (705:29): [True: 12.5k, False: 0]
  |  Branch (705:45): [True: 12.5k, False: 0]
  |  Branch (705:61): [True: 12.5k, False: 0]
  |  Branch (705:77): [True: 12.5k, False: 0]
  ------------------
  706|  12.5k|                        {
  707|  12.5k|                            return OpCode::DIVUI;
  708|  12.5k|                        }
  709|      0|                        break;
  710|       |
  711|  16.2k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 16.2k, False: 68.6k]
  ------------------
  712|  16.2k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 84.9k]
  ------------------
  713|  16.2k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 16.2k, False: 0]
  |  Branch (713:29): [True: 16.2k, False: 0]
  |  Branch (713:45): [True: 16.2k, False: 0]
  |  Branch (713:61): [True: 16.2k, False: 0]
  ------------------
  714|  16.2k|                        {
  715|  16.2k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 16.2k]
  ------------------
  716|  16.2k|                            {
  717|    232|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 232, False: 16.0k]
  ------------------
  718|    232|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 16.2k]
  ------------------
  719|    232|                                    return OpCode::MULTD;
  720|       |
  721|  4.37k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 4.37k, False: 11.8k]
  ------------------
  722|  4.37k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 16.2k]
  ------------------
  723|  4.37k|                                    return OpCode::MULTF;
  724|       |
  725|    896|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 896, False: 15.3k]
  ------------------
  726|    896|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 16.2k]
  ------------------
  727|    896|                                    return OpCode::MULTI;
  728|       |
  729|  10.7k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 10.7k, False: 5.50k]
  ------------------
  730|  10.7k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 16.2k]
  ------------------
  731|  10.7k|                                    return OpCode::MULTU;
  732|  16.2k|                            }
  733|  16.2k|                        }
  734|      0|                        break;
  735|       |
  736|  35.2k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 35.2k, False: 49.7k]
  ------------------
  737|  35.2k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 84.9k]
  ------------------
  738|  35.2k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 35.2k]
  ------------------
  739|  35.2k|                        {
  740|  15.1k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 15.1k, False: 20.0k]
  ------------------
  741|  15.1k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 35.2k]
  ------------------
  742|  15.1k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 15.1k, False: 0]
  |  Branch (742:37): [True: 15.1k, False: 0]
  |  Branch (742:53): [True: 15.1k, False: 0]
  |  Branch (742:69): [True: 15.1k, False: 0]
  ------------------
  743|  15.1k|                                {
  744|  15.1k|                                    return OpCode::SEQUI;
  745|  15.1k|                                }
  746|      0|                                break;
  747|       |
  748|  17.6k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 17.6k, False: 17.5k]
  ------------------
  749|  17.6k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 35.2k]
  ------------------
  750|  17.6k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 17.5k, False: 121]
  |  Branch (750:37): [True: 17.5k, False: 121]
  |  Branch (750:53): [True: 17.5k, False: 0]
  |  Branch (750:69): [True: 17.5k, False: 0]
  ------------------
  751|  17.5k|                                {
  752|  17.5k|                                    return OpCode::SGEUI;
  753|  17.5k|                                }
  754|    121|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 121, False: 0]
  |  Branch (754:42): [True: 121, False: 0]
  |  Branch (754:58): [True: 121, False: 0]
  |  Branch (754:74): [True: 121, False: 0]
  ------------------
  755|    121|                                {
  756|    121|                                    return OpCode::SGTUI;
  757|    121|                                }
  758|      0|                                break;
  759|       |
  760|  1.49k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 1.49k, False: 33.7k]
  ------------------
  761|  1.49k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 35.2k]
  ------------------
  762|  1.49k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 1.31k, False: 172]
  |  Branch (762:37): [True: 1.31k, False: 172]
  |  Branch (762:53): [True: 1.31k, False: 0]
  |  Branch (762:69): [True: 1.31k, False: 0]
  ------------------
  763|  1.31k|                                {
  764|  1.31k|                                    return OpCode::SLEUI;
  765|  1.31k|                                }
  766|    172|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 172, False: 0]
  |  Branch (766:42): [True: 172, False: 0]
  |  Branch (766:58): [True: 172, False: 0]
  |  Branch (766:74): [True: 172, False: 0]
  ------------------
  767|    172|                                {
  768|    172|                                    return OpCode::SLTUI;
  769|    172|                                }
  770|      0|                                break;
  771|       |
  772|    624|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 624, False: 34.5k]
  ------------------
  773|    624|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 35.2k]
  ------------------
  774|    624|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 624, False: 0]
  |  Branch (774:37): [True: 624, False: 0]
  |  Branch (774:53): [True: 624, False: 0]
  |  Branch (774:69): [True: 624, False: 0]
  ------------------
  775|    624|                                {
  776|    624|                                    return OpCode::SNEUI;
  777|    624|                                }
  778|      0|                                break;
  779|       |
  780|    299|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 299, False: 34.9k]
  ------------------
  781|    299|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 35.2k]
  ------------------
  782|    299|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 299, False: 0]
  |  Branch (782:37): [True: 299, False: 0]
  |  Branch (782:53): [True: 299, False: 0]
  |  Branch (782:69): [True: 299, False: 0]
  ------------------
  783|    299|                                {
  784|    299|                                    return OpCode::SUBUI;
  785|    299|                                }
  786|      0|                                break;
  787|  35.2k|                        }
  788|       |
  789|      0|                        break;
  790|  84.9k|                }
  791|       |
  792|  16.3k|                break;
  793|  84.9k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  16.3k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 4.54k, False: 1.17M]
  ------------------
  797|  4.54k|                const char c1 = token[0u];
  798|  4.54k|                const char c2 = token[1u];
  799|  4.54k|                const char c3 = token[2u];
  800|  4.54k|                const char c4 = token[3u];
  801|  4.54k|                const char c5 = token[4u];
  802|  4.54k|                const char c6 = token[5u];
  803|       |
  804|  4.54k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 1.54k, False: 2.99k]
  |  Branch (804:21): [True: 1.54k, False: 2.99k]
  |  Branch (804:37): [True: 1.54k, False: 0]
  |  Branch (804:53): [True: 1.54k, False: 0]
  ------------------
  805|  1.54k|                {
  806|  1.54k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 1.54k]
  ------------------
  807|  1.54k|                    {
  808|    806|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 806, False: 743]
  ------------------
  809|    806|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 1.54k]
  ------------------
  810|    806|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 806, False: 0]
  ------------------
  811|    806|                            {
  812|    806|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 85, False: 721]
  ------------------
  813|     85|                                {
  814|     85|                                    return OpCode::CVTD2F;
  815|     85|                                }
  816|    721|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 721, False: 0]
  ------------------
  817|    721|                                {
  818|    721|                                    return OpCode::CVTD2I;
  819|    721|                                }
  820|    806|                            }
  821|      0|                            break;
  822|       |
  823|    189|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 189, False: 1.36k]
  ------------------
  824|    189|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 1.54k]
  ------------------
  825|    189|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 189, False: 0]
  ------------------
  826|    189|                            {
  827|    189|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 90, False: 99]
  ------------------
  828|     90|                                {
  829|     90|                                    return OpCode::CVTF2D;
  830|     90|                                }
  831|     99|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 99, False: 0]
  ------------------
  832|     99|                                {
  833|     99|                                    return OpCode::CVTF2I;
  834|     99|                                }
  835|    189|                            }
  836|      0|                            break;
  837|       |
  838|    554|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 554, False: 995]
  ------------------
  839|    554|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 1.54k]
  ------------------
  840|    554|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 554, False: 0]
  ------------------
  841|    554|                            {
  842|    554|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 458, False: 96]
  ------------------
  843|    458|                                {
  844|    458|                                    return OpCode::CVTI2D;
  845|    458|                                }
  846|     96|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 96, False: 0]
  ------------------
  847|     96|                                {
  848|     96|                                    return OpCode::CVTI2F;
  849|     96|                                }
  850|    554|                            }
  851|  1.54k|                    }
  852|  1.54k|                }
  853|  2.99k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 477, False: 2.51k]
  |  Branch (853:26): [True: 477, False: 2.51k]
  |  Branch (853:42): [True: 477, False: 0]
  |  Branch (853:58): [True: 477, False: 0]
  |  Branch (853:74): [True: 477, False: 0]
  ------------------
  854|  2.99k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 477, False: 0]
  |  Branch (854:42): [True: 477, False: 0]
  ------------------
  855|    477|                {
  856|    477|                    return OpCode::MULTUI;
  857|    477|                }
  858|  2.51k|                break;
  859|  4.54k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  19.9k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 19.9k, False: 1.15M]
  ------------------
  863|  19.9k|                const char c1 = token[0u];
  864|  19.9k|                const char c2 = token[1u];
  865|  19.9k|                const char c3 = token[2u];
  866|  19.9k|                const char c4 = token[3u];
  867|  19.9k|                const char c5 = token[4u];
  868|  19.9k|                const char c6 = token[5u];
  869|  19.9k|                const char c7 = token[6u];
  870|       |
  871|  19.9k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 19.5k, False: 444]
  |  Branch (871:21): [True: 19.5k, False: 444]
  |  Branch (871:37): [True: 19.5k, False: 0]
  |  Branch (871:53): [True: 19.5k, False: 0]
  ------------------
  872|  19.5k|                {
  873|  19.5k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 18.4k, False: 1.05k]
  |  Branch (873:25): [True: 18.4k, False: 1.05k]
  |  Branch (873:41): [True: 18.4k, False: 0]
  |  Branch (873:54): [True: 18.4k, False: 0]
  |  Branch (873:70): [True: 18.4k, False: 0]
  ------------------
  874|  18.4k|                    {
  875|  18.4k|                        return OpCode::MOVI2FP;
  876|  18.4k|                    }
  877|  1.05k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.05k, False: 0]
  |  Branch (877:25): [True: 1.05k, False: 0]
  |  Branch (877:41): [True: 1.05k, False: 0]
  |  Branch (877:57): [True: 1.05k, False: 0]
  |  Branch (877:70): [True: 1.05k, False: 0]
  ------------------
  878|  1.05k|                    {
  879|  1.05k|                        return OpCode::MOVFP2I;
  880|  1.05k|                    }
  881|  1.05k|                }
  882|    444|                break;
  883|  19.9k|            }
  884|       |
  885|  44.3k|            default: {
  ------------------
  |  Branch (885:13): [True: 44.3k, False: 1.13M]
  ------------------
  886|  44.3k|                break;
  887|  19.9k|            }
  888|  1.17M|        }
  889|       |
  890|       |        // None found
  891|   384k|        return OpCode::NONE;
  892|  1.17M|    }
_ZN3dlx3iceEcc:
   17|  1.93M|    {
   18|  1.93M|        constexpr const char diff = 'a' - 'A';
   19|  1.93M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.28M, False: 649k]
  |  Branch (19:28): [True: 232k, False: 417k]
  ------------------
   20|  1.93M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.35M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  12.1k|    {
  195|  12.1k|        ParseError err;
  196|       |
  197|  12.1k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  12.1k|        err.m_LineNumber                           = line_number;
  199|  12.1k|        err.m_Column                               = column;
  200|  12.1k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  12.1k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  12.1k|        return err;
  204|  12.1k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  12.1k|    {
  209|  12.1k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  12.1k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  12.1k|                                                         actual_type);
  212|  12.1k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    473|    {
  218|    473|        ParseError err;
  219|       |
  220|    473|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    473|        err.m_LineNumber        = line_number;
  222|    473|        err.m_Column            = column;
  223|    473|        err.invalid_number.text = text;
  224|       |
  225|    473|        return err;
  226|    473|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    473|    {
  230|    473|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    473|                                                token.GetColumn().unsafe(), token.GetText());
  232|    473|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     19|    {
  237|     19|        ParseError err;
  238|       |
  239|     19|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     19|        err.m_LineNumber = line_number;
  241|     19|        err.m_Column     = column;
  242|       |
  243|     19|        return err;
  244|     19|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     19|    {
  249|     19|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     19|                                                                     token.GetColumn().unsafe());
  251|     19|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|   406k|    {
  257|   406k|        ParseError err;
  258|       |
  259|   406k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|   406k|        err.m_LineNumber                   = line_number;
  261|   406k|        err.m_Column                       = column;
  262|   406k|        err.unexpected_token.expected_type = expected_type;
  263|   406k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|   406k|        return err;
  266|   406k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|   406k|    {
  271|   406k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|   406k|                                                  token.GetColumn().unsafe(), expected_type,
  273|   406k|                                                  token.GetType());
  274|   406k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  8.82k|    {
  279|  8.82k|        ParseError err;
  280|       |
  281|  8.82k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  8.82k|        err.m_LineNumber                   = line_number;
  283|  8.82k|        err.m_Column                       = column;
  284|  8.82k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  8.82k|        return err;
  287|  8.82k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  7.48k|    {
  291|  7.48k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  7.48k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  7.48k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   290k|    {
  298|   290k|        ParseError err;
  299|       |
  300|   290k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   290k|        err.m_LineNumber                       = line_number;
  302|   290k|        err.m_Column                           = column;
  303|   290k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   290k|        return err;
  306|   290k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   290k|    {
  311|   290k|        return ConstructInvalidLabelIdentifierParseError(
  312|   290k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   290k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  10.4k|    {
  319|  10.4k|        ParseError err;
  320|       |
  321|  10.4k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  10.4k|        err.m_LineNumber                     = line_number;
  323|  10.4k|        err.m_Column                         = column;
  324|  10.4k|        err.label_already_defined.label_name = label_name;
  325|  10.4k|        err.label_already_defined.at_line    = at_line;
  326|  10.4k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  10.4k|        return err;
  329|  10.4k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  10.4k|    {
  334|  10.4k|        return ConstructLabelAlreadyDefinedParseError(
  335|  10.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  10.4k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  10.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   535k|    {
  342|   535k|        ParseError err;
  343|       |
  344|   535k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   535k|        err.m_LineNumber = line_number;
  346|   535k|        err.m_Column     = column;
  347|       |
  348|   535k|        return err;
  349|   535k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   535k|    {
  354|   535k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   535k|                                                        token.GetColumn().unsafe());
  356|   535k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|  84.4k|    {
  362|  84.4k|        ParseError err;
  363|       |
  364|  84.4k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|  84.4k|        err.m_LineNumber               = line_number;
  366|  84.4k|        err.m_Column                   = column;
  367|  84.4k|        err.too_few_arguments.required = required;
  368|  84.4k|        err.too_few_arguments.provided = provided;
  369|       |
  370|  84.4k|        return err;
  371|  84.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|  84.4k|    {
  376|  84.4k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|  84.4k|                                                  token.GetColumn().unsafe(), required, provided);
  378|  84.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  1.74k|    {
  383|  1.74k|        ParseError err;
  384|       |
  385|  1.74k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  1.74k|        err.m_LineNumber           = line_number;
  387|  1.74k|        err.m_Column               = column;
  388|  1.74k|        err.empty_label.label_name = label_name;
  389|       |
  390|  1.74k|        return err;
  391|  1.74k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  1.74k|    {
  395|  1.74k|        return ConstructEmptyLabelParseError(
  396|  1.74k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  1.74k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 1.50k, False: 240]
  ------------------
  398|  1.50k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  1.74k|                        token.GetText());
  400|  1.74k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    181|    {
  405|    181|        ParseError err;
  406|       |
  407|    181|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    181|        err.m_LineNumber = line_number;
  409|    181|        err.m_Column     = column;
  410|       |
  411|    181|        return err;
  412|    181|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    181|    {
  416|    181|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    181|                                               token.GetColumn().unsafe());
  418|    181|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.35M|    {
   19|  1.35M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.35M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  10.1k|    {
  181|  10.1k|        ParsedProgram program;
  182|       |
  183|  10.1k|        program.m_Tokens = tokens;
  184|       |
  185|  10.1k|        phi::boolean line_has_instruction{false};
  186|  10.1k|        phi::usize   label_count{0u};
  187|       |
  188|  2.75M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 2.74M, False: 10.1k]
  ------------------
  189|  2.74M|        {
  190|  2.74M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  2.74M|            switch (current_token.GetType())
  195|  2.74M|            {
  196|       |                // Ignore comments
  197|   392k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 392k, False: 2.35M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   392k|                    break;
  200|       |
  201|   970k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 970k, False: 1.77M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|   970k|                    line_has_instruction = false;
  204|   970k|                    break;
  205|       |
  206|   315k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 315k, False: 2.42M]
  ------------------
  207|   315k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 28.1k, False: 287k]
  ------------------
  208|  28.1k|                    {
  209|  28.1k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  28.1k|                                current_token, Token::Type::NewLine));
  211|  28.1k|                        break;
  212|  28.1k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   287k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 265k, False: 22.3k]
  ------------------
  217|   265k|                    {
  218|   265k|                        program.AddParseError(
  219|   265k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   265k|                        break;
  221|   265k|                    }
  222|       |
  223|  22.3k|                    phi::string_view label_name = current_token.GetText();
  224|  22.3k|                    label_name.remove_suffix(1u);
  225|       |
  226|  22.3k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.34k, False: 21.0k]
  ------------------
  227|  1.34k|                    {
  228|  1.34k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.34k|                                current_token.GetLineNumber().unsafe(),
  230|  1.34k|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.34k|                        break;
  232|  1.34k|                    }
  233|       |
  234|  21.0k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 7.57k, False: 13.4k]
  ------------------
  235|  7.57k|                    {
  236|  7.57k|                        program.AddParseError(
  237|  7.57k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  7.57k|                        break;
  239|  7.57k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  13.4k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 10.4k, False: 3.01k]
  ------------------
  243|  10.4k|                    {
  244|       |                        // Find first defintions of label
  245|  10.4k|                        const Token* first_label_definition =
  246|  10.4k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  10.4k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  10.4k|                                    {
  249|  10.4k|                                        phi::string_view token_label_name = t.GetText();
  250|  10.4k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  10.4k|                                        if (token_label_name == label_name)
  253|  10.4k|                                        {
  254|  10.4k|                                            return true;
  255|  10.4k|                                        }
  256|  10.4k|                                    }
  257|       |
  258|  10.4k|                                    return false;
  259|  10.4k|                                });
  260|       |
  261|  10.4k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  10.4k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  10.4k|                                current_token, *first_label_definition));
  265|  10.4k|                        break;
  266|  10.4k|                    }
  267|       |
  268|  3.01k|                    program.m_JumpData[label_name] =
  269|  3.01k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  3.01k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  3.01k|                    break;
  276|  13.4k|                }
  277|       |
  278|   756k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 756k, False: 1.98M]
  ------------------
  279|   756k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 535k, False: 220k]
  ------------------
  280|   535k|                    {
  281|   535k|                        program.AddParseError(
  282|   535k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   535k|                        break;
  284|   535k|                    }
  285|       |
  286|   220k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   220k|                    PHI_ASSERT(current_token.HasHint());
  290|   220k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   220k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   220k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   220k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   220k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   220k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   220k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   220k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   220k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   283k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 254k, False: 29.2k]
  ------------------
  312|   254k|                    {
  313|       |                        // Get next token
  314|   254k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 710, False: 253k]
  ------------------
  315|    710|                        {
  316|    710|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    710|                                    current_token, number_of_argument_required.unsafe(),
  318|    710|                                    argument_num.unsafe()));
  319|    710|                            break;
  320|    710|                        }
  321|       |
  322|   253k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   253k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 18.6k, False: 234k]
  ------------------
  326|  18.6k|                        {
  327|  18.6k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 181, False: 18.4k]
  ------------------
  328|    181|                            {
  329|    181|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    181|                            }
  331|       |
  332|  18.6k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  18.6k|                            continue;
  335|  18.6k|                        }
  336|       |
  337|   234k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 83.7k, False: 151k]
  ------------------
  338|  83.7k|                        {
  339|  83.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  83.7k|                                    token, number_of_argument_required.unsafe(),
  341|  83.7k|                                    argument_num.unsafe()));
  342|  83.7k|                            break;
  343|  83.7k|                        }
  344|       |
  345|   151k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   151k|                                parse_instruction_argument(
  347|   151k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   151k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 107k, False: 44.0k]
  ------------------
  349|   107k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   107k|                            break;
  352|   107k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  44.0k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  44.0k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  44.0k|                        argument_num++;
  359|  44.0k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  44.0k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   220k|                    program.m_Instructions.emplace_back(instruction);
  367|   220k|                    line_has_instruction = true;
  368|   220k|                    break;
  369|   756k|                }
  370|       |
  371|   309k|                default:
  ------------------
  |  Branch (371:17): [True: 309k, False: 2.43M]
  ------------------
  372|   309k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   309k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 199k, False: 110k]
  ------------------
  374|   199k|                    {
  375|   199k|                        expected_token_type = Token::Type::NewLine;
  376|   199k|                    }
  377|       |
  378|   309k|                    program.AddParseError(
  379|   309k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   309k|                    break;
  381|  2.74M|            }
  382|  2.74M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  10.1k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 287, False: 9.87k]
  ------------------
  386|    287|        {
  387|  3.02k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 2.73k, False: 287]
  ------------------
  388|  2.73k|            {
  389|  2.73k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  2.73k|                const Token& token = *it;
  392|  2.73k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 1.74k, False: 999]
  ------------------
  393|  1.74k|                {
  394|  1.74k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  1.74k|                    --label_count;
  396|  1.74k|                }
  397|  2.73k|            }
  398|    287|        }
  399|       |
  400|  10.1k|        return program;
  401|  10.1k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  10.1k|    {
  405|  10.1k|        TokenStream tokens = Tokenize(source);
  406|  10.1k|        return Parse(tokens);
  407|  10.1k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   151k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   151k|        switch (token.GetType())
   37|   151k|        {
   38|  10.5k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 10.5k, False: 140k]
  ------------------
   39|  10.5k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 733, False: 9.80k]
  ------------------
   40|  10.5k|                                          ArgumentType::AddressDisplacement))
   41|    733|                {
   42|    733|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    733|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    733|                    return {};
   46|    733|                }
   47|       |
   48|       |                // Get address displacement
   49|  9.80k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  9.80k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  9.80k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 19, False: 9.78k]
  ------------------
   54|     19|                {
   55|     19|                    program.AddParseError(
   56|     19|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     19|                    return {};
   58|     19|                }
   59|       |
   60|  9.78k|                auto         it           = tokens.current_position();
   61|  9.78k|                const Token& first_token  = tokens.consume();
   62|  9.78k|                const Token& second_token = tokens.consume();
   63|  9.78k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  9.78k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 9.78k, False: 0]
  ------------------
   66|  9.78k|                {
   67|  9.78k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  9.78k|                            first_token, Token::Type::OpenBracket));
   69|  9.78k|                    return {};
   70|  9.78k|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  26.3k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 26.3k, False: 124k]
  ------------------
   97|  26.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 423, False: 25.9k]
  ------------------
   98|    423|                {
   99|    423|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    423|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    423|                    return {};
  102|    423|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  25.9k|                return ConstructInstructionArgumentRegisterInt(
  108|  25.9k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  26.3k|            }
  110|  12.0k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 12.0k, False: 139k]
  ------------------
  111|  12.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 6.63k, False: 5.43k]
  ------------------
  112|  6.63k|                {
  113|  6.63k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  6.63k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  6.63k|                    return {};
  116|  6.63k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  5.43k|                return ConstructInstructionArgumentRegisterFloat(
  122|  5.43k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  12.0k|            }
  124|  7.48k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 7.48k, False: 143k]
  ------------------
  125|  7.48k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  7.48k|                return {};
  128|  12.0k|            }
  129|  24.5k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 24.5k, False: 126k]
  ------------------
  130|       |                // Parse as Label
  131|  24.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 1.40k, False: 23.1k]
  ------------------
  132|  1.40k|                {
  133|  1.40k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  1.40k|                            token, expected_argument_type, ArgumentType::Label));
  135|  1.40k|                    return {};
  136|  1.40k|                }
  137|       |
  138|  23.1k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 23.1k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  23.1k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 18.0k, False: 5.08k]
  ------------------
  145|  18.0k|                {
  146|  18.0k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  18.0k|                    return {};
  148|  18.0k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  5.08k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  23.1k|            }
  154|  11.0k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 11.0k, False: 140k]
  ------------------
  155|  11.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 2.96k, False: 8.11k]
  ------------------
  156|  2.96k|                {
  157|  2.96k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  2.96k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  2.96k|                    return {};
  160|  2.96k|                }
  161|       |
  162|  8.11k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 7.64k, False: 473]
  ------------------
  163|  7.64k|                {
  164|  7.64k|                    return ConstructInstructionArgumentImmediateValue(
  165|  7.64k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  7.64k|                }
  167|       |
  168|    473|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    473|                return {};
  170|  8.11k|            }
  171|       |
  172|  59.1k|            default:
  ------------------
  |  Branch (172:13): [True: 59.1k, False: 92.0k]
  ------------------
  173|  59.1k|                program.AddParseError(
  174|  59.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  59.1k|                return {};
  176|   151k|        }
  177|   151k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   105k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   105k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 41.4k, False: 63.8k]
  ------------------
  248|  41.4k|                                    {
  249|  41.4k|                                        phi::string_view token_label_name = t.GetText();
  250|  41.4k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  41.4k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 10.4k, False: 30.9k]
  ------------------
  253|  10.4k|                                        {
  254|  10.4k|                                            return true;
  255|  10.4k|                                        }
  256|  41.4k|                                    }
  257|       |
  258|  94.8k|                                    return false;
  259|   105k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  3.73M|    {
   71|  3.73M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  3.73M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  3.73M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  3.73M|        return m_IntRegisters[id_value];
   77|  3.73M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  5.27M|    {
   82|  5.27M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  5.27M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  5.27M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  5.27M|        return m_IntRegisters[id_value];
   88|  5.27M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  3.18M|    {
   92|  3.18M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  3.18M|                                             RegisterAccessType::Signed),
   94|  3.18M|                   "Mismatch for instruction access type");
   95|       |
   96|  3.18M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  3.18M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  3.18M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  3.18M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 2.28M, False: 891k]
  ------------------
  101|  3.18M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 936k, False: 1.35M]
  ------------------
  102|   936k|        {
  103|   936k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   936k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   936k|        }
  105|       |
  106|  3.18M|        return GetIntRegister(id).GetSignedValue();
  107|  3.18M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  2.09M|    {
  111|  2.09M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  2.09M|                                             RegisterAccessType::Unsigned),
  113|  2.09M|                   "Mismatch for instruction access type");
  114|       |
  115|  2.09M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  2.09M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  2.09M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  2.09M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 1.19M, False: 898k]
  ------------------
  120|  2.09M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 668k, False: 524k]
  ------------------
  121|   668k|        {
  122|   668k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   668k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   668k|        }
  124|       |
  125|  2.09M|        return GetIntRegister(id).GetUnsignedValue();
  126|  2.09M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  2.10M|    {
  130|  2.10M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  2.10M|                                             RegisterAccessType::Signed),
  132|  2.10M|                   "Mismatch for instruction access type");
  133|       |
  134|  2.10M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  2.10M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 466k, False: 1.63M]
  ------------------
  137|   466k|        {
  138|   466k|            return;
  139|   466k|        }
  140|       |
  141|  1.63M|        reg.SetSignedValue(value);
  142|       |
  143|  1.63M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.63M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.63M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.63M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.63M|    {
  151|  1.63M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.63M|                                             RegisterAccessType::Unsigned),
  153|  1.63M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.63M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.63M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 282k, False: 1.35M]
  ------------------
  158|   282k|        {
  159|   282k|            return;
  160|   282k|        }
  161|       |
  162|  1.35M|        reg.SetUnsignedValue(value);
  163|       |
  164|  1.35M|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|  1.35M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|  1.35M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|  1.35M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  2.42M|    {
  172|  2.42M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  2.42M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  2.42M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  2.42M|        return m_FloatRegisters[id_value];
  178|  2.42M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   757k|    {
  183|   757k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   757k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   757k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   757k|        return m_FloatRegisters[id_value];
  189|   757k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   757k|    {
  193|   757k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   757k|                                             RegisterAccessType::Float),
  195|   757k|                   "Mismatch for instruction access type");
  196|       |
  197|   757k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   757k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   757k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   757k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 740k, False: 17.0k]
  ------------------
  202|   757k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 260k, False: 480k]
  ------------------
  203|   260k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   260k|        }
  208|       |
  209|   757k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   757k|        return reg.GetValue();
  212|   757k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   993k|    {
  216|   993k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   993k|                                             RegisterAccessType::Double),
  218|   993k|                   "Mismatch for instruction access type");
  219|       |
  220|   993k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 13, False: 993k]
  ------------------
  221|     13|        {
  222|     13|            Raise(Exception::MisalignedRegisterAccess);
  223|     13|            return {0.0};
  224|     13|        }
  225|       |
  226|   993k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   993k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   993k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   993k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 979k, False: 14.2k]
  ------------------
  231|   993k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 663k, False: 315k]
  ------------------
  232|   663k|        {
  233|   663k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   663k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   663k|        }
  235|       |
  236|   993k|        const FloatRegisterValueType register_value_type_high =
  237|   993k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   993k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 979k, False: 14.2k]
  ------------------
  239|   993k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 1.16k, False: 978k]
  ------------------
  240|  1.16k|        {
  241|  1.16k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.16k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|  1.16k|        }
  243|       |
  244|   993k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   993k|        const FloatRegister& second_reg =
  246|   993k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   993k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   993k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   993k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   993k|        const std::uint32_t first_value_bits =
  255|   993k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   993k|        const std::uint32_t second_value_bits =
  257|   993k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   993k|        std::uint64_t final_value_bits =
  260|   993k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   993k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   993k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   993k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   229k|    {
  269|   229k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   229k|                                             RegisterAccessType::Float),
  271|   229k|                   "Mismatch for instruction access type");
  272|       |
  273|   229k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   229k|        reg.SetValue(value);
  276|       |
  277|   229k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   229k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   229k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   229k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   102k|    {
  285|   102k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   102k|                                             RegisterAccessType::Double),
  287|   102k|                   "Mismatch for instruction access type");
  288|       |
  289|   102k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 102k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|   102k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   102k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   102k|        double              value_raw  = value.unsafe();
  299|   102k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   102k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   102k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   102k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   102k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   102k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   102k|        FloatRegister& second_reg =
  309|   102k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   102k|        first_reg.SetValue(first_value);
  312|   102k|        second_reg.SetValue(second_value);
  313|       |
  314|   102k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   102k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   102k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   102k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   102k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   633k|    {
  323|   633k|        return m_FPSR;
  324|   633k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   959k|    {
  328|   959k|        return m_FPSR;
  329|   959k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   959k|    {
  333|   959k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   959k|        return status_reg.Get();
  336|   959k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   633k|    {
  340|   633k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   633k|        status_reg.SetStatus(value);
  343|   633k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  6.32M|    {
  347|  6.32M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  6.32M|        inst.Execute(*this);
  350|  6.32M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  10.1k|    {
  354|  10.1k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 8.90k, False: 1.26k]
  ------------------
  355|  8.90k|        {
  356|  8.90k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  8.90k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  8.90k|            return false;
  358|  8.90k|        }
  359|       |
  360|  1.26k|        m_CurrentProgram = &program;
  361|       |
  362|  1.26k|        m_ProgramCounter               = 0u;
  363|  1.26k|        m_Halted                       = false;
  364|  1.26k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  1.26k|        m_LastRaisedException          = Exception::None;
  366|  1.26k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  1.26k|        return true;
  369|  10.1k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.73M|    {
  374|  1.73M|        return m_CurrentProgram;
  375|  1.73M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  6.32M|    {
  379|       |        // No nothing when no program is loaded
  380|  6.32M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 6.32M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  6.32M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 133, False: 6.32M]
  ------------------
  387|    133|        {
  388|    133|            m_Halted                       = true;
  389|    133|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|    133|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  6.32M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 133, False: 6.32M]
  ------------------
  394|    133|        {
  395|    133|            return;
  396|    133|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  6.32M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  6.32M|        const auto& current_instruction =
  403|  6.32M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  6.32M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  6.32M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 103, False: 6.32M]
  ------------------
  410|    103|        {
  411|    103|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    103|            return;
  413|    103|        }
  414|       |
  415|  6.32M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  6.32M|        ++m_CurrentStepCount;
  418|       |
  419|  6.32M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.02k, False: 6.32M]
  |  Branch (419:14): [True: 6.32M, False: 0]
  |  Branch (419:42): [True: 632, False: 6.32M]
  ------------------
  420|  6.32M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 392, False: 6.32M]
  ------------------
  421|  1.02k|        {
  422|  1.02k|            m_Halted                       = true;
  423|  1.02k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.02k|        }
  425|  6.32M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  1.26k|    {
  429|       |        // Do nothing when no program is loaded
  430|  1.26k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 1.26k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  1.26k|        m_ProgramCounter               = 0u;
  436|  1.26k|        m_Halted                       = false;
  437|  1.26k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  1.26k|        m_LastRaisedException          = Exception::None;
  439|  1.26k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  6.32M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 6.32M, False: 1.26k]
  ------------------
  442|  6.32M|        {
  443|  6.32M|            ExecuteStep();
  444|  6.32M|        }
  445|       |
  446|  1.26k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  1.26k|                   "RegisterAccessType was not reset correctly");
  448|  1.26k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  10.1k|    {
  465|  10.1k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 325k, False: 10.1k]
  ------------------
  466|   325k|        {
  467|   325k|            reg.SetSignedValue(0);
  468|   325k|        }
  469|       |
  470|  10.1k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 325k, False: 10.1k]
  ------------------
  471|   325k|        {
  472|   325k|            reg.SetValue(0.0f);
  473|   325k|        }
  474|       |
  475|  10.1k|        m_FPSR.SetStatus(false);
  476|  10.1k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  10.1k|    {
  480|  10.1k|        m_MemoryBlock.Clear();
  481|  10.1k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   214k|    {
  489|   214k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   214k|        m_LastRaisedException = exception;
  492|       |
  493|   214k|        switch (exception)
  494|   214k|        {
  495|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 6, False: 214k]
  ------------------
  496|      6|                m_Halted = true;
  497|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      6|                return;
  499|  50.8k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 50.8k, False: 164k]
  ------------------
  500|  50.8k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  50.8k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  50.8k|                return;
  502|  94.5k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 94.5k, False: 120k]
  ------------------
  503|  94.5k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  94.5k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  94.5k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 214k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      9|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 9, False: 214k]
  ------------------
  510|      9|                m_Halted = true;
  511|      9|                return;
  512|     55|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 55, False: 214k]
  ------------------
  513|     55|                m_Halted = true;
  514|     55|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     55|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|     55|                return;
  516|  69.3k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 69.3k, False: 145k]
  ------------------
  517|  69.3k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  69.3k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|  69.3k|                return;
  519|     19|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 19, False: 214k]
  ------------------
  520|     19|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     19|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     19|                m_Halted = true;
  522|     19|                return;
  523|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 15, False: 214k]
  ------------------
  524|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     15|                m_Halted = true;
  526|     15|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 214k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   214k|#endif
  532|   214k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|      8|    {
  559|      8|        return m_MemoryBlock;
  560|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|   615k|    {
  574|   615k|        return m_NextProgramCounter;
  575|   615k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.73M|    {
  579|  1.73M|        m_NextProgramCounter = new_npc;
  580|  1.73M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  11.0M|    {
   37|  11.0M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  11.0M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  11.0M|        switch (expected_access)
   41|  11.0M|        {
   42|  2.56M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 2.56M, False: 8.52M]
  ------------------
   43|  2.56M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 11.0M]
  ------------------
   45|      0|                return false;
   46|   142k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 142k, False: 10.9M]
  ------------------
   47|   142k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 71.0k, False: 71.0k]
  |  Branch (47:63): [True: 71.0k, False: 0]
  ------------------
   48|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 0, False: 11.0M]
  ------------------
   49|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 0, False: 0]
  ------------------
   51|  66.0k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 66.0k, False: 11.0M]
  ------------------
   52|  66.0k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 33.0k, False: 33.0k]
  |  Branch (52:63): [True: 33.0k, False: 0]
  ------------------
   53|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 0, False: 11.0M]
  ------------------
   54|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 0, False: 0]
  |  Branch (54:64): [True: 0, False: 0]
  ------------------
   55|  8.31M|            default:
  ------------------
  |  Branch (55:13): [True: 8.31M, False: 2.77M]
  ------------------
   56|  8.31M|                return expected_access == access;
   57|  11.0M|        }
   58|  11.0M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  1.32M|    {
   13|  1.32M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 161k, False: 1.16M]
  ------------------
   14|   161k|        {
   15|   161k|            const char first_char = token[0u];
   16|   161k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 53.5k, False: 107k]
  |  Branch (16:38): [True: 5.30k, False: 102k]
  ------------------
   17|  58.8k|            {
   18|  58.8k|                const char second_char = token[1u];
   19|  58.8k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 54.0k, False: 4.80k]
  |  Branch (19:43): [True: 53.9k, False: 182]
  ------------------
   20|  53.9k|                {
   21|  53.9k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  53.9k|                }
   23|  58.8k|            }
   24|   161k|        }
   25|  1.16M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 572k, False: 589k]
  ------------------
   26|   572k|        {
   27|   572k|            const char first_char = token[0u];
   28|   572k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 46.9k, False: 525k]
  |  Branch (28:38): [True: 15.2k, False: 510k]
  ------------------
   29|  62.1k|            {
   30|  62.1k|                const char second_char = token[1u];
   31|  62.1k|                const char third_char  = token[2u];
   32|       |
   33|  62.1k|                switch (second_char)
   34|  62.1k|                {
   35|  30.5k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 30.5k, False: 31.5k]
  ------------------
   36|  30.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 24.5k, False: 5.95k]
  |  Branch (36:50): [True: 24.4k, False: 131]
  ------------------
   37|  24.4k|                        {
   38|  24.4k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  24.4k|                        }
   40|  6.08k|                        break;
   41|  30.5k|                    }
   42|  19.6k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 19.6k, False: 42.4k]
  ------------------
   43|  19.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 14.0k, False: 5.58k]
  |  Branch (43:50): [True: 13.8k, False: 197]
  ------------------
   44|  13.8k|                        {
   45|  13.8k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  13.8k|                        }
   47|  5.78k|                        break;
   48|  19.6k|                    }
   49|  6.56k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 6.56k, False: 55.5k]
  ------------------
   50|  6.56k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 5.86k, False: 699]
  |  Branch (50:50): [True: 319, False: 380]
  ------------------
   51|  6.18k|                        {
   52|  6.18k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  6.18k|                        }
   54|    380|                        break;
   55|  6.56k|                    }
   56|  5.36k|                    default: {
  ------------------
  |  Branch (56:21): [True: 5.36k, False: 56.7k]
  ------------------
   57|  5.36k|                        break;
   58|  6.56k|                    }
   59|  62.1k|                }
   60|  62.1k|            }
   61|   572k|        }
   62|       |
   63|  1.22M|        return IntRegisterID::None;
   64|  1.32M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  1.22M|    {
   68|  1.22M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 107k, False: 1.11M]
  ------------------
   69|   107k|        {
   70|   107k|            const char first_char = token[0u];
   71|   107k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 21.4k, False: 86.1k]
  |  Branch (71:38): [True: 933, False: 85.2k]
  ------------------
   72|  22.4k|            {
   73|  22.4k|                const char second_char = token[1u];
   74|  22.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 21.8k, False: 594]
  |  Branch (74:43): [True: 21.7k, False: 69]
  ------------------
   75|  21.7k|                {
   76|  21.7k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  21.7k|                }
   78|  22.4k|            }
   79|   107k|        }
   80|  1.11M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 527k, False: 589k]
  ------------------
   81|   527k|        {
   82|   527k|            const char first_char = token[0u];
   83|   527k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 25.9k, False: 501k]
  |  Branch (83:38): [True: 22.9k, False: 478k]
  ------------------
   84|  48.9k|            {
   85|  48.9k|                const char second_char = token[1u];
   86|  48.9k|                const char third_char  = token[2u];
   87|       |
   88|  48.9k|                switch (second_char)
   89|  48.9k|                {
   90|  15.2k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 15.2k, False: 33.6k]
  ------------------
   91|  15.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 6.20k, False: 9.01k]
  |  Branch (91:50): [True: 6.09k, False: 106]
  ------------------
   92|  6.09k|                        {
   93|  6.09k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  6.09k|                        }
   95|  9.11k|                        break;
   96|  15.2k|                    }
   97|  19.7k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 19.7k, False: 29.1k]
  ------------------
   98|  19.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 19.5k, False: 211]
  |  Branch (98:50): [True: 19.4k, False: 98]
  ------------------
   99|  19.4k|                        {
  100|  19.4k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  19.4k|                        }
  102|    309|                        break;
  103|  19.7k|                    }
  104|    320|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 320, False: 48.5k]
  ------------------
  105|    320|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 166, False: 154]
  |  Branch (105:50): [True: 86, False: 68]
  ------------------
  106|    252|                        {
  107|    252|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    252|                        }
  109|     68|                        break;
  110|    320|                    }
  111|  13.6k|                    default: {
  ------------------
  |  Branch (111:21): [True: 13.6k, False: 35.3k]
  ------------------
  112|  13.6k|                        break;
  113|    320|                    }
  114|  48.9k|                }
  115|  48.9k|            }
  116|   527k|        }
  117|       |
  118|  1.17M|        return FloatRegisterID::None;
  119|  1.22M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  1.33M|    {
  123|  1.33M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 415k, False: 924k]
  ------------------
  124|   415k|        {
  125|   415k|            const char c1 = token[0u];
  126|   415k|            const char c2 = token[1u];
  127|   415k|            const char c3 = token[2u];
  128|   415k|            const char c4 = token[3u];
  129|       |
  130|   415k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 18.0k, False: 397k]
  |  Branch (130:34): [True: 1.89k, False: 395k]
  |  Branch (130:49): [True: 18.8k, False: 1.08k]
  |  Branch (130:62): [True: 407, False: 673]
  ------------------
  131|   415k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 17.9k, False: 1.29k]
  |  Branch (131:34): [True: 1.21k, False: 73]
  |  Branch (131:49): [True: 17.9k, False: 1.21k]
  |  Branch (131:62): [True: 0, False: 1.21k]
  ------------------
  132|   415k|        }
  133|       |
  134|   924k|        return false;
  135|  1.33M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  2.03M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|   993k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  3.90M|    {
   41|  3.90M|        return m_Type;
   42|  3.90M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.58M|    {
   51|  1.58M|        return m_LineNumber;
   52|  1.58M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.36M|    {
   56|  1.36M|        return m_Column;
   57|  1.36M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   716k|    {
   66|   716k|        return m_Text;
   67|   716k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   238k|    {
   80|   238k|        return m_HasHint;
   81|   238k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   269k|    {
   85|   269k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   269k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   269k|                   m_Type == Type::ImmediateInteger);
   88|   269k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   269k|        return m_Hint;
   91|   269k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  10.1k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  10.1k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  10.1k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  9.80k|    {
   51|  9.80k|        auto it = m_Iterator;
   52|  39.1k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 29.4k, False: 9.78k]
  ------------------
   53|  29.4k|        {
   54|  29.4k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 19, False: 29.3k]
  ------------------
   55|     19|            {
   56|     19|                return false;
   57|     19|            }
   58|  29.4k|        }
   59|       |
   60|  9.78k|        return true;
   61|  9.80k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  3.00M|    {
   65|  3.00M|        return m_Iterator != m_Tokens.end();
   66|  3.00M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  3.02M|    {
   70|  3.02M|        return m_Iterator == m_Tokens.end();
   71|  3.02M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  3.02M|    {
   85|  3.02M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  3.02M|        return *m_Iterator++;
   91|  3.02M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  9.78k|    {
  164|  9.78k|        return m_Iterator;
  165|  9.78k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    287|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    287|        return m_Tokens.rbegin();
  224|    287|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  2.73k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  2.73k|        return m_Tokens.rend();
  233|  2.73k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  10.1k|    {
   66|  10.1k|        TokenStream tokens;
   67|       |
   68|  10.1k|        phi::string_view current_token;
   69|       |
   70|  10.1k|        phi::u64 current_line_number{1u};
   71|  10.1k|        phi::u64 current_column{1u};
   72|  10.1k|        phi::u64 token_begin{0u};
   73|       |
   74|  10.1k|        phi::boolean parsing_comment{false};
   75|       |
   76|  7.96M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 7.95M, False: 10.1k]
  ------------------
   77|  7.95M|        {
   78|  7.95M|            const char c{source.at(i)};
   79|       |
   80|  7.95M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.08M, False: 6.87M]
  ------------------
   81|  1.08M|            {
   82|  1.08M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 294k, False: 788k]
  ------------------
   83|   294k|                {
   84|       |                    // Skip empty lines
   85|   294k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   294k|                                        current_line_number, current_column);
   87|       |
   88|   294k|                    parsing_comment = false;
   89|   294k|                    current_line_number += 1u;
   90|   294k|                    current_column = 1u;
   91|   294k|                    continue;
   92|   294k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|   788k|                tokens.emplace_back(ParseToken(
   96|   788k|                        source.substring_view(
   97|   788k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|   788k|                                current_token.length()),
   99|   788k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|   788k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|   788k|                                    current_line_number, current_column);
  103|       |
  104|   788k|                current_token   = phi::string_view{};
  105|   788k|                parsing_comment = false;
  106|   788k|                current_line_number += 1u;
  107|   788k|                current_column = 0u;
  108|   788k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  6.87M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 14.7k, False: 6.85M]
  |  Branch (110:34): [True: 415k, False: 6.44M]
  ------------------
  111|   430k|            {
  112|   430k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 394k, False: 36.0k]
  ------------------
  113|   394k|                {
  114|   394k|                    token_begin = i;
  115|   394k|                }
  116|  36.0k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 21.8k, False: 14.2k]
  ------------------
  117|  21.8k|                {
  118|  21.8k|                    tokens.emplace_back(ParseToken(
  119|  21.8k|                            source.substring_view(
  120|  21.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  21.8k|                                    current_token.length()),
  122|  21.8k|                            current_line_number, current_column - current_token.length()));
  123|  21.8k|                    token_begin   = i;
  124|  21.8k|                    current_token = phi::string_view{};
  125|  21.8k|                }
  126|       |
  127|   430k|                parsing_comment = true;
  128|   430k|                current_token   = source.substring_view(
  129|   430k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   430k|                        current_token.length() + 1u);
  131|   430k|            }
  132|  6.44M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 740k, False: 5.70M]
  ------------------
  133|   740k|            {
  134|       |                // simply append the character
  135|   740k|                current_token = source.substring_view(
  136|   740k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|   740k|                        current_token.length() + 1u);
  138|   740k|            }
  139|  5.70M|            else
  140|  5.70M|            {
  141|       |                // Not parsing a comment
  142|  5.70M|                switch (c)
  143|  5.70M|                {
  144|   790k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 790k, False: 4.90M]
  ------------------
  145|   799k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 8.69k, False: 5.69M]
  ------------------
  146|   823k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 23.5k, False: 5.67M]
  ------------------
  147|   823k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 6.99k, False: 816k]
  ------------------
  148|  6.99k|                        {
  149|  6.99k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  6.99k|                            continue;
  152|  6.99k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|   816k|                        tokens.emplace_back(ParseToken(
  156|   816k|                                source.substring_view(
  157|   816k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|   816k|                                        current_token.length()),
  159|   816k|                                current_line_number, current_column - current_token.length()));
  160|   816k|                        current_token = phi::string_view{};
  161|   816k|                        break;
  162|  39.8k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 39.8k, False: 5.66M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  39.8k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 29.0k, False: 10.8k]
  ------------------
  165|  29.0k|                        {
  166|  29.0k|                            current_token = source.substring_view(
  167|  29.0k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  29.0k|                                    current_token.length() + 1u);
  169|  29.0k|                            tokens.emplace_back(ParseToken(
  170|  29.0k|                                    source.substring_view(
  171|  29.0k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  29.0k|                                                    token_begin),
  173|  29.0k|                                            current_token.length()),
  174|  29.0k|                                    current_line_number,
  175|  29.0k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  29.0k|                            current_token = phi::string_view{};
  178|  29.0k|                        }
  179|  10.8k|                        else
  180|  10.8k|                        {
  181|       |                            // Orphan colon
  182|  10.8k|                            token_begin = i;
  183|       |
  184|  10.8k|                            tokens.emplace_back(
  185|  10.8k|                                    Token::Type::Colon,
  186|  10.8k|                                    source.substring_view(
  187|  10.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  10.8k|                                                    token_begin),
  189|  10.8k|                                            1u),
  190|  10.8k|                                    current_line_number, current_column);
  191|  10.8k|                        }
  192|  39.8k|                        break;
  193|   117k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 117k, False: 5.58M]
  ------------------
  194|   146k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 29.0k, False: 5.67M]
  ------------------
  195|   154k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 8.21k, False: 5.69M]
  ------------------
  196|   154k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 120k, False: 34.4k]
  ------------------
  197|   120k|                        {
  198|   120k|                            tokens.emplace_back(ParseToken(
  199|   120k|                                    source.substring_view(
  200|   120k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   120k|                                                    token_begin),
  202|   120k|                                            current_token.length()),
  203|   120k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   120k|                            current_token = phi::string_view{};
  206|   120k|                        }
  207|       |
  208|   154k|                        Token::Type type;
  209|   154k|                        switch (c)
  210|   154k|                        {
  211|   117k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 117k, False: 37.2k]
  ------------------
  212|   117k|                                type = Token::Type::Comma;
  213|   117k|                                break;
  214|  29.0k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 29.0k, False: 125k]
  ------------------
  215|  29.0k|                                type = Token::Type::OpenBracket;
  216|  29.0k|                                break;
  217|  8.21k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 8.21k, False: 146k]
  ------------------
  218|  8.21k|                                type = Token::Type::ClosingBracket;
  219|  8.21k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 154k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   154k|#endif
  225|   154k|                        }
  226|       |
  227|   154k|                        token_begin = i;
  228|       |
  229|   154k|                        tokens.emplace_back(
  230|   154k|                                type,
  231|   154k|                                source.substring_view(
  232|   154k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   154k|                                        1u),
  234|   154k|                                current_line_number, current_column);
  235|   154k|                        break;
  236|       |
  237|  4.68M|                    default:
  ------------------
  |  Branch (237:21): [True: 4.68M, False: 1.01M]
  ------------------
  238|  4.68M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 1.36M, False: 3.31M]
  ------------------
  239|  1.36M|                        {
  240|  1.36M|                            token_begin = i;
  241|  1.36M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  4.68M|                        current_token = source.substring_view(
  245|  4.68M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  4.68M|                                current_token.length() + 1u);
  247|  5.70M|                }
  248|  5.70M|            }
  249|       |
  250|  7.65M|            current_column += 1u;
  251|  7.65M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  10.1k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 3.80k, False: 6.35k]
  ------------------
  255|  3.80k|        {
  256|  3.80k|            tokens.emplace_back(
  257|  3.80k|                    ParseToken(source.substring_view(
  258|  3.80k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  3.80k|                                       current_token.length()),
  260|  3.80k|                               current_line_number, current_column - current_token.length()));
  261|  3.80k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  10.1k|        tokens.finalize();
  265|       |
  266|  10.1k|        return tokens;
  267|  10.1k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  1.77M|    {
   14|  1.77M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 21.6k, False: 1.75M]
  |  Branch (14:13): [True: 21.5k, False: 1.75M]
  |  Branch (14:36): [True: 21.5k, False: 93]
  ------------------
   15|  21.5k|        {
   16|  21.5k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  21.5k|            if (number)
  ------------------
  |  Branch (18:17): [True: 9.82k, False: 11.7k]
  ------------------
   19|  9.82k|            {
   20|  9.82k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  9.82k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  9.82k|            }
   23|       |
   24|  11.7k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  21.5k|        }
   26|       |
   27|  1.75M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 780, False: 1.75M]
  |  Branch (27:13): [True: 416k, False: 1.34M]
  |  Branch (27:36): [True: 415k, False: 1.34M]
  ------------------
   28|   416k|        {
   29|   416k|            return {Token::Type::Comment, token, line_number, column};
   30|   416k|        }
   31|       |
   32|  1.34M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 46.1k, False: 1.29M]
  ------------------
   33|  46.1k|        {
   34|  46.1k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  46.1k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  46.1k|        }
   37|       |
   38|  1.29M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 17.9k, False: 1.27M]
  ------------------
   39|  17.9k|        {
   40|  17.9k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  17.9k|        }
   42|       |
   43|  1.27M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 98.1k, False: 1.17M]
  ------------------
   44|  98.1k|        {
   45|  98.1k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  98.1k|                    static_cast<phi::uint32_t>(id)};
   47|  98.1k|        }
   48|       |
   49|  1.17M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 47.4k, False: 1.13M]
  ------------------
   50|  47.4k|        {
   51|  47.4k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  47.4k|                    static_cast<phi::uint32_t>(id)};
   53|  47.4k|        }
   54|       |
   55|  1.13M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 791k, False: 340k]
  ------------------
   56|   791k|        {
   57|   791k|            return {Token::Type::OpCode, token, line_number, column,
   58|   791k|                    static_cast<phi::uint32_t>(opcode)};
   59|   791k|        }
   60|       |
   61|   340k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  1.13M|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  10.1k|    {
   53|       |        // Constants
   54|  10.1k|        constexpr std::uint8_t number_of_opcodes =
   55|  10.1k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  10.1k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  10.1k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  10.1k|        std::string ret;
   60|       |
   61|  1.74M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.73M, False: 10.1k]
  ------------------
   62|  1.73M|        {
   63|  1.73M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.73M|            switch (current_value)
   66|  1.73M|            {
   67|       |                // OpCode
   68|   733k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 733k, False: 1.00M]
  ------------------
   69|       |                    // Has one more value
   70|   733k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 732k, False: 591]
  ------------------
   71|   732k|                    {
   72|   732k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   732k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   732k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1, False: 732k]
  ------------------
   77|      1|                        {
   78|      1|                            return detail::ErrorString;
   79|      1|                        }
   80|   732k|                    }
   81|   733k|                    break;
   82|   733k|                }
   83|       |
   84|       |                // Int Register
   85|   733k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 102k, False: 1.63M]
  ------------------
   86|       |                    // Has one more value
   87|   102k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 102k, False: 201]
  ------------------
   88|   102k|                    {
   89|   102k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   102k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   102k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 102k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|   102k|                    }
   97|   102k|                    break;
   98|   102k|                }
   99|       |
  100|       |                // Float register
  101|   102k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 52.6k, False: 1.68M]
  ------------------
  102|       |                    // Has one more value
  103|  52.6k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 52.6k, False: 9]
  ------------------
  104|  52.6k|                    {
  105|  52.6k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  52.6k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  52.6k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 52.6k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  52.6k|                    }
  113|  52.6k|                    break;
  114|  52.6k|                }
  115|       |
  116|       |                // Floating point status register
  117|  52.6k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 18.6k, False: 1.71M]
  ------------------
  118|  18.6k|                    ret += "FPSR";
  119|  18.6k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 18.6k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  18.6k|                    break;
  125|  18.6k|                }
  126|       |
  127|       |                // Immediate integer
  128|  35.2k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 35.2k, False: 1.70M]
  ------------------
  129|  35.2k|                    ret += "#";
  130|  35.2k|                    [[fallthrough]];
  131|  35.2k|                }
  132|       |
  133|       |                // Integer literal
  134|   106k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 71.6k, False: 1.66M]
  ------------------
  135|   106k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   106k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 106k, False: 45]
  ------------------
  138|   106k|                    {
  139|   106k|                        std::int16_t value = 0;
  140|       |
  141|   320k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 213k, False: 106k]
  ------------------
  142|   213k|                        {
  143|   213k|                            value <<= 8;
  144|   213k|                            value &= data[index++];
  145|   213k|                        }
  146|       |
  147|   106k|                        ret += std::to_string(value);
  148|   106k|                    }
  149|   106k|                    break;
  150|  35.2k|                }
  151|       |
  152|       |                // Label
  153|  29.7k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 29.7k, False: 1.70M]
  ------------------
  154|  29.7k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  29.7k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 29.7k, False: 45]
  ------------------
  157|  29.7k|                    {
  158|  29.7k|                        std::string label_name = "lbl_";
  159|       |
  160|   177k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 148k, False: 29.7k]
  ------------------
  161|   148k|                        {
  162|   148k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   148k|                            label_name += c;
  165|   148k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  29.7k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 29.1k, False: 548]
  |  Branch (168:45): [True: 24.4k, False: 4.75k]
  ------------------
  169|  24.4k|                        {
  170|  24.4k|                            label_name += ':';
  171|  24.4k|                            ret += label_name;
  172|  24.4k|                        }
  173|  5.30k|                        else
  174|  5.30k|                        {
  175|  5.30k|                            ret += label_name;
  176|  5.30k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 33, False: 5.27k]
  ------------------
  177|     33|                            {
  178|     33|                                return detail::ErrorString;
  179|     33|                            }
  180|  5.30k|                        }
  181|  29.7k|                    }
  182|  29.7k|                    break;
  183|  29.7k|                }
  184|       |
  185|       |                // Newline
  186|   277k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 277k, False: 1.46M]
  ------------------
  187|   277k|                    ret += '\n';
  188|   277k|                    break;
  189|  29.7k|                }
  190|       |
  191|       |                // Comment
  192|   416k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 416k, False: 1.32M]
  ------------------
  193|   416k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   416k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 416k, False: 333]
  ------------------
  196|   416k|                    {
  197|   416k|                        std::string comment = "; ";
  198|       |
  199|  2.49M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 2.07M, False: 416k]
  ------------------
  200|  2.07M|                        {
  201|  2.07M|                            comment += static_cast<char>(data[index++]);
  202|  2.07M|                        }
  203|       |
  204|   416k|                        ret += comment + '\n';
  205|   416k|                    }
  206|   416k|                    break;
  207|  29.7k|                }
  208|       |
  209|       |                // Ignore
  210|     24|                default:
  ------------------
  |  Branch (210:17): [True: 24, False: 1.73M]
  ------------------
  211|     24|                    return detail::ErrorString;
  212|  1.73M|            }
  213|  1.73M|        }
  214|       |
  215|  10.1k|        return ret;
  216|  10.1k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   911k|        {
   20|   911k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 908k, False: 3.44k]
  ------------------
   21|   908k|            {
   22|   908k|                std::uint8_t val = data[index++];
   23|   908k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 791k, False: 116k]
  ------------------
   24|   791k|                {
   25|   791k|                    text += ' ';
   26|   791k|                }
   27|   116k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 116k, False: 38]
  ------------------
   28|   116k|                {
   29|   116k|                    text += ',';
   30|   116k|                }
   31|     38|                else
   32|     38|                {
   33|     38|                    return false;
   34|     38|                }
   35|   908k|            }
   36|       |
   37|   911k|            return true;
   38|   911k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   148k|        {
   42|   148k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 117k, False: 30.8k]
  ------------------
   43|   117k|            {
   44|   117k|                return '_';
   45|   117k|            }
   46|       |
   47|  30.8k|            return c;
   48|   148k|        }

LLVMFuzzerTestOneInput:
   12|  10.1k|{
   13|  10.1k|    static dlx::Processor processor;
   14|       |
   15|  10.1k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  10.1k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  10.1k|    processor.ClearRegisters();
   22|  10.1k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  10.1k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.26k, False: 8.90k]
  ------------------
   26|  1.26k|    {
   27|  1.26k|        processor.ExecuteCurrentProgram();
   28|  1.26k|    }
   29|       |
   30|  10.1k|    return 0;
   31|  10.1k|}


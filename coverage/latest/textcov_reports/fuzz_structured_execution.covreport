_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|   100k|        {
  173|   100k|            PHI_ASSERT(index < 3u);
  174|       |
  175|   100k|            switch (index.unsafe())
  176|   100k|            {
  177|  38.5k|                case 0:
  ------------------
  |  Branch (177:17): [True: 38.5k, False: 61.7k]
  ------------------
  178|  38.5k|                    return m_Arg1Type;
  179|       |
  180|  31.4k|                case 1:
  ------------------
  |  Branch (180:17): [True: 31.4k, False: 68.8k]
  ------------------
  181|  31.4k|                    return m_Arg2Type;
  182|       |
  183|  30.3k|                case 2:
  ------------------
  |  Branch (183:17): [True: 30.3k, False: 69.9k]
  ------------------
  184|  30.3k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 100k]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|   100k|#endif
  191|   100k|            }
  192|   100k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|  25.9k|        {
  199|  25.9k|            phi::u8 number_of_argument_required = static_cast<phi::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|  25.9k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 24.8k, False: 1.16k]
  ------------------
  203|  24.8k|            {
  204|  24.8k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  205|  24.8k|            }
  206|  25.9k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 19.5k, False: 6.43k]
  ------------------
  207|  19.5k|            {
  208|  19.5k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  209|  19.5k|            }
  210|  25.9k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 12.0k, False: 13.9k]
  ------------------
  211|  12.0k|            {
  212|  12.0k|                number_of_argument_required += static_cast<phi::uint8_t>(1u);
  213|  12.0k|            }
  214|       |
  215|  25.9k|            return number_of_argument_required;
  216|  25.9k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  219|  5.42M|        {
  220|  5.42M|            return m_RegisterAccessType;
  221|  5.42M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|  25.9k|        {
  225|  25.9k|            return m_Executor;
  226|  25.9k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  16.2M|    {
   38|  16.2M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  16.2M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  16.2M|                                         static_cast<underlying_t>(rhs));
   42|  16.2M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  16.2M|    {
   55|  16.2M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  16.2M|        return static_cast<underlying_t>(type & test) != 0;
   58|  16.2M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|  28.8k|    {
  206|  28.8k|        switch (value)
  207|  28.8k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  1.54k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.54k, False: 27.2k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.54k|        return #name;
  |  |  ------------------
  |  |   16|  1.54k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.19k, False: 27.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.19k|        return #name;
  |  |  ------------------
  |  |   17|  1.19k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    253|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 253, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    253|        return #name;
  |  |  ------------------
  |  |   18|    400|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    400|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 400, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    400|        return #name;
  |  |  ------------------
  |  |   19|    400|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    219|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 219, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    219|        return #name;
  |  |  ------------------
  |  |   20|    257|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    257|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 257, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    257|        return #name;
  |  |  ------------------
  |  |   21|    257|                                                                                                   \
  |  |   22|    257|    /* Sub */                                                                                      \
  |  |   23|    260|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    260|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 260, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    260|        return #name;
  |  |  ------------------
  |  |   24|    260|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    131|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 131, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    131|        return #name;
  |  |  ------------------
  |  |   25|  1.45k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.45k, False: 27.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.45k|        return #name;
  |  |  ------------------
  |  |   26|  1.45k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 99, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     99|        return #name;
  |  |  ------------------
  |  |   27|    364|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    364|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 364, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    364|        return #name;
  |  |  ------------------
  |  |   28|    364|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    220|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 220, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    220|        return #name;
  |  |  ------------------
  |  |   29|    220|                                                                                                   \
  |  |   30|    220|    /* Multiplication */                                                                           \
  |  |   31|    349|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    349|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 349, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    349|        return #name;
  |  |  ------------------
  |  |   32|    349|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    100|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 100, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    100|        return #name;
  |  |  ------------------
  |  |   33|    236|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 236, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    236|        return #name;
  |  |  ------------------
  |  |   34|    236|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |   35|    247|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    247|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 247, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    247|        return #name;
  |  |  ------------------
  |  |   36|    247|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 108, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    108|        return #name;
  |  |  ------------------
  |  |   37|    108|                                                                                                   \
  |  |   38|    108|    /* Division */                                                                                 \
  |  |   39|    108|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |   40|     82|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   41|     79|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |   42|    196|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |   43|    196|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |   44|     73|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 73, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     73|        return #name;
  |  |  ------------------
  |  |   45|     73|                                                                                                   \
  |  |   46|     73|    /* Shift left (logical) */                                                                     \
  |  |   47|    263|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    263|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 263, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    263|        return #name;
  |  |  ------------------
  |  |   48|    263|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   49|    208|                                                                                                   \
  |  |   50|    208|    /* Shift right (logical) */                                                                    \
  |  |   51|    274|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    274|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 274, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    274|        return #name;
  |  |  ------------------
  |  |   52|    412|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    412|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 412, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    412|        return #name;
  |  |  ------------------
  |  |   53|    412|                                                                                                   \
  |  |   54|    412|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    773|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    773|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 773, False: 28.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    773|        return #name;
  |  |  ------------------
  |  |   56|    773|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 88, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     88|        return #name;
  |  |  ------------------
  |  |   57|     88|                                                                                                   \
  |  |   58|     88|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    116|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    116|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 116, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    116|        return #name;
  |  |  ------------------
  |  |   60|    208|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |   61|    208|                                                                                                   \
  |  |   62|    208|    /* Logic */                                                                                    \
  |  |   63|    208|                                                                                                   \
  |  |   64|    208|    /* And */                                                                                      \
  |  |   65|    208|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |   66|    795|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    795|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 795, False: 28.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    795|        return #name;
  |  |  ------------------
  |  |   67|    795|                                                                                                   \
  |  |   68|    795|    /* Or */                                                                                       \
  |  |   69|    795|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |   70|    210|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |   71|     82|                                                                                                   \
  |  |   72|     82|    /* XOR */                                                                                      \
  |  |   73|    101|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 101, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    101|        return #name;
  |  |  ------------------
  |  |   74|    879|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    879|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 879, False: 27.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    879|        return #name;
  |  |  ------------------
  |  |   75|    879|                                                                                                   \
  |  |   76|    879|    /* Set conditionals */                                                                         \
  |  |   77|    879|                                                                                                   \
  |  |   78|    879|    /* Less than */                                                                                \
  |  |   79|    879|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |   80|    230|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    230|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 230, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    230|        return #name;
  |  |  ------------------
  |  |   81|    230|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |   82|    108|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 108, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    108|        return #name;
  |  |  ------------------
  |  |   83|    108|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 98, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     98|        return #name;
  |  |  ------------------
  |  |   84|    108|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 108, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    108|        return #name;
  |  |  ------------------
  |  |   85|    108|                                                                                                   \
  |  |   86|    108|    /* Greater than */                                                                             \
  |  |   87|    722|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    722|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 722, False: 28.1k]
  |  |  |  |  ------------------
  |  |  |  |  210|    722|        return #name;
  |  |  ------------------
  |  |   88|    722|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 88, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     88|        return #name;
  |  |  ------------------
  |  |   89|    209|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 209, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    209|        return #name;
  |  |  ------------------
  |  |   90|    209|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |   91|    422|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    422|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 422, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    422|        return #name;
  |  |  ------------------
  |  |   92|    546|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    546|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 546, False: 28.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    546|        return #name;
  |  |  ------------------
  |  |   93|    546|                                                                                                   \
  |  |   94|    546|    /* Less than or equal */                                                                       \
  |  |   95|    546|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |   96|    210|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 210, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    210|        return #name;
  |  |  ------------------
  |  |   97|    210|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |   98|    488|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    488|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 488, False: 28.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    488|        return #name;
  |  |  ------------------
  |  |   99|    488|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 98, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     98|        return #name;
  |  |  ------------------
  |  |  100|    220|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    220|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 220, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    220|        return #name;
  |  |  ------------------
  |  |  101|    220|                                                                                                   \
  |  |  102|    220|    /* Greater than or equal */                                                                    \
  |  |  103|    270|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    270|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 270, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    270|        return #name;
  |  |  ------------------
  |  |  104|    879|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    879|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 879, False: 27.9k]
  |  |  |  |  ------------------
  |  |  |  |  210|    879|        return #name;
  |  |  ------------------
  |  |  105|    879|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    119|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 119, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    119|        return #name;
  |  |  ------------------
  |  |  106|    241|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    241|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 241, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    241|        return #name;
  |  |  ------------------
  |  |  107|    241|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 79, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     79|        return #name;
  |  |  ------------------
  |  |  108|    306|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    306|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 306, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    306|        return #name;
  |  |  ------------------
  |  |  109|    306|                                                                                                   \
  |  |  110|    306|    /* Equal */                                                                                    \
  |  |  111|    306|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 86, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     86|        return #name;
  |  |  ------------------
  |  |  112|     92|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 92, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     92|        return #name;
  |  |  ------------------
  |  |  113|    316|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    316|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 316, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    316|        return #name;
  |  |  ------------------
  |  |  114|    322|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    322|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 322, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    322|        return #name;
  |  |  ------------------
  |  |  115|    345|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    345|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 345, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    345|        return #name;
  |  |  ------------------
  |  |  116|    345|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 88, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     88|        return #name;
  |  |  ------------------
  |  |  117|     88|                                                                                                   \
  |  |  118|     88|    /* Not equal */                                                                                \
  |  |  119|    208|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    208|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 208, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    208|        return #name;
  |  |  ------------------
  |  |  120|    208|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 93, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     93|        return #name;
  |  |  ------------------
  |  |  121|     93|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 88, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     88|        return #name;
  |  |  ------------------
  |  |  122|    279|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    279|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 279, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    279|        return #name;
  |  |  ------------------
  |  |  123|    279|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |  124|     85|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |  125|     85|                                                                                                   \
  |  |  126|     85|    /* Conditional branching */                                                                    \
  |  |  127|    102|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 102, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    102|        return #name;
  |  |  ------------------
  |  |  128|    107|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 107, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    107|        return #name;
  |  |  ------------------
  |  |  129|    107|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 93, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     93|        return #name;
  |  |  ------------------
  |  |  130|    805|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    805|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 805, False: 28.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    805|        return #name;
  |  |  ------------------
  |  |  131|    805|                                                                                                   \
  |  |  132|    805|    /* Unconditional branching */                                                                  \
  |  |  133|    805|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|    323|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 323, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    323|        return #name;
  |  |  ------------------
  |  |  134|    323|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 98, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     98|        return #name;
  |  |  ------------------
  |  |  135|    220|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    220|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 220, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    220|        return #name;
  |  |  ------------------
  |  |  136|    517|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    517|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 517, False: 28.3k]
  |  |  |  |  ------------------
  |  |  |  |  210|    517|        return #name;
  |  |  ------------------
  |  |  137|    517|                                                                                                   \
  |  |  138|    517|    /* Loading data */                                                                             \
  |  |  139|    517|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    343|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 343, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    343|        return #name;
  |  |  ------------------
  |  |  140|    343|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  141|     67|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  142|     80|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |  143|    784|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    784|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 784, False: 28.0k]
  |  |  |  |  ------------------
  |  |  |  |  210|    784|        return #name;
  |  |  ------------------
  |  |  144|    784|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    348|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 348, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    348|        return #name;
  |  |  ------------------
  |  |  145|    348|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  146|     67|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  147|     67|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  148|     67|                                                                                                   \
  |  |  149|     67|    /* Storing data */                                                                             \
  |  |  150|    206|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    206|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 206, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    206|        return #name;
  |  |  ------------------
  |  |  151|    206|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 71, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     71|        return #name;
  |  |  ------------------
  |  |  152|     71|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 66, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     66|        return #name;
  |  |  ------------------
  |  |  153|    194|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 194, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    194|        return #name;
  |  |  ------------------
  |  |  154|    194|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  155|    311|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    311|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 311, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  210|    311|        return #name;
  |  |  ------------------
  |  |  156|    408|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    408|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 408, False: 28.4k]
  |  |  |  |  ------------------
  |  |  |  |  210|    408|        return #name;
  |  |  ------------------
  |  |  157|    408|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     68|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 68, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     68|        return #name;
  |  |  ------------------
  |  |  158|     68|                                                                                                   \
  |  |  159|     68|    /* Moving data */                                                                              \
  |  |  160|    219|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    219|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 219, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    219|        return #name;
  |  |  ------------------
  |  |  161|    219|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 89, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     89|        return #name;
  |  |  ------------------
  |  |  162|    244|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|    244|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 244, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    244|        return #name;
  |  |  ------------------
  |  |  163|    244|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 218, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    218|        return #name;
  |  |  ------------------
  |  |  164|    218|                                                                                                   \
  |  |  165|    218|    /* Converting data */                                                                          \
  |  |  166|    218|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 82, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     82|        return #name;
  |  |  ------------------
  |  |  167|     94|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 94, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     94|        return #name;
  |  |  ------------------
  |  |  168|     94|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 80, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     80|        return #name;
  |  |  ------------------
  |  |  169|     84|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 84, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     84|        return #name;
  |  |  ------------------
  |  |  170|     92|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 92, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     92|        return #name;
  |  |  ------------------
  |  |  171|     92|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |  172|     81|                                                                                                   \
  |  |  173|     81|    /* Other */                                                                                    \
  |  |  174|    115|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    115|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 115, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|    115|        return #name;
  |  |  ------------------
  |  |  175|    204|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    204|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 204, False: 28.6k]
  |  |  |  |  ------------------
  |  |  |  |  210|    204|        return #name;
  |  |  ------------------
  |  |  176|  1.07k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.07k, False: 27.7k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.07k|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 28.8k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|  28.8k|        }
  219|  28.8k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  7.25k|    {
   31|  7.25k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 127, False: 7.12k]
  ------------------
   32|    127|        {
   33|    127|            return true;
   34|    127|        }
   35|       |
   36|  7.12k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 71, False: 7.05k]
  ------------------
   37|     71|        {
   38|     71|            return true;
   39|     71|        }
   40|       |
   41|  7.05k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 469, False: 6.58k]
  ------------------
   42|    469|        {
   43|    469|            return true;
   44|    469|        }
   45|       |
   46|  6.58k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 6.58k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  6.58k|        return false;
   52|  6.58k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  6.58k|    {
   56|  6.58k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 6.58k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  6.58k|        const char first_char = token.at(0u);
   62|       |
   63|  6.58k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 1.32k, False: 5.25k]
  ------------------
   64|  1.32k|        {
   65|  1.32k|            return phi::is_alpha(first_char);
   66|  1.32k|        }
   67|       |
   68|  5.25k|        phi::boolean just_under_scores = (first_char == '_');
   69|  5.25k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 995, False: 4.25k]
  |  Branch (69:13): [True: 830, False: 4.42k]
  |  Branch (69:43): [True: 830, False: 165]
  ------------------
   70|    830|        {
   71|    830|            return false;
   72|    830|        }
   73|       |
   74|  26.3k|        for (phi::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 23.3k, False: 2.98k]
  ------------------
   75|  23.3k|        {
   76|  23.3k|            const char c{token.at(index)};
   77|       |
   78|  23.3k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 9.94k, False: 13.4k]
  ------------------
   79|  9.94k|            {
   80|  9.94k|                just_under_scores = false;
   81|  9.94k|            }
   82|  13.4k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 12.0k, False: 1.43k]
  ------------------
   83|  12.0k|            {
   84|  12.0k|                continue;
   85|  12.0k|            }
   86|  1.43k|            else
   87|  1.43k|            {
   88|  1.43k|                return false;
   89|  1.43k|            }
   90|  23.3k|        }
   91|       |
   92|  2.98k|        return !just_under_scores;
   93|  4.42k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   98|   101k|    {
   99|   101k|        if (token.is_empty())
  ------------------
  |  Branch (99:13): [True: 0, False: 101k]
  ------------------
  100|      0|        {
  101|      0|            return {};
  102|      0|        }
  103|       |
  104|   101k|        if (token.length() == 1u)
  ------------------
  |  Branch (104:13): [True: 16.2k, False: 85.3k]
  ------------------
  105|  16.2k|        {
  106|  16.2k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (106:17): [True: 7.09k, False: 9.13k]
  ------------------
  107|  7.09k|            {
  108|  7.09k|                return static_cast<phi::int16_t>(token.at(0u) - '0');
  109|  7.09k|            }
  110|       |
  111|  9.13k|            return {};
  112|  16.2k|        }
  113|       |
  114|       |        // Disallow trailing separators
  115|  85.3k|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (115:13): [True: 82, False: 85.2k]
  ------------------
  116|     82|        {
  117|     82|            return {};
  118|     82|        }
  119|       |
  120|  85.2k|        phi::int32_t number{0};
  121|  85.2k|        phi::boolean is_negative{false};
  122|  85.2k|        phi::boolean starts_with_zero{false};
  123|  85.2k|        phi::boolean parsing_binary{false};
  124|  85.2k|        phi::boolean parsing_octal{false};
  125|  85.2k|        phi::boolean parsing_hexadecimal{false};
  126|  85.2k|        phi::boolean parsed_something{false};
  127|  85.2k|        phi::boolean parsed_separator{false};
  128|       |
  129|       |        // TODO: Move x'th character checks out of the for loop
  130|       |
  131|  96.6k|        for (phi::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (131:37): [True: 95.4k, False: 1.25k]
  ------------------
  132|  95.4k|        {
  133|  95.4k|            const char c{token.at(index)};
  134|       |
  135|       |            // First character
  136|  95.4k|            if (index == 0u)
  ------------------
  |  Branch (136:17): [True: 85.2k, False: 10.2k]
  ------------------
  137|  85.2k|            {
  138|  85.2k|                if (c == '+')
  ------------------
  |  Branch (138:21): [True: 66, False: 85.1k]
  ------------------
  139|     66|                {
  140|     66|                    continue;
  141|     66|                }
  142|       |
  143|  85.1k|                if (c == '-')
  ------------------
  |  Branch (143:21): [True: 180, False: 85.0k]
  ------------------
  144|    180|                {
  145|    180|                    is_negative = true;
  146|    180|                    continue;
  147|    180|                }
  148|       |
  149|  85.0k|                if (c == '0')
  ------------------
  |  Branch (149:21): [True: 4.27k, False: 80.7k]
  ------------------
  150|  4.27k|                {
  151|  4.27k|                    starts_with_zero = true;
  152|  4.27k|                    continue;
  153|  4.27k|                }
  154|       |
  155|  80.7k|                if (c == '\'')
  ------------------
  |  Branch (155:21): [True: 66, False: 80.6k]
  ------------------
  156|     66|                {
  157|     66|                    return {};
  158|     66|                }
  159|  80.7k|            }
  160|       |
  161|       |            // Second character
  162|  90.8k|            if (index == 1u)
  ------------------
  |  Branch (162:17): [True: 4.85k, False: 86.0k]
  ------------------
  163|  4.85k|            {
  164|  4.85k|                if (starts_with_zero)
  ------------------
  |  Branch (164:21): [True: 4.27k, False: 577]
  ------------------
  165|  4.27k|                {
  166|       |                    // Binary
  167|  4.27k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (167:25): [True: 340, False: 3.93k]
  |  Branch (167:37): [True: 212, False: 3.72k]
  ------------------
  168|    552|                    {
  169|    552|                        parsing_binary = true;
  170|    552|                        continue;
  171|    552|                    }
  172|       |
  173|       |                    // Hexadecimal
  174|  3.72k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (174:25): [True: 1.77k, False: 1.94k]
  |  Branch (174:37): [True: 71, False: 1.87k]
  ------------------
  175|  1.85k|                    {
  176|  1.85k|                        parsing_hexadecimal = true;
  177|  1.85k|                        continue;
  178|  1.85k|                    }
  179|       |
  180|       |                    // Octal
  181|  1.87k|                    parsing_octal = true;
  182|  1.87k|                }
  183|  4.85k|            }
  184|       |
  185|       |            // Handle separators
  186|  88.4k|            if (c == '\'')
  ------------------
  |  Branch (186:17): [True: 138, False: 88.3k]
  ------------------
  187|    138|            {
  188|    138|                if (parsed_separator)
  ------------------
  |  Branch (188:21): [True: 66, False: 72]
  ------------------
  189|     66|                {
  190|     66|                    return {};
  191|     66|                }
  192|       |
  193|     72|                parsed_separator = true;
  194|     72|                continue;
  195|    138|            }
  196|       |
  197|       |            // Check for over/underflow
  198|  88.3k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (198:17): [True: 190, False: 88.1k]
  |  Branch (198:32): [True: 0, False: 190]
  ------------------
  199|      0|            {
  200|       |                // Would underflow
  201|      0|                return {};
  202|      0|            }
  203|  88.3k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (203:17): [True: 88.1k, False: 190]
  |  Branch (203:17): [True: 0, False: 88.3k]
  |  Branch (203:33): [True: 0, False: 88.1k]
  ------------------
  204|      0|            {
  205|       |                // Would overflow
  206|      0|                return {};
  207|      0|            }
  208|       |
  209|  88.3k|            parsed_separator = false;
  210|  88.3k|            parsed_something = true;
  211|       |
  212|  88.3k|            if (parsing_binary)
  ------------------
  |  Branch (212:17): [True: 700, False: 87.6k]
  ------------------
  213|    700|            {
  214|    700|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (214:21): [True: 222, False: 478]
  ------------------
  215|    222|                {
  216|    222|                    return {};
  217|    222|                }
  218|       |
  219|    478|                number <<= 1;
  220|    478|                number |= (c - '0');
  221|    478|            }
  222|  87.6k|            else if (parsing_octal)
  ------------------
  |  Branch (222:22): [True: 2.74k, False: 84.8k]
  ------------------
  223|  2.74k|            {
  224|  2.74k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (224:21): [True: 1.64k, False: 1.10k]
  ------------------
  225|  1.64k|                {
  226|  1.64k|                    return {};
  227|  1.64k|                }
  228|       |
  229|  1.10k|                number <<= 3;
  230|  1.10k|                number |= (c - '0');
  231|  1.10k|            }
  232|  84.8k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (232:22): [True: 3.24k, False: 81.6k]
  ------------------
  233|  3.24k|            {
  234|  3.24k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (234:21): [True: 1.46k, False: 1.77k]
  ------------------
  235|  1.46k|                {
  236|  1.46k|                    return {};
  237|  1.46k|                }
  238|       |
  239|  1.77k|                number <<= 4;
  240|  1.77k|                number |= phi::hex_digit_value(c).unsafe();
  241|  1.77k|            }
  242|  81.6k|            else
  243|  81.6k|            {
  244|  81.6k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (244:21): [True: 80.4k, False: 1.16k]
  ------------------
  245|  80.4k|                {
  246|  80.4k|                    return {};
  247|  80.4k|                }
  248|       |
  249|       |                // Disallow leading zeros
  250|  1.16k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (250:21): [True: 469, False: 698]
  |  Branch (250:36): [True: 66, False: 403]
  ------------------
  251|     66|                {
  252|     66|                    return {};
  253|     66|                }
  254|       |
  255|  1.10k|                number *= 10;
  256|  1.10k|                number += (c - '0');
  257|  1.10k|            }
  258|  88.3k|        }
  259|       |
  260|  1.25k|        if (parsed_something)
  ------------------
  |  Branch (260:13): [True: 1.14k, False: 108]
  ------------------
  261|  1.14k|        {
  262|       |            // Check for over/underflow
  263|  1.14k|            if (is_negative && (-number < std::numeric_limits<phi::int16_t>::min()))
  ------------------
  |  Branch (263:17): [True: 66, False: 1.07k]
  |  Branch (263:32): [True: 0, False: 66]
  ------------------
  264|      0|            {
  265|       |                // Would underflow
  266|      0|                return {};
  267|      0|            }
  268|  1.14k|            if (!is_negative && (number > std::numeric_limits<phi::int16_t>::max()))
  ------------------
  |  Branch (268:17): [True: 1.07k, False: 66]
  |  Branch (268:17): [True: 0, False: 1.14k]
  |  Branch (268:33): [True: 0, False: 1.07k]
  ------------------
  269|      0|            {
  270|       |                // Would overflow
  271|      0|                return {};
  272|      0|            }
  273|       |
  274|  1.14k|            if (is_negative)
  ------------------
  |  Branch (274:17): [True: 66, False: 1.07k]
  ------------------
  275|     66|            {
  276|     66|                return static_cast<phi::int16_t>(-number);
  277|     66|            }
  278|       |
  279|  1.07k|            return static_cast<phi::int16_t>(number);
  280|  1.14k|        }
  281|       |
  282|    108|        return {};
  283|  1.25k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|  12.0k|    {
   97|  12.0k|        switch (value)
   98|  12.0k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  1.62k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  1.62k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.62k, False: 10.4k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.62k|        return #name;
  |  |  ------------------
  |  |   14|  5.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|  5.00k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 5.00k, False: 7.05k]
  |  |  |  |  ------------------
  |  |  |  |  101|  5.00k|        return #name;
  |  |  ------------------
  |  |   15|  5.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|     50|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 50, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     50|        return #name;
  |  |  ------------------
  |  |   16|  2.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|  2.31k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2.31k, False: 9.73k]
  |  |  |  |  ------------------
  |  |  |  |  101|  2.31k|        return #name;
  |  |  ------------------
  |  |   17|  2.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|    472|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 472, False: 11.5k]
  |  |  |  |  ------------------
  |  |  |  |  101|    472|        return #name;
  |  |  ------------------
  |  |   18|    472|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|     50|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 50, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     50|        return #name;
  |  |  ------------------
  |  |   19|     50|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|     31|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 31, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     31|        return #name;
  |  |  ------------------
  |  |   20|     31|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|     22|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 22, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     22|        return #name;
  |  |  ------------------
  |  |   21|     99|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|     99|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 99, False: 11.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     99|        return #name;
  |  |  ------------------
  |  |   22|    163|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|    163|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 163, False: 11.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|    163|        return #name;
  |  |  ------------------
  |  |   23|    163|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     27|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 27, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     27|        return #name;
  |  |  ------------------
  |  |   24|     66|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|     66|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 66, False: 11.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     66|        return #name;
  |  |  ------------------
  |  |   25|     66|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|      4|        return #name;
  |  |  ------------------
  |  |   26|     51|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|     51|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 51, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     51|        return #name;
  |  |  ------------------
  |  |   27|     51|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|      4|        return #name;
  |  |  ------------------
  |  |   28|     72|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|     72|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 72, False: 11.9k]
  |  |  |  |  ------------------
  |  |  |  |  101|     72|        return #name;
  |  |  ------------------
  |  |   29|    203|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|    203|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 203, False: 11.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|    203|        return #name;
  |  |  ------------------
  |  |   30|    203|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 26, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     26|        return #name;
  |  |  ------------------
  |  |   31|     38|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|     38|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 38, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     38|        return #name;
  |  |  ------------------
  |  |   32|     38|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|     10|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 10, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     10|        return #name;
  |  |  ------------------
  |  |   33|    235|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|    235|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 235, False: 11.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|    235|        return #name;
  |  |  ------------------
  |  |   34|    275|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|    275|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 275, False: 11.7k]
  |  |  |  |  ------------------
  |  |  |  |  101|    275|        return #name;
  |  |  ------------------
  |  |   35|    275|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 2, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|      2|        return #name;
  |  |  ------------------
  |  |   36|     44|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|     44|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 44, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     44|        return #name;
  |  |  ------------------
  |  |   37|     44|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|     42|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 42, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     42|        return #name;
  |  |  ------------------
  |  |   38|     42|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|     18|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 18, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     18|        return #name;
  |  |  ------------------
  |  |   39|    313|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|    313|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 313, False: 11.7k]
  |  |  |  |  ------------------
  |  |  |  |  101|    313|        return #name;
  |  |  ------------------
  |  |   40|    313|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|    195|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 195, False: 11.8k]
  |  |  |  |  ------------------
  |  |  |  |  101|    195|        return #name;
  |  |  ------------------
  |  |   41|    195|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 11, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|     11|        return #name;
  |  |  ------------------
  |  |   42|     11|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6, False: 12.0k]
  |  |  |  |  ------------------
  |  |  |  |  101|      6|        return #name;
  |  |  ------------------
  |  |   43|    279|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|    279|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 279, False: 11.7k]
  |  |  |  |  ------------------
  |  |  |  |  101|    279|        return #name;
  |  |  ------------------
  |  |   44|    305|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    305|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 305, False: 11.7k]
  |  |  |  |  ------------------
  |  |  |  |  101|    305|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 12.0k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|  12.0k|        }
  110|  12.0k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  5.23k|    {
  134|  5.23k|        switch (value)
  135|  5.23k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    142|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|    142|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 142, False: 5.09k]
  |  |  |  |  ------------------
  |  |  |  |  138|    142|        return #name;
  |  |  ------------------
  |  |   48|    255|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|    255|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 255, False: 4.97k]
  |  |  |  |  ------------------
  |  |  |  |  138|    255|        return #name;
  |  |  ------------------
  |  |   49|    255|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|     28|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 28, False: 5.20k]
  |  |  |  |  ------------------
  |  |  |  |  138|     28|        return #name;
  |  |  ------------------
  |  |   50|     28|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   51|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   52|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   53|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 15, False: 5.21k]
  |  |  |  |  ------------------
  |  |  |  |  138|     15|        return #name;
  |  |  ------------------
  |  |   54|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   55|    122|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|    122|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 122, False: 5.11k]
  |  |  |  |  ------------------
  |  |  |  |  138|    122|        return #name;
  |  |  ------------------
  |  |   56|    169|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|    169|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 169, False: 5.06k]
  |  |  |  |  ------------------
  |  |  |  |  138|    169|        return #name;
  |  |  ------------------
  |  |   57|    169|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 8, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      8|        return #name;
  |  |  ------------------
  |  |   58|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   59|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   60|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 3, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      3|        return #name;
  |  |  ------------------
  |  |   61|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   62|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 8, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      8|        return #name;
  |  |  ------------------
  |  |   63|  1.33k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.33k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.33k, False: 3.89k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.33k|        return #name;
  |  |  ------------------
  |  |   64|  1.33k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|     91|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 91, False: 5.14k]
  |  |  |  |  ------------------
  |  |  |  |  138|     91|        return #name;
  |  |  ------------------
  |  |   65|    136|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|    136|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 136, False: 5.09k]
  |  |  |  |  ------------------
  |  |  |  |  138|    136|        return #name;
  |  |  ------------------
  |  |   66|    136|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   67|  1.91k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.91k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.91k, False: 3.32k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.91k|        return #name;
  |  |  ------------------
  |  |   68|  1.91k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 26, False: 5.20k]
  |  |  |  |  ------------------
  |  |  |  |  138|     26|        return #name;
  |  |  ------------------
  |  |   69|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 7, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      7|        return #name;
  |  |  ------------------
  |  |   70|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   71|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|     27|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 27, False: 5.20k]
  |  |  |  |  ------------------
  |  |  |  |  138|     27|        return #name;
  |  |  ------------------
  |  |   72|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      1|        return #name;
  |  |  ------------------
  |  |   73|    735|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|    735|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 735, False: 4.49k]
  |  |  |  |  ------------------
  |  |  |  |  138|    735|        return #name;
  |  |  ------------------
  |  |   74|    735|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 10, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|     10|        return #name;
  |  |  ------------------
  |  |   75|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 5.22k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   76|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 5.23k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   77|     89|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|     89|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 89, False: 5.14k]
  |  |  |  |  ------------------
  |  |  |  |  138|     89|        return #name;
  |  |  ------------------
  |  |   78|     89|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|     76|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 76, False: 5.15k]
  |  |  |  |  ------------------
  |  |  |  |  138|     76|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 5.23k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  5.23k|        }
  147|  5.23k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   517k|        {
   12|   517k|            m_Value = value;
   13|   517k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   531k|        {
   17|   531k|            return m_Value;
   18|   531k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  1.33k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finalized);
   61|       |#endif
   62|       |
   63|  1.33k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 16.3k, False: 0]
  ------------------
   64|  16.3k|            {
   65|  16.3k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 1.33k, False: 15.0k]
  ------------------
   66|  1.33k|                {
   67|  1.33k|                    return &token;
   68|  1.33k|                }
   69|  16.3k|            }
   70|       |
   71|      0|            return nullptr;
   72|  1.33k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  94.8k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  94.8k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  94.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   145k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|   145k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   145k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|  14.7k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finalized);
   27|       |#endif
   28|       |
   29|  14.7k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  14.7k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
    8|   508k|    {
    9|   508k|        m_Value = val;
   10|   508k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   13|  2.17M|    {
   14|  2.17M|        return m_Value;
   15|  2.17M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   16|  25.9k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   21|  16.2k|    {
   22|  16.2k|        PHI_ASSERT(argument_number < 3u);
   23|       |
   24|  16.2k|        switch (argument_number.unsafe())
   25|  16.2k|        {
   26|  6.67k|            case 0u:
  ------------------
  |  Branch (26:13): [True: 6.67k, False: 9.61k]
  ------------------
   27|  6.67k|                m_Arg1 = argument;
   28|  6.67k|                break;
   29|  5.45k|            case 1u:
  ------------------
  |  Branch (29:13): [True: 5.45k, False: 10.8k]
  ------------------
   30|  5.45k|                m_Arg2 = argument;
   31|  5.45k|                break;
   32|  4.16k|            case 2u:
  ------------------
  |  Branch (32:13): [True: 4.16k, False: 12.1k]
  ------------------
   33|  4.16k|                m_Arg3 = argument;
   34|  4.16k|                break;
   35|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   36|      0|            default:
  ------------------
  |  Branch (36:13): [True: 0, False: 16.2k]
  ------------------
   37|      0|                PHI_ASSERT_NOT_REACHED();
   38|  16.2k|#endif
   39|  16.2k|        }
   40|  16.2k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   79|  5.42M|    {
   80|  5.42M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   81|  5.42M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   84|  5.42M|    {
   85|  5.42M|        return m_Info;
   86|  5.42M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   21|  94.2k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   24|  32.5M|    {
   25|  32.5M|        return m_Type;
   26|  32.5M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   73|  7.10M|    {
   74|  7.10M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   75|       |
   76|  7.10M|        return register_int;
   77|  7.10M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   80|  1.72M|    {
   81|  1.72M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   82|       |
   83|  1.72M|        return register_float;
   84|  1.72M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   88|  1.19M|    {
   89|  1.19M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   90|       |
   91|  1.19M|        return immediate_value;
   92|  1.19M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  103|   732k|    {
  104|   732k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  105|       |
  106|   732k|        return label;
  107|   732k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  166|  10.2k|    {
  167|  10.2k|        InstructionArgument arg;
  168|  10.2k|        arg.m_Type                   = ArgumentType::IntRegister;
  169|  10.2k|        arg.register_int.register_id = id;
  170|  10.2k|        return arg;
  171|  10.2k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  174|  2.32k|    {
  175|  2.32k|        InstructionArgument arg;
  176|  2.32k|        arg.m_Type                     = ArgumentType::FloatRegister;
  177|  2.32k|        arg.register_float.register_id = id;
  178|  2.32k|        return arg;
  179|  2.32k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  182|  2.86k|    {
  183|  2.86k|        InstructionArgument arg;
  184|  2.86k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  185|  2.86k|        arg.immediate_value.signed_value = value;
  186|  2.86k|        return arg;
  187|  2.86k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  200|    877|    {
  201|    877|        InstructionArgument arg;
  202|    877|        arg.m_Type           = ArgumentType::Label;
  203|    877|        arg.label.label_name = label_name;
  204|    877|        return arg;
  205|    877|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|   243k|        {
  351|   243k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|   243k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|   243k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|   243k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|   243k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|   243k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|   243k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  28.5k|        {
  364|  28.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  28.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  28.5k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  28.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  28.5k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  28.5k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  50.6k|        {
  376|  50.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  50.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  50.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  50.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  50.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  50.6k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  50.6k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  28.7k|        {
  389|  28.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  28.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  28.7k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  28.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  28.7k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  28.7k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  16.4k|        {
  401|  16.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  16.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  16.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  16.4k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  16.4k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  16.4k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  11.7k|        {
  416|  11.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  11.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  11.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  11.7k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  11.7k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|  52.9k|        {
  431|  52.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|  52.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|  52.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|  52.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|  52.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|  52.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|  52.9k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|  23.6k|        {
  444|  23.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|  23.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|  23.6k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|  23.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|  23.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|  23.6k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|   127k|        {
  456|   127k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|   127k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|   127k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|   127k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|   127k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|   127k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|   127k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  18.4k|        {
  469|  18.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  18.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  18.4k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  18.4k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  18.4k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  18.4k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  42.7k|        {
  481|  42.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  42.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  42.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  42.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  42.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  42.7k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  42.7k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  42.7k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  14.8k|        {
  496|  14.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  14.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  14.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  14.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  14.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  14.8k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  14.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  14.8k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  59.1k|        {
  511|  59.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  59.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  59.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  59.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  59.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  59.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  59.1k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|  40.2k|        {
  524|  40.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|  40.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|  40.2k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|  40.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|  40.2k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|  40.2k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  32.1k|        {
  536|  32.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  32.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  32.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  32.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  32.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  32.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  32.1k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  34.1k|        {
  549|  34.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  34.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  34.1k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  34.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  34.1k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  34.1k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  20.9k|        {
  561|  20.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  20.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  20.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  20.9k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  20.9k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  20.9k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  18.4k|        {
  576|  18.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  18.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  18.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  18.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  18.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  18.4k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  18.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  18.4k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  6.17k|        {
  591|  6.17k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  6.17k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  6.17k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  6.17k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  6.17k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  6.17k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  6.17k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|      1|        {
  604|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  606|      1|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  9.50k|        {
  616|  9.50k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  9.50k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  9.50k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  9.50k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  9.50k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  9.50k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  9.50k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|      1|        {
  629|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  631|      1|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  65.0k|        {
  683|  65.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  65.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  65.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  65.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  65.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  65.0k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  65.0k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  22.7k|        {
  696|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  22.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  22.7k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  22.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  22.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  69.6k|        {
  709|  69.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  69.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  69.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  69.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  69.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  69.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  69.6k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  24.7k|        {
  722|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  24.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  24.7k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  24.7k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  24.7k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|  76.3k|        {
  735|  76.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|  76.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|  76.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|  76.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|  76.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|  76.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|  76.3k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  29.7k|        {
  748|  29.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  29.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  29.7k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  29.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  29.7k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  29.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  29.7k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  62.7k|        {
  761|  62.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  62.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  62.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  62.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  62.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  62.7k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  62.7k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  41.9k|        {
  774|  41.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  41.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  41.9k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  41.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  41.9k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  41.9k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  41.9k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  22.7k|        {
  787|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  22.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  22.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  22.7k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  22.7k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|  70.3k|        {
  801|  70.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|  70.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|  70.3k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|  70.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|  70.3k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|  70.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|  70.3k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  33.5k|        {
  814|  33.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  33.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  33.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  33.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  33.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  33.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  33.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  33.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  21.4k|        {
  828|  21.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  21.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  21.4k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  21.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  21.4k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  21.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  21.4k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  20.8k|        {
  841|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|   214k|        {
  855|   214k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|   214k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|   214k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|   214k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|   214k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|   214k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|   214k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  11.7k|        {
  868|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  11.7k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 1, False: 11.7k]
  ------------------
  876|       |
  877|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  11.7k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  47.4k|        {
  883|  47.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  47.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  47.4k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  47.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  47.4k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 0, False: 47.4k]
  ------------------
  890|       |
  891|  47.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  47.4k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  13.6k|        {
  897|  13.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  13.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  13.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  13.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  13.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  13.6k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 1.81k, False: 11.7k]
  ------------------
  905|       |
  906|  13.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  13.6k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|  30.0k|        {
  912|  30.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|  30.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|  30.0k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|  30.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|  30.0k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 0, False: 30.0k]
  ------------------
  919|       |
  920|  30.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|  30.0k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  11.7k|        {
  926|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  11.7k|            processor.SetFPSRValue(new_value);
  935|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  28.2k|        {
  940|  28.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  28.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  28.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  28.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  28.2k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  28.2k|            processor.SetFPSRValue(new_value);
  949|  28.2k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  14.0k|        {
  954|  14.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  14.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  14.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  14.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  14.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  14.0k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 0, False: 14.0k]
  ------------------
  962|       |
  963|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  14.0k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  32.4k|        {
  969|  32.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  32.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  32.4k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  32.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  32.4k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 1.00k, False: 31.4k]
  ------------------
  976|       |
  977|  32.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  32.4k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  12.0k|        {
  983|  12.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  12.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  12.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  12.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  12.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  12.0k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 0, False: 12.0k]
  ------------------
  991|       |
  992|  12.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  12.0k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  23.3k|        {
  998|  23.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  23.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  23.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  23.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  23.3k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 909, False: 22.4k]
  ------------------
 1005|       |
 1006|  23.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  23.3k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|  97.6k|        {
 1012|  97.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|  97.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|  97.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|  97.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|  97.6k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|  97.6k|            processor.SetFPSRValue(new_value);
 1021|  97.6k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|   190k|        {
 1026|   190k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|   190k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|   190k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|   190k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|   190k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|   190k|            processor.SetFPSRValue(new_value);
 1035|   190k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|  11.7k|        {
 1040|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 11.7k, False: 1]
  ------------------
 1048|       |
 1049|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  22.7k|        {
 1055|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  22.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  22.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 22.7k, False: 0]
  ------------------
 1062|       |
 1063|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  22.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  16.4k|        {
 1069|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  16.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  16.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  16.4k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 16.4k, False: 0]
  ------------------
 1077|       |
 1078|  16.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  16.4k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|  97.2k|        {
 1084|  97.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|  97.2k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|  97.2k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|  97.2k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|  97.2k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 85.7k, False: 11.5k]
  ------------------
 1091|       |
 1092|  97.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|  97.2k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  28.8k|        {
 1098|  28.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  28.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  28.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  28.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  28.8k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  28.8k|            processor.SetFPSRValue(new_value);
 1107|  28.8k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  16.8k|        {
 1112|  16.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  16.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  16.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  16.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  16.8k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  16.8k|            processor.SetFPSRValue(new_value);
 1121|  16.8k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  14.5k|        {
 1126|  14.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  14.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  14.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  14.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  14.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  14.5k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 14.5k, False: 0]
  ------------------
 1134|       |
 1135|  14.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  14.5k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|   168k|        {
 1141|   168k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|   168k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|   168k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|   168k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|   168k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 166k, False: 2.08k]
  ------------------
 1148|       |
 1149|   168k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|   168k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  17.4k|        {
 1155|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  17.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  17.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  17.4k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 17.4k, False: 0]
  ------------------
 1163|       |
 1164|  17.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  17.4k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  29.3k|        {
 1170|  29.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  29.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  29.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  29.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  29.3k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 29.3k, False: 0]
  ------------------
 1177|       |
 1178|  29.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  29.3k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  17.9k|        {
 1184|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  17.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  17.9k|            processor.SetFPSRValue(new_value);
 1193|  17.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  28.2k|        {
 1198|  28.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  28.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  28.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  28.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  28.2k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  28.2k|            processor.SetFPSRValue(new_value);
 1207|  28.2k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  16.4k|        {
 1212|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  16.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  16.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  16.4k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 14.9k, False: 1.42k]
  ------------------
 1220|       |
 1221|  16.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  16.4k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  35.1k|        {
 1227|  35.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  35.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  35.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  35.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  35.1k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 35.1k, False: 0]
  ------------------
 1234|       |
 1235|  35.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  35.1k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|  94.8k|        {
 1241|  94.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|  94.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|  94.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|  94.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|  94.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|  94.8k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 84.6k, False: 10.1k]
  ------------------
 1249|       |
 1250|  94.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|  94.8k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  27.6k|        {
 1256|  27.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  27.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  27.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  27.6k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  27.6k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 27.6k, False: 0]
  ------------------
 1263|       |
 1264|  27.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  27.6k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  28.7k|        {
 1270|  28.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  28.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  28.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  28.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  28.7k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  28.7k|            processor.SetFPSRValue(new_value);
 1279|  28.7k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  19.4k|        {
 1284|  19.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  19.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  19.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  19.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  19.4k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  19.4k|            processor.SetFPSRValue(new_value);
 1293|  19.4k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  18.6k|        {
 1298|  18.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  18.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  18.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  18.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  18.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  18.6k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 8.33k, False: 10.3k]
  ------------------
 1306|       |
 1307|  18.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  18.6k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  30.0k|        {
 1313|  30.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  30.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  30.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  30.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  30.0k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 0, False: 30.0k]
  ------------------
 1320|       |
 1321|  30.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  30.0k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  22.7k|        {
 1327|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  22.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  22.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  22.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 3.33k, False: 19.4k]
  ------------------
 1335|       |
 1336|  22.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  22.7k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  31.5k|        {
 1342|  31.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  31.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  31.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  31.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  31.5k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 3.56k, False: 27.9k]
  ------------------
 1349|       |
 1350|  31.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  31.5k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  21.5k|        {
 1356|  21.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  21.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  21.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  21.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  21.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  21.5k|            processor.SetFPSRValue(new_value);
 1365|  21.5k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  22.5k|        {
 1370|  22.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  22.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  22.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  22.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  22.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  22.5k|            processor.SetFPSRValue(new_value);
 1379|  22.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  58.9k|        {
 1384|  58.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  58.9k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  58.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  58.9k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 36.1k, False: 22.8k]
  ------------------
 1390|  36.1k|            {
 1391|  36.1k|                JumpToLabel(processor, jump_label.label_name);
 1392|  36.1k|            }
 1393|  58.9k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  54.3k|        {
 1398|  54.3k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  54.3k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  54.3k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  54.3k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 26.3k, False: 27.9k]
  ------------------
 1404|  26.3k|            {
 1405|  26.3k|                JumpToLabel(processor, jump_label.label_name);
 1406|  26.3k|            }
 1407|  54.3k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  41.6k|        {
 1412|  41.6k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  41.6k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  41.6k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 23.0k, False: 18.6k]
  ------------------
 1417|  23.0k|            {
 1418|  23.0k|                JumpToLabel(processor, jump_label.label_name);
 1419|  23.0k|            }
 1420|  41.6k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   490k|        {
 1425|   490k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   490k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   490k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 463k, False: 26.9k]
  ------------------
 1430|   463k|            {
 1431|   463k|                JumpToLabel(processor, jump_label.label_name);
 1432|   463k|            }
 1433|   490k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|  52.5k|        {
 1438|  52.5k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|  52.5k|            JumpToLabel(processor, jump_label.label_name);
 1441|  52.5k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|   123k|        {
 1446|   123k|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|   123k|            JumpToRegister(processor, jump_register.register_id);
 1449|   123k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  34.4k|        {
 1454|  34.4k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  34.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  34.4k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  34.4k|            JumpToLabel(processor, jump_label.label_name);
 1460|  34.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|   867k|        {
 1465|   867k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|   867k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|   867k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|   867k|            JumpToRegister(processor, jump_register.register_id);
 1471|   867k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  15.0k|        {
 1476|  15.0k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  15.0k|            phi::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  15.0k|            imm_value = static_cast<phi::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  15.0k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  15.0k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|      1|        {
 1487|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 0, False: 1]
  ------------------
 1492|      0|            {
 1493|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      0|                return;
 1495|      0|            }
 1496|       |
 1497|      1|            phi::i32 address = optional_address.value();
 1498|       |
 1499|      1|            auto optional_value =
 1500|      1|                    processor.GetMemory().LoadByte(static_cast<phi::size_t>(address.unsafe()));
 1501|       |
 1502|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 1, False: 0]
  ------------------
 1503|      1|            {
 1504|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      1|                return;
 1507|      1|            }
 1508|       |
 1509|      0|            phi::i32 value = optional_value.value();
 1510|       |
 1511|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|      1|        {
 1517|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 0, False: 1]
  ------------------
 1522|      0|            {
 1523|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      0|                return;
 1525|      0|            }
 1526|       |
 1527|      1|            phi::i32 address = optional_address.value();
 1528|       |
 1529|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|      1|                    static_cast<phi::size_t>(address.unsafe()));
 1531|       |
 1532|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 1, False: 0]
  ------------------
 1533|      1|            {
 1534|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      1|                return;
 1537|      1|            }
 1538|       |
 1539|      0|            phi::u32 value = optional_value.value();
 1540|       |
 1541|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|      1|        {
 1547|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 0, False: 1]
  ------------------
 1552|      0|            {
 1553|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      0|                return;
 1555|      0|            }
 1556|       |
 1557|      1|            phi::i32 address = optional_address.value();
 1558|       |
 1559|      1|            auto optional_value =
 1560|      1|                    processor.GetMemory().LoadHalfWord(static_cast<phi::size_t>(address.unsafe()));
 1561|       |
 1562|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 1, False: 0]
  ------------------
 1563|      1|            {
 1564|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      1|                return;
 1567|      1|            }
 1568|       |
 1569|      0|            phi::i32 value = optional_value.value();
 1570|       |
 1571|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|      3|        {
 1577|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 0, False: 3]
  ------------------
 1582|      0|            {
 1583|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      0|                return;
 1585|      0|            }
 1586|       |
 1587|      3|            phi::i32 address = optional_address.value();
 1588|       |
 1589|      3|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|      3|                    static_cast<phi::size_t>(address.unsafe()));
 1591|       |
 1592|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 3, False: 0]
  ------------------
 1593|      3|            {
 1594|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      3|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      3|                return;
 1597|      3|            }
 1598|       |
 1599|      0|            phi::u32 value = optional_value.value();
 1600|       |
 1601|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|      1|        {
 1607|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 0, False: 1]
  ------------------
 1612|      0|            {
 1613|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      0|                return;
 1615|      0|            }
 1616|       |
 1617|      1|            phi::i32 address = optional_address.value();
 1618|       |
 1619|      1|            auto optional_value =
 1620|      1|                    processor.GetMemory().LoadWord(static_cast<phi::size_t>(address.unsafe()));
 1621|       |
 1622|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 1, False: 0]
  ------------------
 1623|      1|            {
 1624|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      1|                return;
 1627|      1|            }
 1628|       |
 1629|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|      1|        {
 1635|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 0, False: 1]
  ------------------
 1640|      0|            {
 1641|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      0|                return;
 1643|      0|            }
 1644|       |
 1645|      1|            phi::i32 address = optional_address.value();
 1646|       |
 1647|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|      1|                    static_cast<phi::size_t>(address.unsafe()));
 1649|       |
 1650|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 1, False: 0]
  ------------------
 1651|      1|            {
 1652|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      1|                return;
 1655|      1|            }
 1656|       |
 1657|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|      1|        {
 1663|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 0, False: 1]
  ------------------
 1668|      0|            {
 1669|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      0|                return;
 1671|      0|            }
 1672|       |
 1673|      1|            phi::i32 address = optional_address.value();
 1674|       |
 1675|      1|            auto optional_value =
 1676|      1|                    processor.GetMemory().LoadFloat(static_cast<phi::size_t>(address.unsafe()));
 1677|       |
 1678|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 1, False: 0]
  ------------------
 1679|      1|            {
 1680|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      1|                return;
 1683|      1|            }
 1684|       |
 1685|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|      1|        {
 1691|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 0, False: 1]
  ------------------
 1696|      0|            {
 1697|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      0|                return;
 1699|      0|            }
 1700|       |
 1701|      1|            phi::i32 address = optional_address.value();
 1702|       |
 1703|      1|            auto optional_value =
 1704|      1|                    processor.GetMemory().LoadDouble(static_cast<phi::size_t>(address.unsafe()));
 1705|       |
 1706|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 1, False: 0]
  ------------------
 1707|      1|            {
 1708|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      1|                return;
 1711|      1|            }
 1712|       |
 1713|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  29.7k|        {
 1939|  29.7k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  29.7k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  29.7k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  29.7k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  29.7k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  12.1k|        {
 1950|  12.1k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  12.1k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  12.1k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  12.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  12.1k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1960|  20.2k|        {
 1961|  20.2k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1962|  20.2k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1963|       |
 1964|  20.2k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1965|       |
 1966|  20.2k|            const phi::int32_t moved_value = *reinterpret_cast<const phi::int32_t*>(&source_value);
 1967|       |
 1968|  20.2k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1969|  20.2k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1973|  24.2k|        {
 1974|  24.2k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1975|  24.2k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1976|       |
 1977|  24.2k|            const phi::int32_t source_value =
 1978|  24.2k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1979|       |
 1980|  24.2k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1981|       |
 1982|  24.2k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1983|  24.2k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  14.2k|        {
 1988|  14.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  14.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  14.2k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  14.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  14.2k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  23.2k|        {
 1999|  23.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  23.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  23.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  23.2k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2004|  23.2k|            const float        converted_value_float =
 2005|  23.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  23.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  23.2k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  10.2k|        {
 2013|  10.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  10.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  10.2k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  10.2k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  10.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  10.2k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  16.2k|        {
 2025|  16.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  16.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  16.2k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  16.2k|            const phi::int32_t converted_value_int = static_cast<phi::int32_t>(src_value);
 2030|  16.2k|            const float        converted_value_float =
 2031|  16.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  16.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  16.2k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  20.2k|        {
 2039|  20.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  20.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  20.2k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  20.2k|            const phi::int32_t converted_value_int =
 2044|  20.2k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2045|  20.2k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  20.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  20.2k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  11.7k|        {
 2053|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  11.7k|            const phi::int32_t converted_value_int =
 2058|  11.7k|                    *reinterpret_cast<const phi::int32_t*>(&src_value);
 2059|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      8|        {
 2073|      8|            processor.Raise(Exception::Halt);
 2074|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|   491k|        {
 2079|       |            /* Do nothing */
 2080|   491k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   272k|    {
  169|   272k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   272k|        SafeWriteInteger(processor, dest_reg, res);
  172|   272k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|   454k|    {
  124|   454k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|   454k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|   454k|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 24.9k, False: 429k]
  ------------------
  129|  24.9k|        {
  130|  24.9k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  24.9k|            value = max + (value % (min - 1));
  133|  24.9k|        }
  134|       |        // Check for overflow
  135|   429k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 19.6k, False: 409k]
  ------------------
  136|  19.6k|        {
  137|  19.6k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  19.6k|            value = min + (value % (max + 1));
  140|  19.6k|        }
  141|       |
  142|   454k|        PHI_ASSERT(value >= min);
  143|   454k|        PHI_ASSERT(value <= max);
  144|       |
  145|   454k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<phi::int32_t>(value.unsafe()));
  146|   454k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  79.4k|    {
  177|  79.4k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  79.4k|        SafeWriteInteger(processor, dest_reg, res);
  180|  79.4k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   301k|    {
  151|   301k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   301k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 29.6k, False: 271k]
  ------------------
  155|  29.6k|        {
  156|  29.6k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  29.6k|            value %= max + 1u;
  159|  29.6k|        }
  160|       |
  161|   301k|        PHI_ASSERT(value <= max);
  162|       |
  163|   301k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<phi::uint32_t>(value.unsafe()));
  164|   301k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|  76.5k|    {
  185|  76.5k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|  76.5k|        SafeWriteInteger(processor, dest_reg, res);
  188|  76.5k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|   145k|    {
  193|   145k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|   145k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 45.0k, False: 100k]
  ------------------
  196|  45.0k|        {
  197|  45.0k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  45.0k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  45.0k|            SafeWriteInteger(processor, dest_reg, res);
  201|  45.0k|            return;
  202|  45.0k|        }
  203|       |
  204|   100k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|   100k|        SafeWriteInteger(processor, dest_reg, res);
  207|   100k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|  99.3k|    {
  212|  99.3k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|  99.3k|        SafeWriteInteger(processor, dest_reg, res);
  215|  99.3k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|  66.2k|    {
  220|  66.2k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|  66.2k|        SafeWriteInteger(processor, dest_reg, res);
  223|  66.2k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  6.18k|    {
  228|  6.18k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 6.17k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  6.17k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  6.17k|        SafeWriteInteger(processor, dest_reg, res);
  237|  6.17k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  9.50k|    {
  242|  9.50k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 2, False: 9.50k]
  ------------------
  243|      2|        {
  244|      2|            processor.Raise(Exception::DivideByZero);
  245|      2|            return;
  246|      2|        }
  247|       |
  248|  9.50k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  9.50k|        SafeWriteInteger(processor, dest_reg, res);
  251|  9.50k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   194k|    {
  325|   194k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 9.75k, False: 184k]
  ------------------
  326|  9.75k|        {
  327|  9.75k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  9.75k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  9.75k|            return;
  332|  9.75k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   184k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 24.2k, False: 160k]
  ------------------
  336|  24.2k|        {
  337|  24.2k|            processor.Raise(Exception::BadShift);
  338|  24.2k|            return;
  339|  24.2k|        }
  340|       |
  341|   160k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   160k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   160k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|  94.3k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|  94.3k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 6.76k, False: 87.5k]
  ------------------
  258|  6.76k|        {
  259|  6.76k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  6.76k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  6.76k|            return;
  264|  6.76k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|  87.5k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 48.6k, False: 38.9k]
  ------------------
  268|  48.6k|        {
  269|  48.6k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  48.6k|            return;
  271|  48.6k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  38.9k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 5.95k, False: 32.9k]
  ------------------
  275|  5.95k|        {
  276|  5.95k|            processor.Raise(Exception::BadShift);
  277|  5.95k|            return;
  278|  5.95k|        }
  279|       |
  280|  32.9k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  32.9k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  32.9k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  32.9k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  32.9k|    {
   29|  32.9k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  32.9k|        return value & ~(-1 << (32 - n));
   32|  32.9k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   104k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   104k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 8.66k, False: 95.9k]
  ------------------
  292|  8.66k|        {
  293|  8.66k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  8.66k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 3.75k, False: 4.90k]
  ------------------
  297|  3.75k|            {
  298|       |                // Set every byte to 1
  299|  3.75k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  3.75k|            }
  301|  4.90k|            else
  302|  4.90k|            {
  303|       |                // Set every byte to 0
  304|  4.90k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  4.90k|            }
  306|  8.66k|            return;
  307|  8.66k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|  95.9k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 21.6k, False: 74.3k]
  ------------------
  311|  21.6k|        {
  312|  21.6k|            processor.Raise(Exception::BadShift);
  313|  21.6k|            return;
  314|  21.6k|        }
  315|       |
  316|  74.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  74.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  74.3k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|   635k|    {
   38|       |        // Lookup the label
   39|   635k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgram();
   40|   635k|        PHI_ASSERT(program != nullptr);
   41|   635k|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|   635k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 48, False: 635k]
  ------------------
   44|     48|        {
   45|     48|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     48|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|     48|            processor.Raise(Exception::UnknownLabel);
   47|     48|            return;
   48|     48|        }
   49|       |
   50|   635k|        const phi::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|   635k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|   635k|        processor.SetNextProgramCounter(jump_point);
   55|   635k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|   991k|    {
   59|   991k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|   991k|        phi::u32 max_address =
   62|   991k|                static_cast<phi::uint32_t>(processor.GetCurrentProgram()->m_Instructions.size());
   63|   991k|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 11, False: 991k]
  ------------------
   64|     11|        {
   65|     11|            processor.Raise(Exception::AddressOutOfBounds);
   66|     11|            return;
   67|     11|        }
   68|       |
   69|   991k|        processor.SetNextProgramCounter(address.unsafe());
   70|   991k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|     10|    {
  100|     10|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 10, False: 0]
  ------------------
  101|     10|        {
  102|     10|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|     10|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 0, False: 10]
  ------------------
  105|      0|            {
  106|      0|                return {};
  107|      0|            }
  108|       |
  109|     10|            return imm_value.signed_value;
  110|     10|        }
  111|       |
  112|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|     10|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  5.42M|    {
   12|  5.42M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  5.42M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  5.42M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  5.42M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  5.42M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  5.42M|                   "Unexpected argument type for arg1");
   22|  5.42M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  5.42M|                   "Unexpected argument type for arg2");
   24|  5.42M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  5.42M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  5.42M|        m_Executor(processor, arg1, arg2, arg3);
   29|  5.42M|    }

_ZN3dlx21LookUpInstructionInfoENS_6OpCodeE:
  449|  25.9k|    {
  450|  25.9k|        return instruction_table.at(static_cast<phi::size_t>(instruction));
  451|  25.9k|    }

_ZN3dlx11IntRegisterC2Ev:
   12|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   15|  1.37M|    {
   16|  1.37M|        m_ValueSigned = val;
   17|  1.37M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   20|  1.45M|    {
   21|  1.45M|        m_ValueUnsigned = val;
   22|  1.45M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   25|  2.59M|    {
   26|  2.59M|        return m_ValueSigned;
   27|  2.59M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   30|  2.10M|    {
   31|  2.10M|        return m_ValueUnsigned;
   32|  2.10M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   35|  3.25M|    {
   36|  3.25M|        return m_IsReadOnly;
   37|  3.25M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   40|      1|    {
   41|      1|        m_IsReadOnly = read_only;
   42|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|      1|    {
   13|      1|        m_Values.resize(starting_size.unsafe());
   14|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|      1|    {
   18|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 1, False: 0]
  ------------------
   19|      1|        {
   20|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|      1|            return {};
   22|      1|        }
   23|       |
   24|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|      0|        return m_Values[raw_address].signed_value;
   27|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|      1|    {
   31|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 1, False: 0]
  ------------------
   32|      1|        {
   33|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|      1|            return {};
   35|      1|        }
   36|       |
   37|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|      0|        return m_Values[raw_address].unsigned_value;
   39|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|      1|    {
   43|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 1, False: 0]
  ------------------
   44|      1|        {
   45|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|      1|            return {};
   47|      1|        }
   48|       |
   49|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|        {
   53|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|      0|            return {};
   55|      0|        }
   56|       |
   57|      0|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|      3|    {
   62|      3|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 3, False: 0]
  ------------------
   63|      3|        {
   64|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|      3|            return {};
   66|      3|        }
   67|       |
   68|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 0, False: 0]
  ------------------
   71|      0|        {
   72|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|      0|            return {};
   74|      0|        }
   75|       |
   76|      0|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|      1|    {
   81|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 1, False: 0]
  ------------------
   82|      1|        {
   83|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|      1|            return {};
   85|      1|        }
   86|       |
   87|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 0, False: 0]
  ------------------
   90|      0|        {
   91|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|      0|            return {};
   93|      0|        }
   94|       |
   95|      0|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|      1|    {
  100|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 1, False: 0]
  ------------------
  101|      1|        {
  102|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      1|            return {};
  104|      1|        }
  105|       |
  106|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 0, False: 0]
  ------------------
  109|      0|        {
  110|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|      0|            return {};
  112|      0|        }
  113|       |
  114|      0|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|      1|    {
  119|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 1, False: 0]
  ------------------
  120|      1|        {
  121|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|      1|            return {};
  123|      1|        }
  124|       |
  125|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 0, False: 0]
  ------------------
  128|      0|        {
  129|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|      0|            return {};
  131|      0|        }
  132|       |
  133|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|      1|    {
  138|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 1, False: 0]
  ------------------
  139|      1|        {
  140|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|      1|            return {};
  142|      1|        }
  143|       |
  144|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 0, False: 0]
  ------------------
  147|      0|        {
  148|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|      0|            return {};
  150|      0|        }
  151|       |
  152|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|     10|    {
  265|       |        // Cannot access anything before the starting address
  266|     10|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 10, False: 0]
  ------------------
  267|     10|        {
  268|     10|            return false;
  269|     10|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 0, False: 0]
  ------------------
  273|      0|                                             address.unsafe(), size.unsafe()))
  274|      0|        {
  275|      0|            return false;
  276|      0|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 0, False: 0]
  ------------------
  280|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|      0|        {
  282|      0|            return false;
  283|      0|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 0, False: 0]
  ------------------
  287|      0|        {
  288|      0|            return false;
  289|      0|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|      0|        return true;
  293|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  4.29k|    {
  303|  4.29k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 4.29M, False: 4.29k]
  ------------------
  304|  4.29M|        {
  305|  4.29M|            val.signed_value = 0;
  306|  4.29M|        }
  307|  4.29k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   21|  80.8k|    {
   22|  80.8k|        switch (token.length().unsafe())
   23|  80.8k|        {
   24|       |            // 1 character OpCodes
   25|  10.6k|            case 1: {
  ------------------
  |  Branch (25:13): [True: 10.6k, False: 70.2k]
  ------------------
   26|  10.6k|                const char c1 = token[0u];
   27|       |
   28|  10.6k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (28:21): [True: 4.22k, False: 6.39k]
  ------------------
   29|  4.22k|                {
   30|  4.22k|                    return OpCode::J;
   31|  4.22k|                }
   32|  6.39k|                break;
   33|  10.6k|            }
   34|       |
   35|       |            // 2 character OpCodes
   36|  9.46k|            case 2: {
  ------------------
  |  Branch (36:13): [True: 9.46k, False: 71.3k]
  ------------------
   37|  9.46k|                const char c1 = token[0u];
   38|  9.46k|                const char c2 = token[1u];
   39|       |
   40|  9.46k|                switch (c1)
  ------------------
  |  Branch (40:25): [True: 5.26k, False: 4.19k]
  ------------------
   41|  9.46k|                {
   42|    202|                    case 'J':
  ------------------
  |  Branch (42:21): [True: 202, False: 9.26k]
  ------------------
   43|    383|                    case 'j':
  ------------------
  |  Branch (43:21): [True: 181, False: 9.28k]
  ------------------
   44|    383|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (44:29): [True: 171, False: 212]
  ------------------
   45|    171|                        {
   46|    171|                            return OpCode::JR;
   47|    171|                        }
   48|    212|                        break;
   49|       |
   50|    818|                    case 'L':
  ------------------
  |  Branch (50:21): [True: 818, False: 8.64k]
  ------------------
   51|  1.23k|                    case 'l':
  ------------------
  |  Branch (51:21): [True: 417, False: 9.04k]
  ------------------
   52|  1.23k|                        switch (c2)
  ------------------
  |  Branch (52:33): [True: 69, False: 1.16k]
  ------------------
   53|  1.23k|                        {
   54|     67|                            case 'B':
  ------------------
  |  Branch (54:29): [True: 67, False: 1.16k]
  ------------------
   55|    144|                            case 'b':
  ------------------
  |  Branch (55:29): [True: 77, False: 1.15k]
  ------------------
   56|    144|                                return OpCode::LB;
   57|     67|                            case 'D':
  ------------------
  |  Branch (57:29): [True: 67, False: 1.16k]
  ------------------
   58|    133|                            case 'd':
  ------------------
  |  Branch (58:29): [True: 66, False: 1.16k]
  ------------------
   59|    133|                                return OpCode::LD;
   60|     67|                            case 'F':
  ------------------
  |  Branch (60:29): [True: 67, False: 1.16k]
  ------------------
   61|    336|                            case 'f':
  ------------------
  |  Branch (61:29): [True: 269, False: 966]
  ------------------
   62|    336|                                return OpCode::LF;
   63|     80|                            case 'H':
  ------------------
  |  Branch (63:29): [True: 80, False: 1.15k]
  ------------------
   64|    146|                            case 'h':
  ------------------
  |  Branch (64:29): [True: 66, False: 1.16k]
  ------------------
   65|    146|                                return OpCode::LH;
   66|    341|                            case 'W':
  ------------------
  |  Branch (66:29): [True: 341, False: 894]
  ------------------
   67|    407|                            case 'w':
  ------------------
  |  Branch (67:29): [True: 66, False: 1.16k]
  ------------------
   68|    407|                                return OpCode::LW;
   69|  1.23k|                        }
   70|     69|                        break;
   71|    210|                    case 'O':
  ------------------
  |  Branch (71:21): [True: 210, False: 9.25k]
  ------------------
   72|  1.05k|                    case 'o':
  ------------------
  |  Branch (72:21): [True: 848, False: 8.61k]
  ------------------
   73|  1.05k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (73:29): [True: 284, False: 774]
  ------------------
   74|    284|                        {
   75|    284|                            return OpCode::OR;
   76|    284|                        }
   77|    774|                        break;
   78|    956|                    case 'S':
  ------------------
  |  Branch (78:21): [True: 956, False: 8.51k]
  ------------------
   79|  1.52k|                    case 's':
  ------------------
  |  Branch (79:21): [True: 566, False: 8.90k]
  ------------------
   80|  1.52k|                        switch (c2)
  ------------------
  |  Branch (80:33): [True: 74, False: 1.44k]
  ------------------
   81|  1.52k|                        {
   82|    206|                            case 'B':
  ------------------
  |  Branch (82:29): [True: 206, False: 1.31k]
  ------------------
   83|    274|                            case 'b':
  ------------------
  |  Branch (83:29): [True: 68, False: 1.45k]
  ------------------
   84|    274|                                return OpCode::SB;
   85|     68|                            case 'D':
  ------------------
  |  Branch (85:29): [True: 68, False: 1.45k]
  ------------------
   86|    387|                            case 'd':
  ------------------
  |  Branch (86:29): [True: 319, False: 1.20k]
  ------------------
   87|    387|                                return OpCode::SD;
   88|    408|                            case 'F':
  ------------------
  |  Branch (88:29): [True: 408, False: 1.11k]
  ------------------
   89|    474|                            case 'f':
  ------------------
  |  Branch (89:29): [True: 66, False: 1.45k]
  ------------------
   90|    474|                                return OpCode::SF;
   91|     66|                            case 'H':
  ------------------
  |  Branch (91:29): [True: 66, False: 1.45k]
  ------------------
   92|    178|                            case 'h':
  ------------------
  |  Branch (92:29): [True: 112, False: 1.41k]
  ------------------
   93|    178|                                return OpCode::SH;
   94|     68|                            case 'w':
  ------------------
  |  Branch (94:29): [True: 68, False: 1.45k]
  ------------------
   95|    135|                            case 'W':
  ------------------
  |  Branch (95:29): [True: 67, False: 1.45k]
  ------------------
   96|    135|                                return OpCode::SW;
   97|  1.52k|                        }
   98|     74|                        break;
   99|  9.46k|                }
  100|  6.39k|                break;
  101|  9.46k|            }
  102|       |
  103|       |            // 3 character OpCodes
  104|  21.2k|            case 3: {
  ------------------
  |  Branch (104:13): [True: 21.2k, False: 59.5k]
  ------------------
  105|  21.2k|                const char c1 = token[0u];
  106|  21.2k|                const char c2 = token[1u];
  107|  21.2k|                const char c3 = token[2u];
  108|       |
  109|  21.2k|                switch (c1)
  ------------------
  |  Branch (109:25): [True: 3.24k, False: 18.0k]
  ------------------
  110|  21.2k|                {
  111|  2.09k|                    case 'A':
  ------------------
  |  Branch (111:21): [True: 2.09k, False: 19.1k]
  ------------------
  112|  2.20k|                    case 'a':
  ------------------
  |  Branch (112:21): [True: 102, False: 21.1k]
  ------------------
  113|  2.20k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (113:29): [True: 1.58k, False: 614]
  |  Branch (113:29): [True: 1.47k, False: 721]
  |  Branch (113:45): [True: 1.47k, False: 107]
  ------------------
  114|  1.47k|                        {
  115|  1.47k|                            return OpCode::ADD;
  116|  1.47k|                        }
  117|    721|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (117:34): [True: 598, False: 123]
  |  Branch (117:34): [True: 146, False: 575]
  |  Branch (117:50): [True: 146, False: 452]
  ------------------
  118|    146|                        {
  119|    146|                            return OpCode::AND;
  120|    146|                        }
  121|    575|                        break;
  122|       |
  123|    575|                    case 'D':
  ------------------
  |  Branch (123:21): [True: 142, False: 21.1k]
  ------------------
  124|    280|                    case 'd':
  ------------------
  |  Branch (124:21): [True: 138, False: 21.1k]
  ------------------
  125|    280|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (125:29): [True: 214, False: 66]
  |  Branch (125:29): [True: 148, False: 132]
  |  Branch (125:45): [True: 148, False: 66]
  ------------------
  126|    148|                        {
  127|    148|                            return OpCode::DIV;
  128|    148|                        }
  129|    132|                        break;
  130|       |
  131|    499|                    case 'E':
  ------------------
  |  Branch (131:21): [True: 499, False: 20.7k]
  ------------------
  132|    582|                    case 'e':
  ------------------
  |  Branch (132:21): [True: 83, False: 21.2k]
  ------------------
  133|    582|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (133:29): [True: 510, False: 72]
  ------------------
  134|    510|                        {
  135|    510|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (135:33): [True: 154, False: 356]
  ------------------
  136|    154|                            {
  137|    154|                                return OpCode::EQD;
  138|    154|                            }
  139|    356|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (139:38): [True: 290, False: 66]
  ------------------
  140|    290|                            {
  141|    290|                                return OpCode::EQF;
  142|    290|                            }
  143|    510|                        }
  144|    138|                        break;
  145|       |
  146|  1.36k|                    case 'G':
  ------------------
  |  Branch (146:21): [True: 1.36k, False: 19.9k]
  ------------------
  147|  1.81k|                    case 'g':
  ------------------
  |  Branch (147:21): [True: 454, False: 20.8k]
  ------------------
  148|  1.81k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (148:29): [True: 583, False: 1.23k]
  ------------------
  149|    583|                        {
  150|    583|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (150:33): [True: 372, False: 211]
  ------------------
  151|    372|                            {
  152|    372|                                return OpCode::GED;
  153|    372|                            }
  154|    211|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (154:38): [True: 145, False: 66]
  ------------------
  155|    145|                            {
  156|    145|                                return OpCode::GEF;
  157|    145|                            }
  158|    583|                        }
  159|  1.23k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (159:34): [True: 1.16k, False: 66]
  ------------------
  160|  1.16k|                        {
  161|  1.16k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (161:33): [True: 612, False: 554]
  ------------------
  162|    612|                            {
  163|    612|                                return OpCode::GTD;
  164|    612|                            }
  165|    554|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (165:33): [True: 488, False: 66]
  ------------------
  166|    488|                            {
  167|    488|                                return OpCode::GTF;
  168|    488|                            }
  169|    554|                        }
  170|    198|                        break;
  171|       |
  172|    270|                    case 'J':
  ------------------
  |  Branch (172:21): [True: 270, False: 21.0k]
  ------------------
  173|    703|                    case 'j':
  ------------------
  |  Branch (173:21): [True: 433, False: 20.8k]
  ------------------
  174|    703|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (174:29): [True: 636, False: 67]
  |  Branch (174:29): [True: 312, False: 391]
  |  Branch (174:45): [True: 312, False: 324]
  ------------------
  175|    312|                        {
  176|    312|                            return OpCode::JAL;
  177|    312|                        }
  178|    391|                        break;
  179|       |
  180|  2.47k|                    case 'L':
  ------------------
  |  Branch (180:21): [True: 2.47k, False: 18.8k]
  ------------------
  181|  3.83k|                    case 'l':
  ------------------
  |  Branch (181:21): [True: 1.36k, False: 19.9k]
  ------------------
  182|  3.83k|                        switch (c2)
  ------------------
  |  Branch (182:33): [True: 200, False: 3.63k]
  ------------------
  183|  3.83k|                        {
  184|     67|                            case 'B':
  ------------------
  |  Branch (184:29): [True: 67, False: 3.77k]
  ------------------
  185|    466|                            case 'b':
  ------------------
  |  Branch (185:29): [True: 399, False: 3.44k]
  ------------------
  186|    466|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (186:37): [True: 261, False: 205]
  ------------------
  187|    261|                                {
  188|    261|                                    return OpCode::LBU;
  189|    261|                                }
  190|    205|                                break;
  191|       |
  192|    319|                            case 'E':
  ------------------
  |  Branch (192:29): [True: 319, False: 3.52k]
  ------------------
  193|  1.12k|                            case 'e':
  ------------------
  |  Branch (193:29): [True: 807, False: 3.03k]
  ------------------
  194|  1.12k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (194:37): [True: 286, False: 840]
  ------------------
  195|    286|                                {
  196|    286|                                    return OpCode::LED;
  197|    286|                                }
  198|    840|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (198:42): [True: 231, False: 609]
  ------------------
  199|    231|                                {
  200|    231|                                    return OpCode::LEF;
  201|    231|                                }
  202|    609|                                break;
  203|       |
  204|  1.11k|                            case 'H':
  ------------------
  |  Branch (204:29): [True: 1.11k, False: 2.72k]
  ------------------
  205|  1.44k|                            case 'h':
  ------------------
  |  Branch (205:29): [True: 326, False: 3.51k]
  ------------------
  206|  1.44k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (206:37): [True: 409, False: 1.03k]
  ------------------
  207|    409|                                {
  208|    409|                                    return OpCode::LHI;
  209|    409|                                }
  210|  1.03k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (210:42): [True: 841, False: 194]
  ------------------
  211|    841|                                {
  212|    841|                                    return OpCode::LHU;
  213|    841|                                }
  214|    194|                                break;
  215|       |
  216|    335|                            case 'T':
  ------------------
  |  Branch (216:29): [True: 335, False: 3.50k]
  ------------------
  217|    404|                            case 't':
  ------------------
  |  Branch (217:29): [True: 69, False: 3.77k]
  ------------------
  218|    404|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (218:37): [True: 174, False: 230]
  ------------------
  219|    174|                                {
  220|    174|                                    return OpCode::LTD;
  221|    174|                                }
  222|    230|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (222:42): [True: 164, False: 66]
  ------------------
  223|    164|                                {
  224|    164|                                    return OpCode::LTF;
  225|    164|                                }
  226|     66|                                break;
  227|       |
  228|     70|                            case 'W':
  ------------------
  |  Branch (228:29): [True: 70, False: 3.76k]
  ------------------
  229|    199|                            case 'w':
  ------------------
  |  Branch (229:29): [True: 129, False: 3.71k]
  ------------------
  230|    199|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (230:37): [True: 133, False: 66]
  ------------------
  231|    133|                                {
  232|    133|                                    return OpCode::LWU;
  233|    133|                                }
  234|     66|                                break;
  235|  3.83k|                        }
  236|  1.34k|                        break;
  237|       |
  238|  1.69k|                    case 'N':
  ------------------
  |  Branch (238:21): [True: 1.69k, False: 19.5k]
  ------------------
  239|  1.90k|                    case 'n':
  ------------------
  |  Branch (239:21): [True: 208, False: 21.0k]
  ------------------
  240|  1.90k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (240:29): [True: 365, False: 1.54k]
  ------------------
  241|    365|                        {
  242|    365|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (242:33): [True: 151, False: 214]
  ------------------
  243|    151|                            {
  244|    151|                                return OpCode::NED;
  245|    151|                            }
  246|    214|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (246:38): [True: 148, False: 66]
  ------------------
  247|    148|                            {
  248|    148|                                return OpCode::NEF;
  249|    148|                            }
  250|    365|                        }
  251|  1.54k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (251:34): [True: 1.47k, False: 70]
  |  Branch (251:34): [True: 1.27k, False: 264]
  |  Branch (251:50): [True: 1.27k, False: 194]
  ------------------
  252|  1.27k|                        {
  253|  1.27k|                            return OpCode::NOP;
  254|  1.27k|                        }
  255|       |
  256|    330|                        break;
  257|       |
  258|    330|                    case 'O':
  ------------------
  |  Branch (258:21): [True: 82, False: 21.2k]
  ------------------
  259|    807|                    case 'o':
  ------------------
  |  Branch (259:21): [True: 725, False: 20.5k]
  ------------------
  260|    807|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (260:29): [True: 598, False: 209]
  |  Branch (260:29): [True: 276, False: 531]
  |  Branch (260:45): [True: 276, False: 322]
  ------------------
  261|    276|                        {
  262|    276|                            return OpCode::ORI;
  263|    276|                        }
  264|    531|                        break;
  265|       |
  266|  4.94k|                    case 'S':
  ------------------
  |  Branch (266:21): [True: 4.94k, False: 16.3k]
  ------------------
  267|  5.66k|                    case 's':
  ------------------
  |  Branch (267:21): [True: 717, False: 20.5k]
  ------------------
  268|  5.66k|                        switch (c2)
  ------------------
  |  Branch (268:33): [True: 66, False: 5.59k]
  ------------------
  269|  5.66k|                        {
  270|     71|                            case 'B':
  ------------------
  |  Branch (270:29): [True: 71, False: 5.59k]
  ------------------
  271|    203|                            case 'b':
  ------------------
  |  Branch (271:29): [True: 132, False: 5.53k]
  ------------------
  272|    203|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (272:37): [True: 137, False: 66]
  ------------------
  273|    137|                                {
  274|    137|                                    return OpCode::SBU;
  275|    137|                                }
  276|     66|                                break;
  277|       |
  278|     86|                            case 'E':
  ------------------
  |  Branch (278:29): [True: 86, False: 5.57k]
  ------------------
  279|    218|                            case 'e':
  ------------------
  |  Branch (279:29): [True: 132, False: 5.53k]
  ------------------
  280|    218|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (280:37): [True: 152, False: 66]
  ------------------
  281|    152|                                {
  282|    152|                                    return OpCode::SEQ;
  283|    152|                                }
  284|     66|                                break;
  285|       |
  286|  1.05k|                            case 'G':
  ------------------
  |  Branch (286:29): [True: 1.05k, False: 4.61k]
  ------------------
  287|  1.44k|                            case 'g':
  ------------------
  |  Branch (287:29): [True: 390, False: 5.27k]
  ------------------
  288|  1.44k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (288:37): [True: 333, False: 1.11k]
  ------------------
  289|    333|                                {
  290|    333|                                    return OpCode::SGE;
  291|    333|                                }
  292|  1.11k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (292:42): [True: 788, False: 322]
  ------------------
  293|    788|                                {
  294|    788|                                    return OpCode::SGT;
  295|    788|                                }
  296|    322|                                break;
  297|       |
  298|    322|                            case 'H':
  ------------------
  |  Branch (298:29): [True: 195, False: 5.47k]
  ------------------
  299|    329|                            case 'h':
  ------------------
  |  Branch (299:29): [True: 134, False: 5.53k]
  ------------------
  300|    329|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (300:37): [True: 260, False: 69]
  ------------------
  301|    260|                                {
  302|    260|                                    return OpCode::SHU;
  303|    260|                                }
  304|     69|                                break;
  305|       |
  306|  1.26k|                            case 'L':
  ------------------
  |  Branch (306:29): [True: 1.26k, False: 4.39k]
  ------------------
  307|  1.58k|                            case 'l':
  ------------------
  |  Branch (307:29): [True: 318, False: 5.34k]
  ------------------
  308|  1.58k|                                switch (c3)
  ------------------
  |  Branch (308:41): [True: 66, False: 1.52k]
  ------------------
  309|  1.58k|                                {
  310|    773|                                    case 'A':
  ------------------
  |  Branch (310:37): [True: 773, False: 814]
  ------------------
  311|    839|                                    case 'a':
  ------------------
  |  Branch (311:37): [True: 66, False: 1.52k]
  ------------------
  312|    839|                                        return OpCode::SLA;
  313|       |
  314|     82|                                    case 'E':
  ------------------
  |  Branch (314:37): [True: 82, False: 1.50k]
  ------------------
  315|    148|                                    case 'e':
  ------------------
  |  Branch (315:37): [True: 66, False: 1.52k]
  ------------------
  316|    148|                                        return OpCode::SLE;
  317|       |
  318|    263|                                    case 'L':
  ------------------
  |  Branch (318:37): [True: 263, False: 1.32k]
  ------------------
  319|    331|                                    case 'l':
  ------------------
  |  Branch (319:37): [True: 68, False: 1.51k]
  ------------------
  320|    331|                                        return OpCode::SLL;
  321|       |
  322|     84|                                    case 'T':
  ------------------
  |  Branch (322:37): [True: 84, False: 1.50k]
  ------------------
  323|    203|                                    case 't':
  ------------------
  |  Branch (323:37): [True: 119, False: 1.46k]
  ------------------
  324|    203|                                        return OpCode::SLT;
  325|  1.58k|                                }
  326|     66|                                break;
  327|       |
  328|    208|                            case 'N':
  ------------------
  |  Branch (328:29): [True: 208, False: 5.45k]
  ------------------
  329|    340|                            case 'n':
  ------------------
  |  Branch (329:29): [True: 132, False: 5.53k]
  ------------------
  330|    340|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (330:37): [True: 274, False: 66]
  ------------------
  331|    274|                                {
  332|    274|                                    return OpCode::SNE;
  333|    274|                                }
  334|     66|                                break;
  335|       |
  336|    459|                            case 'R':
  ------------------
  |  Branch (336:29): [True: 459, False: 5.20k]
  ------------------
  337|    588|                            case 'r':
  ------------------
  |  Branch (337:29): [True: 129, False: 5.53k]
  ------------------
  338|    588|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (338:37): [True: 182, False: 406]
  ------------------
  339|    182|                                {
  340|    182|                                    return OpCode::SRA;
  341|    182|                                }
  342|    406|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (342:42): [True: 340, False: 66]
  ------------------
  343|    340|                                {
  344|    340|                                    return OpCode::SRL;
  345|    340|                                }
  346|     66|                                break;
  347|       |
  348|    318|                            case 'U':
  ------------------
  |  Branch (348:29): [True: 318, False: 5.34k]
  ------------------
  349|    526|                            case 'u':
  ------------------
  |  Branch (349:29): [True: 208, False: 5.45k]
  ------------------
  350|    526|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (350:37): [True: 332, False: 194]
  ------------------
  351|    332|                                {
  352|    332|                                    return OpCode::SUB;
  353|    332|                                }
  354|    194|                                break;
  355|       |
  356|    197|                            case 'W':
  ------------------
  |  Branch (356:29): [True: 197, False: 5.46k]
  ------------------
  357|    365|                            case 'w':
  ------------------
  |  Branch (357:29): [True: 168, False: 5.49k]
  ------------------
  358|    365|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (358:37): [True: 263, False: 102]
  ------------------
  359|    263|                                {
  360|    263|                                    return OpCode::SWU;
  361|    263|                                }
  362|    102|                                break;
  363|  5.66k|                        }
  364|       |
  365|  1.18k|                    case 'X':
  ------------------
  |  Branch (365:21): [True: 100, False: 21.1k]
  ------------------
  366|  1.32k|                    case 'x':
  ------------------
  |  Branch (366:21): [True: 146, False: 21.1k]
  ------------------
  367|  1.32k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (367:29): [True: 232, False: 1.09k]
  |  Branch (367:29): [True: 166, False: 1.16k]
  |  Branch (367:45): [True: 166, False: 66]
  ------------------
  368|    166|                        {
  369|    166|                            return OpCode::XOR;
  370|    166|                        }
  371|  1.16k|                        break;
  372|  21.2k|                }
  373|  8.03k|                break;
  374|  21.2k|            }
  375|       |
  376|       |            // 4 character OpCodes
  377|  28.3k|            case 4: {
  ------------------
  |  Branch (377:13): [True: 28.3k, False: 52.5k]
  ------------------
  378|  28.3k|                const char c1 = token[0u];
  379|  28.3k|                const char c2 = token[1u];
  380|  28.3k|                const char c3 = token[2u];
  381|  28.3k|                const char c4 = token[3u];
  382|       |
  383|  28.3k|                switch (c1)
  ------------------
  |  Branch (383:25): [True: 2.79k, False: 25.5k]
  ------------------
  384|  28.3k|                {
  385|  3.06k|                    case 'A':
  ------------------
  |  Branch (385:21): [True: 3.06k, False: 25.2k]
  ------------------
  386|  3.74k|                    case 'a':
  ------------------
  |  Branch (386:21): [True: 674, False: 27.6k]
  ------------------
  387|  3.74k|                        switch (c2)
  ------------------
  |  Branch (387:33): [True: 194, False: 3.54k]
  ------------------
  388|  3.74k|                        {
  389|  1.88k|                            case 'D':
  ------------------
  |  Branch (389:29): [True: 1.88k, False: 1.85k]
  ------------------
  390|  2.30k|                            case 'd':
  ------------------
  |  Branch (390:29): [True: 416, False: 3.32k]
  ------------------
  391|  2.30k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (391:37): [True: 2.23k, False: 66]
  ------------------
  392|  2.23k|                                {
  393|  2.23k|                                    switch (c4)
  ------------------
  |  Branch (393:45): [True: 194, False: 2.04k]
  ------------------
  394|  2.23k|                                    {
  395|    217|                                        case 'D':
  ------------------
  |  Branch (395:41): [True: 217, False: 2.02k]
  ------------------
  396|    283|                                        case 'd':
  ------------------
  |  Branch (396:41): [True: 66, False: 2.17k]
  ------------------
  397|    283|                                            return OpCode::ADDD;
  398|       |
  399|    210|                                        case 'F':
  ------------------
  |  Branch (399:41): [True: 210, False: 2.02k]
  ------------------
  400|    276|                                        case 'f':
  ------------------
  |  Branch (400:41): [True: 66, False: 2.17k]
  ------------------
  401|    276|                                            return OpCode::ADDF;
  402|       |
  403|  1.10k|                                        case 'I':
  ------------------
  |  Branch (403:41): [True: 1.10k, False: 1.13k]
  ------------------
  404|  1.17k|                                        case 'i':
  ------------------
  |  Branch (404:41): [True: 66, False: 2.17k]
  ------------------
  405|  1.17k|                                            return OpCode::ADDI;
  406|       |
  407|    245|                                        case 'U':
  ------------------
  |  Branch (407:41): [True: 245, False: 1.99k]
  ------------------
  408|    311|                                        case 'u':
  ------------------
  |  Branch (408:41): [True: 66, False: 2.17k]
  ------------------
  409|    311|                                            return OpCode::ADDU;
  410|  2.23k|                                    }
  411|  2.23k|                                }
  412|    260|                                break;
  413|       |
  414|    882|                            case 'N':
  ------------------
  |  Branch (414:29): [True: 882, False: 2.85k]
  ------------------
  415|  1.24k|                            case 'n':
  ------------------
  |  Branch (415:29): [True: 359, False: 3.38k]
  ------------------
  416|  1.24k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (416:37): [True: 918, False: 323]
  |  Branch (416:37): [True: 852, False: 389]
  |  Branch (416:53): [True: 852, False: 66]
  ------------------
  417|    852|                                {
  418|    852|                                    return OpCode::ANDI;
  419|    852|                                }
  420|       |
  421|    389|                                break;
  422|  3.74k|                        }
  423|    843|                        break;
  424|       |
  425|    933|                    case 'B':
  ------------------
  |  Branch (425:21): [True: 933, False: 27.4k]
  ------------------
  426|  4.30k|                    case 'b':
  ------------------
  |  Branch (426:21): [True: 3.37k, False: 24.9k]
  ------------------
  427|  4.30k|                        switch (c2)
  ------------------
  |  Branch (427:33): [True: 75, False: 4.23k]
  ------------------
  428|  4.30k|                        {
  429|     89|                            case 'E':
  ------------------
  |  Branch (429:29): [True: 89, False: 4.22k]
  ------------------
  430|    287|                            case 'e':
  ------------------
  |  Branch (430:29): [True: 198, False: 4.11k]
  ------------------
  431|    287|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (431:37): [True: 221, False: 66]
  |  Branch (431:37): [True: 155, False: 132]
  |  Branch (431:53): [True: 155, False: 66]
  ------------------
  432|    155|                                {
  433|    155|                                    return OpCode::BEQZ;
  434|    155|                                }
  435|    132|                                break;
  436|       |
  437|    739|                            case 'F':
  ------------------
  |  Branch (437:29): [True: 739, False: 3.57k]
  ------------------
  438|  1.24k|                            case 'f':
  ------------------
  |  Branch (438:29): [True: 503, False: 3.80k]
  ------------------
  439|  1.24k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (439:37): [True: 1.17k, False: 66]
  ------------------
  440|  1.17k|                                {
  441|  1.17k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (441:41): [True: 695, False: 481]
  ------------------
  442|    695|                                    {
  443|    695|                                        return OpCode::BFPF;
  444|    695|                                    }
  445|    481|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (445:46): [True: 410, False: 71]
  ------------------
  446|    410|                                    {
  447|    410|                                        return OpCode::BFPT;
  448|    410|                                    }
  449|  1.17k|                                }
  450|    137|                                break;
  451|       |
  452|  2.61k|                            case 'N':
  ------------------
  |  Branch (452:29): [True: 2.61k, False: 1.69k]
  ------------------
  453|  2.70k|                            case 'n':
  ------------------
  |  Branch (453:29): [True: 87, False: 4.22k]
  ------------------
  454|  2.70k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (454:37): [True: 2.61k, False: 89]
  |  Branch (454:37): [True: 2.38k, False: 322]
  |  Branch (454:53): [True: 2.38k, False: 233]
  ------------------
  455|  2.38k|                                {
  456|  2.38k|                                    return OpCode::BNEZ;
  457|  2.38k|                                }
  458|  4.30k|                        }
  459|    666|                        break;
  460|       |
  461|    666|                    case 'D':
  ------------------
  |  Branch (461:21): [True: 317, False: 28.0k]
  ------------------
  462|  2.02k|                    case 'd':
  ------------------
  |  Branch (462:21): [True: 1.70k, False: 26.6k]
  ------------------
  463|  2.02k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (463:29): [True: 1.82k, False: 194]
  |  Branch (463:29): [True: 1.63k, False: 388]
  |  Branch (463:45): [True: 1.63k, False: 194]
  ------------------
  464|  1.63k|                        {
  465|  1.63k|                            switch (c4)
  ------------------
  |  Branch (465:37): [True: 322, False: 1.31k]
  ------------------
  466|  1.63k|                            {
  467|     67|                                case 'D':
  ------------------
  |  Branch (467:33): [True: 67, False: 1.56k]
  ------------------
  468|    133|                                case 'd':
  ------------------
  |  Branch (468:33): [True: 66, False: 1.56k]
  ------------------
  469|    133|                                    return OpCode::DIVD;
  470|       |
  471|     67|                                case 'F':
  ------------------
  |  Branch (471:33): [True: 67, False: 1.56k]
  ------------------
  472|    133|                                case 'f':
  ------------------
  |  Branch (472:33): [True: 66, False: 1.56k]
  ------------------
  473|    133|                                    return OpCode::DIVF;
  474|       |
  475|     67|                                case 'I':
  ------------------
  |  Branch (475:33): [True: 67, False: 1.56k]
  ------------------
  476|    517|                                case 'i':
  ------------------
  |  Branch (476:33): [True: 450, False: 1.18k]
  ------------------
  477|    517|                                    return OpCode::DIVI;
  478|       |
  479|     79|                                case 'U':
  ------------------
  |  Branch (479:33): [True: 79, False: 1.55k]
  ------------------
  480|    529|                                case 'u':
  ------------------
  |  Branch (480:33): [True: 450, False: 1.18k]
  ------------------
  481|    529|                                    return OpCode::DIVU;
  482|  1.63k|                            }
  483|  1.63k|                        }
  484|    710|                        break;
  485|       |
  486|    710|                    case 'H':
  ------------------
  |  Branch (486:21): [True: 204, False: 28.1k]
  ------------------
  487|    468|                    case 'h':
  ------------------
  |  Branch (487:21): [True: 264, False: 28.0k]
  ------------------
  488|    468|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (488:29): [True: 402, False: 66]
  |  Branch (488:29): [True: 270, False: 198]
  |  Branch (488:45): [True: 336, False: 66]
  |  Branch (488:61): [True: 270, False: 66]
  ------------------
  489|    270|                        {
  490|    270|                            return OpCode::HALT;
  491|    270|                        }
  492|    198|                        break;
  493|       |
  494|    525|                    case 'J':
  ------------------
  |  Branch (494:21): [True: 525, False: 27.8k]
  ------------------
  495|  1.10k|                    case 'j':
  ------------------
  |  Branch (495:21): [True: 578, False: 27.7k]
  ------------------
  496|  1.10k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (496:29): [True: 999, False: 104]
  |  Branch (496:29): [True: 583, False: 520]
  |  Branch (496:45): [True: 805, False: 194]
  |  Branch (496:61): [True: 583, False: 222]
  ------------------
  497|    583|                        {
  498|    583|                            return OpCode::JALR;
  499|    583|                        }
  500|    520|                        break;
  501|       |
  502|  1.61k|                    case 'M':
  ------------------
  |  Branch (502:21): [True: 1.61k, False: 26.7k]
  ------------------
  503|  1.93k|                    case 'm':
  ------------------
  |  Branch (503:21): [True: 325, False: 28.0k]
  ------------------
  504|  1.93k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (504:29): [True: 1.15k, False: 783]
  |  Branch (504:29): [True: 896, False: 1.04k]
  |  Branch (504:45): [True: 896, False: 259]
  ------------------
  505|    896|                        {
  506|    896|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (506:33): [True: 285, False: 611]
  ------------------
  507|    285|                            {
  508|    285|                                return OpCode::MOVD;
  509|    285|                            }
  510|    611|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (510:38): [True: 155, False: 456]
  ------------------
  511|    155|                            {
  512|    155|                                return OpCode::MOVF;
  513|    155|                            }
  514|    896|                        }
  515|  1.04k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (515:34): [True: 676, False: 366]
  |  Branch (515:34): [True: 415, False: 627]
  |  Branch (515:50): [True: 610, False: 66]
  |  Branch (515:66): [True: 415, False: 195]
  ------------------
  516|    415|                        {
  517|    415|                            return OpCode::MULT;
  518|    415|                        }
  519|  1.08k|                        break;
  520|       |
  521|  8.66k|                    case 'S':
  ------------------
  |  Branch (521:21): [True: 8.66k, False: 19.6k]
  ------------------
  522|  10.1k|                    case 's':
  ------------------
  |  Branch (522:21): [True: 1.53k, False: 26.8k]
  ------------------
  523|  10.1k|                        switch (c2)
  ------------------
  |  Branch (523:33): [True: 103, False: 10.0k]
  ------------------
  524|  10.1k|                        {
  525|    406|                            case 'E':
  ------------------
  |  Branch (525:29): [True: 406, False: 9.79k]
  ------------------
  526|    798|                            case 'e':
  ------------------
  |  Branch (526:29): [True: 392, False: 9.80k]
  ------------------
  527|    798|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (527:37): [True: 601, False: 197]
  ------------------
  528|    601|                                {
  529|    601|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (529:41): [True: 153, False: 448]
  ------------------
  530|    153|                                    {
  531|    153|                                        return OpCode::SEQI;
  532|    153|                                    }
  533|    448|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (533:46): [True: 382, False: 66]
  ------------------
  534|    382|                                    {
  535|    382|                                        return OpCode::SEQU;
  536|    382|                                    }
  537|    601|                                }
  538|    263|                                break;
  539|       |
  540|  1.85k|                            case 'G':
  ------------------
  |  Branch (540:29): [True: 1.85k, False: 8.34k]
  ------------------
  541|  3.14k|                            case 'g':
  ------------------
  |  Branch (541:29): [True: 1.29k, False: 8.90k]
  ------------------
  542|  3.14k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (542:37): [True: 1.19k, False: 1.95k]
  ------------------
  543|  1.19k|                                {
  544|  1.19k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (544:41): [True: 945, False: 251]
  ------------------
  545|    945|                                    {
  546|    945|                                        return OpCode::SGEI;
  547|    945|                                    }
  548|    251|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (548:46): [True: 185, False: 66]
  ------------------
  549|    185|                                    {
  550|    185|                                        return OpCode::SGEU;
  551|    185|                                    }
  552|  1.19k|                                }
  553|  1.95k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (553:42): [True: 1.87k, False: 71]
  ------------------
  554|  1.87k|                                {
  555|  1.87k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (555:41): [True: 154, False: 1.72k]
  ------------------
  556|    154|                                    {
  557|    154|                                        return OpCode::SGTI;
  558|    154|                                    }
  559|  1.72k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (559:46): [True: 275, False: 1.45k]
  ------------------
  560|    275|                                    {
  561|    275|                                        return OpCode::SGTU;
  562|    275|                                    }
  563|  1.87k|                                }
  564|  1.58k|                                break;
  565|       |
  566|  1.58k|                            case 'L':
  ------------------
  |  Branch (566:29): [True: 937, False: 9.25k]
  ------------------
  567|  2.26k|                            case 'l':
  ------------------
  |  Branch (567:29): [True: 1.32k, False: 8.86k]
  ------------------
  568|  2.26k|                                switch (c3)
  ------------------
  |  Branch (568:41): [True: 67, False: 2.19k]
  ------------------
  569|  2.26k|                                {
  570|     89|                                    case 'A':
  ------------------
  |  Branch (570:37): [True: 89, False: 2.17k]
  ------------------
  571|    221|                                    case 'a':
  ------------------
  |  Branch (571:37): [True: 132, False: 2.13k]
  ------------------
  572|    221|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (572:45): [True: 154, False: 67]
  ------------------
  573|    154|                                        {
  574|    154|                                            return OpCode::SLAI;
  575|    154|                                        }
  576|     67|                                        break;
  577|       |
  578|    289|                                    case 'E':
  ------------------
  |  Branch (578:37): [True: 289, False: 1.97k]
  ------------------
  579|    871|                                    case 'e':
  ------------------
  |  Branch (579:37): [True: 582, False: 1.68k]
  ------------------
  580|    871|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (580:45): [True: 276, False: 595]
  ------------------
  581|    276|                                        {
  582|    276|                                            return OpCode::SLEI;
  583|    276|                                        }
  584|    595|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (584:50): [True: 145, False: 450]
  ------------------
  585|    145|                                        {
  586|    145|                                            return OpCode::SLEU;
  587|    145|                                        }
  588|    450|                                        break;
  589|       |
  590|    450|                                    case 'L':
  ------------------
  |  Branch (590:37): [True: 208, False: 2.05k]
  ------------------
  591|    596|                                    case 'l':
  ------------------
  |  Branch (591:37): [True: 388, False: 1.87k]
  ------------------
  592|    596|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (592:45): [True: 402, False: 194]
  ------------------
  593|    402|                                        {
  594|    402|                                            return OpCode::SLLI;
  595|    402|                                        }
  596|    194|                                        break;
  597|       |
  598|    379|                                    case 'T':
  ------------------
  |  Branch (598:37): [True: 379, False: 1.88k]
  ------------------
  599|    511|                                    case 't':
  ------------------
  |  Branch (599:37): [True: 132, False: 2.13k]
  ------------------
  600|    511|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (600:45): [True: 293, False: 218]
  ------------------
  601|    293|                                        {
  602|    293|                                            return OpCode::SLTI;
  603|    293|                                        }
  604|    218|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (604:50): [True: 145, False: 73]
  ------------------
  605|    145|                                        {
  606|    145|                                            return OpCode::SLTU;
  607|    145|                                        }
  608|     73|                                        break;
  609|  2.26k|                                }
  610|       |
  611|  1.02k|                            case 'N':
  ------------------
  |  Branch (611:29): [True: 172, False: 10.0k]
  ------------------
  612|  1.21k|                            case 'n':
  ------------------
  |  Branch (612:29): [True: 188, False: 10.0k]
  ------------------
  613|  1.21k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (613:37): [True: 810, False: 401]
  ------------------
  614|    810|                                {
  615|    810|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (615:41): [True: 159, False: 651]
  ------------------
  616|    159|                                    {
  617|    159|                                        return OpCode::SNEI;
  618|    159|                                    }
  619|    651|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (619:46): [True: 145, False: 506]
  ------------------
  620|    145|                                    {
  621|    145|                                        return OpCode::SNEU;
  622|    145|                                    }
  623|    810|                                }
  624|    907|                                break;
  625|       |
  626|    907|                            case 'R':
  ------------------
  |  Branch (626:29): [True: 692, False: 9.50k]
  ------------------
  627|    847|                            case 'r':
  ------------------
  |  Branch (627:29): [True: 155, False: 10.0k]
  ------------------
  628|    847|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (628:37): [True: 314, False: 533]
  |  Branch (628:37): [True: 241, False: 606]
  |  Branch (628:53): [True: 241, False: 73]
  ------------------
  629|    241|                                {
  630|    241|                                    return OpCode::SRAI;
  631|    241|                                }
  632|    606|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (632:42): [True: 533, False: 73]
  |  Branch (632:42): [True: 467, False: 139]
  |  Branch (632:58): [True: 467, False: 66]
  ------------------
  633|    467|                                {
  634|    467|                                    return OpCode::SRLI;
  635|    467|                                }
  636|    139|                                break;
  637|       |
  638|  2.36k|                            case 'U':
  ------------------
  |  Branch (638:29): [True: 2.36k, False: 7.83k]
  ------------------
  639|  2.67k|                            case 'u':
  ------------------
  |  Branch (639:29): [True: 316, False: 9.88k]
  ------------------
  640|  2.67k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (640:37): [True: 2.48k, False: 194]
  ------------------
  641|  2.48k|                                {
  642|  2.48k|                                    switch (c4)
  ------------------
  |  Branch (642:45): [True: 66, False: 2.41k]
  ------------------
  643|  2.48k|                                    {
  644|    220|                                        case 'D':
  ------------------
  |  Branch (644:41): [True: 220, False: 2.26k]
  ------------------
  645|    286|                                        case 'd':
  ------------------
  |  Branch (645:41): [True: 66, False: 2.41k]
  ------------------
  646|    286|                                            return OpCode::SUBD;
  647|       |
  648|    364|                                        case 'F':
  ------------------
  |  Branch (648:41): [True: 364, False: 2.11k]
  ------------------
  649|    430|                                        case 'f':
  ------------------
  |  Branch (649:41): [True: 66, False: 2.41k]
  ------------------
  650|    430|                                            return OpCode::SUBF;
  651|       |
  652|    115|                                        case 'I':
  ------------------
  |  Branch (652:41): [True: 115, False: 2.36k]
  ------------------
  653|    181|                                        case 'i':
  ------------------
  |  Branch (653:41): [True: 66, False: 2.41k]
  ------------------
  654|    181|                                            return OpCode::SUBI;
  655|       |
  656|  1.45k|                                        case 'U':
  ------------------
  |  Branch (656:41): [True: 1.45k, False: 1.02k]
  ------------------
  657|  1.51k|                                        case 'u':
  ------------------
  |  Branch (657:41): [True: 66, False: 2.41k]
  ------------------
  658|  1.51k|                                            return OpCode::SUBU;
  659|  2.48k|                                    }
  660|  2.48k|                                }
  661|    260|                                break;
  662|  10.1k|                        }
  663|  3.25k|                        break;
  664|       |
  665|  3.25k|                    case 'T':
  ------------------
  |  Branch (665:21): [True: 89, False: 28.2k]
  ------------------
  666|    335|                    case 't':
  ------------------
  |  Branch (666:21): [True: 246, False: 28.0k]
  ------------------
  667|    335|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (667:29): [True: 269, False: 66]
  |  Branch (667:29): [True: 137, False: 198]
  |  Branch (667:45): [True: 203, False: 66]
  |  Branch (667:61): [True: 137, False: 66]
  ------------------
  668|    137|                        {
  669|    137|                            return OpCode::TRAP;
  670|    137|                        }
  671|    198|                        break;
  672|    879|                    case 'X':
  ------------------
  |  Branch (672:21): [True: 879, False: 27.4k]
  ------------------
  673|  1.42k|                    case 'x':
  ------------------
  |  Branch (673:21): [True: 547, False: 27.7k]
  ------------------
  674|  1.42k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (674:29): [True: 1.35k, False: 74]
  |  Branch (674:29): [True: 1.16k, False: 263]
  |  Branch (674:45): [True: 1.26k, False: 85]
  |  Branch (674:61): [True: 1.16k, False: 104]
  ------------------
  675|  1.16k|                        {
  676|  1.16k|                            return OpCode::XORI;
  677|  1.16k|                        }
  678|    263|                        break;
  679|  28.3k|                }
  680|  10.5k|                break;
  681|  28.3k|            }
  682|       |
  683|       |            // 5 character OpCodes
  684|  10.5k|            case 5: {
  ------------------
  |  Branch (684:13): [True: 3.76k, False: 77.0k]
  ------------------
  685|  3.76k|                const char c1 = token[0u];
  686|  3.76k|                const char c2 = token[1u];
  687|  3.76k|                const char c3 = token[2u];
  688|  3.76k|                const char c4 = token[3u];
  689|  3.76k|                const char c5 = token[4u];
  690|       |
  691|  3.76k|                switch (c1)
  ------------------
  |  Branch (691:25): [True: 914, False: 2.84k]
  ------------------
  692|  3.76k|                {
  693|    395|                    case 'A':
  ------------------
  |  Branch (693:21): [True: 395, False: 3.36k]
  ------------------
  694|    395|                    case 'a':
  ------------------
  |  Branch (694:21): [True: 0, False: 3.76k]
  ------------------
  695|    395|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (695:29): [True: 395, False: 0]
  |  Branch (695:29): [True: 395, False: 0]
  |  Branch (695:45): [True: 395, False: 0]
  |  Branch (695:61): [True: 395, False: 0]
  |  Branch (695:77): [True: 395, False: 0]
  ------------------
  696|    395|                        {
  697|    395|                            return OpCode::ADDUI;
  698|    395|                        }
  699|      0|                        break;
  700|       |
  701|    195|                    case 'D':
  ------------------
  |  Branch (701:21): [True: 195, False: 3.56k]
  ------------------
  702|    195|                    case 'd':
  ------------------
  |  Branch (702:21): [True: 0, False: 3.76k]
  ------------------
  703|    195|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (703:29): [True: 195, False: 0]
  |  Branch (703:29): [True: 195, False: 0]
  |  Branch (703:45): [True: 195, False: 0]
  |  Branch (703:61): [True: 195, False: 0]
  |  Branch (703:77): [True: 195, False: 0]
  ------------------
  704|    195|                        {
  705|    195|                            return OpCode::DIVUI;
  706|    195|                        }
  707|      0|                        break;
  708|       |
  709|    667|                    case 'M':
  ------------------
  |  Branch (709:21): [True: 667, False: 3.09k]
  ------------------
  710|    667|                    case 'm':
  ------------------
  |  Branch (710:21): [True: 0, False: 3.76k]
  ------------------
  711|    667|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (711:29): [True: 667, False: 0]
  |  Branch (711:29): [True: 667, False: 0]
  |  Branch (711:45): [True: 667, False: 0]
  |  Branch (711:61): [True: 667, False: 0]
  ------------------
  712|    667|                        {
  713|    667|                            switch (c5)
  ------------------
  |  Branch (713:37): [True: 0, False: 667]
  ------------------
  714|    667|                            {
  715|     97|                                case 'D':
  ------------------
  |  Branch (715:33): [True: 97, False: 570]
  ------------------
  716|     97|                                case 'd':
  ------------------
  |  Branch (716:33): [True: 0, False: 667]
  ------------------
  717|     97|                                    return OpCode::MULTD;
  718|       |
  719|    235|                                case 'F':
  ------------------
  |  Branch (719:33): [True: 235, False: 432]
  ------------------
  720|    235|                                case 'f':
  ------------------
  |  Branch (720:33): [True: 0, False: 667]
  ------------------
  721|    235|                                    return OpCode::MULTF;
  722|       |
  723|     99|                                case 'I':
  ------------------
  |  Branch (723:33): [True: 99, False: 568]
  ------------------
  724|     99|                                case 'i':
  ------------------
  |  Branch (724:33): [True: 0, False: 667]
  ------------------
  725|     99|                                    return OpCode::MULTI;
  726|       |
  727|    236|                                case 'U':
  ------------------
  |  Branch (727:33): [True: 236, False: 431]
  ------------------
  728|    236|                                case 'u':
  ------------------
  |  Branch (728:33): [True: 0, False: 667]
  ------------------
  729|    236|                                    return OpCode::MULTU;
  730|    667|                            }
  731|    667|                        }
  732|      0|                        break;
  733|       |
  734|  1.59k|                    case 'S':
  ------------------
  |  Branch (734:21): [True: 1.59k, False: 2.17k]
  ------------------
  735|  1.59k|                    case 's':
  ------------------
  |  Branch (735:21): [True: 0, False: 3.76k]
  ------------------
  736|  1.59k|                        switch (c2)
  ------------------
  |  Branch (736:33): [True: 0, False: 1.59k]
  ------------------
  737|  1.59k|                        {
  738|    321|                            case 'E':
  ------------------
  |  Branch (738:29): [True: 321, False: 1.27k]
  ------------------
  739|    321|                            case 'e':
  ------------------
  |  Branch (739:29): [True: 0, False: 1.59k]
  ------------------
  740|    321|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (740:37): [True: 321, False: 0]
  |  Branch (740:37): [True: 321, False: 0]
  |  Branch (740:53): [True: 321, False: 0]
  |  Branch (740:69): [True: 321, False: 0]
  ------------------
  741|    321|                                {
  742|    321|                                    return OpCode::SEQUI;
  743|    321|                                }
  744|      0|                                break;
  745|       |
  746|    326|                            case 'G':
  ------------------
  |  Branch (746:29): [True: 326, False: 1.26k]
  ------------------
  747|    326|                            case 'g':
  ------------------
  |  Branch (747:29): [True: 0, False: 1.59k]
  ------------------
  748|    326|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (748:37): [True: 241, False: 85]
  |  Branch (748:37): [True: 241, False: 85]
  |  Branch (748:53): [True: 241, False: 0]
  |  Branch (748:69): [True: 241, False: 0]
  ------------------
  749|    241|                                {
  750|    241|                                    return OpCode::SGEUI;
  751|    241|                                }
  752|     85|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (752:42): [True: 85, False: 0]
  |  Branch (752:42): [True: 85, False: 0]
  |  Branch (752:58): [True: 85, False: 0]
  |  Branch (752:74): [True: 85, False: 0]
  ------------------
  753|     85|                                {
  754|     85|                                    return OpCode::SGTUI;
  755|     85|                                }
  756|      0|                                break;
  757|       |
  758|    586|                            case 'L':
  ------------------
  |  Branch (758:29): [True: 586, False: 1.00k]
  ------------------
  759|    586|                            case 'l':
  ------------------
  |  Branch (759:29): [True: 0, False: 1.59k]
  ------------------
  760|    586|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (760:37): [True: 488, False: 98]
  |  Branch (760:37): [True: 488, False: 98]
  |  Branch (760:53): [True: 488, False: 0]
  |  Branch (760:69): [True: 488, False: 0]
  ------------------
  761|    488|                                {
  762|    488|                                    return OpCode::SLEUI;
  763|    488|                                }
  764|     98|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (764:42): [True: 98, False: 0]
  |  Branch (764:42): [True: 98, False: 0]
  |  Branch (764:58): [True: 98, False: 0]
  |  Branch (764:74): [True: 98, False: 0]
  ------------------
  765|     98|                                {
  766|     98|                                    return OpCode::SLTUI;
  767|     98|                                }
  768|      0|                                break;
  769|       |
  770|    278|                            case 'N':
  ------------------
  |  Branch (770:29): [True: 278, False: 1.31k]
  ------------------
  771|    278|                            case 'n':
  ------------------
  |  Branch (771:29): [True: 0, False: 1.59k]
  ------------------
  772|    278|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (772:37): [True: 278, False: 0]
  |  Branch (772:37): [True: 278, False: 0]
  |  Branch (772:53): [True: 278, False: 0]
  |  Branch (772:69): [True: 278, False: 0]
  ------------------
  773|    278|                                {
  774|    278|                                    return OpCode::SNEUI;
  775|    278|                                }
  776|      0|                                break;
  777|       |
  778|     81|                            case 'U':
  ------------------
  |  Branch (778:29): [True: 81, False: 1.51k]
  ------------------
  779|     81|                            case 'u':
  ------------------
  |  Branch (779:29): [True: 0, False: 1.59k]
  ------------------
  780|     81|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (780:37): [True: 81, False: 0]
  |  Branch (780:37): [True: 81, False: 0]
  |  Branch (780:53): [True: 81, False: 0]
  |  Branch (780:69): [True: 81, False: 0]
  ------------------
  781|     81|                                {
  782|     81|                                    return OpCode::SUBUI;
  783|     81|                                }
  784|      0|                                break;
  785|  1.59k|                        }
  786|       |
  787|      0|                        break;
  788|  3.76k|                }
  789|       |
  790|    914|                break;
  791|  3.76k|            }
  792|       |
  793|       |            // 6 character OpCodes
  794|    947|            case 6: {
  ------------------
  |  Branch (794:13): [True: 947, False: 79.9k]
  ------------------
  795|    947|                const char c1 = token[0u];
  796|    947|                const char c2 = token[1u];
  797|    947|                const char c3 = token[2u];
  798|    947|                const char c4 = token[3u];
  799|    947|                const char c5 = token[4u];
  800|    947|                const char c6 = token[5u];
  801|       |
  802|    947|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (802:21): [True: 503, False: 444]
  |  Branch (802:21): [True: 503, False: 444]
  |  Branch (802:37): [True: 503, False: 0]
  |  Branch (802:53): [True: 503, False: 0]
  ------------------
  803|    503|                {
  804|    503|                    switch (c4)
  ------------------
  |  Branch (804:29): [True: 0, False: 503]
  ------------------
  805|    503|                    {
  806|    164|                        case 'D':
  ------------------
  |  Branch (806:25): [True: 164, False: 339]
  ------------------
  807|    164|                        case 'd':
  ------------------
  |  Branch (807:25): [True: 0, False: 503]
  ------------------
  808|    164|                            if (c5 == '2')
  ------------------
  |  Branch (808:33): [True: 164, False: 0]
  ------------------
  809|    164|                            {
  810|    164|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (810:37): [True: 80, False: 84]
  ------------------
  811|     80|                                {
  812|     80|                                    return OpCode::CVTD2F;
  813|     80|                                }
  814|     84|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (814:42): [True: 84, False: 0]
  ------------------
  815|     84|                                {
  816|     84|                                    return OpCode::CVTD2I;
  817|     84|                                }
  818|    164|                            }
  819|      0|                            break;
  820|       |
  821|    176|                        case 'F':
  ------------------
  |  Branch (821:25): [True: 176, False: 327]
  ------------------
  822|    176|                        case 'f':
  ------------------
  |  Branch (822:25): [True: 0, False: 503]
  ------------------
  823|    176|                            if (c5 == '2')
  ------------------
  |  Branch (823:33): [True: 176, False: 0]
  ------------------
  824|    176|                            {
  825|    176|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (825:37): [True: 82, False: 94]
  ------------------
  826|     82|                                {
  827|     82|                                    return OpCode::CVTF2D;
  828|     82|                                }
  829|     94|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (829:42): [True: 94, False: 0]
  ------------------
  830|     94|                                {
  831|     94|                                    return OpCode::CVTF2I;
  832|     94|                                }
  833|    176|                            }
  834|      0|                            break;
  835|       |
  836|    163|                        case 'I':
  ------------------
  |  Branch (836:25): [True: 163, False: 340]
  ------------------
  837|    163|                        case 'i':
  ------------------
  |  Branch (837:25): [True: 0, False: 503]
  ------------------
  838|    163|                            if (c5 == '2')
  ------------------
  |  Branch (838:33): [True: 163, False: 0]
  ------------------
  839|    163|                            {
  840|    163|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (840:37): [True: 80, False: 83]
  ------------------
  841|     80|                                {
  842|     80|                                    return OpCode::CVTI2D;
  843|     80|                                }
  844|     83|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (844:42): [True: 83, False: 0]
  ------------------
  845|     83|                                {
  846|     83|                                    return OpCode::CVTI2F;
  847|     83|                                }
  848|    163|                            }
  849|    503|                    }
  850|    503|                }
  851|    444|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (851:26): [True: 192, False: 252]
  |  Branch (851:26): [True: 192, False: 252]
  |  Branch (851:42): [True: 192, False: 0]
  |  Branch (851:58): [True: 192, False: 0]
  |  Branch (851:74): [True: 192, False: 0]
  ------------------
  852|    444|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (852:26): [True: 192, False: 0]
  |  Branch (852:42): [True: 192, False: 0]
  ------------------
  853|    192|                {
  854|    192|                    return OpCode::MULTUI;
  855|    192|                }
  856|    252|                break;
  857|    947|            }
  858|       |
  859|       |            // 7 character OpCodes
  860|    619|            case 7: {
  ------------------
  |  Branch (860:13): [True: 619, False: 80.2k]
  ------------------
  861|    619|                const char c1 = token[0u];
  862|    619|                const char c2 = token[1u];
  863|    619|                const char c3 = token[2u];
  864|    619|                const char c4 = token[3u];
  865|    619|                const char c5 = token[4u];
  866|    619|                const char c6 = token[5u];
  867|    619|                const char c7 = token[6u];
  868|       |
  869|    619|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (869:21): [True: 462, False: 157]
  |  Branch (869:21): [True: 462, False: 157]
  |  Branch (869:37): [True: 462, False: 0]
  |  Branch (869:53): [True: 462, False: 0]
  ------------------
  870|    462|                {
  871|    462|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (871:25): [True: 218, False: 244]
  |  Branch (871:25): [True: 218, False: 244]
  |  Branch (871:41): [True: 218, False: 0]
  |  Branch (871:54): [True: 218, False: 0]
  |  Branch (871:70): [True: 218, False: 0]
  ------------------
  872|    218|                    {
  873|    218|                        return OpCode::MOVI2FP;
  874|    218|                    }
  875|    244|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (875:25): [True: 244, False: 0]
  |  Branch (875:25): [True: 244, False: 0]
  |  Branch (875:41): [True: 244, False: 0]
  |  Branch (875:57): [True: 244, False: 0]
  |  Branch (875:70): [True: 244, False: 0]
  ------------------
  876|    244|                    {
  877|    244|                        return OpCode::MOVFP2I;
  878|    244|                    }
  879|    244|                }
  880|    157|                break;
  881|    619|            }
  882|       |
  883|  5.81k|            default: {
  ------------------
  |  Branch (883:13): [True: 5.81k, False: 75.0k]
  ------------------
  884|  5.81k|                break;
  885|    619|            }
  886|  80.8k|        }
  887|       |
  888|       |        // None found
  889|  38.5k|        return OpCode::NONE;
  890|  80.8k|    }
_ZN3dlx3iceEcc:
   15|   117k|    {
   16|   117k|        constexpr const char diff = 'a' - 'A';
   17|   117k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (17:16): [True: 52.8k, False: 65.0k]
  |  Branch (17:28): [True: 26.0k, False: 39.0k]
  ------------------
   18|   117k|    }

_ZN3dlx10ParseErrorC2Ev:
   18|  83.6k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  186|  1.36k|    {
  187|  1.36k|        ParseError err;
  188|       |
  189|  1.36k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  190|  1.36k|        err.m_LineNumber                           = line_number;
  191|  1.36k|        err.m_Column                               = column;
  192|  1.36k|        err.unexpected_argument_type.expected_type = expected_type;
  193|  1.36k|        err.unexpected_argument_type.actual_type   = actual_type;
  194|       |
  195|  1.36k|        return err;
  196|  1.36k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  201|  1.36k|    {
  202|  1.36k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  203|  1.36k|                                                         token.GetColumn().unsafe(), expected_type,
  204|  1.36k|                                                         actual_type);
  205|  1.36k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  209|     66|    {
  210|     66|        ParseError err;
  211|       |
  212|     66|        err.m_Type              = ParseError::Type::InvalidNumber;
  213|     66|        err.m_LineNumber        = line_number;
  214|     66|        err.m_Column            = column;
  215|     66|        err.invalid_number.text = text;
  216|       |
  217|     66|        return err;
  218|     66|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  221|     66|    {
  222|     66|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  223|     66|                                                token.GetColumn().unsafe(), token.GetText());
  224|     66|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  228|      2|    {
  229|      2|        ParseError err;
  230|       |
  231|      2|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  232|      2|        err.m_LineNumber = line_number;
  233|      2|        err.m_Column     = column;
  234|       |
  235|      2|        return err;
  236|      2|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  239|      2|    {
  240|      2|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  241|      2|                                                                     token.GetColumn().unsafe());
  242|      2|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  247|  24.1k|    {
  248|  24.1k|        ParseError err;
  249|       |
  250|  24.1k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  251|  24.1k|        err.m_LineNumber                   = line_number;
  252|  24.1k|        err.m_Column                       = column;
  253|  24.1k|        err.unexpected_token.expected_type = expected_type;
  254|  24.1k|        err.unexpected_token.actual_type   = actual_type;
  255|       |
  256|  24.1k|        return err;
  257|  24.1k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  261|  24.1k|    {
  262|  24.1k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  263|  24.1k|                                                  token.GetColumn().unsafe(), expected_type,
  264|  24.1k|                                                  token.GetType());
  265|  24.1k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  270|  1.22k|    {
  271|  1.22k|        ParseError err;
  272|       |
  273|  1.22k|        err.m_Type                         = ParseError::Type::ReservedIdentifier;
  274|  1.22k|        err.m_LineNumber                   = line_number;
  275|  1.22k|        err.m_Column                       = column;
  276|  1.22k|        err.reserved_identifier.identifier = identifier;
  277|       |
  278|  1.22k|        return err;
  279|  1.22k|    }
_ZN3dlx37ConstructReservedIdentifierParseErrorERKNS_5TokenE:
  282|    562|    {
  283|    562|        return ConstructReservedIdentifierParseError(token.GetLineNumber().unsafe(),
  284|    562|                                                     token.GetColumn().unsafe(), token.GetText());
  285|    562|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  290|  26.5k|    {
  291|  26.5k|        ParseError err;
  292|       |
  293|  26.5k|        err.m_Type                              = ParseError::Type::InvalidLabelIdentifier;
  294|  26.5k|        err.m_LineNumber                        = line_number;
  295|  26.5k|        err.m_Column                            = column;
  296|  26.5k|        err.invalid_label_identifier.identifier = identifier;
  297|       |
  298|  26.5k|        return err;
  299|  26.5k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  302|  26.5k|    {
  303|  26.5k|        return ConstructInvalidLabelIdentifierParseError(
  304|  26.5k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  305|  26.5k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  312|  1.33k|    {
  313|  1.33k|        ParseError err;
  314|       |
  315|  1.33k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  316|  1.33k|        err.m_LineNumber                     = line_number;
  317|  1.33k|        err.m_Column                         = column;
  318|  1.33k|        err.label_already_defined.label_name = label_name;
  319|  1.33k|        err.label_already_defined.at_line    = at_line;
  320|  1.33k|        err.label_already_defined.at_column  = at_column;
  321|       |
  322|  1.33k|        return err;
  323|  1.33k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  327|  1.33k|    {
  328|  1.33k|        return ConstructLabelAlreadyDefinedParseError(
  329|  1.33k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  330|  1.33k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  331|  1.33k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  335|  15.1k|    {
  336|  15.1k|        ParseError err;
  337|       |
  338|  15.1k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  339|  15.1k|        err.m_LineNumber = line_number;
  340|  15.1k|        err.m_Column     = column;
  341|       |
  342|  15.1k|        return err;
  343|  15.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  346|  15.1k|    {
  347|  15.1k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  348|  15.1k|                                                        token.GetColumn().unsafe());
  349|  15.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  354|  12.3k|    {
  355|  12.3k|        ParseError err;
  356|       |
  357|  12.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  358|  12.3k|        err.m_LineNumber               = line_number;
  359|  12.3k|        err.m_Column                   = column;
  360|  12.3k|        err.too_few_arguments.required = required;
  361|  12.3k|        err.too_few_arguments.provided = provided;
  362|       |
  363|  12.3k|        return err;
  364|  12.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  368|  12.3k|    {
  369|  12.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  370|  12.3k|                                                  token.GetColumn().unsafe(), required, provided);
  371|  12.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  375|  1.10k|    {
  376|  1.10k|        ParseError err;
  377|       |
  378|  1.10k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  379|  1.10k|        err.m_LineNumber           = line_number;
  380|  1.10k|        err.m_Column               = column;
  381|  1.10k|        err.empty_label.label_name = label_name;
  382|       |
  383|  1.10k|        return err;
  384|  1.10k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  387|  1.10k|    {
  388|  1.10k|        return ConstructEmptyLabelParseError(
  389|  1.10k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  390|  1.10k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (390:17): [True: 949, False: 156]
  ------------------
  391|    949|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  392|  1.10k|                        token.GetText());
  393|  1.10k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  397|    380|    {
  398|    380|        ParseError err;
  399|       |
  400|    380|        err.m_Type       = ParseError::Type::TooManyComma;
  401|    380|        err.m_LineNumber = line_number;
  402|    380|        err.m_Column     = column;
  403|       |
  404|    380|        return err;
  405|    380|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  408|    380|    {
  409|    380|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  410|    380|                                               token.GetColumn().unsafe());
  411|    380|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   16|  83.6k|    {
   17|  83.6k|        m_ParseErrors.emplace_back(phi::move(error));
   18|  83.6k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  4.29k|    {
  181|  4.29k|        ParsedProgram program;
  182|       |
  183|  4.29k|        program.m_Tokens = tokens;
  184|       |
  185|  4.29k|        phi::boolean line_has_instruction{false};
  186|  4.29k|        phi::usize   label_count{0u};
  187|       |
  188|   218k|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 214k, False: 4.29k]
  ------------------
  189|   214k|        {
  190|   214k|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|   214k|            switch (current_token.GetType())
  195|   214k|            {
  196|       |                // Ignore comments
  197|  43.3k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 43.3k, False: 171k]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|  43.3k|                    break;
  200|       |
  201|  79.9k|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 79.9k, False: 134k]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  79.9k|                    line_has_instruction = false;
  204|  79.9k|                    break;
  205|       |
  206|  28.9k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 28.9k, False: 185k]
  ------------------
  207|  28.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 844, False: 28.1k]
  ------------------
  208|    844|                    {
  209|    844|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|    844|                                current_token, Token::Type::NewLine));
  211|    844|                        break;
  212|    844|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|  28.1k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 23.6k, False: 4.52k]
  ------------------
  217|  23.6k|                    {
  218|  23.6k|                        program.AddParseError(
  219|  23.6k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|  23.6k|                        break;
  221|  23.6k|                    }
  222|       |
  223|  4.52k|                    phi::string_view label_name = current_token.GetText();
  224|  4.52k|                    label_name.remove_suffix(1u);
  225|       |
  226|  4.52k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 667, False: 3.85k]
  ------------------
  227|    667|                    {
  228|    667|                        program.AddParseError(ConstructReservedIdentifierParseError(
  229|    667|                                current_token.GetLineNumber().unsafe(),
  230|    667|                                current_token.GetColumn().unsafe(), label_name));
  231|    667|                        break;
  232|    667|                    }
  233|       |
  234|  3.85k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 1.11k, False: 2.74k]
  ------------------
  235|  1.11k|                    {
  236|  1.11k|                        program.AddParseError(
  237|  1.11k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  1.11k|                        break;
  239|  1.11k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  2.74k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 1.33k, False: 1.40k]
  ------------------
  243|  1.33k|                    {
  244|       |                        // Find first defintions of label
  245|  1.33k|                        const Token* first_label_definition =
  246|  1.33k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  1.33k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  1.33k|                                    {
  249|  1.33k|                                        phi::string_view token_label_name = t.GetText();
  250|  1.33k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  1.33k|                                        if (token_label_name == label_name)
  253|  1.33k|                                        {
  254|  1.33k|                                            return true;
  255|  1.33k|                                        }
  256|  1.33k|                                    }
  257|       |
  258|  1.33k|                                    return false;
  259|  1.33k|                                });
  260|       |
  261|  1.33k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  1.33k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  1.33k|                                current_token, *first_label_definition));
  265|  1.33k|                        break;
  266|  1.33k|                    }
  267|       |
  268|  1.40k|                    program.m_JumpData[label_name] =
  269|  1.40k|                            static_cast<phi::uint32_t>(program.m_Instructions.size());
  270|  1.40k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  1.40k|                    break;
  276|  2.74k|                }
  277|       |
  278|  41.1k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 41.1k, False: 173k]
  ------------------
  279|  41.1k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 15.1k, False: 25.9k]
  ------------------
  280|  15.1k|                    {
  281|  15.1k|                        program.AddParseError(
  282|  15.1k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|  15.1k|                        break;
  284|  15.1k|                    }
  285|       |
  286|  25.9k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|  25.9k|                    PHI_ASSERT(current_token.HasHint());
  290|  25.9k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|  25.9k|                    const InstructionInfo& info = LookUpInstructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|  25.9k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|  25.9k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|  25.9k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|  25.9k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|  25.9k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|  25.9k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|  25.9k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|  48.0k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 40.5k, False: 7.56k]
  ------------------
  312|  40.5k|                    {
  313|       |                        // Get next token
  314|  40.5k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 149, False: 40.3k]
  ------------------
  315|    149|                        {
  316|    149|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    149|                                    current_token, number_of_argument_required.unsafe(),
  318|    149|                                    argument_num.unsafe()));
  319|    149|                            break;
  320|    149|                        }
  321|       |
  322|  40.3k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|  40.3k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 5.82k, False: 34.5k]
  ------------------
  326|  5.82k|                        {
  327|  5.82k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 380, False: 5.44k]
  ------------------
  328|    380|                            {
  329|    380|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    380|                            }
  331|       |
  332|  5.82k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  5.82k|                            continue;
  335|  5.82k|                        }
  336|       |
  337|  34.5k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 12.1k, False: 22.3k]
  ------------------
  338|  12.1k|                        {
  339|  12.1k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|  12.1k|                                    token, number_of_argument_required.unsafe(),
  341|  12.1k|                                    argument_num.unsafe()));
  342|  12.1k|                            break;
  343|  12.1k|                        }
  344|       |
  345|  22.3k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|  22.3k|                                parse_instruction_argument(
  347|  22.3k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|  22.3k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 6.07k, False: 16.2k]
  ------------------
  349|  6.07k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|  6.07k|                            break;
  352|  6.07k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  16.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  16.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  16.2k|                        argument_num++;
  359|  16.2k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  16.2k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|  25.9k|                    program.m_Instructions.emplace_back(instruction);
  367|  25.9k|                    line_has_instruction = true;
  368|  25.9k|                    break;
  369|  41.1k|                }
  370|       |
  371|  21.0k|                default:
  ------------------
  |  Branch (371:17): [True: 21.0k, False: 193k]
  ------------------
  372|  21.0k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|  21.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 6.91k, False: 14.1k]
  ------------------
  374|  6.91k|                    {
  375|  6.91k|                        expected_token_type = Token::Type::NewLine;
  376|  6.91k|                    }
  377|       |
  378|  21.0k|                    program.AddParseError(
  379|  21.0k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|  21.0k|                    break;
  381|   214k|            }
  382|   214k|        }
  383|       |
  384|       |        // Check for empty labels
  385|  4.29k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 189, False: 4.10k]
  ------------------
  386|    189|        {
  387|  2.20k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 2.02k, False: 189]
  ------------------
  388|  2.02k|            {
  389|  2.02k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  2.02k|                const Token& token = *it;
  392|  2.02k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 1.10k, False: 915]
  ------------------
  393|  1.10k|                {
  394|  1.10k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  1.10k|                    --label_count;
  396|  1.10k|                }
  397|  2.02k|            }
  398|    189|        }
  399|       |
  400|  4.29k|        return program;
  401|  4.29k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  4.29k|    {
  405|  4.29k|        TokenStream tokens = Tokenize(source);
  406|  4.29k|        return Parse(tokens);
  407|  4.29k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|  22.3k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|  22.3k|        switch (token.GetType())
   37|  22.3k|        {
   38|    268|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 268, False: 22.0k]
  ------------------
   39|    268|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 67, False: 201]
  ------------------
   40|    268|                                          ArgumentType::AddressDisplacement))
   41|     67|                {
   42|     67|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|     67|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|     67|                    return {};
   46|     67|                }
   47|       |
   48|       |                // Get address displacement
   49|    201|                PHI_ASSERT(token.HasHint());
   50|       |
   51|    201|                phi::int16_t value = static_cast<phi::int16_t>(token.GetHint());
   52|       |
   53|    201|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 2, False: 199]
  ------------------
   54|      2|                {
   55|      2|                    program.AddParseError(
   56|      2|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|      2|                    return {};
   58|      2|                }
   59|       |
   60|    199|                auto         it           = tokens.current_position();
   61|    199|                const Token& first_token  = tokens.consume();
   62|    199|                const Token& second_token = tokens.consume();
   63|    199|                const Token& third_token  = tokens.consume();
   64|       |
   65|    199|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 199, False: 0]
  ------------------
   66|    199|                {
   67|    199|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|    199|                            first_token, Token::Type::OpenBracket));
   69|    199|                    return {};
   70|    199|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  10.4k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 10.4k, False: 11.9k]
  ------------------
   97|  10.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 194, False: 10.2k]
  ------------------
   98|    194|                {
   99|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    194|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    194|                    return {};
  102|    194|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  10.2k|                return ConstructInstructionArgumentRegisterInt(
  108|  10.2k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  10.4k|            }
  110|  3.03k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 3.03k, False: 19.3k]
  ------------------
  111|  3.03k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 710, False: 2.32k]
  ------------------
  112|    710|                {
  113|    710|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|    710|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|    710|                    return {};
  116|    710|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  2.32k|                return ConstructInstructionArgumentRegisterFloat(
  122|  2.32k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  3.03k|            }
  124|    562|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 562, False: 21.8k]
  ------------------
  125|    562|                program.AddParseError(ConstructReservedIdentifierParseError(token));
  126|       |
  127|    562|                return {};
  128|  3.03k|            }
  129|  2.92k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 2.92k, False: 19.4k]
  ------------------
  130|       |                // Parse as Label
  131|  2.92k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 199, False: 2.72k]
  ------------------
  132|    199|                {
  133|    199|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|    199|                            token, expected_argument_type, ArgumentType::Label));
  135|    199|                    return {};
  136|    199|                }
  137|       |
  138|  2.72k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 2.72k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentifierParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  2.72k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 1.85k, False: 877]
  ------------------
  145|  1.85k|                {
  146|  1.85k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  1.85k|                    return {};
  148|  1.85k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|    877|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  2.72k|            }
  154|  3.12k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 3.12k, False: 19.2k]
  ------------------
  155|  3.12k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 194, False: 2.93k]
  ------------------
  156|    194|                {
  157|    194|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|    194|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|    194|                    return {};
  160|    194|                }
  161|       |
  162|  2.93k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 2.86k, False: 66]
  ------------------
  163|  2.86k|                {
  164|  2.86k|                    return ConstructInstructionArgumentImmediateValue(
  165|  2.86k|                            static_cast<phi::int16_t>(token.GetHint()));
  166|  2.86k|                }
  167|       |
  168|     66|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|     66|                return {};
  170|  2.93k|            }
  171|       |
  172|  2.03k|            default:
  ------------------
  |  Branch (172:13): [True: 2.03k, False: 20.3k]
  ------------------
  173|  2.03k|                program.AddParseError(
  174|  2.03k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  2.03k|                return {};
  176|  22.3k|        }
  177|  22.3k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|  16.3k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  16.3k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 7.90k, False: 8.48k]
  ------------------
  248|  7.90k|                                    {
  249|  7.90k|                                        phi::string_view token_label_name = t.GetText();
  250|  7.90k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  7.90k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 1.33k, False: 6.56k]
  ------------------
  253|  1.33k|                                        {
  254|  1.33k|                                            return true;
  255|  1.33k|                                        }
  256|  7.90k|                                    }
  257|       |
  258|  15.0k|                                    return false;
  259|  16.3k|                                });

_ZN3dlx9ProcessorC2Ev:
   62|      1|    {
   63|       |        // Mark R0 as ready only
   64|      1|        m_IntRegisters[0].SetReadOnly(true);
   65|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   68|  3.25M|    {
   69|  3.25M|        PHI_ASSERT(id != IntRegisterID::None);
   70|  3.25M|        phi::size_t id_value = phi::to_underlying(id);
   71|       |
   72|  3.25M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   73|       |
   74|  3.25M|        return m_IntRegisters[id_value];
   75|  3.25M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   78|  4.69M|    {
   79|  4.69M|        PHI_ASSERT(id != IntRegisterID::None);
   80|  4.69M|        phi::size_t id_value = phi::to_underlying(id);
   81|       |
   82|  4.69M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   83|       |
   84|  4.69M|        return m_IntRegisters[id_value];
   85|  4.69M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   88|  2.59M|    {
   89|  2.59M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   90|  2.59M|                                             RegisterAccessType::Signed),
   91|  2.59M|                   "Mismatch for instruction access type");
   92|       |
   93|  2.59M|        const phi::size_t id_value = phi::to_underlying(id);
   94|       |
   95|  2.59M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   96|  2.59M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   97|  2.59M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (97:13): [True: 1.72M, False: 867k]
  ------------------
   98|  2.59M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (98:13): [True: 702k, False: 1.02M]
  ------------------
   99|   702k|        {
  100|   702k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   702k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  101|   702k|        }
  102|       |
  103|  2.59M|        return GetIntRegister(id).GetSignedValue();
  104|  2.59M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  107|  2.10M|    {
  108|  2.10M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  109|  2.10M|                                             RegisterAccessType::Unsigned),
  110|  2.10M|                   "Mismatch for instruction access type");
  111|       |
  112|  2.10M|        const phi::size_t id_value = phi::to_underlying(id);
  113|       |
  114|  2.10M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  115|  2.10M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  116|  2.10M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (116:13): [True: 1.03M, False: 1.07M]
  ------------------
  117|  2.10M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (117:13): [True: 596k, False: 437k]
  ------------------
  118|   596k|        {
  119|   596k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   596k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  120|   596k|        }
  121|       |
  122|  2.10M|        return GetIntRegister(id).GetUnsignedValue();
  123|  2.10M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  126|  1.63M|    {
  127|  1.63M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  128|  1.63M|                                             RegisterAccessType::Signed),
  129|  1.63M|                   "Mismatch for instruction access type");
  130|       |
  131|  1.63M|        IntRegister& reg = GetIntRegister(id);
  132|       |
  133|  1.63M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (133:13): [True: 404k, False: 1.23M]
  ------------------
  134|   404k|        {
  135|   404k|            return;
  136|   404k|        }
  137|       |
  138|  1.23M|        reg.SetSignedValue(value);
  139|       |
  140|  1.23M|        const phi::size_t id_value = phi::to_underlying(id);
  141|       |
  142|  1.23M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  143|  1.23M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  144|  1.23M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  147|  1.61M|    {
  148|  1.61M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  149|  1.61M|                                             RegisterAccessType::Unsigned),
  150|  1.61M|                   "Mismatch for instruction access type");
  151|       |
  152|  1.61M|        IntRegister& reg = GetIntRegister(id);
  153|       |
  154|  1.61M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (154:13): [True: 162k, False: 1.45M]
  ------------------
  155|   162k|        {
  156|   162k|            return;
  157|   162k|        }
  158|       |
  159|  1.45M|        reg.SetUnsignedValue(value);
  160|       |
  161|  1.45M|        const phi::size_t id_value = phi::to_underlying(id);
  162|       |
  163|  1.45M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  164|  1.45M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  165|  1.45M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  168|  1.85M|    {
  169|  1.85M|        PHI_ASSERT(id != FloatRegisterID::None);
  170|  1.85M|        const phi::size_t id_value = phi::to_underlying(id);
  171|       |
  172|  1.85M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  173|       |
  174|  1.85M|        return m_FloatRegisters[id_value];
  175|  1.85M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  178|   692k|    {
  179|   692k|        PHI_ASSERT(id != FloatRegisterID::None);
  180|   692k|        const phi::size_t id_value = phi::to_underlying(id);
  181|       |
  182|   692k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  183|       |
  184|   692k|        return m_FloatRegisters[id_value];
  185|   692k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  188|   692k|    {
  189|   692k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  190|   692k|                                             RegisterAccessType::Float),
  191|   692k|                   "Mismatch for instruction access type");
  192|       |
  193|   692k|        const phi::size_t id_value = phi::to_underlying(id);
  194|       |
  195|   692k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  196|   692k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  197|   692k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (197:13): [True: 665k, False: 26.8k]
  ------------------
  198|   692k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (198:13): [True: 277k, False: 388k]
  ------------------
  199|   277k|        {
  200|       |            /*
  201|       |            DLX_WARN("Mismatch for register value type");
  202|       |            */
  203|   277k|        }
  204|       |
  205|   692k|        const FloatRegister& reg = GetFloatRegister(id);
  206|       |
  207|   692k|        return reg.GetValue();
  208|   692k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  211|   741k|    {
  212|   741k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  213|   741k|                                             RegisterAccessType::Double),
  214|   741k|                   "Mismatch for instruction access type");
  215|       |
  216|   741k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (216:13): [True: 13, False: 741k]
  ------------------
  217|     13|        {
  218|     13|            Raise(Exception::MisalignedRegisterAccess);
  219|     13|            return {0.0};
  220|     13|        }
  221|       |
  222|   741k|        const phi::size_t id_value = phi::to_underlying(id);
  223|       |
  224|   741k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  225|   741k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  226|   741k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (226:13): [True: 723k, False: 18.4k]
  ------------------
  227|   741k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (227:13): [True: 418k, False: 304k]
  ------------------
  228|   418k|        {
  229|   418k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   418k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  230|   418k|        }
  231|       |
  232|   741k|        const FloatRegisterValueType register_value_type_high =
  233|   741k|                m_FloatRegistersValueTypes[id_value + 1u];
  234|   741k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (234:13): [True: 723k, False: 18.4k]
  ------------------
  235|   741k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (235:13): [True: 723, False: 722k]
  ------------------
  236|    723|        {
  237|    723|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|    723|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  238|    723|        }
  239|       |
  240|   741k|        const FloatRegister& first_reg = GetFloatRegister(id);
  241|   741k|        const FloatRegister& second_reg =
  242|   741k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  243|       |
  244|   741k|        const float first_value  = first_reg.GetValue().unsafe();
  245|   741k|        const float second_value = second_reg.GetValue().unsafe();
  246|       |
  247|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  248|   741k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  249|       |
  250|   741k|        const phi::uint32_t first_value_bits =
  251|   741k|                *reinterpret_cast<const phi::uint32_t*>(&first_value);
  252|   741k|        const phi::uint32_t second_value_bits =
  253|   741k|                *reinterpret_cast<const phi::uint32_t*>(&second_value);
  254|       |
  255|   741k|        phi::uint64_t final_value_bits =
  256|   741k|                static_cast<phi::uint64_t>(second_value_bits) << 32u | first_value_bits;
  257|       |
  258|   741k|        return *reinterpret_cast<double*>(&final_value_bits);
  259|       |
  260|   741k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  261|   741k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  264|   204k|    {
  265|   204k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  266|   204k|                                             RegisterAccessType::Float),
  267|   204k|                   "Mismatch for instruction access type");
  268|       |
  269|   204k|        FloatRegister& reg = GetFloatRegister(id);
  270|       |
  271|   204k|        reg.SetValue(value);
  272|       |
  273|   204k|        const phi::size_t id_value = phi::to_underlying(id);
  274|       |
  275|   204k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  276|   204k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  277|   204k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  280|  83.3k|    {
  281|  83.3k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  282|  83.3k|                                             RegisterAccessType::Double),
  283|  83.3k|                   "Mismatch for instruction access type");
  284|       |
  285|  83.3k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (285:13): [True: 2, False: 83.3k]
  ------------------
  286|      2|        {
  287|      2|            Raise(Exception::MisalignedRegisterAccess);
  288|      2|            return;
  289|      2|        }
  290|       |
  291|  83.3k|        const constexpr phi::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  292|  83.3k|        const constexpr phi::uint64_t second_32_bits = first_32_bits << 32u;
  293|       |
  294|  83.3k|        double              value_raw  = value.unsafe();
  295|  83.3k|        const phi::uint64_t value_bits = *reinterpret_cast<phi::uint64_t*>(&value_raw);
  296|       |
  297|  83.3k|        const phi::uint32_t first_bits  = value_bits & first_32_bits;
  298|  83.3k|        const phi::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  299|       |
  300|  83.3k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  301|  83.3k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  302|       |
  303|  83.3k|        FloatRegister& first_reg = GetFloatRegister(id);
  304|  83.3k|        FloatRegister& second_reg =
  305|  83.3k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<phi::size_t>(id) + 1));
  306|       |
  307|  83.3k|        first_reg.SetValue(first_value);
  308|  83.3k|        second_reg.SetValue(second_value);
  309|       |
  310|  83.3k|        const phi::size_t id_value = phi::to_underlying(id);
  311|       |
  312|  83.3k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  313|  83.3k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  314|  83.3k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  315|  83.3k|    }
_ZN3dlx9Processor7GetFPSREv:
  318|   512k|    {
  319|   512k|        return m_FPSR;
  320|   512k|    }
_ZNK3dlx9Processor7GetFPSREv:
  323|   531k|    {
  324|   531k|        return m_FPSR;
  325|   531k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  328|   531k|    {
  329|   531k|        const StatusRegister& status_reg = GetFPSR();
  330|       |
  331|   531k|        return status_reg.Get();
  332|   531k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  335|   512k|    {
  336|   512k|        StatusRegister& status_reg = GetFPSR();
  337|       |
  338|   512k|        status_reg.SetStatus(value);
  339|   512k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  342|  5.42M|    {
  343|  5.42M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  344|       |
  345|  5.42M|        inst.Execute(*this);
  346|  5.42M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  349|  4.29k|    {
  350|  4.29k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (350:13): [True: 3.24k, False: 1.05k]
  ------------------
  351|  3.24k|        {
  352|  3.24k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.24k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  353|  3.24k|            return false;
  354|  3.24k|        }
  355|       |
  356|  1.05k|        m_CurrentProgram = &program;
  357|       |
  358|  1.05k|        m_ProgramCounter               = 0u;
  359|  1.05k|        m_Halted                       = false;
  360|  1.05k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  361|  1.05k|        m_LastRaisedException          = Exception::None;
  362|  1.05k|        m_CurrentStepCount             = 0u;
  363|       |
  364|  1.05k|        return true;
  365|  4.29k|    }
_ZNK3dlx9Processor17GetCurrentProgramEv:
  368|  1.62M|    {
  369|  1.62M|        return m_CurrentProgram;
  370|  1.62M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  373|  5.42M|    {
  374|       |        // No nothing when no program is loaded
  375|  5.42M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (375:13): [True: 0, False: 5.42M]
  ------------------
  376|      0|        {
  377|      0|            return;
  378|      0|        }
  379|       |
  380|       |        // Halt if there are no instruction to execute
  381|  5.42M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (381:13): [True: 78, False: 5.42M]
  ------------------
  382|     78|        {
  383|     78|            m_Halted                       = true;
  384|     78|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  385|     78|        }
  386|       |
  387|       |        // Do nothing when processor is halted
  388|  5.42M|        if (m_Halted)
  ------------------
  |  Branch (388:13): [True: 78, False: 5.42M]
  ------------------
  389|     78|        {
  390|     78|            return;
  391|     78|        }
  392|       |
  393|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  394|  5.42M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  395|       |
  396|       |        // Get current instruction pointed to by the program counter
  397|  5.42M|        const auto& current_instruction =
  398|  5.42M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  399|       |
  400|       |        // Execute current instruction
  401|  5.42M|        ExecuteInstruction(current_instruction);
  402|       |
  403|       |        // Stop executing if the last instruction halted the processor
  404|  5.42M|        if (m_Halted)
  ------------------
  |  Branch (404:13): [True: 97, False: 5.42M]
  ------------------
  405|     97|        {
  406|     97|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  407|     97|            return;
  408|     97|        }
  409|       |
  410|  5.42M|        m_ProgramCounter = m_NextProgramCounter;
  411|       |
  412|  5.42M|        ++m_CurrentStepCount;
  413|       |
  414|  5.42M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (414:13): [True: 876, False: 5.42M]
  |  Branch (414:14): [True: 5.42M, False: 0]
  |  Branch (414:42): [True: 542, False: 5.42M]
  ------------------
  415|  5.42M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (415:13): [True: 334, False: 5.42M]
  ------------------
  416|    876|        {
  417|    876|            m_Halted                       = true;
  418|    876|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  419|    876|        }
  420|  5.42M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  423|  1.05k|    {
  424|       |        // Do nothing when no program is loaded
  425|  1.05k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (425:13): [True: 0, False: 1.05k]
  ------------------
  426|      0|        {
  427|      0|            return;
  428|      0|        }
  429|       |
  430|  1.05k|        m_ProgramCounter               = 0u;
  431|  1.05k|        m_Halted                       = false;
  432|  1.05k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  433|  1.05k|        m_LastRaisedException          = Exception::None;
  434|  1.05k|        m_CurrentStepCount             = 0u;
  435|       |
  436|  5.42M|        while (!m_Halted)
  ------------------
  |  Branch (436:16): [True: 5.42M, False: 1.05k]
  ------------------
  437|  5.42M|        {
  438|  5.42M|            ExecuteStep();
  439|  5.42M|        }
  440|       |
  441|  1.05k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  442|  1.05k|                   "RegisterAccessType was not reset correctly");
  443|  1.05k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  459|  4.29k|    {
  460|  4.29k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (460:24): [True: 137k, False: 4.29k]
  ------------------
  461|   137k|        {
  462|   137k|            reg.SetSignedValue(0);
  463|   137k|        }
  464|       |
  465|  4.29k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (465:24): [True: 137k, False: 4.29k]
  ------------------
  466|   137k|        {
  467|   137k|            reg.SetValue(0.0f);
  468|   137k|        }
  469|       |
  470|  4.29k|        m_FPSR.SetStatus(false);
  471|  4.29k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  474|  4.29k|    {
  475|  4.29k|        m_MemoryBlock.Clear();
  476|  4.29k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  483|   196k|    {
  484|   196k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  485|       |
  486|   196k|        m_LastRaisedException = exception;
  487|       |
  488|   196k|        switch (exception)
  489|   196k|        {
  490|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (490:13): [True: 6, False: 196k]
  ------------------
  491|      6|                m_Halted = true;
  492|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  493|      6|                return;
  494|  49.3k|            case Exception::Overflow:
  ------------------
  |  Branch (494:13): [True: 49.3k, False: 147k]
  ------------------
  495|  49.3k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  49.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  496|  49.3k|                return;
  497|  69.9k|            case Exception::Underflow:
  ------------------
  |  Branch (497:13): [True: 69.9k, False: 126k]
  ------------------
  498|  69.9k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  69.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  499|  69.9k|                return;
  500|      1|            case Exception::Trap:
  ------------------
  |  Branch (500:13): [True: 1, False: 196k]
  ------------------
  501|      1|                m_Halted = true;
  502|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  503|      1|                return;
  504|      8|            case Exception::Halt:
  ------------------
  |  Branch (504:13): [True: 8, False: 196k]
  ------------------
  505|      8|                m_Halted = true;
  506|      8|                return;
  507|     48|            case Exception::UnknownLabel:
  ------------------
  |  Branch (507:13): [True: 48, False: 196k]
  ------------------
  508|     48|                m_Halted = true;
  509|     48|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     48|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  510|     48|                return;
  511|  76.9k|            case Exception::BadShift:
  ------------------
  |  Branch (511:13): [True: 76.9k, False: 119k]
  ------------------
  512|  76.9k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  76.9k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  513|  76.9k|                return;
  514|     21|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (514:13): [True: 21, False: 196k]
  ------------------
  515|     21|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     21|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  516|     21|                m_Halted = true;
  517|     21|                return;
  518|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (518:13): [True: 15, False: 196k]
  ------------------
  519|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     15|                m_Halted = true;
  521|     15|                return;
  522|       |
  523|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  524|      0|            default:
  ------------------
  |  Branch (524:13): [True: 0, False: 196k]
  ------------------
  525|      0|                PHI_ASSERT_NOT_REACHED();
  526|   196k|#endif
  527|   196k|        }
  528|       |
  529|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  530|      0|        PHI_ASSERT_NOT_REACHED();
  531|      0|#endif
  532|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  553|     10|    {
  554|     10|        return m_MemoryBlock;
  555|     10|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  568|   902k|    {
  569|   902k|        return m_NextProgramCounter;
  570|   902k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  573|  1.62M|    {
  574|  1.62M|        m_NextProgramCounter = new_npc;
  575|  1.62M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   34|  9.67M|    {
   35|  9.67M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   36|  9.67M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   37|       |
   38|  9.67M|        switch (expected_access)
   39|  9.67M|        {
   40|  1.96M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (40:13): [True: 1.96M, False: 7.71M]
  ------------------
   41|  1.96M|                return true;
   42|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (42:13): [True: 0, False: 9.67M]
  ------------------
   43|      0|                return false;
   44|   105k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (44:13): [True: 105k, False: 9.57M]
  ------------------
   45|   105k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (45:24): [True: 52.5k, False: 52.5k]
  |  Branch (45:63): [True: 52.5k, False: 0]
  ------------------
   46|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (46:13): [True: 0, False: 9.67M]
  ------------------
   47|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (47:24): [True: 0, False: 0]
  ------------------
   48|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|  89.1k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (49:13): [True: 89.1k, False: 9.58M]
  ------------------
   50|  89.1k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (50:24): [True: 44.5k, False: 44.5k]
  |  Branch (50:63): [True: 44.5k, False: 0]
  ------------------
   51|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (51:13): [True: 0, False: 9.67M]
  ------------------
   52|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 0, False: 0]
  |  Branch (52:64): [True: 0, False: 0]
  ------------------
   53|  7.51M|            default:
  ------------------
  |  Branch (53:13): [True: 7.51M, False: 2.16M]
  ------------------
   54|  7.51M|                return expected_access == access;
   55|  9.67M|        }
   56|  9.67M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   10|  98.2k|    {
   11|  98.2k|        if (token.length() == 2u)
  ------------------
  |  Branch (11:13): [True: 20.1k, False: 78.0k]
  ------------------
   12|  20.1k|        {
   13|  20.1k|            const char first_char = token[0u];
   14|  20.1k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (14:17): [True: 9.78k, False: 10.3k]
  |  Branch (14:38): [True: 717, False: 9.64k]
  ------------------
   15|  10.5k|            {
   16|  10.5k|                const char second_char = token[1u];
   17|  10.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (17:21): [True: 9.99k, False: 507]
  |  Branch (17:43): [True: 9.90k, False: 89]
  ------------------
   18|  9.90k|                {
   19|  9.90k|                    return static_cast<IntRegisterID>(second_char - '0');
   20|  9.90k|                }
   21|  10.5k|            }
   22|  20.1k|        }
   23|  78.0k|        else if (token.length() == 3u)
  ------------------
  |  Branch (23:18): [True: 27.9k, False: 50.1k]
  ------------------
   24|  27.9k|        {
   25|  27.9k|            const char first_char = token[0u];
   26|  27.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (26:17): [True: 2.28k, False: 25.7k]
  |  Branch (26:38): [True: 1.01k, False: 24.6k]
  ------------------
   27|  3.29k|            {
   28|  3.29k|                const char second_char = token[1u];
   29|  3.29k|                const char third_char  = token[2u];
   30|       |
   31|  3.29k|                switch (second_char)
   32|  3.29k|                {
   33|    762|                    case '1': {
  ------------------
  |  Branch (33:21): [True: 762, False: 2.53k]
  ------------------
   34|    762|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (34:29): [True: 568, False: 194]
  |  Branch (34:50): [True: 501, False: 67]
  ------------------
   35|    501|                        {
   36|    501|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   37|    501|                        }
   38|    261|                        break;
   39|    762|                    }
   40|  1.40k|                    case '2': {
  ------------------
  |  Branch (40:21): [True: 1.40k, False: 1.89k]
  ------------------
   41|  1.40k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (41:29): [True: 1.20k, False: 194]
  |  Branch (41:50): [True: 1.14k, False: 66]
  ------------------
   42|  1.14k|                        {
   43|  1.14k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   44|  1.14k|                        }
   45|    260|                        break;
   46|  1.40k|                    }
   47|    650|                    case '3': {
  ------------------
  |  Branch (47:21): [True: 650, False: 2.64k]
  ------------------
   48|    650|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (48:29): [True: 279, False: 371]
  |  Branch (48:50): [True: 303, False: 68]
  ------------------
   49|    582|                        {
   50|    582|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   51|    582|                        }
   52|     68|                        break;
   53|    650|                    }
   54|    484|                    default: {
  ------------------
  |  Branch (54:21): [True: 484, False: 2.81k]
  ------------------
   55|    484|                        break;
   56|    650|                    }
   57|  3.29k|                }
   58|  3.29k|            }
   59|  27.9k|        }
   60|       |
   61|  86.1k|        return IntRegisterID::None;
   62|  98.2k|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  86.1k|    {
   66|  86.1k|        if (token.length() == 2u)
  ------------------
  |  Branch (66:13): [True: 10.2k, False: 75.8k]
  ------------------
   67|  10.2k|        {
   68|  10.2k|            const char first_char = token[0u];
   69|  10.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (69:17): [True: 771, False: 9.46k]
  |  Branch (69:38): [True: 521, False: 8.94k]
  ------------------
   70|  1.29k|            {
   71|  1.29k|                const char second_char = token[1u];
   72|  1.29k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (72:21): [True: 841, False: 451]
  |  Branch (72:43): [True: 774, False: 67]
  ------------------
   73|    774|                {
   74|    774|                    return static_cast<FloatRegisterID>(second_char - '0');
   75|    774|                }
   76|  1.29k|            }
   77|  10.2k|        }
   78|  75.8k|        else if (token.length() == 3u)
  ------------------
  |  Branch (78:18): [True: 25.7k, False: 50.1k]
  ------------------
   79|  25.7k|        {
   80|  25.7k|            const char first_char = token[0u];
   81|  25.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (81:17): [True: 4.66k, False: 21.1k]
  |  Branch (81:38): [True: 1.25k, False: 19.8k]
  ------------------
   82|  5.91k|            {
   83|  5.91k|                const char second_char = token[1u];
   84|  5.91k|                const char third_char  = token[2u];
   85|       |
   86|  5.91k|                switch (second_char)
   87|  5.91k|                {
   88|  2.61k|                    case '1': {
  ------------------
  |  Branch (88:21): [True: 2.61k, False: 3.29k]
  ------------------
   89|  2.61k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (89:29): [True: 1.65k, False: 962]
  |  Branch (89:50): [True: 1.59k, False: 66]
  ------------------
   90|  1.59k|                        {
   91|  1.59k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   92|  1.59k|                        }
   93|  1.02k|                        break;
   94|  2.61k|                    }
   95|  2.86k|                    case '2': {
  ------------------
  |  Branch (95:21): [True: 2.86k, False: 3.04k]
  ------------------
   96|  2.86k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (96:29): [True: 2.79k, False: 71]
  |  Branch (96:50): [True: 2.73k, False: 66]
  ------------------
   97|  2.73k|                        {
   98|  2.73k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
   99|  2.73k|                        }
  100|    137|                        break;
  101|  2.86k|                    }
  102|    233|                    case '3': {
  ------------------
  |  Branch (102:21): [True: 233, False: 5.68k]
  ------------------
  103|    233|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (103:29): [True: 89, False: 144]
  |  Branch (103:50): [True: 76, False: 68]
  ------------------
  104|    165|                        {
  105|    165|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  106|    165|                        }
  107|     68|                        break;
  108|    233|                    }
  109|    196|                    default: {
  ------------------
  |  Branch (109:21): [True: 196, False: 5.72k]
  ------------------
  110|    196|                        break;
  111|    233|                    }
  112|  5.91k|                }
  113|  5.91k|            }
  114|  25.7k|        }
  115|       |
  116|  80.8k|        return FloatRegisterID::None;
  117|  86.1k|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  120|  99.5k|    {
  121|  99.5k|        if (token.length() == 4u)
  ------------------
  |  Branch (121:13): [True: 30.2k, False: 69.2k]
  ------------------
  122|  30.2k|        {
  123|  30.2k|            const char c1 = token[0u];
  124|  30.2k|            const char c2 = token[1u];
  125|  30.2k|            const char c3 = token[2u];
  126|  30.2k|            const char c4 = token[3u];
  127|       |
  128|  30.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (128:21): [True: 2.02k, False: 28.2k]
  |  Branch (128:34): [True: 397, False: 27.8k]
  |  Branch (128:49): [True: 2.18k, False: 229]
  |  Branch (128:62): [True: 163, False: 66]
  ------------------
  129|  30.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (129:21): [True: 1.96k, False: 388]
  |  Branch (129:34): [True: 322, False: 66]
  |  Branch (129:49): [True: 1.96k, False: 322]
  |  Branch (129:62): [True: 0, False: 322]
  ------------------
  130|  30.2k|        }
  131|       |
  132|  69.2k|        return false;
  133|  99.5k|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   26|   188k|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   36|  67.3k|    {}
_ZNK3dlx5Token7GetTypeEv:
   39|   354k|    {
   40|   354k|        return m_Type;
   41|   354k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   49|   111k|    {
   50|   111k|        return m_LineNumber;
   51|   111k|    }
_ZNK3dlx5Token9GetColumnEv:
   54|  85.0k|    {
   55|  85.0k|        return m_Column;
   56|  85.0k|    }
_ZNK3dlx5Token7GetTextEv:
   64|  78.6k|    {
   65|  78.6k|        return m_Text;
   66|  78.6k|    }
_ZNK3dlx5Token7HasHintEv:
   78|  29.1k|    {
   79|  29.1k|        return m_HasHint;
   80|  29.1k|    }
_ZNK3dlx5Token7GetHintEv:
   83|  41.5k|    {
   84|  41.5k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   85|  41.5k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   86|  41.5k|                   m_Type == Type::ImmediateInteger);
   87|  41.5k|        PHI_ASSERT(m_HasHint);
   88|       |
   89|  41.5k|        return m_Hint;
   90|  41.5k|    }

_ZN3dlx11TokenStream8finalizeEv:
   28|  4.29k|    {
   29|       |#if defined(PHI_DEBUG)
   30|       |        PHI_ASSERT(!m_Finalized);
   31|       |#endif
   32|       |
   33|  4.29k|        m_Iterator = 0u;
   34|       |#if defined(PHI_DEBUG)
   35|       |        m_Finalized = true;
   36|       |#endif
   37|  4.29k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   49|    201|    {
   50|    201|        return x + m_Iterator <= m_Tokens.size();
   51|    201|    }
_ZNK3dlx11TokenStream8has_moreEv:
   54|   259k|    {
   55|   259k|        return m_Iterator < m_Tokens.size();
   56|   259k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   59|   255k|    {
   60|   255k|        return m_Iterator >= m_Tokens.size();
   61|   255k|    }
_ZN3dlx11TokenStream7consumeEv:
   74|   255k|    {
   75|   255k|        PHI_ASSERT(!reached_end());
   76|       |#if defined(PHI_DEBUG)
   77|       |        PHI_ASSERT(m_Finalized);
   78|       |#endif
   79|       |
   80|   255k|        return m_Tokens.at(m_Iterator++.unsafe());
   81|   255k|    }
_ZNK3dlx11TokenStream16current_positionEv:
  154|    199|    {
  155|    199|        return m_Iterator;
  156|    199|    }
_ZNK3dlx11TokenStream6rbeginEv:
  204|    189|    {
  205|       |#if defined(PHI_DEBUG)
  206|       |        //PHI_ASSERT(m_Finalized);
  207|       |#endif
  208|       |
  209|    189|        return m_Tokens.rbegin();
  210|    189|    }
_ZNK3dlx11TokenStream4rendEv:
  213|  2.02k|    {
  214|       |#if defined(PHI_DEBUG)
  215|       |        //PHI_ASSERT(m_Finalized);
  216|       |#endif
  217|       |
  218|  2.02k|        return m_Tokens.rend();
  219|  2.02k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  4.29k|    {
   66|  4.29k|        TokenStream tokens;
   67|       |
   68|  4.29k|        phi::string_view current_token;
   69|       |
   70|  4.29k|        phi::u64 current_line_number{1u};
   71|  4.29k|        phi::u64 current_column{1u};
   72|  4.29k|        phi::u64 token_begin{0u};
   73|       |
   74|  4.29k|        phi::boolean parsing_comment{false};
   75|       |
   76|   584k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 580k, False: 4.29k]
  ------------------
   77|   580k|        {
   78|   580k|            const char c{source.at(i)};
   79|       |
   80|   580k|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 92.6k, False: 487k]
  ------------------
   81|  92.6k|            {
   82|  92.6k|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 12.9k, False: 79.7k]
  ------------------
   83|  12.9k|                {
   84|       |                    // Skip empty lines
   85|  12.9k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|  12.9k|                                        current_line_number, current_column);
   87|       |
   88|  12.9k|                    parsing_comment = false;
   89|  12.9k|                    current_line_number += 1u;
   90|  12.9k|                    current_column = 1u;
   91|  12.9k|                    continue;
   92|  12.9k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  79.7k|                tokens.emplace_back(ParseToken(
   96|  79.7k|                        source.substring_view(
   97|  79.7k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  79.7k|                                current_token.length()),
   99|  79.7k|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  79.7k|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  79.7k|                                    current_line_number, current_column);
  103|       |
  104|  79.7k|                current_token   = phi::string_view{};
  105|  79.7k|                parsing_comment = false;
  106|  79.7k|                current_line_number += 1u;
  107|  79.7k|                current_column = 0u;
  108|  79.7k|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|   487k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 4.54k, False: 482k]
  |  Branch (110:34): [True: 40.0k, False: 442k]
  ------------------
  111|  44.5k|            {
  112|  44.5k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 36.0k, False: 8.56k]
  ------------------
  113|  36.0k|                {
  114|  36.0k|                    token_begin = i;
  115|  36.0k|                }
  116|  8.56k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 8.27k, False: 294]
  ------------------
  117|  8.27k|                {
  118|  8.27k|                    tokens.emplace_back(ParseToken(
  119|  8.27k|                            source.substring_view(
  120|  8.27k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  8.27k|                                    current_token.length()),
  122|  8.27k|                            current_line_number, current_column - current_token.length()));
  123|  8.27k|                    token_begin   = i;
  124|  8.27k|                    current_token = phi::string_view{};
  125|  8.27k|                }
  126|       |
  127|  44.5k|                parsing_comment = true;
  128|  44.5k|                current_token   = source.substring_view(
  129|  44.5k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|  44.5k|                        current_token.length() + 1u);
  131|  44.5k|            }
  132|   442k|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 63.0k, False: 379k]
  ------------------
  133|  63.0k|            {
  134|       |                // simply append the character
  135|  63.0k|                current_token = source.substring_view(
  136|  63.0k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  63.0k|                        current_token.length() + 1u);
  138|  63.0k|            }
  139|   379k|            else
  140|   379k|            {
  141|       |                // Not parsing a comment
  142|   379k|                switch (c)
  143|   379k|                {
  144|  36.8k|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 36.8k, False: 342k]
  ------------------
  145|  37.7k|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 827, False: 378k]
  ------------------
  146|  39.0k|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 1.37k, False: 378k]
  ------------------
  147|  39.0k|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 474, False: 38.6k]
  ------------------
  148|    474|                        {
  149|    474|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|    474|                            continue;
  152|    474|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  38.6k|                        tokens.emplace_back(ParseToken(
  156|  38.6k|                                source.substring_view(
  157|  38.6k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  38.6k|                                        current_token.length()),
  159|  38.6k|                                current_line_number, current_column - current_token.length()));
  160|  38.6k|                        current_token = phi::string_view{};
  161|  38.6k|                        break;
  162|  6.84k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 6.84k, False: 372k]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  6.84k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 4.71k, False: 2.12k]
  ------------------
  165|  4.71k|                        {
  166|  4.71k|                            current_token = source.substring_view(
  167|  4.71k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  4.71k|                                    current_token.length() + 1u);
  169|  4.71k|                            tokens.emplace_back(ParseToken(
  170|  4.71k|                                    source.substring_view(
  171|  4.71k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  4.71k|                                                    token_begin),
  173|  4.71k|                                            current_token.length()),
  174|  4.71k|                                    current_line_number,
  175|  4.71k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  4.71k|                            current_token = phi::string_view{};
  178|  4.71k|                        }
  179|  2.12k|                        else
  180|  2.12k|                        {
  181|       |                            // Orphan colon
  182|  2.12k|                            token_begin = i;
  183|       |
  184|  2.12k|                            tokens.emplace_back(
  185|  2.12k|                                    Token::Type::Colon,
  186|  2.12k|                                    source.substring_view(
  187|  2.12k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  2.12k|                                                    token_begin),
  189|  2.12k|                                            1u),
  190|  2.12k|                                    current_line_number, current_column);
  191|  2.12k|                        }
  192|  6.84k|                        break;
  193|  12.1k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 12.1k, False: 367k]
  ------------------
  194|  13.9k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 1.82k, False: 377k]
  ------------------
  195|  14.7k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 812, False: 378k]
  ------------------
  196|  14.7k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 12.3k, False: 2.40k]
  ------------------
  197|  12.3k|                        {
  198|  12.3k|                            tokens.emplace_back(ParseToken(
  199|  12.3k|                                    source.substring_view(
  200|  12.3k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|  12.3k|                                                    token_begin),
  202|  12.3k|                                            current_token.length()),
  203|  12.3k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|  12.3k|                            current_token = phi::string_view{};
  206|  12.3k|                        }
  207|       |
  208|  14.7k|                        Token::Type type;
  209|  14.7k|                        switch (c)
  210|  14.7k|                        {
  211|  12.1k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 12.1k, False: 2.63k]
  ------------------
  212|  12.1k|                                type = Token::Type::Comma;
  213|  12.1k|                                break;
  214|  1.82k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 1.82k, False: 12.9k]
  ------------------
  215|  1.82k|                                type = Token::Type::OpenBracket;
  216|  1.82k|                                break;
  217|    812|                            case ')':
  ------------------
  |  Branch (217:29): [True: 812, False: 13.9k]
  ------------------
  218|    812|                                type = Token::Type::ClosingBracket;
  219|    812|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 14.7k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|  14.7k|#endif
  225|  14.7k|                        }
  226|       |
  227|  14.7k|                        token_begin = i;
  228|       |
  229|  14.7k|                        tokens.emplace_back(
  230|  14.7k|                                type,
  231|  14.7k|                                source.substring_view(
  232|  14.7k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|  14.7k|                                        1u),
  234|  14.7k|                                current_line_number, current_column);
  235|  14.7k|                        break;
  236|       |
  237|   319k|                    default:
  ------------------
  |  Branch (237:21): [True: 319k, False: 60.7k]
  ------------------
  238|   319k|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 101k, False: 217k]
  ------------------
  239|   101k|                        {
  240|   101k|                            token_begin = i;
  241|   101k|                        }
  242|       |
  243|       |                        // simply append the character
  244|   319k|                        current_token = source.substring_view(
  245|   319k|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|   319k|                                current_token.length() + 1u);
  247|   379k|                }
  248|   379k|            }
  249|       |
  250|   566k|            current_column += 1u;
  251|   566k|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  4.29k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 2.12k, False: 2.16k]
  ------------------
  255|  2.12k|        {
  256|  2.12k|            tokens.emplace_back(
  257|  2.12k|                    ParseToken(source.substring_view(
  258|  2.12k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  2.12k|                                       current_token.length()),
  260|  2.12k|                               current_line_number, current_column - current_token.length()));
  261|  2.12k|        }
  262|       |
  263|       |        // Finalize token stream
  264|  4.29k|        tokens.finalize();
  265|       |
  266|  4.29k|        return tokens;
  267|  4.29k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|   145k|    {
   14|   145k|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 3.44k, False: 142k]
  |  Branch (14:13): [True: 3.35k, False: 142k]
  |  Branch (14:36): [True: 3.35k, False: 87]
  ------------------
   15|  3.35k|        {
   16|  3.35k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  3.35k|            if (number)
  ------------------
  |  Branch (18:17): [True: 2.98k, False: 365]
  ------------------
   19|  2.98k|            {
   20|  2.98k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  2.98k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  2.98k|            }
   23|       |
   24|    365|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  3.35k|        }
   26|       |
   27|   142k|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 4.31k, False: 138k]
  |  Branch (27:13): [True: 44.2k, False: 98.2k]
  |  Branch (27:36): [True: 39.9k, False: 98.2k]
  ------------------
   28|  44.2k|        {
   29|  44.2k|            return {Token::Type::Comment, token, line_number, column};
   30|  44.2k|        }
   31|       |
   32|  98.2k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 5.24k, False: 92.9k]
  ------------------
   33|  5.24k|        {
   34|  5.24k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  5.24k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  5.24k|        }
   37|       |
   38|  92.9k|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 1.96k, False: 90.9k]
  ------------------
   39|  1.96k|        {
   40|  1.96k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  1.96k|        }
   42|       |
   43|  90.9k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 12.0k, False: 78.9k]
  ------------------
   44|  12.0k|        {
   45|  12.0k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|  12.0k|                    static_cast<phi::uint32_t>(id)};
   47|  12.0k|        }
   48|       |
   49|  78.9k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 5.19k, False: 73.7k]
  ------------------
   50|  5.19k|        {
   51|  5.19k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  5.19k|                    static_cast<phi::uint32_t>(id)};
   53|  5.19k|        }
   54|       |
   55|  73.7k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 41.8k, False: 31.9k]
  ------------------
   56|  41.8k|        {
   57|  41.8k|            return {Token::Type::OpCode, token, line_number, column,
   58|  41.8k|                    static_cast<phi::uint32_t>(opcode)};
   59|  41.8k|        }
   60|       |
   61|  31.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  73.7k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   58|  4.29k|    {
   59|       |        // Constants
   60|  4.29k|        constexpr phi::uint8_t number_of_opcodes =
   61|  4.29k|                static_cast<phi::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   62|  4.29k|        constexpr phi::uint8_t number_of_int_registers   = 32;
   63|  4.29k|        constexpr phi::uint8_t number_of_float_registers = 32;
   64|       |
   65|  4.29k|        std::string ret;
   66|       |
   67|   118k|        for (phi::size_t index{0}; index < size;)
  ------------------
  |  Branch (67:36): [True: 113k, False: 4.28k]
  ------------------
   68|   113k|        {
   69|   113k|            phi::uint8_t current_value = data[index++];
   70|       |
   71|   113k|            switch (current_value)
   72|   113k|            {
   73|       |                // OpCode
   74|  28.8k|                case 0: {
  ------------------
  |  Branch (74:17): [True: 28.8k, False: 84.8k]
  ------------------
   75|       |                    // Has one more value
   76|  28.8k|                    if (index < size)
  ------------------
  |  Branch (76:25): [True: 28.8k, False: 8]
  ------------------
   77|  28.8k|                    {
   78|  28.8k|                        phi::uint8_t opcode_value = data[index++] % number_of_opcodes;
   79|       |
   80|  28.8k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   81|       |
   82|  28.8k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (82:29): [True: 1, False: 28.8k]
  ------------------
   83|      1|                        {
   84|      1|                            return detail::ErrorString;
   85|      1|                        }
   86|  28.8k|                    }
   87|  28.8k|                    break;
   88|  28.8k|                }
   89|       |
   90|       |                // Int Register
   91|  28.8k|                case 1: {
  ------------------
  |  Branch (91:17): [True: 12.0k, False: 101k]
  ------------------
   92|       |                    // Has one more value
   93|  12.0k|                    if (index < size)
  ------------------
  |  Branch (93:25): [True: 12.0k, False: 1]
  ------------------
   94|  12.0k|                    {
   95|  12.0k|                        phi::uint8_t opcode_value = data[index++] % number_of_int_registers;
   96|       |
   97|  12.0k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   98|  12.0k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (98:29): [True: 1, False: 12.0k]
  ------------------
   99|      1|                        {
  100|      1|                            return detail::ErrorString;
  101|      1|                        }
  102|  12.0k|                    }
  103|  12.0k|                    break;
  104|  12.0k|                }
  105|       |
  106|       |                // Float register
  107|  12.0k|                case 2: {
  ------------------
  |  Branch (107:17): [True: 5.23k, False: 108k]
  ------------------
  108|       |                    // Has one more value
  109|  5.23k|                    if (index < size)
  ------------------
  |  Branch (109:25): [True: 5.23k, False: 1]
  ------------------
  110|  5.23k|                    {
  111|  5.23k|                        phi::uint8_t opcode_value = data[index++] % number_of_float_registers;
  112|       |
  113|  5.23k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  114|  5.23k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (114:29): [True: 1, False: 5.23k]
  ------------------
  115|      1|                        {
  116|      1|                            return detail::ErrorString;
  117|      1|                        }
  118|  5.23k|                    }
  119|  5.23k|                    break;
  120|  5.23k|                }
  121|       |
  122|       |                // Floating point status register
  123|  5.23k|                case 3: {
  ------------------
  |  Branch (123:17): [True: 2.53k, False: 111k]
  ------------------
  124|  2.53k|                    ret += "FPSR";
  125|  2.53k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (125:25): [True: 2, False: 2.53k]
  ------------------
  126|      2|                    {
  127|      2|                        return detail::ErrorString;
  128|      2|                    }
  129|       |
  130|  2.53k|                    break;
  131|  2.53k|                }
  132|       |
  133|       |                // Immediate integer
  134|  3.89k|                case 4: {
  ------------------
  |  Branch (134:17): [True: 3.89k, False: 109k]
  ------------------
  135|  3.89k|                    ret += "#";
  136|  3.89k|                    [[fallthrough]];
  137|  3.89k|                }
  138|       |
  139|       |                // Integer literal
  140|  10.7k|                case 5: {
  ------------------
  |  Branch (140:17): [True: 6.87k, False: 106k]
  ------------------
  141|  10.7k|                    phi::size_t size_of_int = std::min(2ul, size - index);
  142|       |
  143|  10.7k|                    if (size_of_int > 0)
  ------------------
  |  Branch (143:25): [True: 10.7k, False: 41]
  ------------------
  144|  10.7k|                    {
  145|  10.7k|                        phi::int16_t value = 0;
  146|       |
  147|  32.0k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (147:32): [True: 21.3k, False: 10.7k]
  ------------------
  148|  21.3k|                        {
  149|  21.3k|                            value <<= 8;
  150|  21.3k|                            value &= data[index++];
  151|  21.3k|                        }
  152|       |
  153|  10.7k|                        ret += std::to_string(value);
  154|  10.7k|                    }
  155|  10.7k|                    break;
  156|  3.89k|                }
  157|       |
  158|       |                // Label
  159|  3.23k|                case 6: {
  ------------------
  |  Branch (159:17): [True: 3.23k, False: 110k]
  ------------------
  160|  3.23k|                    phi::size_t label_length = std::min(5ul, size - index);
  161|       |
  162|  3.23k|                    if (label_length > 0)
  ------------------
  |  Branch (162:25): [True: 3.23k, False: 2]
  ------------------
  163|  3.23k|                    {
  164|  3.23k|                        std::string label_name = "lbl_";
  165|       |
  166|  19.1k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (166:32): [True: 15.8k, False: 3.23k]
  ------------------
  167|  15.8k|                        {
  168|  15.8k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  169|       |
  170|  15.8k|                            label_name += c;
  171|  15.8k|                        }
  172|       |
  173|       |                        // Add 1 in 10 chance to add a colon
  174|  3.23k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (174:29): [True: 2.92k, False: 306]
  |  Branch (174:45): [True: 2.37k, False: 548]
  ------------------
  175|  2.37k|                        {
  176|  2.37k|                            label_name += ':';
  177|  2.37k|                            ret += label_name;
  178|  2.37k|                        }
  179|    854|                        else
  180|    854|                        {
  181|    854|                            ret += label_name;
  182|    854|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (182:33): [True: 1, False: 853]
  ------------------
  183|      1|                            {
  184|      1|                                return detail::ErrorString;
  185|      1|                            }
  186|    854|                        }
  187|  3.23k|                    }
  188|  3.23k|                    break;
  189|  3.23k|                }
  190|       |
  191|       |                // Newline
  192|  11.0k|                case 7: {
  ------------------
  |  Branch (192:17): [True: 11.0k, False: 102k]
  ------------------
  193|  11.0k|                    ret += '\n';
  194|  11.0k|                    break;
  195|  3.23k|                }
  196|       |
  197|       |                // Comment
  198|  39.9k|                case 8: {
  ------------------
  |  Branch (198:17): [True: 39.9k, False: 73.7k]
  ------------------
  199|  39.9k|                    phi::size_t comment_length = std::min(5ul, size - index);
  200|       |
  201|  39.9k|                    if (comment_length > 0)
  ------------------
  |  Branch (201:25): [True: 39.9k, False: 13]
  ------------------
  202|  39.9k|                    {
  203|  39.9k|                        std::string comment = "; ";
  204|       |
  205|   238k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (205:32): [True: 198k, False: 39.9k]
  ------------------
  206|   198k|                        {
  207|   198k|                            comment += static_cast<char>(data[index++]);
  208|   198k|                        }
  209|       |
  210|  39.9k|                        ret += comment + '\n';
  211|  39.9k|                    }
  212|  39.9k|                    break;
  213|  3.23k|                }
  214|       |
  215|       |                // Ignore
  216|      2|                default:
  ------------------
  |  Branch (216:17): [True: 2, False: 113k]
  ------------------
  217|      2|                    return detail::ErrorString;
  218|   113k|            }
  219|   113k|        }
  220|       |
  221|  4.28k|        return ret;
  222|  4.29k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   23|  49.5k|        {
   24|  49.5k|            if (index < size)
  ------------------
  |  Branch (24:17): [True: 47.6k, False: 1.91k]
  ------------------
   25|  47.6k|            {
   26|  47.6k|                phi::uint8_t val = data[index++];
   27|  47.6k|                if (val == 0)
  ------------------
  |  Branch (27:21): [True: 36.7k, False: 10.8k]
  ------------------
   28|  36.7k|                {
   29|  36.7k|                    text += ' ';
   30|  36.7k|                }
   31|  10.8k|                else if (val == 1)
  ------------------
  |  Branch (31:26): [True: 10.8k, False: 6]
  ------------------
   32|  10.8k|                {
   33|  10.8k|                    text += ',';
   34|  10.8k|                }
   35|      6|                else
   36|      6|                {
   37|      6|                    return false;
   38|      6|                }
   39|  47.6k|            }
   40|       |
   41|  49.5k|            return true;
   42|  49.5k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   47|  15.8k|        {
   48|  15.8k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (48:17): [True: 11.5k, False: 4.31k]
  ------------------
   49|  11.5k|            {
   50|  11.5k|                return '_';
   51|  11.5k|            }
   52|       |
   53|  4.31k|            return c;
   54|  15.8k|        }

LLVMFuzzerTestOneInput:
   11|  4.29k|{
   12|  4.29k|    static dlx::Processor processor;
   13|       |
   14|  4.29k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   15|       |
   16|       |    // Parse it
   17|  4.29k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   18|       |
   19|       |    // Clear registers and memory
   20|  4.29k|    processor.ClearRegisters();
   21|  4.29k|    processor.ClearMemory();
   22|       |
   23|       |    // Execute
   24|  4.29k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (24:9): [True: 1.05k, False: 3.24k]
  ------------------
   25|  1.05k|    {
   26|  1.05k|        processor.ExecuteCurrentProgram();
   27|  1.05k|    }
   28|       |
   29|  4.29k|    return 0;
   30|  4.29k|}


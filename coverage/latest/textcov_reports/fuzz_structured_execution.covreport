_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   119k|        {
  169|   119k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   119k|            switch (index.unsafe())
  172|   119k|            {
  173|  48.3k|                case 0:
  ------------------
  |  Branch (173:17): [True: 48.3k, False: 71.3k]
  ------------------
  174|  48.3k|                    return m_Arg1Type;
  175|       |
  176|  36.4k|                case 1:
  ------------------
  |  Branch (176:17): [True: 36.4k, False: 83.2k]
  ------------------
  177|  36.4k|                    return m_Arg2Type;
  178|       |
  179|  34.9k|                case 2:
  ------------------
  |  Branch (179:17): [True: 34.9k, False: 84.7k]
  ------------------
  180|  34.9k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 119k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   119k|#endif
  187|   119k|            }
  188|   119k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  30.9k|        {
  195|  30.9k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  30.9k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 29.6k, False: 1.26k]
  ------------------
  199|  29.6k|            {
  200|  29.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  29.6k|            }
  202|  30.9k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 23.6k, False: 7.30k]
  ------------------
  203|  23.6k|            {
  204|  23.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  23.6k|            }
  206|  30.9k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 15.4k, False: 15.4k]
  ------------------
  207|  15.4k|            {
  208|  15.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  15.4k|            }
  210|       |
  211|  30.9k|            return number_of_argument_required;
  212|  30.9k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  4.82M|        {
  216|  4.82M|            return m_RegisterAccessType;
  217|  4.82M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  30.9k|        {
  221|  30.9k|            return m_Executor;
  222|  30.9k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  14.4M|    {
   38|  14.4M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  14.4M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  14.4M|                                         static_cast<underlying_t>(rhs));
   42|  14.4M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  14.4M|    {
   55|  14.4M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  14.4M|        return static_cast<underlying_t>(type & test) != 0;
   58|  14.4M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|  78.1k|    {
  205|  78.1k|        switch (value)
  206|  78.1k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  24.9k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  24.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 24.9k, False: 53.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|  24.9k|        return #name;
  |  |  ------------------
  |  |   16|  24.9k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.02k, False: 76.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.02k|        return #name;
  |  |  ------------------
  |  |   17|  2.02k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    382|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 382, False: 77.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    382|        return #name;
  |  |  ------------------
  |  |   18|  1.45k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.45k, False: 76.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.45k|        return #name;
  |  |  ------------------
  |  |   19|  1.45k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    398|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 398, False: 77.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    398|        return #name;
  |  |  ------------------
  |  |   20|    675|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    675|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 675, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    675|        return #name;
  |  |  ------------------
  |  |   21|    675|                                                                                                   \
  |  |   22|    675|    /* Sub */                                                                                      \
  |  |   23|    675|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    633|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 633, False: 77.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    633|        return #name;
  |  |  ------------------
  |  |   24|    633|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    215|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 215, False: 77.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    215|        return #name;
  |  |  ------------------
  |  |   25|    970|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    970|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 970, False: 77.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|    970|        return #name;
  |  |  ------------------
  |  |   26|    970|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |   27|    529|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    529|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 529, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    529|        return #name;
  |  |  ------------------
  |  |   28|    529|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    366|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 366, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    366|        return #name;
  |  |  ------------------
  |  |   29|    366|                                                                                                   \
  |  |   30|    366|    /* Multiplication */                                                                           \
  |  |   31|    916|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    916|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 916, False: 77.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    916|        return #name;
  |  |  ------------------
  |  |   32|    916|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    290|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 290, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    290|        return #name;
  |  |  ------------------
  |  |   33|    692|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    692|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 692, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    692|        return #name;
  |  |  ------------------
  |  |   34|    692|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    168|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 168, False: 77.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    168|        return #name;
  |  |  ------------------
  |  |   35|    768|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    768|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 768, False: 77.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    768|        return #name;
  |  |  ------------------
  |  |   36|    768|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    124|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 124, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    124|        return #name;
  |  |  ------------------
  |  |   37|    124|                                                                                                   \
  |  |   38|    124|    /* Division */                                                                                 \
  |  |   39|    124|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |   40|     90|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |   41|    104|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    104|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 104, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    104|        return #name;
  |  |  ------------------
  |  |   42|    512|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    512|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 512, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    512|        return #name;
  |  |  ------------------
  |  |   43|    512|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    134|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 134, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    134|        return #name;
  |  |  ------------------
  |  |   44|    134|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 87, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     87|        return #name;
  |  |  ------------------
  |  |   45|     87|                                                                                                   \
  |  |   46|     87|    /* Shift left (logical) */                                                                     \
  |  |   47|    149|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    149|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 149, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    149|        return #name;
  |  |  ------------------
  |  |   48|    209|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 209, False: 77.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    209|        return #name;
  |  |  ------------------
  |  |   49|    209|                                                                                                   \
  |  |   50|    209|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.19k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.19k, False: 76.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.19k|        return #name;
  |  |  ------------------
  |  |   52|  1.61k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.61k, False: 76.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.61k|        return #name;
  |  |  ------------------
  |  |   53|  1.61k|                                                                                                   \
  |  |   54|  1.61k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.61k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    564|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 564, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    564|        return #name;
  |  |  ------------------
  |  |   56|    564|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 92, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     92|        return #name;
  |  |  ------------------
  |  |   57|     92|                                                                                                   \
  |  |   58|     92|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    120|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    120|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 120, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    120|        return #name;
  |  |  ------------------
  |  |   60|    200|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 200, False: 77.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    200|        return #name;
  |  |  ------------------
  |  |   61|    200|                                                                                                   \
  |  |   62|    200|    /* Logic */                                                                                    \
  |  |   63|    200|                                                                                                   \
  |  |   64|    200|    /* And */                                                                                      \
  |  |   65|    200|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    147|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 147, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    147|        return #name;
  |  |  ------------------
  |  |   66|    814|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    814|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 814, False: 77.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    814|        return #name;
  |  |  ------------------
  |  |   67|    814|                                                                                                   \
  |  |   68|    814|    /* Or */                                                                                       \
  |  |   69|    814|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |   70|     86|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   71|     86|                                                                                                   \
  |  |   72|     86|    /* XOR */                                                                                      \
  |  |   73|    616|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    616|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 616, False: 77.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    616|        return #name;
  |  |  ------------------
  |  |   74|    732|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    732|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 732, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    732|        return #name;
  |  |  ------------------
  |  |   75|    732|                                                                                                   \
  |  |   76|    732|    /* Set conditionals */                                                                         \
  |  |   77|    732|                                                                                                   \
  |  |   78|    732|    /* Less than */                                                                                \
  |  |   79|    732|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    132|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 132, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    132|        return #name;
  |  |  ------------------
  |  |   80|    878|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    878|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 878, False: 77.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    878|        return #name;
  |  |  ------------------
  |  |   81|    878|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    182|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 182, False: 77.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    182|        return #name;
  |  |  ------------------
  |  |   82|    182|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 110, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    110|        return #name;
  |  |  ------------------
  |  |   83|    110|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |   84|    111|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |   85|    111|                                                                                                   \
  |  |   86|    111|    /* Greater than */                                                                             \
  |  |   87|    679|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    679|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 679, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    679|        return #name;
  |  |  ------------------
  |  |   88|    679|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   89|    594|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    594|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 594, False: 77.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    594|        return #name;
  |  |  ------------------
  |  |   90|    594|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   91|    807|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    807|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 807, False: 77.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    807|        return #name;
  |  |  ------------------
  |  |   92|    807|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    697|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 697, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    697|        return #name;
  |  |  ------------------
  |  |   93|    697|                                                                                                   \
  |  |   94|    697|    /* Less than or equal */                                                                       \
  |  |   95|    697|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    272|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 272, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    272|        return #name;
  |  |  ------------------
  |  |   96|    297|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    297|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 297, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    297|        return #name;
  |  |  ------------------
  |  |   97|    297|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    118|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 118, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    118|        return #name;
  |  |  ------------------
  |  |   98|    367|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    367|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 367, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    367|        return #name;
  |  |  ------------------
  |  |   99|    367|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    119|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 119, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    119|        return #name;
  |  |  ------------------
  |  |  100|  1.23k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.23k, False: 76.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.23k|        return #name;
  |  |  ------------------
  |  |  101|  1.23k|                                                                                                   \
  |  |  102|  1.23k|    /* Greater than or equal */                                                                    \
  |  |  103|  2.26k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.26k, False: 75.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.26k|        return #name;
  |  |  ------------------
  |  |  104|  2.26k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.18k, False: 76.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.18k|        return #name;
  |  |  ------------------
  |  |  105|  1.18k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    157|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 157, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    157|        return #name;
  |  |  ------------------
  |  |  106|    380|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    380|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 380, False: 77.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    380|        return #name;
  |  |  ------------------
  |  |  107|    380|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 82, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     82|        return #name;
  |  |  ------------------
  |  |  108|     99|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  109|     99|                                                                                                   \
  |  |  110|     99|    /* Equal */                                                                                    \
  |  |  111|     99|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  112|    558|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    558|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 558, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    558|        return #name;
  |  |  ------------------
  |  |  113|  1.92k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.92k, False: 76.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.92k|        return #name;
  |  |  ------------------
  |  |  114|  1.92k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    499|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 499, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    499|        return #name;
  |  |  ------------------
  |  |  115|    499|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    326|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 326, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    326|        return #name;
  |  |  ------------------
  |  |  116|    326|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  117|     79|                                                                                                   \
  |  |  118|     79|    /* Not equal */                                                                                \
  |  |  119|  1.55k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.55k, False: 76.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.55k|        return #name;
  |  |  ------------------
  |  |  120|  1.55k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    153|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 153, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    153|        return #name;
  |  |  ------------------
  |  |  121|    153|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  122|    170|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    170|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 170, False: 77.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|    170|        return #name;
  |  |  ------------------
  |  |  123|    170|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  124|     83|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 83, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     83|        return #name;
  |  |  ------------------
  |  |  125|     83|                                                                                                   \
  |  |  126|     83|    /* Conditional branching */                                                                    \
  |  |  127|    105|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    105|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 105, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    105|        return #name;
  |  |  ------------------
  |  |  128|    105|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  129|    101|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 92, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     92|        return #name;
  |  |  ------------------
  |  |  130|  2.61k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.61k, False: 75.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.61k|        return #name;
  |  |  ------------------
  |  |  131|  2.61k|                                                                                                   \
  |  |  132|  2.61k|    /* Unconditional branching */                                                                  \
  |  |  133|  2.61k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|    934|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 934, False: 77.2k]
  |  |  |  |  ------------------
  |  |  |  |  209|    934|        return #name;
  |  |  ------------------
  |  |  134|    934|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 76, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     76|        return #name;
  |  |  ------------------
  |  |  135|    839|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    839|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 839, False: 77.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    839|        return #name;
  |  |  ------------------
  |  |  136|  1.01k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.01k, False: 77.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.01k|        return #name;
  |  |  ------------------
  |  |  137|  1.01k|                                                                                                   \
  |  |  138|  1.01k|    /* Loading data */                                                                             \
  |  |  139|  1.01k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    852|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 852, False: 77.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    852|        return #name;
  |  |  ------------------
  |  |  140|    852|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  141|     78|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |  142|     78|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 75, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     75|        return #name;
  |  |  ------------------
  |  |  143|  1.01k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.01k, False: 77.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.01k|        return #name;
  |  |  ------------------
  |  |  144|  1.83k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.83k, False: 76.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.83k|        return #name;
  |  |  ------------------
  |  |  145|  1.83k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 78.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  146|     70|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  147|    412|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    412|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 412, False: 77.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    412|        return #name;
  |  |  ------------------
  |  |  148|    412|                                                                                                   \
  |  |  149|    412|    /* Storing data */                                                                             \
  |  |  150|    732|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    732|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 732, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    732|        return #name;
  |  |  ------------------
  |  |  151|    732|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  152|     78|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |  153|    841|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    841|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 841, False: 77.3k]
  |  |  |  |  ------------------
  |  |  |  |  209|    841|        return #name;
  |  |  ------------------
  |  |  154|    841|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 73, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     73|        return #name;
  |  |  ------------------
  |  |  155|    724|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    724|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 724, False: 77.4k]
  |  |  |  |  ------------------
  |  |  |  |  209|    724|        return #name;
  |  |  ------------------
  |  |  156|  1.57k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.57k, False: 76.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.57k|        return #name;
  |  |  ------------------
  |  |  157|  1.57k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 99, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     99|        return #name;
  |  |  ------------------
  |  |  158|     99|                                                                                                   \
  |  |  159|     99|    /* Moving data */                                                                              \
  |  |  160|    474|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    474|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 474, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    474|        return #name;
  |  |  ------------------
  |  |  161|    474|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 93, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     93|        return #name;
  |  |  ------------------
  |  |  162|    572|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    572|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 572, False: 77.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    572|        return #name;
  |  |  ------------------
  |  |  163|    572|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    523|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 523, False: 77.6k]
  |  |  |  |  ------------------
  |  |  |  |  209|    523|        return #name;
  |  |  ------------------
  |  |  164|    523|                                                                                                   \
  |  |  165|    523|    /* Converting data */                                                                          \
  |  |  166|    523|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  167|     98|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |  168|     98|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |  169|    291|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    291|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 291, False: 77.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|    291|        return #name;
  |  |  ------------------
  |  |  170|    291|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |  171|     98|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 89, False: 78.0k]
  |  |  |  |  ------------------
  |  |  |  |  209|     89|        return #name;
  |  |  ------------------
  |  |  172|     89|                                                                                                   \
  |  |  173|     89|    /* Other */                                                                                    \
  |  |  174|    420|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    420|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 420, False: 77.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    420|        return #name;
  |  |  ------------------
  |  |  175|    420|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    393|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 393, False: 77.7k]
  |  |  |  |  ------------------
  |  |  |  |  209|    393|        return #name;
  |  |  ------------------
  |  |  176|    600|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|    600|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 600, False: 77.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|    600|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 78.1k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|  78.1k|        }
  218|  78.1k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  9.48k|    {
   32|  9.48k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 166, False: 9.32k]
  ------------------
   33|    166|        {
   34|    166|            return true;
   35|    166|        }
   36|       |
   37|  9.32k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 71, False: 9.24k]
  ------------------
   38|     71|        {
   39|     71|            return true;
   40|     71|        }
   41|       |
   42|  9.24k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 513, False: 8.73k]
  ------------------
   43|    513|        {
   44|    513|            return true;
   45|    513|        }
   46|       |
   47|  8.73k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 8.73k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  8.73k|        return false;
   53|  8.73k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  8.73k|    {
   57|  8.73k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 8.73k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  8.73k|        const char first_char = token.at(0);
   63|       |
   64|  8.73k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 948, False: 7.78k]
  ------------------
   65|    948|        {
   66|    948|            return phi::is_alpha(first_char);
   67|    948|        }
   68|       |
   69|  7.78k|        phi::boolean just_under_scores = (first_char == '_');
   70|  7.78k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 1.11k, False: 6.66k]
  |  Branch (70:15): [True: 6.50k, False: 1.28k]
  |  Branch (70:44): [True: 165, False: 1.11k]
  ------------------
   71|  1.11k|        {
   72|  1.11k|            return false;
   73|  1.11k|        }
   74|       |
   75|  42.3k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 37.9k, False: 4.37k]
  ------------------
   76|  37.9k|        {
   77|  37.9k|            const char c{token.at(index)};
   78|       |
   79|  37.9k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 15.3k, False: 22.6k]
  ------------------
   80|  15.3k|            {
   81|  15.3k|                just_under_scores = false;
   82|  15.3k|            }
   83|  22.6k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 20.3k, False: 2.29k]
  ------------------
   84|  20.3k|            {
   85|  20.3k|                continue;
   86|  20.3k|            }
   87|  2.29k|            else
   88|  2.29k|            {
   89|  2.29k|                return false;
   90|  2.29k|            }
   91|  37.9k|        }
   92|       |
   93|  4.37k|        return !just_under_scores;
   94|  6.66k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   168k|    {
  101|   168k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 168k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   168k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 12.6k, False: 155k]
  ------------------
  107|  12.6k|        {
  108|  12.6k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 6.15k, False: 6.47k]
  ------------------
  109|  6.15k|            {
  110|  6.15k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  6.15k|            }
  112|       |
  113|  6.47k|            return {};
  114|  12.6k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   155k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 151, False: 155k]
  ------------------
  118|    151|        {
  119|    151|            return {};
  120|    151|        }
  121|       |
  122|   155k|        std::int32_t number{0};
  123|   155k|        phi::boolean is_negative{false};
  124|   155k|        phi::boolean starts_with_zero{false};
  125|   155k|        phi::boolean parsing_binary{false};
  126|   155k|        phi::boolean parsing_octal{false};
  127|   155k|        phi::boolean parsing_hexadecimal{false};
  128|   155k|        phi::boolean parsed_something{false};
  129|   155k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   173k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 171k, False: 2.22k]
  ------------------
  134|   171k|        {
  135|   171k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   171k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 155k, False: 15.9k]
  ------------------
  139|   155k|            {
  140|   155k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 108, False: 155k]
  ------------------
  141|    108|                {
  142|    108|                    continue;
  143|    108|                }
  144|       |
  145|   155k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 226, False: 154k]
  ------------------
  146|    226|                {
  147|    226|                    is_negative = true;
  148|    226|                    continue;
  149|    226|                }
  150|       |
  151|   154k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 7.30k, False: 147k]
  ------------------
  152|  7.30k|                {
  153|  7.30k|                    starts_with_zero = true;
  154|  7.30k|                    continue;
  155|  7.30k|                }
  156|       |
  157|   147k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 66, False: 147k]
  ------------------
  158|     66|                {
  159|     66|                    return {};
  160|     66|                }
  161|   147k|            }
  162|       |
  163|       |            // Second character
  164|   163k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 7.94k, False: 155k]
  ------------------
  165|  7.94k|            {
  166|  7.94k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 7.30k, False: 641]
  ------------------
  167|  7.30k|                {
  168|       |                    // Binary
  169|  7.30k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 986, False: 6.31k]
  |  Branch (169:37): [True: 827, False: 5.49k]
  ------------------
  170|  1.81k|                    {
  171|  1.81k|                        parsing_binary = true;
  172|  1.81k|                        continue;
  173|  1.81k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  5.49k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 1.53k, False: 3.95k]
  |  Branch (176:37): [True: 362, False: 3.59k]
  ------------------
  177|  1.89k|                    {
  178|  1.89k|                        parsing_hexadecimal = true;
  179|  1.89k|                        continue;
  180|  1.89k|                    }
  181|       |
  182|       |                    // Octal
  183|  3.59k|                    parsing_octal = true;
  184|  3.59k|                }
  185|  7.94k|            }
  186|       |
  187|       |            // Handle seperators
  188|   159k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 139, False: 159k]
  ------------------
  189|    139|            {
  190|    139|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 73]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     73|                parsed_separator = true;
  196|     73|                continue;
  197|    139|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   159k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 236, False: 159k]
  |  Branch (200:32): [True: 0, False: 236]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   159k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 159k, False: 236]
  |  Branch (205:17): [True: 0, False: 159k]
  |  Branch (205:33): [True: 0, False: 159k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   159k|            parsed_separator = false;
  212|   159k|            parsed_something = true;
  213|       |
  214|   159k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.46k, False: 157k]
  ------------------
  215|  2.46k|            {
  216|  2.46k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 878, False: 1.58k]
  ------------------
  217|    878|                {
  218|    878|                    return {};
  219|    878|                }
  220|       |
  221|  1.58k|                number <<= 1;
  222|  1.58k|                number |= (c - '0');
  223|  1.58k|            }
  224|   157k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 5.91k, False: 151k]
  ------------------
  225|  5.91k|            {
  226|  5.91k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 2.91k, False: 2.99k]
  ------------------
  227|  2.91k|                {
  228|  2.91k|                    return {};
  229|  2.91k|                }
  230|       |
  231|  2.99k|                number <<= 3;
  232|  2.99k|                number |= (c - '0');
  233|  2.99k|            }
  234|   151k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 2.95k, False: 148k]
  ------------------
  235|  2.95k|            {
  236|  2.95k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 1.46k, False: 1.49k]
  ------------------
  237|  1.46k|                {
  238|  1.46k|                    return {};
  239|  1.46k|                }
  240|       |
  241|  1.49k|                number <<= 4;
  242|  1.49k|                number |= phi::hex_digit_value(c).unsafe();
  243|  1.49k|            }
  244|   148k|            else
  245|   148k|            {
  246|   148k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 147k, False: 791]
  ------------------
  247|   147k|                {
  248|   147k|                    return {};
  249|   147k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|    791|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 462, False: 329]
  |  Branch (252:36): [True: 82, False: 380]
  ------------------
  253|     82|                {
  254|     82|                    return {};
  255|     82|                }
  256|       |
  257|    709|                number *= 10;
  258|    709|                number += (c - '0');
  259|    709|            }
  260|   159k|        }
  261|       |
  262|  2.22k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.88k, False: 338]
  ------------------
  263|  1.88k|        {
  264|       |            // Check for over/underflow
  265|  1.88k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 67, False: 1.81k]
  |  Branch (265:32): [True: 0, False: 67]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  1.88k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 1.81k, False: 67]
  |  Branch (270:17): [True: 0, False: 1.88k]
  |  Branch (270:33): [True: 0, False: 1.81k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  1.88k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 67, False: 1.81k]
  ------------------
  277|     67|            {
  278|     67|                return static_cast<std::int16_t>(-number);
  279|     67|            }
  280|       |
  281|  1.81k|            return static_cast<std::int16_t>(number);
  282|  1.88k|        }
  283|       |
  284|    338|        return {};
  285|  2.22k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  18.6k|    {
   96|  18.6k|        switch (value)
   97|  18.6k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  2.93k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.93k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.93k, False: 15.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.93k|        return #name;
  |  |  ------------------
  |  |   14|  6.76k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.76k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.76k, False: 11.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.76k|        return #name;
  |  |  ------------------
  |  |   15|  6.76k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     98|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 98, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     98|        return #name;
  |  |  ------------------
  |  |   16|  1.75k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.75k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.75k, False: 16.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.75k|        return #name;
  |  |  ------------------
  |  |   17|  1.75k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    387|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 387, False: 18.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    387|        return #name;
  |  |  ------------------
  |  |   18|    465|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    465|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 465, False: 18.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    465|        return #name;
  |  |  ------------------
  |  |   19|    465|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|     43|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 43, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     43|        return #name;
  |  |  ------------------
  |  |   20|     43|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     22|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 22, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     22|        return #name;
  |  |  ------------------
  |  |   21|    145|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    145|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 145, False: 18.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    145|        return #name;
  |  |  ------------------
  |  |   22|    145|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    110|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 110, False: 18.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    110|        return #name;
  |  |  ------------------
  |  |   23|    110|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     34|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 34, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     34|        return #name;
  |  |  ------------------
  |  |   24|     79|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|     79|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 79, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     79|        return #name;
  |  |  ------------------
  |  |   25|     79|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   26|    145|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    145|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 145, False: 18.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    145|        return #name;
  |  |  ------------------
  |  |   27|    145|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   28|    273|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    273|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 273, False: 18.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    273|        return #name;
  |  |  ------------------
  |  |   29|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.53k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.53k, False: 17.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.53k|        return #name;
  |  |  ------------------
  |  |   30|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|     22|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 22, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     22|        return #name;
  |  |  ------------------
  |  |   31|     52|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     52|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 52, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     52|        return #name;
  |  |  ------------------
  |  |   32|     52|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   33|    242|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    242|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 242, False: 18.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    242|        return #name;
  |  |  ------------------
  |  |   34|    301|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    301|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 301, False: 18.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    301|        return #name;
  |  |  ------------------
  |  |   35|    301|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   36|    867|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    867|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 867, False: 17.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    867|        return #name;
  |  |  ------------------
  |  |   37|    867|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     40|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 40, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     40|        return #name;
  |  |  ------------------
  |  |   38|     40|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     18|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 18, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     18|        return #name;
  |  |  ------------------
  |  |   39|    432|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|    432|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 432, False: 18.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    432|        return #name;
  |  |  ------------------
  |  |   40|    491|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|    491|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 491, False: 18.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    491|        return #name;
  |  |  ------------------
  |  |   41|    491|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   42|     12|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|      8|        return #name;
  |  |  ------------------
  |  |   43|  1.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.04k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.04k, False: 17.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.04k|        return #name;
  |  |  ------------------
  |  |   44|  1.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    261|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 261, False: 18.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    261|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 18.6k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  18.6k|        }
  109|  18.6k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  6.21k|    {
  131|  6.21k|        switch (value)
  132|  6.21k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|    961|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|    961|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 961, False: 5.25k]
  |  |  |  |  ------------------
  |  |  |  |  135|    961|        return #name;
  |  |  ------------------
  |  |   48|    961|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|    388|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 388, False: 5.82k]
  |  |  |  |  ------------------
  |  |  |  |  135|    388|        return #name;
  |  |  ------------------
  |  |   49|    388|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 6.19k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   50|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   52|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   53|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   54|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   55|    152|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    152|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 152, False: 6.06k]
  |  |  |  |  ------------------
  |  |  |  |  135|    152|        return #name;
  |  |  ------------------
  |  |   56|    377|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|    377|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 377, False: 5.83k]
  |  |  |  |  ------------------
  |  |  |  |  135|    377|        return #name;
  |  |  ------------------
  |  |   57|    377|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   58|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   59|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   60|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   61|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   62|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   63|    286|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    286|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 286, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|    286|        return #name;
  |  |  ------------------
  |  |   64|    286|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    100|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 100, False: 6.11k]
  |  |  |  |  ------------------
  |  |  |  |  135|    100|        return #name;
  |  |  ------------------
  |  |   65|    100|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|     54|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 54, False: 6.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|     54|        return #name;
  |  |  ------------------
  |  |   66|     54|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   67|  2.79k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  2.79k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.79k, False: 3.41k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.79k|        return #name;
  |  |  ------------------
  |  |   68|  2.79k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 23, False: 6.19k]
  |  |  |  |  ------------------
  |  |  |  |  135|     23|        return #name;
  |  |  ------------------
  |  |   69|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   70|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   71|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|     65|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 65, False: 6.14k]
  |  |  |  |  ------------------
  |  |  |  |  135|     65|        return #name;
  |  |  ------------------
  |  |   72|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|    719|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|    719|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 719, False: 5.49k]
  |  |  |  |  ------------------
  |  |  |  |  135|    719|        return #name;
  |  |  ------------------
  |  |   74|    719|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19, False: 6.19k]
  |  |  |  |  ------------------
  |  |  |  |  135|     19|        return #name;
  |  |  ------------------
  |  |   75|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 6.20k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   76|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 6.21k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   77|    101|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    101|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 101, False: 6.11k]
  |  |  |  |  ------------------
  |  |  |  |  135|    101|        return #name;
  |  |  ------------------
  |  |   78|    101|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|     70|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 70, False: 6.14k]
  |  |  |  |  ------------------
  |  |  |  |  135|     70|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 6.21k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  6.21k|        }
  144|  6.21k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   515k|        {
   12|   515k|            m_Value = value;
   13|   515k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   864k|        {
   17|   864k|            return m_Value;
   18|   864k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  1.94k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  1.94k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 24.2k, False: 0]
  ------------------
   64|  24.2k|            {
   65|  24.2k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 1.94k, False: 22.3k]
  ------------------
   66|  1.94k|                {
   67|  1.94k|                    return &token;
   68|  1.94k|                }
   69|  24.2k|            }
   70|       |
   71|      0|            return nullptr;
   72|  1.94k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   148k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   148k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   148k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   221k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   221k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   221k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  19.8k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  19.8k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  19.8k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   499k|    {
   11|   499k|        m_Value = val;
   12|   499k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.20M|    {
   16|  2.20M|        return m_Value;
   17|  2.20M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  30.9k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  15.8k|    {
   25|  15.8k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  15.8k|        switch (argument_number.unsafe())
   28|  15.8k|        {
   29|  7.05k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 7.05k, False: 8.83k]
  ------------------
   30|  7.05k|                m_Arg1 = argument;
   31|  7.05k|                break;
   32|  5.21k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 5.21k, False: 10.6k]
  ------------------
   33|  5.21k|                m_Arg2 = argument;
   34|  5.21k|                break;
   35|  3.62k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 3.62k, False: 12.2k]
  ------------------
   36|  3.62k|                m_Arg3 = argument;
   37|  3.62k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 15.8k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  15.8k|#endif
   42|  15.8k|        }
   43|  15.8k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  4.82M|    {
   84|  4.82M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  4.82M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  4.82M|    {
   89|  4.82M|        return m_Info;
   90|  4.82M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   108k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  28.9M|    {
   28|  28.9M|        return m_Type;
   29|  28.9M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  6.27M|    {
   78|  6.27M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  6.27M|        return register_int;
   81|  6.27M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.68M|    {
   85|  1.68M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.68M|        return register_float;
   88|  1.68M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.28M|    {
   93|  1.28M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.28M|        return immediate_value;
   96|  1.28M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|  1.08M|    {
  108|  1.08M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|  1.08M|        return label;
  111|  1.08M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  9.35k|    {
  171|  9.35k|        InstructionArgument arg;
  172|  9.35k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  9.35k|        arg.register_int.register_id = id;
  174|  9.35k|        return arg;
  175|  9.35k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  2.90k|    {
  179|  2.90k|        InstructionArgument arg;
  180|  2.90k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  2.90k|        arg.register_float.register_id = id;
  182|  2.90k|        return arg;
  183|  2.90k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.24k|    {
  187|  2.24k|        InstructionArgument arg;
  188|  2.24k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.24k|        arg.immediate_value.signed_value = value;
  190|  2.24k|        return arg;
  191|  2.24k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  1.38k|    {
  205|  1.38k|        InstructionArgument arg;
  206|  1.38k|        arg.m_Type           = ArgumentType::Label;
  207|  1.38k|        arg.label.label_name = label_name;
  208|  1.38k|        return arg;
  209|  1.38k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|   235k|        {
  352|   235k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|   235k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|   235k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|   235k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|   235k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|   235k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|   235k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  45.0k|        {
  365|  45.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  45.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  45.0k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  45.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  45.0k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  45.0k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  44.6k|        {
  377|  44.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  44.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  44.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  44.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  44.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  44.6k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  44.6k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  19.6k|        {
  390|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  19.6k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  19.6k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  19.6k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  19.4k|        {
  402|  19.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  19.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  19.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  19.4k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  19.4k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  19.4k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  19.4k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  19.4k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  9.37k|        {
  417|  9.37k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  9.37k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  9.37k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  9.37k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  9.37k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  9.37k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  9.37k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  9.37k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  44.9k|        {
  432|  44.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  44.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  44.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  44.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  44.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  44.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  44.9k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  9.37k|        {
  445|  9.37k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  9.37k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  9.37k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  9.37k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  9.37k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  9.37k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|  97.2k|        {
  457|  97.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|  97.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|  97.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|  97.2k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|  97.2k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|  97.2k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|  97.2k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  19.0k|        {
  470|  19.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  19.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  19.0k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  19.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  19.0k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  19.0k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  22.7k|        {
  482|  22.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  22.7k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  22.7k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  22.7k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  22.4k|        {
  497|  22.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  22.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  22.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  22.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  22.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  22.4k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  22.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  22.4k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  47.4k|        {
  512|  47.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  47.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  47.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  47.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  47.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  47.4k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  47.4k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  26.8k|        {
  525|  26.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  26.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  26.8k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  26.8k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  26.8k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  26.8k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  21.4k|        {
  537|  21.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  21.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  21.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  21.4k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  21.4k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  21.4k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  21.4k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  38.3k|        {
  550|  38.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  38.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  38.3k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  38.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  38.3k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  38.3k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  28.3k|        {
  562|  28.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  28.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  28.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  28.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  28.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  28.3k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  28.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  28.3k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  23.3k|        {
  577|  23.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  23.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  23.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  23.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  23.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  23.3k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  23.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  23.3k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|  4.43k|        {
  592|  4.43k|            const auto& dest_reg = arg1.AsRegisterInt();
  593|  4.43k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|  4.43k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|  4.43k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|  4.43k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|  4.43k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|  4.43k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|      1|        {
  605|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  607|      1|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|  9.51k|        {
  617|  9.51k|            const auto& dest_reg = arg1.AsRegisterInt();
  618|  9.51k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|  9.51k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|  9.51k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|  9.51k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|  9.51k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|  9.51k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|      1|        {
  630|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  632|      1|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  72.3k|        {
  684|  72.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  72.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  72.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  72.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  72.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  72.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  72.3k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  22.7k|        {
  697|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  22.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  22.7k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  22.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  22.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  60.6k|        {
  710|  60.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  60.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  60.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  60.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  60.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  60.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  60.6k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  34.8k|        {
  723|  34.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  34.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  34.8k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  34.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  34.8k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  34.8k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  34.8k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  72.3k|        {
  736|  72.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  72.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  72.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  72.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  72.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  72.3k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  72.3k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  27.9k|        {
  749|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  46.6k|        {
  762|  46.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  46.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  46.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  46.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  46.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  46.6k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  46.6k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  25.8k|        {
  775|  25.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  25.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  25.8k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  25.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  25.8k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  25.8k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  25.8k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  22.7k|        {
  788|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  22.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  22.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  22.7k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  22.7k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  70.7k|        {
  802|  70.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  70.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  70.7k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  70.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  70.7k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  70.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  70.7k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  13.5k|        {
  815|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  20.4k|        {
  829|  20.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  20.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  20.4k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  20.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  20.4k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  20.4k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  20.8k|        {
  842|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|   250k|        {
  856|   250k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|   250k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|   250k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|   250k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|   250k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|   250k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|   250k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  12.3k|        {
  869|  12.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  12.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  12.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  12.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  12.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  12.3k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 1, False: 12.3k]
  ------------------
  877|       |
  878|  12.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  12.3k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  25.8k|        {
  884|  25.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  25.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  25.8k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  25.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  25.8k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 0, False: 25.8k]
  ------------------
  891|       |
  892|  25.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  25.8k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  11.7k|        {
  898|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  11.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  11.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  11.7k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 1, False: 11.7k]
  ------------------
  906|       |
  907|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  11.7k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  98.1k|        {
  913|  98.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  98.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  98.1k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  98.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  98.1k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 0, False: 98.1k]
  ------------------
  920|       |
  921|  98.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  98.1k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  11.7k|        {
  927|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  11.7k|            processor.SetFPSRValue(new_value);
  936|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  25.7k|        {
  941|  25.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  25.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  25.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  25.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  25.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  25.7k|            processor.SetFPSRValue(new_value);
  950|  25.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  11.7k|        {
  955|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 11.7k]
  ------------------
  963|       |
  964|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  30.8k|        {
  970|  30.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  30.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  30.8k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  30.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  30.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 1.00k, False: 29.8k]
  ------------------
  977|       |
  978|  30.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  30.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  10.5k|        {
  984|  10.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  10.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  10.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  10.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  10.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  10.5k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 10.5k]
  ------------------
  992|       |
  993|  10.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  10.5k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  24.7k|        {
  999|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  24.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  24.7k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 24.7k]
  ------------------
 1006|       |
 1007|  24.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  24.7k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|   103k|        {
 1013|   103k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|   103k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|   103k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|   103k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|   103k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|   103k|            processor.SetFPSRValue(new_value);
 1022|   103k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|   230k|        {
 1027|   230k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|   230k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|   230k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|   230k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|   230k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|   230k|            processor.SetFPSRValue(new_value);
 1036|   230k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  11.7k|        {
 1041|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 11.7k, False: 1]
  ------------------
 1049|       |
 1050|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  22.7k|        {
 1056|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  22.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  22.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 22.7k, False: 0]
  ------------------
 1063|       |
 1064|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  22.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  16.4k|        {
 1070|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  16.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  16.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  16.4k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 16.4k, False: 0]
  ------------------
 1078|       |
 1079|  16.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  16.4k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|   102k|        {
 1085|   102k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|   102k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|   102k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|   102k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|   102k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 84.8k, False: 17.3k]
  ------------------
 1092|       |
 1093|   102k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|   102k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  15.9k|        {
 1099|  15.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  15.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  15.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  15.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  15.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  15.9k|            processor.SetFPSRValue(new_value);
 1108|  15.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  14.4k|        {
 1113|  14.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  14.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  14.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  14.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  14.4k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  14.4k|            processor.SetFPSRValue(new_value);
 1122|  14.4k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  11.4k|        {
 1127|  11.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  11.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  11.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  11.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  11.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  11.4k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 11.4k, False: 0]
  ------------------
 1135|       |
 1136|  11.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  11.4k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|   212k|        {
 1142|   212k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|   212k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|   212k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|   212k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|   212k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 210k, False: 1.96k]
  ------------------
 1149|       |
 1150|   212k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|   212k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  10.6k|        {
 1156|  10.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  10.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  10.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  10.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  10.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  10.6k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 10.6k, False: 0]
  ------------------
 1164|       |
 1165|  10.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  10.6k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  21.0k|        {
 1171|  21.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  21.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  21.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  21.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  21.0k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 21.0k, False: 0]
  ------------------
 1178|       |
 1179|  21.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  21.0k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  17.9k|        {
 1185|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  17.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  17.9k|            processor.SetFPSRValue(new_value);
 1194|  17.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  25.7k|        {
 1199|  25.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  25.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  25.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  25.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  25.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  25.7k|            processor.SetFPSRValue(new_value);
 1208|  25.7k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  15.7k|        {
 1213|  15.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  15.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  15.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  15.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  15.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  15.7k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 14.3k, False: 1.42k]
  ------------------
 1221|       |
 1222|  15.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  15.7k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  21.1k|        {
 1228|  21.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  21.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  21.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  21.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  21.1k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 21.1k, False: 0]
  ------------------
 1235|       |
 1236|  21.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  21.1k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  84.0k|        {
 1242|  84.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  84.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  84.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  84.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  84.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  84.0k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 79.4k, False: 4.67k]
  ------------------
 1250|       |
 1251|  84.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  84.0k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  38.9k|        {
 1257|  38.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  38.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  38.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  38.9k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  38.9k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 38.9k, False: 0]
  ------------------
 1264|       |
 1265|  38.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  38.9k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  24.7k|        {
 1271|  24.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  24.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  24.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  24.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  24.7k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  24.7k|            processor.SetFPSRValue(new_value);
 1280|  24.7k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  12.5k|        {
 1285|  12.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  12.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  12.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  12.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  12.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  12.5k|            processor.SetFPSRValue(new_value);
 1294|  12.5k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  17.4k|        {
 1299|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  17.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 1, False: 17.4k]
  ------------------
 1307|       |
 1308|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  17.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  26.6k|        {
 1314|  26.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  26.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  26.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  26.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  26.6k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 0, False: 26.6k]
  ------------------
 1321|       |
 1322|  26.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  26.6k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  23.0k|        {
 1328|  23.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  23.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  23.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  23.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  23.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  23.0k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 1, False: 23.0k]
  ------------------
 1336|       |
 1337|  23.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  23.0k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  33.5k|        {
 1343|  33.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  33.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  33.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  33.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  33.5k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 5.27k, False: 28.2k]
  ------------------
 1350|       |
 1351|  33.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  33.5k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  14.0k|        {
 1357|  14.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  14.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  14.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  14.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  14.0k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  14.0k|            processor.SetFPSRValue(new_value);
 1366|  14.0k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  13.6k|        {
 1371|  13.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  13.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  13.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  13.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  13.6k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  13.6k|            processor.SetFPSRValue(new_value);
 1380|  13.6k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  61.4k|        {
 1385|  61.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  61.4k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  61.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  61.4k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 41.1k, False: 20.3k]
  ------------------
 1391|  41.1k|            {
 1392|  41.1k|                JumpToLabel(processor, jump_label.label_name);
 1393|  41.1k|            }
 1394|  61.4k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  47.6k|        {
 1399|  47.6k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  47.6k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  47.6k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  47.6k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 23.3k, False: 24.3k]
  ------------------
 1405|  23.3k|            {
 1406|  23.3k|                JumpToLabel(processor, jump_label.label_name);
 1407|  23.3k|            }
 1408|  47.6k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  32.5k|        {
 1413|  32.5k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  32.5k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  32.5k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 19.4k, False: 13.0k]
  ------------------
 1418|  19.4k|            {
 1419|  19.4k|                JumpToLabel(processor, jump_label.label_name);
 1420|  19.4k|            }
 1421|  32.5k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   831k|        {
 1426|   831k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   831k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   831k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 814k, False: 16.9k]
  ------------------
 1431|   814k|            {
 1432|   814k|                JumpToLabel(processor, jump_label.label_name);
 1433|   814k|            }
 1434|   831k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|  64.1k|        {
 1439|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1442|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  34.9k|        {
 1447|  34.9k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  34.9k|            JumpToRegister(processor, jump_register.register_id);
 1450|  34.9k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  44.4k|        {
 1455|  44.4k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  44.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  44.4k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  44.4k|            JumpToLabel(processor, jump_label.label_name);
 1461|  44.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|   393k|        {
 1466|   393k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|   393k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|   393k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|   393k|            JumpToRegister(processor, jump_register.register_id);
 1472|   393k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  15.2k|        {
 1477|  15.2k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  15.2k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  15.2k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  15.2k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  15.2k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|      1|        {
 1488|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 0, False: 1]
  ------------------
 1493|      0|            {
 1494|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      0|                return;
 1496|      0|            }
 1497|       |
 1498|      1|            phi::i32 address = optional_address.value();
 1499|       |
 1500|      1|            auto optional_value =
 1501|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 1, False: 0]
  ------------------
 1504|      1|            {
 1505|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      1|                return;
 1508|      1|            }
 1509|       |
 1510|      0|            phi::i32 value = optional_value.value();
 1511|       |
 1512|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|      1|        {
 1518|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 0, False: 1]
  ------------------
 1523|      0|            {
 1524|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      0|                return;
 1526|      0|            }
 1527|       |
 1528|      1|            phi::i32 address = optional_address.value();
 1529|       |
 1530|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|      1|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 1, False: 0]
  ------------------
 1534|      1|            {
 1535|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      1|                return;
 1538|      1|            }
 1539|       |
 1540|      0|            phi::u32 value = optional_value.value();
 1541|       |
 1542|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|      1|        {
 1548|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 0, False: 1]
  ------------------
 1553|      0|            {
 1554|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      0|                return;
 1556|      0|            }
 1557|       |
 1558|      1|            phi::i32 address = optional_address.value();
 1559|       |
 1560|      1|            auto optional_value =
 1561|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 1, False: 0]
  ------------------
 1564|      1|            {
 1565|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      1|                return;
 1568|      1|            }
 1569|       |
 1570|      0|            phi::i32 value = optional_value.value();
 1571|       |
 1572|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|      1|        {
 1578|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 0, False: 1]
  ------------------
 1583|      0|            {
 1584|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      0|                return;
 1586|      0|            }
 1587|       |
 1588|      1|            phi::i32 address = optional_address.value();
 1589|       |
 1590|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|      1|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 1, False: 0]
  ------------------
 1594|      1|            {
 1595|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      1|                return;
 1598|      1|            }
 1599|       |
 1600|      0|            phi::u32 value = optional_value.value();
 1601|       |
 1602|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|      1|        {
 1608|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 0, False: 1]
  ------------------
 1613|      0|            {
 1614|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      0|                return;
 1616|      0|            }
 1617|       |
 1618|      1|            phi::i32 address = optional_address.value();
 1619|       |
 1620|      1|            auto optional_value =
 1621|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 1, False: 0]
  ------------------
 1624|      1|            {
 1625|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      1|                return;
 1628|      1|            }
 1629|       |
 1630|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|      1|        {
 1636|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 0, False: 1]
  ------------------
 1641|      0|            {
 1642|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      0|                return;
 1644|      0|            }
 1645|       |
 1646|      1|            phi::i32 address = optional_address.value();
 1647|       |
 1648|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|      1|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 1, False: 0]
  ------------------
 1652|      1|            {
 1653|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      1|                return;
 1656|      1|            }
 1657|       |
 1658|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|      1|        {
 1664|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 0, False: 1]
  ------------------
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|       |
 1674|      1|            phi::i32 address = optional_address.value();
 1675|       |
 1676|      1|            auto optional_value =
 1677|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 1, False: 0]
  ------------------
 1680|      1|            {
 1681|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      1|                return;
 1684|      1|            }
 1685|       |
 1686|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|      1|        {
 1692|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 0, False: 1]
  ------------------
 1697|      0|            {
 1698|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      0|                return;
 1700|      0|            }
 1701|       |
 1702|      1|            phi::i32 address = optional_address.value();
 1703|       |
 1704|      1|            auto optional_value =
 1705|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 1, False: 0]
  ------------------
 1708|      1|            {
 1709|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      1|                return;
 1712|      1|            }
 1713|       |
 1714|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  20.9k|        {
 1940|  20.9k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  20.9k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  20.9k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  20.9k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  20.9k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  7.94k|        {
 1951|  7.94k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  7.94k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  7.94k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  7.94k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  7.94k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1961|  10.8k|        {
 1962|  10.8k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1963|  10.8k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1964|       |
 1965|  10.8k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1966|       |
 1967|  10.8k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1968|       |
 1969|  10.8k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1970|  10.8k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1974|  19.6k|        {
 1975|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1976|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1977|       |
 1978|  19.6k|            const std::int32_t source_value =
 1979|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1980|       |
 1981|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1982|       |
 1983|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1984|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  13.6k|        {
 1989|  13.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  13.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  13.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  13.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  13.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  26.6k|        {
 2000|  26.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  26.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  26.6k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  26.6k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  26.6k|            const float        converted_value_float =
 2006|  26.6k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  26.6k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  26.6k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  9.37k|        {
 2014|  9.37k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  9.37k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  9.37k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  9.37k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  9.37k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  9.37k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  19.0k|        {
 2026|  19.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  19.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  19.0k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  19.0k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  19.0k|            const float        converted_value_float =
 2032|  19.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  19.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  19.0k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  18.4k|        {
 2040|  18.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  18.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  18.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  18.4k|            const std::int32_t converted_value_int =
 2045|  18.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  18.4k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  18.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  18.4k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  11.7k|        {
 2054|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  11.7k|            const std::int32_t converted_value_int =
 2059|  11.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      8|        {
 2074|      8|            processor.Raise(Exception::Halt);
 2075|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|   179k|        {
 2080|       |            /* Do nothing */
 2081|   179k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|   280k|    {
  170|   280k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|   280k|        SafeWriteInteger(processor, dest_reg, res);
  173|   280k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   413k|    {
  125|   413k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   413k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   413k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 20.8k, False: 392k]
  ------------------
  130|  20.8k|        {
  131|  20.8k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  20.8k|            value = max + (value % (min - 1));
  134|  20.8k|        }
  135|       |        // Check for overflow
  136|   392k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 18.8k, False: 373k]
  ------------------
  137|  18.8k|        {
  138|  18.8k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  18.8k|            value = min + (value % (max + 1));
  141|  18.8k|        }
  142|       |
  143|   413k|        PHI_ASSERT(value >= min);
  144|   413k|        PHI_ASSERT(value <= max);
  145|       |
  146|   413k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   413k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  64.2k|    {
  178|  64.2k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  64.2k|        SafeWriteInteger(processor, dest_reg, res);
  181|  64.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   249k|    {
  152|   249k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   249k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 27.4k, False: 222k]
  ------------------
  156|  27.4k|        {
  157|  27.4k|            processor.Raise(Exception::Overflow);
  158|       |
  159|  27.4k|            value %= max + 1u;
  160|  27.4k|        }
  161|       |
  162|   249k|        PHI_ASSERT(value <= max);
  163|       |
  164|   249k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   249k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  54.3k|    {
  186|  54.3k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  54.3k|        SafeWriteInteger(processor, dest_reg, res);
  189|  54.3k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   116k|    {
  194|   116k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   116k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 27.0k, False: 89.2k]
  ------------------
  197|  27.0k|        {
  198|  27.0k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  27.0k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  27.0k|            SafeWriteInteger(processor, dest_reg, res);
  202|  27.0k|            return;
  203|  27.0k|        }
  204|       |
  205|  89.2k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  89.2k|        SafeWriteInteger(processor, dest_reg, res);
  208|  89.2k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  74.2k|    {
  213|  74.2k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  74.2k|        SafeWriteInteger(processor, dest_reg, res);
  216|  74.2k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  59.7k|    {
  221|  59.7k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  59.7k|        SafeWriteInteger(processor, dest_reg, res);
  224|  59.7k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  4.43k|    {
  229|  4.43k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 4.43k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  4.43k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  4.43k|        SafeWriteInteger(processor, dest_reg, res);
  238|  4.43k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  9.51k|    {
  243|  9.51k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 3, False: 9.51k]
  ------------------
  244|      3|        {
  245|      3|            processor.Raise(Exception::DivideByZero);
  246|      3|            return;
  247|      3|        }
  248|       |
  249|  9.51k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  9.51k|        SafeWriteInteger(processor, dest_reg, res);
  252|  9.51k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   195k|    {
  326|   195k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 8.02k, False: 187k]
  ------------------
  327|  8.02k|        {
  328|  8.02k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  8.02k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  8.02k|            return;
  333|  8.02k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   187k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 17.4k, False: 169k]
  ------------------
  337|  17.4k|        {
  338|  17.4k|            processor.Raise(Exception::BadShift);
  339|  17.4k|            return;
  340|  17.4k|        }
  341|       |
  342|   169k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   169k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   169k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  95.5k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  95.5k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 8.34k, False: 87.2k]
  ------------------
  259|  8.34k|        {
  260|  8.34k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  8.34k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  8.34k|            return;
  265|  8.34k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  87.2k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 54.2k, False: 32.9k]
  ------------------
  269|  54.2k|        {
  270|  54.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  54.2k|            return;
  272|  54.2k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  32.9k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 6.67k, False: 26.3k]
  ------------------
  276|  6.67k|        {
  277|  6.67k|            processor.Raise(Exception::BadShift);
  278|  6.67k|            return;
  279|  6.67k|        }
  280|       |
  281|  26.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  26.3k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  26.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  26.3k|    {
   30|  26.3k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  26.3k|        return value & ~(-1 << (32 - n));
   33|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  72.4k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  72.4k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 6.61k, False: 65.8k]
  ------------------
  293|  6.61k|        {
  294|  6.61k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  6.61k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 3.18k, False: 3.43k]
  ------------------
  298|  3.18k|            {
  299|       |                // Set every byte to 1
  300|  3.18k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  3.18k|            }
  302|  3.43k|            else
  303|  3.43k|            {
  304|       |                // Set every byte to 0
  305|  3.43k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  3.43k|            }
  307|  6.61k|            return;
  308|  6.61k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  65.8k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 18.6k, False: 47.1k]
  ------------------
  312|  18.6k|        {
  313|  18.6k|            processor.Raise(Exception::BadShift);
  314|  18.6k|            return;
  315|  18.6k|        }
  316|       |
  317|  47.1k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  47.1k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  47.1k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.00M|    {
   39|       |        // Lookup the label
   40|  1.00M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.00M|        PHI_ASSERT(program != nullptr);
   42|  1.00M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.00M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 46, False: 1.00M]
  ------------------
   45|     46|        {
   46|     46|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     46|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     46|            processor.Raise(Exception::UnknownLabel);
   48|     46|            return;
   49|     46|        }
   50|       |
   51|  1.00M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.00M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.00M|        processor.SetNextProgramCounter(jump_point);
   56|  1.00M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   428k|    {
   60|   428k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   428k|        phi::u32 max_address =
   63|   428k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   428k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 9, False: 428k]
  ------------------
   65|      9|        {
   66|      9|            processor.Raise(Exception::AddressOutOfBounds);
   67|      9|            return;
   68|      9|        }
   69|       |
   70|   428k|        processor.SetNextProgramCounter(address.unsafe());
   71|   428k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  4.82M|    {
   12|  4.82M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  4.82M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  4.82M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  4.82M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  4.82M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  4.82M|                   "Unexpected argument type for arg1");
   22|  4.82M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  4.82M|                   "Unexpected argument type for arg2");
   24|  4.82M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  4.82M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  4.82M|        m_Executor(processor, arg1, arg2, arg3);
   29|  4.82M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  30.9k|    {
  453|  30.9k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  30.9k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.32M|    {
   17|  1.32M|        m_ValueSigned = val;
   18|  1.32M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   936k|    {
   22|   936k|        m_ValueUnsigned = val;
   23|   936k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  2.44M|    {
   27|  2.44M|        return m_ValueSigned;
   28|  2.44M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.48M|    {
   32|  1.48M|        return m_ValueUnsigned;
   33|  1.48M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.74M|    {
   37|  2.74M|        return m_IsReadOnly;
   38|  2.74M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|      1|    {
   22|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1, False: 0]
  ------------------
   23|      1|        {
   24|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      1|            return {};
   26|      1|        }
   27|       |
   28|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|      0|        return m_Values[raw_address].signed_value;
   31|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|      1|    {
   35|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 1, False: 0]
  ------------------
   36|      1|        {
   37|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      1|            return {};
   39|      1|        }
   40|       |
   41|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|      0|        return m_Values[raw_address].unsigned_value;
   43|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|      1|    {
   47|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1, False: 0]
  ------------------
   48|      1|        {
   49|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      1|            return {};
   51|      1|        }
   52|       |
   53|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  ------------------
   56|      0|        {
   57|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      0|            return {};
   59|      0|        }
   60|       |
   61|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|      1|    {
   66|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1, False: 0]
  ------------------
   67|      1|        {
   68|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      1|            return {};
   70|      1|        }
   71|       |
   72|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 0, False: 0]
  ------------------
   75|      0|        {
   76|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      0|            return {};
   78|      0|        }
   79|       |
   80|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|      1|    {
   85|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 1, False: 0]
  ------------------
   86|      1|        {
   87|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      1|            return {};
   89|      1|        }
   90|       |
   91|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 0, False: 0]
  ------------------
   94|      0|        {
   95|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      0|            return {};
   97|      0|        }
   98|       |
   99|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|      1|    {
  104|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 1, False: 0]
  ------------------
  105|      1|        {
  106|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      1|            return {};
  108|      1|        }
  109|       |
  110|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 0, False: 0]
  ------------------
  113|      0|        {
  114|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      0|            return {};
  116|      0|        }
  117|       |
  118|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|      1|    {
  123|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1, False: 0]
  ------------------
  124|      1|        {
  125|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      1|            return {};
  127|      1|        }
  128|       |
  129|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 0, False: 0]
  ------------------
  132|      0|        {
  133|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      0|            return {};
  135|      0|        }
  136|       |
  137|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|      1|    {
  142|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1, False: 0]
  ------------------
  143|      1|        {
  144|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      1|            return {};
  146|      1|        }
  147|       |
  148|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|        {
  152|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      0|            return {};
  154|      0|        }
  155|       |
  156|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|      8|    {
  269|       |        // Cannot access anything before the starting address
  270|      8|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 8, False: 0]
  ------------------
  271|      8|        {
  272|      8|            return false;
  273|      8|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 0]
  ------------------
  277|      0|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 0]
  ------------------
  284|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 0, False: 0]
  ------------------
  291|      0|        {
  292|      0|            return false;
  293|      0|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|      0|        return true;
  297|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  4.31k|    {
  307|  4.31k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 4.31M, False: 4.31k]
  ------------------
  308|  4.31M|        {
  309|  4.31M|            val.signed_value = 0;
  310|  4.31M|        }
  311|  4.31k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   141k|    {
   24|   141k|        switch (token.length())
   25|   141k|        {
   26|       |            // 1 character OpCodes
   27|  7.57k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 7.57k, False: 134k]
  ------------------
   28|  7.57k|                char c1 = token[0];
   29|  7.57k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 3.87k, False: 3.70k]
  ------------------
   30|  3.87k|                {
   31|  3.87k|                    return OpCode::J;
   32|  3.87k|                }
   33|  3.70k|                break;
   34|  7.57k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  12.6k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 12.6k, False: 129k]
  ------------------
   38|  12.6k|                char c1 = token[0];
   39|  12.6k|                char c2 = token[1];
   40|       |
   41|  12.6k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 4.97k, False: 7.66k]
  ------------------
   42|  12.6k|                {
   43|    172|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 172, False: 12.4k]
  ------------------
   44|    353|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 181, False: 12.4k]
  ------------------
   45|    353|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 142, False: 211]
  ------------------
   46|    142|                        {
   47|    142|                            return OpCode::JR;
   48|    142|                        }
   49|    211|                        break;
   50|       |
   51|  2.50k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 2.50k, False: 10.1k]
  ------------------
   52|  2.67k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 167, False: 12.4k]
  ------------------
   53|  2.67k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 72, False: 2.60k]
  ------------------
   54|  2.67k|                        {
   55|     70|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 70, False: 2.60k]
  ------------------
   56|    147|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 77, False: 2.59k]
  ------------------
   57|    147|                                return OpCode::LB;
   58|    412|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 412, False: 2.26k]
  ------------------
   59|    422|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 10, False: 2.66k]
  ------------------
   60|    422|                                return OpCode::LD;
   61|     70|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 70, False: 2.60k]
  ------------------
   62|    140|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 70, False: 2.60k]
  ------------------
   63|    140|                                return OpCode::LF;
   64|     75|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 75, False: 2.60k]
  ------------------
   65|    173|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 98, False: 2.57k]
  ------------------
   66|    173|                                return OpCode::LH;
   67|  1.65k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.65k, False: 1.02k]
  ------------------
   68|  1.72k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 66, False: 2.61k]
  ------------------
   69|  1.72k|                                return OpCode::LW;
   70|  2.67k|                        }
   71|     72|                        break;
   72|     78|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 78, False: 12.5k]
  ------------------
   73|  1.58k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 1.50k, False: 11.1k]
  ------------------
   74|  1.58k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 155, False: 1.42k]
  ------------------
   75|    155|                        {
   76|    155|                            return OpCode::OR;
   77|    155|                        }
   78|  1.42k|                        break;
   79|  2.71k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 2.71k, False: 9.91k]
  ------------------
   80|  3.05k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 335, False: 12.2k]
  ------------------
   81|  3.05k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 94, False: 2.95k]
  ------------------
   82|  3.05k|                        {
   83|    732|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 732, False: 2.31k]
  ------------------
   84|    799|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 67, False: 2.98k]
  ------------------
   85|    799|                                return OpCode::SB;
   86|     99|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 99, False: 2.95k]
  ------------------
   87|    198|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 99, False: 2.95k]
  ------------------
   88|    198|                                return OpCode::SD;
   89|  1.57k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 1.57k, False: 1.47k]
  ------------------
   90|  1.67k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 98, False: 2.95k]
  ------------------
   91|  1.67k|                                return OpCode::SF;
   92|     78|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 78, False: 2.97k]
  ------------------
   93|    190|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 112, False: 2.93k]
  ------------------
   94|    190|                                return OpCode::SH;
   95|     21|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 21, False: 3.02k]
  ------------------
   96|     94|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 73, False: 2.97k]
  ------------------
   97|     94|                                return OpCode::SW;
   98|  3.05k|                        }
   99|     94|                        break;
  100|  12.6k|                }
  101|  6.77k|                break;
  102|  12.6k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  58.4k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 58.4k, False: 83.5k]
  ------------------
  106|  58.4k|                char c1 = token[0];
  107|  58.4k|                char c2 = token[1];
  108|  58.4k|                char c3 = token[2];
  109|       |
  110|  58.4k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 6.18k, False: 52.2k]
  ------------------
  111|  58.4k|                {
  112|  24.8k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 24.8k, False: 33.5k]
  ------------------
  113|  24.9k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 101, False: 58.3k]
  ------------------
  114|  24.9k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 24.6k, False: 294]
  |  Branch (114:29): [True: 24.5k, False: 401]
  |  Branch (114:45): [True: 24.5k, False: 107]
  ------------------
  115|  24.5k|                        {
  116|  24.5k|                            return OpCode::ADD;
  117|  24.5k|                        }
  118|    401|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 279, False: 122]
  |  Branch (118:34): [True: 213, False: 188]
  |  Branch (118:50): [True: 213, False: 66]
  ------------------
  119|    213|                        {
  120|    213|                            return OpCode::AND;
  121|    213|                        }
  122|    188|                        break;
  123|       |
  124|    188|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 150, False: 58.2k]
  ------------------
  125|    299|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 149, False: 58.2k]
  ------------------
  126|    299|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 232, False: 67]
  |  Branch (126:29): [True: 156, False: 143]
  |  Branch (126:45): [True: 156, False: 76]
  ------------------
  127|    156|                        {
  128|    156|                            return OpCode::DIV;
  129|    156|                        }
  130|    143|                        break;
  131|       |
  132|    562|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 562, False: 57.8k]
  ------------------
  133|    641|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 79, False: 58.3k]
  ------------------
  134|    641|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 573, False: 68]
  ------------------
  135|    573|                        {
  136|    573|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 145, False: 428]
  ------------------
  137|    145|                            {
  138|    145|                                return OpCode::EQD;
  139|    145|                            }
  140|    428|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 362, False: 66]
  ------------------
  141|    362|                            {
  142|    362|                                return OpCode::EQF;
  143|    362|                            }
  144|    573|                        }
  145|    134|                        break;
  146|       |
  147|  1.67k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 1.67k, False: 56.7k]
  ------------------
  148|  2.19k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 518, False: 57.9k]
  ------------------
  149|  2.19k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 379, False: 1.81k]
  ------------------
  150|    379|                        {
  151|    379|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 165, False: 214]
  ------------------
  152|    165|                            {
  153|    165|                                return OpCode::GED;
  154|    165|                            }
  155|    214|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 148, False: 66]
  ------------------
  156|    148|                            {
  157|    148|                                return OpCode::GEF;
  158|    148|                            }
  159|    379|                        }
  160|  1.81k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 1.74k, False: 66]
  ------------------
  161|  1.74k|                        {
  162|  1.74k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 763, False: 984]
  ------------------
  163|    763|                            {
  164|    763|                                return OpCode::GTD;
  165|    763|                            }
  166|    984|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 886, False: 98]
  ------------------
  167|    886|                            {
  168|    886|                                return OpCode::GTF;
  169|    886|                            }
  170|    984|                        }
  171|    230|                        break;
  172|       |
  173|    889|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 889, False: 57.5k]
  ------------------
  174|  1.71k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 827, False: 57.5k]
  ------------------
  175|  1.71k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 1.65k, False: 66]
  |  Branch (175:29): [True: 1.06k, False: 648]
  |  Branch (175:45): [True: 1.06k, False: 582]
  ------------------
  176|  1.06k|                        {
  177|  1.06k|                            return OpCode::JAL;
  178|  1.06k|                        }
  179|    648|                        break;
  180|       |
  181|  4.54k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 4.54k, False: 53.8k]
  ------------------
  182|  6.67k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 2.12k, False: 56.2k]
  ------------------
  183|  6.67k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 458, False: 6.21k]
  ------------------
  184|  6.67k|                        {
  185|     77|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 77, False: 6.60k]
  ------------------
  186|    840|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 763, False: 5.91k]
  ------------------
  187|    840|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 442, False: 398]
  ------------------
  188|    442|                                {
  189|    442|                                    return OpCode::LBU;
  190|    442|                                }
  191|    398|                                break;
  192|       |
  193|  1.35k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.35k, False: 5.32k]
  ------------------
  194|  2.44k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.09k, False: 5.58k]
  ------------------
  195|  2.44k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.32k, False: 1.12k]
  ------------------
  196|  1.32k|                                {
  197|  1.32k|                                    return OpCode::LED;
  198|  1.32k|                                }
  199|  1.12k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 280, False: 844]
  ------------------
  200|    280|                                {
  201|    280|                                    return OpCode::LEF;
  202|    280|                                }
  203|    844|                                break;
  204|       |
  205|  1.84k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.84k, False: 4.83k]
  ------------------
  206|  2.28k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 446, False: 6.23k]
  ------------------
  207|  2.28k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 918, False: 1.37k]
  ------------------
  208|    918|                                {
  209|    918|                                    return OpCode::LHI;
  210|    918|                                }
  211|  1.37k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.00k, False: 362]
  ------------------
  212|  1.00k|                                {
  213|  1.00k|                                    return OpCode::LHU;
  214|  1.00k|                                }
  215|    362|                                break;
  216|       |
  217|    362|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 343, False: 6.33k]
  ------------------
  218|    477|                            case 't':
  ------------------
  |  Branch (218:29): [True: 134, False: 6.54k]
  ------------------
  219|    477|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 177, False: 300]
  ------------------
  220|    177|                                {
  221|    177|                                    return OpCode::LTD;
  222|    177|                                }
  223|    300|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 169, False: 131]
  ------------------
  224|    169|                                {
  225|    169|                                    return OpCode::LTF;
  226|    169|                                }
  227|    131|                                break;
  228|       |
  229|    131|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 70, False: 6.60k]
  ------------------
  230|    167|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 97, False: 6.58k]
  ------------------
  231|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 133, False: 34]
  ------------------
  232|    133|                                {
  233|    133|                                    return OpCode::LWU;
  234|    133|                                }
  235|     34|                                break;
  236|  6.67k|                        }
  237|  2.22k|                        break;
  238|       |
  239|  2.22k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 1.87k, False: 56.5k]
  ------------------
  240|  2.06k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 194, False: 58.2k]
  ------------------
  241|  2.06k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 314, False: 1.75k]
  ------------------
  242|    314|                        {
  243|    314|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 149, False: 165]
  ------------------
  244|    149|                            {
  245|    149|                                return OpCode::NED;
  246|    149|                            }
  247|    165|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 99, False: 66]
  ------------------
  248|     99|                            {
  249|     99|                                return OpCode::NEF;
  250|     99|                            }
  251|    314|                        }
  252|  1.75k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.60k, False: 148]
  |  Branch (252:34): [True: 1.24k, False: 510]
  |  Branch (252:50): [True: 1.24k, False: 362]
  ------------------
  253|  1.24k|                        {
  254|  1.24k|                            return OpCode::NOP;
  255|  1.24k|                        }
  256|       |
  257|    576|                        break;
  258|       |
  259|    576|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 84, False: 58.3k]
  ------------------
  260|  1.06k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 979, False: 57.4k]
  ------------------
  261|  1.06k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 839, False: 224]
  |  Branch (261:29): [True: 545, False: 518]
  |  Branch (261:45): [True: 545, False: 294]
  ------------------
  262|    545|                        {
  263|    545|                            return OpCode::ORI;
  264|    545|                        }
  265|    518|                        break;
  266|       |
  267|  11.0k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 11.0k, False: 47.3k]
  ------------------
  268|  11.8k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 824, False: 57.6k]
  ------------------
  269|  11.8k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 111, False: 11.7k]
  ------------------
  270|  11.8k|                        {
  271|     71|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 71, False: 11.8k]
  ------------------
  272|    204|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 133, False: 11.7k]
  ------------------
  273|    204|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 137, False: 67]
  ------------------
  274|    137|                                {
  275|    137|                                    return OpCode::SBU;
  276|    137|                                }
  277|     67|                                break;
  278|       |
  279|     90|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 90, False: 11.7k]
  ------------------
  280|    286|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 196, False: 11.6k]
  ------------------
  281|    286|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 156, False: 130]
  ------------------
  282|    156|                                {
  283|    156|                                    return OpCode::SEQ;
  284|    156|                                }
  285|    130|                                break;
  286|       |
  287|  3.00k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.00k, False: 8.87k]
  ------------------
  288|  4.04k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 1.03k, False: 10.8k]
  ------------------
  289|  4.04k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.33k, False: 1.70k]
  ------------------
  290|  2.33k|                                {
  291|  2.33k|                                    return OpCode::SGE;
  292|  2.33k|                                }
  293|  1.70k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 745, False: 962]
  ------------------
  294|    745|                                {
  295|    745|                                    return OpCode::SGT;
  296|    745|                                }
  297|    962|                                break;
  298|       |
  299|    962|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 842, False: 11.0k]
  ------------------
  300|  1.01k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 168, False: 11.7k]
  ------------------
  301|  1.01k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 939, False: 71]
  ------------------
  302|    939|                                {
  303|    939|                                    return OpCode::SHU;
  304|    939|                                }
  305|     71|                                break;
  306|       |
  307|  1.18k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.18k, False: 10.6k]
  ------------------
  308|  1.63k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 451, False: 11.4k]
  ------------------
  309|  1.63k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 195, False: 1.44k]
  ------------------
  310|  1.63k|                                {
  311|    564|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 564, False: 1.07k]
  ------------------
  312|    630|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 1.56k]
  ------------------
  313|    630|                                        return OpCode::SLA;
  314|       |
  315|    272|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 272, False: 1.36k]
  ------------------
  316|    338|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 66, False: 1.56k]
  ------------------
  317|    338|                                        return OpCode::SLE;
  318|       |
  319|    149|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 149, False: 1.48k]
  ------------------
  320|    215|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 66, False: 1.56k]
  ------------------
  321|    215|                                        return OpCode::SLL;
  322|       |
  323|    132|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 132, False: 1.50k]
  ------------------
  324|    257|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 125, False: 1.51k]
  ------------------
  325|    257|                                        return OpCode::SLT;
  326|  1.63k|                                }
  327|    195|                                break;
  328|       |
  329|  1.55k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.55k, False: 10.3k]
  ------------------
  330|  1.63k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 84, False: 11.7k]
  ------------------
  331|  1.63k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.57k, False: 66]
  ------------------
  332|  1.57k|                                {
  333|  1.57k|                                    return OpCode::SNE;
  334|  1.57k|                                }
  335|     66|                                break;
  336|       |
  337|  1.28k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.28k, False: 10.5k]
  ------------------
  338|  1.37k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 97, False: 11.7k]
  ------------------
  339|  1.37k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 186, False: 1.19k]
  ------------------
  340|    186|                                {
  341|    186|                                    return OpCode::SRA;
  342|    186|                                }
  343|  1.19k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 1.15k, False: 34]
  ------------------
  344|  1.15k|                                {
  345|  1.15k|                                    return OpCode::SRL;
  346|  1.15k|                                }
  347|     34|                                break;
  348|       |
  349|    723|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 723, False: 11.1k]
  ------------------
  350|    804|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 81, False: 11.7k]
  ------------------
  351|    804|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 738, False: 66]
  ------------------
  352|    738|                                {
  353|    738|                                    return OpCode::SUB;
  354|    738|                                }
  355|     66|                                break;
  356|       |
  357|    660|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 660, False: 11.2k]
  ------------------
  358|    768|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 108, False: 11.7k]
  ------------------
  359|    768|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 670, False: 98]
  ------------------
  360|    670|                                {
  361|    670|                                    return OpCode::SWU;
  362|    670|                                }
  363|     98|                                break;
  364|  11.8k|                        }
  365|       |
  366|  2.41k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 617, False: 57.8k]
  ------------------
  367|  2.57k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 157, False: 58.2k]
  ------------------
  368|  2.57k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 753, False: 1.82k]
  |  Branch (368:29): [True: 680, False: 1.89k]
  |  Branch (368:45): [True: 680, False: 73]
  ------------------
  369|    680|                        {
  370|    680|                            return OpCode::XOR;
  371|    680|                        }
  372|  1.89k|                        break;
  373|  58.4k|                }
  374|  12.7k|                break;
  375|  58.4k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  43.5k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 43.5k, False: 98.4k]
  ------------------
  379|  43.5k|                char c1 = token[0];
  380|  43.5k|                char c2 = token[1];
  381|  43.5k|                char c3 = token[2];
  382|  43.5k|                char c4 = token[3];
  383|       |
  384|  43.5k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 3.75k, False: 39.7k]
  ------------------
  385|  43.5k|                {
  386|  4.15k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 4.15k, False: 39.3k]
  ------------------
  387|  5.00k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 856, False: 42.6k]
  ------------------
  388|  5.00k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 78, False: 4.92k]
  ------------------
  389|  5.00k|                        {
  390|  3.21k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 3.21k, False: 1.79k]
  ------------------
  391|  3.93k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 718, False: 4.28k]
  ------------------
  392|  3.93k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 3.86k, False: 66]
  ------------------
  393|  3.86k|                                {
  394|  3.86k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 419, False: 3.44k]
  ------------------
  395|  3.86k|                                    {
  396|    627|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 627, False: 3.24k]
  ------------------
  397|    693|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 3.80k]
  ------------------
  398|    693|                                            return OpCode::ADDD;
  399|       |
  400|    379|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 379, False: 3.48k]
  ------------------
  401|    522|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 143, False: 3.72k]
  ------------------
  402|    522|                                            return OpCode::ADDF;
  403|       |
  404|  1.71k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 1.71k, False: 2.14k]
  ------------------
  405|  1.78k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 3.80k]
  ------------------
  406|  1.78k|                                            return OpCode::ADDI;
  407|       |
  408|    381|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 381, False: 3.48k]
  ------------------
  409|    449|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 68, False: 3.79k]
  ------------------
  410|    449|                                            return OpCode::ADDU;
  411|  3.86k|                                    }
  412|  3.86k|                                }
  413|    485|                                break;
  414|       |
  415|    893|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 893, False: 4.11k]
  ------------------
  416|    995|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 102, False: 4.90k]
  ------------------
  417|    995|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 929, False: 66]
  |  Branch (417:37): [True: 863, False: 132]
  |  Branch (417:53): [True: 863, False: 66]
  ------------------
  418|    863|                                {
  419|    863|                                    return OpCode::ANDI;
  420|    863|                                }
  421|       |
  422|    132|                                break;
  423|  5.00k|                        }
  424|    695|                        break;
  425|       |
  426|  2.11k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 2.11k, False: 41.4k]
  ------------------
  427|  6.74k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 4.63k, False: 38.8k]
  ------------------
  428|  6.74k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 551, False: 6.19k]
  ------------------
  429|  6.74k|                        {
  430|     92|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 92, False: 6.65k]
  ------------------
  431|    376|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 284, False: 6.46k]
  ------------------
  432|    376|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 301, False: 75]
  |  Branch (432:37): [True: 158, False: 218]
  |  Branch (432:53): [True: 158, False: 143]
  ------------------
  433|    158|                                {
  434|    158|                                    return OpCode::BEQZ;
  435|    158|                                }
  436|    218|                                break;
  437|       |
  438|  1.92k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.92k, False: 4.82k]
  ------------------
  439|  3.01k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.09k, False: 5.65k]
  ------------------
  440|  3.01k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 2.88k, False: 130]
  ------------------
  441|  2.88k|                                {
  442|  2.88k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 1.88k, False: 1.00k]
  ------------------
  443|  1.88k|                                    {
  444|  1.88k|                                        return OpCode::BFPF;
  445|  1.88k|                                    }
  446|  1.00k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 894, False: 111]
  ------------------
  447|    894|                                    {
  448|    894|                                        return OpCode::BFPT;
  449|    894|                                    }
  450|  2.88k|                                }
  451|    241|                                break;
  452|       |
  453|  2.71k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.71k, False: 4.03k]
  ------------------
  454|  2.80k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 6.66k]
  ------------------
  455|  2.80k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 2.53k, False: 272]
  |  Branch (455:37): [True: 1.63k, False: 1.16k]
  |  Branch (455:53): [True: 1.63k, False: 897]
  ------------------
  456|  1.63k|                                {
  457|  1.63k|                                    return OpCode::BNEZ;
  458|  1.63k|                                }
  459|  6.74k|                        }
  460|  2.17k|                        break;
  461|       |
  462|  2.17k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 433, False: 43.0k]
  ------------------
  463|  3.19k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 2.76k, False: 40.7k]
  ------------------
  464|  3.19k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 2.63k, False: 563]
  |  Branch (464:29): [True: 2.16k, False: 1.03k]
  |  Branch (464:45): [True: 2.16k, False: 468]
  ------------------
  465|  2.16k|                        {
  466|  2.16k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 666, False: 1.49k]
  ------------------
  467|  2.16k|                            {
  468|     79|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 79, False: 2.08k]
  ------------------
  469|    145|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 2.09k]
  ------------------
  470|    145|                                    return OpCode::DIVD;
  471|       |
  472|    134|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 134, False: 2.02k]
  ------------------
  473|    200|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 2.09k]
  ------------------
  474|    200|                                    return OpCode::DIVF;
  475|       |
  476|     80|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 80, False: 2.08k]
  ------------------
  477|    660|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 580, False: 1.58k]
  ------------------
  478|    660|                                    return OpCode::DIVI;
  479|       |
  480|    104|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 104, False: 2.05k]
  ------------------
  481|    492|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 388, False: 1.77k]
  ------------------
  482|    492|                                    return OpCode::DIVU;
  483|  2.16k|                            }
  484|  2.16k|                        }
  485|  1.69k|                        break;
  486|       |
  487|  1.69k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 393, False: 43.1k]
  ------------------
  488|    657|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 264, False: 43.2k]
  ------------------
  489|    657|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 591, False: 66]
  |  Branch (489:29): [True: 459, False: 198]
  |  Branch (489:45): [True: 525, False: 66]
  |  Branch (489:61): [True: 459, False: 66]
  ------------------
  490|    459|                        {
  491|    459|                            return OpCode::HALT;
  492|    459|                        }
  493|    198|                        break;
  494|       |
  495|  1.01k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 1.01k, False: 42.5k]
  ------------------
  496|  3.60k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 2.59k, False: 40.9k]
  ------------------
  497|  3.60k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 3.42k, False: 180]
  |  Branch (497:29): [True: 1.07k, False: 2.52k]
  |  Branch (497:45): [True: 2.48k, False: 932]
  |  Branch (497:61): [True: 1.07k, False: 1.41k]
  ------------------
  498|  1.07k|                        {
  499|  1.07k|                            return OpCode::JALR;
  500|  1.07k|                        }
  501|  2.52k|                        break;
  502|       |
  503|  2.58k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 2.58k, False: 40.9k]
  ------------------
  504|  2.90k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 324, False: 43.1k]
  ------------------
  505|  2.90k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 1.61k, False: 1.29k]
  |  Branch (505:29): [True: 1.21k, False: 1.69k]
  |  Branch (505:45): [True: 1.21k, False: 399]
  ------------------
  506|  1.21k|                        {
  507|  1.21k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 540, False: 672]
  ------------------
  508|    540|                            {
  509|    540|                                return OpCode::MOVD;
  510|    540|                            }
  511|    672|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 159, False: 513]
  ------------------
  512|    159|                            {
  513|    159|                                return OpCode::MOVF;
  514|    159|                            }
  515|  1.21k|                        }
  516|  1.69k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.17k, False: 515]
  |  Branch (516:34): [True: 958, False: 735]
  |  Branch (516:50): [True: 1.10k, False: 74]
  |  Branch (516:66): [True: 958, False: 146]
  ------------------
  517|    958|                        {
  518|    958|                            return OpCode::MULT;
  519|    958|                        }
  520|  1.24k|                        break;
  521|       |
  522|  14.3k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 14.3k, False: 29.2k]
  ------------------
  523|  15.3k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 1.02k, False: 42.4k]
  ------------------
  524|  15.3k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 138, False: 15.2k]
  ------------------
  525|  15.3k|                        {
  526|  2.47k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 2.47k, False: 12.8k]
  ------------------
  527|  2.77k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 293, False: 15.0k]
  ------------------
  528|  2.77k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 2.70k, False: 66]
  ------------------
  529|  2.70k|                                {
  530|  2.70k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 653, False: 2.05k]
  ------------------
  531|    653|                                    {
  532|    653|                                        return OpCode::SEQI;
  533|    653|                                    }
  534|  2.05k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.98k, False: 66]
  ------------------
  535|  1.98k|                                    {
  536|  1.98k|                                        return OpCode::SEQU;
  537|  1.98k|                                    }
  538|  2.70k|                                }
  539|    132|                                break;
  540|       |
  541|  2.08k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 2.08k, False: 13.2k]
  ------------------
  542|  3.52k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.44k, False: 13.9k]
  ------------------
  543|  3.52k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.53k, False: 1.99k]
  ------------------
  544|  1.53k|                                {
  545|  1.53k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.25k, False: 285]
  ------------------
  546|  1.25k|                                    {
  547|  1.25k|                                        return OpCode::SGEI;
  548|  1.25k|                                    }
  549|    285|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 219, False: 66]
  ------------------
  550|    219|                                    {
  551|    219|                                        return OpCode::SGEU;
  552|    219|                                    }
  553|  1.53k|                                }
  554|  1.99k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.91k, False: 73]
  ------------------
  555|  1.91k|                                {
  556|  1.91k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 152, False: 1.76k]
  ------------------
  557|    152|                                    {
  558|    152|                                        return OpCode::SGTI;
  559|    152|                                    }
  560|  1.76k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 660, False: 1.10k]
  ------------------
  561|    660|                                    {
  562|    660|                                        return OpCode::SGTU;
  563|    660|                                    }
  564|  1.91k|                                }
  565|  1.24k|                                break;
  566|       |
  567|  1.82k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 1.82k, False: 13.5k]
  ------------------
  568|  3.95k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 2.13k, False: 13.2k]
  ------------------
  569|  3.95k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 113, False: 3.84k]
  ------------------
  570|  3.95k|                                {
  571|     92|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 92, False: 3.86k]
  ------------------
  572|    224|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 132, False: 3.82k]
  ------------------
  573|    224|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 157, False: 67]
  ------------------
  574|    157|                                        {
  575|    157|                                            return OpCode::SLAI;
  576|    157|                                        }
  577|     67|                                        break;
  578|       |
  579|    415|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 415, False: 3.54k]
  ------------------
  580|    805|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 390, False: 3.56k]
  ------------------
  581|    805|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 363, False: 442]
  ------------------
  582|    363|                                        {
  583|    363|                                            return OpCode::SLEI;
  584|    363|                                        }
  585|    442|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 184, False: 258]
  ------------------
  586|    184|                                        {
  587|    184|                                            return OpCode::SLEU;
  588|    184|                                        }
  589|    258|                                        break;
  590|       |
  591|    258|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 209, False: 3.74k]
  ------------------
  592|  1.54k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.33k, False: 2.62k]
  ------------------
  593|  1.54k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 890, False: 653]
  ------------------
  594|    890|                                        {
  595|    890|                                            return OpCode::SLLI;
  596|    890|                                        }
  597|    653|                                        break;
  598|       |
  599|  1.13k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.13k, False: 2.82k]
  ------------------
  600|  1.27k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 138, False: 3.81k]
  ------------------
  601|  1.27k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 944, False: 327]
  ------------------
  602|    944|                                        {
  603|    944|                                            return OpCode::SLTI;
  604|    944|                                        }
  605|    327|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 248, False: 79]
  ------------------
  606|    248|                                        {
  607|    248|                                            return OpCode::SLTU;
  608|    248|                                        }
  609|     79|                                        break;
  610|  3.95k|                                }
  611|       |
  612|  1.40k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 236, False: 15.1k]
  ------------------
  613|  1.55k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 144, False: 15.2k]
  ------------------
  614|  1.55k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 636, False: 914]
  ------------------
  615|    636|                                {
  616|    636|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 219, False: 417]
  ------------------
  617|    219|                                    {
  618|    219|                                        return OpCode::SNEI;
  619|    219|                                    }
  620|    417|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 149, False: 268]
  ------------------
  621|    149|                                    {
  622|    149|                                        return OpCode::SNEU;
  623|    149|                                    }
  624|    636|                                }
  625|  1.18k|                                break;
  626|       |
  627|  1.88k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 1.88k, False: 13.4k]
  ------------------
  628|  2.04k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 155, False: 15.1k]
  ------------------
  629|  2.04k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 317, False: 1.72k]
  |  Branch (629:37): [True: 244, False: 1.79k]
  |  Branch (629:53): [True: 244, False: 73]
  ------------------
  630|    244|                                {
  631|    244|                                    return OpCode::SRAI;
  632|    244|                                }
  633|  1.79k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 1.72k, False: 73]
  |  Branch (633:42): [True: 1.65k, False: 139]
  |  Branch (633:58): [True: 1.65k, False: 66]
  ------------------
  634|  1.65k|                                {
  635|  1.65k|                                    return OpCode::SRLI;
  636|  1.65k|                                }
  637|    139|                                break;
  638|       |
  639|  2.28k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 2.28k, False: 13.0k]
  ------------------
  640|  2.53k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 252, False: 15.0k]
  ------------------
  641|  2.53k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 2.46k, False: 66]
  ------------------
  642|  2.46k|                                {
  643|  2.46k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 66, False: 2.40k]
  ------------------
  644|  2.46k|                                    {
  645|    366|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 366, False: 2.10k]
  ------------------
  646|    432|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 2.40k]
  ------------------
  647|    432|                                            return OpCode::SUBD;
  648|       |
  649|    528|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 528, False: 1.93k]
  ------------------
  650|    658|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 130, False: 2.33k]
  ------------------
  651|    658|                                            return OpCode::SUBF;
  652|       |
  653|    214|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 214, False: 2.25k]
  ------------------
  654|    280|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 2.40k]
  ------------------
  655|    280|                                            return OpCode::SUBI;
  656|       |
  657|    964|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 964, False: 1.50k]
  ------------------
  658|  1.03k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 2.40k]
  ------------------
  659|  1.03k|                                            return OpCode::SUBU;
  660|  2.46k|                                    }
  661|  2.46k|                                }
  662|    132|                                break;
  663|  15.3k|                        }
  664|  2.96k|                        break;
  665|       |
  666|  2.96k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 221, False: 43.2k]
  ------------------
  667|    484|                    case 't':
  ------------------
  |  Branch (667:21): [True: 263, False: 43.2k]
  ------------------
  668|    484|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 401, False: 83]
  |  Branch (668:29): [True: 269, False: 215]
  |  Branch (668:45): [True: 335, False: 66]
  |  Branch (668:61): [True: 269, False: 66]
  ------------------
  669|    269|                        {
  670|    269|                            return OpCode::TRAP;
  671|    269|                        }
  672|    215|                        break;
  673|    732|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 732, False: 42.7k]
  ------------------
  674|  1.83k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.09k, False: 42.4k]
  ------------------
  675|  1.83k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.32k, False: 506]
  |  Branch (675:29): [True: 1.01k, False: 816]
  |  Branch (675:45): [True: 1.15k, False: 166]
  |  Branch (675:61): [True: 1.01k, False: 144]
  ------------------
  676|  1.01k|                        {
  677|  1.01k|                            return OpCode::XORI;
  678|  1.01k|                        }
  679|    816|                        break;
  680|  43.5k|                }
  681|  16.2k|                break;
  682|  43.5k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  16.2k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 6.85k, False: 135k]
  ------------------
  686|  6.85k|                char c1 = token[0];
  687|  6.85k|                char c2 = token[1];
  688|  6.85k|                char c3 = token[2];
  689|  6.85k|                char c4 = token[3];
  690|  6.85k|                char c5 = token[4];
  691|       |
  692|  6.85k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 1.35k, False: 5.49k]
  ------------------
  693|  6.85k|                {
  694|  1.44k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 1.44k, False: 5.40k]
  ------------------
  695|  1.44k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 6.85k]
  ------------------
  696|  1.44k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 1.44k, False: 0]
  |  Branch (696:29): [True: 1.44k, False: 0]
  |  Branch (696:45): [True: 1.44k, False: 0]
  |  Branch (696:61): [True: 1.44k, False: 0]
  |  Branch (696:77): [True: 1.44k, False: 0]
  ------------------
  697|  1.44k|                        {
  698|  1.44k|                            return OpCode::ADDUI;
  699|  1.44k|                        }
  700|      0|                        break;
  701|       |
  702|    491|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 491, False: 6.36k]
  ------------------
  703|    491|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 6.85k]
  ------------------
  704|    491|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 491, False: 0]
  |  Branch (704:29): [True: 491, False: 0]
  |  Branch (704:45): [True: 491, False: 0]
  |  Branch (704:61): [True: 491, False: 0]
  |  Branch (704:77): [True: 491, False: 0]
  ------------------
  705|    491|                        {
  706|    491|                            return OpCode::DIVUI;
  707|    491|                        }
  708|      0|                        break;
  709|       |
  710|  1.87k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 1.87k, False: 4.98k]
  ------------------
  711|  1.87k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 6.85k]
  ------------------
  712|  1.87k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 1.87k, False: 0]
  |  Branch (712:29): [True: 1.87k, False: 0]
  |  Branch (712:45): [True: 1.87k, False: 0]
  |  Branch (712:61): [True: 1.87k, False: 0]
  ------------------
  713|  1.87k|                        {
  714|  1.87k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 1.87k]
  ------------------
  715|  1.87k|                            {
  716|    124|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 124, False: 1.74k]
  ------------------
  717|    124|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 1.87k]
  ------------------
  718|    124|                                    return OpCode::MULTD;
  719|       |
  720|    768|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 768, False: 1.10k]
  ------------------
  721|    768|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 1.87k]
  ------------------
  722|    768|                                    return OpCode::MULTF;
  723|       |
  724|    287|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 287, False: 1.58k]
  ------------------
  725|    287|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 1.87k]
  ------------------
  726|    287|                                    return OpCode::MULTI;
  727|       |
  728|    692|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 692, False: 1.17k]
  ------------------
  729|    692|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 1.87k]
  ------------------
  730|    692|                                    return OpCode::MULTU;
  731|  1.87k|                            }
  732|  1.87k|                        }
  733|      0|                        break;
  734|       |
  735|  1.68k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 1.68k, False: 5.16k]
  ------------------
  736|  1.68k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 6.85k]
  ------------------
  737|  1.68k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 1.68k]
  ------------------
  738|  1.68k|                        {
  739|    490|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 490, False: 1.19k]
  ------------------
  740|    490|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 1.68k]
  ------------------
  741|    490|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 490, False: 0]
  |  Branch (741:37): [True: 490, False: 0]
  |  Branch (741:53): [True: 490, False: 0]
  |  Branch (741:69): [True: 490, False: 0]
  ------------------
  742|    490|                                {
  743|    490|                                    return OpCode::SEQUI;
  744|    490|                                }
  745|      0|                                break;
  746|       |
  747|    465|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 465, False: 1.22k]
  ------------------
  748|    465|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 1.68k]
  ------------------
  749|    465|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 379, False: 86]
  |  Branch (749:37): [True: 379, False: 86]
  |  Branch (749:53): [True: 379, False: 0]
  |  Branch (749:69): [True: 379, False: 0]
  ------------------
  750|    379|                                {
  751|    379|                                    return OpCode::SGEUI;
  752|    379|                                }
  753|     86|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:58): [True: 86, False: 0]
  |  Branch (753:74): [True: 86, False: 0]
  ------------------
  754|     86|                                {
  755|     86|                                    return OpCode::SGTUI;
  756|     86|                                }
  757|      0|                                break;
  758|       |
  759|    467|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 467, False: 1.21k]
  ------------------
  760|    467|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 1.68k]
  ------------------
  761|    467|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 359, False: 108]
  |  Branch (761:37): [True: 359, False: 108]
  |  Branch (761:53): [True: 359, False: 0]
  |  Branch (761:69): [True: 359, False: 0]
  ------------------
  762|    359|                                {
  763|    359|                                    return OpCode::SLEUI;
  764|    359|                                }
  765|    108|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 108, False: 0]
  |  Branch (765:42): [True: 108, False: 0]
  |  Branch (765:58): [True: 108, False: 0]
  |  Branch (765:74): [True: 108, False: 0]
  ------------------
  766|    108|                                {
  767|    108|                                    return OpCode::SLTUI;
  768|    108|                                }
  769|      0|                                break;
  770|       |
  771|    170|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 170, False: 1.51k]
  ------------------
  772|    170|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 1.68k]
  ------------------
  773|    170|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 170, False: 0]
  |  Branch (773:37): [True: 170, False: 0]
  |  Branch (773:53): [True: 170, False: 0]
  |  Branch (773:69): [True: 170, False: 0]
  ------------------
  774|    170|                                {
  775|    170|                                    return OpCode::SNEUI;
  776|    170|                                }
  777|      0|                                break;
  778|       |
  779|     93|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 93, False: 1.59k]
  ------------------
  780|     93|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 1.68k]
  ------------------
  781|     93|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 93, False: 0]
  |  Branch (781:37): [True: 93, False: 0]
  |  Branch (781:53): [True: 93, False: 0]
  |  Branch (781:69): [True: 93, False: 0]
  ------------------
  782|     93|                                {
  783|     93|                                    return OpCode::SUBUI;
  784|     93|                                }
  785|      0|                                break;
  786|  1.68k|                        }
  787|       |
  788|      0|                        break;
  789|  6.85k|                }
  790|       |
  791|  1.35k|                break;
  792|  6.85k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  1.35k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 1.19k, False: 140k]
  ------------------
  796|  1.19k|                char c1 = token[0];
  797|  1.19k|                char c2 = token[1];
  798|  1.19k|                char c3 = token[2];
  799|  1.19k|                char c4 = token[3];
  800|  1.19k|                char c5 = token[4];
  801|  1.19k|                char c6 = token[5];
  802|       |
  803|  1.19k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 736, False: 458]
  |  Branch (803:21): [True: 736, False: 458]
  |  Branch (803:37): [True: 736, False: 0]
  |  Branch (803:53): [True: 736, False: 0]
  ------------------
  804|    736|                {
  805|    736|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 736]
  ------------------
  806|    736|                    {
  807|    371|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 371, False: 365]
  ------------------
  808|    371|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 736]
  ------------------
  809|    371|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 371, False: 0]
  ------------------
  810|    371|                            {
  811|    371|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 80, False: 291]
  ------------------
  812|     80|                                {
  813|     80|                                    return OpCode::CVTD2F;
  814|     80|                                }
  815|    291|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 291, False: 0]
  ------------------
  816|    291|                                {
  817|    291|                                    return OpCode::CVTD2I;
  818|    291|                                }
  819|    371|                            }
  820|      0|                            break;
  821|       |
  822|    179|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 179, False: 557]
  ------------------
  823|    179|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 736]
  ------------------
  824|    179|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 179, False: 0]
  ------------------
  825|    179|                            {
  826|    179|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 81, False: 98]
  ------------------
  827|     81|                                {
  828|     81|                                    return OpCode::CVTF2D;
  829|     81|                                }
  830|     98|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 98, False: 0]
  ------------------
  831|     98|                                {
  832|     98|                                    return OpCode::CVTF2I;
  833|     98|                                }
  834|    179|                            }
  835|      0|                            break;
  836|       |
  837|    186|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 186, False: 550]
  ------------------
  838|    186|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 736]
  ------------------
  839|    186|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 186, False: 0]
  ------------------
  840|    186|                            {
  841|    186|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 89, False: 97]
  ------------------
  842|     89|                                {
  843|     89|                                    return OpCode::CVTI2D;
  844|     89|                                }
  845|     97|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 97, False: 0]
  ------------------
  846|     97|                                {
  847|     97|                                    return OpCode::CVTI2F;
  848|     97|                                }
  849|    186|                            }
  850|    736|                    }
  851|    736|                }
  852|    458|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 168, False: 290]
  |  Branch (852:26): [True: 168, False: 290]
  |  Branch (852:42): [True: 168, False: 0]
  |  Branch (852:58): [True: 168, False: 0]
  |  Branch (852:74): [True: 168, False: 0]
  ------------------
  853|    458|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 168, False: 0]
  |  Branch (853:42): [True: 168, False: 0]
  ------------------
  854|    168|                {
  855|    168|                    return OpCode::MULTUI;
  856|    168|                }
  857|    290|                break;
  858|  1.19k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  1.20k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 1.20k, False: 140k]
  ------------------
  862|  1.20k|                char c1 = token[0];
  863|  1.20k|                char c2 = token[1];
  864|  1.20k|                char c3 = token[2];
  865|  1.20k|                char c4 = token[3];
  866|  1.20k|                char c5 = token[4];
  867|  1.20k|                char c6 = token[5];
  868|  1.20k|                char c7 = token[6];
  869|       |
  870|  1.20k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 1.08k, False: 111]
  |  Branch (870:21): [True: 1.08k, False: 111]
  |  Branch (870:37): [True: 1.08k, False: 0]
  |  Branch (870:53): [True: 1.08k, False: 0]
  ------------------
  871|  1.08k|                {
  872|  1.08k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 517, False: 572]
  |  Branch (872:25): [True: 517, False: 572]
  |  Branch (872:41): [True: 517, False: 0]
  |  Branch (872:54): [True: 517, False: 0]
  |  Branch (872:70): [True: 517, False: 0]
  ------------------
  873|    517|                    {
  874|    517|                        return OpCode::MOVI2FP;
  875|    517|                    }
  876|    572|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 572, False: 0]
  |  Branch (876:30): [True: 572, False: 0]
  |  Branch (876:46): [True: 572, False: 0]
  |  Branch (876:62): [True: 572, False: 0]
  |  Branch (876:75): [True: 572, False: 0]
  ------------------
  877|    572|                    {
  878|    572|                        return OpCode::MOVFP2I;
  879|    572|                    }
  880|  1.08k|                }
  881|    111|                break;
  882|  1.20k|            }
  883|       |
  884|  10.5k|            default: {
  ------------------
  |  Branch (884:13): [True: 10.5k, False: 131k]
  ------------------
  885|  10.5k|                break;
  886|  1.20k|            }
  887|   141k|        }
  888|       |
  889|       |        // None found
  890|  51.8k|        return OpCode::NONE;
  891|   141k|    }
_ZN3dlx3iceEcc:
   17|   222k|    {
   18|   222k|        constexpr const char diff = 'a' - 'A';
   19|   222k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 139k, False: 83.2k]
  |  Branch (19:28): [True: 32.6k, False: 50.6k]
  ------------------
   20|   222k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   149k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  1.56k|    {
  193|  1.56k|        ParseError err;
  194|       |
  195|  1.56k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  1.56k|        err.m_LineNumber                           = line_number;
  197|  1.56k|        err.m_Column                               = column;
  198|  1.56k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  1.56k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  1.56k|        return err;
  202|  1.56k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  1.56k|    {
  207|  1.56k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  1.56k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  1.56k|                                                         actual_type);
  210|  1.56k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|     88|    {
  216|     88|        ParseError err;
  217|       |
  218|     88|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|     88|        err.m_LineNumber        = line_number;
  220|     88|        err.m_Column            = column;
  221|     88|        err.invalid_number.text = text;
  222|       |
  223|     88|        return err;
  224|     88|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|     88|    {
  228|     88|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|     88|                                                token.GetColumn().unsafe(), token.GetText());
  230|     88|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      5|    {
  235|      5|        ParseError err;
  236|       |
  237|      5|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      5|        err.m_LineNumber = line_number;
  239|      5|        err.m_Column     = column;
  240|       |
  241|      5|        return err;
  242|      5|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      5|    {
  247|      5|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      5|                                                                     token.GetColumn().unsafe());
  249|      5|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  41.6k|    {
  255|  41.6k|        ParseError err;
  256|       |
  257|  41.6k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  41.6k|        err.m_LineNumber                   = line_number;
  259|  41.6k|        err.m_Column                       = column;
  260|  41.6k|        err.unexpected_token.expected_type = expected_type;
  261|  41.6k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  41.6k|        return err;
  264|  41.6k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  41.6k|    {
  269|  41.6k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  41.6k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  41.6k|                                                  token.GetType());
  272|  41.6k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  1.70k|    {
  277|  1.70k|        ParseError err;
  278|       |
  279|  1.70k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  1.70k|        err.m_LineNumber                   = line_number;
  281|  1.70k|        err.m_Column                       = column;
  282|  1.70k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  1.70k|        return err;
  285|  1.70k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    955|    {
  289|    955|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    955|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    955|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  34.1k|    {
  296|  34.1k|        ParseError err;
  297|       |
  298|  34.1k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  34.1k|        err.m_LineNumber                       = line_number;
  300|  34.1k|        err.m_Column                           = column;
  301|  34.1k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  34.1k|        return err;
  304|  34.1k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  34.1k|    {
  309|  34.1k|        return ConstructInvalidLabelIdentifierParseError(
  310|  34.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  34.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  1.94k|    {
  317|  1.94k|        ParseError err;
  318|       |
  319|  1.94k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  1.94k|        err.m_LineNumber                     = line_number;
  321|  1.94k|        err.m_Column                         = column;
  322|  1.94k|        err.label_already_defined.label_name = label_name;
  323|  1.94k|        err.label_already_defined.at_line    = at_line;
  324|  1.94k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  1.94k|        return err;
  327|  1.94k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  1.94k|    {
  332|  1.94k|        return ConstructLabelAlreadyDefinedParseError(
  333|  1.94k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  1.94k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  1.94k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  55.3k|    {
  340|  55.3k|        ParseError err;
  341|       |
  342|  55.3k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  55.3k|        err.m_LineNumber = line_number;
  344|  55.3k|        err.m_Column     = column;
  345|       |
  346|  55.3k|        return err;
  347|  55.3k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  55.3k|    {
  352|  55.3k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  55.3k|                                                        token.GetColumn().unsafe());
  354|  55.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  12.3k|    {
  360|  12.3k|        ParseError err;
  361|       |
  362|  12.3k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  12.3k|        err.m_LineNumber               = line_number;
  364|  12.3k|        err.m_Column                   = column;
  365|  12.3k|        err.too_few_arguments.required = required;
  366|  12.3k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  12.3k|        return err;
  369|  12.3k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  12.3k|    {
  374|  12.3k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  12.3k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  12.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.09k|    {
  381|  1.09k|        ParseError err;
  382|       |
  383|  1.09k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.09k|        err.m_LineNumber           = line_number;
  385|  1.09k|        err.m_Column               = column;
  386|  1.09k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.09k|        return err;
  389|  1.09k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.09k|    {
  393|  1.09k|        return ConstructEmptyLabelParseError(
  394|  1.09k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.09k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 963, False: 128]
  ------------------
  396|    963|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.09k|                        token.GetText());
  398|  1.09k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    158|    {
  403|    158|        ParseError err;
  404|       |
  405|    158|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    158|        err.m_LineNumber = line_number;
  407|    158|        err.m_Column     = column;
  408|       |
  409|    158|        return err;
  410|    158|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    158|    {
  414|    158|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    158|                                               token.GetColumn().unsafe());
  416|    158|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   149k|    {
   19|   149k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   149k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.31k|    {
  182|  4.31k|        ParsedProgram program;
  183|       |
  184|  4.31k|        program.m_Tokens = tokens;
  185|       |
  186|  4.31k|        phi::boolean line_has_instruction{false};
  187|  4.31k|        phi::usize   label_count{0u};
  188|       |
  189|   346k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 342k, False: 4.31k]
  ------------------
  190|   342k|        {
  191|   342k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   342k|            switch (current_token.GetType())
  196|   342k|            {
  197|       |                // Ignore comments
  198|  51.7k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 51.7k, False: 290k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  51.7k|                    break;
  201|       |
  202|   132k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 132k, False: 209k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   132k|                    line_has_instruction = false;
  205|   132k|                    break;
  206|       |
  207|  38.9k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 38.9k, False: 303k]
  ------------------
  208|  38.9k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 2.97k, False: 35.9k]
  ------------------
  209|  2.97k|                    {
  210|  2.97k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  2.97k|                                current_token, Token::Type::NewLine));
  212|  2.97k|                        break;
  213|  2.97k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  35.9k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 30.2k, False: 5.64k]
  ------------------
  218|  30.2k|                    {
  219|  30.2k|                        program.AddParseError(
  220|  30.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  30.2k|                        break;
  222|  30.2k|                    }
  223|       |
  224|  5.64k|                    std::string_view label_name = current_token.GetText();
  225|  5.64k|                    label_name.remove_suffix(1);
  226|       |
  227|  5.64k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 750, False: 4.89k]
  ------------------
  228|    750|                    {
  229|    750|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|    750|                                current_token.GetLineNumber().unsafe(),
  231|    750|                                current_token.GetColumn().unsafe(), label_name));
  232|    750|                        break;
  233|    750|                    }
  234|       |
  235|  4.89k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 1.38k, False: 3.51k]
  ------------------
  236|  1.38k|                    {
  237|  1.38k|                        program.AddParseError(
  238|  1.38k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  1.38k|                        break;
  240|  1.38k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  3.51k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 1.94k, False: 1.56k]
  ------------------
  244|  1.94k|                    {
  245|       |                        // Find first defintions of label
  246|  1.94k|                        const Token* first_label_definition =
  247|  1.94k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  1.94k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  1.94k|                                    {
  250|  1.94k|                                        std::string_view token_label_name = t.GetText();
  251|  1.94k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  1.94k|                                        if (token_label_name == label_name)
  254|  1.94k|                                        {
  255|  1.94k|                                            return true;
  256|  1.94k|                                        }
  257|  1.94k|                                    }
  258|       |
  259|  1.94k|                                    return false;
  260|  1.94k|                                });
  261|       |
  262|  1.94k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  1.94k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  1.94k|                                current_token, *first_label_definition));
  266|  1.94k|                        break;
  267|  1.94k|                    }
  268|       |
  269|  1.56k|                    program.m_JumpData[label_name] =
  270|  1.56k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  1.56k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  1.56k|                    break;
  277|  3.51k|                }
  278|       |
  279|  86.2k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 86.2k, False: 256k]
  ------------------
  280|  86.2k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 55.3k, False: 30.9k]
  ------------------
  281|  55.3k|                    {
  282|  55.3k|                        program.AddParseError(
  283|  55.3k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  55.3k|                        break;
  285|  55.3k|                    }
  286|       |
  287|  30.9k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  30.9k|                    PHI_ASSERT(current_token.HasHint());
  291|  30.9k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  30.9k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  30.9k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  30.9k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  30.9k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  30.9k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  30.9k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  30.9k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  30.9k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  52.8k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 45.1k, False: 7.65k]
  ------------------
  313|  45.1k|                    {
  314|       |                        // Get next token
  315|  45.1k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 178, False: 45.0k]
  ------------------
  316|    178|                        {
  317|    178|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    178|                                    current_token, number_of_argument_required.unsafe(),
  319|    178|                                    argument_num.unsafe()));
  320|    178|                            break;
  321|    178|                        }
  322|       |
  323|  45.0k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  45.0k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 6.01k, False: 39.0k]
  ------------------
  327|  6.01k|                        {
  328|  6.01k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 158, False: 5.85k]
  ------------------
  329|    158|                            {
  330|    158|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    158|                            }
  332|       |
  333|  6.01k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  6.01k|                            continue;
  336|  6.01k|                        }
  337|       |
  338|  39.0k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 12.1k, False: 26.8k]
  ------------------
  339|  12.1k|                        {
  340|  12.1k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  12.1k|                                    token, number_of_argument_required.unsafe(),
  342|  12.1k|                                    argument_num.unsafe()));
  343|  12.1k|                            break;
  344|  12.1k|                        }
  345|       |
  346|  26.8k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  26.8k|                                parse_instruction_argument(
  348|  26.8k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  26.8k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 10.9k, False: 15.8k]
  ------------------
  350|  10.9k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  10.9k|                            break;
  353|  10.9k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  15.8k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  15.8k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  15.8k|                        argument_num++;
  360|  15.8k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  15.8k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  30.9k|                    program.m_Instructions.emplace_back(instruction);
  368|  30.9k|                    line_has_instruction = true;
  369|  30.9k|                    break;
  370|  86.2k|                }
  371|       |
  372|  32.7k|                default:
  ------------------
  |  Branch (372:17): [True: 32.7k, False: 309k]
  ------------------
  373|  32.7k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  32.7k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 18.5k, False: 14.2k]
  ------------------
  375|  18.5k|                    {
  376|  18.5k|                        expected_token_type = Token::Type::NewLine;
  377|  18.5k|                    }
  378|       |
  379|  32.7k|                    program.AddParseError(
  380|  32.7k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  32.7k|                    break;
  382|   342k|            }
  383|   342k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.31k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 193, False: 4.12k]
  ------------------
  387|    193|        {
  388|  2.00k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 1.80k, False: 193]
  ------------------
  389|  1.80k|            {
  390|  1.80k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  1.80k|                const Token& token = *it;
  393|  1.80k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.09k, False: 717]
  ------------------
  394|  1.09k|                {
  395|  1.09k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.09k|                    --label_count;
  397|  1.09k|                }
  398|  1.80k|            }
  399|    193|        }
  400|       |
  401|  4.31k|        return program;
  402|  4.31k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.31k|    {
  406|  4.31k|        TokenStream tokens = Tokenize(source);
  407|  4.31k|        return Parse(tokens);
  408|  4.31k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  26.8k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  26.8k|        switch (token.GetType())
   38|  26.8k|        {
   39|    800|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 800, False: 26.0k]
  ------------------
   40|    800|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 128, False: 672]
  ------------------
   41|    800|                                          ArgumentType::AddressDisplacement))
   42|    128|                {
   43|    128|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    128|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    128|                    return {};
   47|    128|                }
   48|       |
   49|       |                // Get address displacement
   50|    672|                PHI_ASSERT(token.HasHint());
   51|       |
   52|    672|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|    672|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 5, False: 667]
  ------------------
   55|      5|                {
   56|      5|                    program.AddParseError(
   57|      5|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      5|                    return {};
   59|      5|                }
   60|       |
   61|    667|                auto         it           = tokens.current_position();
   62|    667|                const Token& first_token  = tokens.consume();
   63|    667|                const Token& second_token = tokens.consume();
   64|    667|                const Token& third_token  = tokens.consume();
   65|       |
   66|    667|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 667, False: 0]
  ------------------
   67|    667|                {
   68|    667|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    667|                            first_token, Token::Type::OpenBracket));
   70|    667|                    return {};
   71|    667|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  9.56k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 9.56k, False: 17.2k]
  ------------------
   98|  9.56k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 209, False: 9.35k]
  ------------------
   99|    209|                {
  100|    209|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    209|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    209|                    return {};
  103|    209|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  9.35k|                return ConstructInstructionArgumentRegisterInt(
  109|  9.35k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  9.56k|            }
  111|  3.39k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 3.39k, False: 23.4k]
  ------------------
  112|  3.39k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 499, False: 2.90k]
  ------------------
  113|    499|                {
  114|    499|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    499|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    499|                    return {};
  117|    499|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  2.90k|                return ConstructInstructionArgumentRegisterFloat(
  123|  2.90k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  3.39k|            }
  125|    955|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 955, False: 25.8k]
  ------------------
  126|    955|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    955|                return {};
  129|  3.39k|            }
  130|  4.13k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 4.13k, False: 22.7k]
  ------------------
  131|       |                // Parse as Label
  132|  4.13k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 290, False: 3.84k]
  ------------------
  133|    290|                {
  134|    290|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|    290|                            token, expected_argument_type, ArgumentType::Label));
  136|    290|                    return {};
  137|    290|                }
  138|       |
  139|  3.84k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 3.84k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  3.84k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 2.46k, False: 1.38k]
  ------------------
  146|  2.46k|                {
  147|  2.46k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  2.46k|                    return {};
  149|  2.46k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  1.38k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  3.84k|            }
  155|  2.76k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.76k, False: 24.0k]
  ------------------
  156|  2.76k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 436, False: 2.33k]
  ------------------
  157|    436|                {
  158|    436|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    436|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    436|                    return {};
  161|    436|                }
  162|       |
  163|  2.33k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.24k, False: 88]
  ------------------
  164|  2.24k|                {
  165|  2.24k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.24k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.24k|                }
  168|       |
  169|     88|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|     88|                return {};
  171|  2.33k|            }
  172|       |
  173|  5.22k|            default:
  ------------------
  |  Branch (173:13): [True: 5.22k, False: 21.6k]
  ------------------
  174|  5.22k|                program.AddParseError(
  175|  5.22k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  5.22k|                return {};
  177|  26.8k|        }
  178|  26.8k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  24.2k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  24.2k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 7.15k, False: 17.1k]
  ------------------
  249|  7.15k|                                    {
  250|  7.15k|                                        std::string_view token_label_name = t.GetText();
  251|  7.15k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  7.15k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 1.94k, False: 5.21k]
  ------------------
  254|  1.94k|                                        {
  255|  1.94k|                                            return true;
  256|  1.94k|                                        }
  257|  7.15k|                                    }
  258|       |
  259|  22.3k|                                    return false;
  260|  24.2k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.74M|    {
   71|  2.74M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.74M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.74M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.74M|        return m_IntRegisters[id_value];
   77|  2.74M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  3.92M|    {
   82|  3.92M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  3.92M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  3.92M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  3.92M|        return m_IntRegisters[id_value];
   88|  3.92M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  2.44M|    {
   92|  2.44M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  2.44M|                                             RegisterAccessType::Signed),
   94|  2.44M|                   "Mismatch for instruction access type");
   95|       |
   96|  2.44M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  2.44M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  2.44M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  2.44M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 1.69M, False: 755k]
  ------------------
  101|  2.44M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 654k, False: 1.03M]
  ------------------
  102|   654k|        {
  103|   654k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   654k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   654k|        }
  105|       |
  106|  2.44M|        return GetIntRegister(id).GetSignedValue();
  107|  2.44M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  1.48M|    {
  111|  1.48M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  1.48M|                                             RegisterAccessType::Unsigned),
  113|  1.48M|                   "Mismatch for instruction access type");
  114|       |
  115|  1.48M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  1.48M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  1.48M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  1.48M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 791k, False: 691k]
  ------------------
  120|  1.48M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 501k, False: 289k]
  ------------------
  121|   501k|        {
  122|   501k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   501k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   501k|        }
  124|       |
  125|  1.48M|        return GetIntRegister(id).GetUnsignedValue();
  126|  1.48M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  1.57M|    {
  130|  1.57M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  1.57M|                                             RegisterAccessType::Signed),
  132|  1.57M|                   "Mismatch for instruction access type");
  133|       |
  134|  1.57M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  1.57M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 390k, False: 1.18M]
  ------------------
  137|   390k|        {
  138|   390k|            return;
  139|   390k|        }
  140|       |
  141|  1.18M|        reg.SetSignedValue(value);
  142|       |
  143|  1.18M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.18M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.18M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.18M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.16M|    {
  151|  1.16M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.16M|                                             RegisterAccessType::Unsigned),
  153|  1.16M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.16M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.16M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 226k, False: 936k]
  ------------------
  158|   226k|        {
  159|   226k|            return;
  160|   226k|        }
  161|       |
  162|   936k|        reg.SetUnsignedValue(value);
  163|       |
  164|   936k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   936k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   936k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   936k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.94M|    {
  172|  1.94M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.94M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.94M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.94M|        return m_FloatRegisters[id_value];
  178|  1.94M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   619k|    {
  183|   619k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   619k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   619k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   619k|        return m_FloatRegisters[id_value];
  189|   619k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   619k|    {
  193|   619k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   619k|                                             RegisterAccessType::Float),
  195|   619k|                   "Mismatch for instruction access type");
  196|       |
  197|   619k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   619k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   619k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   619k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 602k, False: 17.5k]
  ------------------
  202|   619k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 258k, False: 344k]
  ------------------
  203|   258k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   258k|        }
  208|       |
  209|   619k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   619k|        return reg.GetValue();
  212|   619k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   793k|    {
  216|   793k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   793k|                                             RegisterAccessType::Double),
  218|   793k|                   "Mismatch for instruction access type");
  219|       |
  220|   793k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 13, False: 792k]
  ------------------
  221|     13|        {
  222|     13|            Raise(Exception::MisalignedRegisterAccess);
  223|     13|            return {0.0};
  224|     13|        }
  225|       |
  226|   792k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   792k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   792k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   792k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 777k, False: 15.1k]
  ------------------
  231|   792k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 508k, False: 269k]
  ------------------
  232|   508k|        {
  233|   508k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   508k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   508k|        }
  235|       |
  236|   792k|        const FloatRegisterValueType register_value_type_high =
  237|   792k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   792k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 777k, False: 15.1k]
  ------------------
  239|   792k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 130, False: 777k]
  ------------------
  240|    130|        {
  241|    130|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|    130|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|    130|        }
  243|       |
  244|   792k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   792k|        const FloatRegister& second_reg =
  246|   792k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   792k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   792k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   792k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   792k|        const std::uint32_t first_value_bits =
  255|   792k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   792k|        const std::uint32_t second_value_bits =
  257|   792k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   792k|        std::uint64_t final_value_bits =
  260|   792k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   792k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   793k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   793k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   184k|    {
  269|   184k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   184k|                                             RegisterAccessType::Float),
  271|   184k|                   "Mismatch for instruction access type");
  272|       |
  273|   184k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   184k|        reg.SetValue(value);
  276|       |
  277|   184k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   184k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   184k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   184k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|  88.5k|    {
  285|  88.5k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|  88.5k|                                             RegisterAccessType::Double),
  287|  88.5k|                   "Mismatch for instruction access type");
  288|       |
  289|  88.5k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 88.5k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|  88.5k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|  88.5k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|  88.5k|        double              value_raw  = value.unsafe();
  299|  88.5k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|  88.5k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|  88.5k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|  88.5k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|  88.5k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|  88.5k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|  88.5k|        FloatRegister& second_reg =
  309|  88.5k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|  88.5k|        first_reg.SetValue(first_value);
  312|  88.5k|        second_reg.SetValue(second_value);
  313|       |
  314|  88.5k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|  88.5k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|  88.5k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|  88.5k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|  88.5k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   511k|    {
  323|   511k|        return m_FPSR;
  324|   511k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   864k|    {
  328|   864k|        return m_FPSR;
  329|   864k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   864k|    {
  333|   864k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   864k|        return status_reg.Get();
  336|   864k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   511k|    {
  340|   511k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   511k|        status_reg.SetStatus(value);
  343|   511k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  4.82M|    {
  347|  4.82M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  4.82M|        inst.Execute(*this);
  350|  4.82M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  4.31k|    {
  354|  4.31k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 3.34k, False: 977]
  ------------------
  355|  3.34k|        {
  356|  3.34k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.34k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  3.34k|            return false;
  358|  3.34k|        }
  359|       |
  360|    977|        m_CurrentProgram = &program;
  361|       |
  362|    977|        m_ProgramCounter               = 0u;
  363|    977|        m_Halted                       = false;
  364|    977|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    977|        m_LastRaisedException          = Exception::None;
  366|    977|        m_CurrentStepCount             = 0u;
  367|       |
  368|    977|        return true;
  369|  4.31k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.43M|    {
  374|  1.43M|        return m_CurrentProgram;
  375|  1.43M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  4.82M|    {
  379|       |        // No nothing when no program is loaded
  380|  4.82M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 4.82M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  4.82M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 74, False: 4.82M]
  ------------------
  387|     74|        {
  388|     74|            m_Halted                       = true;
  389|     74|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     74|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  4.82M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 74, False: 4.82M]
  ------------------
  394|     74|        {
  395|     74|            return;
  396|     74|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  4.82M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  4.82M|        const auto& current_instruction =
  403|  4.82M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  4.82M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  4.82M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 92, False: 4.82M]
  ------------------
  410|     92|        {
  411|     92|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|     92|            return;
  413|     92|        }
  414|       |
  415|  4.82M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  4.82M|        ++m_CurrentStepCount;
  418|       |
  419|  4.82M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 811, False: 4.82M]
  |  Branch (419:14): [True: 4.82M, False: 0]
  |  Branch (419:42): [True: 482, False: 4.82M]
  ------------------
  420|  4.82M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 329, False: 4.82M]
  ------------------
  421|    811|        {
  422|    811|            m_Halted                       = true;
  423|    811|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|    811|        }
  425|  4.82M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|    977|    {
  429|       |        // Do nothing when no program is loaded
  430|    977|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 977]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|    977|        m_ProgramCounter               = 0u;
  436|    977|        m_Halted                       = false;
  437|    977|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|    977|        m_LastRaisedException          = Exception::None;
  439|    977|        m_CurrentStepCount             = 0u;
  440|       |
  441|  4.82M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 4.82M, False: 977]
  ------------------
  442|  4.82M|        {
  443|  4.82M|            ExecuteStep();
  444|  4.82M|        }
  445|       |
  446|    977|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|    977|                   "RegisterAccessType was not reset correctly");
  448|    977|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  4.31k|    {
  465|  4.31k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 138k, False: 4.31k]
  ------------------
  466|   138k|        {
  467|   138k|            reg.SetSignedValue(0);
  468|   138k|        }
  469|       |
  470|  4.31k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 138k, False: 4.31k]
  ------------------
  471|   138k|        {
  472|   138k|            reg.SetValue(0.0f);
  473|   138k|        }
  474|       |
  475|  4.31k|        m_FPSR.SetStatus(false);
  476|  4.31k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  4.31k|    {
  480|  4.31k|        m_MemoryBlock.Clear();
  481|  4.31k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   160k|    {
  489|   160k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   160k|        m_LastRaisedException = exception;
  492|       |
  493|   160k|        switch (exception)
  494|   160k|        {
  495|      7|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 7, False: 160k]
  ------------------
  496|      7|                m_Halted = true;
  497|      7|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      7|                return;
  499|  46.3k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 46.3k, False: 113k]
  ------------------
  500|  46.3k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  46.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  46.3k|                return;
  502|  47.9k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 47.9k, False: 112k]
  ------------------
  503|  47.9k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  47.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  47.9k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 160k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      8|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 8, False: 160k]
  ------------------
  510|      8|                m_Halted = true;
  511|      8|                return;
  512|     46|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 46, False: 160k]
  ------------------
  513|     46|                m_Halted = true;
  514|     46|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     46|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|     46|                return;
  516|  65.7k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 65.7k, False: 94.3k]
  ------------------
  517|  65.7k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  65.7k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|  65.7k|                return;
  519|     17|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 17, False: 160k]
  ------------------
  520|     17|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     17|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     17|                m_Halted = true;
  522|     17|                return;
  523|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 15, False: 160k]
  ------------------
  524|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     15|                m_Halted = true;
  526|     15|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 160k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   160k|#endif
  532|   160k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|      8|    {
  559|      8|        return m_MemoryBlock;
  560|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|   437k|    {
  574|   437k|        return m_NextProgramCounter;
  575|   437k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.43M|    {
  579|  1.43M|        m_NextProgramCounter = new_npc;
  580|  1.43M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  8.35M|    {
   37|  8.35M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  8.35M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  8.35M|        switch (expected_access)
   41|  8.35M|        {
   42|  1.90M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.90M, False: 6.45M]
  ------------------
   43|  1.90M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 8.35M]
  ------------------
   45|      0|                return false;
   46|   107k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 107k, False: 8.24M]
  ------------------
   47|   107k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 53.7k, False: 53.7k]
  |  Branch (47:63): [True: 53.7k, False: 0]
  ------------------
   48|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 0, False: 8.35M]
  ------------------
   49|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 0, False: 0]
  ------------------
   51|  61.0k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 61.0k, False: 8.29M]
  ------------------
   52|  61.0k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 30.5k, False: 30.5k]
  |  Branch (52:63): [True: 30.5k, False: 0]
  ------------------
   53|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 0, False: 8.35M]
  ------------------
   54|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 0, False: 0]
  |  Branch (54:64): [True: 0, False: 0]
  ------------------
   55|  6.28M|            default:
  ------------------
  |  Branch (55:13): [True: 6.28M, False: 2.06M]
  ------------------
   56|  6.28M|                return expected_access == access;
   57|  8.35M|        }
   58|  8.35M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   165k|    {
   14|   165k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 26.7k, False: 139k]
  ------------------
   15|  26.7k|        {
   16|  26.7k|            char first_char = token[0];
   17|  26.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 12.4k, False: 14.2k]
  |  Branch (17:38): [True: 913, False: 13.3k]
  ------------------
   18|  13.3k|            {
   19|  13.3k|                char second_char = token[1];
   20|  13.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 12.7k, False: 679]
  |  Branch (20:43): [True: 12.6k, False: 74]
  ------------------
   21|  12.6k|                {
   22|  12.6k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  12.6k|                }
   24|  13.3k|            }
   25|  26.7k|        }
   26|   139k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 68.1k, False: 70.9k]
  ------------------
   27|  68.1k|        {
   28|  68.1k|            char first_char = token[0];
   29|  68.1k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 5.72k, False: 62.3k]
  |  Branch (29:38): [True: 2.46k, False: 59.9k]
  ------------------
   30|  8.19k|            {
   31|  8.19k|                char second_char = token[1];
   32|  8.19k|                char third_char  = token[2];
   33|       |
   34|  8.19k|                switch (second_char)
   35|  8.19k|                {
   36|  3.07k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 3.07k, False: 5.12k]
  ------------------
   37|  3.07k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 2.08k, False: 987]
  |  Branch (37:50): [True: 1.98k, False: 99]
  ------------------
   38|  1.98k|                        {
   39|  1.98k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.98k|                        }
   41|  1.08k|                        break;
   42|  3.07k|                    }
   43|  2.89k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.89k, False: 5.29k]
  ------------------
   44|  2.89k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 2.18k, False: 714]
  |  Branch (44:50): [True: 2.11k, False: 72]
  ------------------
   45|  2.11k|                        {
   46|  2.11k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  2.11k|                        }
   48|    786|                        break;
   49|  2.89k|                    }
   50|  1.45k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.45k, False: 6.73k]
  ------------------
   51|  1.45k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.04k, False: 411]
  |  Branch (51:50): [True: 260, False: 151]
  ------------------
   52|  1.30k|                        {
   53|  1.30k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.30k|                        }
   55|    151|                        break;
   56|  1.45k|                    }
   57|    770|                    default: {
  ------------------
  |  Branch (57:21): [True: 770, False: 7.42k]
  ------------------
   58|    770|                        break;
   59|  1.45k|                    }
   60|  8.19k|                }
   61|  8.19k|            }
   62|  68.1k|        }
   63|       |
   64|   147k|        return IntRegisterID::None;
   65|   165k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   147k|    {
   69|   147k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 14.0k, False: 133k]
  ------------------
   70|  14.0k|        {
   71|  14.0k|            char first_char = token[0];
   72|  14.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 1.42k, False: 12.6k]
  |  Branch (72:38): [True: 613, False: 12.0k]
  ------------------
   73|  2.04k|            {
   74|  2.04k|                char second_char = token[1];
   75|  2.04k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 1.52k, False: 515]
  |  Branch (75:43): [True: 1.45k, False: 72]
  ------------------
   76|  1.45k|                {
   77|  1.45k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  1.45k|                }
   79|  2.04k|            }
   80|  14.0k|        }
   81|   133k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 62.7k, False: 70.9k]
  ------------------
   82|  62.7k|        {
   83|  62.7k|            char first_char = token[0];
   84|  62.7k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 4.46k, False: 58.2k]
  |  Branch (84:38): [True: 1.55k, False: 56.6k]
  ------------------
   85|  6.01k|            {
   86|  6.01k|                char second_char = token[1];
   87|  6.01k|                char third_char  = token[2];
   88|       |
   89|  6.01k|                switch (second_char)
   90|  6.01k|                {
   91|  1.21k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 1.21k, False: 4.79k]
  ------------------
   92|  1.21k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 541, False: 676]
  |  Branch (92:50): [True: 475, False: 66]
  ------------------
   93|    475|                        {
   94|    475|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    475|                        }
   96|    742|                        break;
   97|  1.21k|                    }
   98|  3.78k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 3.78k, False: 2.23k]
  ------------------
   99|  3.78k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 3.70k, False: 73]
  |  Branch (99:50): [True: 3.64k, False: 66]
  ------------------
  100|  3.64k|                        {
  101|  3.64k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  3.64k|                        }
  103|    139|                        break;
  104|  3.78k|                    }
  105|    239|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 239, False: 5.77k]
  ------------------
  106|    239|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 101, False: 138]
  |  Branch (106:50): [True: 70, False: 68]
  ------------------
  107|    171|                        {
  108|    171|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    171|                        }
  110|     68|                        break;
  111|    239|                    }
  112|    778|                    default: {
  ------------------
  |  Branch (112:21): [True: 778, False: 5.23k]
  ------------------
  113|    778|                        break;
  114|    239|                    }
  115|  6.01k|                }
  116|  6.01k|            }
  117|  62.7k|        }
  118|       |
  119|   141k|        return FloatRegisterID::None;
  120|   147k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   167k|    {
  124|   167k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 46.3k, False: 121k]
  ------------------
  125|  46.3k|        {
  126|  46.3k|            char c1 = token[0];
  127|  46.3k|            char c2 = token[1];
  128|  46.3k|            char c3 = token[2];
  129|  46.3k|            char c4 = token[3];
  130|       |
  131|  46.3k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.87k, False: 43.4k]
  |  Branch (131:34): [True: 296, False: 43.1k]
  |  Branch (131:49): [True: 2.92k, False: 244]
  |  Branch (131:62): [True: 149, False: 95]
  ------------------
  132|  46.3k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.81k, False: 266]
  |  Branch (132:34): [True: 194, False: 72]
  |  Branch (132:49): [True: 2.81k, False: 194]
  |  Branch (132:62): [True: 0, False: 194]
  ------------------
  133|  46.3k|        }
  134|       |
  135|   121k|        return false;
  136|   167k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   268k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   121k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   521k|    {
   41|   521k|        return m_Type;
   42|   521k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   182k|    {
   51|   182k|        return m_LineNumber;
   52|   182k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   151k|    {
   56|   151k|        return m_Column;
   57|   151k|    }
_ZNK3dlx5Token7GetTextEv:
   65|  98.0k|    {
   66|  98.0k|        return m_Text;
   67|  98.0k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  33.9k|    {
   80|  33.9k|        return m_HasHint;
   81|  33.9k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  46.1k|    {
   85|  46.1k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  46.1k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  46.1k|                   m_Type == Type::ImmediateInteger);
   88|  46.1k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  46.1k|        return m_Hint;
   91|  46.1k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.31k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.31k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.31k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|    672|    {
   51|    672|        auto it = m_Iterator;
   52|  2.67k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 2.01k, False: 667]
  ------------------
   53|  2.01k|        {
   54|  2.01k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 5, False: 2.00k]
  ------------------
   55|      5|            {
   56|      5|                return false;
   57|      5|            }
   58|  2.01k|        }
   59|       |
   60|    667|        return true;
   61|    672|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   392k|    {
   65|   392k|        return m_Iterator != m_Tokens.end();
   66|   392k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   389k|    {
   70|   389k|        return m_Iterator == m_Tokens.end();
   71|   389k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   389k|    {
   85|   389k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   389k|        return *m_Iterator++;
   91|   389k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|    667|    {
  164|    667|        return m_Iterator;
  165|    667|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    193|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    193|        return m_Tokens.rbegin();
  224|    193|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  1.80k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  1.80k|        return m_Tokens.rend();
  233|  1.80k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.31k|    {
   63|  4.31k|        TokenStream tokens;
   64|       |
   65|  4.31k|        std::string_view current_token;
   66|       |
   67|  4.31k|        phi::u64 current_line_number{1u};
   68|  4.31k|        phi::u64 current_column{1u};
   69|  4.31k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.31k|        phi::boolean parsing_comment{false};
   72|       |
   73|   989k|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 985k, False: 4.31k]
  ------------------
   74|   985k|        {
   75|   985k|            const char c{source.at(i.unsafe())};
   76|       |
   77|   985k|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 146k, False: 838k]
  ------------------
   78|   146k|            {
   79|   146k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 48.1k, False: 98.6k]
  ------------------
   80|  48.1k|                {
   81|       |                    // Skip empty lines
   82|  48.1k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  48.1k|                                        current_line_number, current_column);
   84|       |
   85|  48.1k|                    parsing_comment = false;
   86|  48.1k|                    current_line_number += 1u;
   87|  48.1k|                    current_column = 1u;
   88|  48.1k|                    continue;
   89|  48.1k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|  98.6k|                tokens.emplace_back(
   93|  98.6k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|  98.6k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|  98.6k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|  98.6k|                                    current_line_number, current_column);
   98|       |
   99|  98.6k|                current_token   = std::string_view{};
  100|  98.6k|                parsing_comment = false;
  101|  98.6k|                current_line_number += 1u;
  102|  98.6k|                current_column = 0u;
  103|  98.6k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|   838k|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.03k, False: 837k]
  |  Branch (105:34): [True: 52.8k, False: 784k]
  ------------------
  106|  53.9k|            {
  107|  53.9k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 49.7k, False: 4.15k]
  ------------------
  108|  49.7k|                {
  109|  49.7k|                    token_begin = i;
  110|  49.7k|                }
  111|  4.15k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 3.49k, False: 659]
  ------------------
  112|  3.49k|                {
  113|  3.49k|                    tokens.emplace_back(ParseToken(
  114|  3.49k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  3.49k|                            current_line_number, current_column - current_token.length()));
  116|  3.49k|                    token_begin   = i;
  117|  3.49k|                    current_token = std::string_view{};
  118|  3.49k|                }
  119|       |
  120|  53.9k|                parsing_comment = true;
  121|  53.9k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  53.9k|            }
  123|   784k|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 97.9k, False: 686k]
  ------------------
  124|  97.9k|            {
  125|       |                // simply append the character
  126|  97.9k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|  97.9k|            }
  128|   686k|            else
  129|   686k|            {
  130|       |                // Not parsing a comment
  131|   686k|                switch (c)
  132|   686k|                {
  133|  89.4k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 89.4k, False: 597k]
  ------------------
  134|  91.4k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 1.97k, False: 684k]
  ------------------
  135|  93.9k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 2.48k, False: 684k]
  ------------------
  136|  93.9k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 836, False: 93.0k]
  ------------------
  137|    836|                        {
  138|    836|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    836|                            continue;
  141|    836|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  93.0k|                        tokens.emplace_back(ParseToken(
  145|  93.0k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  93.0k|                                current_line_number, current_column - current_token.length()));
  147|  93.0k|                        current_token = std::string_view{};
  148|  93.0k|                        break;
  149|  8.33k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 8.33k, False: 678k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  8.33k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 6.80k, False: 1.53k]
  ------------------
  152|  6.80k|                        {
  153|  6.80k|                            current_token =
  154|  6.80k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  6.80k|                            tokens.emplace_back(ParseToken(
  156|  6.80k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  6.80k|                                    current_line_number,
  158|  6.80k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  6.80k|                            current_token = std::string_view{};
  161|  6.80k|                        }
  162|  1.53k|                        else
  163|  1.53k|                        {
  164|       |                            // Orphan colon
  165|  1.53k|                            token_begin = i;
  166|       |
  167|  1.53k|                            tokens.emplace_back(Token::Type::Colon,
  168|  1.53k|                                                source.substr(token_begin.unsafe(), 1),
  169|  1.53k|                                                current_line_number, current_column);
  170|  1.53k|                        }
  171|  8.33k|                        break;
  172|  16.5k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 16.5k, False: 670k]
  ------------------
  173|  18.6k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 2.16k, False: 684k]
  ------------------
  174|  19.8k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 1.19k, False: 685k]
  ------------------
  175|  19.8k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 17.3k, False: 2.56k]
  ------------------
  176|  17.3k|                        {
  177|  17.3k|                            tokens.emplace_back(ParseToken(
  178|  17.3k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  17.3k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  17.3k|                            current_token = std::string_view{};
  182|  17.3k|                        }
  183|       |
  184|  19.8k|                        Token::Type type;
  185|  19.8k|                        switch (c)
  186|  19.8k|                        {
  187|  16.5k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 16.5k, False: 3.35k]
  ------------------
  188|  16.5k|                                type = Token::Type::Comma;
  189|  16.5k|                                break;
  190|  2.16k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 2.16k, False: 17.7k]
  ------------------
  191|  2.16k|                                type = Token::Type::OpenBracket;
  192|  2.16k|                                break;
  193|  1.19k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 1.19k, False: 18.6k]
  ------------------
  194|  1.19k|                                type = Token::Type::ClosingBracket;
  195|  1.19k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 19.8k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  19.8k|#endif
  201|  19.8k|                        }
  202|       |
  203|  19.8k|                        token_begin = i;
  204|       |
  205|  19.8k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  19.8k|                                            current_line_number, current_column);
  207|  19.8k|                        break;
  208|       |
  209|   564k|                    default:
  ------------------
  |  Branch (209:21): [True: 564k, False: 122k]
  ------------------
  210|   564k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 168k, False: 396k]
  ------------------
  211|   168k|                        {
  212|   168k|                            token_begin = i;
  213|   168k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   564k|                        current_token =
  217|   564k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   686k|                }
  219|   686k|            }
  220|       |
  221|   936k|            current_column += 1u;
  222|   936k|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.31k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.02k, False: 2.29k]
  ------------------
  226|  2.02k|        {
  227|  2.02k|            tokens.emplace_back(
  228|  2.02k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.02k|                               current_line_number, current_column - current_token.length()));
  230|  2.02k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.31k|        tokens.finalize();
  234|       |
  235|  4.31k|        return tokens;
  236|  4.31k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   221k|    {
   11|   221k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 3.77k, False: 217k]
  |  Branch (11:35): [True: 3.63k, False: 145]
  ------------------
   12|  3.63k|        {
   13|  3.63k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  3.63k|            if (number)
  ------------------
  |  Branch (15:17): [True: 2.63k, False: 994]
  ------------------
   16|  2.63k|            {
   17|  2.63k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  2.63k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  2.63k|            }
   20|       |
   21|    994|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  3.63k|        }
   23|       |
   24|   217k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 442, False: 217k]
  |  Branch (24:35): [True: 52.8k, False: 164k]
  ------------------
   25|  53.2k|        {
   26|  53.2k|            return {Token::Type::Comment, token, line_number, column};
   27|  53.2k|        }
   28|       |
   29|   164k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 5.40k, False: 159k]
  ------------------
   30|  5.40k|        {
   31|  5.40k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  5.40k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  5.40k|        }
   34|       |
   35|   159k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 2.81k, False: 156k]
  ------------------
   36|  2.81k|        {
   37|  2.81k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  2.81k|        }
   39|       |
   40|   156k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 17.8k, False: 138k]
  ------------------
   41|  17.8k|        {
   42|  17.8k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  17.8k|                    static_cast<std::uint32_t>(id)};
   44|  17.8k|        }
   45|       |
   46|   138k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 5.67k, False: 132k]
  ------------------
   47|  5.67k|        {
   48|  5.67k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  5.67k|                    static_cast<std::uint32_t>(id)};
   50|  5.67k|        }
   51|       |
   52|   132k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 89.6k, False: 43.1k]
  ------------------
   53|  89.6k|        {
   54|  89.6k|            return {Token::Type::OpCode, token, line_number, column,
   55|  89.6k|                    static_cast<std::uint32_t>(opcode)};
   56|  89.6k|        }
   57|       |
   58|  43.1k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   132k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  4.31k|    {
   53|       |        // Constants
   54|  4.31k|        constexpr std::uint8_t number_of_opcodes =
   55|  4.31k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  4.31k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  4.31k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  4.31k|        std::string ret;
   60|       |
   61|   229k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 224k, False: 4.30k]
  ------------------
   62|   224k|        {
   63|   224k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   224k|            switch (current_value)
   66|   224k|            {
   67|       |                // OpCode
   68|  78.2k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 78.2k, False: 146k]
  ------------------
   69|       |                    // Has one more value
   70|  78.2k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 78.1k, False: 44]
  ------------------
   71|  78.1k|                    {
   72|  78.1k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|  78.1k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|  78.1k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1, False: 78.1k]
  ------------------
   77|      1|                        {
   78|      1|                            return detail::ErrorString;
   79|      1|                        }
   80|  78.1k|                    }
   81|  78.2k|                    break;
   82|  78.2k|                }
   83|       |
   84|       |                // Int Register
   85|  78.2k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 18.6k, False: 206k]
  ------------------
   86|       |                    // Has one more value
   87|  18.6k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 18.6k, False: 12]
  ------------------
   88|  18.6k|                    {
   89|  18.6k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  18.6k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  18.6k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 18.6k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  18.6k|                    }
   97|  18.6k|                    break;
   98|  18.6k|                }
   99|       |
  100|       |                // Float register
  101|  18.6k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 6.22k, False: 218k]
  ------------------
  102|       |                    // Has one more value
  103|  6.22k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 6.21k, False: 11]
  ------------------
  104|  6.21k|                    {
  105|  6.21k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  6.21k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  6.21k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 6.21k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  6.21k|                    }
  113|  6.22k|                    break;
  114|  6.22k|                }
  115|       |
  116|       |                // Floating point status register
  117|  6.22k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 3.09k, False: 221k]
  ------------------
  118|  3.09k|                    ret += "FPSR";
  119|  3.09k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 3.09k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  3.09k|                    break;
  125|  3.09k|                }
  126|       |
  127|       |                // Immediate integer
  128|  4.63k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 4.63k, False: 220k]
  ------------------
  129|  4.63k|                    ret += "#";
  130|  4.63k|                    [[fallthrough]];
  131|  4.63k|                }
  132|       |
  133|       |                // Integer literal
  134|  14.4k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 9.82k, False: 214k]
  ------------------
  135|  14.4k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  14.4k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 14.4k, False: 47]
  ------------------
  138|  14.4k|                    {
  139|  14.4k|                        std::int16_t value = 0;
  140|       |
  141|  43.0k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 28.6k, False: 14.4k]
  ------------------
  142|  28.6k|                        {
  143|  28.6k|                            value <<= 8;
  144|  28.6k|                            value &= data[index++];
  145|  28.6k|                        }
  146|       |
  147|  14.4k|                        ret += std::to_string(value);
  148|  14.4k|                    }
  149|  14.4k|                    break;
  150|  4.63k|                }
  151|       |
  152|       |                // Label
  153|  6.06k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 6.06k, False: 218k]
  ------------------
  154|  6.06k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  6.06k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 6.06k, False: 5]
  ------------------
  157|  6.06k|                    {
  158|  6.06k|                        std::string label_name = "lbl_";
  159|       |
  160|  36.0k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 30.0k, False: 6.06k]
  ------------------
  161|  30.0k|                        {
  162|  30.0k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  30.0k|                            label_name += c;
  165|  30.0k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  6.06k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 5.66k, False: 395]
  |  Branch (168:45): [True: 4.38k, False: 1.27k]
  ------------------
  169|  4.38k|                        {
  170|  4.38k|                            label_name += ':';
  171|  4.38k|                            ret += label_name;
  172|  4.38k|                        }
  173|  1.67k|                        else
  174|  1.67k|                        {
  175|  1.67k|                            ret += label_name;
  176|  1.67k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 1.67k]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|  1.67k|                        }
  181|  6.06k|                    }
  182|  6.06k|                    break;
  183|  6.06k|                }
  184|       |
  185|       |                // Newline
  186|  45.0k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 45.0k, False: 179k]
  ------------------
  187|  45.0k|                    ret += '\n';
  188|  45.0k|                    break;
  189|  6.06k|                }
  190|       |
  191|       |                // Comment
  192|  52.9k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 52.9k, False: 171k]
  ------------------
  193|  52.9k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  52.9k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 52.9k, False: 26]
  ------------------
  196|  52.9k|                    {
  197|  52.9k|                        std::string comment = "; ";
  198|       |
  199|   316k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 263k, False: 52.9k]
  ------------------
  200|   263k|                        {
  201|   263k|                            comment += static_cast<char>(data[index++]);
  202|   263k|                        }
  203|       |
  204|  52.9k|                        ret += comment + '\n';
  205|  52.9k|                    }
  206|  52.9k|                    break;
  207|  6.06k|                }
  208|       |
  209|       |                // Ignore
  210|      5|                default:
  ------------------
  |  Branch (210:17): [True: 5, False: 224k]
  ------------------
  211|      5|                    return detail::ErrorString;
  212|   224k|            }
  213|   224k|        }
  214|       |
  215|  4.30k|        return ret;
  216|  4.31k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   107k|        {
   20|   107k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 105k, False: 1.82k]
  ------------------
   21|   105k|            {
   22|   105k|                std::uint8_t val = data[index++];
   23|   105k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 89.8k, False: 16.1k]
  ------------------
   24|  89.8k|                {
   25|  89.8k|                    text += ' ';
   26|  89.8k|                }
   27|  16.1k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 16.0k, False: 6]
  ------------------
   28|  16.0k|                {
   29|  16.0k|                    text += ',';
   30|  16.0k|                }
   31|      6|                else
   32|      6|                {
   33|      6|                    return false;
   34|      6|                }
   35|   105k|            }
   36|       |
   37|   107k|            return true;
   38|   107k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  30.0k|        {
   42|  30.0k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 22.9k, False: 7.11k]
  ------------------
   43|  22.9k|            {
   44|  22.9k|                return '_';
   45|  22.9k|            }
   46|       |
   47|  7.11k|            return c;
   48|  30.0k|        }

LLVMFuzzerTestOneInput:
   12|  4.31k|{
   13|  4.31k|    static dlx::Processor processor;
   14|       |
   15|  4.31k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  4.31k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  4.31k|    processor.ClearRegisters();
   22|  4.31k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  4.31k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 977, False: 3.34k]
  ------------------
   26|    977|    {
   27|    977|        processor.ExecuteCurrentProgram();
   28|    977|    }
   29|       |
   30|  4.31k|    return 0;
   31|  4.31k|}


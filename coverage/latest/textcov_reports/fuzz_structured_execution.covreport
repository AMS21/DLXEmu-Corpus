_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   172k|        {
  169|   172k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   172k|            switch (index.unsafe())
  172|   172k|            {
  173|  70.2k|                case 0:
  ------------------
  |  Branch (173:17): [True: 70.2k, False: 102k]
  ------------------
  174|  70.2k|                    return m_Arg1Type;
  175|       |
  176|  52.4k|                case 1:
  ------------------
  |  Branch (176:17): [True: 52.4k, False: 120k]
  ------------------
  177|  52.4k|                    return m_Arg2Type;
  178|       |
  179|  50.0k|                case 2:
  ------------------
  |  Branch (179:17): [True: 50.0k, False: 122k]
  ------------------
  180|  50.0k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 172k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   172k|#endif
  187|   172k|            }
  188|   172k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  45.2k|        {
  195|  45.2k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  45.2k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 41.5k, False: 3.66k]
  ------------------
  199|  41.5k|            {
  200|  41.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  41.5k|            }
  202|  45.2k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 33.3k, False: 11.8k]
  ------------------
  203|  33.3k|            {
  204|  33.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  33.3k|            }
  206|  45.2k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 22.9k, False: 22.3k]
  ------------------
  207|  22.9k|            {
  208|  22.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  22.9k|            }
  210|       |
  211|  45.2k|            return number_of_argument_required;
  212|  45.2k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  4.87M|        {
  216|  4.87M|            return m_RegisterAccessType;
  217|  4.87M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  45.2k|        {
  221|  45.2k|            return m_Executor;
  222|  45.2k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  14.6M|    {
   38|  14.6M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  14.6M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  14.6M|                                         static_cast<underlying_t>(rhs));
   42|  14.6M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  14.6M|    {
   55|  14.6M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  14.6M|        return static_cast<underlying_t>(type & test) != 0;
   58|  14.6M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|   143k|    {
  205|   143k|        switch (value)
  206|   143k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  44.2k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  44.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 44.2k, False: 98.9k]
  |  |  |  |  ------------------
  |  |  |  |  209|  44.2k|        return #name;
  |  |  ------------------
  |  |   16|  44.2k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.99k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.99k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.99k|        return #name;
  |  |  ------------------
  |  |   17|  3.99k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    622|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 622, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    622|        return #name;
  |  |  ------------------
  |  |   18|  2.55k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.55k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.55k|        return #name;
  |  |  ------------------
  |  |   19|  2.55k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    978|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 978, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    978|        return #name;
  |  |  ------------------
  |  |   20|  1.88k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.88k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.88k|        return #name;
  |  |  ------------------
  |  |   21|  1.88k|                                                                                                   \
  |  |   22|  1.88k|    /* Sub */                                                                                      \
  |  |   23|  2.31k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.31k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.31k|        return #name;
  |  |  ------------------
  |  |   24|  2.31k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    468|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 468, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    468|        return #name;
  |  |  ------------------
  |  |   25|  2.59k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.59k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.59k|        return #name;
  |  |  ------------------
  |  |   26|  2.59k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    113|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 113, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    113|        return #name;
  |  |  ------------------
  |  |   27|  1.58k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.58k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.58k|        return #name;
  |  |  ------------------
  |  |   28|  1.58k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    505|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 505, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    505|        return #name;
  |  |  ------------------
  |  |   29|    505|                                                                                                   \
  |  |   30|    505|    /* Multiplication */                                                                           \
  |  |   31|    792|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    792|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 792, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    792|        return #name;
  |  |  ------------------
  |  |   32|    792|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    325|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 325, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    325|        return #name;
  |  |  ------------------
  |  |   33|  1.98k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.98k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.98k|        return #name;
  |  |  ------------------
  |  |   34|  1.98k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    177|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 177, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    177|        return #name;
  |  |  ------------------
  |  |   35|  2.25k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  2.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.25k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.25k|        return #name;
  |  |  ------------------
  |  |   36|  2.25k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 129, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    129|        return #name;
  |  |  ------------------
  |  |   37|    129|                                                                                                   \
  |  |   38|    129|    /* Division */                                                                                 \
  |  |   39|    129|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 93, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     93|        return #name;
  |  |  ------------------
  |  |   40|    114|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 114, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    114|        return #name;
  |  |  ------------------
  |  |   41|    114|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 102, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    102|        return #name;
  |  |  ------------------
  |  |   42|  1.73k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.73k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.73k|        return #name;
  |  |  ------------------
  |  |   43|  1.73k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    187|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 187, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    187|        return #name;
  |  |  ------------------
  |  |   44|    187|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |   45|    103|                                                                                                   \
  |  |   46|    103|    /* Shift left (logical) */                                                                     \
  |  |   47|    152|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    152|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 152, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    152|        return #name;
  |  |  ------------------
  |  |   48|    216|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    216|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 216, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    216|        return #name;
  |  |  ------------------
  |  |   49|    216|                                                                                                   \
  |  |   50|    216|    /* Shift right (logical) */                                                                    \
  |  |   51|  2.64k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.64k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.64k|        return #name;
  |  |  ------------------
  |  |   52|  3.68k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.68k, False: 139k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.68k|        return #name;
  |  |  ------------------
  |  |   53|  3.68k|                                                                                                   \
  |  |   54|  3.68k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  3.68k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    949|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 949, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    949|        return #name;
  |  |  ------------------
  |  |   56|    949|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 93, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     93|        return #name;
  |  |  ------------------
  |  |   57|     93|                                                                                                   \
  |  |   58|     93|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    138|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    138|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 138, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    138|        return #name;
  |  |  ------------------
  |  |   60|    251|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    251|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 251, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    251|        return #name;
  |  |  ------------------
  |  |   61|    251|                                                                                                   \
  |  |   62|    251|    /* Logic */                                                                                    \
  |  |   63|    251|                                                                                                   \
  |  |   64|    251|    /* And */                                                                                      \
  |  |   65|    251|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |   66|  1.73k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.73k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.73k|        return #name;
  |  |  ------------------
  |  |   67|  1.73k|                                                                                                   \
  |  |   68|  1.73k|    /* Or */                                                                                       \
  |  |   69|  1.73k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |   70|    114|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 114, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    114|        return #name;
  |  |  ------------------
  |  |   71|    114|                                                                                                   \
  |  |   72|    114|    /* XOR */                                                                                      \
  |  |   73|    698|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    698|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 698, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    698|        return #name;
  |  |  ------------------
  |  |   74|  1.03k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.03k, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.03k|        return #name;
  |  |  ------------------
  |  |   75|  1.03k|                                                                                                   \
  |  |   76|  1.03k|    /* Set conditionals */                                                                         \
  |  |   77|  1.03k|                                                                                                   \
  |  |   78|  1.03k|    /* Less than */                                                                                \
  |  |   79|  1.03k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    220|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 220, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    220|        return #name;
  |  |  ------------------
  |  |   80|    908|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    908|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 908, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    908|        return #name;
  |  |  ------------------
  |  |   81|    908|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    270|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 270, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    270|        return #name;
  |  |  ------------------
  |  |   82|    270|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    117|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 117, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    117|        return #name;
  |  |  ------------------
  |  |   83|    132|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    132|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 132, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    132|        return #name;
  |  |  ------------------
  |  |   84|    159|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    159|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 159, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    159|        return #name;
  |  |  ------------------
  |  |   85|    159|                                                                                                   \
  |  |   86|    159|    /* Greater than */                                                                             \
  |  |   87|    929|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    929|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 929, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    929|        return #name;
  |  |  ------------------
  |  |   88|    929|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   89|  1.46k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.46k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.46k|        return #name;
  |  |  ------------------
  |  |   90|  1.46k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   91|  1.48k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.48k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.48k|        return #name;
  |  |  ------------------
  |  |   92|  1.54k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.54k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.54k|        return #name;
  |  |  ------------------
  |  |   93|  1.54k|                                                                                                   \
  |  |   94|  1.54k|    /* Less than or equal */                                                                       \
  |  |   95|  1.54k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    540|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 540, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    540|        return #name;
  |  |  ------------------
  |  |   96|    540|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    227|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 227, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    227|        return #name;
  |  |  ------------------
  |  |   97|    330|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    330|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 330, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    330|        return #name;
  |  |  ------------------
  |  |   98|    494|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    494|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 494, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    494|        return #name;
  |  |  ------------------
  |  |   99|    494|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    138|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 138, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    138|        return #name;
  |  |  ------------------
  |  |  100|  2.20k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.20k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.20k|        return #name;
  |  |  ------------------
  |  |  101|  2.20k|                                                                                                   \
  |  |  102|  2.20k|    /* Greater than or equal */                                                                    \
  |  |  103|  4.33k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.33k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.33k|        return #name;
  |  |  ------------------
  |  |  104|  4.33k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.66k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.66k|        return #name;
  |  |  ------------------
  |  |  105|  2.66k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 156, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    156|        return #name;
  |  |  ------------------
  |  |  106|  1.42k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.42k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.42k|        return #name;
  |  |  ------------------
  |  |  107|  1.42k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  108|    111|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |  109|    111|                                                                                                   \
  |  |  110|    111|    /* Equal */                                                                                    \
  |  |  111|    111|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 96, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     96|        return #name;
  |  |  ------------------
  |  |  112|    678|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    678|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 678, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    678|        return #name;
  |  |  ------------------
  |  |  113|  3.09k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.09k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.09k|        return #name;
  |  |  ------------------
  |  |  114|  3.09k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.33k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.33k|        return #name;
  |  |  ------------------
  |  |  115|  1.33k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    612|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 612, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    612|        return #name;
  |  |  ------------------
  |  |  116|    612|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  117|     79|                                                                                                   \
  |  |  118|     79|    /* Not equal */                                                                                \
  |  |  119|  4.50k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.50k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.50k|        return #name;
  |  |  ------------------
  |  |  120|  4.50k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |  121|     97|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |  122|    236|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 236, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    236|        return #name;
  |  |  ------------------
  |  |  123|    236|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  124|     94|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |  125|     94|                                                                                                   \
  |  |  126|     94|    /* Conditional branching */                                                                    \
  |  |  127|    170|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    170|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 170, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    170|        return #name;
  |  |  ------------------
  |  |  128|    170|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  129|    101|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 92, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     92|        return #name;
  |  |  ------------------
  |  |  130|  5.16k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  5.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 5.16k, False: 138k]
  |  |  |  |  ------------------
  |  |  |  |  209|  5.16k|        return #name;
  |  |  ------------------
  |  |  131|  5.16k|                                                                                                   \
  |  |  132|  5.16k|    /* Unconditional branching */                                                                  \
  |  |  133|  5.16k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.45k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.45k|        return #name;
  |  |  ------------------
  |  |  134|  1.45k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  135|  2.67k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.67k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.67k|        return #name;
  |  |  ------------------
  |  |  136|  2.67k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.07k, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.07k|        return #name;
  |  |  ------------------
  |  |  137|  1.07k|                                                                                                   \
  |  |  138|  1.07k|    /* Loading data */                                                                             \
  |  |  139|  1.52k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.52k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.52k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.52k|        return #name;
  |  |  ------------------
  |  |  140|  1.52k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  141|     70|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  142|     70|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  143|  2.12k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.12k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.12k|        return #name;
  |  |  ------------------
  |  |  144|  2.21k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  2.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.21k, False: 140k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.21k|        return #name;
  |  |  ------------------
  |  |  145|  2.21k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  146|     70|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 70, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     70|        return #name;
  |  |  ------------------
  |  |  147|    510|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    510|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 510, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    510|        return #name;
  |  |  ------------------
  |  |  148|    510|                                                                                                   \
  |  |  149|    510|    /* Storing data */                                                                             \
  |  |  150|  1.76k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.76k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.76k|        return #name;
  |  |  ------------------
  |  |  151|  1.76k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  152|     71|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  153|    844|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    844|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 844, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    844|        return #name;
  |  |  ------------------
  |  |  154|    844|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 73, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     73|        return #name;
  |  |  ------------------
  |  |  155|  1.13k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.13k, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.13k|        return #name;
  |  |  ------------------
  |  |  156|  2.12k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  2.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.12k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.12k|        return #name;
  |  |  ------------------
  |  |  157|  2.12k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    112|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 112, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    112|        return #name;
  |  |  ------------------
  |  |  158|    112|                                                                                                   \
  |  |  159|    112|    /* Moving data */                                                                              \
  |  |  160|    348|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    348|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 348, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    348|        return #name;
  |  |  ------------------
  |  |  161|    348|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |  162|  1.55k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|  1.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.55k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.55k|        return #name;
  |  |  ------------------
  |  |  163|  1.55k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.46k, False: 141k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.46k|        return #name;
  |  |  ------------------
  |  |  164|  1.46k|                                                                                                   \
  |  |  165|  1.46k|    /* Converting data */                                                                          \
  |  |  166|  1.46k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 88, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     88|        return #name;
  |  |  ------------------
  |  |  167|     98|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 98, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     98|        return #name;
  |  |  ------------------
  |  |  168|     98|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |  169|    267|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    267|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 267, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    267|        return #name;
  |  |  ------------------
  |  |  170|    267|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  171|    101|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    100|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 100, False: 143k]
  |  |  |  |  ------------------
  |  |  |  |  209|    100|        return #name;
  |  |  ------------------
  |  |  172|    100|                                                                                                   \
  |  |  173|    100|    /* Other */                                                                                    \
  |  |  174|    933|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    933|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 933, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    933|        return #name;
  |  |  ------------------
  |  |  175|    933|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    469|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 469, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|    469|        return #name;
  |  |  ------------------
  |  |  176|  1.03k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.03k, False: 142k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.03k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 143k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   143k|        }
  218|   143k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  15.2k|    {
   32|  15.2k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 260, False: 14.9k]
  ------------------
   33|    260|        {
   34|    260|            return true;
   35|    260|        }
   36|       |
   37|  14.9k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 71, False: 14.9k]
  ------------------
   38|     71|        {
   39|     71|            return true;
   40|     71|        }
   41|       |
   42|  14.9k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 2.90k, False: 12.0k]
  ------------------
   43|  2.90k|        {
   44|  2.90k|            return true;
   45|  2.90k|        }
   46|       |
   47|  12.0k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 12.0k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  12.0k|        return false;
   53|  12.0k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  12.0k|    {
   57|  12.0k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 12.0k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  12.0k|        const char first_char = token.at(0);
   63|       |
   64|  12.0k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 969, False: 11.0k]
  ------------------
   65|    969|        {
   66|    969|            return phi::is_alpha(first_char);
   67|    969|        }
   68|       |
   69|  11.0k|        phi::boolean just_under_scores = (first_char == '_');
   70|  11.0k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 1.23k, False: 9.80k]
  |  Branch (70:15): [True: 9.63k, False: 1.40k]
  |  Branch (70:44): [True: 165, False: 1.23k]
  ------------------
   71|  1.23k|        {
   72|  1.23k|            return false;
   73|  1.23k|        }
   74|       |
   75|  63.9k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 57.8k, False: 6.09k]
  ------------------
   76|  57.8k|        {
   77|  57.8k|            const char c{token.at(index)};
   78|       |
   79|  57.8k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 23.0k, False: 34.7k]
  ------------------
   80|  23.0k|            {
   81|  23.0k|                just_under_scores = false;
   82|  23.0k|            }
   83|  34.7k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 31.0k, False: 3.70k]
  ------------------
   84|  31.0k|            {
   85|  31.0k|                continue;
   86|  31.0k|            }
   87|  3.70k|            else
   88|  3.70k|            {
   89|  3.70k|                return false;
   90|  3.70k|            }
   91|  57.8k|        }
   92|       |
   93|  6.09k|        return !just_under_scores;
   94|  9.80k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   277k|    {
  101|   277k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 277k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   277k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 15.5k, False: 262k]
  ------------------
  107|  15.5k|        {
  108|  15.5k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 7.52k, False: 8.07k]
  ------------------
  109|  7.52k|            {
  110|  7.52k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  7.52k|            }
  112|       |
  113|  8.07k|            return {};
  114|  15.5k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   262k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 189, False: 261k]
  ------------------
  118|    189|        {
  119|    189|            return {};
  120|    189|        }
  121|       |
  122|   261k|        std::int32_t number{0};
  123|   261k|        phi::boolean is_negative{false};
  124|   261k|        phi::boolean starts_with_zero{false};
  125|   261k|        phi::boolean parsing_binary{false};
  126|   261k|        phi::boolean parsing_octal{false};
  127|   261k|        phi::boolean parsing_hexadecimal{false};
  128|   261k|        phi::boolean parsed_something{false};
  129|   261k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   287k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 285k, False: 2.14k]
  ------------------
  134|   285k|        {
  135|   285k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   285k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 261k, False: 23.4k]
  ------------------
  139|   261k|            {
  140|   261k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 66, False: 261k]
  ------------------
  141|     66|                {
  142|     66|                    continue;
  143|     66|                }
  144|       |
  145|   261k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 252, False: 261k]
  ------------------
  146|    252|                {
  147|    252|                    is_negative = true;
  148|    252|                    continue;
  149|    252|                }
  150|       |
  151|   261k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 10.9k, False: 250k]
  ------------------
  152|  10.9k|                {
  153|  10.9k|                    starts_with_zero = true;
  154|  10.9k|                    continue;
  155|  10.9k|                }
  156|       |
  157|   250k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 66, False: 250k]
  ------------------
  158|     66|                {
  159|     66|                    return {};
  160|     66|                }
  161|   250k|            }
  162|       |
  163|       |            // Second character
  164|   274k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 11.5k, False: 262k]
  ------------------
  165|  11.5k|            {
  166|  11.5k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 10.9k, False: 584]
  ------------------
  167|  10.9k|                {
  168|       |                    // Binary
  169|  10.9k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.01k, False: 9.96k]
  |  Branch (169:37): [True: 1.65k, False: 8.31k]
  ------------------
  170|  2.67k|                    {
  171|  2.67k|                        parsing_binary = true;
  172|  2.67k|                        continue;
  173|  2.67k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  8.31k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 2.39k, False: 5.91k]
  |  Branch (176:37): [True: 361, False: 5.55k]
  ------------------
  177|  2.75k|                    {
  178|  2.75k|                        parsing_hexadecimal = true;
  179|  2.75k|                        continue;
  180|  2.75k|                    }
  181|       |
  182|       |                    // Octal
  183|  5.55k|                    parsing_octal = true;
  184|  5.55k|                }
  185|  11.5k|            }
  186|       |
  187|       |            // Handle seperators
  188|   268k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 139, False: 268k]
  ------------------
  189|    139|            {
  190|    139|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 73]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     73|                parsed_separator = true;
  196|     73|                continue;
  197|    139|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   268k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 262, False: 268k]
  |  Branch (200:32): [True: 0, False: 262]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   268k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 268k, False: 262]
  |  Branch (205:17): [True: 0, False: 268k]
  |  Branch (205:33): [True: 0, False: 268k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   268k|            parsed_separator = false;
  212|   268k|            parsed_something = true;
  213|       |
  214|   268k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 3.32k, False: 265k]
  ------------------
  215|  3.32k|            {
  216|  3.32k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.74k, False: 1.58k]
  ------------------
  217|  1.74k|                {
  218|  1.74k|                    return {};
  219|  1.74k|                }
  220|       |
  221|  1.58k|                number <<= 1;
  222|  1.58k|                number |= (c - '0');
  223|  1.58k|            }
  224|   265k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 9.08k, False: 256k]
  ------------------
  225|  9.08k|            {
  226|  9.08k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 4.97k, False: 4.11k]
  ------------------
  227|  4.97k|                {
  228|  4.97k|                    return {};
  229|  4.97k|                }
  230|       |
  231|  4.11k|                number <<= 3;
  232|  4.11k|                number |= (c - '0');
  233|  4.11k|            }
  234|   256k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 4.74k, False: 251k]
  ------------------
  235|  4.74k|            {
  236|  4.74k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 2.30k, False: 2.44k]
  ------------------
  237|  2.30k|                {
  238|  2.30k|                    return {};
  239|  2.30k|                }
  240|       |
  241|  2.44k|                number <<= 4;
  242|  2.44k|                number |= phi::hex_digit_value(c).unsafe();
  243|  2.44k|            }
  244|   251k|            else
  245|   251k|            {
  246|   251k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 250k, False: 734]
  ------------------
  247|   250k|                {
  248|   250k|                    return {};
  249|   250k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|    734|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 405, False: 329]
  |  Branch (252:36): [True: 66, False: 339]
  ------------------
  253|     66|                {
  254|     66|                    return {};
  255|     66|                }
  256|       |
  257|    668|                number *= 10;
  258|    668|                number += (c - '0');
  259|    668|            }
  260|   268k|        }
  261|       |
  262|  2.14k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.82k, False: 317]
  ------------------
  263|  1.82k|        {
  264|       |            // Check for over/underflow
  265|  1.82k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 67, False: 1.75k]
  |  Branch (265:32): [True: 0, False: 67]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  1.82k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 1.75k, False: 67]
  |  Branch (270:17): [True: 0, False: 1.82k]
  |  Branch (270:33): [True: 0, False: 1.75k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  1.82k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 67, False: 1.75k]
  ------------------
  277|     67|            {
  278|     67|                return static_cast<std::int16_t>(-number);
  279|     67|            }
  280|       |
  281|  1.75k|            return static_cast<std::int16_t>(number);
  282|  1.82k|        }
  283|       |
  284|    317|        return {};
  285|  2.14k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  30.1k|    {
   96|  30.1k|        switch (value)
   97|  30.1k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  3.93k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.93k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.93k, False: 26.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.93k|        return #name;
  |  |  ------------------
  |  |   14|  12.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  12.1k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12.1k, False: 17.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  12.1k|        return #name;
  |  |  ------------------
  |  |   15|  12.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    123|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 123, False: 29.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    123|        return #name;
  |  |  ------------------
  |  |   16|  2.56k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.56k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.56k, False: 27.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.56k|        return #name;
  |  |  ------------------
  |  |   17|  2.56k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    400|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 400, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    400|        return #name;
  |  |  ------------------
  |  |   18|  1.27k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.27k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.27k, False: 28.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.27k|        return #name;
  |  |  ------------------
  |  |   19|  1.27k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|     74|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 74, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     74|        return #name;
  |  |  ------------------
  |  |   20|     74|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     28|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 28, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     28|        return #name;
  |  |  ------------------
  |  |   21|    190|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    190|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 190, False: 29.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    190|        return #name;
  |  |  ------------------
  |  |   22|    190|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    134|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 134, False: 29.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    134|        return #name;
  |  |  ------------------
  |  |   23|    134|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     30|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 30, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     30|        return #name;
  |  |  ------------------
  |  |   24|    102|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    102|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 102, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    102|        return #name;
  |  |  ------------------
  |  |   25|    102|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|      5|        return #name;
  |  |  ------------------
  |  |   26|    218|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    218|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 218, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    218|        return #name;
  |  |  ------------------
  |  |   27|    218|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   28|    315|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    315|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 315, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    315|        return #name;
  |  |  ------------------
  |  |   29|  3.19k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.19k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.19k, False: 26.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.19k|        return #name;
  |  |  ------------------
  |  |   30|  3.19k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|     21|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 21, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     21|        return #name;
  |  |  ------------------
  |  |   31|     50|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     50|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 50, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     50|        return #name;
  |  |  ------------------
  |  |   32|     50|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|      9|        return #name;
  |  |  ------------------
  |  |   33|    281|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    281|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 281, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    281|        return #name;
  |  |  ------------------
  |  |   34|    281|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    267|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 267, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    267|        return #name;
  |  |  ------------------
  |  |   35|    267|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   36|  1.39k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.39k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.39k, False: 28.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.39k|        return #name;
  |  |  ------------------
  |  |   37|  1.39k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     53|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 53, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     53|        return #name;
  |  |  ------------------
  |  |   38|     53|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     18|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 18, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|     18|        return #name;
  |  |  ------------------
  |  |   39|    379|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|    379|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 379, False: 29.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    379|        return #name;
  |  |  ------------------
  |  |   40|    984|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|    984|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 984, False: 29.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    984|        return #name;
  |  |  ------------------
  |  |   41|    984|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|      6|        return #name;
  |  |  ------------------
  |  |   42|      8|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|      8|        return #name;
  |  |  ------------------
  |  |   43|  1.58k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.58k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.58k, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.58k|        return #name;
  |  |  ------------------
  |  |   44|  1.58k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    269|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 269, False: 29.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    269|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 30.1k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  30.1k|        }
  109|  30.1k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  14.5k|    {
  131|  14.5k|        switch (value)
  132|  14.5k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  2.00k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.00k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.00k, False: 12.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.00k|        return #name;
  |  |  ------------------
  |  |   48|  2.15k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.15k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.15k, False: 12.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.15k|        return #name;
  |  |  ------------------
  |  |   49|  2.15k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   50|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   51|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     24|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 24, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     24|        return #name;
  |  |  ------------------
  |  |   52|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   53|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   54|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   55|    151|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    151|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 151, False: 14.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    151|        return #name;
  |  |  ------------------
  |  |   56|  1.99k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.99k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.99k, False: 12.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.99k|        return #name;
  |  |  ------------------
  |  |   57|  1.99k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   58|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   60|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     19|        return #name;
  |  |  ------------------
  |  |   61|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   62|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   63|  1.33k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.33k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.33k, False: 13.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.33k|        return #name;
  |  |  ------------------
  |  |   64|  1.33k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    125|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 125, False: 14.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    125|        return #name;
  |  |  ------------------
  |  |   65|    125|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|     64|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 64, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     64|        return #name;
  |  |  ------------------
  |  |   66|     64|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   67|  4.39k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  4.39k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.39k, False: 10.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.39k|        return #name;
  |  |  ------------------
  |  |   68|  4.39k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 39, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     39|        return #name;
  |  |  ------------------
  |  |   69|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   70|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   71|    329|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    329|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 329, False: 14.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    329|        return #name;
  |  |  ------------------
  |  |   72|    329|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|  1.50k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.50k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.50k, False: 13.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.50k|        return #name;
  |  |  ------------------
  |  |   74|  1.50k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     49|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 49, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     49|        return #name;
  |  |  ------------------
  |  |   75|     49|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 14.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   76|     35|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     35|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 35, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     35|        return #name;
  |  |  ------------------
  |  |   77|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    118|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 118, False: 14.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    118|        return #name;
  |  |  ------------------
  |  |   78|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|     70|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 70, False: 14.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     70|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 14.5k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  14.5k|        }
  144|  14.5k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   519k|        {
   12|   519k|            m_Value = value;
   13|   519k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   867k|        {
   17|   867k|            return m_Value;
   18|   867k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  3.43k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  3.43k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 44.5k, False: 0]
  ------------------
   64|  44.5k|            {
   65|  44.5k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 3.43k, False: 41.1k]
  ------------------
   66|  3.43k|                {
   67|  3.43k|                    return &token;
   68|  3.43k|                }
   69|  44.5k|            }
   70|       |
   71|      0|            return nullptr;
   72|  3.43k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   222k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   222k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   222k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   354k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   354k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   354k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  32.5k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  32.5k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  32.5k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   515k|    {
   11|   515k|        m_Value = val;
   12|   515k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.21M|    {
   16|  2.21M|        return m_Value;
   17|  2.21M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  45.2k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  19.7k|    {
   25|  19.7k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  19.7k|        switch (argument_number.unsafe())
   28|  19.7k|        {
   29|  8.78k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 8.78k, False: 10.9k]
  ------------------
   30|  8.78k|                m_Arg1 = argument;
   31|  8.78k|                break;
   32|  6.68k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 6.68k, False: 13.0k]
  ------------------
   33|  6.68k|                m_Arg2 = argument;
   34|  6.68k|                break;
   35|  4.25k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 4.25k, False: 15.4k]
  ------------------
   36|  4.25k|                m_Arg3 = argument;
   37|  4.25k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 19.7k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  19.7k|#endif
   42|  19.7k|        }
   43|  19.7k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  4.87M|    {
   84|  4.87M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  4.87M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  4.87M|    {
   89|  4.87M|        return m_Info;
   90|  4.87M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   155k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  29.2M|    {
   28|  29.2M|        return m_Type;
   29|  29.2M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  6.38M|    {
   78|  6.38M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  6.38M|        return register_int;
   81|  6.38M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.69M|    {
   85|  1.69M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.69M|        return register_float;
   88|  1.69M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.30M|    {
   93|  1.30M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.30M|        return immediate_value;
   96|  1.30M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|  1.08M|    {
  108|  1.08M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|  1.08M|        return label;
  111|  1.08M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  11.2k|    {
  171|  11.2k|        InstructionArgument arg;
  172|  11.2k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  11.2k|        arg.register_int.register_id = id;
  174|  11.2k|        return arg;
  175|  11.2k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  4.27k|    {
  179|  4.27k|        InstructionArgument arg;
  180|  4.27k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  4.27k|        arg.register_float.register_id = id;
  182|  4.27k|        return arg;
  183|  4.27k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.74k|    {
  187|  2.74k|        InstructionArgument arg;
  188|  2.74k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.74k|        arg.immediate_value.signed_value = value;
  190|  2.74k|        return arg;
  191|  2.74k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  1.42k|    {
  205|  1.42k|        InstructionArgument arg;
  206|  1.42k|        arg.m_Type           = ArgumentType::Label;
  207|  1.42k|        arg.label.label_name = label_name;
  208|  1.42k|        return arg;
  209|  1.42k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|   236k|        {
  352|   236k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|   236k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|   236k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|   236k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|   236k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|   236k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|   236k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  45.0k|        {
  365|  45.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  45.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  45.0k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  45.0k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  45.0k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  45.0k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  47.1k|        {
  377|  47.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  47.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  47.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  47.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  47.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  47.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  47.1k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  19.0k|        {
  390|  19.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  19.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  19.0k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  19.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  19.0k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  19.0k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  20.8k|        {
  402|  20.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  20.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  20.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  20.8k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  20.8k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  20.8k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  9.37k|        {
  417|  9.37k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  9.37k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  9.37k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  9.37k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  9.37k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  9.37k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  9.37k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  9.37k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  45.9k|        {
  432|  45.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  45.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  45.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  45.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  45.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  45.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  45.9k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  9.37k|        {
  445|  9.37k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  9.37k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  9.37k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  9.37k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  9.37k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  9.37k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|   100k|        {
  457|   100k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|   100k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|   100k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|   100k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|   100k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|   100k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|   100k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  19.0k|        {
  470|  19.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  19.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  19.0k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  19.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  19.0k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  19.0k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  22.7k|        {
  482|  22.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  22.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  22.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  22.7k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  22.7k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  22.7k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  21.8k|        {
  497|  21.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  21.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  21.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  21.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  21.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  21.8k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  21.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  21.8k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  46.8k|        {
  512|  46.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  46.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  46.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  46.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  46.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  46.8k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  46.8k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  28.3k|        {
  525|  28.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  28.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  28.3k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  28.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  28.3k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  28.3k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  22.0k|        {
  537|  22.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  22.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  22.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  22.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  22.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  22.0k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  22.0k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  39.8k|        {
  550|  39.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  39.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  39.8k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  39.8k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  39.8k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  39.8k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  29.1k|        {
  562|  29.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  29.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  29.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  29.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  29.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  29.1k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  29.1k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  29.1k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  22.3k|        {
  577|  22.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  22.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  22.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  22.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  22.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  22.3k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  22.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  22.3k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|  4.71k|        {
  592|  4.71k|            const auto& dest_reg = arg1.AsRegisterInt();
  593|  4.71k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|  4.71k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|  4.71k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|  4.71k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|  4.71k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|  4.71k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|      1|        {
  605|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  607|      1|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|  9.79k|        {
  617|  9.79k|            const auto& dest_reg = arg1.AsRegisterInt();
  618|  9.79k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|  9.79k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|  9.79k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|  9.79k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|  9.79k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|  9.79k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|      1|        {
  630|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  632|      1|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  75.6k|        {
  684|  75.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  75.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  75.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  75.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  75.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  75.6k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  75.6k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  22.7k|        {
  697|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  22.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  22.7k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  22.7k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  22.7k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  60.6k|        {
  710|  60.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  60.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  60.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  60.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  60.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  60.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  60.6k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  34.8k|        {
  723|  34.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  34.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  34.8k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  34.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  34.8k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  34.8k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  34.8k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  73.4k|        {
  736|  73.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  73.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  73.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  73.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  73.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  73.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  73.4k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  27.9k|        {
  749|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  48.4k|        {
  762|  48.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  48.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  48.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  48.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  48.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  48.4k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  48.4k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  25.5k|        {
  775|  25.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  25.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  25.5k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  25.5k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  25.5k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  25.5k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  25.5k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  22.7k|        {
  788|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  22.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  22.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  22.7k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  22.7k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  72.5k|        {
  802|  72.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  72.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  72.5k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  72.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  72.5k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  72.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  72.5k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  13.5k|        {
  815|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  20.4k|        {
  829|  20.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  20.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  20.4k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  20.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  20.4k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  20.4k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  20.8k|        {
  842|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|   257k|        {
  856|   257k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|   257k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|   257k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|   257k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|   257k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|   257k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|   257k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  11.7k|        {
  869|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  11.7k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 1, False: 11.7k]
  ------------------
  877|       |
  878|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  11.7k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  25.8k|        {
  884|  25.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  25.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  25.8k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  25.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  25.8k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 0, False: 25.8k]
  ------------------
  891|       |
  892|  25.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  25.8k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  11.7k|        {
  898|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  11.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  11.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  11.7k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 1, False: 11.7k]
  ------------------
  906|       |
  907|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  11.7k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  98.1k|        {
  913|  98.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  98.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  98.1k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  98.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  98.1k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 0, False: 98.1k]
  ------------------
  920|       |
  921|  98.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  98.1k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  11.7k|        {
  927|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  11.7k|            processor.SetFPSRValue(new_value);
  936|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  24.7k|        {
  941|  24.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  24.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  24.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  24.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  24.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  24.7k|            processor.SetFPSRValue(new_value);
  950|  24.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  11.7k|        {
  955|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 11.7k]
  ------------------
  963|       |
  964|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  30.8k|        {
  970|  30.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  30.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  30.8k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  30.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  30.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 1.00k, False: 29.8k]
  ------------------
  977|       |
  978|  30.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  30.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  11.0k|        {
  984|  11.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  11.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  11.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  11.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  11.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  11.0k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 11.0k]
  ------------------
  992|       |
  993|  11.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  11.0k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  24.7k|        {
  999|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  24.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  24.7k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 24.7k]
  ------------------
 1006|       |
 1007|  24.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  24.7k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|   105k|        {
 1013|   105k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|   105k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|   105k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|   105k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|   105k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|   105k|            processor.SetFPSRValue(new_value);
 1022|   105k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|   231k|        {
 1027|   231k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|   231k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|   231k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|   231k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|   231k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|   231k|            processor.SetFPSRValue(new_value);
 1036|   231k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  11.7k|        {
 1041|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 11.7k, False: 1]
  ------------------
 1049|       |
 1050|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  22.7k|        {
 1056|  22.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  22.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  22.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  22.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  22.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 22.7k, False: 0]
  ------------------
 1063|       |
 1064|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  22.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  16.6k|        {
 1070|  16.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  16.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  16.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  16.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  16.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  16.6k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 16.6k, False: 0]
  ------------------
 1078|       |
 1079|  16.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  16.6k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|   106k|        {
 1085|   106k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|   106k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|   106k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|   106k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|   106k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 86.0k, False: 20.5k]
  ------------------
 1092|       |
 1093|   106k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|   106k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  17.2k|        {
 1099|  17.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  17.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  17.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  17.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  17.2k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  17.2k|            processor.SetFPSRValue(new_value);
 1108|  17.2k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  15.3k|        {
 1113|  15.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  15.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  15.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  15.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  15.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  15.3k|            processor.SetFPSRValue(new_value);
 1122|  15.3k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  11.1k|        {
 1127|  11.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  11.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  11.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  11.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  11.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  11.1k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 11.1k, False: 0]
  ------------------
 1135|       |
 1136|  11.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  11.1k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|   215k|        {
 1142|   215k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|   215k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|   215k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|   215k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|   215k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 213k, False: 2.08k]
  ------------------
 1149|       |
 1150|   215k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|   215k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  10.4k|        {
 1156|  10.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  10.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  10.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  10.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  10.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  10.4k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 10.4k, False: 0]
  ------------------
 1164|       |
 1165|  10.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  10.4k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  22.2k|        {
 1171|  22.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  22.2k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  22.2k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  22.2k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  22.2k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 22.2k, False: 0]
  ------------------
 1178|       |
 1179|  22.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  22.2k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  17.9k|        {
 1185|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  17.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  17.9k|            processor.SetFPSRValue(new_value);
 1194|  17.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  26.6k|        {
 1199|  26.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  26.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  26.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  26.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  26.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  26.6k|            processor.SetFPSRValue(new_value);
 1208|  26.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  17.5k|        {
 1213|  17.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  17.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  17.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  17.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  17.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  17.5k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 16.1k, False: 1.42k]
  ------------------
 1221|       |
 1222|  17.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  17.5k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  21.6k|        {
 1228|  21.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  21.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  21.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  21.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  21.6k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 21.6k, False: 0]
  ------------------
 1235|       |
 1236|  21.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  21.6k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  87.4k|        {
 1242|  87.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  87.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  87.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  87.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  87.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  87.4k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 82.8k, False: 4.67k]
  ------------------
 1250|       |
 1251|  87.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  87.4k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  41.3k|        {
 1257|  41.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  41.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  41.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  41.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  41.3k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 41.3k, False: 0]
  ------------------
 1264|       |
 1265|  41.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  41.3k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  24.1k|        {
 1271|  24.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  24.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  24.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  24.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  24.1k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  24.1k|            processor.SetFPSRValue(new_value);
 1280|  24.1k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  12.5k|        {
 1285|  12.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  12.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  12.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  12.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  12.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  12.5k|            processor.SetFPSRValue(new_value);
 1294|  12.5k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  18.0k|        {
 1299|  18.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  18.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  18.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  18.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  18.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  18.0k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 1, False: 18.0k]
  ------------------
 1307|       |
 1308|  18.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  18.0k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  26.1k|        {
 1314|  26.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  26.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  26.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  26.1k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  26.1k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 0, False: 26.1k]
  ------------------
 1321|       |
 1322|  26.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  26.1k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  22.7k|        {
 1328|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  22.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  22.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  22.7k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 1, False: 22.7k]
  ------------------
 1336|       |
 1337|  22.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  22.7k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  36.2k|        {
 1343|  36.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  36.2k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  36.2k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  36.2k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  36.2k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 6.93k, False: 29.3k]
  ------------------
 1350|       |
 1351|  36.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  36.2k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  13.5k|        {
 1357|  13.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  13.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  13.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  13.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  13.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  13.5k|            processor.SetFPSRValue(new_value);
 1366|  13.5k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  13.6k|        {
 1371|  13.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  13.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  13.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  13.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  13.6k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  13.6k|            processor.SetFPSRValue(new_value);
 1380|  13.6k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  56.4k|        {
 1385|  56.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  56.4k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  56.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  56.4k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 36.1k, False: 20.3k]
  ------------------
 1391|  36.1k|            {
 1392|  36.1k|                JumpToLabel(processor, jump_label.label_name);
 1393|  36.1k|            }
 1394|  56.4k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  50.9k|        {
 1399|  50.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  50.9k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  50.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  50.9k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 26.6k, False: 24.3k]
  ------------------
 1405|  26.6k|            {
 1406|  26.6k|                JumpToLabel(processor, jump_label.label_name);
 1407|  26.6k|            }
 1408|  50.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  33.0k|        {
 1413|  33.0k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  33.0k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  33.0k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 19.4k, False: 13.6k]
  ------------------
 1418|  19.4k|            {
 1419|  19.4k|                JumpToLabel(processor, jump_label.label_name);
 1420|  19.4k|            }
 1421|  33.0k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   834k|        {
 1426|   834k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   834k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   834k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 817k, False: 16.9k]
  ------------------
 1431|   817k|            {
 1432|   817k|                JumpToLabel(processor, jump_label.label_name);
 1433|   817k|            }
 1434|   834k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|  64.1k|        {
 1439|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1442|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  34.9k|        {
 1447|  34.9k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  34.9k|            JumpToRegister(processor, jump_register.register_id);
 1450|  34.9k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  44.4k|        {
 1455|  44.4k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  44.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  44.4k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  44.4k|            JumpToLabel(processor, jump_label.label_name);
 1461|  44.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|   395k|        {
 1466|   395k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|   395k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|   395k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|   395k|            JumpToRegister(processor, jump_register.register_id);
 1472|   395k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  10.5k|        {
 1477|  10.5k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  10.5k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  10.5k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  10.5k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  10.5k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|      1|        {
 1488|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 0, False: 1]
  ------------------
 1493|      0|            {
 1494|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      0|                return;
 1496|      0|            }
 1497|       |
 1498|      1|            phi::i32 address = optional_address.value();
 1499|       |
 1500|      1|            auto optional_value =
 1501|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 1, False: 0]
  ------------------
 1504|      1|            {
 1505|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      1|                return;
 1508|      1|            }
 1509|       |
 1510|      0|            phi::i32 value = optional_value.value();
 1511|       |
 1512|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|      1|        {
 1518|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 0, False: 1]
  ------------------
 1523|      0|            {
 1524|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      0|                return;
 1526|      0|            }
 1527|       |
 1528|      1|            phi::i32 address = optional_address.value();
 1529|       |
 1530|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|      1|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 1, False: 0]
  ------------------
 1534|      1|            {
 1535|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      1|                return;
 1538|      1|            }
 1539|       |
 1540|      0|            phi::u32 value = optional_value.value();
 1541|       |
 1542|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|      1|        {
 1548|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 0, False: 1]
  ------------------
 1553|      0|            {
 1554|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      0|                return;
 1556|      0|            }
 1557|       |
 1558|      1|            phi::i32 address = optional_address.value();
 1559|       |
 1560|      1|            auto optional_value =
 1561|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 1, False: 0]
  ------------------
 1564|      1|            {
 1565|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      1|                return;
 1568|      1|            }
 1569|       |
 1570|      0|            phi::i32 value = optional_value.value();
 1571|       |
 1572|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|      1|        {
 1578|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 0, False: 1]
  ------------------
 1583|      0|            {
 1584|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      0|                return;
 1586|      0|            }
 1587|       |
 1588|      1|            phi::i32 address = optional_address.value();
 1589|       |
 1590|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|      1|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 1, False: 0]
  ------------------
 1594|      1|            {
 1595|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      1|                return;
 1598|      1|            }
 1599|       |
 1600|      0|            phi::u32 value = optional_value.value();
 1601|       |
 1602|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|      1|        {
 1608|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 0, False: 1]
  ------------------
 1613|      0|            {
 1614|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      0|                return;
 1616|      0|            }
 1617|       |
 1618|      1|            phi::i32 address = optional_address.value();
 1619|       |
 1620|      1|            auto optional_value =
 1621|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 1, False: 0]
  ------------------
 1624|      1|            {
 1625|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      1|                return;
 1628|      1|            }
 1629|       |
 1630|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|      1|        {
 1636|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 0, False: 1]
  ------------------
 1641|      0|            {
 1642|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      0|                return;
 1644|      0|            }
 1645|       |
 1646|      1|            phi::i32 address = optional_address.value();
 1647|       |
 1648|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|      1|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 1, False: 0]
  ------------------
 1652|      1|            {
 1653|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      1|                return;
 1656|      1|            }
 1657|       |
 1658|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|      1|        {
 1664|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 0, False: 1]
  ------------------
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|       |
 1674|      1|            phi::i32 address = optional_address.value();
 1675|       |
 1676|      1|            auto optional_value =
 1677|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 1, False: 0]
  ------------------
 1680|      1|            {
 1681|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      1|                return;
 1684|      1|            }
 1685|       |
 1686|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|      1|        {
 1692|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 0, False: 1]
  ------------------
 1697|      0|            {
 1698|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      0|                return;
 1700|      0|            }
 1701|       |
 1702|      1|            phi::i32 address = optional_address.value();
 1703|       |
 1704|      1|            auto optional_value =
 1705|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 1, False: 0]
  ------------------
 1708|      1|            {
 1709|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      1|                return;
 1712|      1|            }
 1713|       |
 1714|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  20.9k|        {
 1940|  20.9k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  20.9k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  20.9k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  20.9k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  20.9k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  7.94k|        {
 1951|  7.94k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  7.94k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  7.94k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  7.94k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  7.94k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1961|  11.3k|        {
 1962|  11.3k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1963|  11.3k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1964|       |
 1965|  11.3k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1966|       |
 1967|  11.3k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1968|       |
 1969|  11.3k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1970|  11.3k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1974|  19.6k|        {
 1975|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1976|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1977|       |
 1978|  19.6k|            const std::int32_t source_value =
 1979|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1980|       |
 1981|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1982|       |
 1983|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1984|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  13.6k|        {
 1989|  13.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  13.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  13.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  13.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  13.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  27.0k|        {
 2000|  27.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  27.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  27.0k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  27.0k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  27.0k|            const float        converted_value_float =
 2006|  27.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  27.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  27.0k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  9.37k|        {
 2014|  9.37k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  9.37k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  9.37k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  9.37k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  9.37k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  9.37k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  19.0k|        {
 2026|  19.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  19.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  19.0k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  19.0k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  19.0k|            const float        converted_value_float =
 2032|  19.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  19.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  19.0k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  18.4k|        {
 2040|  18.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  18.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  18.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  18.4k|            const std::int32_t converted_value_int =
 2045|  18.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  18.4k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  18.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  18.4k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  11.7k|        {
 2054|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  11.7k|            const std::int32_t converted_value_int =
 2059|  11.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      8|        {
 2074|      8|            processor.Raise(Exception::Halt);
 2075|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|   180k|        {
 2080|       |            /* Do nothing */
 2081|   180k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|   281k|    {
  170|   281k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|   281k|        SafeWriteInteger(processor, dest_reg, res);
  173|   281k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   416k|    {
  125|   416k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   416k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   416k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 20.8k, False: 395k]
  ------------------
  130|  20.8k|        {
  131|  20.8k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  20.8k|            value = max + (value % (min - 1));
  134|  20.8k|        }
  135|       |        // Check for overflow
  136|   395k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 18.8k, False: 377k]
  ------------------
  137|  18.8k|        {
  138|  18.8k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  18.8k|            value = min + (value % (max + 1));
  141|  18.8k|        }
  142|       |
  143|   416k|        PHI_ASSERT(value >= min);
  144|   416k|        PHI_ASSERT(value <= max);
  145|       |
  146|   416k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   416k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  66.2k|    {
  178|  66.2k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  66.2k|        SafeWriteInteger(processor, dest_reg, res);
  181|  66.2k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   257k|    {
  152|   257k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   257k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 27.5k, False: 230k]
  ------------------
  156|  27.5k|        {
  157|  27.5k|            processor.Raise(Exception::Overflow);
  158|       |
  159|  27.5k|            value %= max + 1u;
  160|  27.5k|        }
  161|       |
  162|   257k|        PHI_ASSERT(value <= max);
  163|       |
  164|   257k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   257k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  55.3k|    {
  186|  55.3k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  55.3k|        SafeWriteInteger(processor, dest_reg, res);
  189|  55.3k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   119k|    {
  194|   119k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   119k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 27.5k, False: 92.2k]
  ------------------
  197|  27.5k|        {
  198|  27.5k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  27.5k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  27.5k|            SafeWriteInteger(processor, dest_reg, res);
  202|  27.5k|            return;
  203|  27.5k|        }
  204|       |
  205|  92.2k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  92.2k|        SafeWriteInteger(processor, dest_reg, res);
  208|  92.2k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  75.1k|    {
  213|  75.1k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  75.1k|        SafeWriteInteger(processor, dest_reg, res);
  216|  75.1k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  61.8k|    {
  221|  61.8k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  61.8k|        SafeWriteInteger(processor, dest_reg, res);
  224|  61.8k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  4.71k|    {
  229|  4.71k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 4.71k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  4.71k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  4.71k|        SafeWriteInteger(processor, dest_reg, res);
  238|  4.71k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  9.79k|    {
  243|  9.79k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 3, False: 9.79k]
  ------------------
  244|      3|        {
  245|      3|            processor.Raise(Exception::DivideByZero);
  246|      3|            return;
  247|      3|        }
  248|       |
  249|  9.79k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  9.79k|        SafeWriteInteger(processor, dest_reg, res);
  252|  9.79k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   199k|    {
  326|   199k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 8.02k, False: 191k]
  ------------------
  327|  8.02k|        {
  328|  8.02k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  8.02k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  8.02k|            return;
  333|  8.02k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   191k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 17.9k, False: 173k]
  ------------------
  337|  17.9k|        {
  338|  17.9k|            processor.Raise(Exception::BadShift);
  339|  17.9k|            return;
  340|  17.9k|        }
  341|       |
  342|   173k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   173k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   173k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  95.5k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  95.5k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 8.34k, False: 87.2k]
  ------------------
  259|  8.34k|        {
  260|  8.34k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  8.34k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  8.34k|            return;
  265|  8.34k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  87.2k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 54.2k, False: 32.9k]
  ------------------
  269|  54.2k|        {
  270|  54.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  54.2k|            return;
  272|  54.2k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  32.9k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 6.67k, False: 26.3k]
  ------------------
  276|  6.67k|        {
  277|  6.67k|            processor.Raise(Exception::BadShift);
  278|  6.67k|            return;
  279|  6.67k|        }
  280|       |
  281|  26.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  26.3k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  26.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  26.3k|    {
   30|  26.3k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  26.3k|        return value & ~(-1 << (32 - n));
   33|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  73.9k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  73.9k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 6.61k, False: 67.3k]
  ------------------
  293|  6.61k|        {
  294|  6.61k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  6.61k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 3.18k, False: 3.43k]
  ------------------
  298|  3.18k|            {
  299|       |                // Set every byte to 1
  300|  3.18k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  3.18k|            }
  302|  3.43k|            else
  303|  3.43k|            {
  304|       |                // Set every byte to 0
  305|  3.43k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  3.43k|            }
  307|  6.61k|            return;
  308|  6.61k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  67.3k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 19.6k, False: 47.7k]
  ------------------
  312|  19.6k|        {
  313|  19.6k|            processor.Raise(Exception::BadShift);
  314|  19.6k|            return;
  315|  19.6k|        }
  316|       |
  317|  47.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  47.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  47.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.00M|    {
   39|       |        // Lookup the label
   40|  1.00M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.00M|        PHI_ASSERT(program != nullptr);
   42|  1.00M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.00M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 45, False: 1.00M]
  ------------------
   45|     45|        {
   46|     45|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     45|            processor.Raise(Exception::UnknownLabel);
   48|     45|            return;
   49|     45|        }
   50|       |
   51|  1.00M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.00M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.00M|        processor.SetNextProgramCounter(jump_point);
   56|  1.00M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   430k|    {
   60|   430k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   430k|        phi::u32 max_address =
   63|   430k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   430k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 9, False: 430k]
  ------------------
   65|      9|        {
   66|      9|            processor.Raise(Exception::AddressOutOfBounds);
   67|      9|            return;
   68|      9|        }
   69|       |
   70|   430k|        processor.SetNextProgramCounter(address.unsafe());
   71|   430k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  4.87M|    {
   12|  4.87M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  4.87M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  4.87M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  4.87M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  4.87M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  4.87M|                   "Unexpected argument type for arg1");
   22|  4.87M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  4.87M|                   "Unexpected argument type for arg2");
   24|  4.87M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  4.87M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  4.87M|        m_Executor(processor, arg1, arg2, arg3);
   29|  4.87M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  45.2k|    {
  453|  45.2k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  45.2k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.35M|    {
   17|  1.35M|        m_ValueSigned = val;
   18|  1.35M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   957k|    {
   22|   957k|        m_ValueUnsigned = val;
   23|   957k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  2.47M|    {
   27|  2.47M|        return m_ValueSigned;
   28|  2.47M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.51M|    {
   32|  1.51M|        return m_ValueUnsigned;
   33|  1.51M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.78M|    {
   37|  2.78M|        return m_IsReadOnly;
   38|  2.78M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|      1|    {
   22|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1, False: 0]
  ------------------
   23|      1|        {
   24|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      1|            return {};
   26|      1|        }
   27|       |
   28|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|      0|        return m_Values[raw_address].signed_value;
   31|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|      1|    {
   35|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 1, False: 0]
  ------------------
   36|      1|        {
   37|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      1|            return {};
   39|      1|        }
   40|       |
   41|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|      0|        return m_Values[raw_address].unsigned_value;
   43|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|      1|    {
   47|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1, False: 0]
  ------------------
   48|      1|        {
   49|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      1|            return {};
   51|      1|        }
   52|       |
   53|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  ------------------
   56|      0|        {
   57|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      0|            return {};
   59|      0|        }
   60|       |
   61|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|      1|    {
   66|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1, False: 0]
  ------------------
   67|      1|        {
   68|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      1|            return {};
   70|      1|        }
   71|       |
   72|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 0, False: 0]
  ------------------
   75|      0|        {
   76|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      0|            return {};
   78|      0|        }
   79|       |
   80|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|      1|    {
   85|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 1, False: 0]
  ------------------
   86|      1|        {
   87|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      1|            return {};
   89|      1|        }
   90|       |
   91|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 0, False: 0]
  ------------------
   94|      0|        {
   95|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      0|            return {};
   97|      0|        }
   98|       |
   99|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|      1|    {
  104|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 1, False: 0]
  ------------------
  105|      1|        {
  106|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      1|            return {};
  108|      1|        }
  109|       |
  110|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 0, False: 0]
  ------------------
  113|      0|        {
  114|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      0|            return {};
  116|      0|        }
  117|       |
  118|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|      1|    {
  123|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1, False: 0]
  ------------------
  124|      1|        {
  125|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      1|            return {};
  127|      1|        }
  128|       |
  129|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 0, False: 0]
  ------------------
  132|      0|        {
  133|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      0|            return {};
  135|      0|        }
  136|       |
  137|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|      1|    {
  142|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1, False: 0]
  ------------------
  143|      1|        {
  144|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      1|            return {};
  146|      1|        }
  147|       |
  148|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|        {
  152|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      0|            return {};
  154|      0|        }
  155|       |
  156|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|      8|    {
  269|       |        // Cannot access anything before the starting address
  270|      8|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 8, False: 0]
  ------------------
  271|      8|        {
  272|      8|            return false;
  273|      8|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 0]
  ------------------
  277|      0|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 0]
  ------------------
  284|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 0, False: 0]
  ------------------
  291|      0|        {
  292|      0|            return false;
  293|      0|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|      0|        return true;
  297|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  4.82k|    {
  307|  4.82k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 4.82M, False: 4.82k]
  ------------------
  308|  4.82M|        {
  309|  4.82M|            val.signed_value = 0;
  310|  4.82M|        }
  311|  4.82k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   236k|    {
   24|   236k|        switch (token.length())
   25|   236k|        {
   26|       |            // 1 character OpCodes
   27|  9.19k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 9.19k, False: 227k]
  ------------------
   28|  9.19k|                char c1 = token[0];
   29|  9.19k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 4.54k, False: 4.64k]
  ------------------
   30|  4.54k|                {
   31|  4.54k|                    return OpCode::J;
   32|  4.54k|                }
   33|  4.64k|                break;
   34|  9.19k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  15.9k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 15.9k, False: 220k]
  ------------------
   38|  15.9k|                char c1 = token[0];
   39|  15.9k|                char c2 = token[1];
   40|       |
   41|  15.9k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 6.71k, False: 9.27k]
  ------------------
   42|  15.9k|                {
   43|    178|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 178, False: 15.8k]
  ------------------
   44|    349|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 171, False: 15.8k]
  ------------------
   45|    349|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 147, False: 202]
  ------------------
   46|    147|                        {
   47|    147|                            return OpCode::JR;
   48|    147|                        }
   49|    202|                        break;
   50|       |
   51|  2.50k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 2.50k, False: 13.4k]
  ------------------
   52|  2.67k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 172, False: 15.8k]
  ------------------
   53|  2.67k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 77, False: 2.59k]
  ------------------
   54|  2.67k|                        {
   55|     67|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 67, False: 2.60k]
  ------------------
   56|    144|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 77, False: 2.59k]
  ------------------
   57|    144|                                return OpCode::LB;
   58|    510|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 510, False: 2.16k]
  ------------------
   59|    520|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 10, False: 2.66k]
  ------------------
   60|    520|                                return OpCode::LD;
   61|     70|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 70, False: 2.60k]
  ------------------
   62|    140|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 70, False: 2.60k]
  ------------------
   63|    140|                                return OpCode::LF;
   64|     67|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 67, False: 2.60k]
  ------------------
   65|    165|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 98, False: 2.57k]
  ------------------
   66|    165|                                return OpCode::LH;
   67|  1.56k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.56k, False: 1.11k]
  ------------------
   68|  1.62k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 66, False: 2.60k]
  ------------------
   69|  1.62k|                                return OpCode::LW;
   70|  2.67k|                        }
   71|     77|                        break;
   72|     78|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 78, False: 15.9k]
  ------------------
   73|  1.52k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 1.44k, False: 14.5k]
  ------------------
   74|  1.52k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 194, False: 1.33k]
  ------------------
   75|    194|                        {
   76|    194|                            return OpCode::OR;
   77|    194|                        }
   78|  1.33k|                        break;
   79|  4.35k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 4.35k, False: 11.6k]
  ------------------
   80|  4.72k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 375, False: 15.6k]
  ------------------
   81|  4.72k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 112, False: 4.61k]
  ------------------
   82|  4.72k|                        {
   83|  1.76k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.76k, False: 2.96k]
  ------------------
   84|  1.83k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 67, False: 4.66k]
  ------------------
   85|  1.83k|                                return OpCode::SB;
   86|    112|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 112, False: 4.61k]
  ------------------
   87|    288|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 176, False: 4.55k]
  ------------------
   88|    288|                                return OpCode::SD;
   89|  2.12k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 2.12k, False: 2.60k]
  ------------------
   90|  2.19k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 66, False: 4.66k]
  ------------------
   91|  2.19k|                                return OpCode::SF;
   92|     66|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 66, False: 4.66k]
  ------------------
   93|    209|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 143, False: 4.58k]
  ------------------
   94|    209|                                return OpCode::SH;
   95|     21|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 21, False: 4.70k]
  ------------------
   96|     94|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 73, False: 4.65k]
  ------------------
   97|     94|                                return OpCode::SW;
   98|  4.72k|                        }
   99|    112|                        break;
  100|  15.9k|                }
  101|  8.44k|                break;
  102|  15.9k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   105k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 105k, False: 130k]
  ------------------
  106|   105k|                char c1 = token[0];
  107|   105k|                char c2 = token[1];
  108|   105k|                char c3 = token[2];
  109|       |
  110|   105k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 8.35k, False: 97.6k]
  ------------------
  111|   105k|                {
  112|  43.6k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 43.6k, False: 62.2k]
  ------------------
  113|  43.7k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 101, False: 105k]
  ------------------
  114|  43.7k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 43.5k, False: 245]
  |  Branch (114:29): [True: 43.4k, False: 352]
  |  Branch (114:45): [True: 43.4k, False: 107]
  ------------------
  115|  43.4k|                        {
  116|  43.4k|                            return OpCode::ADD;
  117|  43.4k|                        }
  118|    352|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 230, False: 122]
  |  Branch (118:34): [True: 164, False: 188]
  |  Branch (118:50): [True: 164, False: 66]
  ------------------
  119|    164|                        {
  120|    164|                            return OpCode::AND;
  121|    164|                        }
  122|    188|                        break;
  123|       |
  124|    188|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 153, False: 105k]
  ------------------
  125|    301|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 148, False: 105k]
  ------------------
  126|    301|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 229, False: 72]
  |  Branch (126:29): [True: 159, False: 142]
  |  Branch (126:45): [True: 159, False: 70]
  ------------------
  127|    159|                        {
  128|    159|                            return OpCode::DIV;
  129|    159|                        }
  130|    142|                        break;
  131|       |
  132|    814|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 814, False: 105k]
  ------------------
  133|    945|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 131, False: 105k]
  ------------------
  134|    945|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 825, False: 120]
  ------------------
  135|    825|                        {
  136|    825|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 145, False: 680]
  ------------------
  137|    145|                            {
  138|    145|                                return OpCode::EQD;
  139|    145|                            }
  140|    680|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 614, False: 66]
  ------------------
  141|    614|                            {
  142|    614|                                return OpCode::EQF;
  143|    614|                            }
  144|    825|                        }
  145|    186|                        break;
  146|       |
  147|  3.13k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 3.13k, False: 102k]
  ------------------
  148|  3.65k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 518, False: 105k]
  ------------------
  149|  3.65k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 384, False: 3.27k]
  ------------------
  150|    384|                        {
  151|    384|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 167, False: 217]
  ------------------
  152|    167|                            {
  153|    167|                                return OpCode::GED;
  154|    167|                            }
  155|    217|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 151, False: 66]
  ------------------
  156|    151|                            {
  157|    151|                                return OpCode::GEF;
  158|    151|                            }
  159|    384|                        }
  160|  3.27k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 3.17k, False: 98]
  ------------------
  161|  3.17k|                        {
  162|  3.17k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 1.61k, False: 1.55k]
  ------------------
  163|  1.61k|                            {
  164|  1.61k|                                return OpCode::GTD;
  165|  1.61k|                            }
  166|  1.55k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.49k, False: 66]
  ------------------
  167|  1.49k|                            {
  168|  1.49k|                                return OpCode::GTF;
  169|  1.49k|                            }
  170|  1.55k|                        }
  171|    230|                        break;
  172|       |
  173|  2.72k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 2.72k, False: 103k]
  ------------------
  174|  3.61k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 890, False: 105k]
  ------------------
  175|  3.61k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 3.55k, False: 66]
  |  Branch (175:29): [True: 2.93k, False: 680]
  |  Branch (175:45): [True: 2.93k, False: 614]
  ------------------
  176|  2.93k|                        {
  177|  2.93k|                            return OpCode::JAL;
  178|  2.93k|                        }
  179|    680|                        break;
  180|       |
  181|  8.54k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 8.54k, False: 97.4k]
  ------------------
  182|  13.2k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 4.67k, False: 101k]
  ------------------
  183|  13.2k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.36k, False: 11.8k]
  ------------------
  184|  13.2k|                        {
  185|     69|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 69, False: 13.1k]
  ------------------
  186|  1.93k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.86k, False: 11.3k]
  ------------------
  187|  1.93k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 969, False: 962]
  ------------------
  188|    969|                                {
  189|    969|                                    return OpCode::LBU;
  190|    969|                                }
  191|    962|                                break;
  192|       |
  193|  2.34k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 2.34k, False: 10.8k]
  ------------------
  194|  4.11k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 1.77k, False: 11.4k]
  ------------------
  195|  4.11k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 2.34k, False: 1.77k]
  ------------------
  196|  2.34k|                                {
  197|  2.34k|                                    return OpCode::LED;
  198|  2.34k|                                }
  199|  1.77k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 386, False: 1.39k]
  ------------------
  200|    386|                                {
  201|    386|                                    return OpCode::LEF;
  202|    386|                                }
  203|  1.39k|                                break;
  204|       |
  205|  3.63k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 3.63k, False: 9.58k]
  ------------------
  206|  4.98k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.35k, False: 11.8k]
  ------------------
  207|  4.98k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 1.59k, False: 3.39k]
  ------------------
  208|  1.59k|                                {
  209|  1.59k|                                    return OpCode::LHI;
  210|  1.59k|                                }
  211|  3.39k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 2.13k, False: 1.26k]
  ------------------
  212|  2.13k|                                {
  213|  2.13k|                                    return OpCode::LHU;
  214|  2.13k|                                }
  215|  1.26k|                                break;
  216|       |
  217|  1.26k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 452, False: 12.7k]
  ------------------
  218|    649|                            case 't':
  ------------------
  |  Branch (218:29): [True: 197, False: 13.0k]
  ------------------
  219|    649|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 257, False: 392]
  ------------------
  220|    257|                                {
  221|    257|                                    return OpCode::LTD;
  222|    257|                                }
  223|    392|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 198, False: 194]
  ------------------
  224|    198|                                {
  225|    198|                                    return OpCode::LTF;
  226|    198|                                }
  227|    194|                                break;
  228|       |
  229|    194|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 70, False: 13.1k]
  ------------------
  230|    167|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 97, False: 13.1k]
  ------------------
  231|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 133, False: 34]
  ------------------
  232|    133|                                {
  233|    133|                                    return OpCode::LWU;
  234|    133|                                }
  235|     34|                                break;
  236|  13.2k|                        }
  237|  5.21k|                        break;
  238|       |
  239|  5.70k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 5.70k, False: 100k]
  ------------------
  240|  8.20k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 2.50k, False: 103k]
  ------------------
  241|  8.20k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 2.66k, False: 5.54k]
  ------------------
  242|  2.66k|                        {
  243|  2.66k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 160, False: 2.50k]
  ------------------
  244|    160|                            {
  245|    160|                                return OpCode::NED;
  246|    160|                            }
  247|  2.50k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 2.43k, False: 66]
  ------------------
  248|  2.43k|                            {
  249|  2.43k|                                return OpCode::NEF;
  250|  2.43k|                            }
  251|  2.66k|                        }
  252|  5.54k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 5.23k, False: 309]
  |  Branch (252:34): [True: 3.68k, False: 1.85k]
  |  Branch (252:50): [True: 3.68k, False: 1.54k]
  ------------------
  253|  3.68k|                        {
  254|  3.68k|                            return OpCode::NOP;
  255|  3.68k|                        }
  256|       |
  257|  1.92k|                        break;
  258|       |
  259|  1.92k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 112, False: 105k]
  ------------------
  260|  1.73k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 1.61k, False: 104k]
  ------------------
  261|  1.73k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 1.46k, False: 268]
  |  Branch (261:29): [True: 1.00k, False: 725]
  |  Branch (261:45): [True: 1.00k, False: 457]
  ------------------
  262|  1.00k|                        {
  263|  1.00k|                            return OpCode::ORI;
  264|  1.00k|                        }
  265|    725|                        break;
  266|       |
  267|  20.5k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 20.5k, False: 85.4k]
  ------------------
  268|  21.3k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 739, False: 105k]
  ------------------
  269|  21.3k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 150, False: 21.1k]
  ------------------
  270|  21.3k|                        {
  271|     71|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 71, False: 21.2k]
  ------------------
  272|    206|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 135, False: 21.1k]
  ------------------
  273|    206|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 137, False: 69]
  ------------------
  274|    137|                                {
  275|    137|                                    return OpCode::SBU;
  276|    137|                                }
  277|     69|                                break;
  278|       |
  279|     96|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 96, False: 21.2k]
  ------------------
  280|    324|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 228, False: 21.0k]
  ------------------
  281|    324|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 162, False: 162]
  ------------------
  282|    162|                                {
  283|    162|                                    return OpCode::SEQ;
  284|    162|                                }
  285|    162|                                break;
  286|       |
  287|  5.32k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 5.32k, False: 15.9k]
  ------------------
  288|  6.22k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 904, False: 20.4k]
  ------------------
  289|  6.22k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.39k, False: 1.82k]
  ------------------
  290|  4.39k|                                {
  291|  4.39k|                                    return OpCode::SGE;
  292|  4.39k|                                }
  293|  1.82k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 995, False: 834]
  ------------------
  294|    995|                                {
  295|    995|                                    return OpCode::SGT;
  296|    995|                                }
  297|    834|                                break;
  298|       |
  299|    845|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 845, False: 20.4k]
  ------------------
  300|  1.01k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 172, False: 21.1k]
  ------------------
  301|  1.01k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 910, False: 107]
  ------------------
  302|    910|                                {
  303|    910|                                    return OpCode::SHU;
  304|    910|                                }
  305|    107|                                break;
  306|       |
  307|  1.92k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 1.92k, False: 19.3k]
  ------------------
  308|  2.37k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 451, False: 20.8k]
  ------------------
  309|  2.37k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 163, False: 2.21k]
  ------------------
  310|  2.37k|                                {
  311|    949|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 949, False: 1.43k]
  ------------------
  312|  1.01k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 2.31k]
  ------------------
  313|  1.01k|                                        return OpCode::SLA;
  314|       |
  315|    540|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 540, False: 1.83k]
  ------------------
  316|    606|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 66, False: 2.31k]
  ------------------
  317|    606|                                        return OpCode::SLE;
  318|       |
  319|    152|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 152, False: 2.22k]
  ------------------
  320|    250|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 98, False: 2.28k]
  ------------------
  321|    250|                                        return OpCode::SLL;
  322|       |
  323|    220|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 220, False: 2.15k]
  ------------------
  324|    345|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 125, False: 2.25k]
  ------------------
  325|    345|                                        return OpCode::SLT;
  326|  2.37k|                                }
  327|    163|                                break;
  328|       |
  329|  4.50k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 4.50k, False: 16.8k]
  ------------------
  330|  4.58k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 84, False: 21.2k]
  ------------------
  331|  4.58k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 4.52k, False: 66]
  ------------------
  332|  4.52k|                                {
  333|  4.52k|                                    return OpCode::SNE;
  334|  4.52k|                                }
  335|     66|                                break;
  336|       |
  337|  2.71k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 2.71k, False: 18.5k]
  ------------------
  338|  2.81k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 97, False: 21.2k]
  ------------------
  339|  2.81k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 204, False: 2.61k]
  ------------------
  340|    204|                                {
  341|    204|                                    return OpCode::SRA;
  342|    204|                                }
  343|  2.61k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 2.57k, False: 34]
  ------------------
  344|  2.57k|                                {
  345|  2.57k|                                    return OpCode::SRL;
  346|  2.57k|                                }
  347|     34|                                break;
  348|       |
  349|  2.36k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 2.36k, False: 18.9k]
  ------------------
  350|  2.44k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 81, False: 21.2k]
  ------------------
  351|  2.44k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 2.38k, False: 66]
  ------------------
  352|  2.38k|                                {
  353|  2.38k|                                    return OpCode::SUB;
  354|  2.38k|                                }
  355|     66|                                break;
  356|       |
  357|  1.04k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.04k, False: 20.2k]
  ------------------
  358|  1.16k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 116, False: 21.2k]
  ------------------
  359|  1.16k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.06k, False: 98]
  ------------------
  360|  1.06k|                                {
  361|  1.06k|                                    return OpCode::SWU;
  362|  1.06k|                                }
  363|     98|                                break;
  364|  21.3k|                        }
  365|       |
  366|  2.44k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 698, False: 105k]
  ------------------
  367|  2.59k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 145, False: 105k]
  ------------------
  368|  2.59k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 827, False: 1.76k]
  |  Branch (368:29): [True: 761, False: 1.83k]
  |  Branch (368:45): [True: 761, False: 66]
  ------------------
  369|    761|                        {
  370|    761|                            return OpCode::XOR;
  371|    761|                        }
  372|  1.83k|                        break;
  373|   105k|                }
  374|  19.4k|                break;
  375|   105k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  70.2k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 70.2k, False: 166k]
  ------------------
  379|  70.2k|                char c1 = token[0];
  380|  70.2k|                char c2 = token[1];
  381|  70.2k|                char c3 = token[2];
  382|  70.2k|                char c4 = token[3];
  383|       |
  384|  70.2k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 8.89k, False: 61.3k]
  ------------------
  385|  70.2k|                {
  386|  8.88k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 8.88k, False: 61.3k]
  ------------------
  387|  9.87k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 985, False: 69.2k]
  ------------------
  388|  9.87k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 205, False: 9.66k]
  ------------------
  389|  9.87k|                        {
  390|  7.02k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 7.02k, False: 2.84k]
  ------------------
  391|  7.74k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 715, False: 9.15k]
  ------------------
  392|  7.74k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 7.67k, False: 68]
  ------------------
  393|  7.67k|                                {
  394|  7.67k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 377, False: 7.29k]
  ------------------
  395|  7.67k|                                    {
  396|  1.79k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.79k, False: 5.88k]
  ------------------
  397|  1.85k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 7.60k]
  ------------------
  398|  1.85k|                                            return OpCode::ADDD;
  399|       |
  400|    947|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 947, False: 6.72k]
  ------------------
  401|  1.12k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 180, False: 7.49k]
  ------------------
  402|  1.12k|                                            return OpCode::ADDF;
  403|       |
  404|  3.55k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 3.55k, False: 4.11k]
  ------------------
  405|  3.62k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 7.60k]
  ------------------
  406|  3.62k|                                            return OpCode::ADDI;
  407|       |
  408|    621|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 621, False: 7.05k]
  ------------------
  409|    688|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 67, False: 7.60k]
  ------------------
  410|    688|                                            return OpCode::ADDU;
  411|  7.67k|                                    }
  412|  7.67k|                                }
  413|    445|                                break;
  414|       |
  415|  1.82k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.82k, False: 8.04k]
  ------------------
  416|  1.92k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 102, False: 9.77k]
  ------------------
  417|  1.92k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.86k, False: 66]
  |  Branch (417:37): [True: 1.79k, False: 132]
  |  Branch (417:53): [True: 1.79k, False: 66]
  ------------------
  418|  1.79k|                                {
  419|  1.79k|                                    return OpCode::ANDI;
  420|  1.79k|                                }
  421|       |
  422|    132|                                break;
  423|  9.87k|                        }
  424|    782|                        break;
  425|       |
  426|  3.85k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 3.85k, False: 66.3k]
  ------------------
  427|  9.06k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 5.20k, False: 65.0k]
  ------------------
  428|  9.06k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 843, False: 8.21k]
  ------------------
  429|  9.06k|                        {
  430|    157|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 157, False: 8.90k]
  ------------------
  431|    726|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 569, False: 8.49k]
  ------------------
  432|    726|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 657, False: 69]
  |  Branch (432:37): [True: 223, False: 503]
  |  Branch (432:53): [True: 223, False: 434]
  ------------------
  433|    223|                                {
  434|    223|                                    return OpCode::BEQZ;
  435|    223|                                }
  436|    503|                                break;
  437|       |
  438|  3.58k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 3.58k, False: 5.47k]
  ------------------
  439|  5.43k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.84k, False: 7.21k]
  ------------------
  440|  5.43k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 5.21k, False: 224]
  ------------------
  441|  5.21k|                                {
  442|  5.21k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 3.54k, False: 1.66k]
  ------------------
  443|  3.54k|                                    {
  444|  3.54k|                                        return OpCode::BFPF;
  445|  3.54k|                                    }
  446|  1.66k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.44k, False: 218]
  ------------------
  447|  1.44k|                                    {
  448|  1.44k|                                        return OpCode::BFPT;
  449|  1.44k|                                    }
  450|  5.21k|                                }
  451|    442|                                break;
  452|       |
  453|  1.97k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 1.97k, False: 7.09k]
  ------------------
  454|  2.05k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 8.97k]
  ------------------
  455|  2.05k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.82k, False: 235]
  |  Branch (455:37): [True: 954, False: 1.10k]
  |  Branch (455:53): [True: 954, False: 868]
  ------------------
  456|    954|                                {
  457|    954|                                    return OpCode::BNEZ;
  458|    954|                                }
  459|  9.06k|                        }
  460|  2.89k|                        break;
  461|       |
  462|  2.89k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 526, False: 69.7k]
  ------------------
  463|  4.70k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 4.18k, False: 66.0k]
  ------------------
  464|  4.70k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 3.57k, False: 1.12k]
  |  Branch (464:29): [True: 2.80k, False: 1.89k]
  |  Branch (464:45): [True: 2.80k, False: 770]
  ------------------
  465|  2.80k|                        {
  466|  2.80k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 1.07k, False: 1.73k]
  ------------------
  467|  2.80k|                            {
  468|     87|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 87, False: 2.72k]
  ------------------
  469|    153|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 2.74k]
  ------------------
  470|    153|                                    return OpCode::DIVD;
  471|       |
  472|    187|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 187, False: 2.62k]
  ------------------
  473|    253|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 2.74k]
  ------------------
  474|    253|                                    return OpCode::DIVF;
  475|       |
  476|    114|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 114, False: 2.69k]
  ------------------
  477|    468|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 354, False: 2.45k]
  ------------------
  478|    468|                                    return OpCode::DIVI;
  479|       |
  480|    102|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 102, False: 2.70k]
  ------------------
  481|    856|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 754, False: 2.05k]
  ------------------
  482|    856|                                    return OpCode::DIVU;
  483|  2.80k|                            }
  484|  2.80k|                        }
  485|  2.97k|                        break;
  486|       |
  487|  2.97k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 468, False: 69.7k]
  ------------------
  488|    740|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 272, False: 69.9k]
  ------------------
  489|    740|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 666, False: 74]
  |  Branch (489:29): [True: 534, False: 206]
  |  Branch (489:45): [True: 600, False: 66]
  |  Branch (489:61): [True: 534, False: 66]
  ------------------
  490|    534|                        {
  491|    534|                            return OpCode::HALT;
  492|    534|                        }
  493|    206|                        break;
  494|       |
  495|  1.07k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 1.07k, False: 69.1k]
  ------------------
  496|  3.14k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 2.07k, False: 68.1k]
  ------------------
  497|  3.14k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 2.99k, False: 152]
  |  Branch (497:29): [True: 1.13k, False: 2.00k]
  |  Branch (497:45): [True: 2.27k, False: 713]
  |  Branch (497:61): [True: 1.13k, False: 1.14k]
  ------------------
  498|  1.13k|                        {
  499|  1.13k|                            return OpCode::JALR;
  500|  1.13k|                        }
  501|  2.00k|                        break;
  502|       |
  503|  3.81k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 3.81k, False: 66.4k]
  ------------------
  504|  4.14k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 327, False: 69.9k]
  ------------------
  505|  4.14k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.82k, False: 1.31k]
  |  Branch (505:29): [True: 1.82k, False: 2.31k]
  |  Branch (505:45): [True: 1.82k, False: 1.00k]
  ------------------
  506|  1.82k|                        {
  507|  1.82k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 414, False: 1.41k]
  ------------------
  508|    414|                            {
  509|    414|                                return OpCode::MOVD;
  510|    414|                            }
  511|  1.41k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 160, False: 1.25k]
  ------------------
  512|    160|                            {
  513|    160|                                return OpCode::MOVF;
  514|    160|                            }
  515|  1.82k|                        }
  516|  2.31k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.16k, False: 1.14k]
  |  Branch (516:34): [True: 834, False: 1.48k]
  |  Branch (516:50): [True: 1.10k, False: 66]
  |  Branch (516:66): [True: 834, False: 268]
  ------------------
  517|    834|                        {
  518|    834|                            return OpCode::MULT;
  519|    834|                        }
  520|  2.73k|                        break;
  521|       |
  522|  24.8k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 24.8k, False: 45.3k]
  ------------------
  523|  25.9k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 1.08k, False: 69.1k]
  ------------------
  524|  25.9k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 324, False: 25.6k]
  ------------------
  525|  25.9k|                        {
  526|  3.77k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 3.77k, False: 22.1k]
  ------------------
  527|  4.06k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 293, False: 25.6k]
  ------------------
  528|  4.06k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 3.96k, False: 98]
  ------------------
  529|  3.96k|                                {
  530|  3.96k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 739, False: 3.22k]
  ------------------
  531|    739|                                    {
  532|    739|                                        return OpCode::SEQI;
  533|    739|                                    }
  534|  3.22k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 3.16k, False: 66]
  ------------------
  535|  3.16k|                                    {
  536|  3.16k|                                        return OpCode::SEQU;
  537|  3.16k|                                    }
  538|  3.96k|                                }
  539|    164|                                break;
  540|       |
  541|  4.43k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 4.43k, False: 21.5k]
  ------------------
  542|  6.76k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 2.32k, False: 23.6k]
  ------------------
  543|  6.76k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 3.01k, False: 3.74k]
  ------------------
  544|  3.01k|                                {
  545|  3.01k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 2.73k, False: 284]
  ------------------
  546|  2.73k|                                    {
  547|  2.73k|                                        return OpCode::SGEI;
  548|  2.73k|                                    }
  549|    284|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 218, False: 66]
  ------------------
  550|    218|                                    {
  551|    218|                                        return OpCode::SGEU;
  552|    218|                                    }
  553|  3.01k|                                }
  554|  3.74k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 3.67k, False: 67]
  ------------------
  555|  3.67k|                                {
  556|  3.67k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 152, False: 3.52k]
  ------------------
  557|    152|                                    {
  558|    152|                                        return OpCode::SGTI;
  559|    152|                                    }
  560|  3.52k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.52k, False: 1.99k]
  ------------------
  561|  1.52k|                                    {
  562|  1.52k|                                        return OpCode::SGTU;
  563|  1.52k|                                    }
  564|  3.67k|                                }
  565|  2.13k|                                break;
  566|       |
  567|  2.13k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 2.08k, False: 23.8k]
  ------------------
  568|  4.70k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 2.61k, False: 23.3k]
  ------------------
  569|  4.70k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 142, False: 4.56k]
  ------------------
  570|  4.70k|                                {
  571|    101|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 101, False: 4.60k]
  ------------------
  572|    233|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 132, False: 4.57k]
  ------------------
  573|    233|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 158, False: 75]
  ------------------
  574|    158|                                        {
  575|    158|                                            return OpCode::SLAI;
  576|    158|                                        }
  577|     75|                                        break;
  578|       |
  579|    557|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 557, False: 4.14k]
  ------------------
  580|  1.43k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 873, False: 3.83k]
  ------------------
  581|  1.43k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 293, False: 1.13k]
  ------------------
  582|    293|                                        {
  583|    293|                                            return OpCode::SLEI;
  584|    293|                                        }
  585|  1.13k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 396, False: 741]
  ------------------
  586|    396|                                        {
  587|    396|                                            return OpCode::SLEU;
  588|    396|                                        }
  589|    741|                                        break;
  590|       |
  591|    741|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 216, False: 4.49k]
  ------------------
  592|  1.51k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.29k, False: 3.41k]
  ------------------
  593|  1.51k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 809, False: 703]
  ------------------
  594|    809|                                        {
  595|    809|                                            return OpCode::SLLI;
  596|    809|                                        }
  597|    703|                                        break;
  598|       |
  599|  1.25k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.25k, False: 3.45k]
  ------------------
  600|  1.38k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 138, False: 4.56k]
  ------------------
  601|  1.38k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 974, False: 415]
  ------------------
  602|    974|                                        {
  603|    974|                                            return OpCode::SLTI;
  604|    974|                                        }
  605|    415|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 336, False: 79]
  ------------------
  606|    336|                                        {
  607|    336|                                            return OpCode::SLTU;
  608|    336|                                        }
  609|     79|                                        break;
  610|  4.70k|                                }
  611|       |
  612|  1.92k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 185, False: 25.7k]
  ------------------
  613|  2.06k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 142, False: 25.8k]
  ------------------
  614|  2.06k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.06k, False: 999]
  ------------------
  615|  1.06k|                                {
  616|  1.06k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 163, False: 905]
  ------------------
  617|    163|                                    {
  618|    163|                                        return OpCode::SNEI;
  619|    163|                                    }
  620|    905|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 154, False: 751]
  ------------------
  621|    154|                                    {
  622|    154|                                        return OpCode::SNEU;
  623|    154|                                    }
  624|  1.06k|                                }
  625|  1.75k|                                break;
  626|       |
  627|  4.02k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 4.02k, False: 21.9k]
  ------------------
  628|  4.18k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 155, False: 25.8k]
  ------------------
  629|  4.18k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 389, False: 3.79k]
  |  Branch (629:37): [True: 304, False: 3.87k]
  |  Branch (629:53): [True: 304, False: 85]
  ------------------
  630|    304|                                {
  631|    304|                                    return OpCode::SRAI;
  632|    304|                                }
  633|  3.87k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 3.79k, False: 85]
  |  Branch (633:42): [True: 3.72k, False: 151]
  |  Branch (633:58): [True: 3.72k, False: 66]
  ------------------
  634|  3.72k|                                {
  635|  3.72k|                                    return OpCode::SRLI;
  636|  3.72k|                                }
  637|    151|                                break;
  638|       |
  639|  5.37k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 5.37k, False: 20.5k]
  ------------------
  640|  5.59k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 220, False: 25.7k]
  ------------------
  641|  5.59k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 5.53k, False: 66]
  ------------------
  642|  5.53k|                                {
  643|  5.53k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 66, False: 5.46k]
  ------------------
  644|  5.53k|                                    {
  645|    505|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 505, False: 5.02k]
  ------------------
  646|    571|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 5.46k]
  ------------------
  647|    571|                                            return OpCode::SUBD;
  648|       |
  649|  1.58k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 1.58k, False: 3.95k]
  ------------------
  650|  1.67k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 98, False: 5.43k]
  ------------------
  651|  1.67k|                                            return OpCode::SUBF;
  652|       |
  653|    467|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 467, False: 5.06k]
  ------------------
  654|    565|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 98, False: 5.43k]
  ------------------
  655|    565|                                            return OpCode::SUBI;
  656|       |
  657|  2.58k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 2.58k, False: 2.94k]
  ------------------
  658|  2.65k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 5.46k]
  ------------------
  659|  2.65k|                                            return OpCode::SUBU;
  660|  5.53k|                                    }
  661|  5.53k|                                }
  662|    132|                                break;
  663|  25.9k|                        }
  664|  4.65k|                        break;
  665|       |
  666|  4.65k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 461, False: 69.7k]
  ------------------
  667|    781|                    case 't':
  ------------------
  |  Branch (667:21): [True: 320, False: 69.9k]
  ------------------
  668|    781|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 673, False: 108]
  |  Branch (668:29): [True: 509, False: 272]
  |  Branch (668:45): [True: 575, False: 98]
  |  Branch (668:61): [True: 509, False: 66]
  ------------------
  669|    509|                        {
  670|    509|                            return OpCode::TRAP;
  671|    509|                        }
  672|    272|                        break;
  673|  1.00k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 1.00k, False: 69.2k]
  ------------------
  674|  2.93k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 1.92k, False: 68.3k]
  ------------------
  675|  2.93k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 2.05k, False: 875]
  |  Branch (675:29): [True: 1.70k, False: 1.22k]
  |  Branch (675:45): [True: 1.95k, False: 104]
  |  Branch (675:61): [True: 1.70k, False: 246]
  ------------------
  676|  1.70k|                        {
  677|  1.70k|                            return OpCode::XORI;
  678|  1.70k|                        }
  679|  1.22k|                        break;
  680|  70.2k|                }
  681|  26.6k|                break;
  682|  70.2k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  26.6k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 15.1k, False: 221k]
  ------------------
  686|  15.1k|                char c1 = token[0];
  687|  15.1k|                char c2 = token[1];
  688|  15.1k|                char c3 = token[2];
  689|  15.1k|                char c4 = token[3];
  690|  15.1k|                char c5 = token[4];
  691|       |
  692|  15.1k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 2.65k, False: 12.4k]
  ------------------
  693|  15.1k|                {
  694|  2.48k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 2.48k, False: 12.6k]
  ------------------
  695|  2.48k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 15.1k]
  ------------------
  696|  2.48k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 2.48k, False: 0]
  |  Branch (696:29): [True: 2.48k, False: 0]
  |  Branch (696:45): [True: 2.48k, False: 0]
  |  Branch (696:61): [True: 2.48k, False: 0]
  |  Branch (696:77): [True: 2.48k, False: 0]
  ------------------
  697|  2.48k|                        {
  698|  2.48k|                            return OpCode::ADDUI;
  699|  2.48k|                        }
  700|      0|                        break;
  701|       |
  702|  1.55k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.55k, False: 13.5k]
  ------------------
  703|  1.55k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 15.1k]
  ------------------
  704|  1.55k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.55k, False: 0]
  |  Branch (704:29): [True: 1.55k, False: 0]
  |  Branch (704:45): [True: 1.55k, False: 0]
  |  Branch (704:61): [True: 1.55k, False: 0]
  |  Branch (704:77): [True: 1.55k, False: 0]
  ------------------
  705|  1.55k|                        {
  706|  1.55k|                            return OpCode::DIVUI;
  707|  1.55k|                        }
  708|      0|                        break;
  709|       |
  710|  4.68k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 4.68k, False: 10.4k]
  ------------------
  711|  4.68k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 15.1k]
  ------------------
  712|  4.68k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 4.68k, False: 0]
  |  Branch (712:29): [True: 4.68k, False: 0]
  |  Branch (712:45): [True: 4.68k, False: 0]
  |  Branch (712:61): [True: 4.68k, False: 0]
  ------------------
  713|  4.68k|                        {
  714|  4.68k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 4.68k]
  ------------------
  715|  4.68k|                            {
  716|    129|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 129, False: 4.55k]
  ------------------
  717|    129|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 4.68k]
  ------------------
  718|    129|                                    return OpCode::MULTD;
  719|       |
  720|  2.25k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 2.25k, False: 2.43k]
  ------------------
  721|  2.25k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 4.68k]
  ------------------
  722|  2.25k|                                    return OpCode::MULTF;
  723|       |
  724|    324|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 324, False: 4.36k]
  ------------------
  725|    324|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 4.68k]
  ------------------
  726|    324|                                    return OpCode::MULTI;
  727|       |
  728|  1.98k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.98k, False: 2.70k]
  ------------------
  729|  1.98k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 4.68k]
  ------------------
  730|  1.98k|                                    return OpCode::MULTU;
  731|  4.68k|                            }
  732|  4.68k|                        }
  733|      0|                        break;
  734|       |
  735|  3.72k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 3.72k, False: 11.3k]
  ------------------
  736|  3.72k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 15.1k]
  ------------------
  737|  3.72k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 3.72k]
  ------------------
  738|  3.72k|                        {
  739|  1.29k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.29k, False: 2.42k]
  ------------------
  740|  1.29k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 3.72k]
  ------------------
  741|  1.29k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.29k, False: 0]
  |  Branch (741:37): [True: 1.29k, False: 0]
  |  Branch (741:53): [True: 1.29k, False: 0]
  |  Branch (741:69): [True: 1.29k, False: 0]
  ------------------
  742|  1.29k|                                {
  743|  1.29k|                                    return OpCode::SEQUI;
  744|  1.29k|                                }
  745|      0|                                break;
  746|       |
  747|  1.50k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 1.50k, False: 2.21k]
  ------------------
  748|  1.50k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 3.72k]
  ------------------
  749|  1.50k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 1.42k, False: 86]
  |  Branch (749:37): [True: 1.42k, False: 86]
  |  Branch (749:53): [True: 1.42k, False: 0]
  |  Branch (749:69): [True: 1.42k, False: 0]
  ------------------
  750|  1.42k|                                {
  751|  1.42k|                                    return OpCode::SGEUI;
  752|  1.42k|                                }
  753|     86|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:58): [True: 86, False: 0]
  |  Branch (753:74): [True: 86, False: 0]
  ------------------
  754|     86|                                {
  755|     86|                                    return OpCode::SGTUI;
  756|     86|                                }
  757|      0|                                break;
  758|       |
  759|    578|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 578, False: 3.14k]
  ------------------
  760|    578|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 3.72k]
  ------------------
  761|    578|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 464, False: 114]
  |  Branch (761:37): [True: 464, False: 114]
  |  Branch (761:53): [True: 464, False: 0]
  |  Branch (761:69): [True: 464, False: 0]
  ------------------
  762|    464|                                {
  763|    464|                                    return OpCode::SLEUI;
  764|    464|                                }
  765|    114|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 114, False: 0]
  |  Branch (765:42): [True: 114, False: 0]
  |  Branch (765:58): [True: 114, False: 0]
  |  Branch (765:74): [True: 114, False: 0]
  ------------------
  766|    114|                                {
  767|    114|                                    return OpCode::SLTUI;
  768|    114|                                }
  769|      0|                                break;
  770|       |
  771|    236|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 236, False: 3.48k]
  ------------------
  772|    236|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 3.72k]
  ------------------
  773|    236|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 236, False: 0]
  |  Branch (773:37): [True: 236, False: 0]
  |  Branch (773:53): [True: 236, False: 0]
  |  Branch (773:69): [True: 236, False: 0]
  ------------------
  774|    236|                                {
  775|    236|                                    return OpCode::SNEUI;
  776|    236|                                }
  777|      0|                                break;
  778|       |
  779|    109|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 109, False: 3.61k]
  ------------------
  780|    109|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 3.72k]
  ------------------
  781|    109|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 109, False: 0]
  |  Branch (781:37): [True: 109, False: 0]
  |  Branch (781:53): [True: 109, False: 0]
  |  Branch (781:69): [True: 109, False: 0]
  ------------------
  782|    109|                                {
  783|    109|                                    return OpCode::SUBUI;
  784|    109|                                }
  785|      0|                                break;
  786|  3.72k|                        }
  787|       |
  788|      0|                        break;
  789|  15.1k|                }
  790|       |
  791|  2.65k|                break;
  792|  15.1k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  2.65k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 1.45k, False: 235k]
  ------------------
  796|  1.45k|                char c1 = token[0];
  797|  1.45k|                char c2 = token[1];
  798|  1.45k|                char c3 = token[2];
  799|  1.45k|                char c4 = token[3];
  800|  1.45k|                char c5 = token[4];
  801|  1.45k|                char c6 = token[5];
  802|       |
  803|  1.45k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 733, False: 719]
  |  Branch (803:21): [True: 733, False: 719]
  |  Branch (803:37): [True: 733, False: 0]
  |  Branch (803:53): [True: 733, False: 0]
  ------------------
  804|    733|                {
  805|    733|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 733]
  ------------------
  806|    733|                    {
  807|    347|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 347, False: 386]
  ------------------
  808|    347|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 733]
  ------------------
  809|    347|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 347, False: 0]
  ------------------
  810|    347|                            {
  811|    347|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 80, False: 267]
  ------------------
  812|     80|                                {
  813|     80|                                    return OpCode::CVTD2F;
  814|     80|                                }
  815|    267|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 267, False: 0]
  ------------------
  816|    267|                                {
  817|    267|                                    return OpCode::CVTD2I;
  818|    267|                                }
  819|    347|                            }
  820|      0|                            break;
  821|       |
  822|    186|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 186, False: 547]
  ------------------
  823|    186|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 733]
  ------------------
  824|    186|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 186, False: 0]
  ------------------
  825|    186|                            {
  826|    186|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 88, False: 98]
  ------------------
  827|     88|                                {
  828|     88|                                    return OpCode::CVTF2D;
  829|     88|                                }
  830|     98|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 98, False: 0]
  ------------------
  831|     98|                                {
  832|     98|                                    return OpCode::CVTF2I;
  833|     98|                                }
  834|    186|                            }
  835|      0|                            break;
  836|       |
  837|    200|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 200, False: 533]
  ------------------
  838|    200|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 733]
  ------------------
  839|    200|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 200, False: 0]
  ------------------
  840|    200|                            {
  841|    200|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 100, False: 100]
  ------------------
  842|    100|                                {
  843|    100|                                    return OpCode::CVTI2D;
  844|    100|                                }
  845|    100|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 100, False: 0]
  ------------------
  846|    100|                                {
  847|    100|                                    return OpCode::CVTI2F;
  848|    100|                                }
  849|    200|                            }
  850|    733|                    }
  851|    733|                }
  852|    719|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 177, False: 542]
  |  Branch (852:26): [True: 177, False: 542]
  |  Branch (852:42): [True: 177, False: 0]
  |  Branch (852:58): [True: 177, False: 0]
  |  Branch (852:74): [True: 177, False: 0]
  ------------------
  853|    719|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 177, False: 0]
  |  Branch (853:42): [True: 177, False: 0]
  ------------------
  854|    177|                {
  855|    177|                    return OpCode::MULTUI;
  856|    177|                }
  857|    542|                break;
  858|  1.45k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  3.27k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 3.27k, False: 233k]
  ------------------
  862|  3.27k|                char c1 = token[0];
  863|  3.27k|                char c2 = token[1];
  864|  3.27k|                char c3 = token[2];
  865|  3.27k|                char c4 = token[3];
  866|  3.27k|                char c5 = token[4];
  867|  3.27k|                char c6 = token[5];
  868|  3.27k|                char c7 = token[6];
  869|       |
  870|  3.27k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 3.02k, False: 253]
  |  Branch (870:21): [True: 3.02k, False: 253]
  |  Branch (870:37): [True: 3.02k, False: 0]
  |  Branch (870:53): [True: 3.02k, False: 0]
  ------------------
  871|  3.02k|                {
  872|  3.02k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 1.46k, False: 1.55k]
  |  Branch (872:25): [True: 1.46k, False: 1.55k]
  |  Branch (872:41): [True: 1.46k, False: 0]
  |  Branch (872:54): [True: 1.46k, False: 0]
  |  Branch (872:70): [True: 1.46k, False: 0]
  ------------------
  873|  1.46k|                    {
  874|  1.46k|                        return OpCode::MOVI2FP;
  875|  1.46k|                    }
  876|  1.55k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.55k, False: 0]
  |  Branch (876:30): [True: 1.55k, False: 0]
  |  Branch (876:46): [True: 1.55k, False: 0]
  |  Branch (876:62): [True: 1.55k, False: 0]
  |  Branch (876:75): [True: 1.55k, False: 0]
  ------------------
  877|  1.55k|                    {
  878|  1.55k|                        return OpCode::MOVFP2I;
  879|  1.55k|                    }
  880|  3.02k|                }
  881|    253|                break;
  882|  3.27k|            }
  883|       |
  884|  15.2k|            default: {
  ------------------
  |  Branch (884:13): [True: 15.2k, False: 221k]
  ------------------
  885|  15.2k|                break;
  886|  3.27k|            }
  887|   236k|        }
  888|       |
  889|       |        // None found
  890|  77.9k|        return OpCode::NONE;
  891|   236k|    }
_ZN3dlx3iceEcc:
   17|   391k|    {
   18|   391k|        constexpr const char diff = 'a' - 'A';
   19|   391k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 258k, False: 133k]
  |  Branch (19:28): [True: 49.0k, False: 84.1k]
  ------------------
   20|   391k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   258k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  2.62k|    {
  193|  2.62k|        ParseError err;
  194|       |
  195|  2.62k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  2.62k|        err.m_LineNumber                           = line_number;
  197|  2.62k|        err.m_Column                               = column;
  198|  2.62k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  2.62k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  2.62k|        return err;
  202|  2.62k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  2.62k|    {
  207|  2.62k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  2.62k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  2.62k|                                                         actual_type);
  210|  2.62k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    150|    {
  216|    150|        ParseError err;
  217|       |
  218|    150|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    150|        err.m_LineNumber        = line_number;
  220|    150|        err.m_Column            = column;
  221|    150|        err.invalid_number.text = text;
  222|       |
  223|    150|        return err;
  224|    150|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    150|    {
  228|    150|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    150|                                                token.GetColumn().unsafe(), token.GetText());
  230|    150|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      9|    {
  235|      9|        ParseError err;
  236|       |
  237|      9|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      9|        err.m_LineNumber = line_number;
  239|      9|        err.m_Column     = column;
  240|       |
  241|      9|        return err;
  242|      9|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      9|    {
  247|      9|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      9|                                                                     token.GetColumn().unsafe());
  249|      9|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  75.6k|    {
  255|  75.6k|        ParseError err;
  256|       |
  257|  75.6k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  75.6k|        err.m_LineNumber                   = line_number;
  259|  75.6k|        err.m_Column                       = column;
  260|  75.6k|        err.unexpected_token.expected_type = expected_type;
  261|  75.6k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  75.6k|        return err;
  264|  75.6k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  75.6k|    {
  269|  75.6k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  75.6k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  75.6k|                                                  token.GetType());
  272|  75.6k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  4.00k|    {
  277|  4.00k|        ParseError err;
  278|       |
  279|  4.00k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  4.00k|        err.m_LineNumber                   = line_number;
  281|  4.00k|        err.m_Column                       = column;
  282|  4.00k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  4.00k|        return err;
  285|  4.00k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    775|    {
  289|    775|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    775|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    775|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  50.3k|    {
  296|  50.3k|        ParseError err;
  297|       |
  298|  50.3k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  50.3k|        err.m_LineNumber                       = line_number;
  300|  50.3k|        err.m_Column                           = column;
  301|  50.3k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  50.3k|        return err;
  304|  50.3k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  50.3k|    {
  309|  50.3k|        return ConstructInvalidLabelIdentifierParseError(
  310|  50.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  50.3k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  3.43k|    {
  317|  3.43k|        ParseError err;
  318|       |
  319|  3.43k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  3.43k|        err.m_LineNumber                     = line_number;
  321|  3.43k|        err.m_Column                         = column;
  322|  3.43k|        err.label_already_defined.label_name = label_name;
  323|  3.43k|        err.label_already_defined.at_line    = at_line;
  324|  3.43k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  3.43k|        return err;
  327|  3.43k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  3.43k|    {
  332|  3.43k|        return ConstructLabelAlreadyDefinedParseError(
  333|  3.43k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  3.43k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  3.43k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   104k|    {
  340|   104k|        ParseError err;
  341|       |
  342|   104k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   104k|        err.m_LineNumber = line_number;
  344|   104k|        err.m_Column     = column;
  345|       |
  346|   104k|        return err;
  347|   104k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   104k|    {
  352|   104k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   104k|                                                        token.GetColumn().unsafe());
  354|   104k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  16.5k|    {
  360|  16.5k|        ParseError err;
  361|       |
  362|  16.5k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  16.5k|        err.m_LineNumber               = line_number;
  364|  16.5k|        err.m_Column                   = column;
  365|  16.5k|        err.too_few_arguments.required = required;
  366|  16.5k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  16.5k|        return err;
  369|  16.5k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  16.5k|    {
  374|  16.5k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  16.5k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  16.5k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.07k|    {
  381|  1.07k|        ParseError err;
  382|       |
  383|  1.07k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.07k|        err.m_LineNumber           = line_number;
  385|  1.07k|        err.m_Column               = column;
  386|  1.07k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.07k|        return err;
  389|  1.07k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.07k|    {
  393|  1.07k|        return ConstructEmptyLabelParseError(
  394|  1.07k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.07k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 947, False: 132]
  ------------------
  396|    947|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.07k|                        token.GetText());
  398|  1.07k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    163|    {
  403|    163|        ParseError err;
  404|       |
  405|    163|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    163|        err.m_LineNumber = line_number;
  407|    163|        err.m_Column     = column;
  408|       |
  409|    163|        return err;
  410|    163|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    163|    {
  414|    163|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    163|                                               token.GetColumn().unsafe());
  416|    163|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   258k|    {
   19|   258k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   258k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.82k|    {
  182|  4.82k|        ParsedProgram program;
  183|       |
  184|  4.82k|        program.m_Tokens = tokens;
  185|       |
  186|  4.82k|        phi::boolean line_has_instruction{false};
  187|  4.82k|        phi::usize   label_count{0u};
  188|       |
  189|   549k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 544k, False: 4.82k]
  ------------------
  190|   544k|        {
  191|   544k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   544k|            switch (current_token.GetType())
  196|   544k|            {
  197|       |                // Ignore comments
  198|  74.4k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 74.4k, False: 470k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  74.4k|                    break;
  201|       |
  202|   200k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 200k, False: 344k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   200k|                    line_has_instruction = false;
  205|   200k|                    break;
  206|       |
  207|  60.6k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 60.6k, False: 484k]
  ------------------
  208|  60.6k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 5.08k, False: 55.5k]
  ------------------
  209|  5.08k|                    {
  210|  5.08k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  5.08k|                                current_token, Token::Type::NewLine));
  212|  5.08k|                        break;
  213|  5.08k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  55.5k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 45.0k, False: 10.5k]
  ------------------
  218|  45.0k|                    {
  219|  45.0k|                        program.AddParseError(
  220|  45.0k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  45.0k|                        break;
  222|  45.0k|                    }
  223|       |
  224|  10.5k|                    std::string_view label_name = current_token.GetText();
  225|  10.5k|                    label_name.remove_suffix(1);
  226|       |
  227|  10.5k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 3.23k, False: 7.33k]
  ------------------
  228|  3.23k|                    {
  229|  3.23k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  3.23k|                                current_token.GetLineNumber().unsafe(),
  231|  3.23k|                                current_token.GetColumn().unsafe(), label_name));
  232|  3.23k|                        break;
  233|  3.23k|                    }
  234|       |
  235|  7.33k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 2.14k, False: 5.19k]
  ------------------
  236|  2.14k|                    {
  237|  2.14k|                        program.AddParseError(
  238|  2.14k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  2.14k|                        break;
  240|  2.14k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  5.19k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 3.43k, False: 1.75k]
  ------------------
  244|  3.43k|                    {
  245|       |                        // Find first defintions of label
  246|  3.43k|                        const Token* first_label_definition =
  247|  3.43k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  3.43k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  3.43k|                                    {
  250|  3.43k|                                        std::string_view token_label_name = t.GetText();
  251|  3.43k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  3.43k|                                        if (token_label_name == label_name)
  254|  3.43k|                                        {
  255|  3.43k|                                            return true;
  256|  3.43k|                                        }
  257|  3.43k|                                    }
  258|       |
  259|  3.43k|                                    return false;
  260|  3.43k|                                });
  261|       |
  262|  3.43k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  3.43k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  3.43k|                                current_token, *first_label_definition));
  266|  3.43k|                        break;
  267|  3.43k|                    }
  268|       |
  269|  1.75k|                    program.m_JumpData[label_name] =
  270|  1.75k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  1.75k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  1.75k|                    break;
  277|  5.19k|                }
  278|       |
  279|   149k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 149k, False: 395k]
  ------------------
  280|   149k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 104k, False: 45.2k]
  ------------------
  281|   104k|                    {
  282|   104k|                        program.AddParseError(
  283|   104k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   104k|                        break;
  285|   104k|                    }
  286|       |
  287|  45.2k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  45.2k|                    PHI_ASSERT(current_token.HasHint());
  291|  45.2k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  45.2k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  45.2k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  45.2k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  45.2k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  45.2k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  45.2k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  45.2k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  45.2k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  73.0k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 61.7k, False: 11.3k]
  ------------------
  313|  61.7k|                    {
  314|       |                        // Get next token
  315|  61.7k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 244, False: 61.4k]
  ------------------
  316|    244|                        {
  317|    244|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    244|                                    current_token, number_of_argument_required.unsafe(),
  319|    244|                                    argument_num.unsafe()));
  320|    244|                            break;
  321|    244|                        }
  322|       |
  323|  61.4k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  61.4k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 8.09k, False: 53.3k]
  ------------------
  327|  8.09k|                        {
  328|  8.09k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 163, False: 7.92k]
  ------------------
  329|    163|                            {
  330|    163|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    163|                            }
  332|       |
  333|  8.09k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  8.09k|                            continue;
  336|  8.09k|                        }
  337|       |
  338|  53.3k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 16.3k, False: 37.0k]
  ------------------
  339|  16.3k|                        {
  340|  16.3k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  16.3k|                                    token, number_of_argument_required.unsafe(),
  342|  16.3k|                                    argument_num.unsafe()));
  343|  16.3k|                            break;
  344|  16.3k|                        }
  345|       |
  346|  37.0k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  37.0k|                                parse_instruction_argument(
  348|  37.0k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  37.0k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 17.3k, False: 19.7k]
  ------------------
  350|  17.3k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  17.3k|                            break;
  353|  17.3k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  19.7k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  19.7k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  19.7k|                        argument_num++;
  360|  19.7k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  19.7k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  45.2k|                    program.m_Instructions.emplace_back(instruction);
  368|  45.2k|                    line_has_instruction = true;
  369|  45.2k|                    break;
  370|   149k|                }
  371|       |
  372|  60.0k|                default:
  ------------------
  |  Branch (372:17): [True: 60.0k, False: 484k]
  ------------------
  373|  60.0k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  60.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 40.3k, False: 19.7k]
  ------------------
  375|  40.3k|                    {
  376|  40.3k|                        expected_token_type = Token::Type::NewLine;
  377|  40.3k|                    }
  378|       |
  379|  60.0k|                    program.AddParseError(
  380|  60.0k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  60.0k|                    break;
  382|   544k|            }
  383|   544k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.82k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 205, False: 4.61k]
  ------------------
  387|    205|        {
  388|  2.00k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 1.79k, False: 205]
  ------------------
  389|  1.79k|            {
  390|  1.79k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  1.79k|                const Token& token = *it;
  393|  1.79k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.07k, False: 720]
  ------------------
  394|  1.07k|                {
  395|  1.07k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.07k|                    --label_count;
  397|  1.07k|                }
  398|  1.79k|            }
  399|    205|        }
  400|       |
  401|  4.82k|        return program;
  402|  4.82k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.82k|    {
  406|  4.82k|        TokenStream tokens = Tokenize(source);
  407|  4.82k|        return Parse(tokens);
  408|  4.82k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  37.0k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  37.0k|        switch (token.GetType())
   38|  37.0k|        {
   39|  1.44k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 1.44k, False: 35.6k]
  ------------------
   40|  1.44k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 140, False: 1.30k]
  ------------------
   41|  1.44k|                                          ArgumentType::AddressDisplacement))
   42|    140|                {
   43|    140|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    140|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    140|                    return {};
   47|    140|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.30k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.30k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.30k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 9, False: 1.29k]
  ------------------
   55|      9|                {
   56|      9|                    program.AddParseError(
   57|      9|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      9|                    return {};
   59|      9|                }
   60|       |
   61|  1.29k|                auto         it           = tokens.current_position();
   62|  1.29k|                const Token& first_token  = tokens.consume();
   63|  1.29k|                const Token& second_token = tokens.consume();
   64|  1.29k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.29k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.29k, False: 0]
  ------------------
   67|  1.29k|                {
   68|  1.29k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.29k|                            first_token, Token::Type::OpenBracket));
   70|  1.29k|                    return {};
   71|  1.29k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  11.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 11.5k, False: 25.4k]
  ------------------
   98|  11.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 312, False: 11.2k]
  ------------------
   99|    312|                {
  100|    312|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    312|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    312|                    return {};
  103|    312|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  11.2k|                return ConstructInstructionArgumentRegisterInt(
  109|  11.2k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  11.5k|            }
  111|  5.33k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 5.33k, False: 31.7k]
  ------------------
  112|  5.33k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.05k, False: 4.27k]
  ------------------
  113|  1.05k|                {
  114|  1.05k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.05k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.05k|                    return {};
  117|  1.05k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  4.27k|                return ConstructInstructionArgumentRegisterFloat(
  123|  4.27k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  5.33k|            }
  125|    775|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 775, False: 36.2k]
  ------------------
  126|    775|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    775|                return {};
  129|  5.33k|            }
  130|  5.20k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 5.20k, False: 31.8k]
  ------------------
  131|       |                // Parse as Label
  132|  5.20k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 531, False: 4.67k]
  ------------------
  133|    531|                {
  134|    531|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|    531|                            token, expected_argument_type, ArgumentType::Label));
  136|    531|                    return {};
  137|    531|                }
  138|       |
  139|  4.67k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 4.67k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  4.67k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 3.24k, False: 1.42k]
  ------------------
  146|  3.24k|                {
  147|  3.24k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  3.24k|                    return {};
  149|  3.24k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  1.42k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  4.67k|            }
  155|  3.47k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 3.47k, False: 33.5k]
  ------------------
  156|  3.47k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 582, False: 2.89k]
  ------------------
  157|    582|                {
  158|    582|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    582|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    582|                    return {};
  161|    582|                }
  162|       |
  163|  2.89k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.74k, False: 150]
  ------------------
  164|  2.74k|                {
  165|  2.74k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.74k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.74k|                }
  168|       |
  169|    150|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    150|                return {};
  171|  2.89k|            }
  172|       |
  173|  9.23k|            default:
  ------------------
  |  Branch (173:13): [True: 9.23k, False: 27.8k]
  ------------------
  174|  9.23k|                program.AddParseError(
  175|  9.23k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  9.23k|                return {};
  177|  37.0k|        }
  178|  37.0k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  44.5k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  44.5k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 13.9k, False: 30.6k]
  ------------------
  249|  13.9k|                                    {
  250|  13.9k|                                        std::string_view token_label_name = t.GetText();
  251|  13.9k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  13.9k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 3.43k, False: 10.4k]
  ------------------
  254|  3.43k|                                        {
  255|  3.43k|                                            return true;
  256|  3.43k|                                        }
  257|  13.9k|                                    }
  258|       |
  259|  41.1k|                                    return false;
  260|  44.5k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.78M|    {
   71|  2.78M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.78M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.78M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.78M|        return m_IntRegisters[id_value];
   77|  2.78M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  3.99M|    {
   82|  3.99M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  3.99M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  3.99M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  3.99M|        return m_IntRegisters[id_value];
   88|  3.99M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  2.47M|    {
   92|  2.47M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  2.47M|                                             RegisterAccessType::Signed),
   94|  2.47M|                   "Mismatch for instruction access type");
   95|       |
   96|  2.47M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  2.47M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  2.47M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  2.47M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 1.70M, False: 768k]
  ------------------
  101|  2.47M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 677k, False: 1.03M]
  ------------------
  102|   677k|        {
  103|   677k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   677k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   677k|        }
  105|       |
  106|  2.47M|        return GetIntRegister(id).GetSignedValue();
  107|  2.47M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  1.51M|    {
  111|  1.51M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  1.51M|                                             RegisterAccessType::Unsigned),
  113|  1.51M|                   "Mismatch for instruction access type");
  114|       |
  115|  1.51M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  1.51M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  1.51M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  1.51M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 821k, False: 696k]
  ------------------
  120|  1.51M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 499k, False: 322k]
  ------------------
  121|   499k|        {
  122|   499k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   499k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   499k|        }
  124|       |
  125|  1.51M|        return GetIntRegister(id).GetUnsignedValue();
  126|  1.51M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  1.59M|    {
  130|  1.59M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  1.59M|                                             RegisterAccessType::Signed),
  132|  1.59M|                   "Mismatch for instruction access type");
  133|       |
  134|  1.59M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  1.59M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 391k, False: 1.20M]
  ------------------
  137|   391k|        {
  138|   391k|            return;
  139|   391k|        }
  140|       |
  141|  1.20M|        reg.SetSignedValue(value);
  142|       |
  143|  1.20M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.20M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.20M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.20M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.18M|    {
  151|  1.18M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.18M|                                             RegisterAccessType::Unsigned),
  153|  1.18M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.18M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.18M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 229k, False: 957k]
  ------------------
  158|   229k|        {
  159|   229k|            return;
  160|   229k|        }
  161|       |
  162|   957k|        reg.SetUnsignedValue(value);
  163|       |
  164|   957k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   957k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   957k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   957k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.94M|    {
  172|  1.94M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.94M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.94M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.94M|        return m_FloatRegisters[id_value];
  178|  1.94M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   628k|    {
  183|   628k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   628k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   628k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   628k|        return m_FloatRegisters[id_value];
  189|   628k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   628k|    {
  193|   628k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   628k|                                             RegisterAccessType::Float),
  195|   628k|                   "Mismatch for instruction access type");
  196|       |
  197|   628k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   628k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   628k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   628k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 611k, False: 17.5k]
  ------------------
  202|   628k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 173k, False: 437k]
  ------------------
  203|   173k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   173k|        }
  208|       |
  209|   628k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   628k|        return reg.GetValue();
  212|   628k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   792k|    {
  216|   792k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   792k|                                             RegisterAccessType::Double),
  218|   792k|                   "Mismatch for instruction access type");
  219|       |
  220|   792k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 13, False: 792k]
  ------------------
  221|     13|        {
  222|     13|            Raise(Exception::MisalignedRegisterAccess);
  223|     13|            return {0.0};
  224|     13|        }
  225|       |
  226|   792k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   792k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   792k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   792k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 777k, False: 15.1k]
  ------------------
  231|   792k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 550k, False: 226k]
  ------------------
  232|   550k|        {
  233|   550k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   550k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   550k|        }
  235|       |
  236|   792k|        const FloatRegisterValueType register_value_type_high =
  237|   792k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   792k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 777k, False: 15.1k]
  ------------------
  239|   792k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 131, False: 777k]
  ------------------
  240|    131|        {
  241|    131|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|    131|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|    131|        }
  243|       |
  244|   792k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   792k|        const FloatRegister& second_reg =
  246|   792k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   792k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   792k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   792k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   792k|        const std::uint32_t first_value_bits =
  255|   792k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   792k|        const std::uint32_t second_value_bits =
  257|   792k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   792k|        std::uint64_t final_value_bits =
  260|   792k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   792k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   792k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   792k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   187k|    {
  269|   187k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   187k|                                             RegisterAccessType::Float),
  271|   187k|                   "Mismatch for instruction access type");
  272|       |
  273|   187k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   187k|        reg.SetValue(value);
  276|       |
  277|   187k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   187k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   187k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   187k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|  86.9k|    {
  285|  86.9k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|  86.9k|                                             RegisterAccessType::Double),
  287|  86.9k|                   "Mismatch for instruction access type");
  288|       |
  289|  86.9k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 86.9k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|  86.9k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|  86.9k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|  86.9k|        double              value_raw  = value.unsafe();
  299|  86.9k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|  86.9k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|  86.9k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|  86.9k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|  86.9k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|  86.9k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|  86.9k|        FloatRegister& second_reg =
  309|  86.9k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|  86.9k|        first_reg.SetValue(first_value);
  312|  86.9k|        second_reg.SetValue(second_value);
  313|       |
  314|  86.9k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|  86.9k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|  86.9k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|  86.9k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|  86.9k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   514k|    {
  323|   514k|        return m_FPSR;
  324|   514k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   867k|    {
  328|   867k|        return m_FPSR;
  329|   867k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   867k|    {
  333|   867k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   867k|        return status_reg.Get();
  336|   867k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   514k|    {
  340|   514k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   514k|        status_reg.SetStatus(value);
  343|   514k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  4.87M|    {
  347|  4.87M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  4.87M|        inst.Execute(*this);
  350|  4.87M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  4.82k|    {
  354|  4.82k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 3.80k, False: 1.02k]
  ------------------
  355|  3.80k|        {
  356|  3.80k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.80k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  3.80k|            return false;
  358|  3.80k|        }
  359|       |
  360|  1.02k|        m_CurrentProgram = &program;
  361|       |
  362|  1.02k|        m_ProgramCounter               = 0u;
  363|  1.02k|        m_Halted                       = false;
  364|  1.02k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  1.02k|        m_LastRaisedException          = Exception::None;
  366|  1.02k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  1.02k|        return true;
  369|  4.82k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.43M|    {
  374|  1.43M|        return m_CurrentProgram;
  375|  1.43M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  4.87M|    {
  379|       |        // No nothing when no program is loaded
  380|  4.87M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 4.87M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  4.87M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 110, False: 4.87M]
  ------------------
  387|    110|        {
  388|    110|            m_Halted                       = true;
  389|    110|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|    110|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  4.87M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 110, False: 4.87M]
  ------------------
  394|    110|        {
  395|    110|            return;
  396|    110|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  4.87M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  4.87M|        const auto& current_instruction =
  403|  4.87M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  4.87M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  4.87M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 91, False: 4.87M]
  ------------------
  410|     91|        {
  411|     91|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|     91|            return;
  413|     91|        }
  414|       |
  415|  4.87M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  4.87M|        ++m_CurrentStepCount;
  418|       |
  419|  4.87M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 821, False: 4.87M]
  |  Branch (419:14): [True: 4.87M, False: 0]
  |  Branch (419:42): [True: 487, False: 4.87M]
  ------------------
  420|  4.87M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 334, False: 4.87M]
  ------------------
  421|    821|        {
  422|    821|            m_Halted                       = true;
  423|    821|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|    821|        }
  425|  4.87M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  1.02k|    {
  429|       |        // Do nothing when no program is loaded
  430|  1.02k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 1.02k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  1.02k|        m_ProgramCounter               = 0u;
  436|  1.02k|        m_Halted                       = false;
  437|  1.02k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  1.02k|        m_LastRaisedException          = Exception::None;
  439|  1.02k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  4.87M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 4.87M, False: 1.02k]
  ------------------
  442|  4.87M|        {
  443|  4.87M|            ExecuteStep();
  444|  4.87M|        }
  445|       |
  446|  1.02k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  1.02k|                   "RegisterAccessType was not reset correctly");
  448|  1.02k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  4.82k|    {
  465|  4.82k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 154k, False: 4.82k]
  ------------------
  466|   154k|        {
  467|   154k|            reg.SetSignedValue(0);
  468|   154k|        }
  469|       |
  470|  4.82k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 154k, False: 4.82k]
  ------------------
  471|   154k|        {
  472|   154k|            reg.SetValue(0.0f);
  473|   154k|        }
  474|       |
  475|  4.82k|        m_FPSR.SetStatus(false);
  476|  4.82k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  4.82k|    {
  480|  4.82k|        m_MemoryBlock.Clear();
  481|  4.82k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   162k|    {
  489|   162k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   162k|        m_LastRaisedException = exception;
  492|       |
  493|   162k|        switch (exception)
  494|   162k|        {
  495|      7|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 7, False: 162k]
  ------------------
  496|      7|                m_Halted = true;
  497|      7|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      7|                return;
  499|  46.4k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 46.4k, False: 115k]
  ------------------
  500|  46.4k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  46.4k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  46.4k|                return;
  502|  48.3k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 48.3k, False: 113k]
  ------------------
  503|  48.3k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  48.3k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  48.3k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 162k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      8|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 8, False: 162k]
  ------------------
  510|      8|                m_Halted = true;
  511|      8|                return;
  512|     45|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 45, False: 161k]
  ------------------
  513|     45|                m_Halted = true;
  514|     45|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|     45|                return;
  516|  67.1k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 67.1k, False: 94.8k]
  ------------------
  517|  67.1k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  67.1k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|  67.1k|                return;
  519|     17|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 17, False: 162k]
  ------------------
  520|     17|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     17|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     17|                m_Halted = true;
  522|     17|                return;
  523|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 15, False: 162k]
  ------------------
  524|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     15|                m_Halted = true;
  526|     15|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 162k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   162k|#endif
  532|   162k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|      8|    {
  559|      8|        return m_MemoryBlock;
  560|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|   440k|    {
  574|   440k|        return m_NextProgramCounter;
  575|   440k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.43M|    {
  579|  1.43M|        m_NextProgramCounter = new_npc;
  580|  1.43M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  8.47M|    {
   37|  8.47M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  8.47M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  8.47M|        switch (expected_access)
   41|  8.47M|        {
   42|  1.93M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.93M, False: 6.54M]
  ------------------
   43|  1.93M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 8.47M]
  ------------------
   45|      0|                return false;
   46|   107k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 107k, False: 8.36M]
  ------------------
   47|   107k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 53.7k, False: 53.7k]
  |  Branch (47:63): [True: 53.7k, False: 0]
  ------------------
   48|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 0, False: 8.47M]
  ------------------
   49|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 0, False: 0]
  ------------------
   51|  62.0k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 62.0k, False: 8.41M]
  ------------------
   52|  62.0k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 31.0k, False: 31.0k]
  |  Branch (52:63): [True: 31.0k, False: 0]
  ------------------
   53|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 0, False: 8.47M]
  ------------------
   54|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 0, False: 0]
  |  Branch (54:64): [True: 0, False: 0]
  ------------------
   55|  6.37M|            default:
  ------------------
  |  Branch (55:13): [True: 6.37M, False: 2.10M]
  ------------------
   56|  6.37M|                return expected_access == access;
   57|  8.47M|        }
   58|  8.47M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   278k|    {
   14|   278k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 41.4k, False: 236k]
  ------------------
   15|  41.4k|        {
   16|  41.4k|            char first_char = token[0];
   17|  41.4k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 19.7k, False: 21.6k]
  |  Branch (17:38): [True: 1.79k, False: 19.8k]
  ------------------
   18|  21.5k|            {
   19|  21.5k|                char second_char = token[1];
   20|  21.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 20.1k, False: 1.45k]
  |  Branch (20:43): [True: 20.0k, False: 89]
  ------------------
   21|  20.0k|                {
   22|  20.0k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  20.0k|                }
   24|  21.5k|            }
   25|  41.4k|        }
   26|   236k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 122k, False: 114k]
  ------------------
   27|   122k|        {
   28|   122k|            char first_char = token[0];
   29|   122k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 8.26k, False: 113k]
  |  Branch (29:38): [True: 3.00k, False: 110k]
  ------------------
   30|  11.2k|            {
   31|  11.2k|                char second_char = token[1];
   32|  11.2k|                char third_char  = token[2];
   33|       |
   34|  11.2k|                switch (second_char)
   35|  11.2k|                {
   36|  4.29k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 4.29k, False: 6.97k]
  ------------------
   37|  4.29k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 3.59k, False: 701]
  |  Branch (37:50): [True: 3.46k, False: 131]
  ------------------
   38|  3.46k|                        {
   39|  3.46k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  3.46k|                        }
   41|    832|                        break;
   42|  4.29k|                    }
   43|  3.39k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 3.39k, False: 7.87k]
  ------------------
   44|  3.39k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 2.81k, False: 585]
  |  Branch (44:50): [True: 2.67k, False: 134]
  ------------------
   45|  2.67k|                        {
   46|  2.67k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  2.67k|                        }
   48|    719|                        break;
   49|  3.39k|                    }
   50|  1.98k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.98k, False: 9.28k]
  ------------------
   51|  1.98k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.58k, False: 400]
  |  Branch (51:50): [True: 268, False: 132]
  ------------------
   52|  1.85k|                        {
   53|  1.85k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.85k|                        }
   55|    132|                        break;
   56|  1.98k|                    }
   57|  1.59k|                    default: {
  ------------------
  |  Branch (57:21): [True: 1.59k, False: 9.67k]
  ------------------
   58|  1.59k|                        break;
   59|  1.98k|                    }
   60|  11.2k|                }
   61|  11.2k|            }
   62|   122k|        }
   63|       |
   64|   250k|        return IntRegisterID::None;
   65|   278k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   250k|    {
   69|   250k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 21.3k, False: 228k]
  ------------------
   70|  21.3k|        {
   71|  21.3k|            char first_char = token[0];
   72|  21.3k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 5.36k, False: 16.0k]
  |  Branch (72:38): [True: 614, False: 15.4k]
  ------------------
   73|  5.97k|            {
   74|  5.97k|                char second_char = token[1];
   75|  5.97k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 5.46k, False: 515]
  |  Branch (75:43): [True: 5.39k, False: 71]
  ------------------
   76|  5.39k|                {
   77|  5.39k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  5.39k|                }
   79|  5.97k|            }
   80|  21.3k|        }
   81|   228k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 114k, False: 114k]
  ------------------
   82|   114k|        {
   83|   114k|            char first_char = token[0];
   84|   114k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 8.31k, False: 105k]
  |  Branch (84:38): [True: 2.54k, False: 103k]
  ------------------
   85|  10.8k|            {
   86|  10.8k|                char second_char = token[1];
   87|  10.8k|                char third_char  = token[2];
   88|       |
   89|  10.8k|                switch (second_char)
   90|  10.8k|                {
   91|  2.81k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.81k, False: 8.04k]
  ------------------
   92|  2.81k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.67k, False: 1.14k]
  |  Branch (92:50): [True: 1.57k, False: 98]
  ------------------
   93|  1.57k|                        {
   94|  1.57k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.57k|                        }
   96|  1.23k|                        break;
   97|  2.81k|                    }
   98|  6.52k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 6.52k, False: 4.33k]
  ------------------
   99|  6.52k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 6.44k, False: 78]
  |  Branch (99:50): [True: 6.38k, False: 66]
  ------------------
  100|  6.38k|                        {
  101|  6.38k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  6.38k|                        }
  103|    144|                        break;
  104|  6.52k|                    }
  105|    256|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 256, False: 10.6k]
  ------------------
  106|    256|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 118, False: 138]
  |  Branch (106:50): [True: 70, False: 68]
  ------------------
  107|    188|                        {
  108|    188|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    188|                        }
  110|     68|                        break;
  111|    256|                    }
  112|  1.26k|                    default: {
  ------------------
  |  Branch (112:21): [True: 1.26k, False: 9.59k]
  ------------------
  113|  1.26k|                        break;
  114|    256|                    }
  115|  10.8k|                }
  116|  10.8k|            }
  117|   114k|        }
  118|       |
  119|   236k|        return FloatRegisterID::None;
  120|   250k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   278k|    {
  124|   278k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 74.2k, False: 204k]
  ------------------
  125|  74.2k|        {
  126|  74.2k|            char c1 = token[0];
  127|  74.2k|            char c2 = token[1];
  128|  74.2k|            char c3 = token[2];
  129|  74.2k|            char c4 = token[3];
  130|       |
  131|  74.2k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 4.07k, False: 70.1k]
  |  Branch (131:34): [True: 342, False: 69.8k]
  |  Branch (131:49): [True: 4.12k, False: 289]
  |  Branch (131:62): [True: 148, False: 141]
  ------------------
  132|  74.2k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 4.01k, False: 265]
  |  Branch (132:34): [True: 194, False: 71]
  |  Branch (132:49): [True: 4.01k, False: 194]
  |  Branch (132:62): [True: 0, False: 194]
  ------------------
  133|  74.2k|        }
  134|       |
  135|   204k|        return false;
  136|   278k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   403k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   206k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   819k|    {
   41|   819k|        return m_Type;
   42|   819k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   307k|    {
   51|   307k|        return m_LineNumber;
   52|   307k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   261k|    {
   56|   261k|        return m_Column;
   57|   261k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   148k|    {
   66|   148k|        return m_Text;
   67|   148k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  49.4k|    {
   80|  49.4k|        return m_HasHint;
   81|  49.4k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  64.8k|    {
   85|  64.8k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  64.8k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  64.8k|                   m_Type == Type::ImmediateInteger);
   88|  64.8k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  64.8k|        return m_Hint;
   91|  64.8k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.82k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.82k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.82k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.30k|    {
   51|  1.30k|        auto it = m_Iterator;
   52|  5.18k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 3.89k, False: 1.29k]
  ------------------
   53|  3.89k|        {
   54|  3.89k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 9, False: 3.88k]
  ------------------
   55|      9|            {
   56|      9|                return false;
   57|      9|            }
   58|  3.89k|        }
   59|       |
   60|  1.29k|        return true;
   61|  1.30k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   611k|    {
   65|   611k|        return m_Iterator != m_Tokens.end();
   66|   611k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   610k|    {
   70|   610k|        return m_Iterator == m_Tokens.end();
   71|   610k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   610k|    {
   85|   610k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   610k|        return *m_Iterator++;
   91|   610k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.29k|    {
  164|  1.29k|        return m_Iterator;
  165|  1.29k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    205|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    205|        return m_Tokens.rbegin();
  224|    205|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  1.79k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  1.79k|        return m_Tokens.rend();
  233|  1.79k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.82k|    {
   63|  4.82k|        TokenStream tokens;
   64|       |
   65|  4.82k|        std::string_view current_token;
   66|       |
   67|  4.82k|        phi::u64 current_line_number{1u};
   68|  4.82k|        phi::u64 current_column{1u};
   69|  4.82k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.82k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.60M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.59M, False: 4.82k]
  ------------------
   74|  1.59M|        {
   75|  1.59M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.59M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 220k, False: 1.37M]
  ------------------
   78|   220k|            {
   79|   220k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 77.4k, False: 142k]
  ------------------
   80|  77.4k|                {
   81|       |                    // Skip empty lines
   82|  77.4k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  77.4k|                                        current_line_number, current_column);
   84|       |
   85|  77.4k|                    parsing_comment = false;
   86|  77.4k|                    current_line_number += 1u;
   87|  77.4k|                    current_column = 1u;
   88|  77.4k|                    continue;
   89|  77.4k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   142k|                tokens.emplace_back(
   93|   142k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   142k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   142k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   142k|                                    current_line_number, current_column);
   98|       |
   99|   142k|                current_token   = std::string_view{};
  100|   142k|                parsing_comment = false;
  101|   142k|                current_line_number += 1u;
  102|   142k|                current_column = 0u;
  103|   142k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.37M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.28k, False: 1.37M]
  |  Branch (105:34): [True: 76.7k, False: 1.30M]
  ------------------
  106|  78.0k|            {
  107|  78.0k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 73.9k, False: 4.11k]
  ------------------
  108|  73.9k|                {
  109|  73.9k|                    token_begin = i;
  110|  73.9k|                }
  111|  4.11k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 3.12k, False: 996]
  ------------------
  112|  3.12k|                {
  113|  3.12k|                    tokens.emplace_back(ParseToken(
  114|  3.12k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  3.12k|                            current_line_number, current_column - current_token.length()));
  116|  3.12k|                    token_begin   = i;
  117|  3.12k|                    current_token = std::string_view{};
  118|  3.12k|                }
  119|       |
  120|  78.0k|                parsing_comment = true;
  121|  78.0k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  78.0k|            }
  123|  1.30M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 143k, False: 1.15M]
  ------------------
  124|   143k|            {
  125|       |                // simply append the character
  126|   143k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   143k|            }
  128|  1.15M|            else
  129|  1.15M|            {
  130|       |                // Not parsing a comment
  131|  1.15M|                switch (c)
  132|  1.15M|                {
  133|   162k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 162k, False: 994k]
  ------------------
  134|   164k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 1.64k, False: 1.15M]
  ------------------
  135|   166k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 2.72k, False: 1.15M]
  ------------------
  136|   166k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 936, False: 165k]
  ------------------
  137|    936|                        {
  138|    936|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    936|                            continue;
  141|    936|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   165k|                        tokens.emplace_back(ParseToken(
  145|   165k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   165k|                                current_line_number, current_column - current_token.length()));
  147|   165k|                        current_token = std::string_view{};
  148|   165k|                        break;
  149|  15.1k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 15.1k, False: 1.14M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  15.1k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 12.5k, False: 2.58k]
  ------------------
  152|  12.5k|                        {
  153|  12.5k|                            current_token =
  154|  12.5k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  12.5k|                            tokens.emplace_back(ParseToken(
  156|  12.5k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  12.5k|                                    current_line_number,
  158|  12.5k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  12.5k|                            current_token = std::string_view{};
  161|  12.5k|                        }
  162|  2.58k|                        else
  163|  2.58k|                        {
  164|       |                            // Orphan colon
  165|  2.58k|                            token_begin = i;
  166|       |
  167|  2.58k|                            tokens.emplace_back(Token::Type::Colon,
  168|  2.58k|                                                source.substr(token_begin.unsafe(), 1),
  169|  2.58k|                                                current_line_number, current_column);
  170|  2.58k|                        }
  171|  15.1k|                        break;
  172|  27.6k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 27.6k, False: 1.12M]
  ------------------
  173|  30.9k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 3.31k, False: 1.15M]
  ------------------
  174|  32.5k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 1.58k, False: 1.15M]
  ------------------
  175|  32.5k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 28.4k, False: 4.07k]
  ------------------
  176|  28.4k|                        {
  177|  28.4k|                            tokens.emplace_back(ParseToken(
  178|  28.4k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  28.4k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  28.4k|                            current_token = std::string_view{};
  182|  28.4k|                        }
  183|       |
  184|  32.5k|                        Token::Type type;
  185|  32.5k|                        switch (c)
  186|  32.5k|                        {
  187|  27.6k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 27.6k, False: 4.90k]
  ------------------
  188|  27.6k|                                type = Token::Type::Comma;
  189|  27.6k|                                break;
  190|  3.31k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 3.31k, False: 29.2k]
  ------------------
  191|  3.31k|                                type = Token::Type::OpenBracket;
  192|  3.31k|                                break;
  193|  1.58k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 1.58k, False: 30.9k]
  ------------------
  194|  1.58k|                                type = Token::Type::ClosingBracket;
  195|  1.58k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 32.5k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  32.5k|#endif
  201|  32.5k|                        }
  202|       |
  203|  32.5k|                        token_begin = i;
  204|       |
  205|  32.5k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  32.5k|                                            current_line_number, current_column);
  207|  32.5k|                        break;
  208|       |
  209|   942k|                    default:
  ------------------
  |  Branch (209:21): [True: 942k, False: 214k]
  ------------------
  210|   942k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 277k, False: 664k]
  ------------------
  211|   277k|                        {
  212|   277k|                            token_begin = i;
  213|   277k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   942k|                        current_token =
  217|   942k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  1.15M|                }
  219|  1.15M|            }
  220|       |
  221|  1.51M|            current_column += 1u;
  222|  1.51M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.82k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.16k, False: 2.65k]
  ------------------
  226|  2.16k|        {
  227|  2.16k|            tokens.emplace_back(
  228|  2.16k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.16k|                               current_line_number, current_column - current_token.length()));
  230|  2.16k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.82k|        tokens.finalize();
  234|       |
  235|  4.82k|        return tokens;
  236|  4.82k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   354k|    {
   11|   354k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 4.99k, False: 349k]
  |  Branch (11:35): [True: 4.91k, False: 83]
  ------------------
   12|  4.91k|        {
   13|  4.91k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  4.91k|            if (number)
  ------------------
  |  Branch (15:17): [True: 3.39k, False: 1.51k]
  ------------------
   16|  3.39k|            {
   17|  3.39k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  3.39k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  3.39k|            }
   20|       |
   21|  1.51k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  4.91k|        }
   23|       |
   24|   349k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 386, False: 349k]
  |  Branch (24:35): [True: 76.6k, False: 272k]
  ------------------
   25|  77.0k|        {
   26|  77.0k|            return {Token::Type::Comment, token, line_number, column};
   27|  77.0k|        }
   28|       |
   29|   272k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 5.95k, False: 266k]
  ------------------
   30|  5.95k|        {
   31|  5.95k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  5.95k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  5.95k|        }
   34|       |
   35|   266k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 4.01k, False: 262k]
  ------------------
   36|  4.01k|        {
   37|  4.01k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  4.01k|        }
   39|       |
   40|   262k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 27.7k, False: 235k]
  ------------------
   41|  27.7k|        {
   42|  27.7k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  27.7k|                    static_cast<std::uint32_t>(id)};
   44|  27.7k|        }
   45|       |
   46|   235k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 13.4k, False: 221k]
  ------------------
   47|  13.4k|        {
   48|  13.4k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  13.4k|                    static_cast<std::uint32_t>(id)};
   50|  13.4k|        }
   51|       |
   52|   221k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 155k, False: 65.9k]
  ------------------
   53|   155k|        {
   54|   155k|            return {Token::Type::OpCode, token, line_number, column,
   55|   155k|                    static_cast<std::uint32_t>(opcode)};
   56|   155k|        }
   57|       |
   58|  65.9k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   221k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  4.82k|    {
   53|       |        // Constants
   54|  4.82k|        constexpr std::uint8_t number_of_opcodes =
   55|  4.82k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  4.82k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  4.82k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  4.82k|        std::string ret;
   60|       |
   61|   379k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 375k, False: 4.78k]
  ------------------
   62|   375k|        {
   63|   375k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   375k|            switch (current_value)
   66|   375k|            {
   67|       |                // OpCode
   68|   143k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 143k, False: 231k]
  ------------------
   69|       |                    // Has one more value
   70|   143k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 143k, False: 117]
  ------------------
   71|   143k|                    {
   72|   143k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   143k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   143k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 17, False: 143k]
  ------------------
   77|     17|                        {
   78|     17|                            return detail::ErrorString;
   79|     17|                        }
   80|   143k|                    }
   81|   143k|                    break;
   82|   143k|                }
   83|       |
   84|       |                // Int Register
   85|   143k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 30.1k, False: 345k]
  ------------------
   86|       |                    // Has one more value
   87|  30.1k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 30.1k, False: 16]
  ------------------
   88|  30.1k|                    {
   89|  30.1k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  30.1k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  30.1k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 2, False: 30.1k]
  ------------------
   93|      2|                        {
   94|      2|                            return detail::ErrorString;
   95|      2|                        }
   96|  30.1k|                    }
   97|  30.1k|                    break;
   98|  30.1k|                }
   99|       |
  100|       |                // Float register
  101|  30.1k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 14.5k, False: 360k]
  ------------------
  102|       |                    // Has one more value
  103|  14.5k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 14.5k, False: 14]
  ------------------
  104|  14.5k|                    {
  105|  14.5k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  14.5k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  14.5k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 14.5k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  14.5k|                    }
  113|  14.5k|                    break;
  114|  14.5k|                }
  115|       |
  116|       |                // Floating point status register
  117|  14.5k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 8.67k, False: 366k]
  ------------------
  118|  8.67k|                    ret += "FPSR";
  119|  8.67k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 8.67k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  8.67k|                    break;
  125|  8.67k|                }
  126|       |
  127|       |                // Immediate integer
  128|  8.67k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 6.78k, False: 368k]
  ------------------
  129|  6.78k|                    ret += "#";
  130|  6.78k|                    [[fallthrough]];
  131|  6.78k|                }
  132|       |
  133|       |                // Integer literal
  134|  20.7k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 13.9k, False: 361k]
  ------------------
  135|  20.7k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  20.7k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 20.6k, False: 52]
  ------------------
  138|  20.6k|                    {
  139|  20.6k|                        std::int16_t value = 0;
  140|       |
  141|  61.9k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 41.2k, False: 20.6k]
  ------------------
  142|  41.2k|                        {
  143|  41.2k|                            value <<= 8;
  144|  41.2k|                            value &= data[index++];
  145|  41.2k|                        }
  146|       |
  147|  20.6k|                        ret += std::to_string(value);
  148|  20.6k|                    }
  149|  20.7k|                    break;
  150|  6.78k|                }
  151|       |
  152|       |                // Label
  153|  8.55k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 8.55k, False: 366k]
  ------------------
  154|  8.55k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  8.55k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 8.54k, False: 5]
  ------------------
  157|  8.54k|                    {
  158|  8.54k|                        std::string label_name = "lbl_";
  159|       |
  160|  51.0k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 42.4k, False: 8.54k]
  ------------------
  161|  42.4k|                        {
  162|  42.4k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  42.4k|                            label_name += c;
  165|  42.4k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  8.54k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 8.14k, False: 407]
  |  Branch (168:45): [True: 6.75k, False: 1.38k]
  ------------------
  169|  6.75k|                        {
  170|  6.75k|                            label_name += ':';
  171|  6.75k|                            ret += label_name;
  172|  6.75k|                        }
  173|  1.79k|                        else
  174|  1.79k|                        {
  175|  1.79k|                            ret += label_name;
  176|  1.79k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 1.79k]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|  1.79k|                        }
  181|  8.54k|                    }
  182|  8.55k|                    break;
  183|  8.55k|                }
  184|       |
  185|       |                // Newline
  186|  72.0k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 72.0k, False: 303k]
  ------------------
  187|  72.0k|                    ret += '\n';
  188|  72.0k|                    break;
  189|  8.55k|                }
  190|       |
  191|       |                // Comment
  192|  77.1k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 77.1k, False: 297k]
  ------------------
  193|  77.1k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  77.1k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 77.1k, False: 18]
  ------------------
  196|  77.1k|                    {
  197|  77.1k|                        std::string comment = "; ";
  198|       |
  199|   461k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 383k, False: 77.1k]
  ------------------
  200|   383k|                        {
  201|   383k|                            comment += static_cast<char>(data[index++]);
  202|   383k|                        }
  203|       |
  204|  77.1k|                        ret += comment + '\n';
  205|  77.1k|                    }
  206|  77.1k|                    break;
  207|  8.55k|                }
  208|       |
  209|       |                // Ignore
  210|     20|                default:
  ------------------
  |  Branch (210:17): [True: 20, False: 375k]
  ------------------
  211|     20|                    return detail::ErrorString;
  212|   375k|            }
  213|   375k|        }
  214|       |
  215|  4.78k|        return ret;
  216|  4.82k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   198k|        {
   20|   198k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 196k, False: 1.97k]
  ------------------
   21|   196k|            {
   22|   196k|                std::uint8_t val = data[index++];
   23|   196k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 164k, False: 32.2k]
  ------------------
   24|   164k|                {
   25|   164k|                    text += ' ';
   26|   164k|                }
   27|  32.2k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 32.2k, False: 23]
  ------------------
   28|  32.2k|                {
   29|  32.2k|                    text += ',';
   30|  32.2k|                }
   31|     23|                else
   32|     23|                {
   33|     23|                    return false;
   34|     23|                }
   35|   196k|            }
   36|       |
   37|   198k|            return true;
   38|   198k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  42.4k|        {
   42|  42.4k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 32.2k, False: 10.2k]
  ------------------
   43|  32.2k|            {
   44|  32.2k|                return '_';
   45|  32.2k|            }
   46|       |
   47|  10.2k|            return c;
   48|  42.4k|        }

LLVMFuzzerTestOneInput:
   12|  4.82k|{
   13|  4.82k|    static dlx::Processor processor;
   14|       |
   15|  4.82k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  4.82k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  4.82k|    processor.ClearRegisters();
   22|  4.82k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  4.82k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.02k, False: 3.80k]
  ------------------
   26|  1.02k|    {
   27|  1.02k|        processor.ExecuteCurrentProgram();
   28|  1.02k|    }
   29|       |
   30|  4.82k|    return 0;
   31|  4.82k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   535k|        {
  169|   535k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   535k|            switch (index.unsafe())
  172|   535k|            {
  173|   222k|                case 0:
  ------------------
  |  Branch (173:17): [True: 222k, False: 312k]
  ------------------
  174|   222k|                    return m_Arg1Type;
  175|       |
  176|   160k|                case 1:
  ------------------
  |  Branch (176:17): [True: 160k, False: 375k]
  ------------------
  177|   160k|                    return m_Arg2Type;
  178|       |
  179|   152k|                case 2:
  ------------------
  |  Branch (179:17): [True: 152k, False: 382k]
  ------------------
  180|   152k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 535k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   535k|#endif
  187|   535k|            }
  188|   535k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   137k|        {
  195|   137k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   137k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 131k, False: 6.17k]
  ------------------
  199|   131k|            {
  200|   131k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   131k|            }
  202|   137k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 104k, False: 33.4k]
  ------------------
  203|   104k|            {
  204|   104k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   104k|            }
  206|   137k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 74.0k, False: 63.3k]
  ------------------
  207|  74.0k|            {
  208|  74.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  74.0k|            }
  210|       |
  211|   137k|            return number_of_argument_required;
  212|   137k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  9.44M|        {
  216|  9.44M|            return m_RegisterAccessType;
  217|  9.44M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   137k|        {
  221|   137k|            return m_Executor;
  222|   137k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  28.4M|    {
   38|  28.4M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  28.4M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  28.4M|                                         static_cast<underlying_t>(rhs));
   42|  28.4M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  28.4M|    {
   55|  28.4M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  28.4M|        return static_cast<underlying_t>(type & test) != 0;
   58|  28.4M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   430k|    {
  204|   430k|        switch (value)
  205|   430k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   174k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   174k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 174k, False: 255k]
  |  |  |  |  ------------------
  |  |  |  |  208|   174k|        return #name;
  |  |  ------------------
  |  |   16|   174k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  14.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 14.4k, False: 416k]
  |  |  |  |  ------------------
  |  |  |  |  208|  14.4k|        return #name;
  |  |  ------------------
  |  |   17|  14.4k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.12k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.12k|        return #name;
  |  |  ------------------
  |  |   18|  7.22k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  7.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.22k, False: 423k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.22k|        return #name;
  |  |  ------------------
  |  |   19|  7.22k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.32k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.32k|        return #name;
  |  |  ------------------
  |  |   20|  3.32k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.99k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.99k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.99k|        return #name;
  |  |  ------------------
  |  |   21|  2.99k|                                                                                                   \
  |  |   22|  2.99k|    /* Sub */                                                                                      \
  |  |   23|  4.27k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.27k, False: 426k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.27k|        return #name;
  |  |  ------------------
  |  |   24|  4.27k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.95k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.95k|        return #name;
  |  |  ------------------
  |  |   25|  5.16k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.16k, False: 425k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.16k|        return #name;
  |  |  ------------------
  |  |   26|  5.16k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    178|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 178, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    178|        return #name;
  |  |  ------------------
  |  |   27|  3.04k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.04k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.04k|        return #name;
  |  |  ------------------
  |  |   28|  3.04k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.89k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.89k|        return #name;
  |  |  ------------------
  |  |   29|  1.89k|                                                                                                   \
  |  |   30|  1.89k|    /* Multiplication */                                                                           \
  |  |   31|  2.09k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.09k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.09k|        return #name;
  |  |  ------------------
  |  |   32|  2.35k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.35k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.35k|        return #name;
  |  |  ------------------
  |  |   33|  2.58k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.58k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.58k|        return #name;
  |  |  ------------------
  |  |   34|  2.58k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.48k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.48k|        return #name;
  |  |  ------------------
  |  |   35|  3.46k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.46k, False: 426k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.46k|        return #name;
  |  |  ------------------
  |  |   36|  3.46k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.42k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.42k|        return #name;
  |  |  ------------------
  |  |   37|  1.42k|                                                                                                   \
  |  |   38|  1.42k|    /* Division */                                                                                 \
  |  |   39|  1.42k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 114, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    114|        return #name;
  |  |  ------------------
  |  |   40|    114|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 82, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     82|        return #name;
  |  |  ------------------
  |  |   41|    207|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    207|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 207, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    207|        return #name;
  |  |  ------------------
  |  |   42|  2.88k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.88k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.88k|        return #name;
  |  |  ------------------
  |  |   43|  2.88k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.01k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.01k|        return #name;
  |  |  ------------------
  |  |   44|  1.01k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    432|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 432, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    432|        return #name;
  |  |  ------------------
  |  |   45|    432|                                                                                                   \
  |  |   46|    432|    /* Shift left (logical) */                                                                     \
  |  |   47|    946|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    946|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 946, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    946|        return #name;
  |  |  ------------------
  |  |   48|    946|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    257|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 257, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    257|        return #name;
  |  |  ------------------
  |  |   49|    257|                                                                                                   \
  |  |   50|    257|    /* Shift right (logical) */                                                                    \
  |  |   51|  9.57k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  9.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.57k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.57k|        return #name;
  |  |  ------------------
  |  |   52|  9.57k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  9.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.10k, False: 421k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.10k|        return #name;
  |  |  ------------------
  |  |   53|  9.10k|                                                                                                   \
  |  |   54|  9.10k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  9.10k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.78k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.78k|        return #name;
  |  |  ------------------
  |  |   56|  1.78k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    140|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 140, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    140|        return #name;
  |  |  ------------------
  |  |   57|    140|                                                                                                   \
  |  |   58|    140|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    222|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    222|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 222, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    222|        return #name;
  |  |  ------------------
  |  |   60|  2.01k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.01k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.01k|        return #name;
  |  |  ------------------
  |  |   61|  2.01k|                                                                                                   \
  |  |   62|  2.01k|    /* Logic */                                                                                    \
  |  |   63|  2.01k|                                                                                                   \
  |  |   64|  2.01k|    /* And */                                                                                      \
  |  |   65|  2.01k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.60k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.60k|        return #name;
  |  |  ------------------
  |  |   66|  5.59k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.59k, False: 424k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.59k|        return #name;
  |  |  ------------------
  |  |   67|  5.59k|                                                                                                   \
  |  |   68|  5.59k|    /* Or */                                                                                       \
  |  |   69|  5.59k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |   70|    154|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    154|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 154, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    154|        return #name;
  |  |  ------------------
  |  |   71|    154|                                                                                                   \
  |  |   72|    154|    /* XOR */                                                                                      \
  |  |   73|  3.21k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.21k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.21k|        return #name;
  |  |  ------------------
  |  |   74|  3.21k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.49k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.49k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.49k|        return #name;
  |  |  ------------------
  |  |   75|  2.49k|                                                                                                   \
  |  |   76|  2.49k|    /* Set conditionals */                                                                         \
  |  |   77|  2.49k|                                                                                                   \
  |  |   78|  2.49k|    /* Less than */                                                                                \
  |  |   79|  2.49k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    331|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 331, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    331|        return #name;
  |  |  ------------------
  |  |   80|  3.07k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.07k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.07k|        return #name;
  |  |  ------------------
  |  |   81|  3.07k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    488|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 488, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    488|        return #name;
  |  |  ------------------
  |  |   82|    522|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    522|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 522, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    522|        return #name;
  |  |  ------------------
  |  |   83|    522|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    362|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 362, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    362|        return #name;
  |  |  ------------------
  |  |   84|  1.02k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.02k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.02k|        return #name;
  |  |  ------------------
  |  |   85|  1.02k|                                                                                                   \
  |  |   86|  1.02k|    /* Greater than */                                                                             \
  |  |   87|  1.91k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.91k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.91k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.91k|        return #name;
  |  |  ------------------
  |  |   88|  1.91k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    150|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 150, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    150|        return #name;
  |  |  ------------------
  |  |   89|  3.70k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.70k, False: 426k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.70k|        return #name;
  |  |  ------------------
  |  |   90|  3.70k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    279|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 279, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    279|        return #name;
  |  |  ------------------
  |  |   91|  4.83k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.83k, False: 425k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.83k|        return #name;
  |  |  ------------------
  |  |   92|  4.83k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.50k, False: 425k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.50k|        return #name;
  |  |  ------------------
  |  |   93|  4.50k|                                                                                                   \
  |  |   94|  4.50k|    /* Less than or equal */                                                                       \
  |  |   95|  4.50k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.51k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.51k|        return #name;
  |  |  ------------------
  |  |   96|  1.51k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    181|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 181, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    181|        return #name;
  |  |  ------------------
  |  |   97|    498|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    498|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 498, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    498|        return #name;
  |  |  ------------------
  |  |   98|  1.15k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.15k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.15k|        return #name;
  |  |  ------------------
  |  |   99|  1.15k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    280|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 280, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    280|        return #name;
  |  |  ------------------
  |  |  100|  2.38k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.38k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.38k|        return #name;
  |  |  ------------------
  |  |  101|  2.38k|                                                                                                   \
  |  |  102|  2.38k|    /* Greater than or equal */                                                                    \
  |  |  103|  8.30k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  8.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.30k, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.30k|        return #name;
  |  |  ------------------
  |  |  104|  8.30k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.46k, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.46k|        return #name;
  |  |  ------------------
  |  |  105|  7.46k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    368|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 368, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    368|        return #name;
  |  |  ------------------
  |  |  106|  2.25k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.25k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.25k|        return #name;
  |  |  ------------------
  |  |  107|  2.25k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |  108|    300|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    300|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 300, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    300|        return #name;
  |  |  ------------------
  |  |  109|    300|                                                                                                   \
  |  |  110|    300|    /* Equal */                                                                                    \
  |  |  111|  1.04k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |  112|  2.89k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.89k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.89k|        return #name;
  |  |  ------------------
  |  |  113|  5.50k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.50k, False: 424k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.50k|        return #name;
  |  |  ------------------
  |  |  114|  5.50k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.21k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.21k|        return #name;
  |  |  ------------------
  |  |  115|  3.21k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.32k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.32k|        return #name;
  |  |  ------------------
  |  |  116|  2.32k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 87, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     87|        return #name;
  |  |  ------------------
  |  |  117|     87|                                                                                                   \
  |  |  118|     87|    /* Not equal */                                                                                \
  |  |  119|  12.4k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  12.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12.4k, False: 418k]
  |  |  |  |  ------------------
  |  |  |  |  208|  12.4k|        return #name;
  |  |  ------------------
  |  |  120|  12.4k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    290|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 290, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    290|        return #name;
  |  |  ------------------
  |  |  121|    290|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 83, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     83|        return #name;
  |  |  ------------------
  |  |  122|    447|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    447|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 447, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    447|        return #name;
  |  |  ------------------
  |  |  123|    447|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    158|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 158, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    158|        return #name;
  |  |  ------------------
  |  |  124|    158|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    127|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 127, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    127|        return #name;
  |  |  ------------------
  |  |  125|    127|                                                                                                   \
  |  |  126|    127|    /* Conditional branching */                                                                    \
  |  |  127|    230|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    230|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 230, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    230|        return #name;
  |  |  ------------------
  |  |  128|    230|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 101, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    101|        return #name;
  |  |  ------------------
  |  |  129|    610|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    610|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 610, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    610|        return #name;
  |  |  ------------------
  |  |  130|  11.7k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  11.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.7k, False: 418k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.7k|        return #name;
  |  |  ------------------
  |  |  131|  11.7k|                                                                                                   \
  |  |  132|  11.7k|    /* Unconditional branching */                                                                  \
  |  |  133|  11.7k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|  2.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.37k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.37k|        return #name;
  |  |  ------------------
  |  |  134|  2.37k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 86, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     86|        return #name;
  |  |  ------------------
  |  |  135|  5.96k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.96k, False: 424k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.96k|        return #name;
  |  |  ------------------
  |  |  136|  10.2k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  10.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.2k, False: 420k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.2k|        return #name;
  |  |  ------------------
  |  |  137|  10.2k|                                                                                                   \
  |  |  138|  10.2k|    /* Loading data */                                                                             \
  |  |  139|  10.2k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.30k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.30k|        return #name;
  |  |  ------------------
  |  |  140|  2.30k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  141|    105|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    105|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 105, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    105|        return #name;
  |  |  ------------------
  |  |  142|    105|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 78, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     78|        return #name;
  |  |  ------------------
  |  |  143|  6.00k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  6.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.00k, False: 424k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.00k|        return #name;
  |  |  ------------------
  |  |  144|  6.00k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  5.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.35k, False: 425k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.35k|        return #name;
  |  |  ------------------
  |  |  145|  5.35k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    131|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 131, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    131|        return #name;
  |  |  ------------------
  |  |  146|    198|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 198, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    198|        return #name;
  |  |  ------------------
  |  |  147|  2.78k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  2.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.78k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.78k|        return #name;
  |  |  ------------------
  |  |  148|  2.78k|                                                                                                   \
  |  |  149|  2.78k|    /* Storing data */                                                                             \
  |  |  150|  2.78k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.55k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.55k|        return #name;
  |  |  ------------------
  |  |  151|  1.55k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    105|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 105, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    105|        return #name;
  |  |  ------------------
  |  |  152|    392|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    392|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 392, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    392|        return #name;
  |  |  ------------------
  |  |  153|  1.92k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.92k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.92k|        return #name;
  |  |  ------------------
  |  |  154|  1.92k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 66, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     66|        return #name;
  |  |  ------------------
  |  |  155|  2.53k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.53k, False: 427k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.53k|        return #name;
  |  |  ------------------
  |  |  156|  7.56k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  7.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.56k, False: 422k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.56k|        return #name;
  |  |  ------------------
  |  |  157|  7.56k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    905|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 905, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    905|        return #name;
  |  |  ------------------
  |  |  158|    905|                                                                                                   \
  |  |  159|    905|    /* Moving data */                                                                              \
  |  |  160|    905|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 209, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    209|        return #name;
  |  |  ------------------
  |  |  161|    209|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    137|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 137, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    137|        return #name;
  |  |  ------------------
  |  |  162|  1.98k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  1.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.98k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.98k|        return #name;
  |  |  ------------------
  |  |  163|  6.75k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  6.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.75k, False: 423k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.75k|        return #name;
  |  |  ------------------
  |  |  164|  6.75k|                                                                                                   \
  |  |  165|  6.75k|    /* Converting data */                                                                          \
  |  |  166|  6.75k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    112|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 112, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    112|        return #name;
  |  |  ------------------
  |  |  167|    144|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    144|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 144, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    144|        return #name;
  |  |  ------------------
  |  |  168|    144|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    136|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 136, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    136|        return #name;
  |  |  ------------------
  |  |  169|    726|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    726|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 726, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|    726|        return #name;
  |  |  ------------------
  |  |  170|    726|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 84, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|     84|        return #name;
  |  |  ------------------
  |  |  171|    116|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    116|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 116, False: 430k]
  |  |  |  |  ------------------
  |  |  |  |  208|    116|        return #name;
  |  |  ------------------
  |  |  172|    116|                                                                                                   \
  |  |  173|    116|    /* Other */                                                                                    \
  |  |  174|  2.05k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.05k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.05k|        return #name;
  |  |  ------------------
  |  |  175|  2.17k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.17k, False: 428k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.17k|        return #name;
  |  |  ------------------
  |  |  176|  2.17k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.01k, False: 429k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.01k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 430k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   430k|        }
  217|   430k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  35.4k|    {
   32|  35.4k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 1.08k, False: 34.3k]
  ------------------
   33|  1.08k|        {
   34|  1.08k|            return true;
   35|  1.08k|        }
   36|       |
   37|  34.3k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 346, False: 33.9k]
  ------------------
   38|    346|        {
   39|    346|            return true;
   40|    346|        }
   41|       |
   42|  33.9k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 1.28k, False: 32.6k]
  ------------------
   43|  1.28k|        {
   44|  1.28k|            return true;
   45|  1.28k|        }
   46|       |
   47|  32.6k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 32.6k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  32.6k|        return false;
   53|  32.6k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  32.6k|    {
   57|  32.6k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 32.6k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  32.6k|        const char first_char = token.at(0);
   63|       |
   64|  32.6k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 1.29k, False: 31.3k]
  ------------------
   65|  1.29k|        {
   66|  1.29k|            return phi::is_alpha(first_char);
   67|  1.29k|        }
   68|       |
   69|  31.3k|        phi::boolean just_under_scores = (first_char == '_');
   70|  31.3k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 3.82k, False: 27.5k]
  |  Branch (70:15): [True: 27.2k, False: 4.12k]
  |  Branch (70:44): [True: 303, False: 3.82k]
  ------------------
   71|  3.82k|        {
   72|  3.82k|            return false;
   73|  3.82k|        }
   74|       |
   75|   198k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 181k, False: 17.1k]
  ------------------
   76|   181k|        {
   77|   181k|            const char c{token.at(index)};
   78|       |
   79|   181k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 75.8k, False: 105k]
  ------------------
   80|  75.8k|            {
   81|  75.8k|                just_under_scores = false;
   82|  75.8k|            }
   83|   105k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 95.5k, False: 10.3k]
  ------------------
   84|  95.5k|            {
   85|  95.5k|                continue;
   86|  95.5k|            }
   87|  10.3k|            else
   88|  10.3k|            {
   89|  10.3k|                return false;
   90|  10.3k|            }
   91|   181k|        }
   92|       |
   93|  17.1k|        return !just_under_scores;
   94|  27.5k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   794k|    {
  101|   794k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 794k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   794k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 48.5k, False: 746k]
  ------------------
  107|  48.5k|        {
  108|  48.5k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 27.5k, False: 20.9k]
  ------------------
  109|  27.5k|            {
  110|  27.5k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  27.5k|            }
  112|       |
  113|  20.9k|            return {};
  114|  48.5k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   746k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 187, False: 745k]
  ------------------
  118|    187|        {
  119|    187|            return {};
  120|    187|        }
  121|       |
  122|   745k|        std::int32_t number{0};
  123|   745k|        phi::boolean is_negative{false};
  124|   745k|        phi::boolean starts_with_zero{false};
  125|   745k|        phi::boolean parsing_binary{false};
  126|   745k|        phi::boolean parsing_octal{false};
  127|   745k|        phi::boolean parsing_hexadecimal{false};
  128|   745k|        phi::boolean parsed_something{false};
  129|   745k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   818k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 809k, False: 9.16k]
  ------------------
  134|   809k|        {
  135|   809k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   809k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 745k, False: 63.7k]
  ------------------
  139|   745k|            {
  140|   745k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 977, False: 744k]
  ------------------
  141|    977|                {
  142|    977|                    continue;
  143|    977|                }
  144|       |
  145|   744k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 593, False: 744k]
  ------------------
  146|    593|                {
  147|    593|                    is_negative = true;
  148|    593|                    continue;
  149|    593|                }
  150|       |
  151|   744k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 29.8k, False: 714k]
  ------------------
  152|  29.8k|                {
  153|  29.8k|                    starts_with_zero = true;
  154|  29.8k|                    continue;
  155|  29.8k|                }
  156|       |
  157|   714k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 98, False: 714k]
  ------------------
  158|     98|                {
  159|     98|                    return {};
  160|     98|                }
  161|   714k|            }
  162|       |
  163|       |            // Second character
  164|   778k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 32.0k, False: 746k]
  ------------------
  165|  32.0k|            {
  166|  32.0k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 29.8k, False: 2.27k]
  ------------------
  167|  29.8k|                {
  168|       |                    // Binary
  169|  29.8k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 2.88k, False: 26.9k]
  |  Branch (169:37): [True: 3.31k, False: 23.6k]
  ------------------
  170|  6.19k|                    {
  171|  6.19k|                        parsing_binary = true;
  172|  6.19k|                        continue;
  173|  6.19k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  23.6k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 3.39k, False: 20.2k]
  |  Branch (176:37): [True: 1.22k, False: 18.9k]
  ------------------
  177|  4.61k|                    {
  178|  4.61k|                        parsing_hexadecimal = true;
  179|  4.61k|                        continue;
  180|  4.61k|                    }
  181|       |
  182|       |                    // Octal
  183|  18.9k|                    parsing_octal = true;
  184|  18.9k|                }
  185|  32.0k|            }
  186|       |
  187|       |            // Handle seperators
  188|   767k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 158, False: 767k]
  ------------------
  189|    158|            {
  190|    158|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 92]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     92|                parsed_separator = true;
  196|     92|                continue;
  197|    158|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   767k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 603, False: 766k]
  |  Branch (200:32): [True: 0, False: 603]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   767k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 766k, False: 603]
  |  Branch (205:17): [True: 0, False: 767k]
  |  Branch (205:33): [True: 0, False: 766k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   767k|            parsed_separator = false;
  212|   767k|            parsed_something = true;
  213|       |
  214|   767k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 8.24k, False: 758k]
  ------------------
  215|  8.24k|            {
  216|  8.24k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 3.46k, False: 4.78k]
  ------------------
  217|  3.46k|                {
  218|  3.46k|                    return {};
  219|  3.46k|                }
  220|       |
  221|  4.78k|                number <<= 1;
  222|  4.78k|                number |= (c - '0');
  223|  4.78k|            }
  224|   758k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 34.9k, False: 723k]
  ------------------
  225|  34.9k|            {
  226|  34.9k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 14.2k, False: 20.7k]
  ------------------
  227|  14.2k|                {
  228|  14.2k|                    return {};
  229|  14.2k|                }
  230|       |
  231|  20.7k|                number <<= 3;
  232|  20.7k|                number |= (c - '0');
  233|  20.7k|            }
  234|   723k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 6.93k, False: 717k]
  ------------------
  235|  6.93k|            {
  236|  6.93k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 3.23k, False: 3.70k]
  ------------------
  237|  3.23k|                {
  238|  3.23k|                    return {};
  239|  3.23k|                }
  240|       |
  241|  3.70k|                number <<= 4;
  242|  3.70k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.70k|            }
  244|   717k|            else
  245|   717k|            {
  246|   717k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 714k, False: 2.13k]
  ------------------
  247|   714k|                {
  248|   714k|                    return {};
  249|   714k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  2.13k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 1.54k, False: 585]
  |  Branch (252:36): [True: 750, False: 796]
  ------------------
  253|    750|                {
  254|    750|                    return {};
  255|    750|                }
  256|       |
  257|  1.38k|                number *= 10;
  258|  1.38k|                number += (c - '0');
  259|  1.38k|            }
  260|   767k|        }
  261|       |
  262|  9.16k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 8.07k, False: 1.09k]
  ------------------
  263|  8.07k|        {
  264|       |            // Check for over/underflow
  265|  8.07k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 82, False: 7.99k]
  |  Branch (265:32): [True: 0, False: 82]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  8.07k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 7.99k, False: 82]
  |  Branch (270:17): [True: 0, False: 8.07k]
  |  Branch (270:33): [True: 0, False: 7.99k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  8.07k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 82, False: 7.99k]
  ------------------
  277|     82|            {
  278|     82|                return static_cast<std::int16_t>(-number);
  279|     82|            }
  280|       |
  281|  7.99k|            return static_cast<std::int16_t>(number);
  282|  8.07k|        }
  283|       |
  284|  1.09k|        return {};
  285|  9.16k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  84.2k|    {
   96|  84.2k|        switch (value)
   97|  84.2k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  13.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  13.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13.7k, False: 70.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  13.7k|        return #name;
  |  |  ------------------
  |  |   14|  32.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  32.8k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 32.8k, False: 51.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  32.8k|        return #name;
  |  |  ------------------
  |  |   15|  32.8k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    473|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 473, False: 83.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    473|        return #name;
  |  |  ------------------
  |  |   16|  8.33k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  8.33k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8.33k, False: 75.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  8.33k|        return #name;
  |  |  ------------------
  |  |   17|  8.33k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.09k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.09k, False: 83.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.09k|        return #name;
  |  |  ------------------
  |  |   18|  2.39k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.39k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.39k, False: 81.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.39k|        return #name;
  |  |  ------------------
  |  |   19|  2.39k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    118|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 118, False: 84.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    118|        return #name;
  |  |  ------------------
  |  |   20|    118|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   21|    709|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    709|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 709, False: 83.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    709|        return #name;
  |  |  ------------------
  |  |   22|    709|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    403|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 403, False: 83.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    403|        return #name;
  |  |  ------------------
  |  |   23|    403|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    125|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 125, False: 84.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    125|        return #name;
  |  |  ------------------
  |  |   24|    269|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    269|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 269, False: 84.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    269|        return #name;
  |  |  ------------------
  |  |   25|    269|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   26|    538|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    538|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 538, False: 83.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    538|        return #name;
  |  |  ------------------
  |  |   27|    538|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|      6|        return #name;
  |  |  ------------------
  |  |   28|    873|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    873|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 873, False: 83.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    873|        return #name;
  |  |  ------------------
  |  |   29|  9.42k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  9.42k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9.42k, False: 74.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  9.42k|        return #name;
  |  |  ------------------
  |  |   30|  9.42k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    366|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 366, False: 83.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    366|        return #name;
  |  |  ------------------
  |  |   31|    366|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    195|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 195, False: 84.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    195|        return #name;
  |  |  ------------------
  |  |   32|    195|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     13|        return #name;
  |  |  ------------------
  |  |   33|    585|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    585|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 585, False: 83.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|    585|        return #name;
  |  |  ------------------
  |  |   34|    722|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    722|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 722, False: 83.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    722|        return #name;
  |  |  ------------------
  |  |   35|    722|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|      3|        return #name;
  |  |  ------------------
  |  |   36|  3.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.41k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.41k, False: 80.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.41k|        return #name;
  |  |  ------------------
  |  |   37|  3.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     41|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 41, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     41|        return #name;
  |  |  ------------------
  |  |   38|     41|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 19, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     19|        return #name;
  |  |  ------------------
  |  |   39|  1.18k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.18k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.18k, False: 83.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.18k|        return #name;
  |  |  ------------------
  |  |   40|  2.19k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.19k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.19k, False: 82.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.19k|        return #name;
  |  |  ------------------
  |  |   41|  2.19k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     40|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 40, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     40|        return #name;
  |  |  ------------------
  |  |   42|     40|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     15|        return #name;
  |  |  ------------------
  |  |   43|  2.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.63k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.63k, False: 81.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.63k|        return #name;
  |  |  ------------------
  |  |   44|  2.63k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  1.48k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.48k, False: 82.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.48k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 84.2k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  84.2k|        }
  109|  84.2k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  30.5k|    {
  131|  30.5k|        switch (value)
  132|  30.5k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  4.26k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.26k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.26k, False: 26.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.26k|        return #name;
  |  |  ------------------
  |  |   48|  4.26k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.53k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.53k, False: 28.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.53k|        return #name;
  |  |  ------------------
  |  |   49|  1.53k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     40|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 40, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     40|        return #name;
  |  |  ------------------
  |  |   50|     40|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   51|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   52|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   53|     16|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     16|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 16, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     16|        return #name;
  |  |  ------------------
  |  |   54|     16|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   55|    508|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    508|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 508, False: 30.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|    508|        return #name;
  |  |  ------------------
  |  |   56|  1.45k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.45k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.45k, False: 29.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.45k|        return #name;
  |  |  ------------------
  |  |   57|  1.45k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     72|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 72, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     72|        return #name;
  |  |  ------------------
  |  |   58|     72|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   59|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   60|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     39|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 39, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     39|        return #name;
  |  |  ------------------
  |  |   61|     39|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   62|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   63|  1.02k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.02k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.02k, False: 29.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.02k|        return #name;
  |  |  ------------------
  |  |   64|  1.02k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    335|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 335, False: 30.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|    335|        return #name;
  |  |  ------------------
  |  |   65|    596|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|    596|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 596, False: 29.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    596|        return #name;
  |  |  ------------------
  |  |   66|    596|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   67|  14.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  14.5k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 14.5k, False: 15.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|  14.5k|        return #name;
  |  |  ------------------
  |  |   68|  14.5k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     56|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 56, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     56|        return #name;
  |  |  ------------------
  |  |   69|     56|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|     21|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 21, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     21|        return #name;
  |  |  ------------------
  |  |   70|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     27|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 27, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     27|        return #name;
  |  |  ------------------
  |  |   71|    264|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    264|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 264, False: 30.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    264|        return #name;
  |  |  ------------------
  |  |   72|    264|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   73|  5.37k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  5.37k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5.37k, False: 25.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  5.37k|        return #name;
  |  |  ------------------
  |  |   74|  5.37k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     47|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 47, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|     47|        return #name;
  |  |  ------------------
  |  |   75|     47|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   76|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 19, False: 30.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     19|        return #name;
  |  |  ------------------
  |  |   77|    120|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    120|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 120, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    120|        return #name;
  |  |  ------------------
  |  |   78|    120|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    104|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 104, False: 30.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    104|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 30.5k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  30.5k|        }
  144|  30.5k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  11.1k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  11.1k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 226k, False: 0]
  ------------------
   64|   226k|            {
   65|   226k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 11.1k, False: 215k]
  ------------------
   66|  11.1k|                {
   67|  11.1k|                    return &token;
   68|  11.1k|                }
   69|   226k|            }
   70|       |
   71|      0|            return nullptr;
   72|  11.1k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   833k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   833k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   833k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.01M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.01M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.01M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  80.3k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  80.3k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  80.3k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   859k|    {
   11|   859k|        m_Value = val;
   12|   859k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  4.79M|    {
   16|  4.79M|        return m_Value;
   17|  4.79M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   137k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  60.2k|    {
   24|  60.2k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  60.2k|        switch (argument_number.unsafe())
   27|  60.2k|        {
   28|  26.2k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 26.2k, False: 33.9k]
  ------------------
   29|  26.2k|                m_Arg1 = argument;
   30|  26.2k|                break;
   31|  21.3k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 21.3k, False: 38.8k]
  ------------------
   32|  21.3k|                m_Arg2 = argument;
   33|  21.3k|                break;
   34|  12.6k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 12.6k, False: 47.6k]
  ------------------
   35|  12.6k|                m_Arg3 = argument;
   36|  12.6k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 60.2k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  60.2k|#endif
   41|  60.2k|        }
   42|  60.2k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  9.44M|    {
   83|  9.44M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  9.44M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  9.44M|    {
   88|  9.44M|        return m_Info;
   89|  9.44M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   472k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  56.6M|    {
   27|  56.6M|        return m_Type;
   28|  56.6M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  14.5M|    {
   78|  14.5M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  14.5M|        return register_int;
   81|  14.5M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  3.38M|    {
   86|  3.38M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  3.38M|        return register_float;
   89|  3.38M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|  3.42M|    {
   94|  3.42M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|  3.42M|        return immediate_value;
   97|  3.42M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  1.25M|    {
  110|  1.25M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  1.25M|        return label;
  113|  1.25M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  33.8k|    {
  174|  33.8k|        InstructionArgument arg;
  175|  33.8k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  33.8k|        arg.register_int.register_id = id;
  177|  33.8k|        return arg;
  178|  33.8k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  14.0k|    {
  183|  14.0k|        InstructionArgument arg;
  184|  14.0k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  14.0k|        arg.register_float.register_id = id;
  186|  14.0k|        return arg;
  187|  14.0k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  9.11k|    {
  192|  9.11k|        InstructionArgument arg;
  193|  9.11k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  9.11k|        arg.immediate_value.signed_value = value;
  195|  9.11k|        return arg;
  196|  9.11k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  3.15k|    {
  211|  3.15k|        InstructionArgument arg;
  212|  3.15k|        arg.m_Type           = ArgumentType::Label;
  213|  3.15k|        arg.label.label_name = label_name;
  214|  3.15k|        return arg;
  215|  3.15k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|   600k|        {
  357|   600k|            const auto& dest_reg = arg1.AsRegisterInt();
  358|   600k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|   600k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|   600k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|   600k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|   600k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|   600k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  369|  66.7k|        {
  370|  66.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  371|  66.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  372|  66.7k|            const auto& imm_value = arg3.AsImmediateValue();
  373|       |
  374|  66.7k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  375|       |
  376|  66.7k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  377|  66.7k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|  84.1k|        {
  382|  84.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  383|  84.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|  84.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|  84.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|  84.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|  84.1k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|  84.1k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  394|  26.8k|        {
  395|  26.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  396|  26.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  397|  26.8k|            const auto& imm_value = arg3.AsImmediateValue();
  398|       |
  399|  26.8k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  400|       |
  401|  26.8k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  402|  26.8k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  406|  23.5k|        {
  407|  23.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  408|  23.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  409|  23.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  410|       |
  411|  23.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  412|  23.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  413|       |
  414|  23.5k|            const phi::f32 new_value = lhs_value + rhs_value;
  415|       |
  416|  23.5k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  417|  23.5k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  421|  17.5k|        {
  422|  17.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  423|  17.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  424|  17.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  425|       |
  426|  17.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  427|  17.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  428|       |
  429|  17.5k|            const phi::f64 new_value = lhs_value + rhs_value;
  430|       |
  431|  17.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  432|  17.5k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|  64.8k|        {
  437|  64.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  438|  64.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|  64.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|  64.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|  64.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|  64.8k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|  64.8k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  449|  14.9k|        {
  450|  14.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  451|  14.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  452|  14.9k|            const auto& imm_value = arg3.AsImmediateValue();
  453|       |
  454|  14.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  455|       |
  456|  14.9k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  457|  14.9k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|   279k|        {
  462|   279k|            const auto& dest_reg = arg1.AsRegisterInt();
  463|   279k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|   279k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|   279k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|   279k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|   279k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|   279k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  474|  28.3k|        {
  475|  28.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  476|  28.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  477|  28.3k|            const auto& imm_value = arg3.AsImmediateValue();
  478|       |
  479|  28.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  480|       |
  481|  28.3k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  482|  28.3k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  486|  24.2k|        {
  487|  24.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  488|  24.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  489|  24.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  490|       |
  491|  24.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  492|  24.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  493|       |
  494|  24.2k|            const phi::f32 new_value = lhs_value - rhs_value;
  495|       |
  496|  24.2k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  497|  24.2k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  501|  48.7k|        {
  502|  48.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  503|  48.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  504|  48.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  505|       |
  506|  48.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  507|  48.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  508|       |
  509|  48.7k|            const phi::f64 new_value = lhs_value - rhs_value;
  510|       |
  511|  48.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  512|  48.7k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|  60.9k|        {
  517|  60.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  518|  60.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|  60.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|  60.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|  60.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|  60.9k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|  60.9k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  529|  48.3k|        {
  530|  48.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  531|  48.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  532|  48.3k|            const auto& imm_value = arg3.AsImmediateValue();
  533|       |
  534|  48.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  535|       |
  536|  48.3k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  537|  48.3k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|  33.5k|        {
  542|  33.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  543|  33.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|  33.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|  33.5k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|  33.5k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|  33.5k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|  33.5k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  554|   142k|        {
  555|   142k|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|   142k|            const auto& src_reg   = arg2.AsRegisterInt();
  557|   142k|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|   142k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  560|       |
  561|   142k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  562|   142k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  566|  57.7k|        {
  567|  57.7k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  568|  57.7k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  569|  57.7k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  570|       |
  571|  57.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  572|  57.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  573|       |
  574|  57.7k|            const phi::f32 new_value = lhs_value * rhs_value;
  575|       |
  576|  57.7k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  577|  57.7k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  581|  40.5k|        {
  582|  40.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  583|  40.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  584|  40.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  585|       |
  586|  40.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  587|  40.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  588|       |
  589|  40.5k|            const phi::f64 new_value = lhs_value * rhs_value;
  590|       |
  591|  40.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  592|  40.5k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|  9.58k|        {
  597|  9.58k|            const auto& dest_reg = arg1.AsRegisterInt();
  598|  9.58k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|  9.58k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|  9.58k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|  9.58k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|  9.58k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|  9.58k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  609|      1|        {
  610|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  611|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  612|      1|            const auto& imm_value = arg3.AsImmediateValue();
  613|       |
  614|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  615|       |
  616|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  617|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|  13.5k|        {
  622|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  623|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|  13.5k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|  13.5k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|  13.5k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|  13.5k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  634|      1|        {
  635|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  636|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  637|      1|            const auto& imm_value = arg3.AsImmediateValue();
  638|       |
  639|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  640|       |
  641|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  642|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      1|        {
  647|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 1, False: 0]
  ------------------
  655|      1|            {
  656|      1|                processor.Raise(Exception::DivideByZero);
  657|      1|                return;
  658|      1|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      1|        {
  668|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 1, False: 0]
  ------------------
  676|      1|            {
  677|      1|                processor.Raise(Exception::DivideByZero);
  678|      1|                return;
  679|      1|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|   155k|        {
  689|   155k|            const auto& dest_reg = arg1.AsRegisterInt();
  690|   155k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|   155k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|   155k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|   155k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|   155k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|   155k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  701|  27.3k|        {
  702|  27.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  703|  27.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  704|  27.3k|            const auto& imm_value = arg3.AsImmediateValue();
  705|       |
  706|  27.3k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  707|  27.3k|            phi::i32 shift_value = imm_value.signed_value;
  708|       |
  709|  27.3k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  710|  27.3k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|   111k|        {
  715|   111k|            const auto& dest_reg = arg1.AsRegisterInt();
  716|   111k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|   111k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|   111k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|   111k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|   111k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|   111k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  727|  60.5k|        {
  728|  60.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  729|  60.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  730|  60.5k|            const auto& imm_value = arg3.AsImmediateValue();
  731|       |
  732|  60.5k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  733|  60.5k|            phi::i32 shift_value = imm_value.signed_value;
  734|       |
  735|  60.5k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  736|  60.5k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|   188k|        {
  741|   188k|            const auto& dest_reg = arg1.AsRegisterInt();
  742|   188k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|   188k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|   188k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|   188k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|   188k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|   188k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  753|  36.1k|        {
  754|  36.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  755|  36.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  756|  36.1k|            const auto& imm_value = arg3.AsImmediateValue();
  757|       |
  758|  36.1k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  759|  36.1k|            phi::i32 shift_value = imm_value.signed_value;
  760|       |
  761|  36.1k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  762|  36.1k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|   106k|        {
  767|   106k|            const auto& dest_reg = arg1.AsRegisterInt();
  768|   106k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|   106k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|   106k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|   106k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|   106k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|   106k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  779|  37.5k|        {
  780|  37.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  781|  37.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  782|  37.5k|            const auto& imm_value = arg3.AsImmediateValue();
  783|       |
  784|  37.5k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  785|  37.5k|            phi::i32 shift_value = imm_value.signed_value;
  786|       |
  787|  37.5k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  788|  37.5k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|  23.9k|        {
  793|  23.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  794|  23.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|  23.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|  23.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|  23.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|  23.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|  23.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|  23.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  806|   232k|        {
  807|   232k|            const auto& dest_reg  = arg1.AsRegisterInt();
  808|   232k|            const auto& src_reg   = arg2.AsRegisterInt();
  809|   232k|            const auto& imm_value = arg3.AsImmediateValue();
  810|       |
  811|   232k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  812|   232k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  813|       |
  814|   232k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  815|   232k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|  23.1k|        {
  820|  23.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  821|  23.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|  23.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|  23.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|  23.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|  23.1k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|  23.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|  23.1k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  833|  26.2k|        {
  834|  26.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  835|  26.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  836|  26.2k|            const auto& imm_value = arg3.AsImmediateValue();
  837|       |
  838|  26.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  839|  26.2k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  840|       |
  841|  26.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  842|  26.2k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|  23.5k|        {
  847|  23.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  848|  23.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|  23.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|  23.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|  23.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|  23.5k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|  23.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|  23.5k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  860|  1.00M|        {
  861|  1.00M|            const auto& dest_reg  = arg1.AsRegisterInt();
  862|  1.00M|            const auto& src_reg   = arg2.AsRegisterInt();
  863|  1.00M|            const auto& imm_value = arg3.AsImmediateValue();
  864|       |
  865|  1.00M|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  866|  1.00M|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  867|       |
  868|  1.00M|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  869|  1.00M|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|  15.2k|        {
  874|  15.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  875|  15.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|  15.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|  15.2k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|  15.2k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|  15.2k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 1, False: 15.2k]
  ------------------
  882|       |
  883|  15.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|  15.2k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  888|  37.0k|        {
  889|  37.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|  37.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  891|  37.0k|            const auto& imm_value = arg3.AsImmediateValue();
  892|       |
  893|  37.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|       |
  895|  37.0k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (895:41): [True: 0, False: 37.0k]
  ------------------
  896|       |
  897|  37.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  898|  37.0k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|  16.1k|        {
  903|  16.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  904|  16.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|  16.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|  16.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|  16.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|  16.1k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 1, False: 16.1k]
  ------------------
  911|       |
  912|  16.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|  16.1k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  917|   124k|        {
  918|   124k|            const auto& dest_reg  = arg1.AsRegisterInt();
  919|   124k|            const auto& src_reg   = arg2.AsRegisterInt();
  920|   124k|            const auto& imm_value = arg3.AsImmediateValue();
  921|       |
  922|   124k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  923|       |
  924|   124k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (924:41): [True: 0, False: 124k]
  ------------------
  925|       |
  926|   124k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  927|   124k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|  13.3k|        {
  932|  13.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|  13.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|  13.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|  13.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|  13.3k|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|  13.3k|            processor.SetFPSRValue(new_value);
  941|  13.3k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|  53.5k|        {
  946|  53.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|  53.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|  53.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|  53.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|  53.5k|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|  53.5k|            processor.SetFPSRValue(new_value);
  955|  53.5k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|  21.5k|        {
  960|  21.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  961|  21.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|  21.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|  21.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|  21.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|  21.5k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 21.5k]
  ------------------
  968|       |
  969|  21.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|  21.5k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  974|  40.5k|        {
  975|  40.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|  40.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  977|  40.5k|            const auto& imm_value = arg3.AsImmediateValue();
  978|       |
  979|  40.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|       |
  981|  40.5k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (981:41): [True: 3.00k, False: 37.5k]
  ------------------
  982|       |
  983|  40.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  984|  40.5k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|  14.0k|        {
  989|  14.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  990|  14.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|  14.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|  14.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|  14.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|  14.0k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 14.0k]
  ------------------
  997|       |
  998|  14.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|  14.0k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1003|  44.3k|        {
 1004|  44.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1005|  44.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1006|  44.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1007|       |
 1008|  44.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1009|       |
 1010|  44.3k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1010:41): [True: 0, False: 44.3k]
  ------------------
 1011|       |
 1012|  44.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1013|  44.3k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|   249k|        {
 1018|   249k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|   249k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|   249k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|   249k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|   249k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|   249k|            processor.SetFPSRValue(new_value);
 1027|   249k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|   600k|        {
 1032|   600k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|   600k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|   600k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|   600k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|   600k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|   600k|            processor.SetFPSRValue(new_value);
 1041|   600k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|  13.9k|        {
 1046|  13.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|  13.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|  13.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|  13.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|  13.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|  13.9k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 13.9k, False: 1]
  ------------------
 1054|       |
 1055|  13.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|  13.9k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1060|  25.9k|        {
 1061|  25.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1062|  25.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1063|  25.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1064|       |
 1065|  25.9k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1066|       |
 1067|  25.9k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1067:41): [True: 25.9k, False: 0]
  ------------------
 1068|       |
 1069|  25.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1070|  25.9k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|  29.4k|        {
 1075|  29.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|  29.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|  29.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|  29.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|  29.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|  29.4k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 28.3k, False: 1.11k]
  ------------------
 1083|       |
 1084|  29.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|  29.4k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1089|   411k|        {
 1090|   411k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1091|   411k|            const auto& src_reg   = arg2.AsRegisterInt();
 1092|   411k|            const auto& imm_value = arg3.AsImmediateValue();
 1093|       |
 1094|   411k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1095|       |
 1096|   411k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1096:41): [True: 333k, False: 78.1k]
  ------------------
 1097|       |
 1098|   411k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1099|   411k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|  23.6k|        {
 1104|  23.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|  23.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|  23.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|  23.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|  23.6k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|  23.6k|            processor.SetFPSRValue(new_value);
 1113|  23.6k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|  22.0k|        {
 1118|  22.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|  22.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|  22.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|  22.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|  22.0k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|  22.0k|            processor.SetFPSRValue(new_value);
 1127|  22.0k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|  38.3k|        {
 1132|  38.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|  38.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|  38.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|  38.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|  38.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|  38.3k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 38.3k, False: 0]
  ------------------
 1140|       |
 1141|  38.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|  38.3k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1146|   579k|        {
 1147|   579k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1148|   579k|            const auto& src_reg   = arg2.AsRegisterInt();
 1149|   579k|            const auto& imm_value = arg3.AsImmediateValue();
 1150|       |
 1151|   579k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1152|       |
 1153|   579k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1153:41): [True: 576k, False: 3.39k]
  ------------------
 1154|       |
 1155|   579k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1156|   579k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|  15.8k|        {
 1161|  15.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|  15.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|  15.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|  15.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|  15.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|  15.8k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 15.8k, False: 0]
  ------------------
 1169|       |
 1170|  15.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|  15.8k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1175|  28.7k|        {
 1176|  28.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1177|  28.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1178|  28.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1179|       |
 1180|  28.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1181|       |
 1182|  28.7k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1182:41): [True: 28.7k, False: 0]
  ------------------
 1183|       |
 1184|  28.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1185|  28.7k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|  19.0k|        {
 1190|  19.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|  19.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|  19.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|  19.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|  19.0k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|  19.0k|            processor.SetFPSRValue(new_value);
 1199|  19.0k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|  71.1k|        {
 1204|  71.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|  71.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|  71.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|  71.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|  71.1k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|  71.1k|            processor.SetFPSRValue(new_value);
 1213|  71.1k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|  38.6k|        {
 1218|  38.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|  38.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|  38.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|  38.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|  38.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|  38.6k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 36.6k, False: 1.98k]
  ------------------
 1226|       |
 1227|  38.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|  38.6k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1232|  36.6k|        {
 1233|  36.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1234|  36.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1235|  36.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1236|       |
 1237|  36.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1238|       |
 1239|  36.6k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1239:41): [True: 36.6k, False: 0]
  ------------------
 1240|       |
 1241|  36.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1242|  36.6k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|   262k|        {
 1247|   262k|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|   262k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|   262k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|   262k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|   262k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|   262k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 254k, False: 7.24k]
  ------------------
 1255|       |
 1256|   262k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|   262k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1261|   143k|        {
 1262|   143k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1263|   143k|            const auto& src_reg   = arg2.AsRegisterInt();
 1264|   143k|            const auto& imm_value = arg3.AsImmediateValue();
 1265|       |
 1266|   143k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1267|       |
 1268|   143k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1268:41): [True: 143k, False: 0]
  ------------------
 1269|       |
 1270|   143k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1271|   143k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|  26.8k|        {
 1276|  26.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|  26.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|  26.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|  26.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|  26.8k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|  26.8k|            processor.SetFPSRValue(new_value);
 1285|  26.8k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|  23.0k|        {
 1290|  23.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|  23.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|  23.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|  23.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|  23.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|  23.0k|            processor.SetFPSRValue(new_value);
 1299|  23.0k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|  17.8k|        {
 1304|  17.8k|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|  17.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|  17.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|  17.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|  17.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|  17.8k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 1, False: 17.8k]
  ------------------
 1312|       |
 1313|  17.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|  17.8k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1318|  49.8k|        {
 1319|  49.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1320|  49.8k|            const auto& src_reg   = arg2.AsRegisterInt();
 1321|  49.8k|            const auto& imm_value = arg3.AsImmediateValue();
 1322|       |
 1323|  49.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1324|       |
 1325|  49.8k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1325:41): [True: 0, False: 49.8k]
  ------------------
 1326|       |
 1327|  49.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1328|  49.8k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|  23.9k|        {
 1333|  23.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|  23.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|  23.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|  23.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|  23.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|  23.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 1, False: 23.9k]
  ------------------
 1341|       |
 1342|  23.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|  23.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1347|   127k|        {
 1348|   127k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|   127k|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|   127k|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|   127k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1353|       |
 1354|   127k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1354:41): [True: 21.6k, False: 105k]
  ------------------
 1355|       |
 1356|   127k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1357|   127k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|  20.9k|        {
 1362|  20.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|  20.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|  20.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|  20.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|  20.9k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|  20.9k|            processor.SetFPSRValue(new_value);
 1371|  20.9k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|  23.7k|        {
 1376|  23.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|  23.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|  23.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|  23.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|  23.7k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|  23.7k|            processor.SetFPSRValue(new_value);
 1385|  23.7k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|  70.9k|        {
 1390|  70.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|  70.9k|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|  70.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|  70.9k|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 37.2k, False: 33.6k]
  ------------------
 1396|  37.2k|            {
 1397|  37.2k|                JumpToLabel(processor, jump_label.label_name);
 1398|  37.2k|            }
 1399|  70.9k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|  48.3k|        {
 1404|  48.3k|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|  48.3k|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|  48.3k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|  48.3k|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 18.3k, False: 30.0k]
  ------------------
 1410|  18.3k|            {
 1411|  18.3k|                JumpToLabel(processor, jump_label.label_name);
 1412|  18.3k|            }
 1413|  48.3k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|  19.1k|        {
 1418|  19.1k|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|  19.1k|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|  19.1k|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 5.00k, False: 14.1k]
  ------------------
 1423|  5.00k|            {
 1424|  5.00k|                JumpToLabel(processor, jump_label.label_name);
 1425|  5.00k|            }
 1426|  19.1k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|   984k|        {
 1431|   984k|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|   984k|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|   984k|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 964k, False: 19.4k]
  ------------------
 1436|   964k|            {
 1437|   964k|                JumpToLabel(processor, jump_label.label_name);
 1438|   964k|            }
 1439|   984k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  84.1k|        {
 1444|  84.1k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  84.1k|            JumpToLabel(processor, jump_label.label_name);
 1447|  84.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  38.8k|        {
 1452|  38.8k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  38.8k|            JumpToRegister(processor, jump_register.register_id);
 1455|  38.8k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|  52.7k|        {
 1460|  52.7k|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|  52.7k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|  52.7k|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|  52.7k|            JumpToLabel(processor, jump_label.label_name);
 1466|  52.7k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|   661k|        {
 1471|   661k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|   661k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|   661k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|   661k|            JumpToRegister(processor, jump_register.register_id);
 1477|   661k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1481|  25.8k|        {
 1482|  25.8k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1483|  25.8k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1484|       |
 1485|  25.8k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1486|       |
 1487|  25.8k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1488|  25.8k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1492|      1|        {
 1493|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1494|       |
 1495|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1496|       |
 1497|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1497:17): [True: 0, False: 1]
  ------------------
 1498|      0|            {
 1499|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1500|      0|                return;
 1501|      0|            }
 1502|       |
 1503|      1|            phi::i32 address = optional_address.value();
 1504|       |
 1505|      1|            auto optional_value =
 1506|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1507|       |
 1508|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1508:17): [True: 1, False: 0]
  ------------------
 1509|      1|            {
 1510|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1511|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1512|      1|                return;
 1513|      1|            }
 1514|       |
 1515|      0|            phi::i32 value = optional_value.value();
 1516|       |
 1517|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1518|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1522|      1|        {
 1523|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1524|       |
 1525|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1526|       |
 1527|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1527:17): [True: 0, False: 1]
  ------------------
 1528|      0|            {
 1529|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1530|      0|                return;
 1531|      0|            }
 1532|       |
 1533|      1|            phi::i32 address = optional_address.value();
 1534|       |
 1535|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1536|      1|                    static_cast<std::size_t>(address.unsafe()));
 1537|       |
 1538|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1538:17): [True: 1, False: 0]
  ------------------
 1539|      1|            {
 1540|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1541|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1542|      1|                return;
 1543|      1|            }
 1544|       |
 1545|      0|            phi::u32 value = optional_value.value();
 1546|       |
 1547|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1548|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1552|      1|        {
 1553|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1554|       |
 1555|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1556|       |
 1557|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1557:17): [True: 0, False: 1]
  ------------------
 1558|      0|            {
 1559|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1560|      0|                return;
 1561|      0|            }
 1562|       |
 1563|      1|            phi::i32 address = optional_address.value();
 1564|       |
 1565|      1|            auto optional_value =
 1566|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1567|       |
 1568|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1568:17): [True: 1, False: 0]
  ------------------
 1569|      1|            {
 1570|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1571|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1572|      1|                return;
 1573|      1|            }
 1574|       |
 1575|      0|            phi::i32 value = optional_value.value();
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1578|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1582|      1|        {
 1583|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1584|       |
 1585|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1586|       |
 1587|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1587:17): [True: 0, False: 1]
  ------------------
 1588|      0|            {
 1589|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1590|      0|                return;
 1591|      0|            }
 1592|       |
 1593|      1|            phi::i32 address = optional_address.value();
 1594|       |
 1595|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1596|      1|                    static_cast<std::size_t>(address.unsafe()));
 1597|       |
 1598|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1598:17): [True: 1, False: 0]
  ------------------
 1599|      1|            {
 1600|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1601|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1602|      1|                return;
 1603|      1|            }
 1604|       |
 1605|      0|            phi::u32 value = optional_value.value();
 1606|       |
 1607|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1608|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1612|      1|        {
 1613|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1614|       |
 1615|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1616|       |
 1617|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1617:17): [True: 0, False: 1]
  ------------------
 1618|      0|            {
 1619|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1620|      0|                return;
 1621|      0|            }
 1622|       |
 1623|      1|            phi::i32 address = optional_address.value();
 1624|       |
 1625|      1|            auto optional_value =
 1626|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1627|       |
 1628|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1628:17): [True: 1, False: 0]
  ------------------
 1629|      1|            {
 1630|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1631|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1632|      1|                return;
 1633|      1|            }
 1634|       |
 1635|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1636|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1640|      1|        {
 1641|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1642|       |
 1643|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1644|       |
 1645|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1645:17): [True: 0, False: 1]
  ------------------
 1646|      0|            {
 1647|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1648|      0|                return;
 1649|      0|            }
 1650|       |
 1651|      1|            phi::i32 address = optional_address.value();
 1652|       |
 1653|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1654|      1|                    static_cast<std::size_t>(address.unsafe()));
 1655|       |
 1656|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1656:17): [True: 1, False: 0]
  ------------------
 1657|      1|            {
 1658|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1659|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1660|      1|                return;
 1661|      1|            }
 1662|       |
 1663|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1664|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1668|      1|        {
 1669|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1670|       |
 1671|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1672|       |
 1673|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1673:17): [True: 0, False: 1]
  ------------------
 1674|      0|            {
 1675|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1676|      0|                return;
 1677|      0|            }
 1678|       |
 1679|      1|            phi::i32 address = optional_address.value();
 1680|       |
 1681|      1|            auto optional_value =
 1682|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1683|       |
 1684|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1684:17): [True: 1, False: 0]
  ------------------
 1685|      1|            {
 1686|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1687|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1688|      1|                return;
 1689|      1|            }
 1690|       |
 1691|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1692|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1696|      1|        {
 1697|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1698|       |
 1699|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1700|       |
 1701|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1701:17): [True: 0, False: 1]
  ------------------
 1702|      0|            {
 1703|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1704|      0|                return;
 1705|      0|            }
 1706|       |
 1707|      1|            phi::i32 address = optional_address.value();
 1708|       |
 1709|      1|            auto optional_value =
 1710|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1711|       |
 1712|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1712:17): [True: 1, False: 0]
  ------------------
 1713|      1|            {
 1714|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1715|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1716|      1|                return;
 1717|      1|            }
 1718|       |
 1719|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1720|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|  42.3k|        {
 1945|  42.3k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|  42.3k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|  42.3k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|  42.3k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|  42.3k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|  9.76k|        {
 1956|  9.76k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|  9.76k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|  9.76k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|  9.76k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|  9.76k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1966|  9.45k|        {
 1967|  9.45k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1968|  9.45k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1969|       |
 1970|  9.45k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1971|       |
 1972|  9.45k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1973|       |
 1974|  9.45k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1975|  9.45k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1979|  23.9k|        {
 1980|  23.9k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1981|  23.9k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1982|       |
 1983|  23.9k|            const std::int32_t source_value =
 1984|  23.9k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1985|       |
 1986|  23.9k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1987|       |
 1988|  23.9k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1989|  23.9k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|  16.1k|        {
 1994|  16.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|  16.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|  16.1k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|  16.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|  16.1k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|  56.6k|        {
 2005|  56.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|  56.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|  56.6k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|  56.6k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|  56.6k|            const float        converted_value_float =
 2011|  56.6k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|  56.6k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|  56.6k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|  20.2k|        {
 2019|  20.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|  20.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|  20.2k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|  20.2k|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|  20.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|  20.2k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|  22.7k|        {
 2031|  22.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|  22.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|  22.7k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|  22.7k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|  22.7k|            const float        converted_value_float =
 2037|  22.7k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|  22.7k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|  22.7k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|  21.9k|        {
 2045|  21.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|  21.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|  21.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|  21.9k|            const std::int32_t converted_value_int =
 2050|  21.9k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|  21.9k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|  21.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|  21.9k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|  17.4k|        {
 2059|  17.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|  17.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|  17.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|  17.4k|            const std::int32_t converted_value_int =
 2064|  17.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|  17.4k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|  17.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|  17.4k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      1|        {
 2073|      1|            processor.Raise(Exception::Trap);
 2074|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      9|        {
 2079|      9|            processor.Raise(Exception::Halt);
 2080|      9|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|   172k|        {
 2085|       |            /* Do nothing */
 2086|   172k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|   666k|    {
  175|   666k|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|   666k|        SafeWriteInteger(processor, dest_reg, res);
  178|   666k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|   865k|    {
  130|   865k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|   865k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|   865k|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 38.0k, False: 827k]
  ------------------
  135|  38.0k|        {
  136|  38.0k|            processor.Raise(Exception::Underflow);
  137|       |
  138|  38.0k|            value = max + (value % (min - 1));
  139|  38.0k|        }
  140|       |        // Check for overflow
  141|   827k|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 44.8k, False: 782k]
  ------------------
  142|  44.8k|        {
  143|  44.8k|            processor.Raise(Exception::Overflow);
  144|       |
  145|  44.8k|            value = min + (value % (max + 1));
  146|  44.8k|        }
  147|       |
  148|   865k|        PHI_ASSERT(value >= min);
  149|   865k|        PHI_ASSERT(value <= max);
  150|       |
  151|   865k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|   865k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|   110k|    {
  183|   110k|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|   110k|        SafeWriteInteger(processor, dest_reg, res);
  186|   110k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|   607k|    {
  157|   607k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|   607k|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 55.4k, False: 552k]
  ------------------
  161|  55.4k|        {
  162|  55.4k|            processor.Raise(Exception::Overflow);
  163|       |
  164|  55.4k|            value %= max + 1u;
  165|  55.4k|        }
  166|       |
  167|   607k|        PHI_ASSERT(value <= max);
  168|       |
  169|   607k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|   607k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|  79.7k|    {
  191|  79.7k|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|  79.7k|        SafeWriteInteger(processor, dest_reg, res);
  194|  79.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|   307k|    {
  199|   307k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|   307k|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 63.4k, False: 244k]
  ------------------
  202|  63.4k|        {
  203|  63.4k|            processor.Raise(Exception::Underflow);
  204|       |
  205|  63.4k|            phi::u64 res = max - rhs + lhs + 1u;
  206|  63.4k|            SafeWriteInteger(processor, dest_reg, res);
  207|  63.4k|            return;
  208|  63.4k|        }
  209|       |
  210|   244k|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|   244k|        SafeWriteInteger(processor, dest_reg, res);
  213|   244k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|   109k|    {
  218|   109k|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|   109k|        SafeWriteInteger(processor, dest_reg, res);
  221|   109k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|   175k|    {
  226|   175k|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|   175k|        SafeWriteInteger(processor, dest_reg, res);
  229|   175k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|  9.58k|    {
  234|  9.58k|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 2, False: 9.58k]
  ------------------
  235|      2|        {
  236|      2|            processor.Raise(Exception::DivideByZero);
  237|      2|            return;
  238|      2|        }
  239|       |
  240|  9.58k|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|  9.58k|        SafeWriteInteger(processor, dest_reg, res);
  243|  9.58k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|  13.5k|    {
  248|  13.5k|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 2, False: 13.5k]
  ------------------
  249|      2|        {
  250|      2|            processor.Raise(Exception::DivideByZero);
  251|      2|            return;
  252|      2|        }
  253|       |
  254|  13.5k|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|  13.5k|        SafeWriteInteger(processor, dest_reg, res);
  257|  13.5k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|   407k|    {
  331|   407k|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 56.1k, False: 351k]
  ------------------
  332|  56.1k|        {
  333|  56.1k|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|  56.1k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|  56.1k|            return;
  338|  56.1k|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|   351k|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 46.2k, False: 304k]
  ------------------
  342|  46.2k|        {
  343|  46.2k|            processor.Raise(Exception::BadShift);
  344|  46.2k|            return;
  345|  46.2k|        }
  346|       |
  347|   304k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|   304k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|   304k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|   172k|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|   172k|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 31.6k, False: 140k]
  ------------------
  264|  31.6k|        {
  265|  31.6k|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|  31.6k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|  31.6k|            return;
  270|  31.6k|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|   140k|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 84.5k, False: 56.2k]
  ------------------
  274|  84.5k|        {
  275|  84.5k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|  84.5k|            return;
  277|  84.5k|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|  56.2k|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 17.7k, False: 38.5k]
  ------------------
  281|  17.7k|        {
  282|  17.7k|            processor.Raise(Exception::BadShift);
  283|  17.7k|            return;
  284|  17.7k|        }
  285|       |
  286|  38.5k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|  38.5k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|  38.5k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|  38.5k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  38.5k|    {
   30|  38.5k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  38.5k|        return value & ~(-1 << (32 - n));
   33|  38.5k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|   143k|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|   143k|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 16.2k, False: 127k]
  ------------------
  298|  16.2k|        {
  299|  16.2k|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|  16.2k|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 13.6k, False: 2.65k]
  ------------------
  303|  13.6k|            {
  304|       |                // Set every byte to 1
  305|  13.6k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|  13.6k|            }
  307|  2.65k|            else
  308|  2.65k|            {
  309|       |                // Set every byte to 0
  310|  2.65k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|  2.65k|            }
  312|  16.2k|            return;
  313|  16.2k|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|   127k|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 60.2k, False: 67.2k]
  ------------------
  317|  60.2k|        {
  318|  60.2k|            processor.Raise(Exception::BadShift);
  319|  60.2k|            return;
  320|  60.2k|        }
  321|       |
  322|  67.2k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|  67.2k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|  67.2k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.16M|    {
   39|       |        // Lookup the label
   40|  1.16M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.16M|        PHI_ASSERT(program != nullptr);
   42|  1.16M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.16M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 48, False: 1.16M]
  ------------------
   45|     48|        {
   46|     48|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     48|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     48|            processor.Raise(Exception::UnknownLabel);
   48|     48|            return;
   49|     48|        }
   50|       |
   51|  1.16M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.16M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.16M|        processor.SetNextProgramCounter(jump_point);
   56|  1.16M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   700k|    {
   60|   700k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   700k|        phi::u32 max_address =
   63|   700k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   700k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 15, False: 700k]
  ------------------
   65|     15|        {
   66|     15|            processor.Raise(Exception::AddressOutOfBounds);
   67|     15|            return;
   68|     15|        }
   69|       |
   70|   700k|        processor.SetNextProgramCounter(address.unsafe());
   71|   700k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  9.44M|    {
   12|  9.44M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  9.44M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  9.44M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  9.44M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  9.44M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  9.44M|                   "Unexpected argument type for arg1");
   22|  9.44M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  9.44M|                   "Unexpected argument type for arg2");
   24|  9.44M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  9.44M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  9.44M|        m_Executor(processor, arg1, arg2, arg3);
   29|  9.44M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   137k|    {
  453|   137k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   137k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  3.24M|    {
   17|  3.24M|        m_ValueSigned = val;
   18|  3.24M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  2.16M|    {
   22|  2.16M|        m_ValueUnsigned = val;
   23|  2.16M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  5.49M|    {
   27|  5.49M|        return m_ValueSigned;
   28|  5.49M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  3.32M|    {
   32|  3.32M|        return m_ValueUnsigned;
   33|  3.32M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  6.30M|    {
   37|  6.30M|        return m_IsReadOnly;
   38|  6.30M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   19|      1|    {
   20|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (20:13): [True: 1, False: 0]
  ------------------
   21|      1|        {
   22|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   23|      1|            return {};
   24|      1|        }
   25|       |
   26|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   27|      0|        return m_Values[index].signed_value;
   28|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      1|    {
   32|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 1, False: 0]
  ------------------
   33|      1|        {
   34|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      1|            return {};
   36|      1|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      1|    {
   44|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 1, False: 0]
  ------------------
   45|      1|        {
   46|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      1|            return {};
   48|      1|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   60|      1|    {
   61|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (61:13): [True: 1, False: 0]
  ------------------
   62|      1|        {
   63|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   64|      1|            return {};
   65|      1|        }
   66|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (66:13): [True: 0, False: 0]
  ------------------
   67|      0|        {
   68|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      0|            return {};
   70|      0|        }
   71|       |
   72|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   73|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   74|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   77|      1|    {
   78|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (78:13): [True: 1, False: 0]
  ------------------
   79|      1|        {
   80|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   81|      1|            return {};
   82|      1|        }
   83|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (83:13): [True: 0, False: 0]
  ------------------
   84|      0|        {
   85|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   90|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   91|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   94|      1|    {
   95|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (95:13): [True: 1, False: 0]
  ------------------
   96|      1|        {
   97|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   98|      1|            return {};
   99|      1|        }
  100|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  107|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
  108|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  111|      1|    {
  112|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 0]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  119|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
  120|      1|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  123|      1|    {
  124|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (124:13): [True: 1, False: 0]
  ------------------
  125|      1|        {
  126|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  127|      1|            return {};
  128|      1|        }
  129|       |
  130|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  131|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  132|      1|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      8|    {
  244|      8|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 8]
  ------------------
  245|      8|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      8|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  8.30k|    {
  256|  8.30k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 8.30M, False: 8.30k]
  ------------------
  257|  8.30M|        {
  258|  8.30M|            val.signed_value = 0;
  259|  8.30M|        }
  260|  8.30k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   665k|    {
   24|   665k|        switch (token.length())
   25|   665k|        {
   26|       |            // 1 character OpCodes
   27|  22.3k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 22.3k, False: 642k]
  ------------------
   28|  22.3k|                char c1 = token[0];
   29|  22.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 10.1k, False: 12.2k]
  ------------------
   30|  10.1k|                {
   31|  10.1k|                    return OpCode::J;
   32|  10.1k|                }
   33|  12.2k|                break;
   34|  22.3k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  37.0k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 37.0k, False: 628k]
  ------------------
   38|  37.0k|                char c1 = token[0];
   39|  37.0k|                char c2 = token[1];
   40|       |
   41|  37.0k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 14.9k, False: 22.0k]
  ------------------
   42|  37.0k|                {
   43|    192|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 192, False: 36.8k]
  ------------------
   44|    433|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 241, False: 36.7k]
  ------------------
   45|    433|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 152, False: 281]
  ------------------
   46|    152|                        {
   47|    152|                            return OpCode::JR;
   48|    152|                        }
   49|    281|                        break;
   50|       |
   51|  7.55k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 7.55k, False: 29.4k]
  ------------------
   52|  7.78k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 224, False: 36.7k]
  ------------------
   53|  7.78k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 97, False: 7.68k]
  ------------------
   54|  7.78k|                        {
   55|     67|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 67, False: 7.71k]
  ------------------
   56|    144|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 77, False: 7.70k]
  ------------------
   57|    144|                                return OpCode::LB;
   58|  2.78k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 2.78k, False: 5.00k]
  ------------------
   59|  2.79k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 10, False: 7.77k]
  ------------------
   60|  2.79k|                                return OpCode::LD;
   61|    165|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 165, False: 7.61k]
  ------------------
   62|    253|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 88, False: 7.69k]
  ------------------
   63|    253|                                return OpCode::LF;
   64|     78|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 78, False: 7.70k]
  ------------------
   65|    206|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 128, False: 7.65k]
  ------------------
   66|    206|                                return OpCode::LH;
   67|  4.08k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 4.08k, False: 3.70k]
  ------------------
   68|  4.29k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 210, False: 7.57k]
  ------------------
   69|  4.29k|                                return OpCode::LW;
   70|  7.78k|                        }
   71|     97|                        break;
   72|    158|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 158, False: 36.8k]
  ------------------
   73|  4.16k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 4.00k, False: 32.9k]
  ------------------
   74|  4.16k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 442, False: 3.71k]
  ------------------
   75|    442|                        {
   76|    442|                            return OpCode::OR;
   77|    442|                        }
   78|  3.71k|                        break;
   79|  9.00k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 9.00k, False: 27.9k]
  ------------------
   80|  9.66k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 662, False: 36.3k]
  ------------------
   81|  9.66k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 200, False: 9.46k]
  ------------------
   82|  9.66k|                        {
   83|  1.55k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.55k, False: 8.10k]
  ------------------
   84|  1.64k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 83, False: 9.58k]
  ------------------
   85|  1.64k|                                return OpCode::SB;
   86|    905|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 905, False: 8.75k]
  ------------------
   87|  1.06k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 163, False: 9.50k]
  ------------------
   88|  1.06k|                                return OpCode::SD;
   89|  5.82k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 5.82k, False: 3.83k]
  ------------------
   90|  6.10k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 271, False: 9.39k]
  ------------------
   91|  6.10k|                                return OpCode::SF;
   92|    392|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 392, False: 9.27k]
  ------------------
   93|    567|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 175, False: 9.48k]
  ------------------
   94|    567|                                return OpCode::SH;
   95|     21|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 21, False: 9.64k]
  ------------------
   96|     87|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 66, False: 9.59k]
  ------------------
   97|     87|                                return OpCode::SW;
   98|  9.66k|                        }
   99|    200|                        break;
  100|  37.0k|                }
  101|  19.2k|                break;
  102|  37.0k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   316k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 316k, False: 348k]
  ------------------
  106|   316k|                char c1 = token[0];
  107|   316k|                char c2 = token[1];
  108|   316k|                char c3 = token[2];
  109|       |
  110|   316k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 22.3k, False: 294k]
  ------------------
  111|   316k|                {
  112|   170k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 170k, False: 146k]
  ------------------
  113|   170k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 278, False: 316k]
  ------------------
  114|   170k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 168k, False: 1.80k]
  |  Branch (114:29): [True: 168k, False: 2.10k]
  |  Branch (114:45): [True: 168k, False: 300]
  ------------------
  115|   168k|                        {
  116|   168k|                            return OpCode::ADD;
  117|   168k|                        }
  118|  2.10k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 1.76k, False: 338]
  |  Branch (118:34): [True: 1.66k, False: 436]
  |  Branch (118:50): [True: 1.66k, False: 98]
  ------------------
  119|  1.66k|                        {
  120|  1.66k|                            return OpCode::AND;
  121|  1.66k|                        }
  122|    436|                        break;
  123|       |
  124|    436|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 240, False: 316k]
  ------------------
  125|    471|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 231, False: 316k]
  ------------------
  126|    471|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 320, False: 151]
  |  Branch (126:29): [True: 147, False: 324]
  |  Branch (126:45): [True: 147, False: 173]
  ------------------
  127|    147|                        {
  128|    147|                            return OpCode::DIV;
  129|    147|                        }
  130|    324|                        break;
  131|       |
  132|  2.57k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.57k, False: 313k]
  ------------------
  133|  2.82k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 250, False: 316k]
  ------------------
  134|  2.82k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 2.74k, False: 87]
  ------------------
  135|  2.74k|                        {
  136|  2.74k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 153, False: 2.58k]
  ------------------
  137|    153|                            {
  138|    153|                                return OpCode::EQD;
  139|    153|                            }
  140|  2.58k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 2.37k, False: 218]
  ------------------
  141|  2.37k|                            {
  142|  2.37k|                                return OpCode::EQF;
  143|  2.37k|                            }
  144|  2.74k|                        }
  145|    305|                        break;
  146|       |
  147|  9.74k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 9.74k, False: 306k]
  ------------------
  148|  10.6k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 935, False: 315k]
  ------------------
  149|  10.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 961, False: 9.71k]
  ------------------
  150|    961|                        {
  151|    961|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 398, False: 563]
  ------------------
  152|    398|                            {
  153|    398|                                return OpCode::GED;
  154|    398|                            }
  155|    563|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 272, False: 291]
  ------------------
  156|    272|                            {
  157|    272|                                return OpCode::GEF;
  158|    272|                            }
  159|    961|                        }
  160|  9.71k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 9.65k, False: 67]
  ------------------
  161|  9.65k|                        {
  162|  9.65k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.56k, False: 5.08k]
  ------------------
  163|  4.56k|                            {
  164|  4.56k|                                return OpCode::GTD;
  165|  4.56k|                            }
  166|  5.08k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 4.85k, False: 226]
  ------------------
  167|  4.85k|                            {
  168|  4.85k|                                return OpCode::GTF;
  169|  4.85k|                            }
  170|  5.08k|                        }
  171|    584|                        break;
  172|       |
  173|  6.05k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 6.05k, False: 310k]
  ------------------
  174|  7.65k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.59k, False: 314k]
  ------------------
  175|  7.65k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 7.54k, False: 109]
  |  Branch (175:29): [True: 6.95k, False: 700]
  |  Branch (175:45): [True: 6.95k, False: 591]
  ------------------
  176|  6.95k|                        {
  177|  6.95k|                            return OpCode::JAL;
  178|  6.95k|                        }
  179|    700|                        break;
  180|       |
  181|  16.4k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 16.4k, False: 299k]
  ------------------
  182|  29.9k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 13.4k, False: 302k]
  ------------------
  183|  29.9k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 3.41k, False: 26.5k]
  ------------------
  184|  29.9k|                        {
  185|    102|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 102, False: 29.8k]
  ------------------
  186|  3.79k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 3.69k, False: 26.2k]
  ------------------
  187|  3.79k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 1.83k, False: 1.95k]
  ------------------
  188|  1.83k|                                {
  189|  1.83k|                                    return OpCode::LBU;
  190|  1.83k|                                }
  191|  1.95k|                                break;
  192|       |
  193|  2.66k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 2.66k, False: 27.2k]
  ------------------
  194|  8.27k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 5.60k, False: 24.3k]
  ------------------
  195|  8.27k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 2.94k, False: 5.32k]
  ------------------
  196|  2.94k|                                {
  197|  2.94k|                                    return OpCode::LED;
  198|  2.94k|                                }
  199|  5.32k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.85k, False: 3.47k]
  ------------------
  200|  1.85k|                                {
  201|  1.85k|                                    return OpCode::LEF;
  202|  1.85k|                                }
  203|  3.47k|                                break;
  204|       |
  205|  8.15k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 8.15k, False: 21.7k]
  ------------------
  206|  11.6k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 3.50k, False: 26.4k]
  ------------------
  207|  11.6k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.41k, False: 9.24k]
  ------------------
  208|  2.41k|                                {
  209|  2.41k|                                    return OpCode::LHI;
  210|  2.41k|                                }
  211|  9.24k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 5.87k, False: 3.37k]
  ------------------
  212|  5.87k|                                {
  213|  5.87k|                                    return OpCode::LHU;
  214|  5.87k|                                }
  215|  3.37k|                                break;
  216|       |
  217|  3.37k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.58k, False: 28.3k]
  ------------------
  218|  2.55k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 967, False: 28.9k]
  ------------------
  219|  2.55k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.09k, False: 1.45k]
  ------------------
  220|  1.09k|                                {
  221|  1.09k|                                    return OpCode::LTD;
  222|  1.09k|                                }
  223|  1.45k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 495, False: 964]
  ------------------
  224|    495|                                {
  225|    495|                                    return OpCode::LTF;
  226|    495|                                }
  227|    964|                                break;
  228|       |
  229|    964|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 134, False: 29.7k]
  ------------------
  230|    231|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 97, False: 29.8k]
  ------------------
  231|    231|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 197, False: 34]
  ------------------
  232|    197|                                {
  233|    197|                                    return OpCode::LWU;
  234|    197|                                }
  235|     34|                                break;
  236|  29.9k|                        }
  237|  13.2k|                        break;
  238|       |
  239|  13.2k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 9.28k, False: 307k]
  ------------------
  240|  9.69k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 410, False: 316k]
  ------------------
  241|  9.69k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 635, False: 9.06k]
  ------------------
  242|    635|                        {
  243|    635|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 349, False: 286]
  ------------------
  244|    349|                            {
  245|    349|                                return OpCode::NED;
  246|    349|                            }
  247|    286|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 168, False: 118]
  ------------------
  248|    168|                            {
  249|    168|                                return OpCode::NEF;
  250|    168|                            }
  251|    635|                        }
  252|  9.06k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 8.52k, False: 535]
  |  Branch (252:34): [True: 5.73k, False: 3.32k]
  |  Branch (252:50): [True: 5.73k, False: 2.79k]
  ------------------
  253|  5.73k|                        {
  254|  5.73k|                            return OpCode::NOP;
  255|  5.73k|                        }
  256|       |
  257|  3.44k|                        break;
  258|       |
  259|  3.44k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 158, False: 316k]
  ------------------
  260|  5.95k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 5.80k, False: 310k]
  ------------------
  261|  5.95k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 4.95k, False: 1.00k]
  |  Branch (261:29): [True: 2.61k, False: 3.34k]
  |  Branch (261:45): [True: 2.61k, False: 2.33k]
  ------------------
  262|  2.61k|                        {
  263|  2.61k|                            return OpCode::ORI;
  264|  2.61k|                        }
  265|  3.34k|                        break;
  266|       |
  267|  50.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 50.8k, False: 265k]
  ------------------
  268|  52.5k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 1.69k, False: 314k]
  ------------------
  269|  52.5k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 337, False: 52.2k]
  ------------------
  270|  52.5k|                        {
  271|    103|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 103, False: 52.4k]
  ------------------
  272|    245|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 142, False: 52.4k]
  ------------------
  273|    245|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 137, False: 108]
  ------------------
  274|    137|                                {
  275|    137|                                    return OpCode::SBU;
  276|    137|                                }
  277|    108|                                break;
  278|       |
  279|  1.04k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.04k, False: 51.5k]
  ------------------
  280|  1.69k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 646, False: 51.9k]
  ------------------
  281|  1.69k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 1.11k, False: 580]
  ------------------
  282|  1.11k|                                {
  283|  1.11k|                                    return OpCode::SEQ;
  284|  1.11k|                                }
  285|    580|                                break;
  286|       |
  287|  10.3k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 10.3k, False: 42.2k]
  ------------------
  288|  13.9k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 3.59k, False: 48.9k]
  ------------------
  289|  13.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 8.47k, False: 5.42k]
  ------------------
  290|  8.47k|                                {
  291|  8.47k|                                    return OpCode::SGE;
  292|  8.47k|                                }
  293|  5.42k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 2.16k, False: 3.26k]
  ------------------
  294|  2.16k|                                {
  295|  2.16k|                                    return OpCode::SGT;
  296|  2.16k|                                }
  297|  3.26k|                                break;
  298|       |
  299|  3.26k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.92k, False: 50.6k]
  ------------------
  300|  2.12k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 198, False: 52.3k]
  ------------------
  301|  2.12k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 2.02k, False: 101]
  ------------------
  302|  2.02k|                                {
  303|  2.02k|                                    return OpCode::SHU;
  304|  2.02k|                                }
  305|    101|                                break;
  306|       |
  307|  4.64k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 4.64k, False: 47.9k]
  ------------------
  308|  5.98k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 1.34k, False: 51.2k]
  ------------------
  309|  5.98k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 917, False: 5.06k]
  ------------------
  310|  5.98k|                                {
  311|  1.78k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.78k, False: 4.20k]
  ------------------
  312|  1.84k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 5.91k]
  ------------------
  313|  1.84k|                                        return OpCode::SLA;
  314|       |
  315|  1.51k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.51k, False: 4.47k]
  ------------------
  316|  1.62k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 114, False: 5.87k]
  ------------------
  317|  1.62k|                                        return OpCode::SLE;
  318|       |
  319|    946|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 946, False: 5.03k]
  ------------------
  320|  1.10k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 162, False: 5.82k]
  ------------------
  321|  1.10k|                                        return OpCode::SLL;
  322|       |
  323|    331|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 331, False: 5.65k]
  ------------------
  324|    482|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 151, False: 5.83k]
  ------------------
  325|    482|                                        return OpCode::SLT;
  326|  5.98k|                                }
  327|    917|                                break;
  328|       |
  329|  12.4k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 12.4k, False: 40.1k]
  ------------------
  330|  12.5k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 140, False: 52.4k]
  ------------------
  331|  12.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 12.4k, False: 98]
  ------------------
  332|  12.4k|                                {
  333|  12.4k|                                    return OpCode::SNE;
  334|  12.4k|                                }
  335|     98|                                break;
  336|       |
  337|  8.75k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 8.75k, False: 43.8k]
  ------------------
  338|  8.85k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 97, False: 52.4k]
  ------------------
  339|  8.85k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 288, False: 8.56k]
  ------------------
  340|    288|                                {
  341|    288|                                    return OpCode::SRA;
  342|    288|                                }
  343|  8.56k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 8.53k, False: 34]
  ------------------
  344|  8.53k|                                {
  345|  8.53k|                                    return OpCode::SRL;
  346|  8.53k|                                }
  347|     34|                                break;
  348|       |
  349|  4.32k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 4.32k, False: 48.2k]
  ------------------
  350|  4.41k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 98, False: 52.4k]
  ------------------
  351|  4.41k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 4.34k, False: 75]
  ------------------
  352|  4.34k|                                {
  353|  4.34k|                                    return OpCode::SUB;
  354|  4.34k|                                }
  355|     75|                                break;
  356|       |
  357|  2.33k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 2.33k, False: 50.2k]
  ------------------
  358|  2.45k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 124, False: 52.4k]
  ------------------
  359|  2.45k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 2.34k, False: 114]
  ------------------
  360|  2.34k|                                {
  361|  2.34k|                                    return OpCode::SWU;
  362|  2.34k|                                }
  363|    114|                                break;
  364|  52.5k|                        }
  365|       |
  366|  8.84k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 3.22k, False: 313k]
  ------------------
  367|  9.21k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 370, False: 316k]
  ------------------
  368|  9.21k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 3.56k, False: 5.65k]
  |  Branch (368:29): [True: 3.27k, False: 5.93k]
  |  Branch (368:45): [True: 3.27k, False: 285]
  ------------------
  369|  3.27k|                        {
  370|  3.27k|                            return OpCode::XOR;
  371|  3.27k|                        }
  372|  5.93k|                        break;
  373|   316k|                }
  374|  50.6k|                break;
  375|   316k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   194k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 194k, False: 470k]
  ------------------
  379|   194k|                char c1 = token[0];
  380|   194k|                char c2 = token[1];
  381|   194k|                char c3 = token[2];
  382|   194k|                char c4 = token[3];
  383|       |
  384|   194k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 14.2k, False: 180k]
  ------------------
  385|   194k|                {
  386|  27.2k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 27.2k, False: 167k]
  ------------------
  387|  29.2k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.99k, False: 192k]
  ------------------
  388|  29.2k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 124, False: 29.1k]
  ------------------
  389|  29.2k|                        {
  390|  21.6k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 21.6k, False: 7.64k]
  ------------------
  391|  23.4k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.81k, False: 27.4k]
  ------------------
  392|  23.4k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 23.3k, False: 66]
  ------------------
  393|  23.3k|                                {
  394|  23.3k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 897, False: 22.4k]
  ------------------
  395|  23.3k|                                    {
  396|  2.90k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.90k, False: 20.4k]
  ------------------
  397|  2.96k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 23.2k]
  ------------------
  398|  2.96k|                                            return OpCode::ADDD;
  399|       |
  400|  3.22k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 3.22k, False: 20.1k]
  ------------------
  401|  3.98k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 758, False: 22.5k]
  ------------------
  402|  3.98k|                                            return OpCode::ADDF;
  403|       |
  404|  13.2k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 13.2k, False: 10.1k]
  ------------------
  405|  13.3k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 23.2k]
  ------------------
  406|  13.3k|                                            return OpCode::ADDI;
  407|       |
  408|  2.11k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 2.11k, False: 21.2k]
  ------------------
  409|  2.18k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 68, False: 23.2k]
  ------------------
  410|  2.18k|                                            return OpCode::ADDU;
  411|  23.3k|                                    }
  412|  23.3k|                                }
  413|    963|                                break;
  414|       |
  415|  5.60k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 5.60k, False: 23.6k]
  ------------------
  416|  5.70k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 102, False: 29.1k]
  ------------------
  417|  5.70k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 5.64k, False: 66]
  |  Branch (417:37): [True: 5.57k, False: 132]
  |  Branch (417:53): [True: 5.57k, False: 66]
  ------------------
  418|  5.57k|                                {
  419|  5.57k|                                    return OpCode::ANDI;
  420|  5.57k|                                }
  421|       |
  422|    132|                                break;
  423|  29.2k|                        }
  424|  1.21k|                        break;
  425|       |
  426|  9.31k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 9.31k, False: 185k]
  ------------------
  427|  26.6k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 17.3k, False: 177k]
  ------------------
  428|  26.6k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 3.98k, False: 22.6k]
  ------------------
  429|  26.6k|                        {
  430|    217|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 217, False: 26.4k]
  ------------------
  431|  1.60k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.38k, False: 25.2k]
  ------------------
  432|  1.60k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.52k, False: 84]
  |  Branch (432:37): [True: 283, False: 1.32k]
  |  Branch (432:53): [True: 283, False: 1.23k]
  ------------------
  433|    283|                                {
  434|    283|                                    return OpCode::BEQZ;
  435|    283|                                }
  436|  1.32k|                                break;
  437|       |
  438|  8.99k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 8.99k, False: 17.6k]
  ------------------
  439|  15.7k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 6.78k, False: 19.8k]
  ------------------
  440|  15.7k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 14.9k, False: 850]
  ------------------
  441|  14.9k|                                {
  442|  14.9k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 8.50k, False: 6.42k]
  ------------------
  443|  8.50k|                                    {
  444|  8.50k|                                        return OpCode::BFPF;
  445|  8.50k|                                    }
  446|  6.42k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 4.96k, False: 1.45k]
  ------------------
  447|  4.96k|                                    {
  448|  4.96k|                                        return OpCode::BFPT;
  449|  4.96k|                                    }
  450|  14.9k|                                }
  451|  2.30k|                                break;
  452|       |
  453|  5.19k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 5.19k, False: 21.4k]
  ------------------
  454|  5.28k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 26.5k]
  ------------------
  455|  5.28k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 4.67k, False: 612]
  |  Branch (455:37): [True: 2.50k, False: 2.78k]
  |  Branch (455:53): [True: 2.50k, False: 2.17k]
  ------------------
  456|  2.50k|                                {
  457|  2.50k|                                    return OpCode::BNEZ;
  458|  2.50k|                                }
  459|  26.6k|                        }
  460|  10.3k|                        break;
  461|       |
  462|  10.3k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.27k, False: 193k]
  ------------------
  463|  25.4k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 24.2k, False: 170k]
  ------------------
  464|  25.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 19.3k, False: 6.14k]
  |  Branch (464:29): [True: 15.6k, False: 9.87k]
  |  Branch (464:45): [True: 15.6k, False: 3.72k]
  ------------------
  465|  15.6k|                        {
  466|  15.6k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 9.00k, False: 6.60k]
  ------------------
  467|  15.6k|                            {
  468|    388|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 388, False: 15.2k]
  ------------------
  469|    582|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 194, False: 15.4k]
  ------------------
  470|    582|                                    return OpCode::DIVD;
  471|       |
  472|    472|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 472, False: 15.1k]
  ------------------
  473|    653|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 181, False: 15.4k]
  ------------------
  474|    653|                                    return OpCode::DIVF;
  475|       |
  476|     82|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 82, False: 15.5k]
  ------------------
  477|  3.25k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 3.17k, False: 12.4k]
  ------------------
  478|  3.25k|                                    return OpCode::DIVI;
  479|       |
  480|    205|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 205, False: 15.4k]
  ------------------
  481|  2.11k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.91k, False: 13.6k]
  ------------------
  482|  2.11k|                                    return OpCode::DIVU;
  483|  15.6k|                            }
  484|  15.6k|                        }
  485|  18.8k|                        break;
  486|       |
  487|  18.8k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 2.17k, False: 192k]
  ------------------
  488|  2.54k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 362, False: 194k]
  ------------------
  489|  2.54k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.39k, False: 148]
  |  Branch (489:29): [True: 2.26k, False: 280]
  |  Branch (489:45): [True: 2.32k, False: 66]
  |  Branch (489:61): [True: 2.26k, False: 66]
  ------------------
  490|  2.26k|                        {
  491|  2.26k|                            return OpCode::HALT;
  492|  2.26k|                        }
  493|    280|                        break;
  494|       |
  495|  10.1k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 10.1k, False: 184k]
  ------------------
  496|  23.2k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 13.0k, False: 181k]
  ------------------
  497|  23.2k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 22.9k, False: 258]
  |  Branch (497:29): [True: 10.2k, False: 12.9k]
  |  Branch (497:45): [True: 18.7k, False: 4.25k]
  |  Branch (497:61): [True: 10.2k, False: 8.44k]
  ------------------
  498|  10.2k|                        {
  499|  10.2k|                            return OpCode::JALR;
  500|  10.2k|                        }
  501|  12.9k|                        break;
  502|       |
  503|  12.9k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 7.08k, False: 187k]
  ------------------
  504|  7.83k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 754, False: 194k]
  ------------------
  505|  7.83k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 4.82k, False: 3.01k]
  |  Branch (505:29): [True: 3.09k, False: 4.74k]
  |  Branch (505:45): [True: 3.09k, False: 1.73k]
  ------------------
  506|  3.09k|                        {
  507|  3.09k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 275, False: 2.81k]
  ------------------
  508|    275|                            {
  509|    275|                                return OpCode::MOVD;
  510|    275|                            }
  511|  2.81k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 203, False: 2.61k]
  ------------------
  512|    203|                            {
  513|    203|                                return OpCode::MOVF;
  514|    203|                            }
  515|  3.09k|                        }
  516|  4.74k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.68k, False: 2.06k]
  |  Branch (516:34): [True: 2.13k, False: 2.60k]
  |  Branch (516:50): [True: 2.48k, False: 194]
  |  Branch (516:66): [True: 2.13k, False: 351]
  ------------------
  517|  2.13k|                        {
  518|  2.13k|                            return OpCode::MULT;
  519|  2.13k|                        }
  520|  5.22k|                        break;
  521|       |
  522|  56.1k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 56.1k, False: 138k]
  ------------------
  523|  58.5k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 2.41k, False: 192k]
  ------------------
  524|  58.5k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 1.08k, False: 57.4k]
  ------------------
  525|  58.5k|                        {
  526|  8.29k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 8.29k, False: 50.2k]
  ------------------
  527|  9.36k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.07k, False: 57.4k]
  ------------------
  528|  9.36k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 8.49k, False: 876]
  ------------------
  529|  8.49k|                                {
  530|  8.49k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 2.85k, False: 5.63k]
  ------------------
  531|  2.85k|                                    {
  532|  2.85k|                                        return OpCode::SEQI;
  533|  2.85k|                                    }
  534|  5.63k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 5.56k, False: 66]
  ------------------
  535|  5.56k|                                    {
  536|  5.56k|                                        return OpCode::SEQU;
  537|  5.56k|                                    }
  538|  8.49k|                                }
  539|    942|                                break;
  540|       |
  541|  11.9k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 11.9k, False: 46.6k]
  ------------------
  542|  14.3k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 2.40k, False: 56.1k]
  ------------------
  543|  14.3k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 8.30k, False: 6.00k]
  ------------------
  544|  8.30k|                                {
  545|  8.30k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 7.52k, False: 774]
  ------------------
  546|  7.52k|                                    {
  547|  7.52k|                                        return OpCode::SGEI;
  548|  7.52k|                                    }
  549|    774|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 416, False: 358]
  ------------------
  550|    416|                                    {
  551|    416|                                        return OpCode::SGEU;
  552|    416|                                    }
  553|  8.30k|                                }
  554|  6.00k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 5.77k, False: 231]
  ------------------
  555|  5.77k|                                {
  556|  5.77k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 216, False: 5.55k]
  ------------------
  557|    216|                                    {
  558|    216|                                        return OpCode::SGTI;
  559|    216|                                    }
  560|  5.55k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.81k, False: 1.74k]
  ------------------
  561|  3.81k|                                    {
  562|  3.81k|                                        return OpCode::SGTU;
  563|  3.81k|                                    }
  564|  5.77k|                                }
  565|  2.33k|                                break;
  566|       |
  567|  4.68k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 4.68k, False: 53.8k]
  ------------------
  568|  9.03k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 4.34k, False: 54.2k]
  ------------------
  569|  9.03k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 552, False: 8.47k]
  ------------------
  570|  9.03k|                                {
  571|    139|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 139, False: 8.89k]
  ------------------
  572|    271|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 132, False: 8.89k]
  ------------------
  573|    271|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 204, False: 67]
  ------------------
  574|    204|                                        {
  575|    204|                                            return OpCode::SLAI;
  576|    204|                                        }
  577|     67|                                        break;
  578|       |
  579|    679|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 679, False: 8.35k]
  ------------------
  580|  1.77k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.09k, False: 7.93k]
  ------------------
  581|  1.77k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 343, False: 1.43k]
  ------------------
  582|    343|                                        {
  583|    343|                                            return OpCode::SLEI;
  584|    343|                                        }
  585|  1.43k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 564, False: 866]
  ------------------
  586|    564|                                        {
  587|    564|                                            return OpCode::SLEU;
  588|    564|                                        }
  589|    866|                                        break;
  590|       |
  591|    866|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 257, False: 8.77k]
  ------------------
  592|  2.59k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 2.33k, False: 6.69k]
  ------------------
  593|  2.59k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.54k, False: 1.04k]
  ------------------
  594|  1.54k|                                        {
  595|  1.54k|                                            return OpCode::SLLI;
  596|  1.54k|                                        }
  597|  1.04k|                                        break;
  598|       |
  599|  3.63k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 3.63k, False: 5.39k]
  ------------------
  600|  3.84k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 202, False: 8.82k]
  ------------------
  601|  3.84k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 3.17k, False: 665]
  ------------------
  602|  3.17k|                                        {
  603|  3.17k|                                            return OpCode::SLTI;
  604|  3.17k|                                        }
  605|    665|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 558, False: 107]
  ------------------
  606|    558|                                        {
  607|    558|                                            return OpCode::SLTU;
  608|    558|                                        }
  609|    107|                                        break;
  610|  9.03k|                                }
  611|       |
  612|  2.90k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 263, False: 58.2k]
  ------------------
  613|  3.06k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 166, False: 58.3k]
  ------------------
  614|  3.06k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.29k, False: 1.77k]
  ------------------
  615|  1.29k|                                {
  616|  1.29k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 246, False: 1.04k]
  ------------------
  617|    246|                                    {
  618|    246|                                        return OpCode::SNEI;
  619|    246|                                    }
  620|  1.04k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 149, False: 900]
  ------------------
  621|    149|                                    {
  622|    149|                                        return OpCode::SNEU;
  623|    149|                                    }
  624|  1.29k|                                }
  625|  2.67k|                                break;
  626|       |
  627|  11.2k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 11.2k, False: 47.2k]
  ------------------
  628|  11.4k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 191, False: 58.3k]
  ------------------
  629|  11.4k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 2.16k, False: 9.28k]
  |  Branch (629:37): [True: 2.03k, False: 9.40k]
  |  Branch (629:53): [True: 2.03k, False: 122]
  ------------------
  630|  2.03k|                                {
  631|  2.03k|                                    return OpCode::SRAI;
  632|  2.03k|                                }
  633|  9.40k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 9.26k, False: 141]
  |  Branch (633:42): [True: 9.20k, False: 207]
  |  Branch (633:58): [True: 9.20k, False: 66]
  ------------------
  634|  9.20k|                                {
  635|  9.20k|                                    return OpCode::SRLI;
  636|  9.20k|                                }
  637|    207|                                break;
  638|       |
  639|  12.3k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 12.3k, False: 46.1k]
  ------------------
  640|  12.8k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 522, False: 58.0k]
  ------------------
  641|  12.8k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 12.8k, False: 80]
  ------------------
  642|  12.8k|                                {
  643|  12.8k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 242, False: 12.5k]
  ------------------
  644|  12.8k|                                    {
  645|  1.89k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 1.89k, False: 10.9k]
  ------------------
  646|  1.96k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 12.7k]
  ------------------
  647|  1.96k|                                            return OpCode::SUBD;
  648|       |
  649|  2.98k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 2.98k, False: 9.82k]
  ------------------
  650|  3.37k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 386, False: 12.4k]
  ------------------
  651|  3.37k|                                            return OpCode::SUBF;
  652|       |
  653|  1.95k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 1.95k, False: 10.8k]
  ------------------
  654|  2.02k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 12.7k]
  ------------------
  655|  2.02k|                                            return OpCode::SUBI;
  656|       |
  657|  5.14k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 5.14k, False: 7.66k]
  ------------------
  658|  5.21k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 12.7k]
  ------------------
  659|  5.21k|                                            return OpCode::SUBU;
  660|  12.8k|                                    }
  661|  12.8k|                                }
  662|    322|                                break;
  663|  58.5k|                        }
  664|  7.55k|                        break;
  665|       |
  666|  7.55k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.18k, False: 193k]
  ------------------
  667|  1.85k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 666, False: 194k]
  ------------------
  668|  1.85k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 1.65k, False: 198]
  |  Branch (668:29): [True: 1.23k, False: 618]
  |  Branch (668:45): [True: 1.29k, False: 354]
  |  Branch (668:61): [True: 1.23k, False: 66]
  ------------------
  669|  1.23k|                        {
  670|  1.23k|                            return OpCode::TRAP;
  671|  1.23k|                        }
  672|    618|                        break;
  673|  2.49k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.49k, False: 192k]
  ------------------
  674|  5.29k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 2.80k, False: 192k]
  ------------------
  675|  5.29k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 3.88k, False: 1.41k]
  |  Branch (675:29): [True: 3.33k, False: 1.96k]
  |  Branch (675:45): [True: 3.63k, False: 246]
  |  Branch (675:61): [True: 3.33k, False: 301]
  ------------------
  676|  3.33k|                        {
  677|  3.33k|                            return OpCode::XORI;
  678|  3.33k|                        }
  679|  1.96k|                        break;
  680|   194k|                }
  681|  73.3k|                break;
  682|   194k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  73.3k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 32.8k, False: 632k]
  ------------------
  686|  32.8k|                char c1 = token[0];
  687|  32.8k|                char c2 = token[1];
  688|  32.8k|                char c3 = token[2];
  689|  32.8k|                char c4 = token[3];
  690|  32.8k|                char c5 = token[4];
  691|       |
  692|  32.8k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 5.16k, False: 27.7k]
  ------------------
  693|  32.8k|                {
  694|  7.20k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 7.20k, False: 25.6k]
  ------------------
  695|  7.20k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 32.8k]
  ------------------
  696|  7.20k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 7.20k, False: 0]
  |  Branch (696:29): [True: 7.20k, False: 0]
  |  Branch (696:45): [True: 7.20k, False: 0]
  |  Branch (696:61): [True: 7.20k, False: 0]
  |  Branch (696:77): [True: 7.20k, False: 0]
  ------------------
  697|  7.20k|                        {
  698|  7.20k|                            return OpCode::ADDUI;
  699|  7.20k|                        }
  700|      0|                        break;
  701|       |
  702|  2.84k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.84k, False: 30.0k]
  ------------------
  703|  2.84k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 32.8k]
  ------------------
  704|  2.84k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 2.84k, False: 0]
  |  Branch (704:29): [True: 2.84k, False: 0]
  |  Branch (704:45): [True: 2.84k, False: 0]
  |  Branch (704:61): [True: 2.84k, False: 0]
  |  Branch (704:77): [True: 2.84k, False: 0]
  ------------------
  705|  2.84k|                        {
  706|  2.84k|                            return OpCode::DIVUI;
  707|  2.84k|                        }
  708|      0|                        break;
  709|       |
  710|  9.81k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 9.81k, False: 23.0k]
  ------------------
  711|  9.81k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 32.8k]
  ------------------
  712|  9.81k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 9.81k, False: 0]
  |  Branch (712:29): [True: 9.81k, False: 0]
  |  Branch (712:45): [True: 9.81k, False: 0]
  |  Branch (712:61): [True: 9.81k, False: 0]
  ------------------
  713|  9.81k|                        {
  714|  9.81k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 9.81k]
  ------------------
  715|  9.81k|                            {
  716|  1.40k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 1.40k, False: 8.40k]
  ------------------
  717|  1.40k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 9.81k]
  ------------------
  718|  1.40k|                                    return OpCode::MULTD;
  719|       |
  720|  3.46k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 3.46k, False: 6.34k]
  ------------------
  721|  3.46k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 9.81k]
  ------------------
  722|  3.46k|                                    return OpCode::MULTF;
  723|       |
  724|  2.35k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 2.35k, False: 7.45k]
  ------------------
  725|  2.35k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 9.81k]
  ------------------
  726|  2.35k|                                    return OpCode::MULTI;
  727|       |
  728|  2.58k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 2.58k, False: 7.22k]
  ------------------
  729|  2.58k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 9.81k]
  ------------------
  730|  2.58k|                                    return OpCode::MULTU;
  731|  9.81k|                            }
  732|  9.81k|                        }
  733|      0|                        break;
  734|       |
  735|  7.85k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 7.85k, False: 25.0k]
  ------------------
  736|  7.85k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 32.8k]
  ------------------
  737|  7.85k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 7.85k]
  ------------------
  738|  7.85k|                        {
  739|  3.09k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 3.09k, False: 4.76k]
  ------------------
  740|  3.09k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 7.85k]
  ------------------
  741|  3.09k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 3.09k, False: 0]
  |  Branch (741:37): [True: 3.09k, False: 0]
  |  Branch (741:53): [True: 3.09k, False: 0]
  |  Branch (741:69): [True: 3.09k, False: 0]
  ------------------
  742|  3.09k|                                {
  743|  3.09k|                                    return OpCode::SEQUI;
  744|  3.09k|                                }
  745|      0|                                break;
  746|       |
  747|  2.53k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 2.53k, False: 5.32k]
  ------------------
  748|  2.53k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 7.85k]
  ------------------
  749|  2.53k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.25k, False: 279]
  |  Branch (749:37): [True: 2.25k, False: 279]
  |  Branch (749:53): [True: 2.25k, False: 0]
  |  Branch (749:69): [True: 2.25k, False: 0]
  ------------------
  750|  2.25k|                                {
  751|  2.25k|                                    return OpCode::SGEUI;
  752|  2.25k|                                }
  753|    279|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 279, False: 0]
  |  Branch (753:42): [True: 279, False: 0]
  |  Branch (753:58): [True: 279, False: 0]
  |  Branch (753:74): [True: 279, False: 0]
  ------------------
  754|    279|                                {
  755|    279|                                    return OpCode::SGTUI;
  756|    279|                                }
  757|      0|                                break;
  758|       |
  759|  1.63k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 1.63k, False: 6.22k]
  ------------------
  760|  1.63k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 7.85k]
  ------------------
  761|  1.63k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.14k, False: 482]
  |  Branch (761:37): [True: 1.14k, False: 482]
  |  Branch (761:53): [True: 1.14k, False: 0]
  |  Branch (761:69): [True: 1.14k, False: 0]
  ------------------
  762|  1.14k|                                {
  763|  1.14k|                                    return OpCode::SLEUI;
  764|  1.14k|                                }
  765|    482|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 482, False: 0]
  |  Branch (765:42): [True: 482, False: 0]
  |  Branch (765:58): [True: 482, False: 0]
  |  Branch (765:74): [True: 482, False: 0]
  ------------------
  766|    482|                                {
  767|    482|                                    return OpCode::SLTUI;
  768|    482|                                }
  769|      0|                                break;
  770|       |
  771|    447|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 447, False: 7.40k]
  ------------------
  772|    447|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 7.85k]
  ------------------
  773|    447|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 447, False: 0]
  |  Branch (773:37): [True: 447, False: 0]
  |  Branch (773:53): [True: 447, False: 0]
  |  Branch (773:69): [True: 447, False: 0]
  ------------------
  774|    447|                                {
  775|    447|                                    return OpCode::SNEUI;
  776|    447|                                }
  777|      0|                                break;
  778|       |
  779|    153|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 153, False: 7.70k]
  ------------------
  780|    153|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 7.85k]
  ------------------
  781|    153|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 153, False: 0]
  |  Branch (781:37): [True: 153, False: 0]
  |  Branch (781:53): [True: 153, False: 0]
  |  Branch (781:69): [True: 153, False: 0]
  ------------------
  782|    153|                                {
  783|    153|                                    return OpCode::SUBUI;
  784|    153|                                }
  785|      0|                                break;
  786|  7.85k|                        }
  787|       |
  788|      0|                        break;
  789|  32.8k|                }
  790|       |
  791|  5.16k|                break;
  792|  32.8k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  5.16k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 3.67k, False: 661k]
  ------------------
  796|  3.67k|                char c1 = token[0];
  797|  3.67k|                char c2 = token[1];
  798|  3.67k|                char c3 = token[2];
  799|  3.67k|                char c4 = token[3];
  800|  3.67k|                char c5 = token[4];
  801|  3.67k|                char c6 = token[5];
  802|       |
  803|  3.67k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 1.29k, False: 2.37k]
  |  Branch (803:21): [True: 1.29k, False: 2.37k]
  |  Branch (803:37): [True: 1.29k, False: 0]
  |  Branch (803:53): [True: 1.29k, False: 0]
  ------------------
  804|  1.29k|                {
  805|  1.29k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 1.29k]
  ------------------
  806|  1.29k|                    {
  807|    862|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 862, False: 436]
  ------------------
  808|    862|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 1.29k]
  ------------------
  809|    862|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 862, False: 0]
  ------------------
  810|    862|                            {
  811|    862|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 136, False: 726]
  ------------------
  812|    136|                                {
  813|    136|                                    return OpCode::CVTD2F;
  814|    136|                                }
  815|    726|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 726, False: 0]
  ------------------
  816|    726|                                {
  817|    726|                                    return OpCode::CVTD2I;
  818|    726|                                }
  819|    862|                            }
  820|      0|                            break;
  821|       |
  822|    236|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 236, False: 1.06k]
  ------------------
  823|    236|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 1.29k]
  ------------------
  824|    236|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 236, False: 0]
  ------------------
  825|    236|                            {
  826|    236|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 92, False: 144]
  ------------------
  827|     92|                                {
  828|     92|                                    return OpCode::CVTF2D;
  829|     92|                                }
  830|    144|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 144, False: 0]
  ------------------
  831|    144|                                {
  832|    144|                                    return OpCode::CVTF2I;
  833|    144|                                }
  834|    236|                            }
  835|      0|                            break;
  836|       |
  837|    200|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 200, False: 1.09k]
  ------------------
  838|    200|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 1.29k]
  ------------------
  839|    200|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 200, False: 0]
  ------------------
  840|    200|                            {
  841|    200|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 116, False: 84]
  ------------------
  842|    116|                                {
  843|    116|                                    return OpCode::CVTI2D;
  844|    116|                                }
  845|     84|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 84, False: 0]
  ------------------
  846|     84|                                {
  847|     84|                                    return OpCode::CVTI2F;
  848|     84|                                }
  849|    200|                            }
  850|  1.29k|                    }
  851|  1.29k|                }
  852|  2.37k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 1.48k, False: 892]
  |  Branch (852:26): [True: 1.48k, False: 892]
  |  Branch (852:42): [True: 1.48k, False: 0]
  |  Branch (852:58): [True: 1.48k, False: 0]
  |  Branch (852:74): [True: 1.48k, False: 0]
  ------------------
  853|  2.37k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.48k, False: 0]
  |  Branch (853:42): [True: 1.48k, False: 0]
  ------------------
  854|  1.48k|                {
  855|  1.48k|                    return OpCode::MULTUI;
  856|  1.48k|                }
  857|    892|                break;
  858|  3.67k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  9.40k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 9.40k, False: 655k]
  ------------------
  862|  9.40k|                char c1 = token[0];
  863|  9.40k|                char c2 = token[1];
  864|  9.40k|                char c3 = token[2];
  865|  9.40k|                char c4 = token[3];
  866|  9.40k|                char c5 = token[4];
  867|  9.40k|                char c6 = token[5];
  868|  9.40k|                char c7 = token[6];
  869|       |
  870|  9.40k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 8.73k, False: 671]
  |  Branch (870:21): [True: 8.73k, False: 671]
  |  Branch (870:37): [True: 8.73k, False: 0]
  |  Branch (870:53): [True: 8.73k, False: 0]
  ------------------
  871|  8.73k|                {
  872|  8.73k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 6.75k, False: 1.98k]
  |  Branch (872:25): [True: 6.75k, False: 1.98k]
  |  Branch (872:41): [True: 6.75k, False: 0]
  |  Branch (872:54): [True: 6.75k, False: 0]
  |  Branch (872:70): [True: 6.75k, False: 0]
  ------------------
  873|  6.75k|                    {
  874|  6.75k|                        return OpCode::MOVI2FP;
  875|  6.75k|                    }
  876|  1.98k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.98k, False: 0]
  |  Branch (876:30): [True: 1.98k, False: 0]
  |  Branch (876:46): [True: 1.98k, False: 0]
  |  Branch (876:62): [True: 1.98k, False: 0]
  |  Branch (876:75): [True: 1.98k, False: 0]
  ------------------
  877|  1.98k|                    {
  878|  1.98k|                        return OpCode::MOVFP2I;
  879|  1.98k|                    }
  880|  8.73k|                }
  881|    671|                break;
  882|  9.40k|            }
  883|       |
  884|  48.6k|            default: {
  ------------------
  |  Branch (884:13): [True: 48.6k, False: 616k]
  ------------------
  885|  48.6k|                break;
  886|  9.40k|            }
  887|   665k|        }
  888|       |
  889|       |        // None found
  890|   210k|        return OpCode::NONE;
  891|   665k|    }
_ZN3dlx3iceEcc:
   17|  1.12M|    {
   18|  1.12M|        constexpr const char diff = 'a' - 'A';
   19|  1.12M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 803k, False: 323k]
  |  Branch (19:28): [True: 120k, False: 202k]
  ------------------
   20|  1.12M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   712k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  10.4k|    {
  193|  10.4k|        ParseError err;
  194|       |
  195|  10.4k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  10.4k|        err.m_LineNumber                           = line_number;
  197|  10.4k|        err.m_Column                               = column;
  198|  10.4k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  10.4k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  10.4k|        return err;
  202|  10.4k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  10.4k|    {
  207|  10.4k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  10.4k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  10.4k|                                                         actual_type);
  210|  10.4k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    840|    {
  216|    840|        ParseError err;
  217|       |
  218|    840|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    840|        err.m_LineNumber        = line_number;
  220|    840|        err.m_Column            = column;
  221|    840|        err.invalid_number.text = text;
  222|       |
  223|    840|        return err;
  224|    840|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    840|    {
  228|    840|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    840|                                                token.GetColumn().unsafe(), token.GetText());
  230|    840|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     17|    {
  235|     17|        ParseError err;
  236|       |
  237|     17|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     17|        err.m_LineNumber = line_number;
  239|     17|        err.m_Column     = column;
  240|       |
  241|     17|        return err;
  242|     17|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     17|    {
  247|     17|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     17|                                                                     token.GetColumn().unsafe());
  249|     17|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   197k|    {
  255|   197k|        ParseError err;
  256|       |
  257|   197k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   197k|        err.m_LineNumber                   = line_number;
  259|   197k|        err.m_Column                       = column;
  260|   197k|        err.unexpected_token.expected_type = expected_type;
  261|   197k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   197k|        return err;
  264|   197k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   197k|    {
  269|   197k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   197k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   197k|                                                  token.GetType());
  272|   197k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  6.40k|    {
  277|  6.40k|        ParseError err;
  278|       |
  279|  6.40k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  6.40k|        err.m_LineNumber                   = line_number;
  281|  6.40k|        err.m_Column                       = column;
  282|  6.40k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  6.40k|        return err;
  285|  6.40k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  3.68k|    {
  289|  3.68k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  3.68k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  3.68k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   145k|    {
  296|   145k|        ParseError err;
  297|       |
  298|   145k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   145k|        err.m_LineNumber                       = line_number;
  300|   145k|        err.m_Column                           = column;
  301|   145k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   145k|        return err;
  304|   145k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   145k|    {
  309|   145k|        return ConstructInvalidLabelIdentifierParseError(
  310|   145k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   145k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  11.1k|    {
  317|  11.1k|        ParseError err;
  318|       |
  319|  11.1k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  11.1k|        err.m_LineNumber                     = line_number;
  321|  11.1k|        err.m_Column                         = column;
  322|  11.1k|        err.label_already_defined.label_name = label_name;
  323|  11.1k|        err.label_already_defined.at_line    = at_line;
  324|  11.1k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  11.1k|        return err;
  327|  11.1k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  11.1k|    {
  332|  11.1k|        return ConstructLabelAlreadyDefinedParseError(
  333|  11.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  11.1k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  11.1k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   292k|    {
  340|   292k|        ParseError err;
  341|       |
  342|   292k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   292k|        err.m_LineNumber = line_number;
  344|   292k|        err.m_Column     = column;
  345|       |
  346|   292k|        return err;
  347|   292k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   292k|    {
  352|   292k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   292k|                                                        token.GetColumn().unsafe());
  354|   292k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  46.1k|    {
  360|  46.1k|        ParseError err;
  361|       |
  362|  46.1k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  46.1k|        err.m_LineNumber               = line_number;
  364|  46.1k|        err.m_Column                   = column;
  365|  46.1k|        err.too_few_arguments.required = required;
  366|  46.1k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  46.1k|        return err;
  369|  46.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  46.1k|    {
  374|  46.1k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  46.1k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  46.1k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.80k|    {
  381|  1.80k|        ParseError err;
  382|       |
  383|  1.80k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.80k|        err.m_LineNumber           = line_number;
  385|  1.80k|        err.m_Column               = column;
  386|  1.80k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.80k|        return err;
  389|  1.80k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.80k|    {
  393|  1.80k|        return ConstructEmptyLabelParseError(
  394|  1.80k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.80k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.51k, False: 289]
  ------------------
  396|  1.51k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.80k|                        token.GetText());
  398|  1.80k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    326|    {
  403|    326|        ParseError err;
  404|       |
  405|    326|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    326|        err.m_LineNumber = line_number;
  407|    326|        err.m_Column     = column;
  408|       |
  409|    326|        return err;
  410|    326|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    326|    {
  414|    326|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    326|                                               token.GetColumn().unsafe());
  416|    326|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   712k|    {
   19|   712k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   712k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  8.30k|    {
  182|  8.30k|        ParsedProgram program;
  183|       |
  184|  8.30k|        program.m_Tokens = tokens;
  185|       |
  186|  8.30k|        phi::boolean line_has_instruction{false};
  187|  8.30k|        phi::usize   label_count{0u};
  188|       |
  189|  1.72M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 1.72M, False: 8.30k]
  ------------------
  190|  1.72M|        {
  191|  1.72M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  1.72M|            switch (current_token.GetType())
  196|  1.72M|            {
  197|       |                // Ignore comments
  198|   210k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 210k, False: 1.51M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   210k|                    break;
  201|       |
  202|   767k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 767k, False: 952k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   767k|                    line_has_instruction = false;
  205|   767k|                    break;
  206|       |
  207|   163k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 163k, False: 1.55M]
  ------------------
  208|   163k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 9.68k, False: 153k]
  ------------------
  209|  9.68k|                    {
  210|  9.68k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  9.68k|                                current_token, Token::Type::NewLine));
  212|  9.68k|                        break;
  213|  9.68k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   153k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 130k, False: 22.5k]
  ------------------
  218|   130k|                    {
  219|   130k|                        program.AddParseError(
  220|   130k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   130k|                        break;
  222|   130k|                    }
  223|       |
  224|  22.5k|                    std::string_view label_name = current_token.GetText();
  225|  22.5k|                    label_name.remove_suffix(1);
  226|       |
  227|  22.5k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 2.72k, False: 19.8k]
  ------------------
  228|  2.72k|                    {
  229|  2.72k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  2.72k|                                current_token.GetLineNumber().unsafe(),
  231|  2.72k|                                current_token.GetColumn().unsafe(), label_name));
  232|  2.72k|                        break;
  233|  2.72k|                    }
  234|       |
  235|  19.8k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 5.21k, False: 14.5k]
  ------------------
  236|  5.21k|                    {
  237|  5.21k|                        program.AddParseError(
  238|  5.21k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  5.21k|                        break;
  240|  5.21k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  14.5k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 11.1k, False: 3.44k]
  ------------------
  244|  11.1k|                    {
  245|       |                        // Find first defintions of label
  246|  11.1k|                        const Token* first_label_definition =
  247|  11.1k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  11.1k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  11.1k|                                    {
  250|  11.1k|                                        std::string_view token_label_name = t.GetText();
  251|  11.1k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  11.1k|                                        if (token_label_name == label_name)
  254|  11.1k|                                        {
  255|  11.1k|                                            return true;
  256|  11.1k|                                        }
  257|  11.1k|                                    }
  258|       |
  259|  11.1k|                                    return false;
  260|  11.1k|                                });
  261|       |
  262|  11.1k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  11.1k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  11.1k|                                current_token, *first_label_definition));
  266|  11.1k|                        break;
  267|  11.1k|                    }
  268|       |
  269|  3.44k|                    program.m_JumpData[label_name] =
  270|  3.44k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  3.44k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  3.44k|                    break;
  277|  14.5k|                }
  278|       |
  279|   429k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 429k, False: 1.29M]
  ------------------
  280|   429k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 292k, False: 137k]
  ------------------
  281|   292k|                    {
  282|   292k|                        program.AddParseError(
  283|   292k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   292k|                        break;
  285|   292k|                    }
  286|       |
  287|   137k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   137k|                    PHI_ASSERT(current_token.HasHint());
  291|   137k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   137k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   137k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   137k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   137k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   137k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   137k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   137k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   137k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   222k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 194k, False: 28.4k]
  ------------------
  313|   194k|                    {
  314|       |                        // Get next token
  315|   194k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 330, False: 194k]
  ------------------
  316|    330|                        {
  317|    330|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    330|                                    current_token, number_of_argument_required.unsafe(),
  319|    330|                                    argument_num.unsafe()));
  320|    330|                            break;
  321|    330|                        }
  322|       |
  323|   194k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   194k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 25.1k, False: 168k]
  ------------------
  327|  25.1k|                        {
  328|  25.1k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 326, False: 24.8k]
  ------------------
  329|    326|                            {
  330|    326|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    326|                            }
  332|       |
  333|  25.1k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  25.1k|                            continue;
  336|  25.1k|                        }
  337|       |
  338|   168k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 45.8k, False: 123k]
  ------------------
  339|  45.8k|                        {
  340|  45.8k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  45.8k|                                    token, number_of_argument_required.unsafe(),
  342|  45.8k|                                    argument_num.unsafe()));
  343|  45.8k|                            break;
  344|  45.8k|                        }
  345|       |
  346|   123k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   123k|                                parse_instruction_argument(
  348|   123k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   123k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 62.8k, False: 60.2k]
  ------------------
  350|  62.8k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  62.8k|                            break;
  353|  62.8k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  60.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  60.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  60.2k|                        argument_num++;
  360|  60.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  60.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   137k|                    program.m_Instructions.emplace_back(instruction);
  368|   137k|                    line_has_instruction = true;
  369|   137k|                    break;
  370|   429k|                }
  371|       |
  372|   149k|                default:
  ------------------
  |  Branch (372:17): [True: 149k, False: 1.57M]
  ------------------
  373|   149k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   149k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 95.3k, False: 54.3k]
  ------------------
  375|  95.3k|                    {
  376|  95.3k|                        expected_token_type = Token::Type::NewLine;
  377|  95.3k|                    }
  378|       |
  379|   149k|                    program.AddParseError(
  380|   149k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   149k|                    break;
  382|  1.72M|            }
  383|  1.72M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  8.30k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 340, False: 7.96k]
  ------------------
  387|    340|        {
  388|  4.05k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 3.71k, False: 340]
  ------------------
  389|  3.71k|            {
  390|  3.71k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  3.71k|                const Token& token = *it;
  393|  3.71k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.80k, False: 1.91k]
  ------------------
  394|  1.80k|                {
  395|  1.80k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.80k|                    --label_count;
  397|  1.80k|                }
  398|  3.71k|            }
  399|    340|        }
  400|       |
  401|  8.30k|        return program;
  402|  8.30k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  8.30k|    {
  406|  8.30k|        TokenStream tokens = Tokenize(source);
  407|  8.30k|        return Parse(tokens);
  408|  8.30k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   123k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   123k|        switch (token.GetType())
   38|   123k|        {
   39|  5.46k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 5.46k, False: 117k]
  ------------------
   40|  5.46k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 932, False: 4.52k]
  ------------------
   41|  5.46k|                                          ArgumentType::AddressDisplacement))
   42|    932|                {
   43|    932|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    932|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    932|                    return {};
   47|    932|                }
   48|       |
   49|       |                // Get address displacement
   50|  4.52k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  4.52k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  4.52k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 17, False: 4.51k]
  ------------------
   55|     17|                {
   56|     17|                    program.AddParseError(
   57|     17|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     17|                    return {};
   59|     17|                }
   60|       |
   61|  4.51k|                auto         it           = tokens.current_position();
   62|  4.51k|                const Token& first_token  = tokens.consume();
   63|  4.51k|                const Token& second_token = tokens.consume();
   64|  4.51k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  4.51k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 4.51k, False: 0]
  ------------------
   67|  4.51k|                {
   68|  4.51k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  4.51k|                            first_token, Token::Type::OpenBracket));
   70|  4.51k|                    return {};
   71|  4.51k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  35.2k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 35.2k, False: 87.8k]
  ------------------
   98|  35.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.41k, False: 33.8k]
  ------------------
   99|  1.41k|                {
  100|  1.41k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.41k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.41k|                    return {};
  103|  1.41k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  33.8k|                return ConstructInstructionArgumentRegisterInt(
  109|  33.8k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  35.2k|            }
  111|  19.1k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 19.1k, False: 103k]
  ------------------
  112|  19.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 5.09k, False: 14.0k]
  ------------------
  113|  5.09k|                {
  114|  5.09k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  5.09k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  5.09k|                    return {};
  117|  5.09k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  14.0k|                return ConstructInstructionArgumentRegisterFloat(
  123|  14.0k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  19.1k|            }
  125|  3.68k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 3.68k, False: 119k]
  ------------------
  126|  3.68k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  3.68k|                return {};
  129|  19.1k|            }
  130|  14.6k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 14.6k, False: 108k]
  ------------------
  131|       |                // Parse as Label
  132|  14.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.80k, False: 12.8k]
  ------------------
  133|  1.80k|                {
  134|  1.80k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.80k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.80k|                    return {};
  137|  1.80k|                }
  138|       |
  139|  12.8k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 12.8k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  12.8k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 9.73k, False: 3.15k]
  ------------------
  146|  9.73k|                {
  147|  9.73k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  9.73k|                    return {};
  149|  9.73k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  3.15k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  12.8k|            }
  155|  11.1k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 11.1k, False: 111k]
  ------------------
  156|  11.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.16k, False: 9.95k]
  ------------------
  157|  1.16k|                {
  158|  1.16k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.16k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.16k|                    return {};
  161|  1.16k|                }
  162|       |
  163|  9.95k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 9.11k, False: 840]
  ------------------
  164|  9.11k|                {
  165|  9.11k|                    return ConstructInstructionArgumentImmediateValue(
  166|  9.11k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  9.11k|                }
  168|       |
  169|    840|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    840|                return {};
  171|  9.95k|            }
  172|       |
  173|  33.7k|            default:
  ------------------
  |  Branch (173:13): [True: 33.7k, False: 89.3k]
  ------------------
  174|  33.7k|                program.AddParseError(
  175|  33.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  33.7k|                return {};
  177|   123k|        }
  178|   123k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   226k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   226k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 45.6k, False: 181k]
  ------------------
  249|  45.6k|                                    {
  250|  45.6k|                                        std::string_view token_label_name = t.GetText();
  251|  45.6k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  45.6k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 11.1k, False: 34.5k]
  ------------------
  254|  11.1k|                                        {
  255|  11.1k|                                            return true;
  256|  11.1k|                                        }
  257|  45.6k|                                    }
  258|       |
  259|   215k|                                    return false;
  260|   226k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  6.30M|    {
   70|  6.30M|        PHI_ASSERT(id != IntRegisterID::None);
   71|  6.30M|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  6.30M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  6.30M|        return m_IntRegisters[id_value];
   76|  6.30M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  8.81M|    {
   81|  8.81M|        PHI_ASSERT(id != IntRegisterID::None);
   82|  8.81M|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  8.81M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  8.81M|        return m_IntRegisters[id_value];
   87|  8.81M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|  5.49M|    {
   91|  5.49M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|  5.49M|                                             RegisterAccessType::Signed),
   93|  5.49M|                   "Mismatch for instruction access type");
   94|       |
   95|  5.49M|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|  5.49M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|  5.49M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|  5.49M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 4.41M, False: 1.07M]
  ------------------
  100|  5.49M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 1.84M, False: 2.57M]
  ------------------
  101|  1.84M|        {
  102|  1.84M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.84M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|  1.84M|        }
  104|       |
  105|  5.49M|        return GetIntRegister(id).GetSignedValue();
  106|  5.49M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  3.32M|    {
  110|  3.32M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  3.32M|                                             RegisterAccessType::Unsigned),
  112|  3.32M|                   "Mismatch for instruction access type");
  113|       |
  114|  3.32M|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  3.32M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  3.32M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  3.32M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 2.21M, False: 1.10M]
  ------------------
  119|  3.32M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 1.32M, False: 892k]
  ------------------
  120|  1.32M|        {
  121|  1.32M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.32M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|  1.32M|        }
  123|       |
  124|  3.32M|        return GetIntRegister(id).GetUnsignedValue();
  125|  3.32M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|  3.74M|    {
  129|  3.74M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|  3.74M|                                             RegisterAccessType::Signed),
  131|  3.74M|                   "Mismatch for instruction access type");
  132|       |
  133|  3.74M|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|  3.74M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 763k, False: 2.98M]
  ------------------
  136|   763k|        {
  137|   763k|            return;
  138|   763k|        }
  139|       |
  140|  2.98M|        reg.SetSignedValue(value);
  141|       |
  142|  2.98M|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|  2.98M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|  2.98M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|  2.98M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  2.56M|    {
  150|  2.56M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  2.56M|                                             RegisterAccessType::Unsigned),
  152|  2.56M|                   "Mismatch for instruction access type");
  153|       |
  154|  2.56M|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  2.56M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 393k, False: 2.16M]
  ------------------
  157|   393k|        {
  158|   393k|            return;
  159|   393k|        }
  160|       |
  161|  2.16M|        reg.SetUnsignedValue(value);
  162|       |
  163|  2.16M|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  2.16M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  2.16M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  2.16M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  4.30M|    {
  171|  4.30M|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  4.30M|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  4.30M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  4.30M|        return m_FloatRegisters[id_value];
  177|  4.30M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|  1.08M|    {
  182|  1.08M|        PHI_ASSERT(id != FloatRegisterID::None);
  183|  1.08M|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|  1.08M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|  1.08M|        return m_FloatRegisters[id_value];
  188|  1.08M|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|  1.08M|    {
  192|  1.08M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|  1.08M|                                             RegisterAccessType::Float),
  194|  1.08M|                   "Mismatch for instruction access type");
  195|       |
  196|  1.08M|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|  1.08M|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|  1.08M|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|  1.08M|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 1.06M, False: 21.4k]
  ------------------
  201|  1.08M|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 224k, False: 836k]
  ------------------
  202|   224k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   224k|        }
  207|       |
  208|  1.08M|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|  1.08M|        return reg.GetValue();
  211|  1.08M|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|  1.85M|    {
  215|  1.85M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|  1.85M|                                             RegisterAccessType::Double),
  217|  1.85M|                   "Mismatch for instruction access type");
  218|       |
  219|  1.85M|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 12, False: 1.85M]
  ------------------
  220|     12|        {
  221|     12|            Raise(Exception::MisalignedRegisterAccess);
  222|     12|            return {0.0};
  223|     12|        }
  224|       |
  225|  1.85M|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|  1.85M|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|  1.85M|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|  1.85M|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 1.83M, False: 16.5k]
  ------------------
  230|  1.85M|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 1.50M, False: 338k]
  ------------------
  231|  1.50M|        {
  232|  1.50M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.50M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|  1.50M|        }
  234|       |
  235|  1.85M|        const FloatRegisterValueType register_value_type_high =
  236|  1.85M|                m_FloatRegistersValueTypes[id_value + 1u];
  237|  1.85M|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 1.83M, False: 16.5k]
  ------------------
  238|  1.85M|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 3, False: 1.83M]
  ------------------
  239|      3|        {
  240|      3|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      3|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      3|        }
  242|       |
  243|  1.85M|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|  1.85M|        const FloatRegister& second_reg =
  245|  1.85M|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|  1.85M|        const float first_value  = first_reg.GetValue().unsafe();
  248|  1.85M|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|  1.85M|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|  1.85M|        const std::uint32_t first_value_bits =
  254|  1.85M|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|  1.85M|        const std::uint32_t second_value_bits =
  256|  1.85M|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|  1.85M|        std::uint64_t final_value_bits =
  259|  1.85M|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|  1.85M|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|  1.85M|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|  1.85M|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|   293k|    {
  268|   293k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|   293k|                                             RegisterAccessType::Float),
  270|   293k|                   "Mismatch for instruction access type");
  271|       |
  272|   293k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|   293k|        reg.SetValue(value);
  275|       |
  276|   293k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|   293k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|   293k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|   293k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|   150k|    {
  284|   150k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|   150k|                                             RegisterAccessType::Double),
  286|   150k|                   "Mismatch for instruction access type");
  287|       |
  288|   150k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 2, False: 150k]
  ------------------
  289|      2|        {
  290|      2|            Raise(Exception::MisalignedRegisterAccess);
  291|      2|            return;
  292|      2|        }
  293|       |
  294|   150k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|   150k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|   150k|        double              value_raw  = value.unsafe();
  298|   150k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|   150k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|   150k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|   150k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|   150k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|   150k|        FloatRegister& first_reg = GetFloatRegister(id);
  307|   150k|        FloatRegister& second_reg =
  308|   150k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|   150k|        first_reg.SetValue(first_value);
  311|   150k|        second_reg.SetValue(second_value);
  312|       |
  313|   150k|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|   150k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|   150k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|   150k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|   150k|    }
_ZN3dlx9Processor7GetFPSREv:
  321|  1.14M|    {
  322|  1.14M|        return m_FPSR;
  323|  1.14M|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|  1.00M|    {
  327|  1.00M|        return m_FPSR;
  328|  1.00M|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|  1.00M|    {
  332|  1.00M|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|  1.00M|        return status_reg.Get();
  335|  1.00M|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|  1.14M|    {
  339|  1.14M|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|  1.14M|        status_reg.SetStatus(value);
  342|  1.14M|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  9.44M|    {
  346|  9.44M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  9.44M|        inst.Execute(*this);
  349|  9.44M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  8.30k|    {
  353|  8.30k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 6.74k, False: 1.55k]
  ------------------
  354|  6.74k|        {
  355|  6.74k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  6.74k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  6.74k|            return false;
  357|  6.74k|        }
  358|       |
  359|  1.55k|        m_CurrentProgram = &program;
  360|       |
  361|  1.55k|        m_ProgramCounter               = 0u;
  362|  1.55k|        m_Halted                       = false;
  363|  1.55k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  1.55k|        m_LastRaisedException          = Exception::None;
  365|  1.55k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  1.55k|        return true;
  368|  8.30k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  1.86M|    {
  373|  1.86M|        return m_CurrentProgram;
  374|  1.86M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  9.44M|    {
  378|       |        // No nothing when no program is loaded
  379|  9.44M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 9.44M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  9.44M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 119, False: 9.44M]
  ------------------
  386|    119|        {
  387|    119|            m_Halted                       = true;
  388|    119|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|    119|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  9.44M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 119, False: 9.44M]
  ------------------
  393|    119|        {
  394|    119|            return;
  395|    119|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  9.44M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  9.44M|        const auto& current_instruction =
  402|  9.44M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  9.44M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  9.44M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 99, False: 9.44M]
  ------------------
  409|     99|        {
  410|     99|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|     99|            return;
  412|     99|        }
  413|       |
  414|  9.44M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  9.44M|        ++m_CurrentStepCount;
  417|       |
  418|  9.44M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 1.33k, False: 9.44M]
  |  Branch (418:14): [True: 9.44M, False: 0]
  |  Branch (418:42): [True: 944, False: 9.44M]
  ------------------
  419|  9.44M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 389, False: 9.44M]
  ------------------
  420|  1.33k|        {
  421|  1.33k|            m_Halted                       = true;
  422|  1.33k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|  1.33k|        }
  424|  9.44M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  1.55k|    {
  428|       |        // Do nothing when no program is loaded
  429|  1.55k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 1.55k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  1.55k|        m_ProgramCounter               = 0u;
  435|  1.55k|        m_Halted                       = false;
  436|  1.55k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  1.55k|        m_LastRaisedException          = Exception::None;
  438|  1.55k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  9.44M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 9.44M, False: 1.55k]
  ------------------
  441|  9.44M|        {
  442|  9.44M|            ExecuteStep();
  443|  9.44M|        }
  444|       |
  445|  1.55k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  1.55k|                   "RegisterAccessType was not reset correctly");
  447|  1.55k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  8.30k|    {
  464|  8.30k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 265k, False: 8.30k]
  ------------------
  465|   265k|        {
  466|   265k|            reg.SetSignedValue(0);
  467|   265k|        }
  468|       |
  469|  8.30k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 265k, False: 8.30k]
  ------------------
  470|   265k|        {
  471|   265k|            reg.SetValue(0.0f);
  472|   265k|        }
  473|       |
  474|  8.30k|        m_FPSR.SetStatus(false);
  475|  8.30k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  8.30k|    {
  479|  8.30k|        m_MemoryBlock.Clear();
  480|  8.30k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|   430k|    {
  488|   430k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|   430k|        m_LastRaisedException = exception;
  491|       |
  492|   430k|        switch (exception)
  493|   430k|        {
  494|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 6, False: 430k]
  ------------------
  495|      6|                m_Halted = true;
  496|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      6|                return;
  498|   100k|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 100k, False: 329k]
  ------------------
  499|   100k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|   100k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|   100k|                return;
  501|   101k|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 101k, False: 328k]
  ------------------
  502|   101k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|   101k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|   101k|                return;
  504|      1|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 1, False: 430k]
  ------------------
  505|      1|                m_Halted = true;
  506|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      1|                return;
  508|      9|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 9, False: 430k]
  ------------------
  509|      9|                m_Halted = true;
  510|      9|                return;
  511|     48|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 48, False: 430k]
  ------------------
  512|     48|                m_Halted = true;
  513|     48|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     48|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|     48|                return;
  515|   228k|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 228k, False: 201k]
  ------------------
  516|   228k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|   228k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|   228k|                return;
  518|     23|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 23, False: 430k]
  ------------------
  519|     23|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     23|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     23|                m_Halted = true;
  521|     23|                return;
  522|     14|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 14, False: 430k]
  ------------------
  523|     14|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     14|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     14|                m_Halted = true;
  525|     14|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 430k]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|   430k|#endif
  531|   430k|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      8|    {
  558|      8|        return m_MemoryBlock;
  559|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   713k|    {
  573|   713k|        return m_NextProgramCounter;
  574|   713k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  1.86M|    {
  578|  1.86M|        m_NextProgramCounter = new_npc;
  579|  1.86M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  18.5M|    {
   36|  18.5M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  18.5M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  18.5M|        switch (expected_access)
   40|  18.5M|        {
   41|  4.73M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 4.73M, False: 13.7M]
  ------------------
   42|  4.73M|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 18.5M]
  ------------------
   44|      0|                return false;
   45|   153k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 153k, False: 18.3M]
  ------------------
   46|   153k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 76.6k, False: 76.6k]
  |  Branch (46:63): [True: 76.6k, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 18.5M]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|  66.7k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 66.7k, False: 18.4M]
  ------------------
   51|  66.7k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 33.3k, False: 33.3k]
  |  Branch (51:63): [True: 33.3k, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 18.5M]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  13.5M|            default:
  ------------------
  |  Branch (54:13): [True: 13.5M, False: 4.95M]
  ------------------
   55|  13.5M|                return expected_access == access;
   56|  18.5M|        }
   57|  18.5M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   774k|    {
   14|   774k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 102k, False: 672k]
  ------------------
   15|   102k|        {
   16|   102k|            char first_char = token[0];
   17|   102k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 58.2k, False: 44.3k]
  |  Branch (17:38): [True: 3.92k, False: 40.3k]
  ------------------
   18|  62.1k|            {
   19|  62.1k|                char second_char = token[1];
   20|  62.1k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 59.3k, False: 2.78k]
  |  Branch (20:43): [True: 59.3k, False: 83]
  ------------------
   21|  59.3k|                {
   22|  59.3k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  59.3k|                }
   24|  62.1k|            }
   25|   102k|        }
   26|   672k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 360k, False: 311k]
  ------------------
   27|   360k|        {
   28|   360k|            char first_char = token[0];
   29|   360k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 22.0k, False: 338k]
  |  Branch (29:38): [True: 7.47k, False: 330k]
  ------------------
   30|  29.5k|            {
   31|  29.5k|                char second_char = token[1];
   32|  29.5k|                char third_char  = token[2];
   33|       |
   34|  29.5k|                switch (second_char)
   35|  29.5k|                {
   36|  13.4k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 13.4k, False: 16.0k]
  ------------------
   37|  13.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 11.5k, False: 1.93k]
  |  Branch (37:50): [True: 10.7k, False: 807]
  ------------------
   38|  10.7k|                        {
   39|  10.7k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  10.7k|                        }
   41|  2.74k|                        break;
   42|  13.4k|                    }
   43|  8.33k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 8.33k, False: 21.2k]
  ------------------
   44|  8.33k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 6.76k, False: 1.57k]
  |  Branch (44:50): [True: 6.51k, False: 248]
  ------------------
   45|  6.51k|                        {
   46|  6.51k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  6.51k|                        }
   48|  1.82k|                        break;
   49|  8.33k|                    }
   50|  4.42k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 4.42k, False: 25.1k]
  ------------------
   51|  4.42k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 2.63k, False: 1.78k]
  |  Branch (51:50): [True: 1.48k, False: 305]
  ------------------
   52|  4.11k|                        {
   53|  4.11k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  4.11k|                        }
   55|    305|                        break;
   56|  4.42k|                    }
   57|  3.30k|                    default: {
  ------------------
  |  Branch (57:21): [True: 3.30k, False: 26.2k]
  ------------------
   58|  3.30k|                        break;
   59|  4.42k|                    }
   60|  29.5k|                }
   61|  29.5k|            }
   62|   360k|        }
   63|       |
   64|   694k|        return IntRegisterID::None;
   65|   774k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   694k|    {
   69|   694k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 43.2k, False: 651k]
  ------------------
   70|  43.2k|        {
   71|  43.2k|            char first_char = token[0];
   72|  43.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 6.12k, False: 37.1k]
  |  Branch (72:38): [True: 614, False: 36.4k]
  ------------------
   73|  6.74k|            {
   74|  6.74k|                char second_char = token[1];
   75|  6.74k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 6.34k, False: 401]
  |  Branch (75:43): [True: 6.24k, False: 100]
  ------------------
   76|  6.24k|                {
   77|  6.24k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  6.24k|                }
   79|  6.74k|            }
   80|  43.2k|        }
   81|   651k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 339k, False: 311k]
  ------------------
   82|   339k|        {
   83|   339k|            char first_char = token[0];
   84|   339k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 23.2k, False: 315k]
  |  Branch (84:38): [True: 6.88k, False: 309k]
  ------------------
   85|  30.1k|            {
   86|  30.1k|                char second_char = token[1];
   87|  30.1k|                char third_char  = token[2];
   88|       |
   89|  30.1k|                switch (second_char)
   90|  30.1k|                {
   91|  5.72k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 5.72k, False: 24.3k]
  ------------------
   92|  5.72k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.23k, False: 3.49k]
  |  Branch (92:50): [True: 2.16k, False: 66]
  ------------------
   93|  2.16k|                        {
   94|  2.16k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  2.16k|                        }
   96|  3.55k|                        break;
   97|  5.72k|                    }
   98|  20.8k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 20.8k, False: 9.23k]
  ------------------
   99|  20.8k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 20.6k, False: 195]
  |  Branch (99:50): [True: 20.3k, False: 338]
  ------------------
  100|  20.3k|                        {
  101|  20.3k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  20.3k|                        }
  103|    533|                        break;
  104|  20.8k|                    }
  105|    533|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 388, False: 29.7k]
  ------------------
  106|    388|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 120, False: 268]
  |  Branch (106:50): [True: 104, False: 164]
  ------------------
  107|    224|                        {
  108|    224|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    224|                        }
  110|    164|                        break;
  111|    388|                    }
  112|  3.12k|                    default: {
  ------------------
  |  Branch (112:21): [True: 3.12k, False: 26.9k]
  ------------------
  113|  3.12k|                        break;
  114|    388|                    }
  115|  30.1k|                }
  116|  30.1k|            }
  117|   339k|        }
  118|       |
  119|   665k|        return FloatRegisterID::None;
  120|   694k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   787k|    {
  124|   787k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 209k, False: 577k]
  ------------------
  125|   209k|        {
  126|   209k|            char c1 = token[0];
  127|   209k|            char c2 = token[1];
  128|   209k|            char c3 = token[2];
  129|   209k|            char c4 = token[3];
  130|       |
  131|   209k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 14.9k, False: 194k]
  |  Branch (131:34): [True: 431, False: 194k]
  |  Branch (131:49): [True: 14.9k, False: 381]
  |  Branch (131:62): [True: 152, False: 229]
  ------------------
  132|   209k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 14.8k, False: 273]
  |  Branch (132:34): [True: 194, False: 79]
  |  Branch (132:49): [True: 14.8k, False: 194]
  |  Branch (132:62): [True: 0, False: 194]
  ------------------
  133|   209k|        }
  134|       |
  135|   577k|        return false;
  136|   787k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  1.15M|    {
   12|  1.15M|        m_Value = value;
   13|  1.15M|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|  1.00M|    {
   17|  1.00M|        return m_Value;
   18|  1.00M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.33M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   597k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  2.63M|    {
   41|  2.63M|        return m_Type;
   42|  2.63M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   861k|    {
   51|   861k|        return m_LineNumber;
   52|   861k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   723k|    {
   56|   723k|        return m_Column;
   57|   723k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   417k|    {
   66|   417k|        return m_Text;
   67|   417k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   151k|    {
   80|   151k|        return m_HasHint;
   81|   151k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   199k|    {
   85|   199k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   199k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   199k|                   m_Type == Type::ImmediateInteger);
   88|   199k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   199k|        return m_Hint;
   91|   199k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  8.30k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  8.30k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  8.30k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  4.52k|    {
   51|  4.52k|        auto it = m_Iterator;
   52|  18.0k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 13.5k, False: 4.51k]
  ------------------
   53|  13.5k|        {
   54|  13.5k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 17, False: 13.5k]
  ------------------
   55|     17|            {
   56|     17|                return false;
   57|     17|            }
   58|  13.5k|        }
   59|       |
   60|  4.51k|        return true;
   61|  4.52k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.92M|    {
   65|  1.92M|        return m_Iterator != m_Tokens.end();
   66|  1.92M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.92M|    {
   70|  1.92M|        return m_Iterator == m_Tokens.end();
   71|  1.92M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.92M|    {
   85|  1.92M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.92M|        return *m_Iterator++;
   91|  1.92M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  4.51k|    {
  164|  4.51k|        return m_Iterator;
  165|  4.51k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    340|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    340|        return m_Tokens.rbegin();
  224|    340|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  3.71k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  3.71k|        return m_Tokens.rend();
  233|  3.71k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  8.30k|    {
   63|  8.30k|        TokenStream tokens;
   64|       |
   65|  8.30k|        std::string_view current_token;
   66|       |
   67|  8.30k|        phi::u64 current_line_number{1u};
   68|  8.30k|        phi::u64 current_column{1u};
   69|  8.30k|        phi::u64 token_begin{0u};
   70|       |
   71|  8.30k|        phi::boolean parsing_comment{false};
   72|       |
   73|  4.85M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 4.84M, False: 8.30k]
  ------------------
   74|  4.84M|        {
   75|  4.84M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  4.84M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 826k, False: 4.01M]
  ------------------
   78|   826k|            {
   79|   826k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 424k, False: 401k]
  ------------------
   80|   424k|                {
   81|       |                    // Skip empty lines
   82|   424k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   424k|                                        current_line_number, current_column);
   84|       |
   85|   424k|                    parsing_comment = false;
   86|   424k|                    current_line_number += 1u;
   87|   424k|                    current_column = 1u;
   88|   424k|                    continue;
   89|   424k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   401k|                tokens.emplace_back(
   93|   401k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   401k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   401k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   401k|                                    current_line_number, current_column);
   98|       |
   99|   401k|                current_token   = std::string_view{};
  100|   401k|                parsing_comment = false;
  101|   401k|                current_line_number += 1u;
  102|   401k|                current_column = 0u;
  103|   401k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  4.01M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 5.61k, False: 4.01M]
  |  Branch (105:34): [True: 217k, False: 3.79M]
  ------------------
  106|   223k|            {
  107|   223k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 204k, False: 18.7k]
  ------------------
  108|   204k|                {
  109|   204k|                    token_begin = i;
  110|   204k|                }
  111|  18.7k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 15.1k, False: 3.61k]
  ------------------
  112|  15.1k|                {
  113|  15.1k|                    tokens.emplace_back(ParseToken(
  114|  15.1k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  15.1k|                            current_line_number, current_column - current_token.length()));
  116|  15.1k|                    token_begin   = i;
  117|  15.1k|                    current_token = std::string_view{};
  118|  15.1k|                }
  119|       |
  120|   223k|                parsing_comment = true;
  121|   223k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   223k|            }
  123|  3.79M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 473k, False: 3.32M]
  ------------------
  124|   473k|            {
  125|       |                // simply append the character
  126|   473k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   473k|            }
  128|  3.32M|            else
  129|  3.32M|            {
  130|       |                // Not parsing a comment
  131|  3.32M|                switch (c)
  132|  3.32M|                {
  133|   483k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 483k, False: 2.83M]
  ------------------
  134|   487k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 3.74k, False: 3.31M]
  ------------------
  135|   500k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 12.4k, False: 3.30M]
  ------------------
  136|   500k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 5.96k, False: 494k]
  ------------------
  137|  5.96k|                        {
  138|  5.96k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  5.96k|                            continue;
  141|  5.96k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   494k|                        tokens.emplace_back(ParseToken(
  145|   494k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   494k|                                current_line_number, current_column - current_token.length()));
  147|   494k|                        current_token = std::string_view{};
  148|   494k|                        break;
  149|  36.6k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 36.6k, False: 3.28M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  36.6k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 29.6k, False: 7.05k]
  ------------------
  152|  29.6k|                        {
  153|  29.6k|                            current_token =
  154|  29.6k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  29.6k|                            tokens.emplace_back(ParseToken(
  156|  29.6k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  29.6k|                                    current_line_number,
  158|  29.6k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  29.6k|                            current_token = std::string_view{};
  161|  29.6k|                        }
  162|  7.05k|                        else
  163|  7.05k|                        {
  164|       |                            // Orphan colon
  165|  7.05k|                            token_begin = i;
  166|       |
  167|  7.05k|                            tokens.emplace_back(Token::Type::Colon,
  168|  7.05k|                                                source.substr(token_begin.unsafe(), 1),
  169|  7.05k|                                                current_line_number, current_column);
  170|  7.05k|                        }
  171|  36.6k|                        break;
  172|  68.8k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 68.8k, False: 3.25M]
  ------------------
  173|  77.9k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 9.12k, False: 3.31M]
  ------------------
  174|  80.3k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 2.45k, False: 3.31M]
  ------------------
  175|  80.3k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 69.8k, False: 10.5k]
  ------------------
  176|  69.8k|                        {
  177|  69.8k|                            tokens.emplace_back(ParseToken(
  178|  69.8k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  69.8k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  69.8k|                            current_token = std::string_view{};
  182|  69.8k|                        }
  183|       |
  184|  80.3k|                        Token::Type type;
  185|  80.3k|                        switch (c)
  186|  80.3k|                        {
  187|  68.8k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 68.8k, False: 11.5k]
  ------------------
  188|  68.8k|                                type = Token::Type::Comma;
  189|  68.8k|                                break;
  190|  9.12k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 9.12k, False: 71.2k]
  ------------------
  191|  9.12k|                                type = Token::Type::OpenBracket;
  192|  9.12k|                                break;
  193|  2.45k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 2.45k, False: 77.9k]
  ------------------
  194|  2.45k|                                type = Token::Type::ClosingBracket;
  195|  2.45k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 80.3k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  80.3k|#endif
  201|  80.3k|                        }
  202|       |
  203|  80.3k|                        token_begin = i;
  204|       |
  205|  80.3k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  80.3k|                                            current_line_number, current_column);
  207|  80.3k|                        break;
  208|       |
  209|  2.70M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.70M, False: 617k]
  ------------------
  210|  2.70M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 794k, False: 1.90M]
  ------------------
  211|   794k|                        {
  212|   794k|                            token_begin = i;
  213|   794k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.70M|                        current_token =
  217|  2.70M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  3.32M|                }
  219|  3.32M|            }
  220|       |
  221|  4.41M|            current_column += 1u;
  222|  4.41M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  8.30k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 3.32k, False: 4.97k]
  ------------------
  226|  3.32k|        {
  227|  3.32k|            tokens.emplace_back(
  228|  3.32k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  3.32k|                               current_line_number, current_column - current_token.length()));
  230|  3.32k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  8.30k|        tokens.finalize();
  234|       |
  235|  8.30k|        return tokens;
  236|  8.30k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.01M|    {
   11|  1.01M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 15.3k, False: 998k]
  |  Branch (11:35): [True: 15.3k, False: 93]
  ------------------
   12|  15.3k|        {
   13|  15.3k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  15.3k|            if (number)
  ------------------
  |  Branch (15:17): [True: 10.7k, False: 4.53k]
  ------------------
   16|  10.7k|            {
   17|  10.7k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  10.7k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  10.7k|            }
   20|       |
   21|  4.53k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  15.3k|        }
   23|       |
   24|   998k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 2.09k, False: 996k]
  |  Branch (24:35): [True: 217k, False: 779k]
  ------------------
   25|   219k|        {
   26|   219k|            return {Token::Type::Comment, token, line_number, column};
   27|   219k|        }
   28|       |
   29|   779k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 24.8k, False: 754k]
  ------------------
   30|  24.8k|        {
   31|  24.8k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  24.8k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  24.8k|        }
   34|       |
   35|   754k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 14.8k, False: 739k]
  ------------------
   36|  14.8k|        {
   37|  14.8k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  14.8k|        }
   39|       |
   40|   739k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 79.6k, False: 659k]
  ------------------
   41|  79.6k|        {
   42|  79.6k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  79.6k|                    static_cast<std::uint32_t>(id)};
   44|  79.6k|        }
   45|       |
   46|   659k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 28.6k, False: 631k]
  ------------------
   47|  28.6k|        {
   48|  28.6k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  28.6k|                    static_cast<std::uint32_t>(id)};
   50|  28.6k|        }
   51|       |
   52|   631k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 453k, False: 178k]
  ------------------
   53|   453k|        {
   54|   453k|            return {Token::Type::OpCode, token, line_number, column,
   55|   453k|                    static_cast<std::uint32_t>(opcode)};
   56|   453k|        }
   57|       |
   58|   178k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   631k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  8.30k|    {
   53|       |        // Constants
   54|  8.30k|        constexpr std::uint8_t number_of_opcodes =
   55|  8.30k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  8.30k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  8.30k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  8.30k|        std::string ret;
   60|       |
   61|  1.31M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.31M, False: 8.24k]
  ------------------
   62|  1.31M|        {
   63|  1.31M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.31M|            switch (current_value)
   66|  1.31M|            {
   67|       |                // OpCode
   68|   430k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 430k, False: 879k]
  ------------------
   69|       |                    // Has one more value
   70|   430k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 430k, False: 431]
  ------------------
   71|   430k|                    {
   72|   430k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   430k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   430k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1, False: 430k]
  ------------------
   77|      1|                        {
   78|      1|                            return detail::ErrorString;
   79|      1|                        }
   80|   430k|                    }
   81|   430k|                    break;
   82|   430k|                }
   83|       |
   84|       |                // Int Register
   85|   430k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 84.3k, False: 1.22M]
  ------------------
   86|       |                    // Has one more value
   87|  84.3k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 84.2k, False: 77]
  ------------------
   88|  84.2k|                    {
   89|  84.2k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  84.2k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  84.2k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 84.2k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  84.2k|                    }
   97|  84.3k|                    break;
   98|  84.3k|                }
   99|       |
  100|       |                // Float register
  101|  84.3k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 30.6k, False: 1.27M]
  ------------------
  102|       |                    // Has one more value
  103|  30.6k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 30.5k, False: 135]
  ------------------
  104|  30.5k|                    {
  105|  30.5k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  30.5k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  30.5k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 30.5k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  30.5k|                    }
  113|  30.6k|                    break;
  114|  30.6k|                }
  115|       |
  116|       |                // Floating point status register
  117|  30.6k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 16.2k, False: 1.29M]
  ------------------
  118|  16.2k|                    ret += "FPSR";
  119|  16.2k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 16.2k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  16.2k|                    break;
  125|  16.2k|                }
  126|       |
  127|       |                // Immediate integer
  128|  21.5k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 21.5k, False: 1.28M]
  ------------------
  129|  21.5k|                    ret += "#";
  130|  21.5k|                    [[fallthrough]];
  131|  21.5k|                }
  132|       |
  133|       |                // Integer literal
  134|  77.1k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 55.6k, False: 1.25M]
  ------------------
  135|  77.1k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  77.1k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 77.0k, False: 158]
  ------------------
  138|  77.0k|                    {
  139|  77.0k|                        std::int16_t value = 0;
  140|       |
  141|   230k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 153k, False: 77.0k]
  ------------------
  142|   153k|                        {
  143|   153k|                            value <<= 8;
  144|   153k|                            value &= data[index++];
  145|   153k|                        }
  146|       |
  147|  77.0k|                        ret += std::to_string(value);
  148|  77.0k|                    }
  149|  77.1k|                    break;
  150|  21.5k|                }
  151|       |
  152|       |                // Label
  153|  30.0k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 30.0k, False: 1.28M]
  ------------------
  154|  30.0k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  30.0k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 30.0k, False: 9]
  ------------------
  157|  30.0k|                    {
  158|  30.0k|                        std::string label_name = "lbl_";
  159|       |
  160|   179k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 149k, False: 30.0k]
  ------------------
  161|   149k|                        {
  162|   149k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   149k|                            label_name += c;
  165|   149k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  30.0k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 29.3k, False: 690]
  |  Branch (168:45): [True: 24.0k, False: 5.25k]
  ------------------
  169|  24.0k|                        {
  170|  24.0k|                            label_name += ':';
  171|  24.0k|                            ret += label_name;
  172|  24.0k|                        }
  173|  5.94k|                        else
  174|  5.94k|                        {
  175|  5.94k|                            ret += label_name;
  176|  5.94k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 8, False: 5.93k]
  ------------------
  177|      8|                            {
  178|      8|                                return detail::ErrorString;
  179|      8|                            }
  180|  5.94k|                        }
  181|  30.0k|                    }
  182|  30.0k|                    break;
  183|  30.0k|                }
  184|       |
  185|       |                // Newline
  186|   420k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 420k, False: 889k]
  ------------------
  187|   420k|                    ret += '\n';
  188|   420k|                    break;
  189|  30.0k|                }
  190|       |
  191|       |                // Comment
  192|   220k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 220k, False: 1.08M]
  ------------------
  193|   220k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   220k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 219k, False: 199]
  ------------------
  196|   219k|                    {
  197|   219k|                        std::string comment = "; ";
  198|       |
  199|  1.31M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 1.09M, False: 219k]
  ------------------
  200|  1.09M|                        {
  201|  1.09M|                            comment += static_cast<char>(data[index++]);
  202|  1.09M|                        }
  203|       |
  204|   219k|                        ret += comment + '\n';
  205|   219k|                    }
  206|   220k|                    break;
  207|  30.0k|                }
  208|       |
  209|       |                // Ignore
  210|     44|                default:
  ------------------
  |  Branch (210:17): [True: 44, False: 1.31M]
  ------------------
  211|     44|                    return detail::ErrorString;
  212|  1.31M|            }
  213|  1.31M|        }
  214|       |
  215|  8.24k|        return ret;
  216|  8.30k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   567k|        {
   20|   567k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 564k, False: 2.70k]
  ------------------
   21|   564k|            {
   22|   564k|                std::uint8_t val = data[index++];
   23|   564k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 493k, False: 70.8k]
  ------------------
   24|   493k|                {
   25|   493k|                    text += ' ';
   26|   493k|                }
   27|  70.8k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 70.8k, False: 13]
  ------------------
   28|  70.8k|                {
   29|  70.8k|                    text += ',';
   30|  70.8k|                }
   31|     13|                else
   32|     13|                {
   33|     13|                    return false;
   34|     13|                }
   35|   564k|            }
   36|       |
   37|   567k|            return true;
   38|   567k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   149k|        {
   42|   149k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 111k, False: 38.2k]
  ------------------
   43|   111k|            {
   44|   111k|                return '_';
   45|   111k|            }
   46|       |
   47|  38.2k|            return c;
   48|   149k|        }

LLVMFuzzerTestOneInput:
   12|  8.30k|{
   13|  8.30k|    static dlx::Processor processor;
   14|       |
   15|  8.30k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  8.30k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  8.30k|    processor.ClearRegisters();
   22|  8.30k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  8.30k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.55k, False: 6.74k]
  ------------------
   26|  1.55k|    {
   27|  1.55k|        processor.ExecuteCurrentProgram();
   28|  1.55k|    }
   29|       |
   30|  8.30k|    return 0;
   31|  8.30k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  172|  1.12M|        {
  173|  1.12M|            PHI_ASSERT(index < 3u);
  174|       |
  175|  1.12M|            switch (index.unsafe())
  176|  1.12M|            {
  177|   480k|                case 0:
  ------------------
  |  Branch (177:17): [True: 480k, False: 641k]
  ------------------
  178|   480k|                    return m_Arg1Type;
  179|       |
  180|   323k|                case 1:
  ------------------
  |  Branch (180:17): [True: 323k, False: 798k]
  ------------------
  181|   323k|                    return m_Arg2Type;
  182|       |
  183|   317k|                case 2:
  ------------------
  |  Branch (183:17): [True: 317k, False: 804k]
  ------------------
  184|   317k|                    return m_Arg3Type;
  185|       |
  186|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  187|      0|                default:
  ------------------
  |  Branch (187:17): [True: 0, False: 1.12M]
  ------------------
  188|      0|                    PHI_ASSERT_NOT_REACHED();
  189|      0|                    return m_Arg1Type;
  190|  1.12M|#endif
  191|  1.12M|            }
  192|  1.12M|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  198|   304k|        {
  199|   304k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  200|       |
  201|       |            // Count the number of argument we need
  202|   304k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 289k, False: 14.3k]
  ------------------
  203|   289k|            {
  204|   289k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   289k|            }
  206|   304k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 211k, False: 92.4k]
  ------------------
  207|   211k|            {
  208|   211k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   211k|            }
  210|   304k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (210:17): [True: 131k, False: 172k]
  ------------------
  211|   131k|            {
  212|   131k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  213|   131k|            }
  214|       |
  215|   304k|            return number_of_argument_required;
  216|   304k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  219|  7.12M|        {
  220|  7.12M|            return m_RegisterAccessType;
  221|  7.12M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  224|   304k|        {
  225|   304k|            return m_Executor;
  226|   304k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  21.4M|    {
   38|  21.4M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  21.4M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  21.4M|                                         static_cast<underlying_t>(rhs));
   42|  21.4M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  21.4M|    {
   55|  21.4M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  21.4M|        return static_cast<underlying_t>(type & test) != 0;
   58|  21.4M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  205|   950k|    {
  206|   950k|        switch (value)
  207|   950k|        {
  208|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  209|      0|    case OpCode::name:                                                                             \
  210|      0|        return #name;
  211|       |
  212|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   216k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|   216k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 216k, False: 734k]
  |  |  |  |  ------------------
  |  |  |  |  210|   216k|        return #name;
  |  |  ------------------
  |  |   16|   216k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  17.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 17.7k, False: 932k]
  |  |  |  |  ------------------
  |  |  |  |  210|  17.7k|        return #name;
  |  |  ------------------
  |  |   17|  17.7k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  5.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.39k, False: 945k]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.39k|        return #name;
  |  |  ------------------
  |  |   18|  5.39k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  4.66k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.66k, False: 945k]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.66k|        return #name;
  |  |  ------------------
  |  |   19|  28.1k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  28.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 28.1k, False: 922k]
  |  |  |  |  ------------------
  |  |  |  |  210|  28.1k|        return #name;
  |  |  ------------------
  |  |   20|  28.1k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  24.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 24.5k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  210|  24.5k|        return #name;
  |  |  ------------------
  |  |   21|  24.5k|                                                                                                   \
  |  |   22|  24.5k|    /* Sub */                                                                                      \
  |  |   23|  24.6k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  24.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 24.6k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  210|  24.6k|        return #name;
  |  |  ------------------
  |  |   24|  24.6k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.36k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.36k|        return #name;
  |  |  ------------------
  |  |   25|  17.9k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  17.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 17.9k, False: 932k]
  |  |  |  |  ------------------
  |  |  |  |  210|  17.9k|        return #name;
  |  |  ------------------
  |  |   26|  17.9k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    476|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 476, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    476|        return #name;
  |  |  ------------------
  |  |   27|  24.9k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  24.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 24.9k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  210|  24.9k|        return #name;
  |  |  ------------------
  |  |   28|  24.9k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.33k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.33k|        return #name;
  |  |  ------------------
  |  |   29|  2.33k|                                                                                                   \
  |  |   30|  2.33k|    /* Multiplication */                                                                           \
  |  |   31|  2.33k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  2.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.09k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.09k|        return #name;
  |  |  ------------------
  |  |   32|  2.09k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    925|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 925, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    925|        return #name;
  |  |  ------------------
  |  |   33|  12.0k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  12.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 12.0k, False: 938k]
  |  |  |  |  ------------------
  |  |  |  |  210|  12.0k|        return #name;
  |  |  ------------------
  |  |   34|  12.0k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    595|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 595, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    595|        return #name;
  |  |  ------------------
  |  |   35|  4.65k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  4.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.65k, False: 945k]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.65k|        return #name;
  |  |  ------------------
  |  |   36|  4.65k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    298|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 298, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    298|        return #name;
  |  |  ------------------
  |  |   37|    298|                                                                                                   \
  |  |   38|    298|    /* Division */                                                                                 \
  |  |   39|    298|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    130|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 130, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    130|        return #name;
  |  |  ------------------
  |  |   40|    229|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    229|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 229, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    229|        return #name;
  |  |  ------------------
  |  |   41|    229|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    171|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 171, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    171|        return #name;
  |  |  ------------------
  |  |   42|  25.0k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  25.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 25.0k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  210|  25.0k|        return #name;
  |  |  ------------------
  |  |   43|  25.0k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    120|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 120, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    120|        return #name;
  |  |  ------------------
  |  |   44|    512|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    512|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 512, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    512|        return #name;
  |  |  ------------------
  |  |   45|    512|                                                                                                   \
  |  |   46|    512|    /* Shift left (logical) */                                                                     \
  |  |   47|  1.09k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  1.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.09k, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.09k|        return #name;
  |  |  ------------------
  |  |   48|  1.09k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    560|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 560, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    560|        return #name;
  |  |  ------------------
  |  |   49|    560|                                                                                                   \
  |  |   50|    560|    /* Shift right (logical) */                                                                    \
  |  |   51|  18.8k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  18.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 18.8k, False: 931k]
  |  |  |  |  ------------------
  |  |  |  |  210|  18.8k|        return #name;
  |  |  ------------------
  |  |   52|  24.9k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  24.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 24.9k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  210|  24.9k|        return #name;
  |  |  ------------------
  |  |   53|  24.9k|                                                                                                   \
  |  |   54|  24.9k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  24.9k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  13.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 13.8k, False: 936k]
  |  |  |  |  ------------------
  |  |  |  |  210|  13.8k|        return #name;
  |  |  ------------------
  |  |   56|  13.8k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 156, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    156|        return #name;
  |  |  ------------------
  |  |   57|    156|                                                                                                   \
  |  |   58|    156|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    186|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    186|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 186, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    186|        return #name;
  |  |  ------------------
  |  |   60|  1.95k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.95k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.95k|        return #name;
  |  |  ------------------
  |  |   61|  1.95k|                                                                                                   \
  |  |   62|  1.95k|    /* Logic */                                                                                    \
  |  |   63|  1.95k|                                                                                                   \
  |  |   64|  1.95k|    /* And */                                                                                      \
  |  |   65|  1.95k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    117|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 117, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    117|        return #name;
  |  |  ------------------
  |  |   66|  7.90k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  7.90k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 7.90k, False: 942k]
  |  |  |  |  ------------------
  |  |  |  |  210|  7.90k|        return #name;
  |  |  ------------------
  |  |   67|  7.90k|                                                                                                   \
  |  |   68|  7.90k|    /* Or */                                                                                       \
  |  |   69|  7.90k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    846|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 846, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    846|        return #name;
  |  |  ------------------
  |  |   70|    846|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    142|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 142, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    142|        return #name;
  |  |  ------------------
  |  |   71|    142|                                                                                                   \
  |  |   72|    142|    /* XOR */                                                                                      \
  |  |   73|  2.04k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  2.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.04k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.04k|        return #name;
  |  |  ------------------
  |  |   74|  3.64k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  3.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 3.64k, False: 946k]
  |  |  |  |  ------------------
  |  |  |  |  210|  3.64k|        return #name;
  |  |  ------------------
  |  |   75|  3.64k|                                                                                                   \
  |  |   76|  3.64k|    /* Set conditionals */                                                                         \
  |  |   77|  3.64k|                                                                                                   \
  |  |   78|  3.64k|    /* Less than */                                                                                \
  |  |   79|  3.64k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    767|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 767, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    767|        return #name;
  |  |  ------------------
  |  |   80|  13.6k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  13.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 13.6k, False: 936k]
  |  |  |  |  ------------------
  |  |  |  |  210|  13.6k|        return #name;
  |  |  ------------------
  |  |   81|  13.6k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  1.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.39k, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.39k|        return #name;
  |  |  ------------------
  |  |   82|  1.39k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    281|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 281, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    281|        return #name;
  |  |  ------------------
  |  |   83|    281|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    106|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 106, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    106|        return #name;
  |  |  ------------------
  |  |   84|    437|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    437|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 437, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    437|        return #name;
  |  |  ------------------
  |  |   85|    437|                                                                                                   \
  |  |   86|    437|    /* Greater than */                                                                             \
  |  |   87|  13.7k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  13.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 13.7k, False: 936k]
  |  |  |  |  ------------------
  |  |  |  |  210|  13.7k|        return #name;
  |  |  ------------------
  |  |   88|  13.7k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    363|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 363, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    363|        return #name;
  |  |  ------------------
  |  |   89|  4.06k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  4.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 4.06k, False: 946k]
  |  |  |  |  ------------------
  |  |  |  |  210|  4.06k|        return #name;
  |  |  ------------------
  |  |   90|  4.06k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    138|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 138, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    138|        return #name;
  |  |  ------------------
  |  |   91|  2.04k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  2.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.04k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.04k|        return #name;
  |  |  ------------------
  |  |   92|  20.9k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  20.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 20.9k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  210|  20.9k|        return #name;
  |  |  ------------------
  |  |   93|  20.9k|                                                                                                   \
  |  |   94|  20.9k|    /* Less than or equal */                                                                       \
  |  |   95|  20.9k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  2.90k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.90k, False: 947k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.90k|        return #name;
  |  |  ------------------
  |  |   96|  2.90k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    745|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 745, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    745|        return #name;
  |  |  ------------------
  |  |   97|  5.43k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  5.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.43k, False: 945k]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.43k|        return #name;
  |  |  ------------------
  |  |   98|  5.43k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  1.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.72k, False: 948k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.72k|        return #name;
  |  |  ------------------
  |  |   99|  1.72k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    918|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 918, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    918|        return #name;
  |  |  ------------------
  |  |  100|  9.79k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  9.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 9.79k, False: 940k]
  |  |  |  |  ------------------
  |  |  |  |  210|  9.79k|        return #name;
  |  |  ------------------
  |  |  101|  9.79k|                                                                                                   \
  |  |  102|  9.79k|    /* Greater than or equal */                                                                    \
  |  |  103|  33.3k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  33.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 33.3k, False: 917k]
  |  |  |  |  ------------------
  |  |  |  |  210|  33.3k|        return #name;
  |  |  ------------------
  |  |  104|  33.3k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  10.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 10.0k, False: 940k]
  |  |  |  |  ------------------
  |  |  |  |  210|  10.0k|        return #name;
  |  |  ------------------
  |  |  105|  10.0k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    414|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 414, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    414|        return #name;
  |  |  ------------------
  |  |  106|  20.9k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  20.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 20.9k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  210|  20.9k|        return #name;
  |  |  ------------------
  |  |  107|  20.9k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 90, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     90|        return #name;
  |  |  ------------------
  |  |  108|    162|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    162|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 162, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    162|        return #name;
  |  |  ------------------
  |  |  109|    162|                                                                                                   \
  |  |  110|    162|    /* Equal */                                                                                    \
  |  |  111|    162|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 107, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    107|        return #name;
  |  |  ------------------
  |  |  112|  6.72k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  6.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 6.72k, False: 943k]
  |  |  |  |  ------------------
  |  |  |  |  210|  6.72k|        return #name;
  |  |  ------------------
  |  |  113|  39.7k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  39.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 39.7k, False: 910k]
  |  |  |  |  ------------------
  |  |  |  |  210|  39.7k|        return #name;
  |  |  ------------------
  |  |  114|  39.7k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|  19.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 19.0k, False: 931k]
  |  |  |  |  ------------------
  |  |  |  |  210|  19.0k|        return #name;
  |  |  ------------------
  |  |  115|  20.7k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  20.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 20.7k, False: 929k]
  |  |  |  |  ------------------
  |  |  |  |  210|  20.7k|        return #name;
  |  |  ------------------
  |  |  116|  20.7k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    144|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 144, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    144|        return #name;
  |  |  ------------------
  |  |  117|    144|                                                                                                   \
  |  |  118|    144|    /* Not equal */                                                                                \
  |  |  119|  21.4k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  21.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 21.4k, False: 928k]
  |  |  |  |  ------------------
  |  |  |  |  210|  21.4k|        return #name;
  |  |  ------------------
  |  |  120|  21.4k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    147|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 147, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    147|        return #name;
  |  |  ------------------
  |  |  121|    567|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    567|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 567, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    567|        return #name;
  |  |  ------------------
  |  |  122|    838|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  209|    838|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 838, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    838|        return #name;
  |  |  ------------------
  |  |  123|    838|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    196|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 196, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    196|        return #name;
  |  |  ------------------
  |  |  124|    196|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 109, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    109|        return #name;
  |  |  ------------------
  |  |  125|    109|                                                                                                   \
  |  |  126|    109|    /* Conditional branching */                                                                    \
  |  |  127|    129|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 129, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    129|        return #name;
  |  |  ------------------
  |  |  128|    129|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 109, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    109|        return #name;
  |  |  ------------------
  |  |  129|    124|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    124|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 124, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    124|        return #name;
  |  |  ------------------
  |  |  130|  47.8k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  47.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 47.8k, False: 902k]
  |  |  |  |  ------------------
  |  |  |  |  210|  47.8k|        return #name;
  |  |  ------------------
  |  |  131|  47.8k|                                                                                                   \
  |  |  132|  47.8k|    /* Unconditional branching */                                                                  \
  |  |  133|  47.8k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  209|  8.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.67k, False: 941k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.67k|        return #name;
  |  |  ------------------
  |  |  134|  8.67k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 96, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     96|        return #name;
  |  |  ------------------
  |  |  135|  7.19k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  7.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 7.19k, False: 943k]
  |  |  |  |  ------------------
  |  |  |  |  210|  7.19k|        return #name;
  |  |  ------------------
  |  |  136|  7.19k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  6.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 6.30k, False: 944k]
  |  |  |  |  ------------------
  |  |  |  |  210|  6.30k|        return #name;
  |  |  ------------------
  |  |  137|  6.30k|                                                                                                   \
  |  |  138|  6.30k|    /* Loading data */                                                                             \
  |  |  139|  8.12k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  8.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.12k, False: 942k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.12k|        return #name;
  |  |  ------------------
  |  |  140|  8.12k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 93, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     93|        return #name;
  |  |  ------------------
  |  |  141|     98|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     98|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 98, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     98|        return #name;
  |  |  ------------------
  |  |  142|     98|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 83, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     83|        return #name;
  |  |  ------------------
  |  |  143|  14.5k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  14.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 14.5k, False: 935k]
  |  |  |  |  ------------------
  |  |  |  |  210|  14.5k|        return #name;
  |  |  ------------------
  |  |  144|  25.2k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  25.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 25.2k, False: 925k]
  |  |  |  |  ------------------
  |  |  |  |  210|  25.2k|        return #name;
  |  |  ------------------
  |  |  145|  25.2k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  146|    122|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 122, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    122|        return #name;
  |  |  ------------------
  |  |  147|    770|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    770|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 770, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    770|        return #name;
  |  |  ------------------
  |  |  148|    770|                                                                                                   \
  |  |  149|    770|    /* Storing data */                                                                             \
  |  |  150|  2.68k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  2.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 2.68k, False: 947k]
  |  |  |  |  ------------------
  |  |  |  |  210|  2.68k|        return #name;
  |  |  ------------------
  |  |  151|  2.68k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|    141|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 141, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    141|        return #name;
  |  |  ------------------
  |  |  152|    141|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 81, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     81|        return #name;
  |  |  ------------------
  |  |  153|  11.3k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  11.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 11.3k, False: 939k]
  |  |  |  |  ------------------
  |  |  |  |  210|  11.3k|        return #name;
  |  |  ------------------
  |  |  154|  11.3k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  209|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 67, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     67|        return #name;
  |  |  ------------------
  |  |  155|  5.07k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  209|  5.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 5.07k, False: 945k]
  |  |  |  |  ------------------
  |  |  |  |  210|  5.07k|        return #name;
  |  |  ------------------
  |  |  156|  16.7k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  209|  16.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 16.7k, False: 933k]
  |  |  |  |  ------------------
  |  |  |  |  210|  16.7k|        return #name;
  |  |  ------------------
  |  |  157|  16.7k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  209|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 101, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    101|        return #name;
  |  |  ------------------
  |  |  158|    101|                                                                                                   \
  |  |  159|    101|    /* Moving data */                                                                              \
  |  |  160|    526|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    526|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 526, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    526|        return #name;
  |  |  ------------------
  |  |  161|    526|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    433|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 433, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    433|        return #name;
  |  |  ------------------
  |  |  162|  1.13k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  209|  1.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 1.13k, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|  1.13k|        return #name;
  |  |  ------------------
  |  |  163|  26.2k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  209|  26.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 26.2k, False: 924k]
  |  |  |  |  ------------------
  |  |  |  |  210|  26.2k|        return #name;
  |  |  ------------------
  |  |  164|  26.2k|                                                                                                   \
  |  |  165|  26.2k|    /* Converting data */                                                                          \
  |  |  166|  26.2k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 93, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     93|        return #name;
  |  |  ------------------
  |  |  167|     99|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 99, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     99|        return #name;
  |  |  ------------------
  |  |  168|     99|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 85, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|     85|        return #name;
  |  |  ------------------
  |  |  169|    779|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    779|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 779, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    779|        return #name;
  |  |  ------------------
  |  |  170|    779|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 114, False: 950k]
  |  |  |  |  ------------------
  |  |  |  |  210|    114|        return #name;
  |  |  ------------------
  |  |  171|    559|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  209|    559|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 559, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    559|        return #name;
  |  |  ------------------
  |  |  172|    559|                                                                                                   \
  |  |  173|    559|    /* Other */                                                                                    \
  |  |  174|  8.17k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  209|  8.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.17k, False: 942k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.17k|        return #name;
  |  |  ------------------
  |  |  175|  8.17k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  209|    608|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 608, False: 949k]
  |  |  |  |  ------------------
  |  |  |  |  210|    608|        return #name;
  |  |  ------------------
  |  |  176|  8.57k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  209|  8.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (209:5): [True: 8.57k, False: 941k]
  |  |  |  |  ------------------
  |  |  |  |  210|  8.57k|        return #name;
  |  |  ------------------
  ------------------
  213|       |
  214|      0|#undef DLX_ENUM_OPCODE_IMPL
  215|       |
  216|      0|            default:
  ------------------
  |  Branch (216:13): [True: 0, False: 950k]
  ------------------
  217|      0|                PHI_ASSERT_NOT_REACHED();
  218|   950k|        }
  219|   950k|    }

_ZN3dlx20IsReservedIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   30|  69.6k|    {
   31|  69.6k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (31:13): [True: 323, False: 69.2k]
  ------------------
   32|    323|        {
   33|    323|            return true;
   34|    323|        }
   35|       |
   36|  69.2k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (36:13): [True: 103, False: 69.1k]
  ------------------
   37|    103|        {
   38|    103|            return true;
   39|    103|        }
   40|       |
   41|  69.1k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (41:13): [True: 1.04k, False: 68.1k]
  ------------------
   42|  1.04k|        {
   43|  1.04k|            return true;
   44|  1.04k|        }
   45|       |
   46|  68.1k|        if (IsFPSR(token))
  ------------------
  |  Branch (46:13): [True: 0, False: 68.1k]
  ------------------
   47|      0|        {
   48|      0|            return true;
   49|      0|        }
   50|       |
   51|  68.1k|        return false;
   52|  68.1k|    }
_ZN3dlx17IsValidIdentifierEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   55|  68.1k|    {
   56|  68.1k|        if (token.is_empty())
  ------------------
  |  Branch (56:13): [True: 0, False: 68.1k]
  ------------------
   57|      0|        {
   58|      0|            return false;
   59|      0|        }
   60|       |
   61|  68.1k|        const char first_char = token.at(0u);
   62|       |
   63|  68.1k|        if (token.length() == 1u)
  ------------------
  |  Branch (63:13): [True: 1.56k, False: 66.5k]
  ------------------
   64|  1.56k|        {
   65|  1.56k|            return phi::is_alpha(first_char);
   66|  1.56k|        }
   67|       |
   68|  66.5k|        phi::boolean just_under_scores = (first_char == '_');
   69|  66.5k|        if (!phi::is_alpha(first_char) && (first_char != '_'))
  ------------------
  |  Branch (69:13): [True: 18.4k, False: 48.1k]
  |  Branch (69:13): [True: 18.2k, False: 48.3k]
  |  Branch (69:43): [True: 18.2k, False: 196]
  ------------------
   70|  18.2k|        {
   71|  18.2k|            return false;
   72|  18.2k|        }
   73|       |
   74|   268k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (74:37): [True: 240k, False: 27.8k]
  ------------------
   75|   240k|        {
   76|   240k|            const char c{token.at(index)};
   77|       |
   78|   240k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (78:17): [True: 96.2k, False: 144k]
  ------------------
   79|  96.2k|            {
   80|  96.2k|                just_under_scores = false;
   81|  96.2k|            }
   82|   144k|            else if (c == '_')
  ------------------
  |  Branch (82:22): [True: 124k, False: 20.4k]
  ------------------
   83|   124k|            {
   84|   124k|                continue;
   85|   124k|            }
   86|  20.4k|            else
   87|  20.4k|            {
   88|  20.4k|                return false;
   89|  20.4k|            }
   90|   240k|        }
   91|       |
   92|  27.8k|        return !just_under_scores;
   93|  48.3k|    }
_ZN3dlx11ParseNumberEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   99|  1.82M|    {
  100|  1.82M|        if (token.is_empty())
  ------------------
  |  Branch (100:13): [True: 0, False: 1.82M]
  ------------------
  101|      0|        {
  102|      0|            return {};
  103|      0|        }
  104|       |
  105|  1.82M|        if (token.length() == 1u)
  ------------------
  |  Branch (105:13): [True: 111k, False: 1.71M]
  ------------------
  106|   111k|        {
  107|   111k|            if (phi::is_digit(token.at(0u)))
  ------------------
  |  Branch (107:17): [True: 53.4k, False: 58.1k]
  ------------------
  108|  53.4k|            {
  109|  53.4k|                return static_cast<std::int16_t>(token.at(0u) - '0');
  110|  53.4k|            }
  111|       |
  112|  58.1k|            return {};
  113|   111k|        }
  114|       |
  115|       |        // Disallow trailing seperators
  116|  1.71M|        if (token.at(token.length() - 1u) == '\'')
  ------------------
  |  Branch (116:13): [True: 473, False: 1.71M]
  ------------------
  117|    473|        {
  118|    473|            return {};
  119|    473|        }
  120|       |
  121|  1.71M|        std::int32_t number{0};
  122|  1.71M|        phi::boolean is_negative{false};
  123|  1.71M|        phi::boolean starts_with_zero{false};
  124|  1.71M|        phi::boolean parsing_binary{false};
  125|  1.71M|        phi::boolean parsing_octal{false};
  126|  1.71M|        phi::boolean parsing_hexadecimal{false};
  127|  1.71M|        phi::boolean parsed_something{false};
  128|  1.71M|        phi::boolean parsed_separator{false};
  129|       |
  130|       |        // TODO: Move x'th character checks out of the for loop
  131|       |
  132|  1.95M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (132:37): [True: 1.92M, False: 25.6k]
  ------------------
  133|  1.92M|        {
  134|  1.92M|            const char c{token.at(index)};
  135|       |
  136|       |            // First character
  137|  1.92M|            if (index == 0u)
  ------------------
  |  Branch (137:17): [True: 1.71M, False: 219k]
  ------------------
  138|  1.71M|            {
  139|  1.71M|                if (c == '+')
  ------------------
  |  Branch (139:21): [True: 72, False: 1.71M]
  ------------------
  140|     72|                {
  141|     72|                    continue;
  142|     72|                }
  143|       |
  144|  1.71M|                if (c == '-')
  ------------------
  |  Branch (144:21): [True: 3.71k, False: 1.70M]
  ------------------
  145|  3.71k|                {
  146|  3.71k|                    is_negative = true;
  147|  3.71k|                    continue;
  148|  3.71k|                }
  149|       |
  150|  1.70M|                if (c == '0')
  ------------------
  |  Branch (150:21): [True: 104k, False: 1.60M]
  ------------------
  151|   104k|                {
  152|   104k|                    starts_with_zero = true;
  153|   104k|                    continue;
  154|   104k|                }
  155|       |
  156|  1.60M|                if (c == '\'')
  ------------------
  |  Branch (156:21): [True: 67, False: 1.60M]
  ------------------
  157|     67|                {
  158|     67|                    return {};
  159|     67|                }
  160|  1.60M|            }
  161|       |
  162|       |            // Second character
  163|  1.82M|            if (index == 1u)
  ------------------
  |  Branch (163:17): [True: 109k, False: 1.71M]
  ------------------
  164|   109k|            {
  165|   109k|                if (starts_with_zero)
  ------------------
  |  Branch (165:21): [True: 104k, False: 4.83k]
  ------------------
  166|   104k|                {
  167|       |                    // Binary
  168|   104k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (168:25): [True: 11.4k, False: 92.9k]
  |  Branch (168:37): [True: 10.6k, False: 82.2k]
  ------------------
  169|  22.0k|                    {
  170|  22.0k|                        parsing_binary = true;
  171|  22.0k|                        continue;
  172|  22.0k|                    }
  173|       |
  174|       |                    // Hexadecimal
  175|  82.2k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (175:25): [True: 37.0k, False: 45.2k]
  |  Branch (175:37): [True: 2.19k, False: 43.0k]
  ------------------
  176|  39.2k|                    {
  177|  39.2k|                        parsing_hexadecimal = true;
  178|  39.2k|                        continue;
  179|  39.2k|                    }
  180|       |
  181|       |                    // Octal
  182|  43.0k|                    parsing_octal = true;
  183|  43.0k|                }
  184|   109k|            }
  185|       |
  186|       |            // Handle seperators
  187|  1.76M|            if (c == '\'')
  ------------------
  |  Branch (187:17): [True: 139, False: 1.76M]
  ------------------
  188|    139|            {
  189|    139|                if (parsed_separator)
  ------------------
  |  Branch (189:21): [True: 66, False: 73]
  ------------------
  190|     66|                {
  191|     66|                    return {};
  192|     66|                }
  193|       |
  194|     73|                parsed_separator = true;
  195|     73|                continue;
  196|    139|            }
  197|       |
  198|       |            // Check for over/underflow
  199|  1.76M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (199:17): [True: 3.72k, False: 1.75M]
  |  Branch (199:32): [True: 0, False: 3.72k]
  ------------------
  200|      0|            {
  201|       |                // Would underflow
  202|      0|                return {};
  203|      0|            }
  204|  1.76M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (204:17): [True: 1.75M, False: 3.72k]
  |  Branch (204:17): [True: 0, False: 1.76M]
  |  Branch (204:33): [True: 0, False: 1.75M]
  ------------------
  205|      0|            {
  206|       |                // Would overflow
  207|      0|                return {};
  208|      0|            }
  209|       |
  210|  1.76M|            parsed_separator = false;
  211|  1.76M|            parsed_something = true;
  212|       |
  213|  1.76M|            if (parsing_binary)
  ------------------
  |  Branch (213:17): [True: 30.6k, False: 1.72M]
  ------------------
  214|  30.6k|            {
  215|  30.6k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (215:21): [True: 11.4k, False: 19.1k]
  ------------------
  216|  11.4k|                {
  217|  11.4k|                    return {};
  218|  11.4k|                }
  219|       |
  220|  19.1k|                number <<= 1;
  221|  19.1k|                number |= (c - '0');
  222|  19.1k|            }
  223|  1.72M|            else if (parsing_octal)
  ------------------
  |  Branch (223:22): [True: 51.7k, False: 1.67M]
  ------------------
  224|  51.7k|            {
  225|  51.7k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (225:21): [True: 39.7k, False: 11.9k]
  ------------------
  226|  39.7k|                {
  227|  39.7k|                    return {};
  228|  39.7k|                }
  229|       |
  230|  11.9k|                number <<= 3;
  231|  11.9k|                number |= (c - '0');
  232|  11.9k|            }
  233|  1.67M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (233:22): [True: 70.3k, False: 1.60M]
  ------------------
  234|  70.3k|            {
  235|  70.3k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (235:21): [True: 27.7k, False: 42.6k]
  ------------------
  236|  27.7k|                {
  237|  27.7k|                    return {};
  238|  27.7k|                }
  239|       |
  240|  42.6k|                number <<= 4;
  241|  42.6k|                number |= phi::hex_digit_value(c).unsafe();
  242|  42.6k|            }
  243|  1.60M|            else
  244|  1.60M|            {
  245|  1.60M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (245:21): [True: 1.60M, False: 1.78k]
  ------------------
  246|  1.60M|                {
  247|  1.60M|                    return {};
  248|  1.60M|                }
  249|       |
  250|       |                // Disallow leading zeros
  251|  1.78k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (251:21): [True: 1.23k, False: 555]
  |  Branch (251:36): [True: 71, False: 1.16k]
  ------------------
  252|     71|                {
  253|     71|                    return {};
  254|     71|                }
  255|       |
  256|  1.71k|                number *= 10;
  257|  1.71k|                number += (c - '0');
  258|  1.71k|            }
  259|  1.76M|        }
  260|       |
  261|  25.6k|        if (parsed_something)
  ------------------
  |  Branch (261:13): [True: 24.2k, False: 1.44k]
  ------------------
  262|  24.2k|        {
  263|       |            // Check for over/underflow
  264|  24.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (264:17): [True: 104, False: 24.1k]
  |  Branch (264:32): [True: 0, False: 104]
  ------------------
  265|      0|            {
  266|       |                // Would underflow
  267|      0|                return {};
  268|      0|            }
  269|  24.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (269:17): [True: 24.1k, False: 104]
  |  Branch (269:17): [True: 0, False: 24.2k]
  |  Branch (269:33): [True: 0, False: 24.1k]
  ------------------
  270|      0|            {
  271|       |                // Would overflow
  272|      0|                return {};
  273|      0|            }
  274|       |
  275|  24.2k|            if (is_negative)
  ------------------
  |  Branch (275:17): [True: 104, False: 24.1k]
  ------------------
  276|    104|            {
  277|    104|                return static_cast<std::int16_t>(-number);
  278|    104|            }
  279|       |
  280|  24.1k|            return static_cast<std::int16_t>(number);
  281|  24.2k|        }
  282|       |
  283|  1.44k|        return {};
  284|  25.6k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
   96|   130k|    {
   97|   130k|        switch (value)
   98|   130k|        {
   99|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
  100|      0|    case IntRegisterID::name:                                                                      \
  101|      0|        return #name;
  102|       |
  103|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  15.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |  100|  15.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 15.4k, False: 115k]
  |  |  |  |  ------------------
  |  |  |  |  101|  15.4k|        return #name;
  |  |  ------------------
  |  |   14|  33.2k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |  100|  33.2k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 33.2k, False: 97.5k]
  |  |  |  |  ------------------
  |  |  |  |  101|  33.2k|        return #name;
  |  |  ------------------
  |  |   15|  33.2k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |  100|    440|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 440, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    440|        return #name;
  |  |  ------------------
  |  |   16|  10.0k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |  100|  10.0k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 10.0k, False: 120k]
  |  |  |  |  ------------------
  |  |  |  |  101|  10.0k|        return #name;
  |  |  ------------------
  |  |   17|  10.0k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |  100|    782|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 782, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    782|        return #name;
  |  |  ------------------
  |  |   18|  6.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |  100|  6.00k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6.00k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  101|  6.00k|        return #name;
  |  |  ------------------
  |  |   19|  6.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |  100|    321|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 321, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    321|        return #name;
  |  |  ------------------
  |  |   20|    321|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |  100|    128|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 128, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    128|        return #name;
  |  |  ------------------
  |  |   21|    810|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |  100|    810|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 810, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    810|        return #name;
  |  |  ------------------
  |  |   22|    810|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |  100|    667|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 667, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    667|        return #name;
  |  |  ------------------
  |  |   23|    667|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |  100|     70|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 70, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     70|        return #name;
  |  |  ------------------
  |  |   24|    170|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |  100|    170|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 170, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    170|        return #name;
  |  |  ------------------
  |  |   25|    170|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |  100|     78|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 78, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     78|        return #name;
  |  |  ------------------
  |  |   26|    844|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |  100|    844|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 844, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    844|        return #name;
  |  |  ------------------
  |  |   27|    844|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |  100|    313|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 313, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    313|        return #name;
  |  |  ------------------
  |  |   28|  3.83k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |  100|  3.83k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 3.83k, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |  101|  3.83k|        return #name;
  |  |  ------------------
  |  |   29|  27.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |  100|  27.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 27.3k, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  101|  27.3k|        return #name;
  |  |  ------------------
  |  |   30|  27.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |  100|    154|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 154, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    154|        return #name;
  |  |  ------------------
  |  |   31|    154|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |  100|    148|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 148, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    148|        return #name;
  |  |  ------------------
  |  |   32|    148|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |  100|     17|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 17, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     17|        return #name;
  |  |  ------------------
  |  |   33|  1.00k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |  100|  1.00k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 1.00k, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  101|  1.00k|        return #name;
  |  |  ------------------
  |  |   34|  4.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |  100|  4.41k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4.41k, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  101|  4.41k|        return #name;
  |  |  ------------------
  |  |   35|  4.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |  100|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|      4|        return #name;
  |  |  ------------------
  |  |   36|  5.44k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |  100|  5.44k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 5.44k, False: 125k]
  |  |  |  |  ------------------
  |  |  |  |  101|  5.44k|        return #name;
  |  |  ------------------
  |  |   37|  5.44k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |  100|     74|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 74, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     74|        return #name;
  |  |  ------------------
  |  |   38|     74|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |  100|     38|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 38, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     38|        return #name;
  |  |  ------------------
  |  |   39|  6.59k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |  100|  6.59k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 6.59k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  101|  6.59k|        return #name;
  |  |  ------------------
  |  |   40|  6.59k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |  100|  4.01k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 4.01k, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  101|  4.01k|        return #name;
  |  |  ------------------
  |  |   41|  4.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |  100|     42|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 42, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     42|        return #name;
  |  |  ------------------
  |  |   42|     47|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |  100|     47|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 47, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|     47|        return #name;
  |  |  ------------------
  |  |   43|  7.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |  100|  7.85k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 7.85k, False: 123k]
  |  |  |  |  ------------------
  |  |  |  |  101|  7.85k|        return #name;
  |  |  ------------------
  |  |   44|  7.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |  100|    371|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (100:5): [True: 371, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  101|    371|        return #name;
  |  |  ------------------
  ------------------
  104|       |
  105|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  106|       |
  107|      0|            default:
  ------------------
  |  Branch (107:13): [True: 0, False: 130k]
  ------------------
  108|      0|                PHI_ASSERT_NOT_REACHED();
  109|   130k|        }
  110|   130k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEET_:
  133|  73.3k|    {
  134|  73.3k|        switch (value)
  135|  73.3k|        {
  136|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  137|      0|    case FloatRegisterID::name:                                                                    \
  138|      0|        return #name;
  139|       |
  140|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  17.3k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  137|  17.3k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 17.3k, False: 55.9k]
  |  |  |  |  ------------------
  |  |  |  |  138|  17.3k|        return #name;
  |  |  ------------------
  |  |   48|  17.3k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  137|  10.2k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 10.2k, False: 63.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|  10.2k|        return #name;
  |  |  ------------------
  |  |   49|  10.2k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  137|     14|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 14, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     14|        return #name;
  |  |  ------------------
  |  |   50|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  137|     23|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 23, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     23|        return #name;
  |  |  ------------------
  |  |   51|     23|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  137|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 7, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      7|        return #name;
  |  |  ------------------
  |  |   52|    230|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  137|    230|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 230, False: 73.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|    230|        return #name;
  |  |  ------------------
  |  |   53|    230|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  137|     21|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 21, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     21|        return #name;
  |  |  ------------------
  |  |   54|     21|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  137|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 8, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      8|        return #name;
  |  |  ------------------
  |  |   55|    171|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  137|    171|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 171, False: 73.1k]
  |  |  |  |  ------------------
  |  |  |  |  138|    171|        return #name;
  |  |  ------------------
  |  |   56|  8.56k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  137|  8.56k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 8.56k, False: 64.7k]
  |  |  |  |  ------------------
  |  |  |  |  138|  8.56k|        return #name;
  |  |  ------------------
  |  |   57|  8.56k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  137|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 11, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     11|        return #name;
  |  |  ------------------
  |  |   58|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  137|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 4, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      4|        return #name;
  |  |  ------------------
  |  |   59|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   60|     32|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  137|     32|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 32, False: 73.2k]
  |  |  |  |  ------------------
  |  |  |  |  138|     32|        return #name;
  |  |  ------------------
  |  |   61|     32|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  137|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 2, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      2|        return #name;
  |  |  ------------------
  |  |   62|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  137|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 6, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      6|        return #name;
  |  |  ------------------
  |  |   63|  8.92k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  137|  8.92k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 8.92k, False: 64.4k]
  |  |  |  |  ------------------
  |  |  |  |  138|  8.92k|        return #name;
  |  |  ------------------
  |  |   64|  8.92k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.22k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.22k, False: 72.1k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.22k|        return #name;
  |  |  ------------------
  |  |   65|  1.22k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  137|    458|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 458, False: 72.8k]
  |  |  |  |  ------------------
  |  |  |  |  138|    458|        return #name;
  |  |  ------------------
  |  |   66|    458|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  137|     68|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 68, False: 73.2k]
  |  |  |  |  ------------------
  |  |  |  |  138|     68|        return #name;
  |  |  ------------------
  |  |   67|  11.7k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  137|  11.7k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 11.7k, False: 61.5k]
  |  |  |  |  ------------------
  |  |  |  |  138|  11.7k|        return #name;
  |  |  ------------------
  |  |   68|  11.7k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  137|    990|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 990, False: 72.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|    990|        return #name;
  |  |  ------------------
  |  |   69|    990|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  137|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 22, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     22|        return #name;
  |  |  ------------------
  |  |   70|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  137|     24|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 24, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     24|        return #name;
  |  |  ------------------
  |  |   71|  1.22k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  137|  1.22k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 1.22k, False: 72.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|  1.22k|        return #name;
  |  |  ------------------
  |  |   72|  1.22k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  137|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 20, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     20|        return #name;
  |  |  ------------------
  |  |   73|  11.2k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  137|  11.2k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 11.2k, False: 62.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|  11.2k|        return #name;
  |  |  ------------------
  |  |   74|  11.2k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  137|    309|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 309, False: 73.0k]
  |  |  |  |  ------------------
  |  |  |  |  138|    309|        return #name;
  |  |  ------------------
  |  |   75|    309|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  137|     19|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 19, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|     19|        return #name;
  |  |  ------------------
  |  |   76|     19|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  137|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 5, False: 73.3k]
  |  |  |  |  ------------------
  |  |  |  |  138|      5|        return #name;
  |  |  ------------------
  |  |   77|    172|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  137|    172|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 172, False: 73.1k]
  |  |  |  |  ------------------
  |  |  |  |  138|    172|        return #name;
  |  |  ------------------
  |  |   78|    172|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  137|     88|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (137:5): [True: 88, False: 73.2k]
  |  |  |  |  ------------------
  |  |  |  |  138|     88|        return #name;
  |  |  ------------------
  ------------------
  141|       |
  142|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  143|       |
  144|      0|            default:
  ------------------
  |  Branch (144:13): [True: 0, False: 73.3k]
  ------------------
  145|      0|                PHI_ASSERT_NOT_REACHED();
  146|  73.3k|        }
  147|  73.3k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   706k|        {
   12|   706k|            m_Value = value;
   13|   706k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|  1.02M|        {
   17|  1.02M|            return m_Value;
   18|  1.02M|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  15.4k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  15.4k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 174k, False: 0]
  ------------------
   64|   174k|            {
   65|   174k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 15.4k, False: 158k]
  ------------------
   66|  15.4k|                {
   67|  15.4k|                    return &token;
   68|  15.4k|                }
   69|   174k|            }
   70|       |
   71|      0|            return nullptr;
   72|  15.4k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS4_7integerImEESC_EEEvDpOT_:
   24|  1.49M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.49M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.49M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  2.39M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.39M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.39M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEERNS5_7integerImEESD_EEEvDpOT_:
   24|   200k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   200k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   200k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   910k|    {
   11|   910k|        m_Value = val;
   12|   910k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  3.04M|    {
   16|  3.04M|        return m_Value;
   17|  3.04M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|   304k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  57.1k|    {
   25|  57.1k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  57.1k|        switch (argument_number.unsafe())
   28|  57.1k|        {
   29|  28.6k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 28.6k, False: 28.4k]
  ------------------
   30|  28.6k|                m_Arg1 = argument;
   31|  28.6k|                break;
   32|  16.2k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 16.2k, False: 40.8k]
  ------------------
   33|  16.2k|                m_Arg2 = argument;
   34|  16.2k|                break;
   35|  12.1k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 12.1k, False: 44.9k]
  ------------------
   36|  12.1k|                m_Arg3 = argument;
   37|  12.1k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 57.1k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  57.1k|#endif
   42|  57.1k|        }
   43|  57.1k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  7.12M|    {
   84|  7.12M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  7.12M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  7.12M|    {
   89|  7.12M|        return m_Info;
   90|  7.12M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   970k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  42.7M|    {
   28|  42.7M|        return m_Type;
   29|  42.7M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  9.50M|    {
   78|  9.50M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  9.50M|        return register_int;
   81|  9.50M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  2.33M|    {
   85|  2.33M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  2.33M|        return register_float;
   88|  2.33M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  2.01M|    {
   93|  2.01M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  2.01M|        return immediate_value;
   96|  2.01M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|  1.27M|    {
  108|  1.27M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|  1.27M|        return label;
  111|  1.27M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  172|  32.4k|    {
  173|  32.4k|        InstructionArgument arg;
  174|  32.4k|        arg.m_Type                   = ArgumentType::IntRegister;
  175|  32.4k|        arg.register_int.register_id = id;
  176|  32.4k|        return arg;
  177|  32.4k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  180|  5.84k|    {
  181|  5.84k|        InstructionArgument arg;
  182|  5.84k|        arg.m_Type                     = ArgumentType::FloatRegister;
  183|  5.84k|        arg.register_float.register_id = id;
  184|  5.84k|        return arg;
  185|  5.84k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  188|  9.83k|    {
  189|  9.83k|        InstructionArgument arg;
  190|  9.83k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  191|  9.83k|        arg.immediate_value.signed_value = value;
  192|  9.83k|        return arg;
  193|  9.83k|    }
_ZN3dlx33ConstructInstructionArgumentLabelEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  206|  9.01k|    {
  207|  9.01k|        InstructionArgument arg;
  208|  9.01k|        arg.m_Type           = ArgumentType::Label;
  209|  9.01k|        arg.label.label_name = label_name;
  210|  9.01k|        return arg;
  211|  9.01k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  350|   360k|        {
  351|   360k|            const auto& dest_reg = arg1.AsRegisterInt();
  352|   360k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  353|   360k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  354|       |
  355|   360k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  356|   360k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  357|       |
  358|   360k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  359|   360k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  363|  54.5k|        {
  364|  54.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  365|  54.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  366|  54.5k|            const auto& imm_value = arg3.AsImmediateValue();
  367|       |
  368|  54.5k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  369|       |
  370|  54.5k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  371|  54.5k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  375|  50.8k|        {
  376|  50.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  377|  50.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  378|  50.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  379|       |
  380|  50.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  381|  50.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  382|       |
  383|  50.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  384|  50.8k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  388|  21.3k|        {
  389|  21.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  390|  21.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  391|  21.3k|            const auto& imm_value = arg3.AsImmediateValue();
  392|       |
  393|  21.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  394|       |
  395|  21.3k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  396|  21.3k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  400|  41.5k|        {
  401|  41.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  402|  41.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  403|  41.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  404|       |
  405|  41.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  406|  41.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  407|       |
  408|  41.5k|            const phi::f32 new_value = lhs_value + rhs_value;
  409|       |
  410|  41.5k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  411|  41.5k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  415|  23.8k|        {
  416|  23.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  417|  23.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  418|  23.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  419|       |
  420|  23.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  421|  23.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  422|       |
  423|  23.8k|            const phi::f64 new_value = lhs_value + rhs_value;
  424|       |
  425|  23.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  426|  23.8k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  430|  56.7k|        {
  431|  56.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  432|  56.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  433|  56.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  434|       |
  435|  56.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  436|  56.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  437|       |
  438|  56.7k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  439|  56.7k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  443|  11.6k|        {
  444|  11.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  445|  11.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  446|  11.6k|            const auto& imm_value = arg3.AsImmediateValue();
  447|       |
  448|  11.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  449|       |
  450|  11.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  451|  11.6k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  455|   175k|        {
  456|   175k|            const auto& dest_reg = arg1.AsRegisterInt();
  457|   175k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  458|   175k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  459|       |
  460|   175k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  461|   175k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  462|       |
  463|   175k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  464|   175k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  468|  20.1k|        {
  469|  20.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  470|  20.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  471|  20.1k|            const auto& imm_value = arg3.AsImmediateValue();
  472|       |
  473|  20.1k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  474|       |
  475|  20.1k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  476|  20.1k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  480|  23.9k|        {
  481|  23.9k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  482|  23.9k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  483|  23.9k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  484|       |
  485|  23.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  486|  23.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  487|       |
  488|  23.9k|            const phi::f32 new_value = lhs_value - rhs_value;
  489|       |
  490|  23.9k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  491|  23.9k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  495|  23.8k|        {
  496|  23.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  497|  23.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  498|  23.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  499|       |
  500|  23.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  501|  23.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  502|       |
  503|  23.8k|            const phi::f64 new_value = lhs_value - rhs_value;
  504|       |
  505|  23.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  506|  23.8k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  510|  64.4k|        {
  511|  64.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  512|  64.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  513|  64.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  514|       |
  515|  64.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  516|  64.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  517|       |
  518|  64.4k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  519|  64.4k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  523|  33.2k|        {
  524|  33.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  525|  33.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  526|  33.2k|            const auto& imm_value = arg3.AsImmediateValue();
  527|       |
  528|  33.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  529|       |
  530|  33.2k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  531|  33.2k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  535|  37.1k|        {
  536|  37.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  537|  37.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  538|  37.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  539|       |
  540|  37.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  541|  37.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  542|       |
  543|  37.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  544|  37.1k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  548|  78.0k|        {
  549|  78.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  550|  78.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  551|  78.0k|            const auto& imm_value = arg3.AsImmediateValue();
  552|       |
  553|  78.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  554|       |
  555|  78.0k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  556|  78.0k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  560|  32.1k|        {
  561|  32.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  562|  32.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  563|  32.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  564|       |
  565|  32.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  566|  32.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  567|       |
  568|  32.1k|            const phi::f32 new_value = lhs_value * rhs_value;
  569|       |
  570|  32.1k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  571|  32.1k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  575|  30.4k|        {
  576|  30.4k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  577|  30.4k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  578|  30.4k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  579|       |
  580|  30.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  581|  30.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  582|       |
  583|  30.4k|            const phi::f64 new_value = lhs_value * rhs_value;
  584|       |
  585|  30.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  586|  30.4k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  590|  5.01k|        {
  591|  5.01k|            const auto& dest_reg = arg1.AsRegisterInt();
  592|  5.01k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  593|  5.01k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  594|       |
  595|  5.01k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  596|  5.01k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  597|       |
  598|  5.01k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  599|  5.01k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  603|      1|        {
  604|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  605|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  606|      1|            const auto& imm_value = arg3.AsImmediateValue();
  607|       |
  608|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  609|       |
  610|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  611|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  615|  10.0k|        {
  616|  10.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  617|  10.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  618|  10.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  619|       |
  620|  10.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  621|  10.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  622|       |
  623|  10.0k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  624|  10.0k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  628|      1|        {
  629|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  630|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  631|      1|            const auto& imm_value = arg3.AsImmediateValue();
  632|       |
  633|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  634|       |
  635|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  636|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  640|      1|        {
  641|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  642|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  643|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  644|       |
  645|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  646|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  647|       |
  648|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (648:17): [True: 1, False: 0]
  ------------------
  649|      1|            {
  650|      1|                processor.Raise(Exception::DivideByZero);
  651|      1|                return;
  652|      1|            }
  653|       |
  654|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  655|       |
  656|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  657|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  661|      1|        {
  662|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  663|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  664|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  665|       |
  666|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  667|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  668|       |
  669|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (669:17): [True: 1, False: 0]
  ------------------
  670|      1|            {
  671|      1|                processor.Raise(Exception::DivideByZero);
  672|      1|                return;
  673|      1|            }
  674|       |
  675|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  676|       |
  677|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  678|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  682|  89.4k|        {
  683|  89.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  684|  89.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  685|  89.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  686|       |
  687|  89.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  688|  89.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  689|       |
  690|  89.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  691|  89.4k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  695|  23.0k|        {
  696|  23.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  697|  23.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  698|  23.0k|            const auto& imm_value = arg3.AsImmediateValue();
  699|       |
  700|  23.0k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  701|  23.0k|            phi::i32 shift_value = imm_value.signed_value;
  702|       |
  703|  23.0k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  704|  23.0k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  708|  82.5k|        {
  709|  82.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  710|  82.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  711|  82.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  712|       |
  713|  82.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  714|  82.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  715|       |
  716|  82.5k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  717|  82.5k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  721|  34.2k|        {
  722|  34.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  723|  34.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  724|  34.2k|            const auto& imm_value = arg3.AsImmediateValue();
  725|       |
  726|  34.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  727|  34.2k|            phi::i32 shift_value = imm_value.signed_value;
  728|       |
  729|  34.2k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  730|  34.2k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  734|   100k|        {
  735|   100k|            const auto& dest_reg = arg1.AsRegisterInt();
  736|   100k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  737|   100k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  738|       |
  739|   100k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  740|   100k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  741|       |
  742|   100k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  743|   100k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  747|  27.9k|        {
  748|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  749|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  750|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  751|       |
  752|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  753|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  754|       |
  755|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  756|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  760|  86.8k|        {
  761|  86.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  762|  86.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  763|  86.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  764|       |
  765|  86.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  766|  86.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  767|       |
  768|  86.8k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  769|  86.8k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  773|  28.4k|        {
  774|  28.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  775|  28.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  776|  28.4k|            const auto& imm_value = arg3.AsImmediateValue();
  777|       |
  778|  28.4k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  779|  28.4k|            phi::i32 shift_value = imm_value.signed_value;
  780|       |
  781|  28.4k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  782|  28.4k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  786|  33.3k|        {
  787|  33.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  788|  33.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  789|  33.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  790|       |
  791|  33.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  792|  33.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  793|  33.3k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  794|       |
  795|  33.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  796|  33.3k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  800|   129k|        {
  801|   129k|            const auto& dest_reg  = arg1.AsRegisterInt();
  802|   129k|            const auto& src_reg   = arg2.AsRegisterInt();
  803|   129k|            const auto& imm_value = arg3.AsImmediateValue();
  804|       |
  805|   129k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  806|   129k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  807|       |
  808|   129k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  809|   129k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  813|  13.5k|        {
  814|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  815|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  816|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  817|       |
  818|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  819|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  820|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  821|       |
  822|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  823|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  827|  19.1k|        {
  828|  19.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  829|  19.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  830|  19.1k|            const auto& imm_value = arg3.AsImmediateValue();
  831|       |
  832|  19.1k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  833|  19.1k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  834|       |
  835|  19.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  836|  19.1k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  840|  20.8k|        {
  841|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  842|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  843|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  844|       |
  845|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  846|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  847|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  848|       |
  849|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  850|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  854|   502k|        {
  855|   502k|            const auto& dest_reg  = arg1.AsRegisterInt();
  856|   502k|            const auto& src_reg   = arg2.AsRegisterInt();
  857|   502k|            const auto& imm_value = arg3.AsImmediateValue();
  858|       |
  859|   502k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  860|   502k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  861|       |
  862|   502k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  863|   502k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  867|  12.3k|        {
  868|  12.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  869|  12.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  870|  12.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  871|       |
  872|  12.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  873|  12.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  874|       |
  875|  12.3k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (875:41): [True: 1, False: 12.3k]
  ------------------
  876|       |
  877|  12.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  878|  12.3k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  882|  47.3k|        {
  883|  47.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  884|  47.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  885|  47.3k|            const auto& imm_value = arg3.AsImmediateValue();
  886|       |
  887|  47.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  888|       |
  889|  47.3k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (889:41): [True: 0, False: 47.3k]
  ------------------
  890|       |
  891|  47.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  892|  47.3k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  896|  15.1k|        {
  897|  15.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  898|  15.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  899|  15.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  900|       |
  901|  15.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  902|  15.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  903|       |
  904|  15.1k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (904:41): [True: 1, False: 15.1k]
  ------------------
  905|       |
  906|  15.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  907|  15.1k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  911|   101k|        {
  912|   101k|            const auto& dest_reg  = arg1.AsRegisterInt();
  913|   101k|            const auto& src_reg   = arg2.AsRegisterInt();
  914|   101k|            const auto& imm_value = arg3.AsImmediateValue();
  915|       |
  916|   101k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  917|       |
  918|   101k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (918:41): [True: 0, False: 101k]
  ------------------
  919|       |
  920|   101k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  921|   101k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  925|  11.7k|        {
  926|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  927|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  928|       |
  929|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  930|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  931|       |
  932|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  933|       |
  934|  11.7k|            processor.SetFPSRValue(new_value);
  935|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  939|  28.7k|        {
  940|  28.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  941|  28.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  942|       |
  943|  28.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  944|  28.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  945|       |
  946|  28.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  947|       |
  948|  28.7k|            processor.SetFPSRValue(new_value);
  949|  28.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  953|  11.7k|        {
  954|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  955|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  956|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  957|       |
  958|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  959|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  960|       |
  961|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (961:41): [True: 0, False: 11.7k]
  ------------------
  962|       |
  963|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  964|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  968|  40.8k|        {
  969|  40.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  970|  40.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  971|  40.8k|            const auto& imm_value = arg3.AsImmediateValue();
  972|       |
  973|  40.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  974|       |
  975|  40.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (975:41): [True: 1.00k, False: 39.8k]
  ------------------
  976|       |
  977|  40.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  978|  40.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  982|  11.6k|        {
  983|  11.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  984|  11.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  985|  11.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  986|       |
  987|  11.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  988|  11.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  989|       |
  990|  11.6k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (990:41): [True: 0, False: 11.6k]
  ------------------
  991|       |
  992|  11.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  993|  11.6k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  997|  28.0k|        {
  998|  28.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  999|  28.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1000|  28.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1001|       |
 1002|  28.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1003|       |
 1004|  28.0k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1004:41): [True: 0, False: 28.0k]
  ------------------
 1005|       |
 1006|  28.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1007|  28.0k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1011|   130k|        {
 1012|   130k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1013|   130k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1014|       |
 1015|   130k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1016|   130k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1017|       |
 1018|   130k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1019|       |
 1020|   130k|            processor.SetFPSRValue(new_value);
 1021|   130k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1025|   296k|        {
 1026|   296k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1027|   296k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1028|       |
 1029|   296k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1030|   296k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1031|       |
 1032|   296k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1033|       |
 1034|   296k|            processor.SetFPSRValue(new_value);
 1035|   296k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1039|  15.1k|        {
 1040|  15.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1041|  15.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1042|  15.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1043|       |
 1044|  15.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1045|  15.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1046|       |
 1047|  15.1k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1047:41): [True: 15.1k, False: 2]
  ------------------
 1048|       |
 1049|  15.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1050|  15.1k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1054|  23.0k|        {
 1055|  23.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1056|  23.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1057|  23.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1058|       |
 1059|  23.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1060|       |
 1061|  23.0k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1061:41): [True: 23.0k, False: 0]
  ------------------
 1062|       |
 1063|  23.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1064|  23.0k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1068|  28.1k|        {
 1069|  28.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1070|  28.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1071|  28.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1072|       |
 1073|  28.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1074|  28.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1075|       |
 1076|  28.1k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1076:41): [True: 28.1k, False: 0]
  ------------------
 1077|       |
 1078|  28.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1079|  28.1k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1083|   213k|        {
 1084|   213k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1085|   213k|            const auto& src_reg   = arg2.AsRegisterInt();
 1086|   213k|            const auto& imm_value = arg3.AsImmediateValue();
 1087|       |
 1088|   213k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1089|       |
 1090|   213k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1090:41): [True: 176k, False: 36.2k]
  ------------------
 1091|       |
 1092|   213k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1093|   213k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1097|  29.9k|        {
 1098|  29.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1099|  29.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1100|       |
 1101|  29.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1102|  29.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1103|       |
 1104|  29.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1105|       |
 1106|  29.9k|            processor.SetFPSRValue(new_value);
 1107|  29.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1111|  45.9k|        {
 1112|  45.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1113|  45.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1114|       |
 1115|  45.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1116|  45.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1117|       |
 1118|  45.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1119|       |
 1120|  45.9k|            processor.SetFPSRValue(new_value);
 1121|  45.9k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1125|  13.7k|        {
 1126|  13.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1127|  13.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1128|  13.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1129|       |
 1130|  13.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1131|  13.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1132|       |
 1133|  13.7k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1133:41): [True: 13.7k, False: 0]
  ------------------
 1134|       |
 1135|  13.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1136|  13.7k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1140|   321k|        {
 1141|   321k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1142|   321k|            const auto& src_reg   = arg2.AsRegisterInt();
 1143|   321k|            const auto& imm_value = arg3.AsImmediateValue();
 1144|       |
 1145|   321k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1146|       |
 1147|   321k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1147:41): [True: 318k, False: 2.08k]
  ------------------
 1148|       |
 1149|   321k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1150|   321k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1154|  16.4k|        {
 1155|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1156|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1157|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1158|       |
 1159|  16.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1160|  16.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1161|       |
 1162|  16.4k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1162:41): [True: 16.4k, False: 0]
  ------------------
 1163|       |
 1164|  16.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1165|  16.4k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1169|  27.3k|        {
 1170|  27.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1171|  27.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1172|  27.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1173|       |
 1174|  27.3k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1175|       |
 1176|  27.3k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1176:41): [True: 27.3k, False: 0]
  ------------------
 1177|       |
 1178|  27.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1179|  27.3k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1183|  32.3k|        {
 1184|  32.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1185|  32.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1186|       |
 1187|  32.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1188|  32.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1189|       |
 1190|  32.3k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1191|       |
 1192|  32.3k|            processor.SetFPSRValue(new_value);
 1193|  32.3k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1197|  28.5k|        {
 1198|  28.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1199|  28.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1200|       |
 1201|  28.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1202|  28.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1203|       |
 1204|  28.5k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1205|       |
 1206|  28.5k|            processor.SetFPSRValue(new_value);
 1207|  28.5k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1211|  25.9k|        {
 1212|  25.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1213|  25.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1214|  25.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1215|       |
 1216|  25.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1217|  25.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1218|       |
 1219|  25.9k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1219:41): [True: 24.5k, False: 1.42k]
  ------------------
 1220|       |
 1221|  25.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1222|  25.9k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1226|  20.4k|        {
 1227|  20.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1228|  20.4k|            const auto& src_reg   = arg2.AsRegisterInt();
 1229|  20.4k|            const auto& imm_value = arg3.AsImmediateValue();
 1230|       |
 1231|  20.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1232|       |
 1233|  20.4k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1233:41): [True: 20.4k, False: 0]
  ------------------
 1234|       |
 1235|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1236|  20.4k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1240|   130k|        {
 1241|   130k|            const auto& dest_reg = arg1.AsRegisterInt();
 1242|   130k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1243|   130k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1244|       |
 1245|   130k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1246|   130k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1247|       |
 1248|   130k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1248:41): [True: 111k, False: 18.4k]
  ------------------
 1249|       |
 1250|   130k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1251|   130k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1255|  78.7k|        {
 1256|  78.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1257|  78.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1258|  78.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1259|       |
 1260|  78.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1261|       |
 1262|  78.7k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1262:41): [True: 78.7k, False: 0]
  ------------------
 1263|       |
 1264|  78.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1265|  78.7k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1269|  35.0k|        {
 1270|  35.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1271|  35.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1272|       |
 1273|  35.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1274|  35.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1275|       |
 1276|  35.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1277|       |
 1278|  35.0k|            processor.SetFPSRValue(new_value);
 1279|  35.0k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1283|  18.4k|        {
 1284|  18.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1285|  18.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1286|       |
 1287|  18.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1288|  18.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1289|       |
 1290|  18.4k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1291|       |
 1292|  18.4k|            processor.SetFPSRValue(new_value);
 1293|  18.4k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1297|  22.4k|        {
 1298|  22.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1299|  22.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1300|  22.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1301|       |
 1302|  22.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1303|  22.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1304|       |
 1305|  22.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1305:41): [True: 1, False: 22.4k]
  ------------------
 1306|       |
 1307|  22.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1308|  22.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1312|  39.3k|        {
 1313|  39.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1314|  39.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1315|  39.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1316|       |
 1317|  39.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1318|       |
 1319|  39.3k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1319:41): [True: 0, False: 39.3k]
  ------------------
 1320|       |
 1321|  39.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1322|  39.3k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1326|  31.1k|        {
 1327|  31.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1328|  31.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1329|  31.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1330|       |
 1331|  31.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1332|  31.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1333|       |
 1334|  31.1k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1334:41): [True: 2, False: 31.1k]
  ------------------
 1335|       |
 1336|  31.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1337|  31.1k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1341|  74.1k|        {
 1342|  74.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1343|  74.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1344|  74.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1345|       |
 1346|  74.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1347|       |
 1348|  74.1k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1348:41): [True: 12.3k, False: 61.8k]
  ------------------
 1349|       |
 1350|  74.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1351|  74.1k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1355|  13.5k|        {
 1356|  13.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1357|  13.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1358|       |
 1359|  13.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1360|  13.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1361|       |
 1362|  13.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1363|       |
 1364|  13.5k|            processor.SetFPSRValue(new_value);
 1365|  13.5k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1369|  22.6k|        {
 1370|  22.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1371|  22.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1372|       |
 1373|  22.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1374|  22.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1375|       |
 1376|  22.6k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1377|       |
 1378|  22.6k|            processor.SetFPSRValue(new_value);
 1379|  22.6k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1383|  82.2k|        {
 1384|  82.2k|            const auto& test_reg   = arg1.AsRegisterInt();
 1385|  82.2k|            const auto& jump_label = arg2.AsLabel();
 1386|       |
 1387|  82.2k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1388|       |
 1389|  82.2k|            if (test_value == 0)
  ------------------
  |  Branch (1389:17): [True: 56.0k, False: 26.1k]
  ------------------
 1390|  56.0k|            {
 1391|  56.0k|                JumpToLabel(processor, jump_label.label_name);
 1392|  56.0k|            }
 1393|  82.2k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1397|  65.9k|        {
 1398|  65.9k|            const auto& test_reg   = arg1.AsRegisterInt();
 1399|  65.9k|            const auto& jump_label = arg2.AsLabel();
 1400|       |
 1401|  65.9k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1402|       |
 1403|  65.9k|            if (test_value != 0)
  ------------------
  |  Branch (1403:17): [True: 36.6k, False: 29.3k]
  ------------------
 1404|  36.6k|            {
 1405|  36.6k|                JumpToLabel(processor, jump_label.label_name);
 1406|  36.6k|            }
 1407|  65.9k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1411|  61.7k|        {
 1412|  61.7k|            const auto& jump_label = arg1.AsLabel();
 1413|       |
 1414|  61.7k|            phi::boolean test_value = processor.GetFPSRValue();
 1415|       |
 1416|  61.7k|            if (test_value)
  ------------------
  |  Branch (1416:17): [True: 46.1k, False: 15.6k]
  ------------------
 1417|  46.1k|            {
 1418|  46.1k|                JumpToLabel(processor, jump_label.label_name);
 1419|  46.1k|            }
 1420|  61.7k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1424|   960k|        {
 1425|   960k|            const auto& jump_label = arg1.AsLabel();
 1426|       |
 1427|   960k|            phi::boolean test_value = processor.GetFPSRValue();
 1428|       |
 1429|   960k|            if (!test_value)
  ------------------
  |  Branch (1429:17): [True: 941k, False: 19.4k]
  ------------------
 1430|   941k|            {
 1431|   941k|                JumpToLabel(processor, jump_label.label_name);
 1432|   941k|            }
 1433|   960k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1437|  64.1k|        {
 1438|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1439|       |
 1440|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1441|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1445|  72.7k|        {
 1446|  72.7k|            const auto& jump_register = arg1.AsRegisterInt();
 1447|       |
 1448|  72.7k|            JumpToRegister(processor, jump_register.register_id);
 1449|  72.7k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1453|  44.4k|        {
 1454|  44.4k|            const auto& jump_label = arg1.AsLabel();
 1455|       |
 1456|  44.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1457|  44.4k|                                                  processor.GetNextProgramCounter());
 1458|       |
 1459|  44.4k|            JumpToLabel(processor, jump_label.label_name);
 1460|  44.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1464|   664k|        {
 1465|   664k|            const auto& jump_register = arg1.AsRegisterInt();
 1466|       |
 1467|   664k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1468|   664k|                                                  processor.GetNextProgramCounter());
 1469|       |
 1470|   664k|            JumpToRegister(processor, jump_register.register_id);
 1471|   664k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1475|  13.7k|        {
 1476|  13.7k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1477|  13.7k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1478|       |
 1479|  13.7k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1480|       |
 1481|  13.7k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1482|  13.7k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1486|      1|        {
 1487|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1488|       |
 1489|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1490|       |
 1491|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1491:17): [True: 0, False: 1]
  ------------------
 1492|      0|            {
 1493|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1494|      0|                return;
 1495|      0|            }
 1496|       |
 1497|      1|            phi::i32 address = optional_address.value();
 1498|       |
 1499|      1|            auto optional_value =
 1500|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1501|       |
 1502|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1502:17): [True: 1, False: 0]
  ------------------
 1503|      1|            {
 1504|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1505|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1506|      1|                return;
 1507|      1|            }
 1508|       |
 1509|      0|            phi::i32 value = optional_value.value();
 1510|       |
 1511|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1512|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1516|      1|        {
 1517|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1518|       |
 1519|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1520|       |
 1521|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1521:17): [True: 0, False: 1]
  ------------------
 1522|      0|            {
 1523|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1524|      0|                return;
 1525|      0|            }
 1526|       |
 1527|      1|            phi::i32 address = optional_address.value();
 1528|       |
 1529|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1530|      1|                    static_cast<std::size_t>(address.unsafe()));
 1531|       |
 1532|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1532:17): [True: 1, False: 0]
  ------------------
 1533|      1|            {
 1534|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1535|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1536|      1|                return;
 1537|      1|            }
 1538|       |
 1539|      0|            phi::u32 value = optional_value.value();
 1540|       |
 1541|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1542|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1546|      1|        {
 1547|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1548|       |
 1549|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1550|       |
 1551|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1551:17): [True: 0, False: 1]
  ------------------
 1552|      0|            {
 1553|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1554|      0|                return;
 1555|      0|            }
 1556|       |
 1557|      1|            phi::i32 address = optional_address.value();
 1558|       |
 1559|      1|            auto optional_value =
 1560|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1561|       |
 1562|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1562:17): [True: 1, False: 0]
  ------------------
 1563|      1|            {
 1564|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1565|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1566|      1|                return;
 1567|      1|            }
 1568|       |
 1569|      0|            phi::i32 value = optional_value.value();
 1570|       |
 1571|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1572|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1576|      1|        {
 1577|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1578|       |
 1579|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1580|       |
 1581|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1581:17): [True: 0, False: 1]
  ------------------
 1582|      0|            {
 1583|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1584|      0|                return;
 1585|      0|            }
 1586|       |
 1587|      1|            phi::i32 address = optional_address.value();
 1588|       |
 1589|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1590|      1|                    static_cast<std::size_t>(address.unsafe()));
 1591|       |
 1592|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1592:17): [True: 1, False: 0]
  ------------------
 1593|      1|            {
 1594|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1595|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1596|      1|                return;
 1597|      1|            }
 1598|       |
 1599|      0|            phi::u32 value = optional_value.value();
 1600|       |
 1601|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1602|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1606|      1|        {
 1607|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1608|       |
 1609|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1610|       |
 1611|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1611:17): [True: 0, False: 1]
  ------------------
 1612|      0|            {
 1613|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1614|      0|                return;
 1615|      0|            }
 1616|       |
 1617|      1|            phi::i32 address = optional_address.value();
 1618|       |
 1619|      1|            auto optional_value =
 1620|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1621|       |
 1622|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1622:17): [True: 1, False: 0]
  ------------------
 1623|      1|            {
 1624|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1625|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1626|      1|                return;
 1627|      1|            }
 1628|       |
 1629|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1630|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1634|      1|        {
 1635|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1636|       |
 1637|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1638|       |
 1639|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1639:17): [True: 0, False: 1]
  ------------------
 1640|      0|            {
 1641|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1642|      0|                return;
 1643|      0|            }
 1644|       |
 1645|      1|            phi::i32 address = optional_address.value();
 1646|       |
 1647|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1648|      1|                    static_cast<std::size_t>(address.unsafe()));
 1649|       |
 1650|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1650:17): [True: 1, False: 0]
  ------------------
 1651|      1|            {
 1652|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1653|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1654|      1|                return;
 1655|      1|            }
 1656|       |
 1657|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1658|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1662|      1|        {
 1663|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1664|       |
 1665|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1666|       |
 1667|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1667:17): [True: 0, False: 1]
  ------------------
 1668|      0|            {
 1669|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1670|      0|                return;
 1671|      0|            }
 1672|       |
 1673|      1|            phi::i32 address = optional_address.value();
 1674|       |
 1675|      1|            auto optional_value =
 1676|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1677|       |
 1678|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1678:17): [True: 1, False: 0]
  ------------------
 1679|      1|            {
 1680|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1681|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1682|      1|                return;
 1683|      1|            }
 1684|       |
 1685|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1686|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1690|      1|        {
 1691|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1692|       |
 1693|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1694|       |
 1695|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1695:17): [True: 0, False: 1]
  ------------------
 1696|      0|            {
 1697|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1698|      0|                return;
 1699|      0|            }
 1700|       |
 1701|      1|            phi::i32 address = optional_address.value();
 1702|       |
 1703|      1|            auto optional_value =
 1704|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1705|       |
 1706|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1706:17): [True: 1, False: 0]
  ------------------
 1707|      1|            {
 1708|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1709|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1710|      1|                return;
 1711|      1|            }
 1712|       |
 1713|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1714|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1938|  41.9k|        {
 1939|  41.9k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1940|  41.9k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1941|       |
 1942|  41.9k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1943|       |
 1944|  41.9k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1945|  41.9k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1949|  9.06k|        {
 1950|  9.06k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1951|  9.06k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1952|       |
 1953|  9.06k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1954|       |
 1955|  9.06k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1956|  9.06k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1960|  20.2k|        {
 1961|  20.2k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1962|  20.2k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1963|       |
 1964|  20.2k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1965|       |
 1966|  20.2k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1967|       |
 1968|  20.2k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1969|  20.2k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1973|  26.3k|        {
 1974|  26.3k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1975|  26.3k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1976|       |
 1977|  26.3k|            const std::int32_t source_value =
 1978|  26.3k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1979|       |
 1980|  26.3k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1981|       |
 1982|  26.3k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1983|  26.3k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1987|  17.6k|        {
 1988|  17.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1989|  17.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1990|       |
 1991|  17.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1992|       |
 1993|  17.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1994|  17.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1998|  31.9k|        {
 1999|  31.9k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2000|  31.9k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2001|       |
 2002|  31.9k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2003|  31.9k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2004|  31.9k|            const float        converted_value_float =
 2005|  31.9k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2006|       |
 2007|  31.9k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2008|  31.9k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2012|  19.3k|        {
 2013|  19.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2014|  19.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2015|       |
 2016|  19.3k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2017|  19.3k|            const float  converted_value = static_cast<float>(src_value);
 2018|       |
 2019|  19.3k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2020|  19.3k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2024|  29.4k|        {
 2025|  29.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2026|  29.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2027|       |
 2028|  29.4k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2029|  29.4k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2030|  29.4k|            const float        converted_value_float =
 2031|  29.4k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2032|       |
 2033|  29.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2034|  29.4k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2038|  24.1k|        {
 2039|  24.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2040|  24.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2041|       |
 2042|  24.1k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2043|  24.1k|            const std::int32_t converted_value_int =
 2044|  24.1k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2045|  24.1k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2046|       |
 2047|  24.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2048|  24.1k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2052|  12.3k|        {
 2053|  12.3k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2054|  12.3k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2055|       |
 2056|  12.3k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2057|  12.3k|            const std::int32_t converted_value_int =
 2058|  12.3k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2059|  12.3k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2060|       |
 2061|  12.3k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2062|  12.3k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2066|      1|        {
 2067|      1|            processor.Raise(Exception::Trap);
 2068|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      9|        {
 2073|      9|            processor.Raise(Exception::Halt);
 2074|      9|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|   470k|        {
 2079|       |            /* Do nothing */
 2080|   470k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  168|   414k|    {
  169|   414k|        phi::i64 res = phi::i64(lhs) + rhs;
  170|       |
  171|   414k|        SafeWriteInteger(processor, dest_reg, res);
  172|   414k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  123|   585k|    {
  124|   585k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  125|   585k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  126|       |
  127|       |        // Check for underflow
  128|   585k|        if (value < min)
  ------------------
  |  Branch (128:13): [True: 22.9k, False: 562k]
  ------------------
  129|  22.9k|        {
  130|  22.9k|            processor.Raise(Exception::Underflow);
  131|       |
  132|  22.9k|            value = max + (value % (min - 1));
  133|  22.9k|        }
  134|       |        // Check for overflow
  135|   562k|        else if (value > max)
  ------------------
  |  Branch (135:18): [True: 21.5k, False: 541k]
  ------------------
  136|  21.5k|        {
  137|  21.5k|            processor.Raise(Exception::Overflow);
  138|       |
  139|  21.5k|            value = min + (value % (max + 1));
  140|  21.5k|        }
  141|       |
  142|   585k|        PHI_ASSERT(value >= min);
  143|   585k|        PHI_ASSERT(value <= max);
  144|       |
  145|   585k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  146|   585k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  176|  72.1k|    {
  177|  72.1k|        phi::u64 res = phi::u64(lhs) + rhs;
  178|       |
  179|  72.1k|        SafeWriteInteger(processor, dest_reg, res);
  180|  72.1k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  150|   393k|    {
  151|   393k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  152|       |
  153|       |        // Check for overflow
  154|   393k|        if (value > max)
  ------------------
  |  Branch (154:13): [True: 29.4k, False: 363k]
  ------------------
  155|  29.4k|        {
  156|  29.4k|            processor.Raise(Exception::Overflow);
  157|       |
  158|  29.4k|            value %= max + 1u;
  159|  29.4k|        }
  160|       |
  161|   393k|        PHI_ASSERT(value <= max);
  162|       |
  163|   393k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  164|   393k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  184|  68.4k|    {
  185|  68.4k|        phi::i64 res = phi::i64(lhs) - rhs;
  186|       |
  187|  68.4k|        SafeWriteInteger(processor, dest_reg, res);
  188|  68.4k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  192|   195k|    {
  193|   195k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  194|       |
  195|   195k|        if (lhs < rhs)
  ------------------
  |  Branch (195:13): [True: 74.1k, False: 121k]
  ------------------
  196|  74.1k|        {
  197|  74.1k|            processor.Raise(Exception::Underflow);
  198|       |
  199|  74.1k|            phi::u64 res = max - rhs + lhs + 1u;
  200|  74.1k|            SafeWriteInteger(processor, dest_reg, res);
  201|  74.1k|            return;
  202|  74.1k|        }
  203|       |
  204|   121k|        phi::u64 res = phi::u64(lhs) - rhs;
  205|       |
  206|   121k|        SafeWriteInteger(processor, dest_reg, res);
  207|   121k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  211|  97.6k|    {
  212|  97.6k|        phi::i64 res = phi::i64(lhs) * rhs;
  213|       |
  214|  97.6k|        SafeWriteInteger(processor, dest_reg, res);
  215|  97.6k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  219|   115k|    {
  220|   115k|        phi::u64 res = phi::u64(lhs) * rhs;
  221|       |
  222|   115k|        SafeWriteInteger(processor, dest_reg, res);
  223|   115k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  227|  5.01k|    {
  228|  5.01k|        if (rhs == 0)
  ------------------
  |  Branch (228:13): [True: 2, False: 5.01k]
  ------------------
  229|      2|        {
  230|      2|            processor.Raise(Exception::DivideByZero);
  231|      2|            return;
  232|      2|        }
  233|       |
  234|  5.01k|        phi::i64 res = phi::i64(lhs) / rhs;
  235|       |
  236|  5.01k|        SafeWriteInteger(processor, dest_reg, res);
  237|  5.01k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  241|  10.0k|    {
  242|  10.0k|        if (rhs == 0u)
  ------------------
  |  Branch (242:13): [True: 2, False: 10.0k]
  ------------------
  243|      2|        {
  244|      2|            processor.Raise(Exception::DivideByZero);
  245|      2|            return;
  246|      2|        }
  247|       |
  248|  10.0k|        phi::u64 res = phi::u64(lhs) / rhs;
  249|       |
  250|  10.0k|        SafeWriteInteger(processor, dest_reg, res);
  251|  10.0k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  324|   241k|    {
  325|   241k|        if (shift > 31)
  ------------------
  |  Branch (325:13): [True: 11.9k, False: 229k]
  ------------------
  326|  11.9k|        {
  327|  11.9k|            processor.Raise(Exception::BadShift);
  328|       |
  329|       |            // Just set register to 0
  330|  11.9k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  331|  11.9k|            return;
  332|  11.9k|        }
  333|       |
  334|       |        // Negative shifts are undefined behavior
  335|   229k|        if (shift < 0)
  ------------------
  |  Branch (335:13): [True: 23.3k, False: 205k]
  ------------------
  336|  23.3k|        {
  337|  23.3k|            processor.Raise(Exception::BadShift);
  338|  23.3k|            return;
  339|  23.3k|        }
  340|       |
  341|   205k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  342|       |
  343|   205k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  344|   205k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  255|   116k|    {
  256|       |        // Prevent undefined behavior by shifting by more than 31
  257|   116k|        if (shift > 31)
  ------------------
  |  Branch (257:13): [True: 9.68k, False: 107k]
  ------------------
  258|  9.68k|        {
  259|  9.68k|            processor.Raise(Exception::BadShift);
  260|       |
  261|       |            // Just set register to 0
  262|  9.68k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  263|  9.68k|            return;
  264|  9.68k|        }
  265|       |
  266|       |        // Do nothing when shifting by zero to prevent undefined behavior
  267|   107k|        if (shift == 0)
  ------------------
  |  Branch (267:13): [True: 74.5k, False: 32.5k]
  ------------------
  268|  74.5k|        {
  269|  74.5k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  270|  74.5k|            return;
  271|  74.5k|        }
  272|       |
  273|       |        // Negative shifts are undefiend behavior
  274|  32.5k|        if (shift < 0)
  ------------------
  |  Branch (274:13): [True: 5.74k, False: 26.8k]
  ------------------
  275|  5.74k|        {
  276|  5.74k|            processor.Raise(Exception::BadShift);
  277|  5.74k|            return;
  278|  5.74k|        }
  279|       |
  280|  26.8k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  281|       |
  282|  26.8k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  283|       |
  284|  26.8k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  285|  26.8k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   28|  26.8k|    {
   29|  26.8k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   30|       |
   31|  26.8k|        return value & ~(-1 << (32 - n));
   32|  26.8k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  289|   115k|    {
  290|       |        // Prevent undefined behavior by shifting by more than 31
  291|   115k|        if (shift > 31)
  ------------------
  |  Branch (291:13): [True: 15.9k, False: 99.4k]
  ------------------
  292|  15.9k|        {
  293|  15.9k|            processor.Raise(Exception::BadShift);
  294|       |
  295|       |            // Is negative ie. sign bit is set
  296|  15.9k|            if (base < 0)
  ------------------
  |  Branch (296:17): [True: 3.19k, False: 12.7k]
  ------------------
  297|  3.19k|            {
  298|       |                // Set every byte to 1
  299|  3.19k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  300|  3.19k|            }
  301|  12.7k|            else
  302|  12.7k|            {
  303|       |                // Set every byte to 0
  304|  12.7k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  305|  12.7k|            }
  306|  15.9k|            return;
  307|  15.9k|        }
  308|       |
  309|       |        // Negative shifts are undefined behavior
  310|  99.4k|        if (shift < 0)
  ------------------
  |  Branch (310:13): [True: 17.9k, False: 81.4k]
  ------------------
  311|  17.9k|        {
  312|  17.9k|            processor.Raise(Exception::BadShift);
  313|  17.9k|            return;
  314|  17.9k|        }
  315|       |
  316|  81.4k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  317|       |
  318|  81.4k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  319|  81.4k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   37|  1.18M|    {
   38|       |        // Lookup the label
   39|  1.18M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   40|  1.18M|        PHI_ASSERT(program != nullptr);
   41|  1.18M|        PHI_ASSERT(!label_name.is_empty(), "Can't jump to empty label");
   42|       |
   43|  1.18M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (43:13): [True: 55, False: 1.18M]
  ------------------
   44|     55|        {
   45|     55|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     55|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|     55|            processor.Raise(Exception::UnknownLabel);
   47|     55|            return;
   48|     55|        }
   49|       |
   50|  1.18M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   51|  1.18M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   52|       |
   53|       |        // Set program counter
   54|  1.18M|        processor.SetNextProgramCounter(jump_point);
   55|  1.18M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   58|   737k|    {
   59|   737k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   60|       |
   61|   737k|        phi::u32 max_address =
   62|   737k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   63|   737k|        if (address >= max_address)
  ------------------
  |  Branch (63:13): [True: 12, False: 737k]
  ------------------
   64|     12|        {
   65|     12|            processor.Raise(Exception::AddressOutOfBounds);
   66|     12|            return;
   67|     12|        }
   68|       |
   69|   737k|        processor.SetNextProgramCounter(address.unsafe());
   70|   737k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
   99|      8|    {
  100|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (100:13): [True: 8, False: 0]
  ------------------
  101|      8|        {
  102|      8|            const auto& imm_value = argument.AsImmediateValue();
  103|       |
  104|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (104:17): [True: 0, False: 8]
  ------------------
  105|      0|            {
  106|      0|                return {};
  107|      0|            }
  108|       |
  109|      8|            return imm_value.signed_value;
  110|      8|        }
  111|       |
  112|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  113|       |
  114|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  115|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  116|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  7.12M|    {
   12|  7.12M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  7.12M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  7.12M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  7.12M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  7.12M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  7.12M|                   "Unexpected argument type for arg1");
   22|  7.12M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  7.12M|                   "Unexpected argument type for arg2");
   24|  7.12M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  7.12M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  7.12M|        m_Executor(processor, arg1, arg2, arg3);
   29|  7.12M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   304k|    {
  453|   304k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   304k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  2.24M|    {
   17|  2.24M|        m_ValueSigned = val;
   18|  2.24M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  1.54M|    {
   22|  1.54M|        m_ValueUnsigned = val;
   23|  1.54M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  3.56M|    {
   27|  3.56M|        return m_ValueSigned;
   28|  3.56M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  2.39M|    {
   32|  2.39M|        return m_ValueUnsigned;
   33|  2.39M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  4.21M|    {
   37|  4.21M|        return m_IsReadOnly;
   38|  4.21M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|      1|    {
   22|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1, False: 0]
  ------------------
   23|      1|        {
   24|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      1|            return {};
   26|      1|        }
   27|       |
   28|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|      0|        return m_Values[raw_address].signed_value;
   31|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|      1|    {
   35|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 1, False: 0]
  ------------------
   36|      1|        {
   37|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      1|            return {};
   39|      1|        }
   40|       |
   41|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|      0|        return m_Values[raw_address].unsigned_value;
   43|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|      1|    {
   47|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1, False: 0]
  ------------------
   48|      1|        {
   49|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      1|            return {};
   51|      1|        }
   52|       |
   53|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  ------------------
   56|      0|        {
   57|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      0|            return {};
   59|      0|        }
   60|       |
   61|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|      1|    {
   66|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1, False: 0]
  ------------------
   67|      1|        {
   68|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      1|            return {};
   70|      1|        }
   71|       |
   72|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 0, False: 0]
  ------------------
   75|      0|        {
   76|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      0|            return {};
   78|      0|        }
   79|       |
   80|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|      1|    {
   85|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 1, False: 0]
  ------------------
   86|      1|        {
   87|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      1|            return {};
   89|      1|        }
   90|       |
   91|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 0, False: 0]
  ------------------
   94|      0|        {
   95|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      0|            return {};
   97|      0|        }
   98|       |
   99|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|      1|    {
  104|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 1, False: 0]
  ------------------
  105|      1|        {
  106|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      1|            return {};
  108|      1|        }
  109|       |
  110|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 0, False: 0]
  ------------------
  113|      0|        {
  114|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      0|            return {};
  116|      0|        }
  117|       |
  118|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|      1|    {
  123|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1, False: 0]
  ------------------
  124|      1|        {
  125|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      1|            return {};
  127|      1|        }
  128|       |
  129|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 0, False: 0]
  ------------------
  132|      0|        {
  133|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      0|            return {};
  135|      0|        }
  136|       |
  137|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|      1|    {
  142|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1, False: 0]
  ------------------
  143|      1|        {
  144|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      1|            return {};
  146|      1|        }
  147|       |
  148|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|        {
  152|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      0|            return {};
  154|      0|        }
  155|       |
  156|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|      8|    {
  269|       |        // Cannot access anything before the starting address
  270|      8|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 8, False: 0]
  ------------------
  271|      8|        {
  272|      8|            return false;
  273|      8|        }
  274|       |
  275|       |        // Check if address + size will overflow
  276|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 0]
  ------------------
  277|      0|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 0]
  ------------------
  284|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 0, False: 0]
  ------------------
  291|      0|        {
  292|      0|            return false;
  293|      0|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|      0|        return true;
  297|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  12.6k|    {
  307|  12.6k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 12.6M, False: 12.6k]
  ------------------
  308|  12.6M|        {
  309|  12.6M|            val.signed_value = 0;
  310|  12.6M|        }
  311|  12.6k|    }

_ZN3dlx14StringToOpCodeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   23|  1.58M|    {
   24|  1.58M|        switch (token.length().unsafe())
   25|  1.58M|        {
   26|       |            // 1 character OpCodes
   27|  59.8k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 59.8k, False: 1.52M]
  ------------------
   28|  59.8k|                const char c1 = token[0u];
   29|       |
   30|  59.8k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (30:21): [True: 42.1k, False: 17.7k]
  ------------------
   31|  42.1k|                {
   32|  42.1k|                    return OpCode::J;
   33|  42.1k|                }
   34|  17.7k|                break;
   35|  59.8k|            }
   36|       |
   37|       |            // 2 character OpCodes
   38|   135k|            case 2: {
  ------------------
  |  Branch (38:13): [True: 135k, False: 1.44M]
  ------------------
   39|   135k|                const char c1 = token[0u];
   40|   135k|                const char c2 = token[1u];
   41|       |
   42|   135k|                switch (c1)
  ------------------
  |  Branch (42:25): [True: 55.8k, False: 79.4k]
  ------------------
   43|   135k|                {
   44|    287|                    case 'J':
  ------------------
  |  Branch (44:21): [True: 287, False: 134k]
  ------------------
   45|    639|                    case 'j':
  ------------------
  |  Branch (45:21): [True: 352, False: 134k]
  ------------------
   46|    639|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (46:29): [True: 162, False: 477]
  ------------------
   47|    162|                        {
   48|    162|                            return OpCode::JR;
   49|    162|                        }
   50|    477|                        break;
   51|       |
   52|  26.6k|                    case 'L':
  ------------------
  |  Branch (52:21): [True: 26.6k, False: 108k]
  ------------------
   53|  27.3k|                    case 'l':
  ------------------
  |  Branch (53:21): [True: 620, False: 134k]
  ------------------
   54|  27.3k|                        switch (c2)
  ------------------
  |  Branch (54:33): [True: 211, False: 27.0k]
  ------------------
   55|  27.3k|                        {
   56|     80|                            case 'B':
  ------------------
  |  Branch (56:29): [True: 80, False: 27.2k]
  ------------------
   57|    236|                            case 'b':
  ------------------
  |  Branch (57:29): [True: 156, False: 27.1k]
  ------------------
   58|    236|                                return OpCode::LB;
   59|    770|                            case 'D':
  ------------------
  |  Branch (59:29): [True: 770, False: 26.5k]
  ------------------
   60|    836|                            case 'd':
  ------------------
  |  Branch (60:29): [True: 66, False: 27.2k]
  ------------------
   61|    836|                                return OpCode::LD;
   62|    122|                            case 'F':
  ------------------
  |  Branch (62:29): [True: 122, False: 27.1k]
  ------------------
   63|    377|                            case 'f':
  ------------------
  |  Branch (63:29): [True: 255, False: 27.0k]
  ------------------
   64|    377|                                return OpCode::LF;
   65|     83|                            case 'H':
  ------------------
  |  Branch (65:29): [True: 83, False: 27.2k]
  ------------------
   66|    339|                            case 'h':
  ------------------
  |  Branch (66:29): [True: 256, False: 27.0k]
  ------------------
   67|    339|                                return OpCode::LH;
   68|  25.2k|                            case 'W':
  ------------------
  |  Branch (68:29): [True: 25.2k, False: 2.06k]
  ------------------
   69|  25.3k|                            case 'w':
  ------------------
  |  Branch (69:29): [True: 66, False: 27.2k]
  ------------------
   70|  25.3k|                                return OpCode::LW;
   71|  27.3k|                        }
   72|    211|                        break;
   73|    846|                    case 'O':
  ------------------
  |  Branch (73:21): [True: 846, False: 134k]
  ------------------
   74|  30.6k|                    case 'o':
  ------------------
  |  Branch (74:21): [True: 29.7k, False: 105k]
  ------------------
   75|  30.6k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (75:29): [True: 1.11k, False: 29.4k]
  ------------------
   76|  1.11k|                        {
   77|  1.11k|                            return OpCode::OR;
   78|  1.11k|                        }
   79|  29.4k|                        break;
   80|  29.4k|                    case 'S':
  ------------------
  |  Branch (80:21): [True: 19.8k, False: 115k]
  ------------------
   81|  20.8k|                    case 's':
  ------------------
  |  Branch (81:21): [True: 959, False: 134k]
  ------------------
   82|  20.8k|                        switch (c2)
  ------------------
  |  Branch (82:33): [True: 181, False: 20.6k]
  ------------------
   83|  20.8k|                        {
   84|  2.68k|                            case 'B':
  ------------------
  |  Branch (84:29): [True: 2.68k, False: 18.1k]
  ------------------
   85|  2.75k|                            case 'b':
  ------------------
  |  Branch (85:29): [True: 69, False: 20.7k]
  ------------------
   86|  2.75k|                                return OpCode::SB;
   87|    101|                            case 'D':
  ------------------
  |  Branch (87:29): [True: 101, False: 20.7k]
  ------------------
   88|    745|                            case 'd':
  ------------------
  |  Branch (88:29): [True: 644, False: 20.2k]
  ------------------
   89|    745|                                return OpCode::SD;
   90|  16.7k|                            case 'F':
  ------------------
  |  Branch (90:29): [True: 16.7k, False: 4.14k]
  ------------------
   91|  16.8k|                            case 'f':
  ------------------
  |  Branch (91:29): [True: 130, False: 20.7k]
  ------------------
   92|  16.8k|                                return OpCode::SF;
   93|     81|                            case 'H':
  ------------------
  |  Branch (93:29): [True: 81, False: 20.7k]
  ------------------
   94|    193|                            case 'h':
  ------------------
  |  Branch (94:29): [True: 112, False: 20.7k]
  ------------------
   95|    193|                                return OpCode::SH;
   96|     71|                            case 'w':
  ------------------
  |  Branch (96:29): [True: 71, False: 20.7k]
  ------------------
   97|    138|                            case 'W':
  ------------------
  |  Branch (97:29): [True: 67, False: 20.7k]
  ------------------
   98|    138|                                return OpCode::SW;
   99|  20.8k|                        }
  100|    181|                        break;
  101|   135k|                }
  102|  86.2k|                break;
  103|   135k|            }
  104|       |
  105|       |            // 3 character OpCodes
  106|   647k|            case 3: {
  ------------------
  |  Branch (106:13): [True: 647k, False: 936k]
  ------------------
  107|   647k|                const char c1 = token[0u];
  108|   647k|                const char c2 = token[1u];
  109|   647k|                const char c3 = token[2u];
  110|       |
  111|   647k|                switch (c1)
  ------------------
  |  Branch (111:25): [True: 68.1k, False: 579k]
  ------------------
  112|   647k|                {
  113|   208k|                    case 'A':
  ------------------
  |  Branch (113:21): [True: 208k, False: 439k]
  ------------------
  114|   208k|                    case 'a':
  ------------------
  |  Branch (114:21): [True: 106, False: 647k]
  ------------------
  115|   208k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (115:29): [True: 207k, False: 264]
  |  Branch (115:29): [True: 207k, False: 371]
  |  Branch (115:45): [True: 207k, False: 107]
  ------------------
  116|   207k|                        {
  117|   207k|                            return OpCode::ADD;
  118|   207k|                        }
  119|    371|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (119:34): [True: 249, False: 122]
  |  Branch (119:34): [True: 183, False: 188]
  |  Branch (119:50): [True: 183, False: 66]
  ------------------
  120|    183|                        {
  121|    183|                            return OpCode::AND;
  122|    183|                        }
  123|    188|                        break;
  124|       |
  125|    190|                    case 'D':
  ------------------
  |  Branch (125:21): [True: 190, False: 647k]
  ------------------
  126|    372|                    case 'd':
  ------------------
  |  Branch (126:21): [True: 182, False: 647k]
  ------------------
  127|    372|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (127:29): [True: 262, False: 110]
  |  Branch (127:29): [True: 196, False: 176]
  |  Branch (127:45): [True: 196, False: 66]
  ------------------
  128|    196|                        {
  129|    196|                            return OpCode::DIV;
  130|    196|                        }
  131|    176|                        break;
  132|       |
  133|  20.7k|                    case 'E':
  ------------------
  |  Branch (133:21): [True: 20.7k, False: 626k]
  ------------------
  134|  21.0k|                    case 'e':
  ------------------
  |  Branch (134:21): [True: 244, False: 647k]
  ------------------
  135|  21.0k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (135:29): [True: 20.7k, False: 233]
  ------------------
  136|  20.7k|                        {
  137|  20.7k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (137:33): [True: 208, False: 20.5k]
  ------------------
  138|    208|                            {
  139|    208|                                return OpCode::EQD;
  140|    208|                            }
  141|  20.5k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (141:38): [True: 20.5k, False: 66]
  ------------------
  142|  20.5k|                            {
  143|  20.5k|                                return OpCode::EQF;
  144|  20.5k|                            }
  145|  20.7k|                        }
  146|    299|                        break;
  147|       |
  148|  23.2k|                    case 'G':
  ------------------
  |  Branch (148:21): [True: 23.2k, False: 624k]
  ------------------
  149|  24.1k|                    case 'g':
  ------------------
  |  Branch (149:21): [True: 868, False: 646k]
  ------------------
  150|  24.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (150:29): [True: 481, False: 23.6k]
  ------------------
  151|    481|                        {
  152|    481|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (152:33): [True: 260, False: 221]
  ------------------
  153|    260|                            {
  154|    260|                                return OpCode::GED;
  155|    260|                            }
  156|    221|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (156:38): [True: 155, False: 66]
  ------------------
  157|    155|                            {
  158|    155|                                return OpCode::GEF;
  159|    155|                            }
  160|    481|                        }
  161|  23.6k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (161:34): [True: 23.2k, False: 406]
  ------------------
  162|  23.2k|                        {
  163|  23.2k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (163:33): [True: 21.0k, False: 2.21k]
  ------------------
  164|  21.0k|                            {
  165|  21.0k|                                return OpCode::GTD;
  166|  21.0k|                            }
  167|  2.21k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (167:33): [True: 2.13k, False: 76]
  ------------------
  168|  2.13k|                            {
  169|  2.13k|                                return OpCode::GTF;
  170|  2.13k|                            }
  171|  2.21k|                        }
  172|    548|                        break;
  173|       |
  174|  7.24k|                    case 'J':
  ------------------
  |  Branch (174:21): [True: 7.24k, False: 640k]
  ------------------
  175|  11.3k|                    case 'j':
  ------------------
  |  Branch (175:21): [True: 4.12k, False: 643k]
  ------------------
  176|  11.3k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (176:29): [True: 11.2k, False: 97]
  |  Branch (176:29): [True: 7.84k, False: 3.53k]
  |  Branch (176:45): [True: 7.84k, False: 3.43k]
  ------------------
  177|  7.84k|                        {
  178|  7.84k|                            return OpCode::JAL;
  179|  7.84k|                        }
  180|  3.53k|                        break;
  181|       |
  182|  62.9k|                    case 'L':
  ------------------
  |  Branch (182:21): [True: 62.9k, False: 584k]
  ------------------
  183|  98.9k|                    case 'l':
  ------------------
  |  Branch (183:21): [True: 35.9k, False: 611k]
  ------------------
  184|  98.9k|                        switch (c2)
  ------------------
  |  Branch (184:33): [True: 12.4k, False: 86.4k]
  ------------------
  185|  98.9k|                        {
  186|     96|                            case 'B':
  ------------------
  |  Branch (186:29): [True: 96, False: 98.8k]
  ------------------
  187|  28.1k|                            case 'b':
  ------------------
  |  Branch (187:29): [True: 28.0k, False: 70.8k]
  ------------------
  188|  28.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (188:37): [True: 12.4k, False: 15.6k]
  ------------------
  189|  12.4k|                                {
  190|  12.4k|                                    return OpCode::LBU;
  191|  12.4k|                                }
  192|  15.6k|                                break;
  193|       |
  194|  15.6k|                            case 'E':
  ------------------
  |  Branch (194:29): [True: 10.7k, False: 88.1k]
  ------------------
  195|  23.1k|                            case 'e':
  ------------------
  |  Branch (195:29): [True: 12.4k, False: 86.4k]
  ------------------
  196|  23.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (196:37): [True: 9.93k, False: 13.1k]
  ------------------
  197|  9.93k|                                {
  198|  9.93k|                                    return OpCode::LED;
  199|  9.93k|                                }
  200|  13.1k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (200:42): [True: 1.74k, False: 11.4k]
  ------------------
  201|  1.74k|                                {
  202|  1.74k|                                    return OpCode::LEF;
  203|  1.74k|                                }
  204|  11.4k|                                break;
  205|       |
  206|  22.6k|                            case 'H':
  ------------------
  |  Branch (206:29): [True: 22.6k, False: 76.2k]
  ------------------
  207|  34.2k|                            case 'h':
  ------------------
  |  Branch (207:29): [True: 11.5k, False: 87.3k]
  ------------------
  208|  34.2k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (208:37): [True: 8.18k, False: 26.0k]
  ------------------
  209|  8.18k|                                {
  210|  8.18k|                                    return OpCode::LHI;
  211|  8.18k|                                }
  212|  26.0k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (212:42): [True: 14.7k, False: 11.3k]
  ------------------
  213|  14.7k|                                {
  214|  14.7k|                                    return OpCode::LHU;
  215|  14.7k|                                }
  216|  11.3k|                                break;
  217|       |
  218|  11.3k|                            case 'T':
  ------------------
  |  Branch (218:29): [True: 672, False: 98.2k]
  ------------------
  219|    773|                            case 't':
  ------------------
  |  Branch (219:29): [True: 101, False: 98.7k]
  ------------------
  220|    773|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (220:37): [True: 503, False: 270]
  ------------------
  221|    503|                                {
  222|    503|                                    return OpCode::LTD;
  223|    503|                                }
  224|    270|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (224:42): [True: 172, False: 98]
  ------------------
  225|    172|                                {
  226|    172|                                    return OpCode::LTF;
  227|    172|                                }
  228|     98|                                break;
  229|       |
  230|     98|                            case 'W':
  ------------------
  |  Branch (230:29): [True: 70, False: 98.8k]
  ------------------
  231|    167|                            case 'w':
  ------------------
  |  Branch (231:29): [True: 97, False: 98.8k]
  ------------------
  232|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (232:37): [True: 133, False: 34]
  ------------------
  233|    133|                                {
  234|    133|                                    return OpCode::LWU;
  235|    133|                                }
  236|     34|                                break;
  237|  98.9k|                        }
  238|  51.0k|                        break;
  239|       |
  240|  51.0k|                    case 'N':
  ------------------
  |  Branch (240:21): [True: 32.0k, False: 615k]
  ------------------
  241|  32.7k|                    case 'n':
  ------------------
  |  Branch (241:21): [True: 735, False: 646k]
  ------------------
  242|  32.7k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (242:29): [True: 520, False: 32.2k]
  ------------------
  243|    520|                        {
  244|    520|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (244:33): [True: 176, False: 344]
  ------------------
  245|    176|                            {
  246|    176|                                return OpCode::NED;
  247|    176|                            }
  248|    344|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (248:38): [True: 278, False: 66]
  ------------------
  249|    278|                            {
  250|    278|                                return OpCode::NEF;
  251|    278|                            }
  252|    520|                        }
  253|  32.2k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (253:34): [True: 30.1k, False: 2.04k]
  |  Branch (253:34): [True: 18.5k, False: 13.7k]
  |  Branch (253:50): [True: 18.5k, False: 11.6k]
  ------------------
  254|  18.5k|                        {
  255|  18.5k|                            return OpCode::NOP;
  256|  18.5k|                        }
  257|       |
  258|  13.7k|                        break;
  259|       |
  260|  13.7k|                    case 'O':
  ------------------
  |  Branch (260:21): [True: 138, False: 647k]
  ------------------
  261|  22.4k|                    case 'o':
  ------------------
  |  Branch (261:21): [True: 22.3k, False: 625k]
  ------------------
  262|  22.4k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (262:29): [True: 19.7k, False: 2.73k]
  |  Branch (262:29): [True: 8.68k, False: 13.7k]
  |  Branch (262:45): [True: 8.68k, False: 11.0k]
  ------------------
  263|  8.68k|                        {
  264|  8.68k|                            return OpCode::ORI;
  265|  8.68k|                        }
  266|  13.7k|                        break;
  267|       |
  268|   156k|                    case 'S':
  ------------------
  |  Branch (268:21): [True: 156k, False: 490k]
  ------------------
  269|   157k|                    case 's':
  ------------------
  |  Branch (269:21): [True: 813, False: 646k]
  ------------------
  270|   157k|                        switch (c2)
  ------------------
  |  Branch (270:33): [True: 1.09k, False: 156k]
  ------------------
  271|   157k|                        {
  272|    141|                            case 'B':
  ------------------
  |  Branch (272:29): [True: 141, False: 157k]
  ------------------
  273|    294|                            case 'b':
  ------------------
  |  Branch (273:29): [True: 153, False: 157k]
  ------------------
  274|    294|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (274:37): [True: 207, False: 87]
  ------------------
  275|    207|                                {
  276|    207|                                    return OpCode::SBU;
  277|    207|                                }
  278|     87|                                break;
  279|       |
  280|    107|                            case 'E':
  ------------------
  |  Branch (280:29): [True: 107, False: 157k]
  ------------------
  281|    239|                            case 'e':
  ------------------
  |  Branch (281:29): [True: 132, False: 157k]
  ------------------
  282|    239|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (282:37): [True: 173, False: 66]
  ------------------
  283|    173|                                {
  284|    173|                                    return OpCode::SEQ;
  285|    173|                                }
  286|     66|                                break;
  287|       |
  288|  47.2k|                            case 'G':
  ------------------
  |  Branch (288:29): [True: 47.2k, False: 110k]
  ------------------
  289|  56.4k|                            case 'g':
  ------------------
  |  Branch (289:29): [True: 9.22k, False: 148k]
  ------------------
  290|  56.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (290:37): [True: 33.4k, False: 23.0k]
  ------------------
  291|  33.4k|                                {
  292|  33.4k|                                    return OpCode::SGE;
  293|  33.4k|                                }
  294|  23.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (294:42): [True: 13.8k, False: 9.15k]
  ------------------
  295|  13.8k|                                {
  296|  13.8k|                                    return OpCode::SGT;
  297|  13.8k|                                }
  298|  9.15k|                                break;
  299|       |
  300|  11.3k|                            case 'H':
  ------------------
  |  Branch (300:29): [True: 11.3k, False: 146k]
  ------------------
  301|  11.5k|                            case 'h':
  ------------------
  |  Branch (301:29): [True: 166, False: 157k]
  ------------------
  302|  11.5k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (302:37): [True: 11.4k, False: 69]
  ------------------
  303|  11.4k|                                {
  304|  11.4k|                                    return OpCode::SHU;
  305|  11.4k|                                }
  306|     69|                                break;
  307|       |
  308|  18.7k|                            case 'L':
  ------------------
  |  Branch (308:29): [True: 18.7k, False: 138k]
  ------------------
  309|  19.0k|                            case 'l':
  ------------------
  |  Branch (309:29): [True: 323, False: 157k]
  ------------------
  310|  19.0k|                                switch (c3)
  ------------------
  |  Branch (310:41): [True: 67, False: 18.9k]
  ------------------
  311|  19.0k|                                {
  312|  13.8k|                                    case 'A':
  ------------------
  |  Branch (312:37): [True: 13.8k, False: 5.16k]
  ------------------
  313|  13.9k|                                    case 'a':
  ------------------
  |  Branch (313:37): [True: 66, False: 18.9k]
  ------------------
  314|  13.9k|                                        return OpCode::SLA;
  315|       |
  316|  2.90k|                                    case 'E':
  ------------------
  |  Branch (316:37): [True: 2.90k, False: 16.1k]
  ------------------
  317|  2.97k|                                    case 'e':
  ------------------
  |  Branch (317:37): [True: 66, False: 18.9k]
  ------------------
  318|  2.97k|                                        return OpCode::SLE;
  319|       |
  320|  1.09k|                                    case 'L':
  ------------------
  |  Branch (320:37): [True: 1.09k, False: 17.9k]
  ------------------
  321|  1.16k|                                    case 'l':
  ------------------
  |  Branch (321:37): [True: 66, False: 18.9k]
  ------------------
  322|  1.16k|                                        return OpCode::SLL;
  323|       |
  324|    767|                                    case 'T':
  ------------------
  |  Branch (324:37): [True: 767, False: 18.2k]
  ------------------
  325|    892|                                    case 't':
  ------------------
  |  Branch (325:37): [True: 125, False: 18.9k]
  ------------------
  326|    892|                                        return OpCode::SLT;
  327|  19.0k|                                }
  328|     67|                                break;
  329|       |
  330|  21.4k|                            case 'N':
  ------------------
  |  Branch (330:29): [True: 21.4k, False: 136k]
  ------------------
  331|  21.5k|                            case 'n':
  ------------------
  |  Branch (331:29): [True: 132, False: 157k]
  ------------------
  332|  21.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (332:37): [True: 21.4k, False: 66]
  ------------------
  333|  21.4k|                                {
  334|  21.4k|                                    return OpCode::SNE;
  335|  21.4k|                                }
  336|     66|                                break;
  337|       |
  338|  18.6k|                            case 'R':
  ------------------
  |  Branch (338:29): [True: 18.6k, False: 138k]
  ------------------
  339|  18.7k|                            case 'r':
  ------------------
  |  Branch (339:29): [True: 129, False: 157k]
  ------------------
  340|  18.7k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (340:37): [True: 252, False: 18.5k]
  ------------------
  341|    252|                                {
  342|    252|                                    return OpCode::SRA;
  343|    252|                                }
  344|  18.5k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (344:42): [True: 18.4k, False: 66]
  ------------------
  345|  18.4k|                                {
  346|  18.4k|                                    return OpCode::SRL;
  347|  18.4k|                                }
  348|     66|                                break;
  349|       |
  350|  24.5k|                            case 'U':
  ------------------
  |  Branch (350:29): [True: 24.5k, False: 132k]
  ------------------
  351|  24.6k|                            case 'u':
  ------------------
  |  Branch (351:29): [True: 93, False: 157k]
  ------------------
  352|  24.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (352:37): [True: 24.6k, False: 66]
  ------------------
  353|  24.6k|                                {
  354|  24.6k|                                    return OpCode::SUB;
  355|  24.6k|                                }
  356|     66|                                break;
  357|       |
  358|  3.68k|                            case 'W':
  ------------------
  |  Branch (358:29): [True: 3.68k, False: 153k]
  ------------------
  359|  3.90k|                            case 'w':
  ------------------
  |  Branch (359:29): [True: 220, False: 157k]
  ------------------
  360|  3.90k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (360:37): [True: 3.78k, False: 122]
  ------------------
  361|  3.78k|                                {
  362|  3.78k|                                    return OpCode::SWU;
  363|  3.78k|                                }
  364|    122|                                break;
  365|   157k|                        }
  366|       |
  367|  13.0k|                    case 'X':
  ------------------
  |  Branch (367:21): [True: 2.17k, False: 645k]
  ------------------
  368|  13.2k|                    case 'x':
  ------------------
  |  Branch (368:21): [True: 225, False: 647k]
  ------------------
  369|  13.2k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (369:29): [True: 2.20k, False: 11.0k]
  |  Branch (369:29): [True: 2.03k, False: 11.2k]
  |  Branch (369:45): [True: 2.03k, False: 170]
  ------------------
  370|  2.03k|                        {
  371|  2.03k|                            return OpCode::XOR;
  372|  2.03k|                        }
  373|  11.2k|                        break;
  374|   647k|                }
  375|   162k|                break;
  376|   647k|            }
  377|       |
  378|       |            // 4 character OpCodes
  379|   535k|            case 4: {
  ------------------
  |  Branch (379:13): [True: 535k, False: 1.04M]
  ------------------
  380|   535k|                const char c1 = token[0u];
  381|   535k|                const char c2 = token[1u];
  382|   535k|                const char c3 = token[2u];
  383|   535k|                const char c4 = token[3u];
  384|       |
  385|   535k|                switch (c1)
  ------------------
  |  Branch (385:25): [True: 53.5k, False: 482k]
  ------------------
  386|   535k|                {
  387|  79.7k|                    case 'A':
  ------------------
  |  Branch (387:21): [True: 79.7k, False: 455k]
  ------------------
  388|  83.9k|                    case 'a':
  ------------------
  |  Branch (388:21): [True: 4.21k, False: 531k]
  ------------------
  389|  83.9k|                        switch (c2)
  ------------------
  |  Branch (389:33): [True: 506, False: 83.4k]
  ------------------
  390|  83.9k|                        {
  391|  71.6k|                            case 'D':
  ------------------
  |  Branch (391:29): [True: 71.6k, False: 12.2k]
  ------------------
  392|  75.3k|                            case 'd':
  ------------------
  |  Branch (392:29): [True: 3.68k, False: 80.2k]
  ------------------
  393|  75.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (393:37): [True: 75.3k, False: 70]
  ------------------
  394|  75.3k|                                {
  395|  75.3k|                                    switch (c4)
  ------------------
  |  Branch (395:45): [True: 3.27k, False: 72.0k]
  ------------------
  396|  75.3k|                                    {
  397|  21.6k|                                        case 'D':
  ------------------
  |  Branch (397:41): [True: 21.6k, False: 53.6k]
  ------------------
  398|  21.7k|                                        case 'd':
  ------------------
  |  Branch (398:41): [True: 66, False: 75.2k]
  ------------------
  399|  21.7k|                                            return OpCode::ADDD;
  400|       |
  401|  27.6k|                                        case 'F':
  ------------------
  |  Branch (401:41): [True: 27.6k, False: 47.6k]
  ------------------
  402|  27.8k|                                        case 'f':
  ------------------
  |  Branch (402:41): [True: 246, False: 75.0k]
  ------------------
  403|  27.8k|                                            return OpCode::ADDF;
  404|       |
  405|  17.0k|                                        case 'I':
  ------------------
  |  Branch (405:41): [True: 17.0k, False: 58.2k]
  ------------------
  406|  17.1k|                                        case 'i':
  ------------------
  |  Branch (406:41): [True: 66, False: 75.2k]
  ------------------
  407|  17.1k|                                            return OpCode::ADDI;
  408|       |
  409|  5.27k|                                        case 'U':
  ------------------
  |  Branch (409:41): [True: 5.27k, False: 70.0k]
  ------------------
  410|  5.34k|                                        case 'u':
  ------------------
  |  Branch (410:41): [True: 66, False: 75.2k]
  ------------------
  411|  5.34k|                                            return OpCode::ADDU;
  412|  75.3k|                                    }
  413|  75.3k|                                }
  414|  3.34k|                                break;
  415|       |
  416|  7.99k|                            case 'N':
  ------------------
  |  Branch (416:29): [True: 7.99k, False: 75.9k]
  ------------------
  417|  8.09k|                            case 'n':
  ------------------
  |  Branch (417:29): [True: 102, False: 83.8k]
  ------------------
  418|  8.09k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (418:37): [True: 8.02k, False: 66]
  |  Branch (418:37): [True: 7.96k, False: 132]
  |  Branch (418:53): [True: 7.96k, False: 66]
  ------------------
  419|  7.96k|                                {
  420|  7.96k|                                    return OpCode::ANDI;
  421|  7.96k|                                }
  422|       |
  423|    132|                                break;
  424|  83.9k|                        }
  425|  3.98k|                        break;
  426|       |
  427|  37.5k|                    case 'B':
  ------------------
  |  Branch (427:21): [True: 37.5k, False: 498k]
  ------------------
  428|  98.9k|                    case 'b':
  ------------------
  |  Branch (428:21): [True: 61.3k, False: 474k]
  ------------------
  429|  98.9k|                        switch (c2)
  ------------------
  |  Branch (429:33): [True: 9.20k, False: 89.7k]
  ------------------
  430|  98.9k|                        {
  431|    116|                            case 'E':
  ------------------
  |  Branch (431:29): [True: 116, False: 98.8k]
  ------------------
  432|    902|                            case 'e':
  ------------------
  |  Branch (432:29): [True: 786, False: 98.1k]
  ------------------
  433|    902|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (433:37): [True: 781, False: 121]
  |  Branch (433:37): [True: 182, False: 720]
  |  Branch (433:53): [True: 182, False: 599]
  ------------------
  434|    182|                                {
  435|    182|                                    return OpCode::BEQZ;
  436|    182|                                }
  437|    720|                                break;
  438|       |
  439|  37.2k|                            case 'F':
  ------------------
  |  Branch (439:29): [True: 37.2k, False: 61.6k]
  ------------------
  440|  59.9k|                            case 'f':
  ------------------
  |  Branch (440:29): [True: 22.6k, False: 76.2k]
  ------------------
  441|  59.9k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (441:37): [True: 58.4k, False: 1.48k]
  ------------------
  442|  58.4k|                                {
  443|  58.4k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (443:41): [True: 37.2k, False: 21.2k]
  ------------------
  444|  37.2k|                                    {
  445|  37.2k|                                        return OpCode::BFPF;
  446|  37.2k|                                    }
  447|  21.2k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (447:46): [True: 19.8k, False: 1.37k]
  ------------------
  448|  19.8k|                                    {
  449|  19.8k|                                        return OpCode::BFPT;
  450|  19.8k|                                    }
  451|  58.4k|                                }
  452|  2.85k|                                break;
  453|       |
  454|  28.7k|                            case 'N':
  ------------------
  |  Branch (454:29): [True: 28.7k, False: 70.1k]
  ------------------
  455|  28.8k|                            case 'n':
  ------------------
  |  Branch (455:29): [True: 87, False: 98.8k]
  ------------------
  456|  28.8k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (456:37): [True: 27.5k, False: 1.34k]
  |  Branch (456:37): [True: 11.9k, False: 16.8k]
  |  Branch (456:53): [True: 11.9k, False: 15.5k]
  ------------------
  457|  11.9k|                                {
  458|  11.9k|                                    return OpCode::BNEZ;
  459|  11.9k|                                }
  460|  98.9k|                        }
  461|  29.6k|                        break;
  462|       |
  463|  29.6k|                    case 'D':
  ------------------
  |  Branch (463:21): [True: 1.06k, False: 534k]
  ------------------
  464|  44.2k|                    case 'd':
  ------------------
  |  Branch (464:21): [True: 43.1k, False: 492k]
  ------------------
  465|  44.2k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (465:29): [True: 35.1k, False: 9.08k]
  |  Branch (465:29): [True: 24.4k, False: 19.7k]
  |  Branch (465:45): [True: 24.4k, False: 10.6k]
  ------------------
  466|  24.4k|                        {
  467|  24.4k|                            switch (c4)
  ------------------
  |  Branch (467:37): [True: 7.77k, False: 16.6k]
  ------------------
  468|  24.4k|                            {
  469|    506|                                case 'D':
  ------------------
  |  Branch (469:33): [True: 506, False: 23.9k]
  ------------------
  470|    572|                                case 'd':
  ------------------
  |  Branch (470:33): [True: 66, False: 24.3k]
  ------------------
  471|    572|                                    return OpCode::DIVD;
  472|       |
  473|    120|                                case 'F':
  ------------------
  |  Branch (473:33): [True: 120, False: 24.3k]
  ------------------
  474|    186|                                case 'f':
  ------------------
  |  Branch (474:33): [True: 66, False: 24.3k]
  ------------------
  475|    186|                                    return OpCode::DIVF;
  476|       |
  477|    229|                                case 'I':
  ------------------
  |  Branch (477:33): [True: 229, False: 24.2k]
  ------------------
  478|  4.68k|                                case 'i':
  ------------------
  |  Branch (478:33): [True: 4.45k, False: 20.0k]
  ------------------
  479|  4.68k|                                    return OpCode::DIVI;
  480|       |
  481|    171|                                case 'U':
  ------------------
  |  Branch (481:33): [True: 171, False: 24.2k]
  ------------------
  482|  11.2k|                                case 'u':
  ------------------
  |  Branch (482:33): [True: 11.0k, False: 13.3k]
  ------------------
  483|  11.2k|                                    return OpCode::DIVU;
  484|  24.4k|                            }
  485|  24.4k|                        }
  486|  27.5k|                        break;
  487|       |
  488|  27.5k|                    case 'H':
  ------------------
  |  Branch (488:21): [True: 608, False: 535k]
  ------------------
  489|    996|                    case 'h':
  ------------------
  |  Branch (489:21): [True: 388, False: 535k]
  ------------------
  490|    996|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (490:29): [True: 838, False: 158]
  |  Branch (490:29): [True: 706, False: 290]
  |  Branch (490:45): [True: 772, False: 66]
  |  Branch (490:61): [True: 706, False: 66]
  ------------------
  491|    706|                        {
  492|    706|                            return OpCode::HALT;
  493|    706|                        }
  494|    290|                        break;
  495|       |
  496|  6.30k|                    case 'J':
  ------------------
  |  Branch (496:21): [True: 6.30k, False: 529k]
  ------------------
  497|  19.3k|                    case 'j':
  ------------------
  |  Branch (497:21): [True: 13.0k, False: 522k]
  ------------------
  498|  19.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (498:29): [True: 18.0k, False: 1.32k]
  |  Branch (498:29): [True: 6.37k, False: 13.0k]
  |  Branch (498:45): [True: 10.4k, False: 7.67k]
  |  Branch (498:61): [True: 6.37k, False: 4.03k]
  ------------------
  499|  6.37k|                        {
  500|  6.37k|                            return OpCode::JALR;
  501|  6.37k|                        }
  502|  13.0k|                        break;
  503|       |
  504|  28.8k|                    case 'M':
  ------------------
  |  Branch (504:21): [True: 28.8k, False: 506k]
  ------------------
  505|  29.4k|                    case 'm':
  ------------------
  |  Branch (505:21): [True: 598, False: 535k]
  ------------------
  506|  29.4k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (506:29): [True: 26.5k, False: 2.90k]
  |  Branch (506:29): [True: 11.5k, False: 17.9k]
  |  Branch (506:45): [True: 11.5k, False: 15.0k]
  ------------------
  507|  11.5k|                        {
  508|  11.5k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (508:33): [True: 581, False: 10.9k]
  ------------------
  509|    581|                            {
  510|    581|                                return OpCode::MOVD;
  511|    581|                            }
  512|  10.9k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (512:38): [True: 474, False: 10.4k]
  ------------------
  513|    474|                            {
  514|    474|                                return OpCode::MOVF;
  515|    474|                            }
  516|  11.5k|                        }
  517|  17.9k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (517:34): [True: 2.29k, False: 15.6k]
  |  Branch (517:34): [True: 2.16k, False: 15.7k]
  |  Branch (517:50): [True: 2.22k, False: 66]
  |  Branch (517:66): [True: 2.16k, False: 67]
  ------------------
  518|  2.16k|                        {
  519|  2.16k|                            return OpCode::MULT;
  520|  2.16k|                        }
  521|  26.2k|                        break;
  522|       |
  523|   188k|                    case 'S':
  ------------------
  |  Branch (523:21): [True: 188k, False: 347k]
  ------------------
  524|   189k|                    case 's':
  ------------------
  |  Branch (524:21): [True: 1.09k, False: 534k]
  ------------------
  525|   189k|                        switch (c2)
  ------------------
  |  Branch (525:33): [True: 1.36k, False: 187k]
  ------------------
  526|   189k|                        {
  527|  46.1k|                            case 'E':
  ------------------
  |  Branch (527:29): [True: 46.1k, False: 143k]
  ------------------
  528|  46.4k|                            case 'e':
  ------------------
  |  Branch (528:29): [True: 267, False: 188k]
  ------------------
  529|  46.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (529:37): [True: 46.3k, False: 72]
  ------------------
  530|  46.3k|                                {
  531|  46.3k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (531:41): [True: 6.51k, False: 39.8k]
  ------------------
  532|  6.51k|                                    {
  533|  6.51k|                                        return OpCode::SEQI;
  534|  6.51k|                                    }
  535|  39.8k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (535:46): [True: 39.7k, False: 66]
  ------------------
  536|  39.7k|                                    {
  537|  39.7k|                                        return OpCode::SEQU;
  538|  39.7k|                                    }
  539|  46.3k|                                }
  540|    138|                                break;
  541|       |
  542|  14.8k|                            case 'G':
  ------------------
  |  Branch (542:29): [True: 14.8k, False: 174k]
  ------------------
  543|  28.1k|                            case 'g':
  ------------------
  |  Branch (543:29): [True: 13.2k, False: 175k]
  ------------------
  544|  28.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (544:37): [True: 10.6k, False: 17.5k]
  ------------------
  545|  10.6k|                                {
  546|  10.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (546:41): [True: 10.0k, False: 532]
  ------------------
  547|  10.0k|                                    {
  548|  10.0k|                                        return OpCode::SGEI;
  549|  10.0k|                                    }
  550|    532|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (550:46): [True: 466, False: 66]
  ------------------
  551|    466|                                    {
  552|    466|                                        return OpCode::SGEU;
  553|    466|                                    }
  554|  10.6k|                                }
  555|  17.5k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (555:42): [True: 17.5k, False: 84]
  ------------------
  556|  17.5k|                                {
  557|  17.5k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (557:41): [True: 429, False: 17.0k]
  ------------------
  558|    429|                                    {
  559|    429|                                        return OpCode::SGTI;
  560|    429|                                    }
  561|  17.0k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (561:46): [True: 4.12k, False: 12.9k]
  ------------------
  562|  4.12k|                                    {
  563|  4.12k|                                        return OpCode::SGTU;
  564|  4.12k|                                    }
  565|  17.5k|                                }
  566|  13.0k|                                break;
  567|       |
  568|  22.0k|                            case 'L':
  ------------------
  |  Branch (568:29): [True: 22.0k, False: 167k]
  ------------------
  569|  38.2k|                            case 'l':
  ------------------
  |  Branch (569:29): [True: 16.2k, False: 172k]
  ------------------
  570|  38.2k|                                switch (c3)
  ------------------
  |  Branch (570:41): [True: 162, False: 38.0k]
  ------------------
  571|  38.2k|                                {
  572|    151|                                    case 'A':
  ------------------
  |  Branch (572:37): [True: 151, False: 38.1k]
  ------------------
  573|    283|                                    case 'a':
  ------------------
  |  Branch (573:37): [True: 132, False: 38.1k]
  ------------------
  574|    283|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (574:45): [True: 216, False: 67]
  ------------------
  575|    216|                                        {
  576|    216|                                            return OpCode::SLAI;
  577|    216|                                        }
  578|     67|                                        break;
  579|       |
  580|  6.17k|                                    case 'E':
  ------------------
  |  Branch (580:37): [True: 6.17k, False: 32.0k]
  ------------------
  581|  10.1k|                                    case 'e':
  ------------------
  |  Branch (581:37): [True: 3.97k, False: 34.2k]
  ------------------
  582|  10.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (582:45): [True: 875, False: 9.27k]
  ------------------
  583|    875|                                        {
  584|    875|                                            return OpCode::SLEI;
  585|    875|                                        }
  586|  9.27k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (586:50): [True: 5.49k, False: 3.77k]
  ------------------
  587|  5.49k|                                        {
  588|  5.49k|                                            return OpCode::SLEU;
  589|  5.49k|                                        }
  590|  3.77k|                                        break;
  591|       |
  592|  3.77k|                                    case 'L':
  ------------------
  |  Branch (592:37): [True: 560, False: 37.6k]
  ------------------
  593|  12.3k|                                    case 'l':
  ------------------
  |  Branch (593:37): [True: 11.8k, False: 26.4k]
  ------------------
  594|  12.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (594:45): [True: 6.95k, False: 5.43k]
  ------------------
  595|  6.95k|                                        {
  596|  6.95k|                                            return OpCode::SLLI;
  597|  6.95k|                                        }
  598|  5.43k|                                        break;
  599|       |
  600|  15.1k|                                    case 'T':
  ------------------
  |  Branch (600:37): [True: 15.1k, False: 23.1k]
  ------------------
  601|  15.2k|                                    case 't':
  ------------------
  |  Branch (601:37): [True: 138, False: 38.1k]
  ------------------
  602|  15.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (602:45): [True: 13.7k, False: 1.53k]
  ------------------
  603|  13.7k|                                        {
  604|  13.7k|                                            return OpCode::SLTI;
  605|  13.7k|                                        }
  606|  1.53k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (606:50): [True: 1.46k, False: 79]
  ------------------
  607|  1.46k|                                        {
  608|  1.46k|                                            return OpCode::SLTU;
  609|  1.46k|                                        }
  610|     79|                                        break;
  611|  38.2k|                                }
  612|       |
  613|  9.88k|                            case 'N':
  ------------------
  |  Branch (613:29): [True: 362, False: 188k]
  ------------------
  614|  10.0k|                            case 'n':
  ------------------
  |  Branch (614:29): [True: 191, False: 189k]
  ------------------
  615|  10.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (615:37): [True: 4.33k, False: 5.74k]
  ------------------
  616|  4.33k|                                {
  617|  4.33k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (617:41): [True: 214, False: 4.11k]
  ------------------
  618|    214|                                    {
  619|    214|                                        return OpCode::SNEI;
  620|    214|                                    }
  621|  4.11k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (621:46): [True: 283, False: 3.83k]
  ------------------
  622|    283|                                    {
  623|    283|                                        return OpCode::SNEU;
  624|    283|                                    }
  625|  4.33k|                                }
  626|  9.58k|                                break;
  627|       |
  628|  26.7k|                            case 'R':
  ------------------
  |  Branch (628:29): [True: 26.7k, False: 162k]
  ------------------
  629|  26.9k|                            case 'r':
  ------------------
  |  Branch (629:29): [True: 160, False: 189k]
  ------------------
  630|  26.9k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (630:37): [True: 2.02k, False: 24.8k]
  |  Branch (630:37): [True: 1.76k, False: 25.1k]
  |  Branch (630:53): [True: 1.76k, False: 260]
  ------------------
  631|  1.76k|                                {
  632|  1.76k|                                    return OpCode::SRAI;
  633|  1.76k|                                }
  634|  25.1k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (634:42): [True: 24.8k, False: 262]
  |  Branch (634:42): [True: 24.8k, False: 331]
  |  Branch (634:58): [True: 24.8k, False: 69]
  ------------------
  635|  24.8k|                                {
  636|  24.8k|                                    return OpCode::SRLI;
  637|  24.8k|                                }
  638|    331|                                break;
  639|       |
  640|  47.2k|                            case 'U':
  ------------------
  |  Branch (640:29): [True: 47.2k, False: 142k]
  ------------------
  641|  47.5k|                            case 'u':
  ------------------
  |  Branch (641:29): [True: 316, False: 188k]
  ------------------
  642|  47.5k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (642:37): [True: 47.4k, False: 66]
  ------------------
  643|  47.4k|                                {
  644|  47.4k|                                    switch (c4)
  ------------------
  |  Branch (644:45): [True: 66, False: 47.3k]
  ------------------
  645|  47.4k|                                    {
  646|  2.33k|                                        case 'D':
  ------------------
  |  Branch (646:41): [True: 2.33k, False: 45.1k]
  ------------------
  647|  2.40k|                                        case 'd':
  ------------------
  |  Branch (647:41): [True: 66, False: 47.3k]
  ------------------
  648|  2.40k|                                            return OpCode::SUBD;
  649|       |
  650|  24.9k|                                        case 'F':
  ------------------
  |  Branch (650:41): [True: 24.9k, False: 22.5k]
  ------------------
  651|  25.1k|                                        case 'f':
  ------------------
  |  Branch (651:41): [True: 194, False: 47.2k]
  ------------------
  652|  25.1k|                                            return OpCode::SUBF;
  653|       |
  654|  2.01k|                                        case 'I':
  ------------------
  |  Branch (654:41): [True: 2.01k, False: 45.4k]
  ------------------
  655|  2.07k|                                        case 'i':
  ------------------
  |  Branch (655:41): [True: 66, False: 47.3k]
  ------------------
  656|  2.07k|                                            return OpCode::SUBI;
  657|       |
  658|  17.7k|                                        case 'U':
  ------------------
  |  Branch (658:41): [True: 17.7k, False: 29.7k]
  ------------------
  659|  17.7k|                                        case 'u':
  ------------------
  |  Branch (659:41): [True: 66, False: 47.3k]
  ------------------
  660|  17.7k|                                            return OpCode::SUBU;
  661|  47.4k|                                    }
  662|  47.4k|                                }
  663|    132|                                break;
  664|   189k|                        }
  665|  24.6k|                        break;
  666|       |
  667|  24.6k|                    case 'T':
  ------------------
  |  Branch (667:21): [True: 3.40k, False: 532k]
  ------------------
  668|  4.32k|                    case 't':
  ------------------
  |  Branch (668:21): [True: 916, False: 534k]
  ------------------
  669|  4.32k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (669:29): [True: 3.58k, False: 736]
  |  Branch (669:29): [True: 3.45k, False: 868]
  |  Branch (669:45): [True: 3.52k, False: 66]
  |  Branch (669:61): [True: 3.45k, False: 66]
  ------------------
  670|  3.45k|                        {
  671|  3.45k|                            return OpCode::TRAP;
  672|  3.45k|                        }
  673|    868|                        break;
  674|  3.64k|                    case 'X':
  ------------------
  |  Branch (674:21): [True: 3.64k, False: 532k]
  ------------------
  675|  11.6k|                    case 'x':
  ------------------
  |  Branch (675:21): [True: 8.03k, False: 527k]
  ------------------
  676|  11.6k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (676:29): [True: 6.89k, False: 4.78k]
  |  Branch (676:29): [True: 6.31k, False: 5.36k]
  |  Branch (676:45): [True: 6.67k, False: 217]
  |  Branch (676:61): [True: 6.31k, False: 365]
  ------------------
  677|  6.31k|                        {
  678|  6.31k|                            return OpCode::XORI;
  679|  6.31k|                        }
  680|  5.36k|                        break;
  681|   535k|                }
  682|   185k|                break;
  683|   535k|            }
  684|       |
  685|       |            // 5 character OpCodes
  686|   185k|            case 5: {
  ------------------
  |  Branch (686:13): [True: 110k, False: 1.47M]
  ------------------
  687|   110k|                const char c1 = token[0u];
  688|   110k|                const char c2 = token[1u];
  689|   110k|                const char c3 = token[2u];
  690|   110k|                const char c4 = token[3u];
  691|   110k|                const char c5 = token[4u];
  692|       |
  693|   110k|                switch (c1)
  ------------------
  |  Branch (693:25): [True: 21.6k, False: 89.2k]
  ------------------
  694|   110k|                {
  695|  4.64k|                    case 'A':
  ------------------
  |  Branch (695:21): [True: 4.64k, False: 106k]
  ------------------
  696|  4.64k|                    case 'a':
  ------------------
  |  Branch (696:21): [True: 0, False: 110k]
  ------------------
  697|  4.64k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (697:29): [True: 4.64k, False: 0]
  |  Branch (697:29): [True: 4.64k, False: 0]
  |  Branch (697:45): [True: 4.64k, False: 0]
  |  Branch (697:61): [True: 4.64k, False: 0]
  |  Branch (697:77): [True: 4.64k, False: 0]
  ------------------
  698|  4.64k|                        {
  699|  4.64k|                            return OpCode::ADDUI;
  700|  4.64k|                        }
  701|      0|                        break;
  702|       |
  703|  23.2k|                    case 'D':
  ------------------
  |  Branch (703:21): [True: 23.2k, False: 87.6k]
  ------------------
  704|  23.2k|                    case 'd':
  ------------------
  |  Branch (704:21): [True: 0, False: 110k]
  ------------------
  705|  23.2k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (705:29): [True: 23.2k, False: 0]
  |  Branch (705:29): [True: 23.2k, False: 0]
  |  Branch (705:45): [True: 23.2k, False: 0]
  |  Branch (705:61): [True: 23.2k, False: 0]
  |  Branch (705:77): [True: 23.2k, False: 0]
  ------------------
  706|  23.2k|                        {
  707|  23.2k|                            return OpCode::DIVUI;
  708|  23.2k|                        }
  709|      0|                        break;
  710|       |
  711|  17.8k|                    case 'M':
  ------------------
  |  Branch (711:21): [True: 17.8k, False: 93.0k]
  ------------------
  712|  17.8k|                    case 'm':
  ------------------
  |  Branch (712:21): [True: 0, False: 110k]
  ------------------
  713|  17.8k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (713:29): [True: 17.8k, False: 0]
  |  Branch (713:29): [True: 17.8k, False: 0]
  |  Branch (713:45): [True: 17.8k, False: 0]
  |  Branch (713:61): [True: 17.8k, False: 0]
  ------------------
  714|  17.8k|                        {
  715|  17.8k|                            switch (c5)
  ------------------
  |  Branch (715:37): [True: 0, False: 17.8k]
  ------------------
  716|  17.8k|                            {
  717|    298|                                case 'D':
  ------------------
  |  Branch (717:33): [True: 298, False: 17.5k]
  ------------------
  718|    298|                                case 'd':
  ------------------
  |  Branch (718:33): [True: 0, False: 17.8k]
  ------------------
  719|    298|                                    return OpCode::MULTD;
  720|       |
  721|  4.60k|                                case 'F':
  ------------------
  |  Branch (721:33): [True: 4.60k, False: 13.2k]
  ------------------
  722|  4.60k|                                case 'f':
  ------------------
  |  Branch (722:33): [True: 0, False: 17.8k]
  ------------------
  723|  4.60k|                                    return OpCode::MULTF;
  724|       |
  725|    924|                                case 'I':
  ------------------
  |  Branch (725:33): [True: 924, False: 16.9k]
  ------------------
  726|    924|                                case 'i':
  ------------------
  |  Branch (726:33): [True: 0, False: 17.8k]
  ------------------
  727|    924|                                    return OpCode::MULTI;
  728|       |
  729|  12.0k|                                case 'U':
  ------------------
  |  Branch (729:33): [True: 12.0k, False: 5.83k]
  ------------------
  730|  12.0k|                                case 'u':
  ------------------
  |  Branch (730:33): [True: 0, False: 17.8k]
  ------------------
  731|  12.0k|                                    return OpCode::MULTU;
  732|  17.8k|                            }
  733|  17.8k|                        }
  734|      0|                        break;
  735|       |
  736|  43.4k|                    case 'S':
  ------------------
  |  Branch (736:21): [True: 43.4k, False: 67.5k]
  ------------------
  737|  43.4k|                    case 's':
  ------------------
  |  Branch (737:21): [True: 0, False: 110k]
  ------------------
  738|  43.4k|                        switch (c2)
  ------------------
  |  Branch (738:33): [True: 0, False: 43.4k]
  ------------------
  739|  43.4k|                        {
  740|  19.0k|                            case 'E':
  ------------------
  |  Branch (740:29): [True: 19.0k, False: 24.3k]
  ------------------
  741|  19.0k|                            case 'e':
  ------------------
  |  Branch (741:29): [True: 0, False: 43.4k]
  ------------------
  742|  19.0k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (742:37): [True: 19.0k, False: 0]
  |  Branch (742:37): [True: 19.0k, False: 0]
  |  Branch (742:53): [True: 19.0k, False: 0]
  |  Branch (742:69): [True: 19.0k, False: 0]
  ------------------
  743|  19.0k|                                {
  744|  19.0k|                                    return OpCode::SEQUI;
  745|  19.0k|                                }
  746|      0|                                break;
  747|       |
  748|  21.1k|                            case 'G':
  ------------------
  |  Branch (748:29): [True: 21.1k, False: 22.3k]
  ------------------
  749|  21.1k|                            case 'g':
  ------------------
  |  Branch (749:29): [True: 0, False: 43.4k]
  ------------------
  750|  21.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (750:37): [True: 20.9k, False: 138]
  |  Branch (750:37): [True: 20.9k, False: 138]
  |  Branch (750:53): [True: 20.9k, False: 0]
  |  Branch (750:69): [True: 20.9k, False: 0]
  ------------------
  751|  20.9k|                                {
  752|  20.9k|                                    return OpCode::SGEUI;
  753|  20.9k|                                }
  754|    138|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (754:42): [True: 138, False: 0]
  |  Branch (754:42): [True: 138, False: 0]
  |  Branch (754:58): [True: 138, False: 0]
  |  Branch (754:74): [True: 138, False: 0]
  ------------------
  755|    138|                                {
  756|    138|                                    return OpCode::SGTUI;
  757|    138|                                }
  758|      0|                                break;
  759|       |
  760|  1.97k|                            case 'L':
  ------------------
  |  Branch (760:29): [True: 1.97k, False: 41.5k]
  ------------------
  761|  1.97k|                            case 'l':
  ------------------
  |  Branch (761:29): [True: 0, False: 43.4k]
  ------------------
  762|  1.97k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (762:37): [True: 1.72k, False: 248]
  |  Branch (762:37): [True: 1.72k, False: 248]
  |  Branch (762:53): [True: 1.72k, False: 0]
  |  Branch (762:69): [True: 1.72k, False: 0]
  ------------------
  763|  1.72k|                                {
  764|  1.72k|                                    return OpCode::SLEUI;
  765|  1.72k|                                }
  766|    248|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (766:42): [True: 248, False: 0]
  |  Branch (766:42): [True: 248, False: 0]
  |  Branch (766:58): [True: 248, False: 0]
  |  Branch (766:74): [True: 248, False: 0]
  ------------------
  767|    248|                                {
  768|    248|                                    return OpCode::SLTUI;
  769|    248|                                }
  770|      0|                                break;
  771|       |
  772|    824|                            case 'N':
  ------------------
  |  Branch (772:29): [True: 824, False: 42.6k]
  ------------------
  773|    824|                            case 'n':
  ------------------
  |  Branch (773:29): [True: 0, False: 43.4k]
  ------------------
  774|    824|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (774:37): [True: 824, False: 0]
  |  Branch (774:37): [True: 824, False: 0]
  |  Branch (774:53): [True: 824, False: 0]
  |  Branch (774:69): [True: 824, False: 0]
  ------------------
  775|    824|                                {
  776|    824|                                    return OpCode::SNEUI;
  777|    824|                                }
  778|      0|                                break;
  779|       |
  780|    473|                            case 'U':
  ------------------
  |  Branch (780:29): [True: 473, False: 42.9k]
  ------------------
  781|    473|                            case 'u':
  ------------------
  |  Branch (781:29): [True: 0, False: 43.4k]
  ------------------
  782|    473|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (782:37): [True: 473, False: 0]
  |  Branch (782:37): [True: 473, False: 0]
  |  Branch (782:53): [True: 473, False: 0]
  |  Branch (782:69): [True: 473, False: 0]
  ------------------
  783|    473|                                {
  784|    473|                                    return OpCode::SUBUI;
  785|    473|                                }
  786|      0|                                break;
  787|  43.4k|                        }
  788|       |
  789|      0|                        break;
  790|   110k|                }
  791|       |
  792|  21.6k|                break;
  793|   110k|            }
  794|       |
  795|       |            // 6 character OpCodes
  796|  21.6k|            case 6: {
  ------------------
  |  Branch (796:13): [True: 5.00k, False: 1.57M]
  ------------------
  797|  5.00k|                const char c1 = token[0u];
  798|  5.00k|                const char c2 = token[1u];
  799|  5.00k|                const char c3 = token[2u];
  800|  5.00k|                const char c4 = token[3u];
  801|  5.00k|                const char c5 = token[4u];
  802|  5.00k|                const char c6 = token[5u];
  803|       |
  804|  5.00k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (804:21): [True: 1.72k, False: 3.28k]
  |  Branch (804:21): [True: 1.72k, False: 3.28k]
  |  Branch (804:37): [True: 1.72k, False: 0]
  |  Branch (804:53): [True: 1.72k, False: 0]
  ------------------
  805|  1.72k|                {
  806|  1.72k|                    switch (c4)
  ------------------
  |  Branch (806:29): [True: 0, False: 1.72k]
  ------------------
  807|  1.72k|                    {
  808|    864|                        case 'D':
  ------------------
  |  Branch (808:25): [True: 864, False: 862]
  ------------------
  809|    864|                        case 'd':
  ------------------
  |  Branch (809:25): [True: 0, False: 1.72k]
  ------------------
  810|    864|                            if (c5 == '2')
  ------------------
  |  Branch (810:33): [True: 864, False: 0]
  ------------------
  811|    864|                            {
  812|    864|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (812:37): [True: 85, False: 779]
  ------------------
  813|     85|                                {
  814|     85|                                    return OpCode::CVTD2F;
  815|     85|                                }
  816|    779|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (816:42): [True: 779, False: 0]
  ------------------
  817|    779|                                {
  818|    779|                                    return OpCode::CVTD2I;
  819|    779|                                }
  820|    864|                            }
  821|      0|                            break;
  822|       |
  823|    192|                        case 'F':
  ------------------
  |  Branch (823:25): [True: 192, False: 1.53k]
  ------------------
  824|    192|                        case 'f':
  ------------------
  |  Branch (824:25): [True: 0, False: 1.72k]
  ------------------
  825|    192|                            if (c5 == '2')
  ------------------
  |  Branch (825:33): [True: 192, False: 0]
  ------------------
  826|    192|                            {
  827|    192|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (827:37): [True: 93, False: 99]
  ------------------
  828|     93|                                {
  829|     93|                                    return OpCode::CVTF2D;
  830|     93|                                }
  831|     99|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (831:42): [True: 99, False: 0]
  ------------------
  832|     99|                                {
  833|     99|                                    return OpCode::CVTF2I;
  834|     99|                                }
  835|    192|                            }
  836|      0|                            break;
  837|       |
  838|    670|                        case 'I':
  ------------------
  |  Branch (838:25): [True: 670, False: 1.05k]
  ------------------
  839|    670|                        case 'i':
  ------------------
  |  Branch (839:25): [True: 0, False: 1.72k]
  ------------------
  840|    670|                            if (c5 == '2')
  ------------------
  |  Branch (840:33): [True: 670, False: 0]
  ------------------
  841|    670|                            {
  842|    670|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (842:37): [True: 559, False: 111]
  ------------------
  843|    559|                                {
  844|    559|                                    return OpCode::CVTI2D;
  845|    559|                                }
  846|    111|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (846:42): [True: 111, False: 0]
  ------------------
  847|    111|                                {
  848|    111|                                    return OpCode::CVTI2F;
  849|    111|                                }
  850|    670|                            }
  851|  1.72k|                    }
  852|  1.72k|                }
  853|  3.28k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (853:26): [True: 587, False: 2.69k]
  |  Branch (853:26): [True: 587, False: 2.69k]
  |  Branch (853:42): [True: 587, False: 0]
  |  Branch (853:58): [True: 587, False: 0]
  |  Branch (853:74): [True: 587, False: 0]
  ------------------
  854|  3.28k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (854:26): [True: 587, False: 0]
  |  Branch (854:42): [True: 587, False: 0]
  ------------------
  855|    587|                {
  856|    587|                    return OpCode::MULTUI;
  857|    587|                }
  858|  2.69k|                break;
  859|  5.00k|            }
  860|       |
  861|       |            // 7 character OpCodes
  862|  27.8k|            case 7: {
  ------------------
  |  Branch (862:13): [True: 27.8k, False: 1.55M]
  ------------------
  863|  27.8k|                const char c1 = token[0u];
  864|  27.8k|                const char c2 = token[1u];
  865|  27.8k|                const char c3 = token[2u];
  866|  27.8k|                const char c4 = token[3u];
  867|  27.8k|                const char c5 = token[4u];
  868|  27.8k|                const char c6 = token[5u];
  869|  27.8k|                const char c7 = token[6u];
  870|       |
  871|  27.8k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (871:21): [True: 27.3k, False: 495]
  |  Branch (871:21): [True: 27.3k, False: 495]
  |  Branch (871:37): [True: 27.3k, False: 0]
  |  Branch (871:53): [True: 27.3k, False: 0]
  ------------------
  872|  27.3k|                {
  873|  27.3k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (873:25): [True: 26.2k, False: 1.07k]
  |  Branch (873:25): [True: 26.2k, False: 1.07k]
  |  Branch (873:41): [True: 26.2k, False: 0]
  |  Branch (873:54): [True: 26.2k, False: 0]
  |  Branch (873:70): [True: 26.2k, False: 0]
  ------------------
  874|  26.2k|                    {
  875|  26.2k|                        return OpCode::MOVI2FP;
  876|  26.2k|                    }
  877|  1.07k|                    if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (877:25): [True: 1.07k, False: 0]
  |  Branch (877:25): [True: 1.07k, False: 0]
  |  Branch (877:41): [True: 1.07k, False: 0]
  |  Branch (877:57): [True: 1.07k, False: 0]
  |  Branch (877:70): [True: 1.07k, False: 0]
  ------------------
  878|  1.07k|                    {
  879|  1.07k|                        return OpCode::MOVFP2I;
  880|  1.07k|                    }
  881|  1.07k|                }
  882|    495|                break;
  883|  27.8k|            }
  884|       |
  885|  62.3k|            default: {
  ------------------
  |  Branch (885:13): [True: 62.3k, False: 1.52M]
  ------------------
  886|  62.3k|                break;
  887|  27.8k|            }
  888|  1.58M|        }
  889|       |
  890|       |        // None found
  891|   539k|        return OpCode::NONE;
  892|  1.58M|    }
_ZN3dlx3iceEcc:
   17|  2.58M|    {
   18|  2.58M|        constexpr const char diff = 'a' - 'A';
   19|  2.58M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.65M, False: 922k]
  |  Branch (19:28): [True: 329k, False: 593k]
  ------------------
   20|  2.58M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.79M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  194|  17.7k|    {
  195|  17.7k|        ParseError err;
  196|       |
  197|  17.7k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  198|  17.7k|        err.m_LineNumber                           = line_number;
  199|  17.7k|        err.m_Column                               = column;
  200|  17.7k|        err.unexpected_argument_type.expected_type = expected_type;
  201|  17.7k|        err.unexpected_argument_type.actual_type   = actual_type;
  202|       |
  203|  17.7k|        return err;
  204|  17.7k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  208|  17.7k|    {
  209|  17.7k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  210|  17.7k|                                                         token.GetColumn().unsafe(), expected_type,
  211|  17.7k|                                                         actual_type);
  212|  17.7k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  217|    587|    {
  218|    587|        ParseError err;
  219|       |
  220|    587|        err.m_Type              = ParseError::Type::InvalidNumber;
  221|    587|        err.m_LineNumber        = line_number;
  222|    587|        err.m_Column            = column;
  223|    587|        err.invalid_number.text = text;
  224|       |
  225|    587|        return err;
  226|    587|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  229|    587|    {
  230|    587|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  231|    587|                                                token.GetColumn().unsafe(), token.GetText());
  232|    587|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  236|     21|    {
  237|     21|        ParseError err;
  238|       |
  239|     21|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  240|     21|        err.m_LineNumber = line_number;
  241|     21|        err.m_Column     = column;
  242|       |
  243|     21|        return err;
  244|     21|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  248|     21|    {
  249|     21|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  250|     21|                                                                     token.GetColumn().unsafe());
  251|     21|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  256|   539k|    {
  257|   539k|        ParseError err;
  258|       |
  259|   539k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  260|   539k|        err.m_LineNumber                   = line_number;
  261|   539k|        err.m_Column                       = column;
  262|   539k|        err.unexpected_token.expected_type = expected_type;
  263|   539k|        err.unexpected_token.actual_type   = actual_type;
  264|       |
  265|   539k|        return err;
  266|   539k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  270|   539k|    {
  271|   539k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  272|   539k|                                                  token.GetColumn().unsafe(), expected_type,
  273|   539k|                                                  token.GetType());
  274|   539k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  278|  11.2k|    {
  279|  11.2k|        ParseError err;
  280|       |
  281|  11.2k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  282|  11.2k|        err.m_LineNumber                   = line_number;
  283|  11.2k|        err.m_Column                       = column;
  284|  11.2k|        err.reserved_identifier.identifier = identifier;
  285|       |
  286|  11.2k|        return err;
  287|  11.2k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  290|  9.82k|    {
  291|  9.82k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  292|  9.82k|                                                    token.GetColumn().unsafe(), token.GetText());
  293|  9.82k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  297|   402k|    {
  298|   402k|        ParseError err;
  299|       |
  300|   402k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  301|   402k|        err.m_LineNumber                       = line_number;
  302|   402k|        err.m_Column                           = column;
  303|   402k|        err.invalid_label_identifier.identifer = identifier;
  304|       |
  305|   402k|        return err;
  306|   402k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  310|   402k|    {
  311|   402k|        return ConstructInvalidLabelIdentifierParseError(
  312|   402k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  313|   402k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEEmm:
  318|  15.4k|    {
  319|  15.4k|        ParseError err;
  320|       |
  321|  15.4k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  322|  15.4k|        err.m_LineNumber                     = line_number;
  323|  15.4k|        err.m_Column                         = column;
  324|  15.4k|        err.label_already_defined.label_name = label_name;
  325|  15.4k|        err.label_already_defined.at_line    = at_line;
  326|  15.4k|        err.label_already_defined.at_column  = at_column;
  327|       |
  328|  15.4k|        return err;
  329|  15.4k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  333|  15.4k|    {
  334|  15.4k|        return ConstructLabelAlreadyDefinedParseError(
  335|  15.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  336|  15.4k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  337|  15.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  341|   692k|    {
  342|   692k|        ParseError err;
  343|       |
  344|   692k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  345|   692k|        err.m_LineNumber = line_number;
  346|   692k|        err.m_Column     = column;
  347|       |
  348|   692k|        return err;
  349|   692k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  353|   692k|    {
  354|   692k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  355|   692k|                                                        token.GetColumn().unsafe());
  356|   692k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  361|   114k|    {
  362|   114k|        ParseError err;
  363|       |
  364|   114k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  365|   114k|        err.m_LineNumber               = line_number;
  366|   114k|        err.m_Column                   = column;
  367|   114k|        err.too_few_arguments.required = required;
  368|   114k|        err.too_few_arguments.provided = provided;
  369|       |
  370|   114k|        return err;
  371|   114k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  375|   114k|    {
  376|   114k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  377|   114k|                                                  token.GetColumn().unsafe(), required, provided);
  378|   114k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  382|  2.52k|    {
  383|  2.52k|        ParseError err;
  384|       |
  385|  2.52k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  386|  2.52k|        err.m_LineNumber           = line_number;
  387|  2.52k|        err.m_Column               = column;
  388|  2.52k|        err.empty_label.label_name = label_name;
  389|       |
  390|  2.52k|        return err;
  391|  2.52k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  394|  2.52k|    {
  395|  2.52k|        return ConstructEmptyLabelParseError(
  396|  2.52k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  397|  2.52k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (397:17): [True: 2.15k, False: 367]
  ------------------
  398|  2.15k|                        token.GetText().substring_view(0u, token.GetText().length() - 1u) :
  399|  2.52k|                        token.GetText());
  400|  2.52k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  404|    202|    {
  405|    202|        ParseError err;
  406|       |
  407|    202|        err.m_Type       = ParseError::Type::TooManyComma;
  408|    202|        err.m_LineNumber = line_number;
  409|    202|        err.m_Column     = column;
  410|       |
  411|    202|        return err;
  412|    202|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  415|    202|    {
  416|    202|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  417|    202|                                               token.GetColumn().unsafe());
  418|    202|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.79M|    {
   19|  1.79M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.79M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  180|  12.6k|    {
  181|  12.6k|        ParsedProgram program;
  182|       |
  183|  12.6k|        program.m_Tokens = tokens;
  184|       |
  185|  12.6k|        phi::boolean line_has_instruction{false};
  186|  12.6k|        phi::usize   label_count{0u};
  187|       |
  188|  3.71M|        while (tokens.has_more())
  ------------------
  |  Branch (188:16): [True: 3.70M, False: 12.6k]
  ------------------
  189|  3.70M|        {
  190|  3.70M|            const Token& current_token = tokens.consume();
  191|       |
  192|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  193|       |
  194|  3.70M|            switch (current_token.GetType())
  195|  3.70M|            {
  196|       |                // Ignore comments
  197|   545k|                case Token::Type::Comment:
  ------------------
  |  Branch (197:17): [True: 545k, False: 3.15M]
  ------------------
  198|       |                    //DLX_DEBUG("Ignoring comment");
  199|   545k|                    break;
  200|       |
  201|  1.32M|                case Token::Type::NewLine:
  ------------------
  |  Branch (201:17): [True: 1.32M, False: 2.38M]
  ------------------
  202|       |                    //DLX_DEBUG("Ignoring newline");
  203|  1.32M|                    line_has_instruction = false;
  204|  1.32M|                    break;
  205|       |
  206|   429k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (206:17): [True: 429k, False: 3.27M]
  ------------------
  207|   429k|                    if (line_has_instruction)
  ------------------
  |  Branch (207:25): [True: 36.0k, False: 393k]
  ------------------
  208|  36.0k|                    {
  209|  36.0k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  210|  36.0k|                                current_token, Token::Type::NewLine));
  211|  36.0k|                        break;
  212|  36.0k|                    }
  213|       |
  214|       |                    // Handle jump labels
  215|       |                    // Check if the last character of the identifier is a colon
  216|   393k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (216:25): [True: 363k, False: 29.9k]
  ------------------
  217|   363k|                    {
  218|   363k|                        program.AddParseError(
  219|   363k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  220|   363k|                        break;
  221|   363k|                    }
  222|       |
  223|  29.9k|                    phi::string_view label_name = current_token.GetText();
  224|  29.9k|                    label_name.remove_suffix(1u);
  225|       |
  226|  29.9k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (226:25): [True: 1.47k, False: 28.4k]
  ------------------
  227|  1.47k|                    {
  228|  1.47k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  229|  1.47k|                                current_token.GetLineNumber().unsafe(),
  230|  1.47k|                                current_token.GetColumn().unsafe(), label_name));
  231|  1.47k|                        break;
  232|  1.47k|                    }
  233|       |
  234|  28.4k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (234:25): [True: 8.78k, False: 19.6k]
  ------------------
  235|  8.78k|                    {
  236|  8.78k|                        program.AddParseError(
  237|  8.78k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  238|  8.78k|                        break;
  239|  8.78k|                    }
  240|       |
  241|       |                    // Check if label was already defined
  242|  19.6k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (242:25): [True: 15.4k, False: 4.25k]
  ------------------
  243|  15.4k|                    {
  244|       |                        // Find first defintions of label
  245|  15.4k|                        const Token* first_label_definition =
  246|  15.4k|                                tokens.find_first_token_if([&](const Token& t) {
  247|  15.4k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  248|  15.4k|                                    {
  249|  15.4k|                                        phi::string_view token_label_name = t.GetText();
  250|  15.4k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  15.4k|                                        if (token_label_name == label_name)
  253|  15.4k|                                        {
  254|  15.4k|                                            return true;
  255|  15.4k|                                        }
  256|  15.4k|                                    }
  257|       |
  258|  15.4k|                                    return false;
  259|  15.4k|                                });
  260|       |
  261|  15.4k|                        PHI_ASSERT(first_label_definition);
  262|       |
  263|  15.4k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  264|  15.4k|                                current_token, *first_label_definition));
  265|  15.4k|                        break;
  266|  15.4k|                    }
  267|       |
  268|  4.25k|                    program.m_JumpData[label_name] =
  269|  4.25k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  270|  4.25k|                    label_count += 1u;
  271|       |
  272|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  273|       |                    //             program.m_Instructions.size());
  274|       |
  275|  4.25k|                    break;
  276|  19.6k|                }
  277|       |
  278|   997k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (278:17): [True: 997k, False: 2.70M]
  ------------------
  279|   997k|                    if (line_has_instruction)
  ------------------
  |  Branch (279:25): [True: 692k, False: 304k]
  ------------------
  280|   692k|                    {
  281|   692k|                        program.AddParseError(
  282|   692k|                                ConstructOneInstructionPerLineParseError(current_token));
  283|   692k|                        break;
  284|   692k|                    }
  285|       |
  286|   304k|                    label_count = 0u;
  287|       |
  288|       |                    // Handle normal instructions
  289|   304k|                    PHI_ASSERT(current_token.HasHint());
  290|   304k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  291|       |
  292|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  293|       |
  294|   304k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  295|       |
  296|       |                    // Make sure we got no problems here
  297|   304k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  298|   304k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  299|   304k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  300|   304k|                    PHI_ASSERT(info.GetExecutor());
  301|       |
  302|   304k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  303|       |                    //DLX_INFO("Instruction requires {} arguments",
  304|       |                    //             number_of_argument_required.unsafe());
  305|       |
  306|       |                    // Create instruction
  307|   304k|                    Instruction  instruction(info, current_token.GetLineNumber());
  308|   304k|                    phi::boolean consumed_comma{false};
  309|       |
  310|       |                    // Parse arguments
  311|   383k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (311:54): [True: 345k, False: 37.8k]
  ------------------
  312|   345k|                    {
  313|       |                        // Get next token
  314|   345k|                        if (!tokens.has_more())
  ------------------
  |  Branch (314:29): [True: 926, False: 344k]
  ------------------
  315|    926|                        {
  316|    926|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  317|    926|                                    current_token, number_of_argument_required.unsafe(),
  318|    926|                                    argument_num.unsafe()));
  319|    926|                            break;
  320|    926|                        }
  321|       |
  322|   344k|                        const Token& token = tokens.consume();
  323|       |
  324|       |                        // Skip commas
  325|   344k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (325:29): [True: 22.2k, False: 322k]
  ------------------
  326|  22.2k|                        {
  327|  22.2k|                            if (consumed_comma)
  ------------------
  |  Branch (327:33): [True: 202, False: 22.0k]
  ------------------
  328|    202|                            {
  329|    202|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  330|    202|                            }
  331|       |
  332|  22.2k|                            consumed_comma = true;
  333|       |                            //DLX_DEBUG("Skipping comma");
  334|  22.2k|                            continue;
  335|  22.2k|                        }
  336|       |
  337|   322k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (337:29): [True: 113k, False: 209k]
  ------------------
  338|   113k|                        {
  339|   113k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  340|   113k|                                    token, number_of_argument_required.unsafe(),
  341|   113k|                                    argument_num.unsafe()));
  342|   113k|                            break;
  343|   113k|                        }
  344|       |
  345|   209k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  346|   209k|                                parse_instruction_argument(
  347|   209k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  348|   209k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (348:29): [True: 152k, False: 57.1k]
  ------------------
  349|   152k|                        {
  350|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  351|   152k|                            break;
  352|   152k|                        }
  353|       |
  354|       |                        // Successfully parsed one argument
  355|  57.1k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  356|       |
  357|  57.1k|                        instruction.SetArgument(argument_num, parsed_argument);
  358|  57.1k|                        argument_num++;
  359|  57.1k|                        consumed_comma = false;
  360|       |
  361|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  362|  57.1k|                    }
  363|       |
  364|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  365|       |                    //            instruction.DebugInfo());
  366|   304k|                    program.m_Instructions.emplace_back(instruction);
  367|   304k|                    line_has_instruction = true;
  368|   304k|                    break;
  369|   997k|                }
  370|       |
  371|   410k|                default:
  ------------------
  |  Branch (371:17): [True: 410k, False: 3.29M]
  ------------------
  372|   410k|                    Token::Type expected_token_type = Token::Type::Unknown;
  373|   410k|                    if (line_has_instruction)
  ------------------
  |  Branch (373:25): [True: 252k, False: 158k]
  ------------------
  374|   252k|                    {
  375|   252k|                        expected_token_type = Token::Type::NewLine;
  376|   252k|                    }
  377|       |
  378|   410k|                    program.AddParseError(
  379|   410k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  380|   410k|                    break;
  381|  3.70M|            }
  382|  3.70M|        }
  383|       |
  384|       |        // Check for empty labels
  385|  12.6k|        if (label_count > 0u)
  ------------------
  |  Branch (385:13): [True: 412, False: 12.2k]
  ------------------
  386|    412|        {
  387|  4.45k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (387:45): [True: 4.04k, False: 412]
  ------------------
  388|  4.04k|            {
  389|  4.04k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  390|       |
  391|  4.04k|                const Token& token = *it;
  392|  4.04k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (392:21): [True: 2.52k, False: 1.51k]
  ------------------
  393|  2.52k|                {
  394|  2.52k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  395|  2.52k|                    --label_count;
  396|  2.52k|                }
  397|  4.04k|            }
  398|    412|        }
  399|       |
  400|  12.6k|        return program;
  401|  12.6k|    }
_ZN3dlx6Parser5ParseEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  404|  12.6k|    {
  405|  12.6k|        TokenStream tokens = Tokenize(source);
  406|  12.6k|        return Parse(tokens);
  407|  12.6k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   32|   209k|    {
   33|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   34|       |        //              dlx::enum_name(expected_argument_type));
   35|       |
   36|   209k|        switch (token.GetType())
   37|   209k|        {
   38|  15.7k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (38:13): [True: 15.7k, False: 193k]
  ------------------
   39|  15.7k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (39:21): [True: 864, False: 14.9k]
  ------------------
   40|  15.7k|                                          ArgumentType::AddressDisplacement))
   41|    864|                {
   42|    864|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   43|    864|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   44|       |
   45|    864|                    return {};
   46|    864|                }
   47|       |
   48|       |                // Get address displacement
   49|  14.9k|                PHI_ASSERT(token.HasHint());
   50|       |
   51|  14.9k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   52|       |
   53|  14.9k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (53:21): [True: 21, False: 14.9k]
  ------------------
   54|     21|                {
   55|     21|                    program.AddParseError(
   56|     21|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   57|     21|                    return {};
   58|     21|                }
   59|       |
   60|  14.9k|                auto         it           = tokens.current_position();
   61|  14.9k|                const Token& first_token  = tokens.consume();
   62|  14.9k|                const Token& second_token = tokens.consume();
   63|  14.9k|                const Token& third_token  = tokens.consume();
   64|       |
   65|  14.9k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (65:21): [True: 14.9k, False: 0]
  ------------------
   66|  14.9k|                {
   67|  14.9k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   68|  14.9k|                            first_token, Token::Type::OpenBracket));
   69|  14.9k|                    return {};
   70|  14.9k|                }
   71|       |
   72|       |                // Second token is the register
   73|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (73:21): [True: 0, False: 0]
  ------------------
   74|      0|                {
   75|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   76|      0|                            second_token, Token::Type::RegisterInt));
   77|      0|                    return {};
   78|      0|                }
   79|       |
   80|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (80:21): [True: 0, False: 0]
  ------------------
   81|      0|                {
   82|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   83|      0|                            third_token, Token::Type::ClosingBracket));
   84|      0|                    return {};
   85|      0|                }
   86|       |
   87|       |                // Consume the 3 tokens
   88|      0|                tokens.set_position(it + 3u);
   89|       |
   90|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   91|       |                //             value, dlx::enum_name(reg_id));
   92|       |
   93|      0|                return ConstructInstructionArgumentAddressDisplacement(
   94|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   95|      0|            }
   96|  32.9k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (96:13): [True: 32.9k, False: 176k]
  ------------------
   97|  32.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (97:21): [True: 532, False: 32.4k]
  ------------------
   98|    532|                {
   99|    532|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  100|    532|                            token, expected_argument_type, ArgumentType::IntRegister));
  101|    532|                    return {};
  102|    532|                }
  103|       |
  104|       |                //DLX_INFO("Parsed identifier as int register {}",
  105|       |                //             dlx::enum_name(reg_id));
  106|       |
  107|  32.4k|                return ConstructInstructionArgumentRegisterInt(
  108|  32.4k|                        static_cast<IntRegisterID>(token.GetHint()));
  109|  32.9k|            }
  110|  16.8k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (110:13): [True: 16.8k, False: 192k]
  ------------------
  111|  16.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (111:21): [True: 11.0k, False: 5.84k]
  ------------------
  112|  11.0k|                {
  113|  11.0k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  114|  11.0k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  115|  11.0k|                    return {};
  116|  11.0k|                }
  117|       |
  118|       |                //DLX_INFO("Parsed identifier as float register {}",
  119|       |                //             dlx::enum_name(float_reg_id));
  120|       |
  121|  5.84k|                return ConstructInstructionArgumentRegisterFloat(
  122|  5.84k|                        static_cast<FloatRegisterID>(token.GetHint()));
  123|  16.8k|            }
  124|  9.82k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (124:13): [True: 9.82k, False: 199k]
  ------------------
  125|  9.82k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  126|       |
  127|  9.82k|                return {};
  128|  16.8k|            }
  129|  41.3k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (129:13): [True: 41.3k, False: 167k]
  ------------------
  130|       |                // Parse as Label
  131|  41.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (131:21): [True: 1.68k, False: 39.6k]
  ------------------
  132|  1.68k|                {
  133|  1.68k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  134|  1.68k|                            token, expected_argument_type, ArgumentType::Label));
  135|  1.68k|                    return {};
  136|  1.68k|                }
  137|       |
  138|  39.6k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (138:21): [True: 0, False: 39.6k]
  ------------------
  139|      0|                {
  140|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  141|      0|                    return {};
  142|      0|                }
  143|       |
  144|  39.6k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (144:21): [True: 30.6k, False: 9.01k]
  ------------------
  145|  30.6k|                {
  146|  30.6k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  147|  30.6k|                    return {};
  148|  30.6k|                }
  149|       |
  150|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  151|       |
  152|  9.01k|                return ConstructInstructionArgumentLabel(token.GetText());
  153|  39.6k|            }
  154|  14.0k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (154:13): [True: 14.0k, False: 195k]
  ------------------
  155|  14.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (155:21): [True: 3.62k, False: 10.4k]
  ------------------
  156|  3.62k|                {
  157|  3.62k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  158|  3.62k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  159|  3.62k|                    return {};
  160|  3.62k|                }
  161|       |
  162|  10.4k|                if (token.HasHint())
  ------------------
  |  Branch (162:21): [True: 9.83k, False: 587]
  ------------------
  163|  9.83k|                {
  164|  9.83k|                    return ConstructInstructionArgumentImmediateValue(
  165|  9.83k|                            static_cast<std::int16_t>(token.GetHint()));
  166|  9.83k|                }
  167|       |
  168|    587|                program.AddParseError(ConstructInvalidNumberParseError(token));
  169|    587|                return {};
  170|  10.4k|            }
  171|       |
  172|  78.4k|            default:
  ------------------
  |  Branch (172:13): [True: 78.4k, False: 130k]
  ------------------
  173|  78.4k|                program.AddParseError(
  174|  78.4k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  175|  78.4k|                return {};
  176|   209k|        }
  177|   209k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  246|   174k|                                tokens.find_first_token_if([&](const Token& t) {
  247|   174k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (247:41): [True: 69.8k, False: 104k]
  ------------------
  248|  69.8k|                                    {
  249|  69.8k|                                        phi::string_view token_label_name = t.GetText();
  250|  69.8k|                                        token_label_name.remove_suffix(1u);
  251|       |
  252|  69.8k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (252:45): [True: 15.4k, False: 54.4k]
  ------------------
  253|  15.4k|                                        {
  254|  15.4k|                                            return true;
  255|  15.4k|                                        }
  256|  69.8k|                                    }
  257|       |
  258|   158k|                                    return false;
  259|   174k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  4.21M|    {
   71|  4.21M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  4.21M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  4.21M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  4.21M|        return m_IntRegisters[id_value];
   77|  4.21M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  5.95M|    {
   82|  5.95M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  5.95M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  5.95M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  5.95M|        return m_IntRegisters[id_value];
   88|  5.95M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  3.56M|    {
   92|  3.56M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  3.56M|                                             RegisterAccessType::Signed),
   94|  3.56M|                   "Mismatch for instruction access type");
   95|       |
   96|  3.56M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  3.56M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  3.56M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  3.56M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 2.58M, False: 977k]
  ------------------
  101|  3.56M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 1.07M, False: 1.51M]
  ------------------
  102|  1.07M|        {
  103|  1.07M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.07M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|  1.07M|        }
  105|       |
  106|  3.56M|        return GetIntRegister(id).GetSignedValue();
  107|  3.56M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  2.39M|    {
  111|  2.39M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  2.39M|                                             RegisterAccessType::Unsigned),
  113|  2.39M|                   "Mismatch for instruction access type");
  114|       |
  115|  2.39M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  2.39M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  2.39M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  2.39M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 1.37M, False: 1.02M]
  ------------------
  120|  2.39M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 760k, False: 610k]
  ------------------
  121|   760k|        {
  122|   760k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   760k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   760k|        }
  124|       |
  125|  2.39M|        return GetIntRegister(id).GetUnsignedValue();
  126|  2.39M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  2.35M|    {
  130|  2.35M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  2.35M|                                             RegisterAccessType::Signed),
  132|  2.35M|                   "Mismatch for instruction access type");
  133|       |
  134|  2.35M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  2.35M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 517k, False: 1.84M]
  ------------------
  137|   517k|        {
  138|   517k|            return;
  139|   517k|        }
  140|       |
  141|  1.84M|        reg.SetSignedValue(value);
  142|       |
  143|  1.84M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.84M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.84M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.84M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.85M|    {
  151|  1.85M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.85M|                                             RegisterAccessType::Unsigned),
  153|  1.85M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.85M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.85M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 315k, False: 1.54M]
  ------------------
  158|   315k|        {
  159|   315k|            return;
  160|   315k|        }
  161|       |
  162|  1.54M|        reg.SetUnsignedValue(value);
  163|       |
  164|  1.54M|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|  1.54M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|  1.54M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|  1.54M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  2.69M|    {
  172|  2.69M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  2.69M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  2.69M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  2.69M|        return m_FloatRegisters[id_value];
  178|  2.69M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   849k|    {
  183|   849k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   849k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   849k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   849k|        return m_FloatRegisters[id_value];
  189|   849k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   849k|    {
  193|   849k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   849k|                                             RegisterAccessType::Float),
  195|   849k|                   "Mismatch for instruction access type");
  196|       |
  197|   849k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   849k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   849k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   849k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 832k, False: 17.0k]
  ------------------
  202|   849k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 256k, False: 576k]
  ------------------
  203|   256k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   256k|        }
  208|       |
  209|   849k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   849k|        return reg.GetValue();
  212|   849k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|  1.09M|    {
  216|  1.09M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|  1.09M|                                             RegisterAccessType::Double),
  218|  1.09M|                   "Mismatch for instruction access type");
  219|       |
  220|  1.09M|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 13, False: 1.09M]
  ------------------
  221|     13|        {
  222|     13|            Raise(Exception::MisalignedRegisterAccess);
  223|     13|            return {0.0};
  224|     13|        }
  225|       |
  226|  1.09M|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|  1.09M|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|  1.09M|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|  1.09M|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 1.08M, False: 14.2k]
  ------------------
  231|  1.09M|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 721k, False: 361k]
  ------------------
  232|   721k|        {
  233|   721k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   721k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   721k|        }
  235|       |
  236|  1.09M|        const FloatRegisterValueType register_value_type_high =
  237|  1.09M|                m_FloatRegistersValueTypes[id_value + 1u];
  238|  1.09M|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 1.08M, False: 14.2k]
  ------------------
  239|  1.09M|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 260, False: 1.08M]
  ------------------
  240|    260|        {
  241|    260|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|    260|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|    260|        }
  243|       |
  244|  1.09M|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|  1.09M|        const FloatRegister& second_reg =
  246|  1.09M|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|  1.09M|        const float first_value  = first_reg.GetValue().unsafe();
  249|  1.09M|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|  1.09M|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|  1.09M|        const std::uint32_t first_value_bits =
  255|  1.09M|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|  1.09M|        const std::uint32_t second_value_bits =
  257|  1.09M|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|  1.09M|        std::uint64_t final_value_bits =
  260|  1.09M|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|  1.09M|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|  1.09M|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|  1.09M|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   270k|    {
  269|   270k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   270k|                                             RegisterAccessType::Float),
  271|   270k|                   "Mismatch for instruction access type");
  272|       |
  273|   270k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   270k|        reg.SetValue(value);
  276|       |
  277|   270k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   270k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   270k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   270k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|   117k|    {
  285|   117k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|   117k|                                             RegisterAccessType::Double),
  287|   117k|                   "Mismatch for instruction access type");
  288|       |
  289|   117k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 117k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|   117k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|   117k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|   117k|        double              value_raw  = value.unsafe();
  299|   117k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|   117k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|   117k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|   117k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|   117k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|   117k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|   117k|        FloatRegister& second_reg =
  309|   117k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|   117k|        first_reg.SetValue(first_value);
  312|   117k|        second_reg.SetValue(second_value);
  313|       |
  314|   117k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|   117k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|   117k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|   117k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|   117k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   694k|    {
  323|   694k|        return m_FPSR;
  324|   694k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|  1.02M|    {
  328|  1.02M|        return m_FPSR;
  329|  1.02M|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|  1.02M|    {
  333|  1.02M|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|  1.02M|        return status_reg.Get();
  336|  1.02M|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   694k|    {
  340|   694k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   694k|        status_reg.SetStatus(value);
  343|   694k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  7.12M|    {
  347|  7.12M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  7.12M|        inst.Execute(*this);
  350|  7.12M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  12.6k|    {
  354|  12.6k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 11.2k, False: 1.40k]
  ------------------
  355|  11.2k|        {
  356|  11.2k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  11.2k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  11.2k|            return false;
  358|  11.2k|        }
  359|       |
  360|  1.40k|        m_CurrentProgram = &program;
  361|       |
  362|  1.40k|        m_ProgramCounter               = 0u;
  363|  1.40k|        m_Halted                       = false;
  364|  1.40k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|  1.40k|        m_LastRaisedException          = Exception::None;
  366|  1.40k|        m_CurrentStepCount             = 0u;
  367|       |
  368|  1.40k|        return true;
  369|  12.6k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.92M|    {
  374|  1.92M|        return m_CurrentProgram;
  375|  1.92M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  7.12M|    {
  379|       |        // No nothing when no program is loaded
  380|  7.12M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 7.12M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  7.12M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 167, False: 7.12M]
  ------------------
  387|    167|        {
  388|    167|            m_Halted                       = true;
  389|    167|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|    167|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  7.12M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 167, False: 7.12M]
  ------------------
  394|    167|        {
  395|    167|            return;
  396|    167|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  7.12M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  7.12M|        const auto& current_instruction =
  403|  7.12M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  7.12M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  7.12M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 104, False: 7.12M]
  ------------------
  410|    104|        {
  411|    104|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|    104|            return;
  413|    104|        }
  414|       |
  415|  7.12M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  7.12M|        ++m_CurrentStepCount;
  418|       |
  419|  7.12M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 1.13k, False: 7.12M]
  |  Branch (419:14): [True: 7.12M, False: 0]
  |  Branch (419:42): [True: 712, False: 7.12M]
  ------------------
  420|  7.12M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 418, False: 7.12M]
  ------------------
  421|  1.13k|        {
  422|  1.13k|            m_Halted                       = true;
  423|  1.13k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|  1.13k|        }
  425|  7.12M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|  1.40k|    {
  429|       |        // Do nothing when no program is loaded
  430|  1.40k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 1.40k]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|  1.40k|        m_ProgramCounter               = 0u;
  436|  1.40k|        m_Halted                       = false;
  437|  1.40k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|  1.40k|        m_LastRaisedException          = Exception::None;
  439|  1.40k|        m_CurrentStepCount             = 0u;
  440|       |
  441|  7.12M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 7.12M, False: 1.40k]
  ------------------
  442|  7.12M|        {
  443|  7.12M|            ExecuteStep();
  444|  7.12M|        }
  445|       |
  446|  1.40k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|  1.40k|                   "RegisterAccessType was not reset correctly");
  448|  1.40k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  12.6k|    {
  465|  12.6k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 405k, False: 12.6k]
  ------------------
  466|   405k|        {
  467|   405k|            reg.SetSignedValue(0);
  468|   405k|        }
  469|       |
  470|  12.6k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 405k, False: 12.6k]
  ------------------
  471|   405k|        {
  472|   405k|            reg.SetValue(0.0f);
  473|   405k|        }
  474|       |
  475|  12.6k|        m_FPSR.SetStatus(false);
  476|  12.6k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  12.6k|    {
  480|  12.6k|        m_MemoryBlock.Clear();
  481|  12.6k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   232k|    {
  489|   232k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   232k|        m_LastRaisedException = exception;
  492|       |
  493|   232k|        switch (exception)
  494|   232k|        {
  495|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 6, False: 232k]
  ------------------
  496|      6|                m_Halted = true;
  497|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      6|                return;
  499|  50.9k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 50.9k, False: 181k]
  ------------------
  500|  50.9k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  50.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  50.9k|                return;
  502|  97.1k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 97.1k, False: 135k]
  ------------------
  503|  97.1k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  97.1k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  97.1k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 232k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      9|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 9, False: 232k]
  ------------------
  510|      9|                m_Halted = true;
  511|      9|                return;
  512|     55|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 55, False: 232k]
  ------------------
  513|     55|                m_Halted = true;
  514|     55|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     55|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|     55|                return;
  516|  84.6k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 84.6k, False: 148k]
  ------------------
  517|  84.6k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  84.6k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|  84.6k|                return;
  519|     20|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 20, False: 232k]
  ------------------
  520|     20|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     20|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     20|                m_Halted = true;
  522|     20|                return;
  523|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 15, False: 232k]
  ------------------
  524|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     15|                m_Halted = true;
  526|     15|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 232k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   232k|#endif
  532|   232k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|      8|    {
  559|      8|        return m_MemoryBlock;
  560|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|   708k|    {
  574|   708k|        return m_NextProgramCounter;
  575|   708k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.92M|    {
  579|  1.92M|        m_NextProgramCounter = new_npc;
  580|  1.92M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  12.5M|    {
   37|  12.5M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  12.5M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  12.5M|        switch (expected_access)
   41|  12.5M|        {
   42|  2.91M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 2.91M, False: 9.59M]
  ------------------
   43|  2.91M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 12.5M]
  ------------------
   45|      0|                return false;
   46|   157k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 157k, False: 12.3M]
  ------------------
   47|   157k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 78.8k, False: 78.8k]
  |  Branch (47:63): [True: 78.8k, False: 0]
  ------------------
   48|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 0, False: 12.5M]
  ------------------
   49|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 0, False: 0]
  ------------------
   51|  93.2k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 93.2k, False: 12.4M]
  ------------------
   52|  93.2k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 46.6k, False: 46.6k]
  |  Branch (52:63): [True: 46.6k, False: 0]
  ------------------
   53|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 0, False: 12.5M]
  ------------------
   54|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 0, False: 0]
  |  Branch (54:64): [True: 0, False: 0]
  ------------------
   55|  9.34M|            default:
  ------------------
  |  Branch (55:13): [True: 9.34M, False: 3.16M]
  ------------------
   56|  9.34M|                return expected_access == access;
   57|  12.5M|        }
   58|  12.5M|    }

_ZN3dlx19StringToIntRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   12|  1.77M|    {
   13|  1.77M|        if (token.length() == 2u)
  ------------------
  |  Branch (13:13): [True: 230k, False: 1.54M]
  ------------------
   14|   230k|        {
   15|   230k|            const char first_char = token[0u];
   16|   230k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (16:17): [True: 64.2k, False: 166k]
  |  Branch (16:38): [True: 6.12k, False: 160k]
  ------------------
   17|  70.3k|            {
   18|  70.3k|                const char second_char = token[1u];
   19|  70.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (19:21): [True: 64.8k, False: 5.46k]
  |  Branch (19:43): [True: 64.5k, False: 343]
  ------------------
   20|  64.5k|                {
   21|  64.5k|                    return static_cast<IntRegisterID>(second_char - '0');
   22|  64.5k|                }
   23|  70.3k|            }
   24|   230k|        }
   25|  1.54M|        else if (token.length() == 3u)
  ------------------
  |  Branch (25:18): [True: 745k, False: 801k]
  ------------------
   26|   745k|        {
   27|   745k|            const char first_char = token[0u];
   28|   745k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (28:17): [True: 64.9k, False: 680k]
  |  Branch (28:38): [True: 19.3k, False: 661k]
  ------------------
   29|  84.2k|            {
   30|  84.2k|                const char second_char = token[1u];
   31|  84.2k|                const char third_char  = token[2u];
   32|       |
   33|  84.2k|                switch (second_char)
   34|  84.2k|                {
   35|  40.3k|                    case '1': {
  ------------------
  |  Branch (35:21): [True: 40.3k, False: 43.9k]
  ------------------
   36|  40.3k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (36:29): [True: 32.5k, False: 7.70k]
  |  Branch (36:50): [True: 32.4k, False: 131]
  ------------------
   37|  32.4k|                        {
   38|  32.4k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   39|  32.4k|                        }
   40|  7.84k|                        break;
   41|  40.3k|                    }
   42|  29.1k|                    case '2': {
  ------------------
  |  Branch (42:21): [True: 29.1k, False: 55.0k]
  ------------------
   43|  29.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (43:29): [True: 21.1k, False: 8.01k]
  |  Branch (43:50): [True: 20.9k, False: 197]
  ------------------
   44|  20.9k|                        {
   45|  20.9k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   46|  20.9k|                        }
   47|  8.21k|                        break;
   48|  29.1k|                    }
   49|  8.69k|                    case '3': {
  ------------------
  |  Branch (49:21): [True: 8.69k, False: 75.5k]
  ------------------
   50|  8.69k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (50:29): [True: 7.85k, False: 836]
  |  Branch (50:50): [True: 354, False: 482]
  ------------------
   51|  8.21k|                        {
   52|  8.21k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   53|  8.21k|                        }
   54|    482|                        break;
   55|  8.69k|                    }
   56|  6.08k|                    default: {
  ------------------
  |  Branch (56:21): [True: 6.08k, False: 78.1k]
  ------------------
   57|  6.08k|                        break;
   58|  8.69k|                    }
   59|  84.2k|                }
   60|  84.2k|            }
   61|   745k|        }
   62|       |
   63|  1.65M|        return IntRegisterID::None;
   64|  1.77M|    }
_ZN3dlx21StringToFloatRegisterEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   67|  1.65M|    {
   68|  1.65M|        if (token.length() == 2u)
  ------------------
  |  Branch (68:13): [True: 166k, False: 1.48M]
  ------------------
   69|   166k|        {
   70|   166k|            const char first_char = token[0u];
   71|   166k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (71:17): [True: 30.8k, False: 135k]
  |  Branch (71:38): [True: 992, False: 134k]
  ------------------
   72|  31.8k|            {
   73|  31.8k|                const char second_char = token[1u];
   74|  31.8k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (74:21): [True: 31.2k, False: 625]
  |  Branch (74:43): [True: 31.1k, False: 69]
  ------------------
   75|  31.1k|                {
   76|  31.1k|                    return static_cast<FloatRegisterID>(second_char - '0');
   77|  31.1k|                }
   78|  31.8k|            }
   79|   166k|        }
   80|  1.48M|        else if (token.length() == 3u)
  ------------------
  |  Branch (80:18): [True: 683k, False: 801k]
  ------------------
   81|   683k|        {
   82|   683k|            const char first_char = token[0u];
   83|   683k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (83:17): [True: 36.7k, False: 647k]
  |  Branch (83:38): [True: 30.1k, False: 616k]
  ------------------
   84|  66.9k|            {
   85|  66.9k|                const char second_char = token[1u];
   86|  66.9k|                const char third_char  = token[2u];
   87|       |
   88|  66.9k|                switch (second_char)
   89|  66.9k|                {
   90|  23.4k|                    case '1': {
  ------------------
  |  Branch (90:21): [True: 23.4k, False: 43.5k]
  ------------------
   91|  23.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (91:29): [True: 10.8k, False: 12.5k]
  |  Branch (91:50): [True: 10.7k, False: 106]
  ------------------
   92|  10.7k|                        {
   93|  10.7k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   94|  10.7k|                        }
   95|  12.6k|                        break;
   96|  23.4k|                    }
   97|  25.9k|                    case '2': {
  ------------------
  |  Branch (97:21): [True: 25.9k, False: 41.0k]
  ------------------
   98|  25.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (98:29): [True: 25.6k, False: 219]
  |  Branch (98:50): [True: 25.5k, False: 134]
  ------------------
   99|  25.5k|                        {
  100|  25.5k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  101|  25.5k|                        }
  102|    353|                        break;
  103|  25.9k|                    }
  104|    353|                    case '3': {
  ------------------
  |  Branch (104:21): [True: 328, False: 66.6k]
  ------------------
  105|    328|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (105:29): [True: 172, False: 156]
  |  Branch (105:50): [True: 88, False: 68]
  ------------------
  106|    260|                        {
  107|    260|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  108|    260|                        }
  109|     68|                        break;
  110|    328|                    }
  111|  17.2k|                    default: {
  ------------------
  |  Branch (111:21): [True: 17.2k, False: 49.6k]
  ------------------
  112|  17.2k|                        break;
  113|    328|                    }
  114|  66.9k|                }
  115|  66.9k|            }
  116|   683k|        }
  117|       |
  118|  1.58M|        return FloatRegisterID::None;
  119|  1.65M|    }
_ZN3dlx6IsFPSREN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
  122|  1.79M|    {
  123|  1.79M|        if (token.length() == 4u)
  ------------------
  |  Branch (123:13): [True: 558k, False: 1.24M]
  ------------------
  124|   558k|        {
  125|   558k|            const char c1 = token[0u];
  126|   558k|            const char c2 = token[1u];
  127|   558k|            const char c3 = token[2u];
  128|   558k|            const char c4 = token[3u];
  129|       |
  130|   558k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (130:21): [True: 22.6k, False: 535k]
  |  Branch (130:34): [True: 2.34k, False: 533k]
  |  Branch (130:49): [True: 23.6k, False: 1.34k]
  |  Branch (130:62): [True: 465, False: 883]
  ------------------
  131|   558k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (131:21): [True: 22.6k, False: 1.54k]
  |  Branch (131:34): [True: 1.47k, False: 73]
  |  Branch (131:49): [True: 22.6k, False: 1.47k]
  |  Branch (131:62): [True: 0, False: 1.47k]
  ------------------
  132|   558k|        }
  133|       |
  134|  1.24M|        return false;
  135|  1.79M|    }

_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_:
   27|  2.77M|    {}
_ZN3dlx5TokenC2ENS0_4TypeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS2_7integerImEES9_j:
   37|  1.31M|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  5.31M|    {
   41|  5.31M|        return m_Type;
   42|  5.31M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  2.11M|    {
   51|  2.11M|        return m_LineNumber;
   52|  2.11M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.81M|    {
   56|  1.81M|        return m_Column;
   57|  1.81M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  1.01M|    {
   66|  1.01M|        return m_Text;
   67|  1.01M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   329k|    {
   80|   329k|        return m_HasHint;
   81|   329k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   367k|    {
   85|   367k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   367k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   367k|                   m_Type == Type::ImmediateInteger);
   88|   367k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   367k|        return m_Hint;
   91|   367k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  12.6k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  12.6k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  12.6k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  14.9k|    {
   51|  14.9k|        auto it = m_Iterator;
   52|  59.6k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 44.7k, False: 14.9k]
  ------------------
   53|  44.7k|        {
   54|  44.7k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 21, False: 44.7k]
  ------------------
   55|     21|            {
   56|     21|                return false;
   57|     21|            }
   58|  44.7k|        }
   59|       |
   60|  14.9k|        return true;
   61|  14.9k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  4.06M|    {
   65|  4.06M|        return m_Iterator != m_Tokens.end();
   66|  4.06M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  4.09M|    {
   70|  4.09M|        return m_Iterator == m_Tokens.end();
   71|  4.09M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  4.09M|    {
   85|  4.09M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  4.09M|        return *m_Iterator++;
   91|  4.09M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  14.9k|    {
  164|  14.9k|        return m_Iterator;
  165|  14.9k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    412|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    412|        return m_Tokens.rbegin();
  224|    412|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  4.04k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  4.04k|        return m_Tokens.rend();
  233|  4.04k|    }

_ZN3dlx8TokenizeEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEE:
   65|  12.6k|    {
   66|  12.6k|        TokenStream tokens;
   67|       |
   68|  12.6k|        phi::string_view current_token;
   69|       |
   70|  12.6k|        phi::u64 current_line_number{1u};
   71|  12.6k|        phi::u64 current_column{1u};
   72|  12.6k|        phi::u64 token_begin{0u};
   73|       |
   74|  12.6k|        phi::boolean parsing_comment{false};
   75|       |
   76|  10.6M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (76:32): [True: 10.6M, False: 12.6k]
  ------------------
   77|  10.6M|        {
   78|  10.6M|            const char c{source.at(i)};
   79|       |
   80|  10.6M|            if (c == '\n')
  ------------------
  |  Branch (80:17): [True: 1.47M, False: 9.17M]
  ------------------
   81|  1.47M|            {
   82|  1.47M|                if (current_token.is_empty())
  ------------------
  |  Branch (82:21): [True: 379k, False: 1.09M]
  ------------------
   83|   379k|                {
   84|       |                    // Skip empty lines
   85|   379k|                    tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
   86|   379k|                                        current_line_number, current_column);
   87|       |
   88|   379k|                    parsing_comment = false;
   89|   379k|                    current_line_number += 1u;
   90|   379k|                    current_column = 1u;
   91|   379k|                    continue;
   92|   379k|                }
   93|       |
   94|       |                // Otherwise a new line separates tokens
   95|  1.09M|                tokens.emplace_back(ParseToken(
   96|  1.09M|                        source.substring_view(
   97|  1.09M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
   98|  1.09M|                                current_token.length()),
   99|  1.09M|                        current_line_number, current_column - current_token.length()));
  100|       |
  101|  1.09M|                tokens.emplace_back(Token::Type::NewLine, source.substring_view(i, 1u),
  102|  1.09M|                                    current_line_number, current_column);
  103|       |
  104|  1.09M|                current_token   = phi::string_view{};
  105|  1.09M|                parsing_comment = false;
  106|  1.09M|                current_line_number += 1u;
  107|  1.09M|                current_column = 0u;
  108|  1.09M|            }
  109|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  110|  9.17M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (110:22): [True: 17.4k, False: 9.15M]
  |  Branch (110:34): [True: 576k, False: 8.58M]
  ------------------
  111|   593k|            {
  112|   593k|                if (current_token.is_empty())
  ------------------
  |  Branch (112:21): [True: 547k, False: 45.9k]
  ------------------
  113|   547k|                {
  114|   547k|                    token_begin = i;
  115|   547k|                }
  116|  45.9k|                else if (!parsing_comment)
  ------------------
  |  Branch (116:26): [True: 29.0k, False: 16.8k]
  ------------------
  117|  29.0k|                {
  118|  29.0k|                    tokens.emplace_back(ParseToken(
  119|  29.0k|                            source.substring_view(
  120|  29.0k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  121|  29.0k|                                    current_token.length()),
  122|  29.0k|                            current_line_number, current_column - current_token.length()));
  123|  29.0k|                    token_begin   = i;
  124|  29.0k|                    current_token = phi::string_view{};
  125|  29.0k|                }
  126|       |
  127|   593k|                parsing_comment = true;
  128|   593k|                current_token   = source.substring_view(
  129|   593k|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  130|   593k|                        current_token.length() + 1u);
  131|   593k|            }
  132|  8.58M|            else if (parsing_comment)
  ------------------
  |  Branch (132:22): [True: 1.01M, False: 7.57M]
  ------------------
  133|  1.01M|            {
  134|       |                // simply append the character
  135|  1.01M|                current_token = source.substring_view(
  136|  1.01M|                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  137|  1.01M|                        current_token.length() + 1u);
  138|  1.01M|            }
  139|  7.57M|            else
  140|  7.57M|            {
  141|       |                // Not parsing a comment
  142|  7.57M|                switch (c)
  143|  7.57M|                {
  144|  1.03M|                    case ' ':
  ------------------
  |  Branch (144:21): [True: 1.03M, False: 6.53M]
  ------------------
  145|  1.04M|                    case '\t':
  ------------------
  |  Branch (145:21): [True: 11.2k, False: 7.56M]
  ------------------
  146|  1.08M|                    case '\v':
  ------------------
  |  Branch (146:21): [True: 40.2k, False: 7.53M]
  ------------------
  147|  1.08M|                        if (current_token.is_empty())
  ------------------
  |  Branch (147:29): [True: 8.77k, False: 1.07M]
  ------------------
  148|  8.77k|                        {
  149|  8.77k|                            current_column += 1u;
  150|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  151|  8.77k|                            continue;
  152|  8.77k|                        }
  153|       |
  154|       |                        // Otherwise a whitespace separates tokens
  155|  1.07M|                        tokens.emplace_back(ParseToken(
  156|  1.07M|                                source.substring_view(
  157|  1.07M|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  158|  1.07M|                                        current_token.length()),
  159|  1.07M|                                current_line_number, current_column - current_token.length()));
  160|  1.07M|                        current_token = phi::string_view{};
  161|  1.07M|                        break;
  162|  54.6k|                    case ':':
  ------------------
  |  Branch (162:21): [True: 54.6k, False: 7.51M]
  ------------------
  163|       |                        // Need to parse label names together with their colon
  164|  54.6k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (164:29): [True: 38.8k, False: 15.7k]
  ------------------
  165|  38.8k|                        {
  166|  38.8k|                            current_token = source.substring_view(
  167|  38.8k|                                    phi::narrow_cast<phi::string_view::size_type>(token_begin),
  168|  38.8k|                                    current_token.length() + 1u);
  169|  38.8k|                            tokens.emplace_back(ParseToken(
  170|  38.8k|                                    source.substring_view(
  171|  38.8k|                                            phi::narrow_cast<phi::string_view::size_type>(
  172|  38.8k|                                                    token_begin),
  173|  38.8k|                                            current_token.length()),
  174|  38.8k|                                    current_line_number,
  175|  38.8k|                                    current_column + 1u - current_token.length()));
  176|       |
  177|  38.8k|                            current_token = phi::string_view{};
  178|  38.8k|                        }
  179|  15.7k|                        else
  180|  15.7k|                        {
  181|       |                            // Orphan colon
  182|  15.7k|                            token_begin = i;
  183|       |
  184|  15.7k|                            tokens.emplace_back(
  185|  15.7k|                                    Token::Type::Colon,
  186|  15.7k|                                    source.substring_view(
  187|  15.7k|                                            phi::narrow_cast<phi::string_view::size_type>(
  188|  15.7k|                                                    token_begin),
  189|  15.7k|                                            1u),
  190|  15.7k|                                    current_line_number, current_column);
  191|  15.7k|                        }
  192|  54.6k|                        break;
  193|   149k|                    case ',':
  ------------------
  |  Branch (193:21): [True: 149k, False: 7.42M]
  ------------------
  194|   187k|                    case '(':
  ------------------
  |  Branch (194:21): [True: 37.9k, False: 7.53M]
  ------------------
  195|   200k|                    case ')':
  ------------------
  |  Branch (195:21): [True: 12.3k, False: 7.55M]
  ------------------
  196|   200k|                        if (!current_token.is_empty())
  ------------------
  |  Branch (196:29): [True: 153k, False: 46.3k]
  ------------------
  197|   153k|                        {
  198|   153k|                            tokens.emplace_back(ParseToken(
  199|   153k|                                    source.substring_view(
  200|   153k|                                            phi::narrow_cast<phi::string_view::size_type>(
  201|   153k|                                                    token_begin),
  202|   153k|                                            current_token.length()),
  203|   153k|                                    current_line_number, current_column - current_token.length()));
  204|       |
  205|   153k|                            current_token = phi::string_view{};
  206|   153k|                        }
  207|       |
  208|   200k|                        Token::Type type;
  209|   200k|                        switch (c)
  210|   200k|                        {
  211|   149k|                            case ',':
  ------------------
  |  Branch (211:29): [True: 149k, False: 50.2k]
  ------------------
  212|   149k|                                type = Token::Type::Comma;
  213|   149k|                                break;
  214|  37.9k|                            case '(':
  ------------------
  |  Branch (214:29): [True: 37.9k, False: 162k]
  ------------------
  215|  37.9k|                                type = Token::Type::OpenBracket;
  216|  37.9k|                                break;
  217|  12.3k|                            case ')':
  ------------------
  |  Branch (217:29): [True: 12.3k, False: 187k]
  ------------------
  218|  12.3k|                                type = Token::Type::ClosingBracket;
  219|  12.3k|                                break;
  220|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  221|      0|                            default:
  ------------------
  |  Branch (221:29): [True: 0, False: 200k]
  ------------------
  222|      0|                                PHI_ASSERT_NOT_REACHED();
  223|      0|                                break;
  224|   200k|#endif
  225|   200k|                        }
  226|       |
  227|   200k|                        token_begin = i;
  228|       |
  229|   200k|                        tokens.emplace_back(
  230|   200k|                                type,
  231|   200k|                                source.substring_view(
  232|   200k|                                        phi::narrow_cast<phi::string_view::size_type>(token_begin),
  233|   200k|                                        1u),
  234|   200k|                                current_line_number, current_column);
  235|   200k|                        break;
  236|       |
  237|  6.23M|                    default:
  ------------------
  |  Branch (237:21): [True: 6.23M, False: 1.33M]
  ------------------
  238|  6.23M|                        if (current_token.is_empty())
  ------------------
  |  Branch (238:29): [True: 1.82M, False: 4.41M]
  ------------------
  239|  1.82M|                        {
  240|  1.82M|                            token_begin = i;
  241|  1.82M|                        }
  242|       |
  243|       |                        // simply append the character
  244|  6.23M|                        current_token = source.substring_view(
  245|  6.23M|                                phi::narrow_cast<phi::string_view::size_type>(token_begin),
  246|  6.23M|                                current_token.length() + 1u);
  247|  7.57M|                }
  248|  7.57M|            }
  249|       |
  250|  10.2M|            current_column += 1u;
  251|  10.2M|        }
  252|       |
  253|       |        // Checked the entire string. Parse whats left if anything
  254|  12.6k|        if (!current_token.is_empty())
  ------------------
  |  Branch (254:13): [True: 4.60k, False: 8.05k]
  ------------------
  255|  4.60k|        {
  256|  4.60k|            tokens.emplace_back(
  257|  4.60k|                    ParseToken(source.substring_view(
  258|  4.60k|                                       phi::narrow_cast<phi::string_view::size_type>(token_begin),
  259|  4.60k|                                       current_token.length()),
  260|  4.60k|                               current_line_number, current_column - current_token.length()));
  261|  4.60k|        }
  262|       |
  263|       |        // Finialize token stream
  264|  12.6k|        tokens.finalize();
  265|       |
  266|  12.6k|        return tokens;
  267|  12.6k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenEN3phi17basic_string_viewIcNSt3__111char_traitsIcEEEENS0_7integerImEES7_:
   13|  2.39M|    {
   14|  2.39M|        if (token.at(0u) == '#' && token.length() > 1u)
  ------------------
  |  Branch (14:13): [True: 25.9k, False: 2.37M]
  |  Branch (14:13): [True: 25.8k, False: 2.37M]
  |  Branch (14:36): [True: 25.8k, False: 98]
  ------------------
   15|  25.8k|        {
   16|  25.8k|            auto number = ParseNumber(token.substring_view(1u));
   17|       |
   18|  25.8k|            if (number)
  ------------------
  |  Branch (18:17): [True: 12.4k, False: 13.4k]
  ------------------
   19|  12.4k|            {
   20|  12.4k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   21|  12.4k|                        static_cast<phi::uint32_t>(number.value().unsafe())};
   22|  12.4k|            }
   23|       |
   24|  13.4k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   25|  25.8k|        }
   26|       |
   27|  2.37M|        if (token.at(0u) == '/' || token.at(0u) == ';')
  ------------------
  |  Branch (27:13): [True: 917, False: 2.37M]
  |  Branch (27:13): [True: 576k, False: 1.79M]
  |  Branch (27:36): [True: 575k, False: 1.79M]
  ------------------
   28|   576k|        {
   29|   576k|            return {Token::Type::Comment, token, line_number, column};
   30|   576k|        }
   31|       |
   32|  1.79M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (32:66): [True: 65.2k, False: 1.73M]
  ------------------
   33|  65.2k|        {
   34|  65.2k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   35|  65.2k|                    static_cast<phi::uint32_t>(number->unsafe())};
   36|  65.2k|        }
   37|       |
   38|  1.73M|        if (IsFPSR(token))
  ------------------
  |  Branch (38:13): [True: 22.6k, False: 1.70M]
  ------------------
   39|  22.6k|        {
   40|  22.6k|            return {Token::Type::RegisterStatus, token, line_number, column};
   41|  22.6k|        }
   42|       |
   43|  1.70M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (43:60): [True: 125k, False: 1.58M]
  ------------------
   44|   125k|        {
   45|   125k|            return {Token::Type::RegisterInt, token, line_number, column,
   46|   125k|                    static_cast<phi::uint32_t>(id)};
   47|   125k|        }
   48|       |
   49|  1.58M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (49:64): [True: 67.6k, False: 1.51M]
  ------------------
   50|  67.6k|        {
   51|  67.6k|            return {Token::Type::RegisterFloat, token, line_number, column,
   52|  67.6k|                    static_cast<phi::uint32_t>(id)};
   53|  67.6k|        }
   54|       |
   55|  1.51M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (55:52): [True: 1.04M, False: 470k]
  ------------------
   56|  1.04M|        {
   57|  1.04M|            return {Token::Type::OpCode, token, line_number, column,
   58|  1.04M|                    static_cast<phi::uint32_t>(opcode)};
   59|  1.04M|        }
   60|       |
   61|   470k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   62|  1.51M|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   59|  12.6k|    {
   60|       |        // Constants
   61|  12.6k|        constexpr std::uint8_t number_of_opcodes =
   62|  12.6k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   63|  12.6k|        constexpr std::uint8_t number_of_int_registers   = 32;
   64|  12.6k|        constexpr std::uint8_t number_of_float_registers = 32;
   65|       |
   66|  12.6k|        std::string ret;
   67|       |
   68|  2.30M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (68:36): [True: 2.28M, False: 12.5k]
  ------------------
   69|  2.28M|        {
   70|  2.28M|            std::uint8_t current_value = data[index++];
   71|       |
   72|  2.28M|            switch (current_value)
   73|  2.28M|            {
   74|       |                // OpCode
   75|   951k|                case 0: {
  ------------------
  |  Branch (75:17): [True: 951k, False: 1.33M]
  ------------------
   76|       |                    // Has one more value
   77|   951k|                    if (index < size)
  ------------------
  |  Branch (77:25): [True: 950k, False: 752]
  ------------------
   78|   950k|                    {
   79|   950k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   80|       |
   81|   950k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   82|       |
   83|   950k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (83:29): [True: 1, False: 950k]
  ------------------
   84|      1|                        {
   85|      1|                            return detail::ErrorString;
   86|      1|                        }
   87|   950k|                    }
   88|   951k|                    break;
   89|   951k|                }
   90|       |
   91|       |                // Int Register
   92|   951k|                case 1: {
  ------------------
  |  Branch (92:17): [True: 131k, False: 2.15M]
  ------------------
   93|       |                    // Has one more value
   94|   131k|                    if (index < size)
  ------------------
  |  Branch (94:25): [True: 130k, False: 251]
  ------------------
   95|   130k|                    {
   96|   130k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   97|       |
   98|   130k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   99|   130k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (99:29): [True: 1, False: 130k]
  ------------------
  100|      1|                        {
  101|      1|                            return detail::ErrorString;
  102|      1|                        }
  103|   130k|                    }
  104|   131k|                    break;
  105|   131k|                }
  106|       |
  107|       |                // Float register
  108|   131k|                case 2: {
  ------------------
  |  Branch (108:17): [True: 73.3k, False: 2.21M]
  ------------------
  109|       |                    // Has one more value
  110|  73.3k|                    if (index < size)
  ------------------
  |  Branch (110:25): [True: 73.3k, False: 9]
  ------------------
  111|  73.3k|                    {
  112|  73.3k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  113|       |
  114|  73.3k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  115|  73.3k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (115:29): [True: 1, False: 73.3k]
  ------------------
  116|      1|                        {
  117|      1|                            return detail::ErrorString;
  118|      1|                        }
  119|  73.3k|                    }
  120|  73.3k|                    break;
  121|  73.3k|                }
  122|       |
  123|       |                // Floating point status register
  124|  73.3k|                case 3: {
  ------------------
  |  Branch (124:17): [True: 23.7k, False: 2.26M]
  ------------------
  125|  23.7k|                    ret += "FPSR";
  126|  23.7k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (126:25): [True: 2, False: 23.7k]
  ------------------
  127|      2|                    {
  128|      2|                        return detail::ErrorString;
  129|      2|                    }
  130|       |
  131|  23.7k|                    break;
  132|  23.7k|                }
  133|       |
  134|       |                // Immediate integer
  135|  40.7k|                case 4: {
  ------------------
  |  Branch (135:17): [True: 40.7k, False: 2.24M]
  ------------------
  136|  40.7k|                    ret += "#";
  137|  40.7k|                    [[fallthrough]];
  138|  40.7k|                }
  139|       |
  140|       |                // Integer literal
  141|   132k|                case 5: {
  ------------------
  |  Branch (141:17): [True: 91.8k, False: 2.19M]
  ------------------
  142|   132k|                    std::size_t size_of_int = std::min(2ul, size - index);
  143|       |
  144|   132k|                    if (size_of_int > 0)
  ------------------
  |  Branch (144:25): [True: 132k, False: 49]
  ------------------
  145|   132k|                    {
  146|   132k|                        std::int16_t value = 0;
  147|       |
  148|   397k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (148:32): [True: 264k, False: 132k]
  ------------------
  149|   264k|                        {
  150|   264k|                            value <<= 8;
  151|   264k|                            value &= data[index++];
  152|   264k|                        }
  153|       |
  154|   132k|                        ret += std::to_string(value);
  155|   132k|                    }
  156|   132k|                    break;
  157|  40.7k|                }
  158|       |
  159|       |                // Label
  160|  41.8k|                case 6: {
  ------------------
  |  Branch (160:17): [True: 41.8k, False: 2.24M]
  ------------------
  161|  41.8k|                    std::size_t label_length = std::min(5ul, size - index);
  162|       |
  163|  41.8k|                    if (label_length > 0)
  ------------------
  |  Branch (163:25): [True: 41.7k, False: 62]
  ------------------
  164|  41.7k|                    {
  165|  41.7k|                        std::string label_name = "lbl_";
  166|       |
  167|   250k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (167:32): [True: 208k, False: 41.7k]
  ------------------
  168|   208k|                        {
  169|   208k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  170|       |
  171|   208k|                            label_name += c;
  172|   208k|                        }
  173|       |
  174|       |                        // Add 1 in 10 chance to add a colon
  175|  41.7k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (175:29): [True: 41.1k, False: 644]
  |  Branch (175:45): [True: 34.7k, False: 6.39k]
  ------------------
  176|  34.7k|                        {
  177|  34.7k|                            label_name += ':';
  178|  34.7k|                            ret += label_name;
  179|  34.7k|                        }
  180|  7.04k|                        else
  181|  7.04k|                        {
  182|  7.04k|                            ret += label_name;
  183|  7.04k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (183:33): [True: 33, False: 7.01k]
  ------------------
  184|     33|                            {
  185|     33|                                return detail::ErrorString;
  186|     33|                            }
  187|  7.04k|                        }
  188|  41.7k|                    }
  189|  41.8k|                    break;
  190|  41.8k|                }
  191|       |
  192|       |                // Newline
  193|   358k|                case 7: {
  ------------------
  |  Branch (193:17): [True: 358k, False: 1.93M]
  ------------------
  194|   358k|                    ret += '\n';
  195|   358k|                    break;
  196|  41.8k|                }
  197|       |
  198|       |                // Comment
  199|   577k|                case 8: {
  ------------------
  |  Branch (199:17): [True: 577k, False: 1.71M]
  ------------------
  200|   577k|                    std::size_t comment_length = std::min(5ul, size - index);
  201|       |
  202|   577k|                    if (comment_length > 0)
  ------------------
  |  Branch (202:25): [True: 576k, False: 551]
  ------------------
  203|   576k|                    {
  204|   576k|                        std::string comment = "; ";
  205|       |
  206|  3.45M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (206:32): [True: 2.87M, False: 576k]
  ------------------
  207|  2.87M|                        {
  208|  2.87M|                            comment += static_cast<char>(data[index++]);
  209|  2.87M|                        }
  210|       |
  211|   576k|                        ret += comment + '\n';
  212|   576k|                    }
  213|   577k|                    break;
  214|  41.8k|                }
  215|       |
  216|       |                // Ignore
  217|     49|                default:
  ------------------
  |  Branch (217:17): [True: 49, False: 2.28M]
  ------------------
  218|     49|                    return detail::ErrorString;
  219|  2.28M|            }
  220|  2.28M|        }
  221|       |
  222|  12.5k|        return ret;
  223|  12.6k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   24|  1.18M|        {
   25|  1.18M|            if (index < size)
  ------------------
  |  Branch (25:17): [True: 1.18M, False: 4.17k]
  ------------------
   26|  1.18M|            {
   27|  1.18M|                std::uint8_t val = data[index++];
   28|  1.18M|                if (val == 0)
  ------------------
  |  Branch (28:21): [True: 1.03M, False: 148k]
  ------------------
   29|  1.03M|                {
   30|  1.03M|                    text += ' ';
   31|  1.03M|                }
   32|   148k|                else if (val == 1)
  ------------------
  |  Branch (32:26): [True: 148k, False: 38]
  ------------------
   33|   148k|                {
   34|   148k|                    text += ',';
   35|   148k|                }
   36|     38|                else
   37|     38|                {
   38|     38|                    return false;
   39|     38|                }
   40|  1.18M|            }
   41|       |
   42|  1.18M|            return true;
   43|  1.18M|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   48|   208k|        {
   49|   208k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (49:17): [True: 162k, False: 45.6k]
  ------------------
   50|   162k|            {
   51|   162k|                return '_';
   52|   162k|            }
   53|       |
   54|  45.6k|            return c;
   55|   208k|        }

LLVMFuzzerTestOneInput:
   12|  12.6k|{
   13|  12.6k|    static dlx::Processor processor;
   14|       |
   15|  12.6k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  12.6k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  12.6k|    processor.ClearRegisters();
   22|  12.6k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  12.6k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.40k, False: 11.2k]
  ------------------
   26|  1.40k|    {
   27|  1.40k|        processor.ExecuteCurrentProgram();
   28|  1.40k|    }
   29|       |
   30|  12.6k|    return 0;
   31|  12.6k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   156k|        {
  169|   156k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   156k|            switch (index.unsafe())
  172|   156k|            {
  173|  63.4k|                case 0:
  ------------------
  |  Branch (173:17): [True: 63.4k, False: 92.9k]
  ------------------
  174|  63.4k|                    return m_Arg1Type;
  175|       |
  176|  47.7k|                case 1:
  ------------------
  |  Branch (176:17): [True: 47.7k, False: 108k]
  ------------------
  177|  47.7k|                    return m_Arg2Type;
  178|       |
  179|  45.2k|                case 2:
  ------------------
  |  Branch (179:17): [True: 45.2k, False: 111k]
  ------------------
  180|  45.2k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 156k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   156k|#endif
  187|   156k|            }
  188|   156k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  41.3k|        {
  195|  41.3k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  41.3k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 37.6k, False: 3.67k]
  ------------------
  199|  37.6k|            {
  200|  37.6k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  37.6k|            }
  202|  41.3k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 30.4k, False: 10.8k]
  ------------------
  203|  30.4k|            {
  204|  30.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  30.4k|            }
  206|  41.3k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 20.3k, False: 20.9k]
  ------------------
  207|  20.3k|            {
  208|  20.3k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  20.3k|            }
  210|       |
  211|  41.3k|            return number_of_argument_required;
  212|  41.3k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  4.91M|        {
  216|  4.91M|            return m_RegisterAccessType;
  217|  4.91M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  41.3k|        {
  221|  41.3k|            return m_Executor;
  222|  41.3k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  14.7M|    {
   38|  14.7M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  14.7M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  14.7M|                                         static_cast<underlying_t>(rhs));
   42|  14.7M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  14.7M|    {
   55|  14.7M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  14.7M|        return static_cast<underlying_t>(type & test) != 0;
   58|  14.7M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  204|   103k|    {
  205|   103k|        switch (value)
  206|   103k|        {
  207|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  208|      0|    case OpCode::name:                                                                             \
  209|      0|        return #name;
  210|       |
  211|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  29.5k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  29.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 29.5k, False: 73.5k]
  |  |  |  |  ------------------
  |  |  |  |  209|  29.5k|        return #name;
  |  |  ------------------
  |  |   16|  29.5k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.23k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.23k|        return #name;
  |  |  ------------------
  |  |   17|  2.23k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    888|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 888, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    888|        return #name;
  |  |  ------------------
  |  |   18|  1.24k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.24k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.24k|        return #name;
  |  |  ------------------
  |  |   19|  1.24k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    893|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 893, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    893|        return #name;
  |  |  ------------------
  |  |   20|  1.37k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.37k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.37k|        return #name;
  |  |  ------------------
  |  |   21|  1.37k|                                                                                                   \
  |  |   22|  1.37k|    /* Sub */                                                                                      \
  |  |   23|  1.37k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.12k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.12k|        return #name;
  |  |  ------------------
  |  |   24|  1.12k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    545|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 545, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    545|        return #name;
  |  |  ------------------
  |  |   25|  1.98k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.98k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.98k|        return #name;
  |  |  ------------------
  |  |   26|  1.98k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |   27|    993|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    993|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 993, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    993|        return #name;
  |  |  ------------------
  |  |   28|    993|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    485|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 485, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    485|        return #name;
  |  |  ------------------
  |  |   29|    485|                                                                                                   \
  |  |   30|    485|    /* Multiplication */                                                                           \
  |  |   31|    787|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    787|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 787, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    787|        return #name;
  |  |  ------------------
  |  |   32|    787|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    367|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 367, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    367|        return #name;
  |  |  ------------------
  |  |   33|    664|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    664|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 664, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    664|        return #name;
  |  |  ------------------
  |  |   34|    664|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    161|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 161, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    161|        return #name;
  |  |  ------------------
  |  |   35|  1.47k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.47k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.47k|        return #name;
  |  |  ------------------
  |  |   36|  1.47k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    112|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 112, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    112|        return #name;
  |  |  ------------------
  |  |   37|    112|                                                                                                   \
  |  |   38|    112|    /* Division */                                                                                 \
  |  |   39|    112|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 82, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     82|        return #name;
  |  |  ------------------
  |  |   40|     89|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     89|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 89, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     89|        return #name;
  |  |  ------------------
  |  |   41|    122|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 122, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    122|        return #name;
  |  |  ------------------
  |  |   42|  1.61k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.61k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.61k|        return #name;
  |  |  ------------------
  |  |   43|  1.61k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 109, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    109|        return #name;
  |  |  ------------------
  |  |   44|    109|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 93, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     93|        return #name;
  |  |  ------------------
  |  |   45|     93|                                                                                                   \
  |  |   46|     93|    /* Shift left (logical) */                                                                     \
  |  |   47|  4.30k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  4.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 4.30k, False: 98.8k]
  |  |  |  |  ------------------
  |  |  |  |  209|  4.30k|        return #name;
  |  |  ------------------
  |  |   48|  4.30k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    212|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 212, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    212|        return #name;
  |  |  ------------------
  |  |   49|    212|                                                                                                   \
  |  |   50|    212|    /* Shift right (logical) */                                                                    \
  |  |   51|  2.15k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.15k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.15k|        return #name;
  |  |  ------------------
  |  |   52|  2.15k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.92k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.92k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.92k|        return #name;
  |  |  ------------------
  |  |   53|  1.92k|                                                                                                   \
  |  |   54|  1.92k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  1.92k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    674|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 674, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    674|        return #name;
  |  |  ------------------
  |  |   56|    674|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    100|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 100, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    100|        return #name;
  |  |  ------------------
  |  |   57|    100|                                                                                                   \
  |  |   58|    100|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    127|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    127|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 127, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    127|        return #name;
  |  |  ------------------
  |  |   60|    289|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    289|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 289, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    289|        return #name;
  |  |  ------------------
  |  |   61|    289|                                                                                                   \
  |  |   62|    289|    /* Logic */                                                                                    \
  |  |   63|    289|                                                                                                   \
  |  |   64|    289|    /* And */                                                                                      \
  |  |   65|    289|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   66|    964|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    964|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 964, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    964|        return #name;
  |  |  ------------------
  |  |   67|    964|                                                                                                   \
  |  |   68|    964|    /* Or */                                                                                       \
  |  |   69|    964|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     78|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 78, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     78|        return #name;
  |  |  ------------------
  |  |   70|     96|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 96, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     96|        return #name;
  |  |  ------------------
  |  |   71|     96|                                                                                                   \
  |  |   72|     96|    /* XOR */                                                                                      \
  |  |   73|    468|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    468|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 468, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    468|        return #name;
  |  |  ------------------
  |  |   74|    737|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    737|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 737, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    737|        return #name;
  |  |  ------------------
  |  |   75|    737|                                                                                                   \
  |  |   76|    737|    /* Set conditionals */                                                                         \
  |  |   77|    737|                                                                                                   \
  |  |   78|    737|    /* Less than */                                                                                \
  |  |   79|    737|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 156, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    156|        return #name;
  |  |  ------------------
  |  |   80|  1.00k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.00k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.00k|        return #name;
  |  |  ------------------
  |  |   81|  1.00k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    181|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 181, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    181|        return #name;
  |  |  ------------------
  |  |   82|    181|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 109, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    109|        return #name;
  |  |  ------------------
  |  |   83|    109|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |   84|    198|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 198, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    198|        return #name;
  |  |  ------------------
  |  |   85|    198|                                                                                                   \
  |  |   86|    198|    /* Greater than */                                                                             \
  |  |   87|    597|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    597|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 597, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    597|        return #name;
  |  |  ------------------
  |  |   88|    597|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 91, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     91|        return #name;
  |  |  ------------------
  |  |   89|    730|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    730|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 730, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    730|        return #name;
  |  |  ------------------
  |  |   90|    730|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|     86|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 86, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     86|        return #name;
  |  |  ------------------
  |  |   91|    900|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    900|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 900, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    900|        return #name;
  |  |  ------------------
  |  |   92|  2.37k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.37k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.37k|        return #name;
  |  |  ------------------
  |  |   93|  2.37k|                                                                                                   \
  |  |   94|  2.37k|    /* Less than or equal */                                                                       \
  |  |   95|  2.37k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    391|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 391, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    391|        return #name;
  |  |  ------------------
  |  |   96|    391|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    246|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 246, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    246|        return #name;
  |  |  ------------------
  |  |   97|    312|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    312|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 312, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    312|        return #name;
  |  |  ------------------
  |  |   98|    372|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    372|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 372, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    372|        return #name;
  |  |  ------------------
  |  |   99|    372|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    139|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 139, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    139|        return #name;
  |  |  ------------------
  |  |  100|  1.16k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.16k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.16k|        return #name;
  |  |  ------------------
  |  |  101|  1.16k|                                                                                                   \
  |  |  102|  1.16k|    /* Greater than or equal */                                                                    \
  |  |  103|  2.51k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  2.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.51k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.51k|        return #name;
  |  |  ------------------
  |  |  104|  2.51k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.34k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.34k|        return #name;
  |  |  ------------------
  |  |  105|  1.34k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    137|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 137, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    137|        return #name;
  |  |  ------------------
  |  |  106|  1.63k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|  1.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.63k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.63k|        return #name;
  |  |  ------------------
  |  |  107|  1.63k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 101, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    101|        return #name;
  |  |  ------------------
  |  |  108|    103|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |  109|    103|                                                                                                   \
  |  |  110|    103|    /* Equal */                                                                                    \
  |  |  111|    103|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 92, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     92|        return #name;
  |  |  ------------------
  |  |  112|    708|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    708|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 708, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    708|        return #name;
  |  |  ------------------
  |  |  113|  2.61k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  2.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 2.61k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  209|  2.61k|        return #name;
  |  |  ------------------
  |  |  114|  2.61k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    881|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 881, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    881|        return #name;
  |  |  ------------------
  |  |  115|  1.50k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.50k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.50k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.50k|        return #name;
  |  |  ------------------
  |  |  116|  1.50k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 79, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     79|        return #name;
  |  |  ------------------
  |  |  117|     79|                                                                                                   \
  |  |  118|     79|    /* Not equal */                                                                                \
  |  |  119|  1.94k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.94k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.94k|        return #name;
  |  |  ------------------
  |  |  120|  1.94k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 94, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     94|        return #name;
  |  |  ------------------
  |  |  121|     97|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 97, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     97|        return #name;
  |  |  ------------------
  |  |  122|    171|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  208|    171|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 171, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    171|        return #name;
  |  |  ------------------
  |  |  123|    171|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  124|     90|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  125|     85|                                                                                                   \
  |  |  126|     85|    /* Conditional branching */                                                                    \
  |  |  127|    183|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    183|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 183, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    183|        return #name;
  |  |  ------------------
  |  |  128|    183|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    104|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 104, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    104|        return #name;
  |  |  ------------------
  |  |  129|    104|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|     90|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 90, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     90|        return #name;
  |  |  ------------------
  |  |  130|  3.98k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  3.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 3.98k, False: 99.1k]
  |  |  |  |  ------------------
  |  |  |  |  209|  3.98k|        return #name;
  |  |  ------------------
  |  |  131|  3.98k|                                                                                                   \
  |  |  132|  3.98k|    /* Unconditional branching */                                                                  \
  |  |  133|  3.98k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  208|    544|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 544, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    544|        return #name;
  |  |  ------------------
  |  |  134|    544|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     76|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 76, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     76|        return #name;
  |  |  ------------------
  |  |  135|  1.60k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.60k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.60k|        return #name;
  |  |  ------------------
  |  |  136|  1.60k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  208|  1.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.02k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.02k|        return #name;
  |  |  ------------------
  |  |  137|  1.02k|                                                                                                   \
  |  |  138|  1.02k|    /* Loading data */                                                                             \
  |  |  139|  1.02k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    606|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 606, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    606|        return #name;
  |  |  ------------------
  |  |  140|    606|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  141|     72|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 72, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     72|        return #name;
  |  |  ------------------
  |  |  142|     72|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     69|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 69, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     69|        return #name;
  |  |  ------------------
  |  |  143|  1.37k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|  1.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.37k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.37k|        return #name;
  |  |  ------------------
  |  |  144|  1.37k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.00k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.00k|        return #name;
  |  |  ------------------
  |  |  145|  1.00k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  146|     67|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 67, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     67|        return #name;
  |  |  ------------------
  |  |  147|    451|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|    451|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 451, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    451|        return #name;
  |  |  ------------------
  |  |  148|    451|                                                                                                   \
  |  |  149|    451|    /* Storing data */                                                                             \
  |  |  150|  1.23k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.23k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.23k|        return #name;
  |  |  ------------------
  |  |  151|  1.23k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 71, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     71|        return #name;
  |  |  ------------------
  |  |  152|     85|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     85|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 85, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     85|        return #name;
  |  |  ------------------
  |  |  153|    966|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    966|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 966, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    966|        return #name;
  |  |  ------------------
  |  |  154|    966|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 66, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     66|        return #name;
  |  |  ------------------
  |  |  155|    667|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  208|    667|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 667, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    667|        return #name;
  |  |  ------------------
  |  |  156|  1.70k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  208|  1.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.70k, False: 101k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.70k|        return #name;
  |  |  ------------------
  |  |  157|  1.70k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  208|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 84, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     84|        return #name;
  |  |  ------------------
  |  |  158|     84|                                                                                                   \
  |  |  159|     84|    /* Moving data */                                                                              \
  |  |  160|    218|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 218, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    218|        return #name;
  |  |  ------------------
  |  |  161|    218|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    113|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 113, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    113|        return #name;
  |  |  ------------------
  |  |  162|    254|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    254|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 254, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    254|        return #name;
  |  |  ------------------
  |  |  163|    741|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  208|    741|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 741, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    741|        return #name;
  |  |  ------------------
  |  |  164|    741|                                                                                                   \
  |  |  165|    741|    /* Converting data */                                                                          \
  |  |  166|    741|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     81|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 81, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     81|        return #name;
  |  |  ------------------
  |  |  167|    103|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 103, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    103|        return #name;
  |  |  ------------------
  |  |  168|    103|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 80, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     80|        return #name;
  |  |  ------------------
  |  |  169|    281|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    281|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 281, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    281|        return #name;
  |  |  ------------------
  |  |  170|    281|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  208|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 82, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|     82|        return #name;
  |  |  ------------------
  |  |  171|    111|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  208|    111|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 111, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  209|    111|        return #name;
  |  |  ------------------
  |  |  172|    111|                                                                                                   \
  |  |  173|    111|    /* Other */                                                                                    \
  |  |  174|    708|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    708|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 708, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    708|        return #name;
  |  |  ------------------
  |  |  175|    708|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  208|    457|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 457, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|    457|        return #name;
  |  |  ------------------
  |  |  176|  1.01k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  208|  1.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (208:5): [True: 1.01k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  209|  1.01k|        return #name;
  |  |  ------------------
  ------------------
  212|       |
  213|      0|#undef DLX_ENUM_OPCODE_IMPL
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 103k]
  ------------------
  216|      0|                PHI_ASSERT_NOT_REACHED();
  217|   103k|        }
  218|   103k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  10.7k|    {
   32|  10.7k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 132, False: 10.5k]
  ------------------
   33|    132|        {
   34|    132|            return true;
   35|    132|        }
   36|       |
   37|  10.5k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 71, False: 10.5k]
  ------------------
   38|     71|        {
   39|     71|            return true;
   40|     71|        }
   41|       |
   42|  10.5k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 656, False: 9.87k]
  ------------------
   43|    656|        {
   44|    656|            return true;
   45|    656|        }
   46|       |
   47|  9.87k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 9.87k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  9.87k|        return false;
   53|  9.87k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  9.87k|    {
   57|  9.87k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 9.87k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  9.87k|        const char first_char = token.at(0);
   63|       |
   64|  9.87k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 947, False: 8.92k]
  ------------------
   65|    947|        {
   66|    947|            return phi::is_alpha(first_char);
   67|    947|        }
   68|       |
   69|  8.92k|        phi::boolean just_under_scores = (first_char == '_');
   70|  8.92k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 1.36k, False: 7.55k]
  |  Branch (70:15): [True: 7.39k, False: 1.53k]
  |  Branch (70:44): [True: 165, False: 1.36k]
  ------------------
   71|  1.36k|        {
   72|  1.36k|            return false;
   73|  1.36k|        }
   74|       |
   75|  48.2k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 43.5k, False: 4.71k]
  ------------------
   76|  43.5k|        {
   77|  43.5k|            const char c{token.at(index)};
   78|       |
   79|  43.5k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 17.6k, False: 25.8k]
  ------------------
   80|  17.6k|            {
   81|  17.6k|                just_under_scores = false;
   82|  17.6k|            }
   83|  25.8k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 23.0k, False: 2.84k]
  ------------------
   84|  23.0k|            {
   85|  23.0k|                continue;
   86|  23.0k|            }
   87|  2.84k|            else
   88|  2.84k|            {
   89|  2.84k|                return false;
   90|  2.84k|            }
   91|  43.5k|        }
   92|       |
   93|  4.71k|        return !just_under_scores;
   94|  7.55k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   218k|    {
  101|   218k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 218k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   218k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 12.9k, False: 205k]
  ------------------
  107|  12.9k|        {
  108|  12.9k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 6.33k, False: 6.61k]
  ------------------
  109|  6.33k|            {
  110|  6.33k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  6.33k|            }
  112|       |
  113|  6.61k|            return {};
  114|  12.9k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   205k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 103, False: 205k]
  ------------------
  118|    103|        {
  119|    103|            return {};
  120|    103|        }
  121|       |
  122|   205k|        std::int32_t number{0};
  123|   205k|        phi::boolean is_negative{false};
  124|   205k|        phi::boolean starts_with_zero{false};
  125|   205k|        phi::boolean parsing_binary{false};
  126|   205k|        phi::boolean parsing_octal{false};
  127|   205k|        phi::boolean parsing_hexadecimal{false};
  128|   205k|        phi::boolean parsed_something{false};
  129|   205k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   229k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 226k, False: 2.12k]
  ------------------
  134|   226k|        {
  135|   226k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   226k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 205k, False: 21.4k]
  ------------------
  139|   205k|            {
  140|   205k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 70, False: 205k]
  ------------------
  141|     70|                {
  142|     70|                    continue;
  143|     70|                }
  144|       |
  145|   205k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 291, False: 205k]
  ------------------
  146|    291|                {
  147|    291|                    is_negative = true;
  148|    291|                    continue;
  149|    291|                }
  150|       |
  151|   205k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 9.77k, False: 195k]
  ------------------
  152|  9.77k|                {
  153|  9.77k|                    starts_with_zero = true;
  154|  9.77k|                    continue;
  155|  9.77k|                }
  156|       |
  157|   195k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 66, False: 195k]
  ------------------
  158|     66|                {
  159|     66|                    return {};
  160|     66|                }
  161|   195k|            }
  162|       |
  163|       |            // Second character
  164|   216k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 10.4k, False: 206k]
  ------------------
  165|  10.4k|            {
  166|  10.4k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 9.77k, False: 647]
  ------------------
  167|  9.77k|                {
  168|       |                    // Binary
  169|  9.77k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 965, False: 8.80k]
  |  Branch (169:37): [True: 1.27k, False: 7.53k]
  ------------------
  170|  2.24k|                    {
  171|  2.24k|                        parsing_binary = true;
  172|  2.24k|                        continue;
  173|  2.24k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  7.53k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 3.14k, False: 4.38k]
  |  Branch (176:37): [True: 342, False: 4.04k]
  ------------------
  177|  3.48k|                    {
  178|  3.48k|                        parsing_hexadecimal = true;
  179|  3.48k|                        continue;
  180|  3.48k|                    }
  181|       |
  182|       |                    // Octal
  183|  4.04k|                    parsing_octal = true;
  184|  4.04k|                }
  185|  10.4k|            }
  186|       |
  187|       |            // Handle seperators
  188|   210k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 139, False: 210k]
  ------------------
  189|    139|            {
  190|    139|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 73]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     73|                parsed_separator = true;
  196|     73|                continue;
  197|    139|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   210k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 301, False: 210k]
  |  Branch (200:32): [True: 0, False: 301]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   210k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 210k, False: 301]
  |  Branch (205:17): [True: 0, False: 210k]
  |  Branch (205:33): [True: 0, False: 210k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   210k|            parsed_separator = false;
  212|   210k|            parsed_something = true;
  213|       |
  214|   210k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.81k, False: 208k]
  ------------------
  215|  2.81k|            {
  216|  2.81k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.33k, False: 1.48k]
  ------------------
  217|  1.33k|                {
  218|  1.33k|                    return {};
  219|  1.33k|                }
  220|       |
  221|  1.48k|                number <<= 1;
  222|  1.48k|                number |= (c - '0');
  223|  1.48k|            }
  224|   208k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 5.89k, False: 202k]
  ------------------
  225|  5.89k|            {
  226|  5.89k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 3.71k, False: 2.18k]
  ------------------
  227|  3.71k|                {
  228|  3.71k|                    return {};
  229|  3.71k|                }
  230|       |
  231|  2.18k|                number <<= 3;
  232|  2.18k|                number |= (c - '0');
  233|  2.18k|            }
  234|   202k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 6.07k, False: 196k]
  ------------------
  235|  6.07k|            {
  236|  6.07k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 2.79k, False: 3.27k]
  ------------------
  237|  2.79k|                {
  238|  2.79k|                    return {};
  239|  2.79k|                }
  240|       |
  241|  3.27k|                number <<= 4;
  242|  3.27k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.27k|            }
  244|   196k|            else
  245|   196k|            {
  246|   196k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 195k, False: 780]
  ------------------
  247|   195k|                {
  248|   195k|                    return {};
  249|   195k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|    780|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 457, False: 323]
  |  Branch (252:36): [True: 66, False: 391]
  ------------------
  253|     66|                {
  254|     66|                    return {};
  255|     66|                }
  256|       |
  257|    714|                number *= 10;
  258|    714|                number += (c - '0');
  259|    714|            }
  260|   210k|        }
  261|       |
  262|  2.12k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 1.80k, False: 324]
  ------------------
  263|  1.80k|        {
  264|       |            // Check for over/underflow
  265|  1.80k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 99, False: 1.70k]
  |  Branch (265:32): [True: 0, False: 99]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  1.80k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 1.70k, False: 99]
  |  Branch (270:17): [True: 0, False: 1.80k]
  |  Branch (270:33): [True: 0, False: 1.70k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  1.80k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 99, False: 1.70k]
  ------------------
  277|     99|            {
  278|     99|                return static_cast<std::int16_t>(-number);
  279|     99|            }
  280|       |
  281|  1.70k|            return static_cast<std::int16_t>(number);
  282|  1.80k|        }
  283|       |
  284|    324|        return {};
  285|  2.12k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  19.4k|    {
   96|  19.4k|        switch (value)
   97|  19.4k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  3.04k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.04k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.04k, False: 16.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.04k|        return #name;
  |  |  ------------------
  |  |   14|  7.08k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  7.08k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7.08k, False: 12.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|  7.08k|        return #name;
  |  |  ------------------
  |  |   15|  7.08k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    124|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 124, False: 19.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    124|        return #name;
  |  |  ------------------
  |  |   16|  1.69k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.69k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.69k, False: 17.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.69k|        return #name;
  |  |  ------------------
  |  |   17|  1.69k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    397|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 397, False: 19.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    397|        return #name;
  |  |  ------------------
  |  |   18|    886|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|    886|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 886, False: 18.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    886|        return #name;
  |  |  ------------------
  |  |   19|    886|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   20|     32|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     32|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 32, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     32|        return #name;
  |  |  ------------------
  |  |   21|    106|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    106|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 106, False: 19.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    106|        return #name;
  |  |  ------------------
  |  |   22|    110|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    110|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 110, False: 19.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    110|        return #name;
  |  |  ------------------
  |  |   23|    110|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     34|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 34, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     34|        return #name;
  |  |  ------------------
  |  |   24|     64|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|     64|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 64, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     64|        return #name;
  |  |  ------------------
  |  |   25|     64|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      6|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      6|        return #name;
  |  |  ------------------
  |  |   26|    149|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    149|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 149, False: 19.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    149|        return #name;
  |  |  ------------------
  |  |   27|    149|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   28|    287|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    287|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 287, False: 19.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    287|        return #name;
  |  |  ------------------
  |  |   29|  1.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.31k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.31k, False: 18.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.31k|        return #name;
  |  |  ------------------
  |  |   30|  1.31k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   31|     48|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     48|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 48, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     48|        return #name;
  |  |  ------------------
  |  |   32|     48|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      9|        return #name;
  |  |  ------------------
  |  |   33|    278|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    278|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 278, False: 19.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    278|        return #name;
  |  |  ------------------
  |  |   34|    370|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    370|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 370, False: 19.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    370|        return #name;
  |  |  ------------------
  |  |   35|    370|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   36|    381|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|    381|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 381, False: 19.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    381|        return #name;
  |  |  ------------------
  |  |   37|    381|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     54|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 54, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     54|        return #name;
  |  |  ------------------
  |  |   38|     54|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     18|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 18, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     18|        return #name;
  |  |  ------------------
  |  |   39|    508|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|    508|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 508, False: 18.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    508|        return #name;
  |  |  ------------------
  |  |   40|    567|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|    567|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 567, False: 18.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    567|        return #name;
  |  |  ------------------
  |  |   41|    567|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      9|        return #name;
  |  |  ------------------
  |  |   42|      9|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 19.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   43|  1.57k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.57k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.57k, False: 17.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.57k|        return #name;
  |  |  ------------------
  |  |   44|  1.57k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    254|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 254, False: 19.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    254|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 19.4k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  19.4k|        }
  109|  19.4k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  14.0k|    {
  131|  14.0k|        switch (value)
  132|  14.0k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  1.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.66k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.66k, False: 12.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.66k|        return #name;
  |  |  ------------------
  |  |   48|  1.66k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.63k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.63k, False: 12.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.63k|        return #name;
  |  |  ------------------
  |  |   49|  1.63k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 26, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     26|        return #name;
  |  |  ------------------
  |  |   50|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   52|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   53|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   54|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   55|    132|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    132|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 132, False: 13.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    132|        return #name;
  |  |  ------------------
  |  |   56|  1.65k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.65k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.65k, False: 12.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.65k|        return #name;
  |  |  ------------------
  |  |   57|  1.65k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   58|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   59|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   60|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   61|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   62|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   63|  1.34k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.34k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.34k, False: 12.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.34k|        return #name;
  |  |  ------------------
  |  |   64|  1.34k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    118|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 118, False: 13.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    118|        return #name;
  |  |  ------------------
  |  |   65|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|     83|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 83, False: 13.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|     83|        return #name;
  |  |  ------------------
  |  |   66|     83|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   67|  5.57k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  5.57k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5.57k, False: 8.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|  5.57k|        return #name;
  |  |  ------------------
  |  |   68|  5.57k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     51|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 51, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     51|        return #name;
  |  |  ------------------
  |  |   69|     51|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   70|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   71|    278|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    278|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 278, False: 13.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    278|        return #name;
  |  |  ------------------
  |  |   72|    278|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|  1.18k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.18k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.18k, False: 12.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.18k|        return #name;
  |  |  ------------------
  |  |   74|  1.18k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   75|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   76|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 14.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   77|    113|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    113|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 113, False: 13.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|    113|        return #name;
  |  |  ------------------
  |  |   78|    113|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|     70|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 70, False: 13.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|     70|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 14.0k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  14.0k|        }
  144|  14.0k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   516k|        {
   12|   516k|            m_Value = value;
   13|   516k|        }
_ZNK3dlx14StatusRegister3GetEv:
   16|   870k|        {
   17|   870k|            return m_Value;
   18|   870k|        }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  2.29k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  2.29k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 23.8k, False: 0]
  ------------------
   64|  23.8k|            {
   65|  23.8k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 2.29k, False: 21.5k]
  ------------------
   66|  2.29k|                {
   67|  2.29k|                    return &token;
   68|  2.29k|                }
   69|  23.8k|            }
   70|       |
   71|      0|            return nullptr;
   72|  2.29k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   185k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   185k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   185k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   289k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   289k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   289k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  23.2k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  23.2k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  23.2k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   507k|    {
   11|   507k|        m_Value = val;
   12|   507k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.21M|    {
   16|  2.21M|        return m_Value;
   17|  2.21M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   19|  41.3k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   24|  17.7k|    {
   25|  17.7k|        PHI_ASSERT(argument_number < 3u);
   26|       |
   27|  17.7k|        switch (argument_number.unsafe())
   28|  17.7k|        {
   29|  7.95k|            case 0u:
  ------------------
  |  Branch (29:13): [True: 7.95k, False: 9.77k]
  ------------------
   30|  7.95k|                m_Arg1 = argument;
   31|  7.95k|                break;
   32|  6.13k|            case 1u:
  ------------------
  |  Branch (32:13): [True: 6.13k, False: 11.5k]
  ------------------
   33|  6.13k|                m_Arg2 = argument;
   34|  6.13k|                break;
   35|  3.63k|            case 2u:
  ------------------
  |  Branch (35:13): [True: 3.63k, False: 14.0k]
  ------------------
   36|  3.63k|                m_Arg3 = argument;
   37|  3.63k|                break;
   38|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   39|      0|            default:
  ------------------
  |  Branch (39:13): [True: 0, False: 17.7k]
  ------------------
   40|      0|                PHI_ASSERT_NOT_REACHED();
   41|  17.7k|#endif
   42|  17.7k|        }
   43|  17.7k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   83|  4.91M|    {
   84|  4.91M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   85|  4.91M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   88|  4.91M|    {
   89|  4.91M|        return m_Info;
   90|  4.91M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   24|   141k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   27|  29.4M|    {
   28|  29.4M|        return m_Type;
   29|  29.4M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  6.44M|    {
   78|  6.44M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  6.44M|        return register_int;
   81|  6.44M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   84|  1.68M|    {
   85|  1.68M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   86|       |
   87|  1.68M|        return register_float;
   88|  1.68M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   92|  1.32M|    {
   93|  1.32M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   94|       |
   95|  1.32M|        return immediate_value;
   96|  1.32M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  107|  1.09M|    {
  108|  1.09M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  109|       |
  110|  1.09M|        return label;
  111|  1.09M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  170|  9.15k|    {
  171|  9.15k|        InstructionArgument arg;
  172|  9.15k|        arg.m_Type                   = ArgumentType::IntRegister;
  173|  9.15k|        arg.register_int.register_id = id;
  174|  9.15k|        return arg;
  175|  9.15k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  178|  5.04k|    {
  179|  5.04k|        InstructionArgument arg;
  180|  5.04k|        arg.m_Type                     = ArgumentType::FloatRegister;
  181|  5.04k|        arg.register_float.register_id = id;
  182|  5.04k|        return arg;
  183|  5.04k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  186|  2.20k|    {
  187|  2.20k|        InstructionArgument arg;
  188|  2.20k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  189|  2.20k|        arg.immediate_value.signed_value = value;
  190|  2.20k|        return arg;
  191|  2.20k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  204|  1.32k|    {
  205|  1.32k|        InstructionArgument arg;
  206|  1.32k|        arg.m_Type           = ArgumentType::Label;
  207|  1.32k|        arg.label.label_name = label_name;
  208|  1.32k|        return arg;
  209|  1.32k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|   238k|        {
  352|   238k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|   238k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|   238k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|   238k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|   238k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|   238k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|   238k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  44.4k|        {
  365|  44.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  44.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  44.4k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  44.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  44.4k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  44.4k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  43.5k|        {
  377|  43.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  43.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  43.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  43.5k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  43.5k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  43.5k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  43.5k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  19.3k|        {
  390|  19.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  19.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  19.3k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  19.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  19.3k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  19.3k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  19.1k|        {
  402|  19.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  19.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  19.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  19.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  19.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  19.1k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  19.1k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  19.1k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  9.37k|        {
  417|  9.37k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  9.37k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  9.37k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  9.37k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  9.37k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  9.37k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  9.37k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  9.37k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  45.9k|        {
  432|  45.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  45.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  45.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  45.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  45.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  45.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  45.9k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  15.9k|        {
  445|  15.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  15.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  15.9k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  15.9k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  15.9k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  15.9k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|   100k|        {
  457|   100k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|   100k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|   100k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|   100k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|   100k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|   100k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|   100k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  19.6k|        {
  470|  19.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  19.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  19.6k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  19.6k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  19.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  19.6k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  23.6k|        {
  482|  23.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  23.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  23.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  23.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  23.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  23.6k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  23.6k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  23.6k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  21.8k|        {
  497|  21.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  21.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  21.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  21.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  21.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  21.8k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  21.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  21.8k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  47.1k|        {
  512|  47.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  47.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  47.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  47.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  47.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  47.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  47.1k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  27.8k|        {
  525|  27.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  27.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  27.8k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  27.8k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  27.8k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  27.8k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  21.7k|        {
  537|  21.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  21.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  21.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  21.7k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  21.7k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  21.7k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  21.7k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  40.3k|        {
  550|  40.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  40.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  40.3k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  40.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  40.3k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  40.3k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  27.2k|        {
  562|  27.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  27.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  27.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  27.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  27.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  27.2k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  27.2k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  27.2k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  24.1k|        {
  577|  24.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  24.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  24.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  24.1k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  24.1k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  24.1k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  24.1k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  24.1k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|  4.95k|        {
  592|  4.95k|            const auto& dest_reg = arg1.AsRegisterInt();
  593|  4.95k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|  4.95k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|  4.95k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|  4.95k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|  4.95k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|  4.95k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|      1|        {
  605|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  607|      1|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|  9.79k|        {
  617|  9.79k|            const auto& dest_reg = arg1.AsRegisterInt();
  618|  9.79k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|  9.79k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|  9.79k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|  9.79k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|  9.79k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|  9.79k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|      1|        {
  630|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  632|      1|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  79.4k|        {
  684|  79.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  79.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  79.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  79.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  79.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  79.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  79.4k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  23.0k|        {
  697|  23.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  23.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  23.0k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  23.0k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  23.0k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  23.0k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  23.0k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  61.4k|        {
  710|  61.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  61.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  61.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  61.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  61.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  61.4k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  61.4k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  34.2k|        {
  723|  34.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  34.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  34.2k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  34.2k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  34.2k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  34.2k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  34.2k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  73.7k|        {
  736|  73.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  73.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  73.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  73.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  73.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  73.7k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  73.7k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  27.9k|        {
  749|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  51.2k|        {
  762|  51.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  51.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  51.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  51.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  51.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  51.2k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  51.2k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  25.8k|        {
  775|  25.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  25.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  25.8k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  25.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  25.8k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  25.8k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  25.8k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  22.7k|        {
  788|  22.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  22.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  22.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  22.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  22.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  22.7k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  22.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  22.7k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|  76.2k|        {
  802|  76.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|  76.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|  76.2k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|  76.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|  76.2k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|  76.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|  76.2k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  13.5k|        {
  815|  13.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  13.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  13.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  13.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  13.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  13.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  13.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  13.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  20.4k|        {
  829|  20.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  20.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  20.4k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  20.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  20.4k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  20.4k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  20.8k|        {
  842|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|   263k|        {
  856|   263k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|   263k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|   263k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|   263k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|   263k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|   263k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|   263k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  11.7k|        {
  869|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  11.7k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 1, False: 11.7k]
  ------------------
  877|       |
  878|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  11.7k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  25.5k|        {
  884|  25.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  25.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  25.5k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  25.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  25.5k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 0, False: 25.5k]
  ------------------
  891|       |
  892|  25.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  25.5k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  11.7k|        {
  898|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  11.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  11.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  11.7k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 1, False: 11.7k]
  ------------------
  906|       |
  907|  11.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  11.7k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|  98.1k|        {
  913|  98.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|  98.1k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|  98.1k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|  98.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|  98.1k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 0, False: 98.1k]
  ------------------
  920|       |
  921|  98.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|  98.1k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  11.7k|        {
  927|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  11.7k|            processor.SetFPSRValue(new_value);
  936|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  24.7k|        {
  941|  24.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  24.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  24.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  24.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  24.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  24.7k|            processor.SetFPSRValue(new_value);
  950|  24.7k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  11.7k|        {
  955|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  11.7k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 11.7k]
  ------------------
  963|       |
  964|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  11.7k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  30.8k|        {
  970|  30.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  30.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  30.8k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  30.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  30.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 1.00k, False: 29.8k]
  ------------------
  977|       |
  978|  30.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  30.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  10.2k|        {
  984|  10.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  10.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  10.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  10.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  10.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  10.2k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 10.2k]
  ------------------
  992|       |
  993|  10.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  10.2k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  24.7k|        {
  999|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  24.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  24.7k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 24.7k]
  ------------------
 1006|       |
 1007|  24.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  24.7k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|   103k|        {
 1013|   103k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|   103k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|   103k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|   103k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|   103k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|   103k|            processor.SetFPSRValue(new_value);
 1022|   103k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|   230k|        {
 1027|   230k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|   230k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|   230k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|   230k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|   230k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|   230k|            processor.SetFPSRValue(new_value);
 1036|   230k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  11.7k|        {
 1041|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 11.7k, False: 1]
  ------------------
 1049|       |
 1050|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  23.0k|        {
 1056|  23.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  23.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  23.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  23.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  23.0k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 23.0k, False: 0]
  ------------------
 1063|       |
 1064|  23.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  23.0k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  16.4k|        {
 1070|  16.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  16.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  16.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  16.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  16.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  16.4k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 16.4k, False: 0]
  ------------------
 1078|       |
 1079|  16.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  16.4k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|   111k|        {
 1085|   111k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|   111k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|   111k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|   111k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|   111k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 90.2k, False: 20.8k]
  ------------------
 1092|       |
 1093|   111k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|   111k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  15.3k|        {
 1099|  15.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  15.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  15.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  15.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  15.3k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  15.3k|            processor.SetFPSRValue(new_value);
 1108|  15.3k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  14.4k|        {
 1113|  14.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  14.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  14.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  14.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  14.4k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  14.4k|            processor.SetFPSRValue(new_value);
 1122|  14.4k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  11.1k|        {
 1127|  11.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  11.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  11.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  11.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  11.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  11.1k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 11.1k, False: 0]
  ------------------
 1135|       |
 1136|  11.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  11.1k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|   215k|        {
 1142|   215k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|   215k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|   215k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|   215k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|   215k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 213k, False: 2.08k]
  ------------------
 1149|       |
 1150|   215k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|   215k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  10.7k|        {
 1156|  10.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  10.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  10.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  10.7k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  10.7k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  10.7k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 10.7k, False: 0]
  ------------------
 1164|       |
 1165|  10.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  10.7k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  21.9k|        {
 1171|  21.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  21.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  21.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  21.9k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  21.9k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 21.9k, False: 0]
  ------------------
 1178|       |
 1179|  21.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  21.9k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  17.9k|        {
 1185|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  17.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  17.9k|            processor.SetFPSRValue(new_value);
 1194|  17.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  26.4k|        {
 1199|  26.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  26.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  26.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  26.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  26.4k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  26.4k|            processor.SetFPSRValue(new_value);
 1208|  26.4k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  18.3k|        {
 1213|  18.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  18.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  18.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  18.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  18.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  18.3k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 16.9k, False: 1.42k]
  ------------------
 1221|       |
 1222|  18.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  18.3k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  21.3k|        {
 1228|  21.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  21.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  21.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  21.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  21.3k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 21.3k, False: 0]
  ------------------
 1235|       |
 1236|  21.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  21.3k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  84.6k|        {
 1242|  84.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  84.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  84.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  84.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  84.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  84.6k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 79.2k, False: 5.38k]
  ------------------
 1250|       |
 1251|  84.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  84.6k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  39.9k|        {
 1257|  39.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  39.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  39.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  39.9k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  39.9k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 39.9k, False: 0]
  ------------------
 1264|       |
 1265|  39.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  39.9k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  26.0k|        {
 1271|  26.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  26.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  26.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  26.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  26.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  26.0k|            processor.SetFPSRValue(new_value);
 1280|  26.0k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  12.5k|        {
 1285|  12.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  12.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  12.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  12.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  12.5k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  12.5k|            processor.SetFPSRValue(new_value);
 1294|  12.5k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  17.4k|        {
 1299|  17.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  17.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  17.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  17.4k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  17.4k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  17.4k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 1, False: 17.4k]
  ------------------
 1307|       |
 1308|  17.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  17.4k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  27.2k|        {
 1314|  27.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  27.2k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  27.2k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  27.2k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  27.2k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 0, False: 27.2k]
  ------------------
 1321|       |
 1322|  27.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  27.2k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  23.0k|        {
 1328|  23.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  23.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  23.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  23.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  23.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  23.0k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 1, False: 23.0k]
  ------------------
 1336|       |
 1337|  23.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  23.0k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  35.1k|        {
 1343|  35.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  35.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  35.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  35.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  35.1k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 5.79k, False: 29.3k]
  ------------------
 1350|       |
 1351|  35.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  35.1k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  13.5k|        {
 1357|  13.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  13.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  13.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  13.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  13.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  13.5k|            processor.SetFPSRValue(new_value);
 1366|  13.5k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  15.5k|        {
 1371|  15.5k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  15.5k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  15.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  15.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  15.5k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  15.5k|            processor.SetFPSRValue(new_value);
 1380|  15.5k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  63.0k|        {
 1385|  63.0k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  63.0k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  63.0k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  63.0k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 42.7k, False: 20.3k]
  ------------------
 1391|  42.7k|            {
 1392|  42.7k|                JumpToLabel(processor, jump_label.label_name);
 1393|  42.7k|            }
 1394|  63.0k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  56.1k|        {
 1399|  56.1k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  56.1k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  56.1k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  56.1k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 29.9k, False: 26.1k]
  ------------------
 1405|  29.9k|            {
 1406|  29.9k|                JumpToLabel(processor, jump_label.label_name);
 1407|  29.9k|            }
 1408|  56.1k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  32.5k|        {
 1413|  32.5k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  32.5k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  32.5k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 19.4k, False: 13.0k]
  ------------------
 1418|  19.4k|            {
 1419|  19.4k|                JumpToLabel(processor, jump_label.label_name);
 1420|  19.4k|            }
 1421|  32.5k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   837k|        {
 1426|   837k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   837k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   837k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 820k, False: 16.9k]
  ------------------
 1431|   820k|            {
 1432|   820k|                JumpToLabel(processor, jump_label.label_name);
 1433|   820k|            }
 1434|   837k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|  64.1k|        {
 1439|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1442|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  34.9k|        {
 1447|  34.9k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  34.9k|            JumpToRegister(processor, jump_register.register_id);
 1450|  34.9k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  44.4k|        {
 1455|  44.4k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  44.4k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  44.4k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  44.4k|            JumpToLabel(processor, jump_label.label_name);
 1461|  44.4k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|   396k|        {
 1466|   396k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|   396k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|   396k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|   396k|            JumpToRegister(processor, jump_register.register_id);
 1472|   396k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  12.0k|        {
 1477|  12.0k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  12.0k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  12.0k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  12.0k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  12.0k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|      1|        {
 1488|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 0, False: 1]
  ------------------
 1493|      0|            {
 1494|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      0|                return;
 1496|      0|            }
 1497|       |
 1498|      1|            phi::i32 address = optional_address.value();
 1499|       |
 1500|      1|            auto optional_value =
 1501|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 1, False: 0]
  ------------------
 1504|      1|            {
 1505|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      1|                return;
 1508|      1|            }
 1509|       |
 1510|      0|            phi::i32 value = optional_value.value();
 1511|       |
 1512|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|      1|        {
 1518|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 0, False: 1]
  ------------------
 1523|      0|            {
 1524|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      0|                return;
 1526|      0|            }
 1527|       |
 1528|      1|            phi::i32 address = optional_address.value();
 1529|       |
 1530|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|      1|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 1, False: 0]
  ------------------
 1534|      1|            {
 1535|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      1|                return;
 1538|      1|            }
 1539|       |
 1540|      0|            phi::u32 value = optional_value.value();
 1541|       |
 1542|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|      1|        {
 1548|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 0, False: 1]
  ------------------
 1553|      0|            {
 1554|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      0|                return;
 1556|      0|            }
 1557|       |
 1558|      1|            phi::i32 address = optional_address.value();
 1559|       |
 1560|      1|            auto optional_value =
 1561|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 1, False: 0]
  ------------------
 1564|      1|            {
 1565|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      1|                return;
 1568|      1|            }
 1569|       |
 1570|      0|            phi::i32 value = optional_value.value();
 1571|       |
 1572|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|      1|        {
 1578|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 0, False: 1]
  ------------------
 1583|      0|            {
 1584|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      0|                return;
 1586|      0|            }
 1587|       |
 1588|      1|            phi::i32 address = optional_address.value();
 1589|       |
 1590|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|      1|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 1, False: 0]
  ------------------
 1594|      1|            {
 1595|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      1|                return;
 1598|      1|            }
 1599|       |
 1600|      0|            phi::u32 value = optional_value.value();
 1601|       |
 1602|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|      1|        {
 1608|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 0, False: 1]
  ------------------
 1613|      0|            {
 1614|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      0|                return;
 1616|      0|            }
 1617|       |
 1618|      1|            phi::i32 address = optional_address.value();
 1619|       |
 1620|      1|            auto optional_value =
 1621|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 1, False: 0]
  ------------------
 1624|      1|            {
 1625|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      1|                return;
 1628|      1|            }
 1629|       |
 1630|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|      1|        {
 1636|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 0, False: 1]
  ------------------
 1641|      0|            {
 1642|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      0|                return;
 1644|      0|            }
 1645|       |
 1646|      1|            phi::i32 address = optional_address.value();
 1647|       |
 1648|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|      1|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 1, False: 0]
  ------------------
 1652|      1|            {
 1653|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      1|                return;
 1656|      1|            }
 1657|       |
 1658|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|      1|        {
 1664|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 0, False: 1]
  ------------------
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|       |
 1674|      1|            phi::i32 address = optional_address.value();
 1675|       |
 1676|      1|            auto optional_value =
 1677|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 1, False: 0]
  ------------------
 1680|      1|            {
 1681|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      1|                return;
 1684|      1|            }
 1685|       |
 1686|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|      1|        {
 1692|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 0, False: 1]
  ------------------
 1697|      0|            {
 1698|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      0|                return;
 1700|      0|            }
 1701|       |
 1702|      1|            phi::i32 address = optional_address.value();
 1703|       |
 1704|      1|            auto optional_value =
 1705|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 1, False: 0]
  ------------------
 1708|      1|            {
 1709|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      1|                return;
 1712|      1|            }
 1713|       |
 1714|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  20.9k|        {
 1940|  20.9k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  20.9k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  20.9k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  20.9k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  20.9k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  7.94k|        {
 1951|  7.94k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  7.94k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  7.94k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  7.94k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  7.94k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1961|  10.8k|        {
 1962|  10.8k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1963|  10.8k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1964|       |
 1965|  10.8k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1966|       |
 1967|  10.8k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1968|       |
 1969|  10.8k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1970|  10.8k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1974|  19.6k|        {
 1975|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1976|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1977|       |
 1978|  19.6k|            const std::int32_t source_value =
 1979|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1980|       |
 1981|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1982|       |
 1983|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1984|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  13.6k|        {
 1989|  13.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  13.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  13.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  13.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  13.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  26.8k|        {
 2000|  26.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  26.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  26.8k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  26.8k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  26.8k|            const float        converted_value_float =
 2006|  26.8k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  26.8k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  26.8k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  9.37k|        {
 2014|  9.37k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  9.37k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  9.37k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  9.37k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  9.37k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  9.37k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  19.0k|        {
 2026|  19.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  19.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  19.0k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  19.0k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  19.0k|            const float        converted_value_float =
 2032|  19.0k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  19.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  19.0k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  18.4k|        {
 2040|  18.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  18.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  18.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  18.4k|            const std::int32_t converted_value_int =
 2045|  18.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  18.4k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  18.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  18.4k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  11.7k|        {
 2054|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  11.7k|            const std::int32_t converted_value_int =
 2059|  11.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      8|        {
 2074|      8|            processor.Raise(Exception::Halt);
 2075|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|   185k|        {
 2080|       |            /* Do nothing */
 2081|   185k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|   282k|    {
  170|   282k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|   282k|        SafeWriteInteger(processor, dest_reg, res);
  173|   282k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   424k|    {
  125|   424k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   424k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   424k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 20.8k, False: 403k]
  ------------------
  130|  20.8k|        {
  131|  20.8k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  20.8k|            value = max + (value % (min - 1));
  134|  20.8k|        }
  135|       |        // Check for overflow
  136|   403k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 18.8k, False: 384k]
  ------------------
  137|  18.8k|        {
  138|  18.8k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  18.8k|            value = min + (value % (max + 1));
  141|  18.8k|        }
  142|       |
  143|   424k|        PHI_ASSERT(value >= min);
  144|   424k|        PHI_ASSERT(value <= max);
  145|       |
  146|   424k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   424k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  62.8k|    {
  178|  62.8k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  62.8k|        SafeWriteInteger(processor, dest_reg, res);
  181|  62.8k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   254k|    {
  152|   254k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   254k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 26.0k, False: 228k]
  ------------------
  156|  26.0k|        {
  157|  26.0k|            processor.Raise(Exception::Overflow);
  158|       |
  159|  26.0k|            value %= max + 1u;
  160|  26.0k|        }
  161|       |
  162|   254k|        PHI_ASSERT(value <= max);
  163|       |
  164|   254k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   254k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  61.9k|    {
  186|  61.9k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  61.9k|        SafeWriteInteger(processor, dest_reg, res);
  189|  61.9k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   119k|    {
  194|   119k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   119k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 27.0k, False: 92.9k]
  ------------------
  197|  27.0k|        {
  198|  27.0k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  27.0k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  27.0k|            SafeWriteInteger(processor, dest_reg, res);
  202|  27.0k|            return;
  203|  27.0k|        }
  204|       |
  205|  92.9k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|  92.9k|        SafeWriteInteger(processor, dest_reg, res);
  208|  92.9k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  74.9k|    {
  213|  74.9k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  74.9k|        SafeWriteInteger(processor, dest_reg, res);
  216|  74.9k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|  62.1k|    {
  221|  62.1k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|  62.1k|        SafeWriteInteger(processor, dest_reg, res);
  224|  62.1k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  4.96k|    {
  229|  4.96k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 4.95k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  4.95k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  4.95k|        SafeWriteInteger(processor, dest_reg, res);
  238|  4.95k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  9.79k|    {
  243|  9.79k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 2, False: 9.79k]
  ------------------
  244|      2|        {
  245|      2|            processor.Raise(Exception::DivideByZero);
  246|      2|            return;
  247|      2|        }
  248|       |
  249|  9.79k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  9.79k|        SafeWriteInteger(processor, dest_reg, res);
  252|  9.79k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   204k|    {
  326|   204k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 8.02k, False: 196k]
  ------------------
  327|  8.02k|        {
  328|  8.02k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  8.02k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  8.02k|            return;
  333|  8.02k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   196k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 17.5k, False: 178k]
  ------------------
  337|  17.5k|        {
  338|  17.5k|            processor.Raise(Exception::BadShift);
  339|  17.5k|            return;
  340|  17.5k|        }
  341|       |
  342|   178k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   178k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   178k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|  95.6k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|  95.6k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 8.37k, False: 87.2k]
  ------------------
  259|  8.37k|        {
  260|  8.37k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  8.37k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  8.37k|            return;
  265|  8.37k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  87.2k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 53.6k, False: 33.6k]
  ------------------
  269|  53.6k|        {
  270|  53.6k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  53.6k|            return;
  272|  53.6k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  33.6k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 7.35k, False: 26.3k]
  ------------------
  276|  7.35k|        {
  277|  7.35k|            processor.Raise(Exception::BadShift);
  278|  7.35k|            return;
  279|  7.35k|        }
  280|       |
  281|  26.3k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  26.3k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  26.3k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  26.3k|    {
   30|  26.3k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  26.3k|        return value & ~(-1 << (32 - n));
   33|  26.3k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  77.1k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  77.1k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 6.59k, False: 70.5k]
  ------------------
  293|  6.59k|        {
  294|  6.59k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  6.59k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 3.18k, False: 3.40k]
  ------------------
  298|  3.18k|            {
  299|       |                // Set every byte to 1
  300|  3.18k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  3.18k|            }
  302|  3.40k|            else
  303|  3.40k|            {
  304|       |                // Set every byte to 0
  305|  3.40k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  3.40k|            }
  307|  6.59k|            return;
  308|  6.59k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  70.5k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 15.9k, False: 54.6k]
  ------------------
  312|  15.9k|        {
  313|  15.9k|            processor.Raise(Exception::BadShift);
  314|  15.9k|            return;
  315|  15.9k|        }
  316|       |
  317|  54.6k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  54.6k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  54.6k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.02M|    {
   39|       |        // Lookup the label
   40|  1.02M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.02M|        PHI_ASSERT(program != nullptr);
   42|  1.02M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.02M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 45, False: 1.02M]
  ------------------
   45|     45|        {
   46|     45|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     45|            processor.Raise(Exception::UnknownLabel);
   48|     45|            return;
   49|     45|        }
   50|       |
   51|  1.02M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.02M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.02M|        processor.SetNextProgramCounter(jump_point);
   56|  1.02M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   431k|    {
   60|   431k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   431k|        phi::u32 max_address =
   63|   431k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   431k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 8, False: 431k]
  ------------------
   65|      8|        {
   66|      8|            processor.Raise(Exception::AddressOutOfBounds);
   67|      8|            return;
   68|      8|        }
   69|       |
   70|   431k|        processor.SetNextProgramCounter(address.unsafe());
   71|   431k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  4.91M|    {
   12|  4.91M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  4.91M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  4.91M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  4.91M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  4.91M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  4.91M|                   "Unexpected argument type for arg1");
   22|  4.91M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  4.91M|                   "Unexpected argument type for arg2");
   24|  4.91M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  4.91M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  4.91M|        m_Executor(processor, arg1, arg2, arg3);
   29|  4.91M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  41.3k|    {
  453|  41.3k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  41.3k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.37M|    {
   17|  1.37M|        m_ValueSigned = val;
   18|  1.37M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|   955k|    {
   22|   955k|        m_ValueUnsigned = val;
   23|   955k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  2.52M|    {
   27|  2.52M|        return m_ValueSigned;
   28|  2.52M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.50M|    {
   32|  1.50M|        return m_ValueUnsigned;
   33|  1.50M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  2.81M|    {
   37|  2.81M|        return m_IsReadOnly;
   38|  2.81M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|      1|    {
   17|      1|        m_Values.resize(starting_size.unsafe());
   18|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|      1|    {
   22|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1, False: 0]
  ------------------
   23|      1|        {
   24|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|      1|            return {};
   26|      1|        }
   27|       |
   28|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|      0|        return m_Values[raw_address].signed_value;
   31|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|      1|    {
   35|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 1, False: 0]
  ------------------
   36|      1|        {
   37|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|      1|            return {};
   39|      1|        }
   40|       |
   41|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|      0|        return m_Values[raw_address].unsigned_value;
   43|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|      1|    {
   47|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1, False: 0]
  ------------------
   48|      1|        {
   49|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|      1|            return {};
   51|      1|        }
   52|       |
   53|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 0, False: 0]
  ------------------
   56|      0|        {
   57|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|      0|            return {};
   59|      0|        }
   60|       |
   61|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|      1|    {
   66|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1, False: 0]
  ------------------
   67|      1|        {
   68|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      1|            return {};
   70|      1|        }
   71|       |
   72|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|      0|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 0, False: 0]
  ------------------
   75|      0|        {
   76|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|      0|            return {};
   78|      0|        }
   79|       |
   80|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|      1|    {
   85|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 1, False: 0]
  ------------------
   86|      1|        {
   87|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|      1|            return {};
   89|      1|        }
   90|       |
   91|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 0, False: 0]
  ------------------
   94|      0|        {
   95|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|      0|            return {};
   97|      0|        }
   98|       |
   99|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|      1|    {
  104|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 1, False: 0]
  ------------------
  105|      1|        {
  106|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|      1|            return {};
  108|      1|        }
  109|       |
  110|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|      0|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 0, False: 0]
  ------------------
  113|      0|        {
  114|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      0|            return {};
  116|      0|        }
  117|       |
  118|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|      1|    {
  123|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1, False: 0]
  ------------------
  124|      1|        {
  125|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|      1|            return {};
  127|      1|        }
  128|       |
  129|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 0, False: 0]
  ------------------
  132|      0|        {
  133|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|      0|            return {};
  135|      0|        }
  136|       |
  137|      0|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|      0|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|      1|    {
  142|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1, False: 0]
  ------------------
  143|      1|        {
  144|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|      1|            return {};
  146|      1|        }
  147|       |
  148|      0|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|      0|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|        {
  152|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|      0|            return {};
  154|      0|        }
  155|       |
  156|      0|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|      8|    {
  269|       |        // Cannot access anything before the starting address
  270|      8|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 8, False: 0]
  ------------------
  271|      8|        {
  272|      8|            return false;
  273|      8|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 0, False: 0]
  ------------------
  277|      0|                                             address.unsafe(), size.unsafe()))
  278|      0|        {
  279|      0|            return false;
  280|      0|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|      0|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 0]
  ------------------
  284|      0|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|      0|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 0, False: 0]
  ------------------
  291|      0|        {
  292|      0|            return false;
  293|      0|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|      0|        return true;
  297|      0|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  4.53k|    {
  307|  4.53k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 4.53M, False: 4.53k]
  ------------------
  308|  4.53M|        {
  309|  4.53M|            val.signed_value = 0;
  310|  4.53M|        }
  311|  4.53k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   184k|    {
   24|   184k|        switch (token.length())
   25|   184k|        {
   26|       |            // 1 character OpCodes
   27|  7.71k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 7.71k, False: 176k]
  ------------------
   28|  7.71k|                char c1 = token[0];
   29|  7.71k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 3.71k, False: 4.00k]
  ------------------
   30|  3.71k|                {
   31|  3.71k|                    return OpCode::J;
   32|  3.71k|                }
   33|  4.00k|                break;
   34|  7.71k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  13.9k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 13.9k, False: 170k]
  ------------------
   38|  13.9k|                char c1 = token[0];
   39|  13.9k|                char c2 = token[1];
   40|       |
   41|  13.9k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 6.13k, False: 7.84k]
  ------------------
   42|  13.9k|                {
   43|    172|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 172, False: 13.8k]
  ------------------
   44|    343|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 171, False: 13.8k]
  ------------------
   45|    343|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 142, False: 201]
  ------------------
   46|    142|                        {
   47|    142|                            return OpCode::JR;
   48|    142|                        }
   49|    201|                        break;
   50|       |
   51|  1.88k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 1.88k, False: 12.1k]
  ------------------
   52|  2.08k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 194, False: 13.7k]
  ------------------
   53|  2.08k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 73, False: 2.00k]
  ------------------
   54|  2.08k|                        {
   55|     67|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 67, False: 2.01k]
  ------------------
   56|    144|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 77, False: 2.00k]
  ------------------
   57|    144|                                return OpCode::LB;
   58|    451|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 451, False: 1.62k]
  ------------------
   59|    485|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 34, False: 2.04k]
  ------------------
   60|    485|                                return OpCode::LD;
   61|     67|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 67, False: 2.01k]
  ------------------
   62|    136|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 69, False: 2.01k]
  ------------------
   63|    136|                                return OpCode::LF;
   64|     69|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 69, False: 2.01k]
  ------------------
   65|    170|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 101, False: 1.97k]
  ------------------
   66|    170|                                return OpCode::LH;
   67|  1.00k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 1.00k, False: 1.07k]
  ------------------
   68|  1.07k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 66, False: 2.01k]
  ------------------
   69|  1.07k|                                return OpCode::LW;
   70|  2.08k|                        }
   71|     73|                        break;
   72|     78|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 78, False: 13.9k]
  ------------------
   73|  1.64k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 1.56k, False: 12.4k]
  ------------------
   74|  1.64k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 165, False: 1.48k]
  ------------------
   75|    165|                        {
   76|    165|                            return OpCode::OR;
   77|    165|                        }
   78|  1.48k|                        break;
   79|  3.35k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 3.35k, False: 10.6k]
  ------------------
   80|  3.77k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 422, False: 13.5k]
  ------------------
   81|  3.77k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 117, False: 3.66k]
  ------------------
   82|  3.77k|                        {
   83|  1.23k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.23k, False: 2.54k]
  ------------------
   84|  1.29k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 67, False: 3.71k]
  ------------------
   85|  1.29k|                                return OpCode::SB;
   86|     84|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 84, False: 3.69k]
  ------------------
   87|    227|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 143, False: 3.63k]
  ------------------
   88|    227|                                return OpCode::SD;
   89|  1.70k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 1.70k, False: 2.07k]
  ------------------
   90|  1.77k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 66, False: 3.71k]
  ------------------
   91|  1.77k|                                return OpCode::SF;
   92|     85|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 85, False: 3.69k]
  ------------------
   93|    197|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 112, False: 3.66k]
  ------------------
   94|    197|                                return OpCode::SH;
   95|    101|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 101, False: 3.67k]
  ------------------
   96|    167|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 66, False: 3.71k]
  ------------------
   97|    167|                                return OpCode::SW;
   98|  3.77k|                        }
   99|    117|                        break;
  100|  13.9k|                }
  101|  8.01k|                break;
  102|  13.9k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  82.1k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 82.1k, False: 102k]
  ------------------
  106|  82.1k|                char c1 = token[0];
  107|  82.1k|                char c2 = token[1];
  108|  82.1k|                char c3 = token[2];
  109|       |
  110|  82.1k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 6.71k, False: 75.4k]
  ------------------
  111|  82.1k|                {
  112|  29.1k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 29.1k, False: 53.0k]
  ------------------
  113|  29.2k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 101, False: 82.0k]
  ------------------
  114|  29.2k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 28.9k, False: 231]
  |  Branch (114:29): [True: 28.8k, False: 338]
  |  Branch (114:45): [True: 28.8k, False: 107]
  ------------------
  115|  28.8k|                        {
  116|  28.8k|                            return OpCode::ADD;
  117|  28.8k|                        }
  118|    338|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 216, False: 122]
  |  Branch (118:34): [True: 150, False: 188]
  |  Branch (118:50): [True: 150, False: 66]
  ------------------
  119|    150|                        {
  120|    150|                            return OpCode::AND;
  121|    150|                        }
  122|    188|                        break;
  123|       |
  124|    188|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 142, False: 82.0k]
  ------------------
  125|    286|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 144, False: 81.9k]
  ------------------
  126|    286|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 214, False: 72]
  |  Branch (126:29): [True: 148, False: 138]
  |  Branch (126:45): [True: 148, False: 66]
  ------------------
  127|    148|                        {
  128|    148|                            return OpCode::DIV;
  129|    148|                        }
  130|    138|                        break;
  131|       |
  132|  1.73k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.73k, False: 80.4k]
  ------------------
  133|  1.82k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 95, False: 82.0k]
  ------------------
  134|  1.82k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.75k, False: 75]
  ------------------
  135|  1.75k|                        {
  136|  1.75k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 145, False: 1.60k]
  ------------------
  137|    145|                            {
  138|    145|                                return OpCode::EQD;
  139|    145|                            }
  140|  1.60k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 1.53k, False: 75]
  ------------------
  141|  1.53k|                            {
  142|  1.53k|                                return OpCode::EQF;
  143|  1.53k|                            }
  144|  1.75k|                        }
  145|    150|                        break;
  146|       |
  147|  3.48k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 3.48k, False: 78.6k]
  ------------------
  148|  4.00k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 518, False: 81.6k]
  ------------------
  149|  4.00k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 402, False: 3.60k]
  ------------------
  150|    402|                        {
  151|    402|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 169, False: 233]
  ------------------
  152|    169|                            {
  153|    169|                                return OpCode::GED;
  154|    169|                            }
  155|    233|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 167, False: 66]
  ------------------
  156|    167|                            {
  157|    167|                                return OpCode::GEF;
  158|    167|                            }
  159|    402|                        }
  160|  3.60k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 3.53k, False: 66]
  ------------------
  161|  3.53k|                        {
  162|  3.53k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 2.47k, False: 1.06k]
  ------------------
  163|  2.47k|                            {
  164|  2.47k|                                return OpCode::GTD;
  165|  2.47k|                            }
  166|  1.06k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 966, False: 98]
  ------------------
  167|    966|                            {
  168|    966|                                return OpCode::GTF;
  169|    966|                            }
  170|  1.06k|                        }
  171|    230|                        break;
  172|       |
  173|  1.65k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 1.65k, False: 80.4k]
  ------------------
  174|  2.28k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 630, False: 81.5k]
  ------------------
  175|  2.28k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 2.22k, False: 66]
  |  Branch (175:29): [True: 1.90k, False: 388]
  |  Branch (175:45): [True: 1.90k, False: 322]
  ------------------
  176|  1.90k|                        {
  177|  1.90k|                            return OpCode::JAL;
  178|  1.90k|                        }
  179|    388|                        break;
  180|       |
  181|  5.67k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 5.67k, False: 76.4k]
  ------------------
  182|  9.74k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 4.06k, False: 78.0k]
  ------------------
  183|  9.74k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 1.64k, False: 8.10k]
  ------------------
  184|  9.74k|                        {
  185|     71|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 71, False: 9.67k]
  ------------------
  186|  1.84k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 1.77k, False: 7.97k]
  ------------------
  187|  1.84k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 870, False: 971]
  ------------------
  188|    870|                                {
  189|    870|                                    return OpCode::LBU;
  190|    870|                                }
  191|    971|                                break;
  192|       |
  193|  1.29k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.29k, False: 8.44k]
  ------------------
  194|  2.19k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 903, False: 8.84k]
  ------------------
  195|  2.19k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 1.24k, False: 955]
  ------------------
  196|  1.24k|                                {
  197|  1.24k|                                    return OpCode::LED;
  198|  1.24k|                                }
  199|    955|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 338, False: 617]
  ------------------
  200|    338|                                {
  201|    338|                                    return OpCode::LEF;
  202|    338|                                }
  203|    617|                                break;
  204|       |
  205|  1.95k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.95k, False: 7.78k]
  ------------------
  206|  3.35k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 1.39k, False: 8.34k]
  ------------------
  207|  3.35k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 672, False: 2.68k]
  ------------------
  208|    672|                                {
  209|    672|                                    return OpCode::LHI;
  210|    672|                                }
  211|  2.68k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 1.36k, False: 1.31k]
  ------------------
  212|  1.36k|                                {
  213|  1.36k|                                    return OpCode::LHU;
  214|  1.36k|                                }
  215|  1.31k|                                break;
  216|       |
  217|  1.31k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 439, False: 9.30k]
  ------------------
  218|    540|                            case 't':
  ------------------
  |  Branch (218:29): [True: 101, False: 9.64k]
  ------------------
  219|    540|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 264, False: 276]
  ------------------
  220|    264|                                {
  221|    264|                                    return OpCode::LTD;
  222|    264|                                }
  223|    276|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 178, False: 98]
  ------------------
  224|    178|                                {
  225|    178|                                    return OpCode::LTF;
  226|    178|                                }
  227|     98|                                break;
  228|       |
  229|     98|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 70, False: 9.67k]
  ------------------
  230|    167|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 97, False: 9.64k]
  ------------------
  231|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 133, False: 34]
  ------------------
  232|    133|                                {
  233|    133|                                    return OpCode::LWU;
  234|    133|                                }
  235|     34|                                break;
  236|  9.74k|                        }
  237|  4.67k|                        break;
  238|       |
  239|  5.84k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 5.84k, False: 76.2k]
  ------------------
  240|  6.09k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 250, False: 81.8k]
  ------------------
  241|  6.09k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 415, False: 5.67k]
  ------------------
  242|    415|                        {
  243|    415|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 151, False: 264]
  ------------------
  244|    151|                            {
  245|    151|                                return OpCode::NED;
  246|    151|                            }
  247|    264|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 188, False: 76]
  ------------------
  248|    188|                            {
  249|    188|                                return OpCode::NEF;
  250|    188|                            }
  251|    415|                        }
  252|  5.67k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 5.38k, False: 289]
  |  Branch (252:34): [True: 3.72k, False: 1.95k]
  |  Branch (252:50): [True: 3.72k, False: 1.66k]
  ------------------
  253|  3.72k|                        {
  254|  3.72k|                            return OpCode::NOP;
  255|  3.72k|                        }
  256|       |
  257|  2.02k|                        break;
  258|       |
  259|  2.02k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 94, False: 82.0k]
  ------------------
  260|  3.48k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 3.39k, False: 78.7k]
  ------------------
  261|  3.48k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 3.12k, False: 363]
  |  Branch (261:29): [True: 1.39k, False: 2.08k]
  |  Branch (261:45): [True: 1.39k, False: 1.72k]
  ------------------
  262|  1.39k|                        {
  263|  1.39k|                            return OpCode::ORI;
  264|  1.39k|                        }
  265|  2.08k|                        break;
  266|       |
  267|  17.1k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 17.1k, False: 64.9k]
  ------------------
  268|  17.9k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 719, False: 81.4k]
  ------------------
  269|  17.9k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 167, False: 17.7k]
  ------------------
  270|  17.9k|                        {
  271|     71|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 71, False: 17.8k]
  ------------------
  272|    206|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 135, False: 17.7k]
  ------------------
  273|    206|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 137, False: 69]
  ------------------
  274|    137|                                {
  275|    137|                                    return OpCode::SBU;
  276|    137|                                }
  277|     69|                                break;
  278|       |
  279|     92|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 92, False: 17.8k]
  ------------------
  280|    256|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 164, False: 17.7k]
  ------------------
  281|    256|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 158, False: 98]
  ------------------
  282|    158|                                {
  283|    158|                                    return OpCode::SEQ;
  284|    158|                                }
  285|     98|                                break;
  286|       |
  287|  3.17k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 3.17k, False: 14.7k]
  ------------------
  288|  3.81k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 646, False: 17.2k]
  ------------------
  289|  3.81k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.57k, False: 1.24k]
  ------------------
  290|  2.57k|                                {
  291|  2.57k|                                    return OpCode::SGE;
  292|  2.57k|                                }
  293|  1.24k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 663, False: 578]
  ------------------
  294|    663|                                {
  295|    663|                                    return OpCode::SGT;
  296|    663|                                }
  297|    578|                                break;
  298|       |
  299|    967|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 967, False: 16.9k]
  ------------------
  300|  1.10k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 136, False: 17.7k]
  ------------------
  301|  1.10k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.03k, False: 71]
  ------------------
  302|  1.03k|                                {
  303|  1.03k|                                    return OpCode::SHU;
  304|  1.03k|                                }
  305|     71|                                break;
  306|       |
  307|  5.59k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 5.59k, False: 12.3k]
  ------------------
  308|  5.91k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 323, False: 17.5k]
  ------------------
  309|  5.91k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 67, False: 5.84k]
  ------------------
  310|  5.91k|                                {
  311|    674|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 674, False: 5.24k]
  ------------------
  312|    740|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 5.84k]
  ------------------
  313|    740|                                        return OpCode::SLA;
  314|       |
  315|    391|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 391, False: 5.52k]
  ------------------
  316|    457|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 66, False: 5.84k]
  ------------------
  317|    457|                                        return OpCode::SLE;
  318|       |
  319|  4.30k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 4.30k, False: 1.61k]
  ------------------
  320|  4.37k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 66, False: 5.84k]
  ------------------
  321|  4.37k|                                        return OpCode::SLL;
  322|       |
  323|    156|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 156, False: 5.75k]
  ------------------
  324|    281|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 125, False: 5.79k]
  ------------------
  325|    281|                                        return OpCode::SLT;
  326|  5.91k|                                }
  327|     67|                                break;
  328|       |
  329|  1.94k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.94k, False: 15.9k]
  ------------------
  330|  2.04k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 100, False: 17.8k]
  ------------------
  331|  2.04k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 1.98k, False: 66]
  ------------------
  332|  1.98k|                                {
  333|  1.98k|                                    return OpCode::SNE;
  334|  1.98k|                                }
  335|     66|                                break;
  336|       |
  337|  2.22k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 2.22k, False: 15.6k]
  ------------------
  338|  2.38k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 161, False: 17.7k]
  ------------------
  339|  2.38k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 193, False: 2.19k]
  ------------------
  340|    193|                                {
  341|    193|                                    return OpCode::SRA;
  342|    193|                                }
  343|  2.19k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 2.09k, False: 98]
  ------------------
  344|  2.09k|                                {
  345|  2.09k|                                    return OpCode::SRL;
  346|  2.09k|                                }
  347|     98|                                break;
  348|       |
  349|  1.18k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.18k, False: 16.7k]
  ------------------
  350|  1.26k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 81, False: 17.8k]
  ------------------
  351|  1.26k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 1.19k, False: 66]
  ------------------
  352|  1.19k|                                {
  353|  1.19k|                                    return OpCode::SUB;
  354|  1.19k|                                }
  355|     66|                                break;
  356|       |
  357|    597|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 597, False: 17.3k]
  ------------------
  358|    754|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 157, False: 17.7k]
  ------------------
  359|    754|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 631, False: 123]
  ------------------
  360|    631|                                {
  361|    631|                                    return OpCode::SWU;
  362|    631|                                }
  363|    123|                                break;
  364|  17.9k|                        }
  365|       |
  366|  1.83k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 431, False: 81.7k]
  ------------------
  367|  1.98k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 146, False: 81.9k]
  ------------------
  368|  1.98k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 559, False: 1.42k]
  |  Branch (368:29): [True: 493, False: 1.48k]
  |  Branch (368:45): [True: 493, False: 66]
  ------------------
  369|    493|                        {
  370|    493|                            return OpCode::XOR;
  371|    493|                        }
  372|  1.48k|                        break;
  373|  82.1k|                }
  374|  18.0k|                break;
  375|  82.1k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|  56.4k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 56.4k, False: 128k]
  ------------------
  379|  56.4k|                char c1 = token[0];
  380|  56.4k|                char c2 = token[1];
  381|  56.4k|                char c3 = token[2];
  382|  56.4k|                char c4 = token[3];
  383|       |
  384|  56.4k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 6.18k, False: 50.2k]
  ------------------
  385|  56.4k|                {
  386|  6.24k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 6.24k, False: 50.1k]
  ------------------
  387|  7.08k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 843, False: 55.5k]
  ------------------
  388|  7.08k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 198, False: 6.88k]
  ------------------
  389|  7.08k|                        {
  390|  5.16k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 5.16k, False: 1.92k]
  ------------------
  391|  5.74k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 580, False: 6.50k]
  ------------------
  392|  5.74k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 5.67k, False: 66]
  ------------------
  393|  5.67k|                                {
  394|  5.67k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 322, False: 5.35k]
  ------------------
  395|  5.67k|                                    {
  396|  1.30k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.30k, False: 4.37k]
  ------------------
  397|  1.37k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 67, False: 5.60k]
  ------------------
  398|  1.37k|                                            return OpCode::ADDD;
  399|       |
  400|    862|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 862, False: 4.81k]
  ------------------
  401|    963|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 101, False: 5.57k]
  ------------------
  402|    963|                                            return OpCode::ADDF;
  403|       |
  404|  1.99k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 1.99k, False: 3.67k]
  ------------------
  405|  2.06k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 5.60k]
  ------------------
  406|  2.06k|                                            return OpCode::ADDI;
  407|       |
  408|    887|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 887, False: 4.78k]
  ------------------
  409|    954|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 67, False: 5.60k]
  ------------------
  410|    954|                                            return OpCode::ADDU;
  411|  5.67k|                                    }
  412|  5.67k|                                }
  413|    388|                                break;
  414|       |
  415|  1.04k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 1.04k, False: 6.04k]
  ------------------
  416|  1.14k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 102, False: 6.98k]
  ------------------
  417|  1.14k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 1.07k, False: 66]
  |  Branch (417:37): [True: 1.01k, False: 132]
  |  Branch (417:53): [True: 1.01k, False: 66]
  ------------------
  418|  1.01k|                                {
  419|  1.01k|                                    return OpCode::ANDI;
  420|  1.01k|                                }
  421|       |
  422|    132|                                break;
  423|  7.08k|                        }
  424|    718|                        break;
  425|       |
  426|  3.10k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 3.10k, False: 53.3k]
  ------------------
  427|  7.26k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 4.15k, False: 52.2k]
  ------------------
  428|  7.26k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 477, False: 6.78k]
  ------------------
  429|  7.26k|                        {
  430|    170|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 170, False: 7.09k]
  ------------------
  431|    499|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 329, False: 6.93k]
  ------------------
  432|    499|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 428, False: 71]
  |  Branch (432:37): [True: 236, False: 263]
  |  Branch (432:53): [True: 236, False: 192]
  ------------------
  433|    236|                                {
  434|    236|                                    return OpCode::BEQZ;
  435|    236|                                }
  436|    263|                                break;
  437|       |
  438|  2.83k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 2.83k, False: 4.43k]
  ------------------
  439|  4.13k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 1.30k, False: 5.96k]
  ------------------
  440|  4.13k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 4.03k, False: 100]
  ------------------
  441|  4.03k|                                {
  442|  4.03k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 2.79k, False: 1.24k]
  ------------------
  443|  2.79k|                                    {
  444|  2.79k|                                        return OpCode::BFPF;
  445|  2.79k|                                    }
  446|  1.24k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 1.11k, False: 128]
  ------------------
  447|  1.11k|                                    {
  448|  1.11k|                                        return OpCode::BFPT;
  449|  1.11k|                                    }
  450|  4.03k|                                }
  451|    228|                                break;
  452|       |
  453|  2.06k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.06k, False: 5.19k]
  ------------------
  454|  2.15k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 7.17k]
  ------------------
  455|  2.15k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 1.92k, False: 232]
  |  Branch (455:37): [True: 952, False: 1.20k]
  |  Branch (455:53): [True: 952, False: 971]
  ------------------
  456|    952|                                {
  457|    952|                                    return OpCode::BNEZ;
  458|    952|                                }
  459|  7.26k|                        }
  460|  2.17k|                        break;
  461|       |
  462|  2.17k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 430, False: 56.0k]
  ------------------
  463|  4.13k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 3.70k, False: 52.7k]
  ------------------
  464|  4.13k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 3.27k, False: 864]
  |  Branch (464:29): [True: 2.28k, False: 1.84k]
  |  Branch (464:45): [True: 2.28k, False: 985]
  ------------------
  465|  2.28k|                        {
  466|  2.28k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 829, False: 1.46k]
  ------------------
  467|  2.28k|                            {
  468|     90|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 90, False: 2.19k]
  ------------------
  469|    156|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 66, False: 2.22k]
  ------------------
  470|    156|                                    return OpCode::DIVD;
  471|       |
  472|     93|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 93, False: 2.19k]
  ------------------
  473|    159|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 66, False: 2.22k]
  ------------------
  474|    159|                                    return OpCode::DIVF;
  475|       |
  476|     89|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 89, False: 2.20k]
  ------------------
  477|    411|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 322, False: 1.96k]
  ------------------
  478|    411|                                    return OpCode::DIVI;
  479|       |
  480|    122|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 122, False: 2.16k]
  ------------------
  481|    734|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 612, False: 1.67k]
  ------------------
  482|    734|                                    return OpCode::DIVU;
  483|  2.28k|                            }
  484|  2.28k|                        }
  485|  2.67k|                        break;
  486|       |
  487|  2.67k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 457, False: 55.9k]
  ------------------
  488|    734|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 277, False: 56.1k]
  ------------------
  489|    734|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 660, False: 74]
  |  Branch (489:29): [True: 523, False: 211]
  |  Branch (489:45): [True: 594, False: 66]
  |  Branch (489:61): [True: 523, False: 71]
  ------------------
  490|    523|                        {
  491|    523|                            return OpCode::HALT;
  492|    523|                        }
  493|    211|                        break;
  494|       |
  495|  1.02k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 1.02k, False: 55.4k]
  ------------------
  496|  3.06k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 2.04k, False: 54.3k]
  ------------------
  497|  3.06k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 2.91k, False: 154]
  |  Branch (497:29): [True: 1.09k, False: 1.97k]
  |  Branch (497:45): [True: 2.12k, False: 789]
  |  Branch (497:61): [True: 1.09k, False: 1.03k]
  ------------------
  498|  1.09k|                        {
  499|  1.09k|                            return OpCode::JALR;
  500|  1.09k|                        }
  501|  1.97k|                        break;
  502|       |
  503|  3.14k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 3.14k, False: 53.2k]
  ------------------
  504|  3.47k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 324, False: 56.1k]
  ------------------
  505|  3.47k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 2.34k, False: 1.12k]
  |  Branch (505:29): [True: 1.40k, False: 2.06k]
  |  Branch (505:45): [True: 1.40k, False: 945]
  ------------------
  506|  1.40k|                        {
  507|  1.40k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 284, False: 1.11k]
  ------------------
  508|    284|                            {
  509|    284|                                return OpCode::MOVD;
  510|    284|                            }
  511|  1.11k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 179, False: 940]
  ------------------
  512|    179|                            {
  513|    179|                                return OpCode::MOVF;
  514|    179|                            }
  515|  1.40k|                        }
  516|  2.06k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 997, False: 1.07k]
  |  Branch (516:34): [True: 829, False: 1.23k]
  |  Branch (516:50): [True: 931, False: 66]
  |  Branch (516:66): [True: 829, False: 102]
  ------------------
  517|    829|                        {
  518|    829|                            return OpCode::MULT;
  519|    829|                        }
  520|  2.17k|                        break;
  521|       |
  522|  19.8k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 19.8k, False: 36.5k]
  ------------------
  523|  20.9k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 1.05k, False: 55.3k]
  ------------------
  524|  20.9k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 188, False: 20.7k]
  ------------------
  525|  20.9k|                        {
  526|  3.31k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 3.31k, False: 17.6k]
  ------------------
  527|  3.57k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 261, False: 20.6k]
  ------------------
  528|  3.57k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 3.50k, False: 66]
  ------------------
  529|  3.50k|                                {
  530|  3.50k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 764, False: 2.74k]
  ------------------
  531|    764|                                    {
  532|    764|                                        return OpCode::SEQI;
  533|    764|                                    }
  534|  2.74k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 2.67k, False: 66]
  ------------------
  535|  2.67k|                                    {
  536|  2.67k|                                        return OpCode::SEQU;
  537|  2.67k|                                    }
  538|  3.50k|                                }
  539|    132|                                break;
  540|       |
  541|  2.37k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 2.37k, False: 18.5k]
  ------------------
  542|  3.41k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 1.04k, False: 19.8k]
  ------------------
  543|  3.41k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 1.68k, False: 1.73k]
  ------------------
  544|  1.68k|                                {
  545|  1.68k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 1.41k, False: 267]
  ------------------
  546|  1.41k|                                    {
  547|  1.41k|                                        return OpCode::SGEI;
  548|  1.41k|                                    }
  549|    267|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 201, False: 66]
  ------------------
  550|    201|                                    {
  551|    201|                                        return OpCode::SGEU;
  552|    201|                                    }
  553|  1.68k|                                }
  554|  1.73k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 1.66k, False: 67]
  ------------------
  555|  1.66k|                                {
  556|  1.66k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 157, False: 1.51k]
  ------------------
  557|    157|                                    {
  558|    157|                                        return OpCode::SGTI;
  559|    157|                                    }
  560|  1.51k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 796, False: 715]
  ------------------
  561|    796|                                    {
  562|    796|                                        return OpCode::SGTU;
  563|    796|                                    }
  564|  1.66k|                                }
  565|    848|                                break;
  566|       |
  567|  2.09k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 2.09k, False: 18.8k]
  ------------------
  568|  6.46k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 4.37k, False: 16.5k]
  ------------------
  569|  6.46k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 166, False: 6.30k]
  ------------------
  570|  6.46k|                                {
  571|    100|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 100, False: 6.36k]
  ------------------
  572|    232|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 132, False: 6.33k]
  ------------------
  573|    232|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 165, False: 67]
  ------------------
  574|    165|                                        {
  575|    165|                                            return OpCode::SLAI;
  576|    165|                                        }
  577|     67|                                        break;
  578|       |
  579|    557|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 557, False: 5.90k]
  ------------------
  580|  1.08k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 525, False: 5.94k]
  ------------------
  581|  1.08k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 311, False: 771]
  ------------------
  582|    311|                                        {
  583|    311|                                            return OpCode::SLEI;
  584|    311|                                        }
  585|    771|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 378, False: 393]
  ------------------
  586|    378|                                        {
  587|    378|                                            return OpCode::SLEU;
  588|    378|                                        }
  589|    393|                                        break;
  590|       |
  591|    393|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 212, False: 6.25k]
  ------------------
  592|  3.59k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 3.38k, False: 3.08k]
  ------------------
  593|  3.59k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.87k, False: 1.71k]
  ------------------
  594|  1.87k|                                        {
  595|  1.87k|                                            return OpCode::SLLI;
  596|  1.87k|                                        }
  597|  1.71k|                                        break;
  598|       |
  599|  1.71k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.25k, False: 5.21k]
  ------------------
  600|  1.39k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 138, False: 6.32k]
  ------------------
  601|  1.39k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.06k, False: 326]
  ------------------
  602|  1.06k|                                        {
  603|  1.06k|                                            return OpCode::SLTI;
  604|  1.06k|                                        }
  605|    326|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 247, False: 79]
  ------------------
  606|    247|                                        {
  607|    247|                                            return OpCode::SLTU;
  608|    247|                                        }
  609|     79|                                        break;
  610|  6.46k|                                }
  611|       |
  612|  2.61k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 191, False: 20.7k]
  ------------------
  613|  2.77k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 157, False: 20.7k]
  ------------------
  614|  2.77k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 741, False: 2.03k]
  ------------------
  615|    741|                                {
  616|    741|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 160, False: 581]
  ------------------
  617|    160|                                    {
  618|    160|                                        return OpCode::SNEI;
  619|    160|                                    }
  620|    581|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 163, False: 418]
  ------------------
  621|    163|                                    {
  622|    163|                                        return OpCode::SNEU;
  623|    163|                                    }
  624|    741|                                }
  625|  2.44k|                                break;
  626|       |
  627|  2.44k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 2.32k, False: 18.6k]
  ------------------
  628|  2.47k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 155, False: 20.7k]
  ------------------
  629|  2.47k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 428, False: 2.04k]
  |  Branch (629:37): [True: 342, False: 2.13k]
  |  Branch (629:53): [True: 342, False: 86]
  ------------------
  630|    342|                                {
  631|    342|                                    return OpCode::SRAI;
  632|    342|                                }
  633|  2.13k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 2.04k, False: 87]
  |  Branch (633:42): [True: 1.98k, False: 153]
  |  Branch (633:58): [True: 1.98k, False: 66]
  ------------------
  634|  1.98k|                                {
  635|  1.98k|                                    return OpCode::SRLI;
  636|  1.98k|                                }
  637|    153|                                break;
  638|       |
  639|  4.24k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 4.24k, False: 16.6k]
  ------------------
  640|  4.46k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 220, False: 20.7k]
  ------------------
  641|  4.46k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 4.39k, False: 66]
  ------------------
  642|  4.39k|                                {
  643|  4.39k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 98, False: 4.29k]
  ------------------
  644|  4.39k|                                    {
  645|    485|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 485, False: 3.91k]
  ------------------
  646|    551|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 4.32k]
  ------------------
  647|    551|                                            return OpCode::SUBD;
  648|       |
  649|    992|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 992, False: 3.40k]
  ------------------
  650|  1.09k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 98, False: 4.29k]
  ------------------
  651|  1.09k|                                            return OpCode::SUBF;
  652|       |
  653|    544|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 544, False: 3.85k]
  ------------------
  654|    610|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 4.32k]
  ------------------
  655|    610|                                            return OpCode::SUBI;
  656|       |
  657|  1.98k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 1.98k, False: 2.41k]
  ------------------
  658|  2.04k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 4.32k]
  ------------------
  659|  2.04k|                                            return OpCode::SUBU;
  660|  4.39k|                                    }
  661|  4.39k|                                }
  662|    164|                                break;
  663|  20.9k|                        }
  664|  3.93k|                        break;
  665|       |
  666|  3.93k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 357, False: 56.0k]
  ------------------
  667|    629|                    case 't':
  ------------------
  |  Branch (667:21): [True: 272, False: 56.1k]
  ------------------
  668|    629|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 537, False: 92]
  |  Branch (668:29): [True: 405, False: 224]
  |  Branch (668:45): [True: 471, False: 66]
  |  Branch (668:61): [True: 405, False: 66]
  ------------------
  669|    405|                        {
  670|    405|                            return OpCode::TRAP;
  671|    405|                        }
  672|    224|                        break;
  673|    737|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 737, False: 55.6k]
  ------------------
  674|  2.94k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 2.20k, False: 54.2k]
  ------------------
  675|  2.94k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 1.91k, False: 1.02k]
  |  Branch (675:29): [True: 1.56k, False: 1.37k]
  |  Branch (675:45): [True: 1.81k, False: 101]
  |  Branch (675:61): [True: 1.56k, False: 253]
  ------------------
  676|  1.56k|                        {
  677|  1.56k|                            return OpCode::XORI;
  678|  1.56k|                        }
  679|  1.37k|                        break;
  680|  56.4k|                }
  681|  21.6k|                break;
  682|  56.4k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  21.6k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 10.6k, False: 174k]
  ------------------
  686|  10.6k|                char c1 = token[0];
  687|  10.6k|                char c2 = token[1];
  688|  10.6k|                char c3 = token[2];
  689|  10.6k|                char c4 = token[3];
  690|  10.6k|                char c5 = token[4];
  691|       |
  692|  10.6k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 1.99k, False: 8.66k]
  ------------------
  693|  10.6k|                {
  694|  1.24k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 1.24k, False: 9.41k]
  ------------------
  695|  1.24k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 10.6k]
  ------------------
  696|  1.24k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 1.24k, False: 0]
  |  Branch (696:29): [True: 1.24k, False: 0]
  |  Branch (696:45): [True: 1.24k, False: 0]
  |  Branch (696:61): [True: 1.24k, False: 0]
  |  Branch (696:77): [True: 1.24k, False: 0]
  ------------------
  697|  1.24k|                        {
  698|  1.24k|                            return OpCode::ADDUI;
  699|  1.24k|                        }
  700|      0|                        break;
  701|       |
  702|  1.45k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.45k, False: 9.19k]
  ------------------
  703|  1.45k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 10.6k]
  ------------------
  704|  1.45k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.45k, False: 0]
  |  Branch (704:29): [True: 1.45k, False: 0]
  |  Branch (704:45): [True: 1.45k, False: 0]
  |  Branch (704:61): [True: 1.45k, False: 0]
  |  Branch (704:77): [True: 1.45k, False: 0]
  ------------------
  705|  1.45k|                        {
  706|  1.45k|                            return OpCode::DIVUI;
  707|  1.45k|                        }
  708|      0|                        break;
  709|       |
  710|  2.62k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 2.62k, False: 8.03k]
  ------------------
  711|  2.62k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 10.6k]
  ------------------
  712|  2.62k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 2.62k, False: 0]
  |  Branch (712:29): [True: 2.62k, False: 0]
  |  Branch (712:45): [True: 2.62k, False: 0]
  |  Branch (712:61): [True: 2.62k, False: 0]
  ------------------
  713|  2.62k|                        {
  714|  2.62k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 2.62k]
  ------------------
  715|  2.62k|                            {
  716|    112|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 112, False: 2.50k]
  ------------------
  717|    112|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 2.62k]
  ------------------
  718|    112|                                    return OpCode::MULTD;
  719|       |
  720|  1.47k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.47k, False: 1.14k]
  ------------------
  721|  1.47k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 2.62k]
  ------------------
  722|  1.47k|                                    return OpCode::MULTF;
  723|       |
  724|    366|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 366, False: 2.25k]
  ------------------
  725|    366|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 2.62k]
  ------------------
  726|    366|                                    return OpCode::MULTI;
  727|       |
  728|    664|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 664, False: 1.95k]
  ------------------
  729|    664|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 2.62k]
  ------------------
  730|    664|                                    return OpCode::MULTU;
  731|  2.62k|                            }
  732|  2.62k|                        }
  733|      0|                        break;
  734|       |
  735|  3.33k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 3.33k, False: 7.31k]
  ------------------
  736|  3.33k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 10.6k]
  ------------------
  737|  3.33k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 3.33k]
  ------------------
  738|  3.33k|                        {
  739|    878|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 878, False: 2.46k]
  ------------------
  740|    878|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 3.33k]
  ------------------
  741|    878|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 878, False: 0]
  |  Branch (741:37): [True: 878, False: 0]
  |  Branch (741:53): [True: 878, False: 0]
  |  Branch (741:69): [True: 878, False: 0]
  ------------------
  742|    878|                                {
  743|    878|                                    return OpCode::SEQUI;
  744|    878|                                }
  745|      0|                                break;
  746|       |
  747|  1.72k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 1.72k, False: 1.61k]
  ------------------
  748|  1.72k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 3.33k]
  ------------------
  749|  1.72k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 1.63k, False: 86]
  |  Branch (749:37): [True: 1.63k, False: 86]
  |  Branch (749:53): [True: 1.63k, False: 0]
  |  Branch (749:69): [True: 1.63k, False: 0]
  ------------------
  750|  1.63k|                                {
  751|  1.63k|                                    return OpCode::SGEUI;
  752|  1.63k|                                }
  753|     86|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:42): [True: 86, False: 0]
  |  Branch (753:58): [True: 86, False: 0]
  |  Branch (753:74): [True: 86, False: 0]
  ------------------
  754|     86|                                {
  755|     86|                                    return OpCode::SGTUI;
  756|     86|                                }
  757|      0|                                break;
  758|       |
  759|    471|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 471, False: 2.86k]
  ------------------
  760|    471|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 3.33k]
  ------------------
  761|    471|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 366, False: 105]
  |  Branch (761:37): [True: 366, False: 105]
  |  Branch (761:53): [True: 366, False: 0]
  |  Branch (761:69): [True: 366, False: 0]
  ------------------
  762|    366|                                {
  763|    366|                                    return OpCode::SLEUI;
  764|    366|                                }
  765|    105|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 105, False: 0]
  |  Branch (765:42): [True: 105, False: 0]
  |  Branch (765:58): [True: 105, False: 0]
  |  Branch (765:74): [True: 105, False: 0]
  ------------------
  766|    105|                                {
  767|    105|                                    return OpCode::SLTUI;
  768|    105|                                }
  769|      0|                                break;
  770|       |
  771|    170|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 170, False: 3.16k]
  ------------------
  772|    170|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 3.33k]
  ------------------
  773|    170|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 170, False: 0]
  |  Branch (773:37): [True: 170, False: 0]
  |  Branch (773:53): [True: 170, False: 0]
  |  Branch (773:69): [True: 170, False: 0]
  ------------------
  774|    170|                                {
  775|    170|                                    return OpCode::SNEUI;
  776|    170|                                }
  777|      0|                                break;
  778|       |
  779|     96|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 96, False: 3.24k]
  ------------------
  780|     96|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 3.33k]
  ------------------
  781|     96|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 96, False: 0]
  |  Branch (781:37): [True: 96, False: 0]
  |  Branch (781:53): [True: 96, False: 0]
  |  Branch (781:69): [True: 96, False: 0]
  ------------------
  782|     96|                                {
  783|     96|                                    return OpCode::SUBUI;
  784|     96|                                }
  785|      0|                                break;
  786|  3.33k|                        }
  787|       |
  788|      0|                        break;
  789|  10.6k|                }
  790|       |
  791|  1.99k|                break;
  792|  10.6k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  1.99k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 1.25k, False: 183k]
  ------------------
  796|  1.25k|                char c1 = token[0];
  797|  1.25k|                char c2 = token[1];
  798|  1.25k|                char c3 = token[2];
  799|  1.25k|                char c4 = token[3];
  800|  1.25k|                char c5 = token[4];
  801|  1.25k|                char c6 = token[5];
  802|       |
  803|  1.25k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 735, False: 521]
  |  Branch (803:21): [True: 735, False: 521]
  |  Branch (803:37): [True: 735, False: 0]
  |  Branch (803:53): [True: 735, False: 0]
  ------------------
  804|    735|                {
  805|    735|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 735]
  ------------------
  806|    735|                    {
  807|    361|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 361, False: 374]
  ------------------
  808|    361|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 735]
  ------------------
  809|    361|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 361, False: 0]
  ------------------
  810|    361|                            {
  811|    361|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 80, False: 281]
  ------------------
  812|     80|                                {
  813|     80|                                    return OpCode::CVTD2F;
  814|     80|                                }
  815|    281|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 281, False: 0]
  ------------------
  816|    281|                                {
  817|    281|                                    return OpCode::CVTD2I;
  818|    281|                                }
  819|    361|                            }
  820|      0|                            break;
  821|       |
  822|    184|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 184, False: 551]
  ------------------
  823|    184|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 735]
  ------------------
  824|    184|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 184, False: 0]
  ------------------
  825|    184|                            {
  826|    184|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 81, False: 103]
  ------------------
  827|     81|                                {
  828|     81|                                    return OpCode::CVTF2D;
  829|     81|                                }
  830|    103|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 103, False: 0]
  ------------------
  831|    103|                                {
  832|    103|                                    return OpCode::CVTF2I;
  833|    103|                                }
  834|    184|                            }
  835|      0|                            break;
  836|       |
  837|    190|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 190, False: 545]
  ------------------
  838|    190|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 735]
  ------------------
  839|    190|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 190, False: 0]
  ------------------
  840|    190|                            {
  841|    190|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 110, False: 80]
  ------------------
  842|    110|                                {
  843|    110|                                    return OpCode::CVTI2D;
  844|    110|                                }
  845|     80|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 80, False: 0]
  ------------------
  846|     80|                                {
  847|     80|                                    return OpCode::CVTI2F;
  848|     80|                                }
  849|    190|                            }
  850|    735|                    }
  851|    735|                }
  852|    521|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 161, False: 360]
  |  Branch (852:26): [True: 161, False: 360]
  |  Branch (852:42): [True: 161, False: 0]
  |  Branch (852:58): [True: 161, False: 0]
  |  Branch (852:74): [True: 161, False: 0]
  ------------------
  853|    521|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 161, False: 0]
  |  Branch (853:42): [True: 161, False: 0]
  ------------------
  854|    161|                {
  855|    161|                    return OpCode::MULTUI;
  856|    161|                }
  857|    360|                break;
  858|  1.25k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  1.11k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 1.11k, False: 183k]
  ------------------
  862|  1.11k|                char c1 = token[0];
  863|  1.11k|                char c2 = token[1];
  864|  1.11k|                char c3 = token[2];
  865|  1.11k|                char c4 = token[3];
  866|  1.11k|                char c5 = token[4];
  867|  1.11k|                char c6 = token[5];
  868|  1.11k|                char c7 = token[6];
  869|       |
  870|  1.11k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 995, False: 120]
  |  Branch (870:21): [True: 995, False: 120]
  |  Branch (870:37): [True: 995, False: 0]
  |  Branch (870:53): [True: 995, False: 0]
  ------------------
  871|    995|                {
  872|    995|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 741, False: 254]
  |  Branch (872:25): [True: 741, False: 254]
  |  Branch (872:41): [True: 741, False: 0]
  |  Branch (872:54): [True: 741, False: 0]
  |  Branch (872:70): [True: 741, False: 0]
  ------------------
  873|    741|                    {
  874|    741|                        return OpCode::MOVI2FP;
  875|    741|                    }
  876|    254|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 254, False: 0]
  |  Branch (876:30): [True: 254, False: 0]
  |  Branch (876:46): [True: 254, False: 0]
  |  Branch (876:62): [True: 254, False: 0]
  |  Branch (876:75): [True: 254, False: 0]
  ------------------
  877|    254|                    {
  878|    254|                        return OpCode::MOVFP2I;
  879|    254|                    }
  880|    995|                }
  881|    120|                break;
  882|  1.11k|            }
  883|       |
  884|  11.3k|            default: {
  ------------------
  |  Branch (884:13): [True: 11.3k, False: 173k]
  ------------------
  885|  11.3k|                break;
  886|  1.11k|            }
  887|   184k|        }
  888|       |
  889|       |        // None found
  890|  65.5k|        return OpCode::NONE;
  891|   184k|    }
_ZN3dlx3iceEcc:
   17|   289k|    {
   18|   289k|        constexpr const char diff = 'a' - 'A';
   19|   289k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 176k, False: 113k]
  |  Branch (19:28): [True: 44.2k, False: 68.7k]
  ------------------
   20|   289k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   195k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  1.92k|    {
  193|  1.92k|        ParseError err;
  194|       |
  195|  1.92k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  1.92k|        err.m_LineNumber                           = line_number;
  197|  1.92k|        err.m_Column                               = column;
  198|  1.92k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  1.92k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  1.92k|        return err;
  202|  1.92k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  1.92k|    {
  207|  1.92k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  1.92k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  1.92k|                                                         actual_type);
  210|  1.92k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    147|    {
  216|    147|        ParseError err;
  217|       |
  218|    147|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    147|        err.m_LineNumber        = line_number;
  220|    147|        err.m_Column            = column;
  221|    147|        err.invalid_number.text = text;
  222|       |
  223|    147|        return err;
  224|    147|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    147|    {
  228|    147|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    147|                                                token.GetColumn().unsafe(), token.GetText());
  230|    147|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      7|    {
  235|      7|        ParseError err;
  236|       |
  237|      7|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      7|        err.m_LineNumber = line_number;
  239|      7|        err.m_Column     = column;
  240|       |
  241|      7|        return err;
  242|      7|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      7|    {
  247|      7|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      7|                                                                     token.GetColumn().unsafe());
  249|      7|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  54.7k|    {
  255|  54.7k|        ParseError err;
  256|       |
  257|  54.7k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  54.7k|        err.m_LineNumber                   = line_number;
  259|  54.7k|        err.m_Column                       = column;
  260|  54.7k|        err.unexpected_token.expected_type = expected_type;
  261|  54.7k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  54.7k|        return err;
  264|  54.7k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  54.7k|    {
  269|  54.7k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  54.7k|                                                  token.GetColumn().unsafe(), expected_type,
  271|  54.7k|                                                  token.GetType());
  272|  54.7k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  1.41k|    {
  277|  1.41k|        ParseError err;
  278|       |
  279|  1.41k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  1.41k|        err.m_LineNumber                   = line_number;
  281|  1.41k|        err.m_Column                       = column;
  282|  1.41k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  1.41k|        return err;
  285|  1.41k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|    556|    {
  289|    556|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|    556|                                                    token.GetColumn().unsafe(), token.GetText());
  291|    556|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  45.8k|    {
  296|  45.8k|        ParseError err;
  297|       |
  298|  45.8k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  45.8k|        err.m_LineNumber                       = line_number;
  300|  45.8k|        err.m_Column                           = column;
  301|  45.8k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  45.8k|        return err;
  304|  45.8k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  45.8k|    {
  309|  45.8k|        return ConstructInvalidLabelIdentifierParseError(
  310|  45.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  45.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  2.29k|    {
  317|  2.29k|        ParseError err;
  318|       |
  319|  2.29k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  2.29k|        err.m_LineNumber                     = line_number;
  321|  2.29k|        err.m_Column                         = column;
  322|  2.29k|        err.label_already_defined.label_name = label_name;
  323|  2.29k|        err.label_already_defined.at_line    = at_line;
  324|  2.29k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  2.29k|        return err;
  327|  2.29k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  2.29k|    {
  332|  2.29k|        return ConstructLabelAlreadyDefinedParseError(
  333|  2.29k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  2.29k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  2.29k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|  72.6k|    {
  340|  72.6k|        ParseError err;
  341|       |
  342|  72.6k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|  72.6k|        err.m_LineNumber = line_number;
  344|  72.6k|        err.m_Column     = column;
  345|       |
  346|  72.6k|        return err;
  347|  72.6k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|  72.6k|    {
  352|  72.6k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|  72.6k|                                                        token.GetColumn().unsafe());
  354|  72.6k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  15.4k|    {
  360|  15.4k|        ParseError err;
  361|       |
  362|  15.4k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  15.4k|        err.m_LineNumber               = line_number;
  364|  15.4k|        err.m_Column                   = column;
  365|  15.4k|        err.too_few_arguments.required = required;
  366|  15.4k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  15.4k|        return err;
  369|  15.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  15.4k|    {
  374|  15.4k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  15.4k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  15.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.08k|    {
  381|  1.08k|        ParseError err;
  382|       |
  383|  1.08k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.08k|        err.m_LineNumber           = line_number;
  385|  1.08k|        err.m_Column               = column;
  386|  1.08k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.08k|        return err;
  389|  1.08k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.08k|    {
  393|  1.08k|        return ConstructEmptyLabelParseError(
  394|  1.08k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.08k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 908, False: 179]
  ------------------
  396|    908|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.08k|                        token.GetText());
  398|  1.08k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    153|    {
  403|    153|        ParseError err;
  404|       |
  405|    153|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    153|        err.m_LineNumber = line_number;
  407|    153|        err.m_Column     = column;
  408|       |
  409|    153|        return err;
  410|    153|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    153|    {
  414|    153|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    153|                                               token.GetColumn().unsafe());
  416|    153|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   195k|    {
   19|   195k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   195k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  4.53k|    {
  182|  4.53k|        ParsedProgram program;
  183|       |
  184|  4.53k|        program.m_Tokens = tokens;
  185|       |
  186|  4.53k|        phi::boolean line_has_instruction{false};
  187|  4.53k|        phi::usize   label_count{0u};
  188|       |
  189|   443k|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 439k, False: 4.53k]
  ------------------
  190|   439k|        {
  191|   439k|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|   439k|            switch (current_token.GetType())
  196|   439k|            {
  197|       |                // Ignore comments
  198|  67.6k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 67.6k, False: 371k]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  67.6k|                    break;
  201|       |
  202|   164k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 164k, False: 274k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   164k|                    line_has_instruction = false;
  205|   164k|                    break;
  206|       |
  207|  51.0k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 51.0k, False: 388k]
  ------------------
  208|  51.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 3.43k, False: 47.6k]
  ------------------
  209|  3.43k|                    {
  210|  3.43k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  3.43k|                                current_token, Token::Type::NewLine));
  212|  3.43k|                        break;
  213|  3.43k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  47.6k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 41.2k, False: 6.38k]
  ------------------
  218|  41.2k|                    {
  219|  41.2k|                        program.AddParseError(
  220|  41.2k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  41.2k|                        break;
  222|  41.2k|                    }
  223|       |
  224|  6.38k|                    std::string_view label_name = current_token.GetText();
  225|  6.38k|                    label_name.remove_suffix(1);
  226|       |
  227|  6.38k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 859, False: 5.52k]
  ------------------
  228|    859|                    {
  229|    859|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|    859|                                current_token.GetLineNumber().unsafe(),
  231|    859|                                current_token.GetColumn().unsafe(), label_name));
  232|    859|                        break;
  233|    859|                    }
  234|       |
  235|  5.52k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 1.61k, False: 3.91k]
  ------------------
  236|  1.61k|                    {
  237|  1.61k|                        program.AddParseError(
  238|  1.61k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  1.61k|                        break;
  240|  1.61k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  3.91k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 2.29k, False: 1.61k]
  ------------------
  244|  2.29k|                    {
  245|       |                        // Find first defintions of label
  246|  2.29k|                        const Token* first_label_definition =
  247|  2.29k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  2.29k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  2.29k|                                    {
  250|  2.29k|                                        std::string_view token_label_name = t.GetText();
  251|  2.29k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  2.29k|                                        if (token_label_name == label_name)
  254|  2.29k|                                        {
  255|  2.29k|                                            return true;
  256|  2.29k|                                        }
  257|  2.29k|                                    }
  258|       |
  259|  2.29k|                                    return false;
  260|  2.29k|                                });
  261|       |
  262|  2.29k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  2.29k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  2.29k|                                current_token, *first_label_definition));
  266|  2.29k|                        break;
  267|  2.29k|                    }
  268|       |
  269|  1.61k|                    program.m_JumpData[label_name] =
  270|  1.61k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  1.61k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  1.61k|                    break;
  277|  3.91k|                }
  278|       |
  279|   113k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 113k, False: 325k]
  ------------------
  280|   113k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 72.6k, False: 41.3k]
  ------------------
  281|  72.6k|                    {
  282|  72.6k|                        program.AddParseError(
  283|  72.6k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|  72.6k|                        break;
  285|  72.6k|                    }
  286|       |
  287|  41.3k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  41.3k|                    PHI_ASSERT(current_token.HasHint());
  291|  41.3k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  41.3k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  41.3k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  41.3k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  41.3k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  41.3k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  41.3k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  41.3k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  41.3k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|  65.1k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 54.2k, False: 10.9k]
  ------------------
  313|  54.2k|                    {
  314|       |                        // Get next token
  315|  54.2k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 174, False: 54.0k]
  ------------------
  316|    174|                        {
  317|    174|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    174|                                    current_token, number_of_argument_required.unsafe(),
  319|    174|                                    argument_num.unsafe()));
  320|    174|                            break;
  321|    174|                        }
  322|       |
  323|  54.0k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|  54.0k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 6.14k, False: 47.8k]
  ------------------
  327|  6.14k|                        {
  328|  6.14k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 153, False: 5.99k]
  ------------------
  329|    153|                            {
  330|    153|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    153|                            }
  332|       |
  333|  6.14k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  6.14k|                            continue;
  336|  6.14k|                        }
  337|       |
  338|  47.8k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 15.3k, False: 32.5k]
  ------------------
  339|  15.3k|                        {
  340|  15.3k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  15.3k|                                    token, number_of_argument_required.unsafe(),
  342|  15.3k|                                    argument_num.unsafe()));
  343|  15.3k|                            break;
  344|  15.3k|                        }
  345|       |
  346|  32.5k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  32.5k|                                parse_instruction_argument(
  348|  32.5k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  32.5k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 14.8k, False: 17.7k]
  ------------------
  350|  14.8k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  14.8k|                            break;
  353|  14.8k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  17.7k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  17.7k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  17.7k|                        argument_num++;
  360|  17.7k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  17.7k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  41.3k|                    program.m_Instructions.emplace_back(instruction);
  368|  41.3k|                    line_has_instruction = true;
  369|  41.3k|                    break;
  370|   113k|                }
  371|       |
  372|  42.0k|                default:
  ------------------
  |  Branch (372:17): [True: 42.0k, False: 397k]
  ------------------
  373|  42.0k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  42.0k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 26.4k, False: 15.6k]
  ------------------
  375|  26.4k|                    {
  376|  26.4k|                        expected_token_type = Token::Type::NewLine;
  377|  26.4k|                    }
  378|       |
  379|  42.0k|                    program.AddParseError(
  380|  42.0k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  42.0k|                    break;
  382|   439k|            }
  383|   439k|        }
  384|       |
  385|       |        // Check for empty labels
  386|  4.53k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 192, False: 4.34k]
  ------------------
  387|    192|        {
  388|  2.04k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 1.85k, False: 192]
  ------------------
  389|  1.85k|            {
  390|  1.85k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  1.85k|                const Token& token = *it;
  393|  1.85k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.08k, False: 767]
  ------------------
  394|  1.08k|                {
  395|  1.08k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.08k|                    --label_count;
  397|  1.08k|                }
  398|  1.85k|            }
  399|    192|        }
  400|       |
  401|  4.53k|        return program;
  402|  4.53k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  4.53k|    {
  406|  4.53k|        TokenStream tokens = Tokenize(source);
  407|  4.53k|        return Parse(tokens);
  408|  4.53k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  32.5k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  32.5k|        switch (token.GetType())
   38|  32.5k|        {
   39|  1.51k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 1.51k, False: 31.0k]
  ------------------
   40|  1.51k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 118, False: 1.39k]
  ------------------
   41|  1.51k|                                          ArgumentType::AddressDisplacement))
   42|    118|                {
   43|    118|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    118|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    118|                    return {};
   47|    118|                }
   48|       |
   49|       |                // Get address displacement
   50|  1.39k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  1.39k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  1.39k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 7, False: 1.38k]
  ------------------
   55|      7|                {
   56|      7|                    program.AddParseError(
   57|      7|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      7|                    return {};
   59|      7|                }
   60|       |
   61|  1.38k|                auto         it           = tokens.current_position();
   62|  1.38k|                const Token& first_token  = tokens.consume();
   63|  1.38k|                const Token& second_token = tokens.consume();
   64|  1.38k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  1.38k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 1.38k, False: 0]
  ------------------
   67|  1.38k|                {
   68|  1.38k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  1.38k|                            first_token, Token::Type::OpenBracket));
   70|  1.38k|                    return {};
   71|  1.38k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  9.28k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 9.28k, False: 23.2k]
  ------------------
   98|  9.28k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 128, False: 9.15k]
  ------------------
   99|    128|                {
  100|    128|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    128|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    128|                    return {};
  103|    128|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  9.15k|                return ConstructInstructionArgumentRegisterInt(
  109|  9.15k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  9.28k|            }
  111|  6.04k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 6.04k, False: 26.5k]
  ------------------
  112|  6.04k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 999, False: 5.04k]
  ------------------
  113|    999|                {
  114|    999|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|    999|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|    999|                    return {};
  117|    999|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  5.04k|                return ConstructInstructionArgumentRegisterFloat(
  123|  5.04k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  6.04k|            }
  125|    556|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 556, False: 32.0k]
  ------------------
  126|    556|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|    556|                return {};
  129|  6.04k|            }
  130|  4.60k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 4.60k, False: 27.9k]
  ------------------
  131|       |                // Parse as Label
  132|  4.60k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 258, False: 4.34k]
  ------------------
  133|    258|                {
  134|    258|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|    258|                            token, expected_argument_type, ArgumentType::Label));
  136|    258|                    return {};
  137|    258|                }
  138|       |
  139|  4.34k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 4.34k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  4.34k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 3.02k, False: 1.32k]
  ------------------
  146|  3.02k|                {
  147|  3.02k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  3.02k|                    return {};
  149|  3.02k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  1.32k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  4.34k|            }
  155|  2.77k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 2.77k, False: 29.7k]
  ------------------
  156|  2.77k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 422, False: 2.35k]
  ------------------
  157|    422|                {
  158|    422|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    422|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    422|                    return {};
  161|    422|                }
  162|       |
  163|  2.35k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.20k, False: 147]
  ------------------
  164|  2.20k|                {
  165|  2.20k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.20k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.20k|                }
  168|       |
  169|    147|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    147|                return {};
  171|  2.35k|            }
  172|       |
  173|  7.80k|            default:
  ------------------
  |  Branch (173:13): [True: 7.80k, False: 24.7k]
  ------------------
  174|  7.80k|                program.AddParseError(
  175|  7.80k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  7.80k|                return {};
  177|  32.5k|        }
  178|  32.5k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  23.8k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  23.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 8.17k, False: 15.6k]
  ------------------
  249|  8.17k|                                    {
  250|  8.17k|                                        std::string_view token_label_name = t.GetText();
  251|  8.17k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  8.17k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 2.29k, False: 5.87k]
  ------------------
  254|  2.29k|                                        {
  255|  2.29k|                                            return true;
  256|  2.29k|                                        }
  257|  8.17k|                                    }
  258|       |
  259|  21.5k|                                    return false;
  260|  23.8k|                                });

_ZN3dlx9ProcessorC2Ev:
   64|      1|    {
   65|       |        // Mark R0 as ready only
   66|      1|        m_IntRegisters[0].SetReadOnly(true);
   67|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   70|  2.81M|    {
   71|  2.81M|        PHI_ASSERT(id != IntRegisterID::None);
   72|  2.81M|        phi::size_t id_value = phi::to_underlying(id);
   73|       |
   74|  2.81M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   75|       |
   76|  2.81M|        return m_IntRegisters[id_value];
   77|  2.81M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   81|  4.03M|    {
   82|  4.03M|        PHI_ASSERT(id != IntRegisterID::None);
   83|  4.03M|        phi::size_t id_value = phi::to_underlying(id);
   84|       |
   85|  4.03M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   86|       |
   87|  4.03M|        return m_IntRegisters[id_value];
   88|  4.03M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   91|  2.52M|    {
   92|  2.52M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   93|  2.52M|                                             RegisterAccessType::Signed),
   94|  2.52M|                   "Mismatch for instruction access type");
   95|       |
   96|  2.52M|        const phi::size_t id_value = phi::to_underlying(id);
   97|       |
   98|  2.52M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   99|  2.52M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  100|  2.52M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (100:13): [True: 1.75M, False: 773k]
  ------------------
  101|  2.52M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (101:13): [True: 679k, False: 1.07M]
  ------------------
  102|   679k|        {
  103|   679k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   679k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  104|   679k|        }
  105|       |
  106|  2.52M|        return GetIntRegister(id).GetSignedValue();
  107|  2.52M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  110|  1.50M|    {
  111|  1.50M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  112|  1.50M|                                             RegisterAccessType::Unsigned),
  113|  1.50M|                   "Mismatch for instruction access type");
  114|       |
  115|  1.50M|        const phi::size_t id_value = phi::to_underlying(id);
  116|       |
  117|  1.50M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  118|  1.50M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  119|  1.50M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (119:13): [True: 814k, False: 692k]
  ------------------
  120|  1.50M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (120:13): [True: 503k, False: 310k]
  ------------------
  121|   503k|        {
  122|   503k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   503k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  123|   503k|        }
  124|       |
  125|  1.50M|        return GetIntRegister(id).GetUnsignedValue();
  126|  1.50M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  129|  1.62M|    {
  130|  1.62M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  131|  1.62M|                                             RegisterAccessType::Signed),
  132|  1.62M|                   "Mismatch for instruction access type");
  133|       |
  134|  1.62M|        IntRegister& reg = GetIntRegister(id);
  135|       |
  136|  1.62M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (136:13): [True: 399k, False: 1.22M]
  ------------------
  137|   399k|        {
  138|   399k|            return;
  139|   399k|        }
  140|       |
  141|  1.22M|        reg.SetSignedValue(value);
  142|       |
  143|  1.22M|        const phi::size_t id_value = phi::to_underlying(id);
  144|       |
  145|  1.22M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  146|  1.22M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  147|  1.22M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  150|  1.18M|    {
  151|  1.18M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  152|  1.18M|                                             RegisterAccessType::Unsigned),
  153|  1.18M|                   "Mismatch for instruction access type");
  154|       |
  155|  1.18M|        IntRegister& reg = GetIntRegister(id);
  156|       |
  157|  1.18M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (157:13): [True: 227k, False: 955k]
  ------------------
  158|   227k|        {
  159|   227k|            return;
  160|   227k|        }
  161|       |
  162|   955k|        reg.SetUnsignedValue(value);
  163|       |
  164|   955k|        const phi::size_t id_value = phi::to_underlying(id);
  165|       |
  166|   955k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  167|   955k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  168|   955k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  171|  1.95M|    {
  172|  1.95M|        PHI_ASSERT(id != FloatRegisterID::None);
  173|  1.95M|        const phi::size_t id_value = phi::to_underlying(id);
  174|       |
  175|  1.95M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  176|       |
  177|  1.95M|        return m_FloatRegisters[id_value];
  178|  1.95M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  182|   618k|    {
  183|   618k|        PHI_ASSERT(id != FloatRegisterID::None);
  184|   618k|        const phi::size_t id_value = phi::to_underlying(id);
  185|       |
  186|   618k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  187|       |
  188|   618k|        return m_FloatRegisters[id_value];
  189|   618k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  192|   618k|    {
  193|   618k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  194|   618k|                                             RegisterAccessType::Float),
  195|   618k|                   "Mismatch for instruction access type");
  196|       |
  197|   618k|        const phi::size_t id_value = phi::to_underlying(id);
  198|       |
  199|   618k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  200|   618k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  201|   618k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (201:13): [True: 601k, False: 17.5k]
  ------------------
  202|   618k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (202:13): [True: 234k, False: 366k]
  ------------------
  203|   234k|        {
  204|       |            /*
  205|       |            DLX_WARN("Mismatch for register value type");
  206|       |            */
  207|   234k|        }
  208|       |
  209|   618k|        const FloatRegister& reg = GetFloatRegister(id);
  210|       |
  211|   618k|        return reg.GetValue();
  212|   618k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  215|   795k|    {
  216|   795k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  217|   795k|                                             RegisterAccessType::Double),
  218|   795k|                   "Mismatch for instruction access type");
  219|       |
  220|   795k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (220:13): [True: 13, False: 795k]
  ------------------
  221|     13|        {
  222|     13|            Raise(Exception::MisalignedRegisterAccess);
  223|     13|            return {0.0};
  224|     13|        }
  225|       |
  226|   795k|        const phi::size_t id_value = phi::to_underlying(id);
  227|       |
  228|   795k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  229|   795k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  230|   795k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (230:13): [True: 780k, False: 15.1k]
  ------------------
  231|   795k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (231:13): [True: 500k, False: 280k]
  ------------------
  232|   500k|        {
  233|   500k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   500k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  234|   500k|        }
  235|       |
  236|   795k|        const FloatRegisterValueType register_value_type_high =
  237|   795k|                m_FloatRegistersValueTypes[id_value + 1u];
  238|   795k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (238:13): [True: 780k, False: 15.1k]
  ------------------
  239|   795k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (239:13): [True: 130, False: 780k]
  ------------------
  240|    130|        {
  241|    130|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|    130|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  242|    130|        }
  243|       |
  244|   795k|        const FloatRegister& first_reg = GetFloatRegister(id);
  245|   795k|        const FloatRegister& second_reg =
  246|   795k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  247|       |
  248|   795k|        const float first_value  = first_reg.GetValue().unsafe();
  249|   795k|        const float second_value = second_reg.GetValue().unsafe();
  250|       |
  251|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  252|   795k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  253|       |
  254|   795k|        const std::uint32_t first_value_bits =
  255|   795k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  256|   795k|        const std::uint32_t second_value_bits =
  257|   795k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  258|       |
  259|   795k|        std::uint64_t final_value_bits =
  260|   795k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  261|       |
  262|   795k|        return *reinterpret_cast<double*>(&final_value_bits);
  263|       |
  264|   795k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  265|   795k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  268|   184k|    {
  269|   184k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  270|   184k|                                             RegisterAccessType::Float),
  271|   184k|                   "Mismatch for instruction access type");
  272|       |
  273|   184k|        FloatRegister& reg = GetFloatRegister(id);
  274|       |
  275|   184k|        reg.SetValue(value);
  276|       |
  277|   184k|        const phi::size_t id_value = phi::to_underlying(id);
  278|       |
  279|   184k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  280|   184k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  281|   184k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  284|  88.7k|    {
  285|  88.7k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  286|  88.7k|                                             RegisterAccessType::Double),
  287|  88.7k|                   "Mismatch for instruction access type");
  288|       |
  289|  88.7k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (289:13): [True: 2, False: 88.7k]
  ------------------
  290|      2|        {
  291|      2|            Raise(Exception::MisalignedRegisterAccess);
  292|      2|            return;
  293|      2|        }
  294|       |
  295|  88.7k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  296|  88.7k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  297|       |
  298|  88.7k|        double              value_raw  = value.unsafe();
  299|  88.7k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  300|       |
  301|  88.7k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  302|  88.7k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  303|       |
  304|  88.7k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  305|  88.7k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  306|       |
  307|  88.7k|        FloatRegister& first_reg = GetFloatRegister(id);
  308|  88.7k|        FloatRegister& second_reg =
  309|  88.7k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  310|       |
  311|  88.7k|        first_reg.SetValue(first_value);
  312|  88.7k|        second_reg.SetValue(second_value);
  313|       |
  314|  88.7k|        const phi::size_t id_value = phi::to_underlying(id);
  315|       |
  316|  88.7k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  317|  88.7k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  318|  88.7k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  319|  88.7k|    }
_ZN3dlx9Processor7GetFPSREv:
  322|   512k|    {
  323|   512k|        return m_FPSR;
  324|   512k|    }
_ZNK3dlx9Processor7GetFPSREv:
  327|   870k|    {
  328|   870k|        return m_FPSR;
  329|   870k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  332|   870k|    {
  333|   870k|        const StatusRegister& status_reg = GetFPSR();
  334|       |
  335|   870k|        return status_reg.Get();
  336|   870k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  339|   512k|    {
  340|   512k|        StatusRegister& status_reg = GetFPSR();
  341|       |
  342|   512k|        status_reg.SetStatus(value);
  343|   512k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  346|  4.91M|    {
  347|  4.91M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  348|       |
  349|  4.91M|        inst.Execute(*this);
  350|  4.91M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  353|  4.53k|    {
  354|  4.53k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (354:13): [True: 3.55k, False: 987]
  ------------------
  355|  3.55k|        {
  356|  3.55k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  3.55k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  357|  3.55k|            return false;
  358|  3.55k|        }
  359|       |
  360|    987|        m_CurrentProgram = &program;
  361|       |
  362|    987|        m_ProgramCounter               = 0u;
  363|    987|        m_Halted                       = false;
  364|    987|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  365|    987|        m_LastRaisedException          = Exception::None;
  366|    987|        m_CurrentStepCount             = 0u;
  367|       |
  368|    987|        return true;
  369|  4.53k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  373|  1.45M|    {
  374|  1.45M|        return m_CurrentProgram;
  375|  1.45M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  378|  4.91M|    {
  379|       |        // No nothing when no program is loaded
  380|  4.91M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (380:13): [True: 0, False: 4.91M]
  ------------------
  381|      0|        {
  382|      0|            return;
  383|      0|        }
  384|       |
  385|       |        // Halt if there are no instruction to execute
  386|  4.91M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (386:13): [True: 74, False: 4.91M]
  ------------------
  387|     74|        {
  388|     74|            m_Halted                       = true;
  389|     74|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  390|     74|        }
  391|       |
  392|       |        // Do nothing when processor is halted
  393|  4.91M|        if (m_Halted)
  ------------------
  |  Branch (393:13): [True: 74, False: 4.91M]
  ------------------
  394|     74|        {
  395|     74|            return;
  396|     74|        }
  397|       |
  398|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  399|  4.91M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  400|       |
  401|       |        // Get current instruction pointed to by the program counter
  402|  4.91M|        const auto& current_instruction =
  403|  4.91M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  404|       |
  405|       |        // Execute current instruction
  406|  4.91M|        ExecuteInstruction(current_instruction);
  407|       |
  408|       |        // Stop executing if the last instruction halted the processor
  409|  4.91M|        if (m_Halted)
  ------------------
  |  Branch (409:13): [True: 89, False: 4.91M]
  ------------------
  410|     89|        {
  411|     89|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  412|     89|            return;
  413|     89|        }
  414|       |
  415|  4.91M|        m_ProgramCounter = m_NextProgramCounter;
  416|       |
  417|  4.91M|        ++m_CurrentStepCount;
  418|       |
  419|  4.91M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (419:13): [True: 824, False: 4.91M]
  |  Branch (419:14): [True: 4.91M, False: 0]
  |  Branch (419:42): [True: 491, False: 4.91M]
  ------------------
  420|  4.91M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (420:13): [True: 333, False: 4.91M]
  ------------------
  421|    824|        {
  422|    824|            m_Halted                       = true;
  423|    824|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  424|    824|        }
  425|  4.91M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  428|    987|    {
  429|       |        // Do nothing when no program is loaded
  430|    987|        if (!m_CurrentProgram)
  ------------------
  |  Branch (430:13): [True: 0, False: 987]
  ------------------
  431|      0|        {
  432|      0|            return;
  433|      0|        }
  434|       |
  435|    987|        m_ProgramCounter               = 0u;
  436|    987|        m_Halted                       = false;
  437|    987|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  438|    987|        m_LastRaisedException          = Exception::None;
  439|    987|        m_CurrentStepCount             = 0u;
  440|       |
  441|  4.91M|        while (!m_Halted)
  ------------------
  |  Branch (441:16): [True: 4.91M, False: 987]
  ------------------
  442|  4.91M|        {
  443|  4.91M|            ExecuteStep();
  444|  4.91M|        }
  445|       |
  446|    987|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  447|    987|                   "RegisterAccessType was not reset correctly");
  448|    987|    }
_ZN3dlx9Processor14ClearRegistersEv:
  464|  4.53k|    {
  465|  4.53k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (465:24): [True: 145k, False: 4.53k]
  ------------------
  466|   145k|        {
  467|   145k|            reg.SetSignedValue(0);
  468|   145k|        }
  469|       |
  470|  4.53k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (470:24): [True: 145k, False: 4.53k]
  ------------------
  471|   145k|        {
  472|   145k|            reg.SetValue(0.0f);
  473|   145k|        }
  474|       |
  475|  4.53k|        m_FPSR.SetStatus(false);
  476|  4.53k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  479|  4.53k|    {
  480|  4.53k|        m_MemoryBlock.Clear();
  481|  4.53k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  488|   156k|    {
  489|   156k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  490|       |
  491|   156k|        m_LastRaisedException = exception;
  492|       |
  493|   156k|        switch (exception)
  494|   156k|        {
  495|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (495:13): [True: 6, False: 156k]
  ------------------
  496|      6|                m_Halted = true;
  497|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  498|      6|                return;
  499|  44.9k|            case Exception::Overflow:
  ------------------
  |  Branch (499:13): [True: 44.9k, False: 111k]
  ------------------
  500|  44.9k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  44.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  501|  44.9k|                return;
  502|  47.9k|            case Exception::Underflow:
  ------------------
  |  Branch (502:13): [True: 47.9k, False: 108k]
  ------------------
  503|  47.9k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  47.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  504|  47.9k|                return;
  505|      1|            case Exception::Trap:
  ------------------
  |  Branch (505:13): [True: 1, False: 156k]
  ------------------
  506|      1|                m_Halted = true;
  507|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  508|      1|                return;
  509|      8|            case Exception::Halt:
  ------------------
  |  Branch (509:13): [True: 8, False: 156k]
  ------------------
  510|      8|                m_Halted = true;
  511|      8|                return;
  512|     45|            case Exception::UnknownLabel:
  ------------------
  |  Branch (512:13): [True: 45, False: 156k]
  ------------------
  513|     45|                m_Halted = true;
  514|     45|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  515|     45|                return;
  516|  63.7k|            case Exception::BadShift:
  ------------------
  |  Branch (516:13): [True: 63.7k, False: 93.0k]
  ------------------
  517|  63.7k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  63.7k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  518|  63.7k|                return;
  519|     16|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (519:13): [True: 16, False: 156k]
  ------------------
  520|     16|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     16|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  521|     16|                m_Halted = true;
  522|     16|                return;
  523|     15|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (523:13): [True: 15, False: 156k]
  ------------------
  524|     15|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     15|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  525|     15|                m_Halted = true;
  526|     15|                return;
  527|       |
  528|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  529|      0|            default:
  ------------------
  |  Branch (529:13): [True: 0, False: 156k]
  ------------------
  530|      0|                PHI_ASSERT_NOT_REACHED();
  531|   156k|#endif
  532|   156k|        }
  533|       |
  534|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  535|      0|        PHI_ASSERT_NOT_REACHED();
  536|      0|#endif
  537|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  558|      8|    {
  559|      8|        return m_MemoryBlock;
  560|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  573|   441k|    {
  574|   441k|        return m_NextProgramCounter;
  575|   441k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  578|  1.45M|    {
  579|  1.45M|        m_NextProgramCounter = new_npc;
  580|  1.45M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   36|  8.52M|    {
   37|  8.52M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   38|  8.52M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   39|       |
   40|  8.52M|        switch (expected_access)
   41|  8.52M|        {
   42|  1.98M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (42:13): [True: 1.98M, False: 6.54M]
  ------------------
   43|  1.98M|                return true;
   44|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (44:13): [True: 0, False: 8.52M]
  ------------------
   45|      0|                return false;
   46|   107k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (46:13): [True: 107k, False: 8.42M]
  ------------------
   47|   107k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (47:24): [True: 53.7k, False: 53.7k]
  |  Branch (47:63): [True: 53.7k, False: 0]
  ------------------
   48|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (48:13): [True: 0, False: 8.52M]
  ------------------
   49|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (50:24): [True: 0, False: 0]
  ------------------
   51|  61.0k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (51:13): [True: 61.0k, False: 8.46M]
  ------------------
   52|  61.0k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (52:24): [True: 30.5k, False: 30.5k]
  |  Branch (52:63): [True: 30.5k, False: 0]
  ------------------
   53|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (53:13): [True: 0, False: 8.52M]
  ------------------
   54|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (54:24): [True: 0, False: 0]
  |  Branch (54:64): [True: 0, False: 0]
  ------------------
   55|  6.37M|            default:
  ------------------
  |  Branch (55:13): [True: 6.37M, False: 2.15M]
  ------------------
   56|  6.37M|                return expected_access == access;
   57|  8.52M|        }
   58|  8.52M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   217k|    {
   14|   217k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 31.9k, False: 185k]
  ------------------
   15|  31.9k|        {
   16|  31.9k|            char first_char = token[0];
   17|  31.9k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 13.1k, False: 18.8k]
  |  Branch (17:38): [True: 1.10k, False: 17.7k]
  ------------------
   18|  14.2k|            {
   19|  14.2k|                char second_char = token[1];
   20|  14.2k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 13.3k, False: 894]
  |  Branch (20:43): [True: 13.2k, False: 87]
  ------------------
   21|  13.2k|                {
   22|  13.2k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  13.2k|                }
   24|  14.2k|            }
   25|  31.9k|        }
   26|   185k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 96.8k, False: 88.5k]
  ------------------
   27|  96.8k|        {
   28|  96.8k|            char first_char = token[0];
   29|  96.8k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 6.04k, False: 90.7k]
  |  Branch (29:38): [True: 2.44k, False: 88.3k]
  ------------------
   30|  8.49k|            {
   31|  8.49k|                char second_char = token[1];
   32|  8.49k|                char third_char  = token[2];
   33|       |
   34|  8.49k|                switch (second_char)
   35|  8.49k|                {
   36|  2.91k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 2.91k, False: 5.57k]
  ------------------
   37|  2.91k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 1.93k, False: 987]
  |  Branch (37:50): [True: 1.86k, False: 67]
  ------------------
   38|  1.86k|                        {
   39|  1.86k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  1.86k|                        }
   41|  1.05k|                        break;
   42|  2.91k|                    }
   43|  2.63k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 2.63k, False: 5.85k]
  ------------------
   44|  2.63k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 2.17k, False: 456]
  |  Branch (44:50): [True: 2.10k, False: 70]
  ------------------
   45|  2.10k|                        {
   46|  2.10k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  2.10k|                        }
   48|    526|                        break;
   49|  2.63k|                    }
   50|  1.94k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 1.94k, False: 6.54k]
  ------------------
   51|  1.94k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.57k, False: 370]
  |  Branch (51:50): [True: 252, False: 118]
  ------------------
   52|  1.82k|                        {
   53|  1.82k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.82k|                        }
   55|    118|                        break;
   56|  1.94k|                    }
   57|    995|                    default: {
  ------------------
  |  Branch (57:21): [True: 995, False: 7.49k]
  ------------------
   58|    995|                        break;
   59|  1.94k|                    }
   60|  8.49k|                }
   61|  8.49k|            }
   62|  96.8k|        }
   63|       |
   64|   198k|        return IntRegisterID::None;
   65|   217k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   198k|    {
   69|   198k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 18.6k, False: 179k]
  ------------------
   70|  18.6k|        {
   71|  18.6k|            char first_char = token[0];
   72|  18.6k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 4.68k, False: 14.0k]
  |  Branch (72:38): [True: 603, False: 13.3k]
  ------------------
   73|  5.28k|            {
   74|  5.28k|                char second_char = token[1];
   75|  5.28k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 4.76k, False: 515]
  |  Branch (75:43): [True: 4.69k, False: 73]
  ------------------
   76|  4.69k|                {
   77|  4.69k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  4.69k|                }
   79|  5.28k|            }
   80|  18.6k|        }
   81|   179k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 91.0k, False: 88.5k]
  ------------------
   82|  91.0k|        {
   83|  91.0k|            char first_char = token[0];
   84|  91.0k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 9.07k, False: 81.9k]
  |  Branch (84:38): [True: 2.18k, False: 79.7k]
  ------------------
   85|  11.2k|            {
   86|  11.2k|                char second_char = token[1];
   87|  11.2k|                char third_char  = token[2];
   88|       |
   89|  11.2k|                switch (second_char)
   90|  11.2k|                {
   91|  2.35k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.35k, False: 8.90k]
  ------------------
   92|  2.35k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.64k, False: 705]
  |  Branch (92:50): [True: 1.58k, False: 67]
  ------------------
   93|  1.58k|                        {
   94|  1.58k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.58k|                        }
   96|    772|                        break;
   97|  2.35k|                    }
   98|  7.29k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 7.29k, False: 3.96k]
  ------------------
   99|  7.29k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 7.20k, False: 92]
  |  Branch (99:50): [True: 7.13k, False: 66]
  ------------------
  100|  7.13k|                        {
  101|  7.13k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  7.13k|                        }
  103|    158|                        break;
  104|  7.29k|                    }
  105|    251|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 251, False: 11.0k]
  ------------------
  106|    251|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 113, False: 138]
  |  Branch (106:50): [True: 70, False: 68]
  ------------------
  107|    183|                        {
  108|    183|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    183|                        }
  110|     68|                        break;
  111|    251|                    }
  112|  1.35k|                    default: {
  ------------------
  |  Branch (112:21): [True: 1.35k, False: 9.89k]
  ------------------
  113|  1.35k|                        break;
  114|    251|                    }
  115|  11.2k|                }
  116|  11.2k|            }
  117|  91.0k|        }
  118|       |
  119|   184k|        return FloatRegisterID::None;
  120|   198k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   218k|    {
  124|   218k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 58.7k, False: 160k]
  ------------------
  125|  58.7k|        {
  126|  58.7k|            char c1 = token[0];
  127|  58.7k|            char c2 = token[1];
  128|  58.7k|            char c3 = token[2];
  129|  58.7k|            char c4 = token[3];
  130|       |
  131|  58.7k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 2.40k, False: 56.3k]
  |  Branch (131:34): [True: 317, False: 56.0k]
  |  Branch (131:49): [True: 2.44k, False: 276]
  |  Branch (131:62): [True: 156, False: 120]
  ------------------
  132|  58.7k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 2.32k, False: 273]
  |  Branch (132:34): [True: 194, False: 79]
  |  Branch (132:49): [True: 2.32k, False: 194]
  |  Branch (132:62): [True: 0, False: 194]
  ------------------
  133|  58.7k|        }
  134|       |
  135|   160k|        return false;
  136|   218k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   338k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   159k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|   655k|    {
   41|   655k|        return m_Type;
   42|   655k|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   239k|    {
   51|   239k|        return m_LineNumber;
   52|   239k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   198k|    {
   56|   198k|        return m_Column;
   57|   198k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   124k|    {
   66|   124k|        return m_Text;
   67|   124k|    }
_ZNK3dlx5Token7HasHintEv:
   79|  45.0k|    {
   80|  45.0k|        return m_HasHint;
   81|  45.0k|    }
_ZNK3dlx5Token7GetHintEv:
   84|  59.0k|    {
   85|  59.0k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|  59.0k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|  59.0k|                   m_Type == Type::ImmediateInteger);
   88|  59.0k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|  59.0k|        return m_Hint;
   91|  59.0k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  4.53k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  4.53k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  4.53k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  1.39k|    {
   51|  1.39k|        auto it = m_Iterator;
   52|  5.56k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 4.17k, False: 1.38k]
  ------------------
   53|  4.17k|        {
   54|  4.17k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 7, False: 4.16k]
  ------------------
   55|      7|            {
   56|      7|                return false;
   57|      7|            }
   58|  4.17k|        }
   59|       |
   60|  1.38k|        return true;
   61|  1.39k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|   498k|    {
   65|   498k|        return m_Iterator != m_Tokens.end();
   66|   498k|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|   497k|    {
   70|   497k|        return m_Iterator == m_Tokens.end();
   71|   497k|    }
_ZN3dlx11TokenStream7consumeEv:
   84|   497k|    {
   85|   497k|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|   497k|        return *m_Iterator++;
   91|   497k|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  1.38k|    {
  164|  1.38k|        return m_Iterator;
  165|  1.38k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    192|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    192|        return m_Tokens.rbegin();
  224|    192|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  1.85k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  1.85k|        return m_Tokens.rend();
  233|  1.85k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  4.53k|    {
   63|  4.53k|        TokenStream tokens;
   64|       |
   65|  4.53k|        std::string_view current_token;
   66|       |
   67|  4.53k|        phi::u64 current_line_number{1u};
   68|  4.53k|        phi::u64 current_column{1u};
   69|  4.53k|        phi::u64 token_begin{0u};
   70|       |
   71|  4.53k|        phi::boolean parsing_comment{false};
   72|       |
   73|  1.28M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 1.27M, False: 4.53k]
  ------------------
   74|  1.27M|        {
   75|  1.27M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  1.27M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 183k, False: 1.09M]
  ------------------
   78|   183k|            {
   79|   183k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 50.8k, False: 133k]
  ------------------
   80|  50.8k|                {
   81|       |                    // Skip empty lines
   82|  50.8k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|  50.8k|                                        current_line_number, current_column);
   84|       |
   85|  50.8k|                    parsing_comment = false;
   86|  50.8k|                    current_line_number += 1u;
   87|  50.8k|                    current_column = 1u;
   88|  50.8k|                    continue;
   89|  50.8k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   133k|                tokens.emplace_back(
   93|   133k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   133k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   133k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   133k|                                    current_line_number, current_column);
   98|       |
   99|   133k|                current_token   = std::string_view{};
  100|   133k|                parsing_comment = false;
  101|   133k|                current_line_number += 1u;
  102|   133k|                current_column = 0u;
  103|   133k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  1.09M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 1.15k, False: 1.09M]
  |  Branch (105:34): [True: 70.3k, False: 1.02M]
  ------------------
  106|  71.5k|            {
  107|  71.5k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 67.9k, False: 3.56k]
  ------------------
  108|  67.9k|                {
  109|  67.9k|                    token_begin = i;
  110|  67.9k|                }
  111|  3.56k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 2.63k, False: 930]
  ------------------
  112|  2.63k|                {
  113|  2.63k|                    tokens.emplace_back(ParseToken(
  114|  2.63k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  2.63k|                            current_line_number, current_column - current_token.length()));
  116|  2.63k|                    token_begin   = i;
  117|  2.63k|                    current_token = std::string_view{};
  118|  2.63k|                }
  119|       |
  120|  71.5k|                parsing_comment = true;
  121|  71.5k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  71.5k|            }
  123|  1.02M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 130k, False: 890k]
  ------------------
  124|   130k|            {
  125|       |                // simply append the character
  126|   130k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   130k|            }
  128|   890k|            else
  129|   890k|            {
  130|       |                // Not parsing a comment
  131|   890k|                switch (c)
  132|   890k|                {
  133|   120k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 120k, False: 770k]
  ------------------
  134|   122k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 1.73k, False: 888k]
  ------------------
  135|   124k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 2.62k, False: 887k]
  ------------------
  136|   124k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 760, False: 123k]
  ------------------
  137|    760|                        {
  138|    760|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|    760|                            continue;
  141|    760|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   123k|                        tokens.emplace_back(ParseToken(
  145|   123k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   123k|                                current_line_number, current_column - current_token.length()));
  147|   123k|                        current_token = std::string_view{};
  148|   123k|                        break;
  149|  9.00k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 9.00k, False: 881k]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  9.00k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 7.67k, False: 1.32k]
  ------------------
  152|  7.67k|                        {
  153|  7.67k|                            current_token =
  154|  7.67k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  7.67k|                            tokens.emplace_back(ParseToken(
  156|  7.67k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  7.67k|                                    current_line_number,
  158|  7.67k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  7.67k|                            current_token = std::string_view{};
  161|  7.67k|                        }
  162|  1.32k|                        else
  163|  1.32k|                        {
  164|       |                            // Orphan colon
  165|  1.32k|                            token_begin = i;
  166|       |
  167|  1.32k|                            tokens.emplace_back(Token::Type::Colon,
  168|  1.32k|                                                source.substr(token_begin.unsafe(), 1),
  169|  1.32k|                                                current_line_number, current_column);
  170|  1.32k|                        }
  171|  9.00k|                        break;
  172|  19.0k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 19.0k, False: 871k]
  ------------------
  173|  21.9k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 2.84k, False: 887k]
  ------------------
  174|  23.2k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 1.30k, False: 889k]
  ------------------
  175|  23.2k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 19.6k, False: 3.59k]
  ------------------
  176|  19.6k|                        {
  177|  19.6k|                            tokens.emplace_back(ParseToken(
  178|  19.6k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  19.6k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  19.6k|                            current_token = std::string_view{};
  182|  19.6k|                        }
  183|       |
  184|  23.2k|                        Token::Type type;
  185|  23.2k|                        switch (c)
  186|  23.2k|                        {
  187|  19.0k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 19.0k, False: 4.14k]
  ------------------
  188|  19.0k|                                type = Token::Type::Comma;
  189|  19.0k|                                break;
  190|  2.84k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 2.84k, False: 20.4k]
  ------------------
  191|  2.84k|                                type = Token::Type::OpenBracket;
  192|  2.84k|                                break;
  193|  1.30k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 1.30k, False: 21.9k]
  ------------------
  194|  1.30k|                                type = Token::Type::ClosingBracket;
  195|  1.30k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 23.2k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  23.2k|#endif
  201|  23.2k|                        }
  202|       |
  203|  23.2k|                        token_begin = i;
  204|       |
  205|  23.2k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  23.2k|                                            current_line_number, current_column);
  207|  23.2k|                        break;
  208|       |
  209|   733k|                    default:
  ------------------
  |  Branch (209:21): [True: 733k, False: 156k]
  ------------------
  210|   733k|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 218k, False: 514k]
  ------------------
  211|   218k|                        {
  212|   218k|                            token_begin = i;
  213|   218k|                        }
  214|       |
  215|       |                        // simply append the character
  216|   733k|                        current_token =
  217|   733k|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|   890k|                }
  219|   890k|            }
  220|       |
  221|  1.22M|            current_column += 1u;
  222|  1.22M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  4.53k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.12k, False: 2.41k]
  ------------------
  226|  2.12k|        {
  227|  2.12k|            tokens.emplace_back(
  228|  2.12k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.12k|                               current_line_number, current_column - current_token.length()));
  230|  2.12k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  4.53k|        tokens.finalize();
  234|       |
  235|  4.53k|        return tokens;
  236|  4.53k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   289k|    {
   11|   289k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 4.03k, False: 285k]
  |  Branch (11:35): [True: 3.95k, False: 82]
  ------------------
   12|  3.95k|        {
   13|  3.95k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  3.95k|            if (number)
  ------------------
  |  Branch (15:17): [True: 2.55k, False: 1.40k]
  ------------------
   16|  2.55k|            {
   17|  2.55k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  2.55k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  2.55k|            }
   20|       |
   21|  1.40k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  3.95k|        }
   23|       |
   24|   285k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 294, False: 284k]
  |  Branch (24:35): [True: 70.2k, False: 214k]
  ------------------
   25|  70.5k|        {
   26|  70.5k|            return {Token::Type::Comment, token, line_number, column};
   27|  70.5k|        }
   28|       |
   29|   214k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 5.58k, False: 208k]
  ------------------
   30|  5.58k|        {
   31|  5.58k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  5.58k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  5.58k|        }
   34|       |
   35|   208k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 2.32k, False: 206k]
  ------------------
   36|  2.32k|        {
   37|  2.32k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  2.32k|        }
   39|       |
   40|   206k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 18.9k, False: 187k]
  ------------------
   41|  18.9k|        {
   42|  18.9k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  18.9k|                    static_cast<std::uint32_t>(id)};
   44|  18.9k|        }
   45|       |
   46|   187k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 13.5k, False: 174k]
  ------------------
   47|  13.5k|        {
   48|  13.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  13.5k|                    static_cast<std::uint32_t>(id)};
   50|  13.5k|        }
   51|       |
   52|   174k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 118k, False: 55.7k]
  ------------------
   53|   118k|        {
   54|   118k|            return {Token::Type::OpCode, token, line_number, column,
   55|   118k|                    static_cast<std::uint32_t>(opcode)};
   56|   118k|        }
   57|       |
   58|  55.7k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   174k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  4.53k|    {
   53|       |        // Constants
   54|  4.53k|        constexpr std::uint8_t number_of_opcodes =
   55|  4.53k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  4.53k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  4.53k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  4.53k|        std::string ret;
   60|       |
   61|   283k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 278k, False: 4.52k]
  ------------------
   62|   278k|        {
   63|   278k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   278k|            switch (current_value)
   66|   278k|            {
   67|       |                // OpCode
   68|   103k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 103k, False: 175k]
  ------------------
   69|       |                    // Has one more value
   70|   103k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 103k, False: 77]
  ------------------
   71|   103k|                    {
   72|   103k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   103k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   103k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1, False: 103k]
  ------------------
   77|      1|                        {
   78|      1|                            return detail::ErrorString;
   79|      1|                        }
   80|   103k|                    }
   81|   103k|                    break;
   82|   103k|                }
   83|       |
   84|       |                // Int Register
   85|   103k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 19.4k, False: 259k]
  ------------------
   86|       |                    // Has one more value
   87|  19.4k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 19.4k, False: 10]
  ------------------
   88|  19.4k|                    {
   89|  19.4k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  19.4k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  19.4k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 19.4k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  19.4k|                    }
   97|  19.4k|                    break;
   98|  19.4k|                }
   99|       |
  100|       |                // Float register
  101|  19.4k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 14.0k, False: 264k]
  ------------------
  102|       |                    // Has one more value
  103|  14.0k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 14.0k, False: 10]
  ------------------
  104|  14.0k|                    {
  105|  14.0k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  14.0k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  14.0k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 14.0k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  14.0k|                    }
  113|  14.0k|                    break;
  114|  14.0k|                }
  115|       |
  116|       |                // Floating point status register
  117|  14.0k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 2.36k, False: 276k]
  ------------------
  118|  2.36k|                    ret += "FPSR";
  119|  2.36k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 2.35k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  2.35k|                    break;
  125|  2.36k|                }
  126|       |
  127|       |                // Immediate integer
  128|  5.71k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 5.71k, False: 272k]
  ------------------
  129|  5.71k|                    ret += "#";
  130|  5.71k|                    [[fallthrough]];
  131|  5.71k|                }
  132|       |
  133|       |                // Integer literal
  134|  15.4k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 9.76k, False: 268k]
  ------------------
  135|  15.4k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  15.4k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 15.4k, False: 41]
  ------------------
  138|  15.4k|                    {
  139|  15.4k|                        std::int16_t value = 0;
  140|       |
  141|  46.1k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 30.7k, False: 15.4k]
  ------------------
  142|  30.7k|                        {
  143|  30.7k|                            value <<= 8;
  144|  30.7k|                            value &= data[index++];
  145|  30.7k|                        }
  146|       |
  147|  15.4k|                        ret += std::to_string(value);
  148|  15.4k|                    }
  149|  15.4k|                    break;
  150|  5.71k|                }
  151|       |
  152|       |                // Label
  153|  6.50k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 6.50k, False: 272k]
  ------------------
  154|  6.50k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  6.50k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 6.50k, False: 3]
  ------------------
  157|  6.50k|                    {
  158|  6.50k|                        std::string label_name = "lbl_";
  159|       |
  160|  38.7k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 32.2k, False: 6.50k]
  ------------------
  161|  32.2k|                        {
  162|  32.2k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  32.2k|                            label_name += c;
  165|  32.2k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  6.50k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 6.10k, False: 397]
  |  Branch (168:45): [True: 5.12k, False: 985]
  ------------------
  169|  5.12k|                        {
  170|  5.12k|                            label_name += ':';
  171|  5.12k|                            ret += label_name;
  172|  5.12k|                        }
  173|  1.38k|                        else
  174|  1.38k|                        {
  175|  1.38k|                            ret += label_name;
  176|  1.38k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 1.38k]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|  1.38k|                        }
  181|  6.50k|                    }
  182|  6.50k|                    break;
  183|  6.50k|                }
  184|       |
  185|       |                // Newline
  186|  47.0k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 47.0k, False: 231k]
  ------------------
  187|  47.0k|                    ret += '\n';
  188|  47.0k|                    break;
  189|  6.50k|                }
  190|       |
  191|       |                // Comment
  192|  70.4k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 70.4k, False: 208k]
  ------------------
  193|  70.4k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  70.4k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 70.3k, False: 22]
  ------------------
  196|  70.3k|                    {
  197|  70.3k|                        std::string comment = "; ";
  198|       |
  199|   420k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 350k, False: 70.3k]
  ------------------
  200|   350k|                        {
  201|   350k|                            comment += static_cast<char>(data[index++]);
  202|   350k|                        }
  203|       |
  204|  70.3k|                        ret += comment + '\n';
  205|  70.3k|                    }
  206|  70.4k|                    break;
  207|  6.50k|                }
  208|       |
  209|       |                // Ignore
  210|      5|                default:
  ------------------
  |  Branch (210:17): [True: 5, False: 278k]
  ------------------
  211|      5|                    return detail::ErrorString;
  212|   278k|            }
  213|   278k|        }
  214|       |
  215|  4.52k|        return ret;
  216|  4.53k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   140k|        {
   20|   140k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 138k, False: 1.93k]
  ------------------
   21|   138k|            {
   22|   138k|                std::uint8_t val = data[index++];
   23|   138k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 120k, False: 18.1k]
  ------------------
   24|   120k|                {
   25|   120k|                    text += ' ';
   26|   120k|                }
   27|  18.1k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 18.1k, False: 6]
  ------------------
   28|  18.1k|                {
   29|  18.1k|                    text += ',';
   30|  18.1k|                }
   31|      6|                else
   32|      6|                {
   33|      6|                    return false;
   34|      6|                }
   35|   138k|            }
   36|       |
   37|   140k|            return true;
   38|   140k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  32.2k|        {
   42|  32.2k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 24.3k, False: 7.90k]
  ------------------
   43|  24.3k|            {
   44|  24.3k|                return '_';
   45|  24.3k|            }
   46|       |
   47|  7.90k|            return c;
   48|  32.2k|        }

LLVMFuzzerTestOneInput:
   12|  4.53k|{
   13|  4.53k|    static dlx::Processor processor;
   14|       |
   15|  4.53k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  4.53k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  4.53k|    processor.ClearRegisters();
   22|  4.53k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  4.53k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 987, False: 3.55k]
  ------------------
   26|    987|    {
   27|    987|        processor.ExecuteCurrentProgram();
   28|    987|    }
   29|       |
   30|  4.53k|    return 0;
   31|  4.53k|}

